/* *****************************************************************************
                 ATENCAO!    CONVERSAO PROGRESS - ORACLE
            ESTE FONTE ESTA ENVOLVIDO NA MIGRACAO PROGRESS->ORACLE!
+----------------------------------------+-------------------------------------+
| Rotina Progress                        | Rotina Oracle PLSQL                 |
+----------------------------------------+-------------------------------------+
| lista_cartoes                          | CADA0004.pc_lista_cartoes           |
| retorna-situacao                       | CADA0004.fn_retorna_situacao_cartao |
| f_verifica_adm                         | CADA0004.fn_verifica_adm            |
+----------------------------------------+-------------------------------------+

  TODA E QUALQUER ALTERACAO EFETUADA NESSE FONTE A PARTIR DE 20/NOV/2012 DEVERA
  SER REPASSADA PARA ESTA MESMA ROTINA NO ORACLE, CONFORME DADOS ACIMA.

  PARA DETALHES DE COMO PROCEDER, FAVOR ENTRAR EM CONTATO COM AS SEGUINTES
  PESSOAS:
   - Daniel Zimmermann    (CECRED)
   - Marcos Martini       (SUPERO)

****************************************************************************** */

/*..............................................................................

    Programa  : b1wgen0028.p
    Autor     : Guilherme
    Data      : Marco/2008                    Ultima Atualizacao: 12/05/2017
    
    Dados referentes ao programa:

    Objetivo  : BO - ref. Rotina CARTOES CREDITO da tela ATENDA.

    Alteracoes: 03/09/2008 - Implementar solicitacao de 2 via de senha (David).
                                 .
                16/09/2008 - Retornar data de solicitacao do cartao pela
                             temp-table tt-dados_cartao (David). 
                             - Se ja existe solicitacao para 2 via de senha, so 
                             permitir nova solicitacao 15 dias apos o ultimo
                             pedido (David).
        
                20/10/2008 - Nao permitir solicitacao de senha se cartao nao 
                             estiver em uso (David).
                                         
                31/10/2008 - Nao permitir desfazer o cancelamento se data do
                             dtcancel <> dtmvtolt, exceto cartao BB (David).
                                         
                22/12/2008 - Datas de validade do cartao no format MM/YYYY
                             - Valida cartoes BB por cpf(Guilherme).
                                        
                26/12/2008 - Nao permitir solicitacao de 2via se o cartao nao
                             foi entregue ainda (David).
                                         
                09/02/2009 - Nao permitir solicitacao de 2via se situacao da
                             conta for encerrada -- cdsitdct <> 1 e 6 (David).
                             - Valida modalidade do cartao BB por CPF (David).
                                         
                13/02/2009 - Alteracao cdempres (Diego).
                                         
                20/03/2009 - Permitir alteracao do vencimento somentes 30 dias
                             apos a data de entrega ou da ultima alteracao
                             - Incluir criticas sobre situacao e tipo da conta do
                             cooperado (David).
                                         
                22/04/2009 - Nao permitir acesso as opcoes Alterar, Revovar e
                             Canc/Blq se foi solicitada 2via do cartao (David).
                                         
                09/06/2009 - Ajustes para utilizacao no Ayllos Caracter:
                             - Correcao da clausula de atribuicao do valor de
                             nmcartao na procedure contrato_bb 
                             - Eliminacao da gravacao da variavel aux_dstransa
                             para outros tipos de impressao na procedure
                             impressoes_cartoes 
                             - Inclusao do campo lbcanblq na temp-table 
                             tt-dados_cartao (GATI - Eder)
                             - Regalias para conta na VIACREDI
                             - Validar o conjuge na nova proposta com o crapcje.
                             - Somente alterar limite de debito da conta se for
                             solicitado cartao multiplo BB (Guilherme).
                             - Alteracao CDOPERAD (Kbase/Diego).
                             
                13/10/2009 - crawcrd.flgctitg = 0 quando alterar limite 
                             (Guilherme).
                                         
                28/01/2010 - Liberar cartao na conta 942405, juridica 
                             Tarefa 30077 (Magui).
                                         
                04/03/2010 - Novos parametros para procedure consulta-poupanca
                             da BO b1wgen0006 (David).
                                         
                15/03/2010 - Liberar cartao na conta 2919109, juridica.
                             Tarefa 30994 (Magui).
                                         
                16/03/2010 - Liberar cartao na conta 2466970, juridica.
                             Tarefa 30862 (Magui).
                                         
                04/05/2010 - Permitir renovacao para algumas pessoas
                             juridicas (Magui).
                                         
                19/05/2010 - Incluido novo motivo de cancelamento de cartao 
                             "Por fraude" (Elton).
                                         
                29/06/2010 - Nao permite desfazer a solicitacao de 2a. via de 
                             cartao em uma data diferente da data da solicitacao
                             (Elton).
                             
                29/07/2010 - Retornar mensagem de aviso referente ao 0800 do
                             BB na opcao de desbloqueio (David).
                                         
                04/08/2010 - Acerto na alteracao de limite do cartao de credito
                             na procedure altera_limcred_cartao (Elton).
                                         
                26/08/2010 - Inclusao PJ  (GATI-Sandro).
                                         
                06/09/2010 - Eliminar a opcao de solicitar 2via de cartao
                             por motivo Perda/Roubo (Irlan)                
                                         
                23/11/2010 - Bloquear inclusao, solicitacao de 2a via e
                             alteracao da data de vencimento da fatura de
                             cartoes CECRED VISA (Diego).
                                         
                25/11/2010 - Incluido parametro flgliber na proc. lista_cartoes
                             para tratar bloqueio das op. de cartoes do Pac 5 da 
                             Coop.2 (Transferencia do Pac) (Irlan)
                                         
                17/01/2011 - Na consulta de cartao PJ, mostrar representante que
                             recebeu o cartao na "entrega" caso nao exista 
                             representante solicitante cadastrado (Diego).
                                         
                18/01/2011 - Criada a procedure ValidaNome utilizada para a 
                             solicitacao de 2via e novo cartao CECRED VISA
                             (Henrique). 
                                         
                19/01/2011 - Inclusao de campo Nome Extenso da Cooperativa 
                             (nmextcop) na gravacao de temp-tables para 
                             impressao de documentos (GATI - Eder).
                                         
                01/02/2011 - Incluido FIRST na leitura da tabela crapass 
                             na procedure lista_cartoes para buscar numero
                             da conta do titular do cartao (Diego).
                                         
                21/02/2011 - Retirado bloqueio da Bradesco Adm das procedures
                             valida_nova_proposta e 
                             carrega_dados_solicitacao2via_cartao (Irlan).
                                         
                23/02/2011 - Inclusão da opcão Encerramento para cartao BB
                             (Isara - RKAM).
                                         
                28/03/2011 - Incluído campo nmresadm na criação da temp-table
                             tt-termocan-cartao (Irlan).
                                         
                27/04/2011 - CEP integrado. Alteração de parametros em:
                             grava_dados_habilitacao, renova_cartao, 
                             altera_limcred_cartao, cadastra_novo_cartao e
                             efetua_entrega2via_cartao. (André - DB1)
                                         
                24/05/2011 - Ajuste na impressao dos avalistas, utilizando os
                             novos parametros da alteracao acima (David).
                                         
                15/07/2011 - Inclusao da procedure extrato_cartao_bradesco
                             (Guilherme/Supero)
                                         
                08/08/2011 - Incluir os cartoes Bloq. na verificacao dos Limite
                             das administradoras do BB - Tarefa 41720 (Ze).
                                         
                01/09/2011 - Impressao do Extrato Cecred Visa em PDF
                             (Guilherme/Supero)
                                         
                12/09/2011 - Incluida procedure busca-cartao (Henrique).
                                         
                12/09/2011 - Incluir tratamento para Sol. 2via Cartao Bradesco
                             (Ze/Fabricio).
                                         
                23/09/2011 - Adicionado controle de cobranca de anuidade
                             (Evandro).
                                         
                24/09/2011 - Ajuste na procedure busca-cartao (Henrique).
                                         
                24/10/2011 - crawcrd.dddebant = novo vencimento cartao. 
                             (Fabricio)
                                         
                25/10/2011 - Possibilitar alteracao da data do vencimento com a
                             mesma data do cartao anterior (Ze).
                                         
                14/11/2011 - Ajuste na procedure busca-cartao (Adriano).   
                                         
                14/12/2011 - Ajuste na procedure extrato_cartao_bradesco para 
                             acrescentar o campo crapecv.dsparcel no campo 
                             dsestabe (Adriano).  
                                         
                22/12/2011 - Editada a procedure 'extrato_periodos' e criada a
                             procedure 'identifica-cartao' para InternetBanking
                             (Lucas).
                                         
                17/01/2012 - Handle preso na BO99999 (Oscar).
                                         
                17/04/2012 - Inclusão da Procedure gera_impressao_contrato_bb
                                         (David Kruger).
                                         
                01/06/2012 - Alterado função carrega_dados_limcred_cartao para
                             bloquear alteração de limite para os cartões 
                             CREDICARD MASTERCARD (Guilherme Maba).
                                         
                10/07/2012 - Incluído parâmetro par_nmextttl na procedure 
                             "cadastra_novo_cartao" (Guilherme Maba).
                                         
                30/07/2012 - Ajustes para Oracle (Evandro).
                                         
                07/08/2012 - Verificar endereco antes de solicitar 2a.Via 
                             (Gabriel).
                                         
                22/08/2012 - Substituida atribuicao do tipo de endereco 12 por 9
                             na validacao de endereco de cartao PJ (Diego).  
                                         
                05/09/2012 - Desfeito a alteracao do campo crapalt.dsaltera
                             (Tiago).     
                                         
                11/10/2012 - Incluido a passagem de um novo parametro na chamada
                             da procedure saldo_utiliza - Projeto GE (Adriano).
                                         
                29/10/2012 - Incluir os pacs migrados da Viacredi no bloqueio 
                             das operacoes com cartao de credito a partir 
                             de 11/12/2012 (Irlan)
                                         
                08/11/2012 - Permitir que operadores dos setores de CARTOES e
                             TI desfaçam a solicitação de 2via de cartao
                             independente da data (Lucas).
                                         
                16/11/2012 - Quando procurado associado por cpf, verificar 
                             primeiro se nao foi demitido (Gabriel).             
                                         
                05/12/2012 - Incluido revisao cadastral para algumas situacoes
                             (David Kruger).
                                         
                21/12/2012 - Separar em uma funcao a situacao do cartao para
                             reaproveitamento de codigo (Gabriel).
                                         
                28/12/2012 - Incluso a passagem do parametro par_cdoperad nas 
                             procedures cria-tabelas-avalistas e  
                             atualiza_tabela_avalistas (Daniel).             
                                         
                22/01/2013 - Ajuste na passagem de parametros e definicao da 
                             retorna-situacao (Guilherme)
                                         
                08/02/2013 - Padronizado exibicao da situacao cartao atendendo chamado
                             43350 (Daniel) 
                                         
                14/03/2013 - Alterado a critica 64 para 332 (David Kruger).
                                         
                01/04/2013 - Incluido a chamada da procedure alerta_fraude
                             nas procedures:
                             - valida_nova_proposta; 
                             - libera_cartao;
                             - entrega_cartao;
                             - altera_limdeb_cartao;
                             - valida_dados_limdeb_cartao;
                             - altera_dtvencimento_cartao;
                             - efetua_solicitacao2via_cartao;
                             - valida_renovacao_cartao;
                             - carrega_dados_inclusao;
                             - carrega_dados_limdeb_cartao;
                             - valida_dados_entrega2via_cartao;
                             - efetua_entrega2via_cartao;
                             - cadastra_novo_cartao
                             (Adriano).
                                         
                15/04/2013 - Retirar opcao de solicitar cartao da Bradesco 
                             Adm. (Irlan) 
                                         
                29/04/2013 - Incluido tipo de pesquisa(par_tipopesq = 4)
                             para pesquisar por conta ITG (Daniele).
                                         
                06/05/2013 - Incluso tratamento para somente listar a administradora
                             Bradesco (cdadmcrd = 3) se o operador for do grupo "CARTOES"
                             (Daniel).
                                         
                14/05/2013 - Incluido novos campos na gravacao da crawcrd na rotina
                             desfaz_solici2via_cartao (Tiago).
                                         
                22/05/2013 - Alterado o caminho de instanciacao da b1wgen9999.p
                             (Adriano).
                                         
                11/06/2013 - Liberada a solicitação de cartões Bradesco (cdadmcrd = 3) 
                             independente do operador do Ayllos (carrega_dados_inclusao)
                             (Carlos)
                                         
                26/06/2013 - Comentado as procedures "libera_cartao" e "desfaz_liberacao_cartao"
                             Softdesk 71086  (Daniel).
                                         
                19/07/2013 - Alterada regra que valida se pode ou nao desfazer encerramento de
                             cartao BB - Softdesk 77237 (Rodrigo).
                                         
                16/09/2013 - Movido o matches da consulta com crapalt.dsaltera, procedure
                             solicita_revisao_cadastral_cartoes, para uma instrução IF.
                             (Carlos)
                                         
                30/10/2013 - Alterado atribuicao da variavel aux_nrdofone da crapass
                             para craptfc. (Reinert)              
                                         
                21/11/2013 - Ajustes para migracao da acredicoop (Tiago).
                                         
                10/12/2013 - Ajuste leitura para ganho performace (Daniel).
                                         
                20/12/2013 - Adicionado validate para as tabelas crawcrd,
                             crapalt, crapcrd, craphcj, crapncp (Tiago).
                                         
                19/02/2014 - Alterado de onde é pego o vlsalari, da crapass para
                             a crapttl (Carlos)
                                         
                17/03/2014 - Bloqueio de alteracao de limite dos cartoes CECRED 
                             VISA por operadores que nao sejam do setor CARTOES 
                             (Carlos)
                                         
                24/03/2014 - Ajuste nas procedures "cadastra_novo_cartao",
                             "efetua_entrega2via_cartao" para buscar a proxima 
                             sequencia crapmat.nrctrcrd apartir banco Oracle 
                             (James)             
                                         
                26/03/2014 - Inclusao de grupo de titulares (Jean Michel)
                                         
                10/04/2014 - Inclusao de procedure para alteracao de administradora
                             de cartoes de credito (Jean Michel).
                                         
                23/04/2014 - Inclusao de campo flgprcrd na tabela crawcrd
                             (Jean Michel).
                                         
                16/05/2014 - Ajuste na procedure "lista_cartoes" para trazer o campo
                             flgcchip. (James)
                                         
                20/05/2014 - Inclusao da procedure "valida_entrega_cartao_bancoob".
                             (James)
                                         
                27/05/2014 - Adicionado tratamento por tipo de pessoa e tipo de 
                             cartao na procedure valida_nova_proposta. 
                             (Jean Michel) - Projeto Cartoes Bancoob 
                                         
                28/05/2014 - Ajuste na procedure "impressoes_cartoes" para imprimir
                             o novo relatorio de entrega, quando for bancoob. (James)
                                         
                10/06/2014 - (Chamado 117414) Troca do campo crapass.nmconjug por crapcje.nmconjug
                             (Tiago Castro - RKAM).
                                         
                17/06/2014 - Correção de tipo de pessoa para calculo de salário em
                             nova inclusao de cartão cred. (SD. 165451 - Lunelli) 
                                         
                18/06/2014 - Inclusao do parametro par_tpdpagto na procedure
                             cadastra_novo_cartao (Jean Michel).
                                         
                25/06/2014 - Adicionado o parametro par_dsoperac 
                             (com valor 'CARTAO CREDITO') 'a chamada das
                             procedures cria-tabelas-avalistas e 
                             atualiza_tabela_avalistas. 
                             (Chamado 166383) - (Fabricio)
                                         
                27/06/2014 - Alterada a procedure 'valida_entrega_cartao_bancoob'
                             para somente permitir entrega para departamento de
                             CARTOES na fase de teste (Lunelli - Projeto Bancoob)
                                         
                14/07/2014 - Adicionado novos parametros nas procedures
                             atualiza_tabela_avalistas e cria-tabelas-avalistas
                             (Daniel/Thiago)  
                                         
                15/07/2014 - Permitir exclusão de propostas de cartões bancoob
                             (Lucas Lunelli - Projeto Cartões Bancoob)
                                         
                18/07/2014 - Incluso regra para nao permitir solicitacao cartao
                             Bancoob para menor de 18 anos e nao emancipado
                             (Daniel - SD 179666).
                                         
                25/07/2014 - Incluso processo para alimentar novo campo com
                             lista das bandeiras dos cartoes (Daniel - SD 179666).  
                                         
                28/07/2014 - adicionado parametro de saida em chamada da
                             proc. cria-tabelas-avalistas.
                             (Jorge/Gielow) - SD 156112                           
                             - Novo tratamento para exibição parcial do
                             número do cartão (Lunelli).    
                                         
                07/08/2014 - Não permitir nova proposta de cartão bancoob
                             para departamento diferente CARTOES na fase de 
                             teste (Lunelli - Projeto Bancoob)
                             - Alterado valor da validação do limite de cartão
                             MAESTRO (Lunelli - Projeto Bancoob)
                                         
                13/08/2014 - Ajustado procedure valida_dados_cartao, parametro cdoperad
                             estava como inteiro quando deveria ser char.
                             Ajusdado find da crapadc na procedure carrega_dados_administradoras 
                             o mesmo estava sem o campo cdcooper na regra de leitura.
                             Ajustado procedure altera_administradora, incluso busca pelo nrcpftit
                             e retirado tratamento para criar apenas novo cartao para o 
                             cartao informado por parmetro, conforme orientacao Rodrigo (Daniel).   
                             

                 21/08/2014 - Incluso novo parametro inpessoa na procedure valida_dados_cartao
                 (Daniel) - SoftDesk  188116.     
                                         
                11/09/2014 - Removidas restrições para área de CARTÕES do Projeto
                             Cartões Bancoob (Lucas Lunelli)
                                         
                24/09/2014 - Incluir parametro nmempres na chamada da cadastra_novo_cartao
                             (Renato - Supero) - SD 204631
                                         
                26/09/2014 - Não validar craptlc quando for uma adminstradora entre 10 e 80 na
                             rotina valida_habilitacao ( Renato - Supero ).          
                                         
                01/10/2014 - Incluir parametro na chamada da rotina carrega_dados_inclusao
                             para conrolar o botão habilitar  e alteração na procedure 
                             valida_nova_proposta o habilitar para não verificar para cartões 
                             Bancoob (Vanessa)          
                09/10/2014 - Alterar a rotina carrega_dados_inclusao, para que retorne as 
                             operadoras de cartoes, conforme o tipo do cadastro do associado. 
                             Conforme solicitado no SoftDesk 205314 ( Renato - Supero )
                                         
                10/10/2014 - Alterada rotina verifica_acesso_2via para permitir solicitacao de 
                             segunda via de senha para cartao bancoob encerrados, conforme
                             solicitado no chamado 200560 ( Renato - Supero )
                                         
                27/10/2014 - Zerar o valor do limite do cartão de crédito conforme
                             SD 181559 (Vanessa) 
        
                06/11/2014 - Alterado parametro passado na chamada das procedures
                             cria-tabelas-avalistas e atualiza_tabela_avalistas;
                             de: 'CARTAO CREDITO' para: 'CARTAO CRED.'.
                             Motivo: Possibilidade de erro ao tentar gravar
                             registro de log (craplgm). (Fabricio)
                07/11/2014 - Não efetuar validacao do limite de credito para cartoes Bancoob (Rodrigo)
                                         
                07/11/2014 - Incluir tratamentdo para as contas migradas das 
                             cooperativas Concredi e credimilsul ao listar cartoes
                             retornar false para nao permitir operaçoes (lista_cartoes) 
                             (Odirlei/AMcom).
                                         
                07/11/2014 - Alterar a data da proposta para a data do processo quando solicitar um 
                             upgrade/downgrade e limpar a data de entrega. Conforme 
                             chamado 217188 ( Renato - Supero )
                                         
                11/11/2014 - Alteraçao da rotina de verificaçao do administrador do cartao para
                             inclusao do Bancoob, alteraçao das chamadas desta rotinha, e
                             correçao de erro na validaçao da idade mínima para obtençao do
                             cartao adicional (Dionathan)
                                         
                11/11/2014 - Nao permitir que seja realizada a exclusao de cartoes bancoob
                                         do titular, quando há cadastro de adicionais ( Renato - Supero )
                                         
                04/12/2014 - Ajuste na regra de limite para cartão bancoob, afim de permitir limite zero 
                             e ajustar valores conforme progress, conforme SD 226052. ( Renato - Supero )
                             
                05/12/2014 - Alterar a buscar pelo primeiro registro de cartão, afim de buscar apenas
                             o First. Conforme chamado 230720 ( Renato - Supero )
                
                22/12/2014 - Alterar a procedure lista_cartoes para mostrar o campo crapadc.nmresadm
                             com 30 caracteres. SD 204649 (Vanessa)
                             
                06/01/2014 - Alterar procedure carrega_avalista exibir automaticamente informaçoes do avalista quando informado o CPF. Chamado 228120      
                
                12/01/2015 - Alterar as rotinas de busca de dados de cartão e de validação para permitir que sejam solicitados
                             cartões de puro débito para constas com situação 5. Chamado 231723 ( Renato - Supero )       
                             
                21/01/2015 - Substituida a chamada da procedure consulta-aplicacoes da BO b1wgen0004 
                             pela procedure obtem-dados-aplicacoes da BO b1wgen0081. Foi adicionado o
                             procedimento pc_busca_saldos_aplicacoes da package APLI0005.
                             (Carlos Rafael Tanholi - Projeto Captacao)                             
                             
                13/02/2015 - Não deve considerar a idade para cartões Puro débito, conforme SD 254668. ( Renato - Supero )
                
                08/04/2015 - #272659 Inclusao de validacao na procedure 
                             cancela_bloqueia_cartao para nao cancelar quando for cartao BB.
                             Inclusao de verificacao de permissao de acesso ao encerramento 
                             do cartao na procedure verifica_acesso_enc (Carlos)
                             
                23/06/2015 - Inclusao na procedure "grava_dados_cartao_nao_gerado".
                             (James)
                             
                29/07/2015 - Inclusao procedure "verifica_acesso_tela_taa". (James)
                
                08/10/2015 - Desenvolvimento do projeto 126. (James)
                
                12/08/2015 - Projeto Reformulacao cadastral
                             Eliminado o campo nmdsecao (Tiago Castro - RKAM).
                             
                09/11/2015 - Retirado o alerta de cartao rejeitado ao consultar cartao
                             alerta será apresentado ao acessar tela ATENDA.
                             Projeto 126. (Odirlei-AMcom) 
                             
                25/11/2015 - Liberar consulta do cartao bancoob no Ayllos Web
                             para qualquer departamento do operador (David).
                
                27/11/2015 - Retirado select da funcao fn_sequence e substituido
                             pela chamada da procedure pc_sequence_progress
                             por problemas de cursores abertos 
                             (Tiago/Rodrigo SD347440).
                             
                23/02/2016 - Alteraçao na rotina de alteraçao de senha 
                            (Lucas Lunelli - [PROJ290])
                            
                14/04/2016 - Retirar validaçao de cooperativa incorporada Credimilsul
                             para permitir cancelamento dos cartoes BB (Rodrigo)
                            
                25/04/2016 - Incluir validacao na procedure "grava_dados_cartao_nao_gerado" (James)
                
                17/06/2016 - Inclusão de campos de controle de vendas - M181 ( Rafael Maciel - RKAM)

				07/12/2016 - P341-Automatização BACENJUD - Alterar o uso da descrição do
                             departamento passando a considerar o código (Renato Darosci)
							 
				23/03/2017 - Removendo a possibilidade de solicitar novo cartão com vencimento para o dia	
						     27, conforme solicitado no chamado 636445. (Kelvin)
							 
				06/04/2017 - Ajuste realizado para resolver o problema de estouro de sequence, conforme
							 solicitado no chamado 645013. (Kelvin)
                
                31/05/2017 - Adicao de funcionalidade para armazenagem da tabela de relacionamento
                             entre conta x conta cartao (Anderson).

..............................................................................*/

{ sistema/generico/includes/b1wgen0001tt.i }
{ sistema/generico/includes/b1wgen0004tt.i }
{ sistema/generico/includes/b1wgen0006tt.i }
{ sistema/generico/includes/b1wgen0019tt.i }
{ sistema/generico/includes/b1wgen0021tt.i }
{ sistema/generico/includes/b1wgen0028tt.i }

{ sistema/generico/includes/b1wgen0069tt.i }
{ sistema/generico/includes/b1wgen9999tt.i }

{ sistema/generico/includes/var_internet.i }
{ sistema/ayllos/includes/var_online.i NEW }
{ sistema/generico/includes/gera_erro.i }
{ sistema/generico/includes/gera_log.i }
{ sistema/generico/includes/var_oracle.i }

DEF NEW GLOBAL SHARED STREAM str_1.

DEF  VAR aux_dscartao AS CHAR INIT "NACIONAL,INTERNACIONAL,GOLD"       NO-UNDO.
DEF  VAR aux_cdcartao AS CHAR INIT "1,2,3"                             NO-UNDO.
DEF  VAR aux_dsgraupr AS CHAR INIT
     "Conjuge,Filhos,Companheiro,Primeiro Titular,Segundo Titular,Terceiro Titular,Quarto Titular"     NO-UNDO.
DEF  VAR aux_cdgraupr AS CHAR INIT "1,3,4,5,6,7,8,9,10"                         NO-UNDO.

DEF VAR aux_cdcritic AS INTE                                           NO-UNDO.
DEF VAR aux_tipopesq AS INTE                                           NO-UNDO.
DEF VAR aux_dscritic AS CHAR                                           NO-UNDO.

DEF VAR aux_nrdrowid AS ROWID                                          NO-UNDO.
DEF VAR aux_dstransa AS CHAR                                           NO-UNDO.
DEF VAR aux_dsorigem AS CHAR                                           NO-UNDO.
DEF VAR aux_cdagenci LIKE crapage.cdagenci                             NO-UNDO.
DEF VAR aux_nmconjug LIKE crapcje.nmconjug                             NO-UNDO.
DEF VAR aux_dtnasccj LIKE crapcje.dtnasccj                             NO-UNDO.

DEFINE VARIABLE aux_qtregist AS INTEGER     NO-UNDO.

/*****************
    FUNCOES
*****************/
/* Funcao para verificar qual a administradora do cartão */
FUNCTION f_verifica_adm RETURN INTEGER(INPUT par_cdadmcrd AS INTEGER):

    IF  par_cdadmcrd >= 83  AND  
        par_cdadmcrd <= 88  THEN /*Banco do Brasil*/
        RETURN 1.
    ELSE
    IF  par_cdadmcrd >= 10 AND
        par_cdadmcrd <= 80 THEN /*Bancoob*/
        RETURN 2.
    ELSE /*Bradesco*/
                RETURN 3.
                        
END. /* FUNCTION */

FUNCTION f_tipo_assoc RETURNS INTEGER
    ( INPUT  par_cdcooper AS INTEGER,
      INPUT  par_nrdconta AS INTEGER):

    FOR FIRST crapass FIELDS(inpessoa)
                          WHERE crapass.cdcooper = par_cdcooper     AND
                            crapass.nrdconta = par_nrdconta NO-LOCK:
        END.

    IF  AVAIL crapass THEN
        RETURN crapass.inpessoa.
    ELSE
        RETURN 0.

END FUNCTION.

FUNCTION solicita_revisao_cadastral_cartoes RETURN LOGICAL
      (INPUT par_cdcooper AS INTE,
       INPUT par_nrdcaixa AS INTE,
       INPUT par_cdagenci AS INTE,
       INPUT par_cdoperad AS CHAR,
       INPUT par_dtmvtolt AS DATE,
       INPUT par_iddopcao AS INT,
       INPUT par_cdadmcrd AS INTE,
       INPUT par_nrdconta AS INTE,
       OUTPUT par_dsmensag AS CHAR):

    DEF VAR aux_flgencon AS LOGICAL INIT FALSE                NO-UNDO.
    DEF VAR aux_dsconteu AS CHAR                              NO-UNDO.    
    DEF VAR aux_qtdiarev AS INTEGER                           NO-UNDO.
    DEF VAR h-b1wgen0153 AS HANDLE                            NO-UNDO.
          
    IF (par_iddopcao = 1) OR    /* Novo */
       (par_iddopcao = 7  AND   /* 2aVia */
        par_cdadmcrd = 3) THEN

       DO:
          IF NOT VALID-HANDLE(h-b1wgen0153) THEN
             RUN sistema/generico/procedures/b1wgen0153.p PERSISTENT SET h-b1wgen0153.

          /*  Busca quantidade limite de extratos por mes livres de tarifacao*/
          RUN carrega_par_tarifa_vigente IN h-b1wgen0153 (INPUT par_cdcooper,
                                                          INPUT "LIMDIAREVCAD",
                                                          OUTPUT aux_dsconteu,
                                                          OUTPUT TABLE tt-erro).

          IF VALID-HANDLE(h-b1wgen0153) THEN
             DELETE PROCEDURE h-b1wgen0153. 
                     
          IF RETURN-VALUE <> "OK" THEN
             DO:
                 FIND FIRST tt-erro NO-LOCK NO-ERROR.
                 IF AVAILABLE tt-erro THEN
                    ASSIGN par_dsmensag = tt-erro.dscritic.

                 RETURN FALSE.
             END.
    
          /* Quantidade de dias de revisao que sera verificado */
          ASSIGN aux_qtdiarev = INTEGER(aux_dsconteu) NO-ERROR.          
          IF ERROR-STATUS:ERROR THEN
             DO:  
                  ASSIGN par_dsmensag = "Parametro nao cadastrado. LIMDIAREVCAD".
                  RETURN FALSE.
             END.          
          
          FIND LAST crapalt WHERE crapalt.cdcooper = par_cdcooper AND
                                  crapalt.nrdconta = par_nrdconta AND                                  
                                  crapalt.tpaltera = 1
                                  NO-LOCK NO-ERROR.
                                  
          IF AVAILABLE crapalt THEN
             DO:
                 IF (crapalt.dtaltera + aux_qtdiarev) >= par_dtmvtolt THEN
                    DO:
                        ASSIGN aux_flgencon = TRUE.
                        LEAVE.
                    
                    END.
                     
             END. /* END IF AVAILABLE crapalt THEN */
          
          
          IF  aux_flgencon = FALSE THEN
              DO:
                  ASSIGN par_dsmensag = "Necessario efetuar revisao cadastral.".
                  RETURN FALSE.
              END.

       END.

    RETURN TRUE.

END FUNCTION.

FUNCTION retorna-situacao RETURNS CHAR
    (INPUT par_insitcrd AS INTE,
     INPUT par_dtsol2vi AS DATE,
     INPUT par_cdadmcrd AS INTE):

    DEF VAR aux_dssitcrd AS CHARACTER                       NO-UNDO.
   
    ASSIGN aux_dssitcrd = IF (par_insitcrd  = 4  AND 
                              par_dtsol2vi <> ?) OR
                              par_insitcrd  = 7  THEN 
                              "Sol.2v"
                          ELSE
                          IF  par_insitcrd = 0   THEN 
                              "Estudo"
                          ELSE
                          IF  par_insitcrd = 1   THEN 
                              "Aprov."
                          ELSE             
                          IF  par_insitcrd = 2   THEN 
                              "Solic."
                          ELSE
                          IF  par_insitcrd = 3  THEN 
                              "Liber."
                          ELSE
                          IF   par_insitcrd = 4 AND
                               f_verifica_adm(par_cdadmcrd) = 1
                               THEN "Prc.BB"
                          ELSE
                          IF   par_insitcrd = 4  THEN 
                               "Em uso"
                          ELSE
                          IF   par_insitcrd = 5  THEN 
                               IF f_verifica_adm(par_cdadmcrd) = 1 OR 
                                  f_verifica_adm(par_cdadmcrd) = 2 THEN 
                                  "Bloque"
                               ELSE
                                  "Cancel"
                          ELSE
                          IF   par_insitcrd = 6  THEN 
                               IF f_verifica_adm(par_cdadmcrd) = 2 THEN 
                                  "Cancel"
                               ELSE
                                  "Encer."
                          ELSE "??????".  

    RETURN aux_dssitcrd.

END FUNCTION.

/**************************
    PROCEDURES GERAIS
**************************/    
PROCEDURE verifica_cartao_bb:

    DEF INPUT PARAM par_cdcooper AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_cdagenci AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_nrdcaixa AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_cdadmcrd AS INTE                         NO-UNDO.
    
    DEF OUTPUT PARAM TABLE FOR tt-erro.

    EMPTY TEMP-TABLE tt-erro.
    /* Opcao nao disponivel para Cartao BB */ 
    IF  f_verifica_adm(par_cdadmcrd) = 1 THEN
        DO:
            ASSIGN aux_cdcritic = 0.
                   aux_dscritic = "Opcao nao disponivel para Cartao BB.".

               RUN gera_erro (INPUT par_cdcooper,
                              INPUT par_cdagenci,
                              INPUT par_nrdcaixa,
                              INPUT 1,            /** Sequencia **/
                              INPUT aux_cdcritic,
                              INPUT-OUTPUT aux_dscritic).
                                                      
               RETURN "NOK".
        END.
                                
    RETURN "OK".                            
   
END PROCEDURE.

/*********************
    OPCAO PRINCIPAL
*********************/    
/******************************************************
    Lista os cartoes do cooperado
 *****************************************************/
PROCEDURE lista_cartoes:
    
    DEF  INPUT  PARAM  par_cdcooper  AS  INTE  NO-UNDO.                   
    DEF  INPUT  PARAM  par_cdagenci  AS  INTE  NO-UNDO.                
    DEF  INPUT  PARAM  par_nrdcaixa  AS  INTE  NO-UNDO.                     
    DEF  INPUT  PARAM  par_cdoperad  AS  CHAR  NO-UNDO.                
    DEF  INPUT  PARAM  par_nrdconta  AS  INTE  NO-UNDO.
    DEF  INPUT  PARAM  par_idorigem  AS  INTE  NO-UNDO. 
    DEF  INPUT  PARAM  par_idseqttl  AS  INTE  NO-UNDO.
    DEF  INPUT  PARAM  par_nmdatela  AS  CHAR  NO-UNDO.
    DEF  INPUT  PARAM  par_flgerlog  AS  LOGI  NO-UNDO.

    DEF OUTPUT  PARAM  par_flgativo  AS  LOGI  NO-UNDO.
    DEF OUTPUT  PARAM  par_nrctrhcj  AS  INTE  NO-UNDO.
    DEF OUTPUT  PARAM  par_flgliber  AS  LOGI  NO-UNDO. /* Temporario: Transf. de Pac 5 da Coop.2*/
    DEF OUTPUT PARAM TABLE FOR tt-erro.
    DEF OUTPUT PARAM TABLE FOR tt-cartoes.
    DEF OUTPUT PARAM TABLE FOR tt-lim_total.

    DEF VAR aux_vltotccr AS DECI NO-UNDO.
    DEF VAR aux_dssitcrd AS CHAR NO-UNDO.
        
    EMPTY TEMP-TABLE tt-erro.
    EMPTY TEMP-TABLE tt-cartoes.  
    EMPTY TEMP-TABLE tt-lim_total.
  
    /* Bloqueio Temporario em funcao da transferencia do PAC */
    FOR FIRST crapass FIELDS(cdagenci)
            WHERE crapass.cdcooper = par_cdcooper AND
                            crapass.nrdconta = par_nrdconta NO-LOCK:
        END.
        
    IF  AVAIL crapass THEN
        ASSIGN aux_cdagenci = crapass.cdagenci.
    ELSE
        ASSIGN aux_cdagenci = 0.
    
    FIND crapdat NO-LOCK WHERE crapdat.cdcooper = par_cdcooper NO-ERROR.

    IF   (par_cdcooper = 2 AND aux_cdagenci = 5)     OR
         (par_cdcooper = 1               AND 
          crapdat.dtmvtolt >= 12/11/2012 AND
                       (aux_cdagenci = 7   OR
                        aux_cdagenci = 33  OR
                        aux_cdagenci = 38  OR
                        aux_cdagenci = 60  OR
                        aux_cdagenci = 62  /* OR
                        aux_cdagenci = 66 */)) OR
         (par_cdcooper = 2 AND
          crapdat.dtmvtolt >= 12/16/2013 AND
                       (aux_cdagenci = 2   OR
                        aux_cdagenci = 4  OR
                        aux_cdagenci = 6  OR
                        aux_cdagenci = 7  OR
                        aux_cdagenci = 11))
        THEN
                 ASSIGN par_flgliber = FALSE.
        ELSE 
                ASSIGN par_flgliber = TRUE.
        
    /* Apos o perido definido as conta da Concredi ou Credimilsul
       nao poderam mais realizar operacoes dos cartoes, devido a migraçao.
    */
    IF  (par_cdcooper =  4 AND crapdat.dtmvtolt >= 11/12/2014) 
    
    /* Retirada validaçao de cooperativa incorporada para permitir 
       cancelamento dos cartoes BB
     OR (par_cdcooper = 15 AND crapdat.dtmvtolt >= 11/07/2014)*/ THEN
       DO: 
         par_flgliber = FALSE.
       END.
       
        /*********************************************************/


    /** Atribui descricao da origem e da transacao **/
    ASSIGN aux_dsorigem = TRIM(ENTRY(par_idorigem,des_dorigens,","))
           aux_dstransa = "Listar cartoes de credito.".    
           
    FOR EACH crawcrd FIELDS(cdadmcrd insitcrd tpcartao cdlimcrd  
                               dtsol2vi nmtitcrd nrcrcard nrctrcrd nrcpftit vllimcrd)
                         WHERE crawcrd.cdcooper = par_cdcooper    AND
                           crawcrd.nrdconta = par_nrdconta    NO-LOCK:
                                                                      
        FIND crapadc WHERE crapadc.cdcooper = par_cdcooper      AND
                           crapadc.cdadmcrd = crawcrd.cdadmcrd  
                           NO-LOCK NO-ERROR.
    
        IF   NOT AVAILABLE crapadc THEN
             NEXT.

        IF  f_verifica_adm(crawcrd.cdadmcrd) <> 2 THEN
            DO:
                /* Se estiver em uso soma o valor total de limite de todos os cartoes */
                IF   crawcrd.insitcrd = 4 OR
                     crawcrd.insitcrd = 7 THEN
                     DO:        
                         FIND craptlc WHERE craptlc.cdcooper = par_cdcooper       AND
                                            craptlc.cdadmcrd = crawcrd.cdadmcrd   AND
                                            craptlc.tpcartao = crawcrd.tpcartao   AND
                                            craptlc.cdlimcrd = crawcrd.cdlimcrd   AND
                                            craptlc.dddebito = 0  
                                            NO-LOCK NO-ERROR.
                                 
                         IF   NOT AVAILABLE craptlc   THEN
                              DO:
                                 ASSIGN aux_cdcritic = 532
                                        aux_dscritic = "".
        
                                 RUN gera_erro (INPUT par_cdcooper,
                                                INPUT par_cdagenci,
                                                INPUT par_nrdcaixa,
                                                INPUT 1,            /** Sequencia **/
                                                INPUT aux_cdcritic,
                                                INPUT-OUTPUT aux_dscritic).        
                         
                                 IF  par_flgerlog  THEN
                                     RUN proc_gerar_log (INPUT par_cdcooper,
                                                         INPUT par_cdoperad,
                                                         INPUT aux_dscritic,
                                                         INPUT aux_dsorigem,
                                                         INPUT aux_dstransa,
                                                         INPUT FALSE,
                                                         INPUT par_idseqttl,
                                                         INPUT par_nmdatela,
                                                         INPUT par_nrdconta,
                                                        OUTPUT aux_nrdrowid).
                                   
                                 RETURN "NOK".
                              
                              END.
                           /* ZERAR LIMITE CONFORME SD 181559 */   
                           IF  f_verifica_adm(crawcrd.cdadmcrd) <> 2 THEN
                               ASSIGN aux_vltotccr = aux_vltotccr + craptlc.vllimcrd.
        ELSE
                               ASSIGN aux_vltotccr = aux_vltotccr + 0.
                             
                         
                     END.
            END.
        ELSE
            IF  f_verifica_adm(crawcrd.cdadmcrd) <> 2 THEN
            ASSIGN aux_vltotccr = aux_vltotccr + crawcrd.vllimcrd.
            ELSE 
               ASSIGN aux_vltotccr = aux_vltotccr + 0. /* ZERAR LIMITE CONFORME SD 181559 */   
        
       

        ASSIGN aux_dssitcrd = retorna-situacao (INPUT crawcrd.insitcrd,
                                                INPUT crawcrd.dtsol2vi,
                                                INPUT crawcrd.cdadmcrd).
        
        CREATE tt-cartoes.
        ASSIGN tt-cartoes.nmtitcrd = STRING(crawcrd.nmtitcrd,"x(27)")
               tt-cartoes.nmresadm = STRING(crapadc.nmresadm,"x(30)")
               tt-cartoes.nrcrcard = 
                                STRING(crawcrd.nrcrcard,"9999,9999,9999,9999")               
               tt-cartoes.dssitcrd = aux_dssitcrd
               tt-cartoes.nrctrcrd = crawcrd.nrctrcrd
               tt-cartoes.cdadmcrd = crawcrd.cdadmcrd
               tt-cartoes.flgcchip = crapadc.flgcchip.

        /* Mascara número de cartão de for Bancoob */
        IF  f_verifica_adm(crawcrd.cdadmcrd) = 2 THEN
            ASSIGN tt-cartoes.dscrcard = SUBSTR(tt-cartoes.nrcrcard,1,4) + "." + SUBSTR(tt-cartoes.nrcrcard,6,2) + "**.****." + SUBSTR(tt-cartoes.nrcrcard,16,4).
        ELSE
            ASSIGN tt-cartoes.dscrcard = tt-cartoes.nrcrcard.

        FOR FIRST crapass FIELDS(nrdconta)
                                  WHERE crapass.cdcooper = par_cdcooper     AND
                                crapass.nrcpfcgc = crawcrd.nrcpftit 
                                NO-LOCK:
                END.

        IF  AVAIL crapass THEN        
            ASSIGN tt-cartoes.nrdconta = crapass.nrdconta. 
        ELSE    
            ASSIGN tt-cartoes.nrdconta = crawcrd.nrdconta. 
        
    END.  /*  Fim do FOR EACH  --  crawcrd  */
    
    CREATE tt-lim_total.
    ASSIGN tt-lim_total.vltotccr = aux_vltotccr.

    IF  f_tipo_assoc(par_cdcooper, par_nrdconta) = 1 THEN
        ASSIGN par_flgativo = NO
               par_nrctrhcj = 0.
    ELSE
        DO:

            FIND FIRST craphcj WHERE craphcj.cdcooper = par_cdcooper AND
                                     craphcj.nrdconta = par_nrdconta NO-LOCK NO-ERROR.

            IF  AVAIL craphcj THEN
                ASSIGN par_flgativo = craphcj.flgativo
                       par_nrctrhcj = craphcj.nrctrhcj.
            ELSE
                ASSIGN par_flgativo = NO
                       par_nrctrhcj = 0.

        END.
    
    IF  par_flgerlog  THEN 
        RUN proc_gerar_log (INPUT par_cdcooper,
                            INPUT par_cdoperad,
                            INPUT "",
                            INPUT aux_dsorigem,
                            INPUT aux_dstransa,
                            INPUT TRUE,
                            INPUT par_idseqttl,
                            INPUT par_nmdatela,
                            INPUT par_nrdconta,
                           OUTPUT aux_nrdrowid).
    
    RETURN "OK".

END PROCEDURE.

/********************
    OPCAO NOVO
********************/    
/******************************************************
    Carregar dados para efetuar uma inclusao de cartao
 *****************************************************/
PROCEDURE carrega_dados_inclusao:

    DEF  INPUT  PARAM  par_cdcooper  AS  INTE                       NO-UNDO.
    DEF  INPUT  PARAM  par_cdagenci  AS  INTE                       NO-UNDO.
    DEF  INPUT  PARAM  par_nrdcaixa  AS  INTE                       NO-UNDO.
    DEF  INPUT  PARAM  par_cdoperad  AS  CHAR                       NO-UNDO.
    DEF  INPUT  PARAM  par_nrdconta  AS  INTE                       NO-UNDO.
    DEF  INPUT  PARAM  par_dtmvtolt  AS  DATE                       NO-UNDO.
    DEF  INPUT  PARAM  par_idorigem  AS  INTE                       NO-UNDO. 
    DEF  INPUT  PARAM  par_idseqttl  AS  INTE                       NO-UNDO.
    DEF  INPUT  PARAM  par_nmdatela  AS  CHAR                       NO-UNDO.
    DEF  INPUT  PARAM  par_bthabipj  AS  CHAR                       NO-UNDO.

    DEF OUTPUT PARAM TABLE FOR tt-erro.
    DEF OUTPUT PARAM TABLE FOR tt-nova_proposta.

    DEF VAR aux_dsgraupr AS CHAR                                    NO-UNDO.
    DEF VAR aux_cdgraupr AS CHAR                                    NO-UNDO.
    DEF VAR aux_dscartao AS CHAR                                    NO-UNDO.
    DEF VAR aux_dsoutros AS CHAR                                    NO-UNDO.
    DEF VAR aux_cdcartao AS CHAR                                    NO-UNDO.
    DEF VAR aux_cddopcao AS CHAR                                    NO-UNDO.
    DEF VAR aux_flgfirst AS LOGI                                    NO-UNDO.
    DEF VAR aux_dsadmcrd AS CHAR                                    NO-UNDO.
    DEF VAR aux_cdadmcrd AS CHAR                                    NO-UNDO.
    DEF VAR aux_dddebito AS CHAR                                    NO-UNDO.
    DEF VAR aux_vlsalari AS DECI                                    NO-UNDO.
    DEF VAR aux_nmsegntl AS CHAR                                    NO-UNDO.
    DEF VAR aux_cdadmdeb AS CHAR                                    NO-UNDO.
    DEF VAR aux_dslimite AS CHAR                                    NO-UNDO.
    DEF VAR aux_dslimaux AS CHAR                                    NO-UNDO.
    DEF VAR aux_vlrftbru AS DECIMAL                                 NO-UNDO.
    
    DEF VAR aux_dsrepinc AS CHAR                                    NO-UNDO.
    DEF VAR aux_nrrepinc AS CHAR                                    NO-UNDO.
    DEF VAR aux_dsoperac AS CHAR                                    NO-UNDO.
       
    DEF VAR h-b1wgen0001 AS HANDLE                                  NO-UNDO.
    DEF VAR h-b1wgen0110 AS HANDLE                                  NO-UNDO.

    DEF VAR aux_contador AS INTE                                    NO-UNDO.
    DEF VAR aux_dias     AS CHAR                                    NO-UNDO.
    DEF VAR aux_dsmensag AS CHAR                                    NO-UNDO.

    DEF VAR aux_nmbandei AS CHAR                                    NO-UNDO.

    DEF BUFFER crabass FOR crapass.
    
    EMPTY TEMP-TABLE tt-erro.
    EMPTY TEMP-TABLE tt-nova_proposta.
    
    ASSIGN aux_dscartao = "NACIONAL,INTERNACIONAL,GOLD"
           aux_cdcartao = "1,2,3"
           aux_dsgraupr = 
                  "Conjuge,Filhos,Companheiro,Primeiro Titular,Segundo Titular,Terceiro Titular,Quarto Titular"
           aux_cdgraupr = "1,3,4,5,6,7,8"       
           aux_flgfirst = TRUE
           aux_vlrftbru = 0.
    
    FOR FIRST crapass FIELDS(nrdconta inpessoa nrcpfcgc cdtipcta cdsitdct cdsitdtl dtdemiss 
                                 vledvmto cdcooper nmsegntl nrcpfstl dtnasstl nrdocstl 
                                                          nmprimtl dtnasctl nrdocptl)
                     WHERE crapass.cdcooper = par_cdcooper AND
                       crapass.nrdconta = par_nrdconta   
                       NO-LOCK: END.
    
    IF NOT AVAILABLE crapass THEN
       DO:
           ASSIGN aux_cdcritic = 9
                  aux_dscritic = "".

           RUN gera_erro (INPUT par_cdcooper,
                          INPUT par_cdagenci,
                          INPUT par_nrdcaixa,
                          INPUT 1,            /** Sequencia **/
                          INPUT aux_cdcritic,
                          INPUT-OUTPUT aux_dscritic).                
              
           RETURN "NOK".

       END.
    
    IF crapass.inpessoa = 1 THEN
       DO:
           FIND crapttl WHERE crapttl.cdcooper = crapass.cdcooper AND
                              crapttl.nrdconta = crapass.nrdconta AND  
                              crapttl.idseqttl = 1
                              NO-LOCK NO-ERROR.
                              
           IF AVAILABLE crapttl THEN
              DO:              
                  IF crapttl.vlsalari    + 
                     crapttl.vldrendi[1] + 
                     crapttl.vldrendi[2] + 
                     crapttl.vldrendi[3] + 
                     crapttl.vldrendi[4] <= 1 THEN
                     DO:
                         ASSIGN aux_dscritic = "Necessario efetuar revisao cadastral (renda/faturamento).".
                                      
                         RUN gera_erro (INPUT par_cdcooper,
                                        INPUT par_cdagenci,
                                        INPUT par_nrdcaixa,
                                        INPUT 1,     /** Sequencia **/
                                        INPUT aux_cdcritic,
                                        INPUT-OUTPUT aux_dscritic).
                                        
                         RETURN "NOK".
                     END.                     
              
              END. /* END IF AVAILABLE crapttl THEN */
  
       END. /* END IF crapass.inpessoa = 1 THEN */
    ELSE
    DO:
        FOR FIRST crapjfn FIELDS(vlrftbru mesftbru anoftbru)
                          WHERE crapjfn.cdcooper = crapass.cdcooper AND
                                crapjfn.nrdconta = crapass.nrdconta
                                NO-LOCK:
    
            FATURAMENTO:
            DO aux_contador = 1 TO EXTENT(crapjfn.vlrftbru):
               
               IF crapjfn.vlrftbru[aux_contador] > 0 THEN
                  DO:
                    ASSIGN aux_vlrftbru = aux_vlrftbru + crapjfn.vlrftbru[aux_contador].                        
                    LEAVE FATURAMENTO.    
                  END.     
                                          
            END.
            
        END. /* END FOR FIRST crapjfn */        
        
        IF aux_vlrftbru <= 1 THEN
           DO:
               ASSIGN aux_dscritic = "Necessario efetuar revisao cadastral (renda/faturamento).".                            
               RUN gera_erro (INPUT par_cdcooper,
                              INPUT par_cdagenci,
                              INPUT par_nrdcaixa,
                              INPUT 1,     /** Sequencia **/
                              INPUT aux_cdcritic,
                              INPUT-OUTPUT aux_dscritic).
                              
               RETURN "NOK".
           
           END. /* END IF aux_vlrftbru <= 0 THEN */
    END.    
    
    FIND FIRST crapope WHERE crapope.cdcooper = par_cdcooper AND
                             crapope.cdoperad = par_cdoperad 
                             NO-LOCK NO-ERROR.


    IF NOT VALID-HANDLE(h-b1wgen0110) THEN
       RUN sistema/generico/procedures/b1wgen0110.p
           PERSISTENT SET h-b1wgen0110.

    /*Monta a mensagem da operacao para envio no e-mail*/
    ASSIGN aux_dsoperac = "Tentativa de incluir uma nova proposta de " + 
                          "cartao de credito na conta "                +
                          STRING(crapass.nrdconta,"zzzz,zzz,9")        +
                          " - CPF/CNPJ "                               +
                         (IF crapass.inpessoa = 1 THEN
                             STRING((STRING(crapass.nrcpfcgc,
                                     "99999999999")),"xxx.xxx.xxx-xx")
                          ELSE
                             STRING((STRING(crapass.nrcpfcgc,
                                     "99999999999999")),
                                     "xx.xxx.xxx/xxxx-xx")).


    /*Verifica se o associado esta no cadastro restritivo. Se estiver,
      sera enviado um e-mail informando a situacao*/
    RUN alerta_fraude IN h-b1wgen0110(INPUT par_cdcooper,
                                      INPUT par_cdagenci,
                                      INPUT par_nrdcaixa,
                                      INPUT par_cdoperad,
                                      INPUT par_nmdatela,
                                      INPUT par_dtmvtolt,
                                      INPUT par_idorigem,
                                      INPUT crapass.nrcpfcgc,
                                      INPUT crapass.nrdconta,
                                      INPUT par_idseqttl,
                                      INPUT TRUE, /*bloqueia operacao*/
                                      INPUT 17, /*cdoperac*/
                                      INPUT aux_dsoperac,
                                      OUTPUT TABLE tt-erro).
    
    IF VALID-HANDLE(h-b1wgen0110) THEN
       DELETE PROCEDURE(h-b1wgen0110).

    IF RETURN-VALUE <> "OK" THEN
       DO:
          IF NOT TEMP-TABLE tt-erro:HAS-RECORDS THEN
             DO:
                ASSIGN aux_dscritic = "Nao foi possivel verificar o " + 
                                      "cadastro restritivo.".
                
                RUN gera_erro (INPUT par_cdcooper,
                               INPUT par_cdagenci,
                               INPUT par_nrdcaixa,
                               INPUT 1, /*sequencia*/
                               INPUT aux_cdcritic,
                               INPUT-OUTPUT aux_dscritic).

             END.

          RETURN "NOK".

       END.

  IF  crapass.inpessoa = 2 AND par_bthabipj = 'V' THEN
        DO:
           FIND craphcj WHERE craphcj.cdcooper = par_cdcooper AND
                              craphcj.nrdconta = par_nrdconta   
                              NO-LOCK NO-ERROR.


            IF  NOT AVAILABLE craphcj THEN
                DO:

                    ASSIGN aux_cdcritic = 0
                           aux_dscritic = "Verifique a opcao Habilitar.".

                    
                    RUN gera_erro (INPUT par_cdcooper,
                                   INPUT par_cdagenci,
                                   INPUT par_nrdcaixa,
                                   INPUT 1,            /** Sequencia **/
                                   INPUT aux_cdcritic,
                                   INPUT-OUTPUT aux_dscritic).                

                    RETURN "NOK".


                END.

            IF  craphcj.flgativo = NO THEN
                DO:

                    ASSIGN aux_cdcritic = 0
                           aux_dscritic = "Verifique a opcao Habilitar.".

                    RUN gera_erro (INPUT par_cdcooper,
                                   INPUT par_cdagenci,
                                   INPUT par_nrdcaixa,
                                   INPUT 1,            /** Sequencia **/
                                   INPUT aux_cdcritic,
                                   INPUT-OUTPUT aux_dscritic).                

                    RETURN "NOK".

                END.
            
        END.

    IF   crapass.cdtipcta = 5 OR
         crapass.cdtipcta = 6 OR
         crapass.cdtipcta = 7 OR
         crapass.cdtipcta = 17 OR
         crapass.cdtipcta = 18 THEN
         DO:
            ASSIGN aux_cdcritic = 332
                   aux_dscritic = "".

            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                          
            RETURN "NOK".
         END.
    ELSE
    IF   crapass.cdsitdct <> 1   AND
         crapass.cdsitdct <> 6   AND
         ((crapass.cdsitdct <> 5   AND
          par_idorigem <> 1)    OR
         (crapass.cdsitdct = 5    AND 
          par_idorigem = 1))   /** Deve permitir inserir cartão, mas apenas se for PURO DÉBITO **/
          THEN
         DO:
            ASSIGN aux_cdcritic = 332
                   aux_dscritic = "".

            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                          
            RETURN "NOK".
         END.
    ELSE
    IF   CAN-DO("5,6,7,8",STRING(crapass.cdsitdtl)) THEN
         DO:
            ASSIGN aux_cdcritic = 695
                   aux_dscritic = "".

            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                          
            RETURN "NOK".
         END.
    ELSE
    IF   CAN-DO("2,4,6,8",STRING(crapass.cdsitdtl)) THEN
         DO:
            ASSIGN aux_cdcritic = 95
                   aux_dscritic = "".

            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                          
            RETURN "NOK".
         END.
    ELSE
    IF   crapass.dtdemiss <> ?   THEN
         DO:
            ASSIGN aux_cdcritic = 75
                   aux_dscritic = "".

            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                          
            RETURN "NOK".
         END.    
       
    FOR EACH crapadc WHERE crapadc.cdcooper = par_cdcooper   AND
                           crapadc.insitadc = 0 NO-LOCK 
                           BY crapadc.cdadmcrd DESCENDING:

        IF  crapadc.cdadmcrd = 3 AND crapope.cddepart  <> 2 THEN   /* 2-CARTÕES */
            NEXT.

        IF  (crapass.inpessoa = 2 AND crapadc.tpctahab = 1) OR 
            (crapass.inpessoa = 1 AND crapadc.tpctahab = 2) THEN
            NEXT.

        IF par_idorigem = 1 AND par_nmdatela = "ATENDA" THEN
            DO:

                IF f_verifica_adm(crapadc.cdadmcrd) <> 2 THEN
                   DO:
                        IF f_verifica_adm(crapadc.cdadmcrd) = 1 THEN
                            DO:
                                aux_cdadmdeb = IF aux_flgfirst THEN
                                                  TRIM(STRING(crapadc.cdadmcrd))
                                               ELSE  aux_cdadmdeb + ","  +              
                                                     TRIM(STRING(crapadc.cdadmcrd)).
                            END.

                        ASSIGN aux_dsadmcrd = IF aux_flgfirst THEN 
                                             TRIM(crapadc.nmresadm)
                                          ELSE aux_dsadmcrd + "," + TRIM(crapadc.nmresadm)
                
                               aux_cdadmcrd = IF aux_flgfirst THEN
                                             TRIM(STRING(crapadc.cdadmcrd))
                                          ELSE aux_cdadmcrd + "," + TRIM(STRING(crapadc.cdadmcrd))

                               aux_nmbandei = IF aux_flgfirst THEN 
                                             TRIM(crapadc.nmbandei)
                                          ELSE aux_nmbandei + "," + TRIM(crapadc.nmbandei)
                
                               aux_flgfirst = FALSE.                   
                    END.
            END.
        ELSE
            DO:
                IF   f_verifica_adm(crapadc.cdadmcrd) = 1 THEN
                     DO:
                        aux_cdadmdeb = IF aux_flgfirst THEN
                                          TRIM(STRING(crapadc.cdadmcrd))
                                       ELSE  aux_cdadmdeb + ","  +              
                                             TRIM(STRING(crapadc.cdadmcrd)).
                     END.
                 
                
                ASSIGN aux_dsadmcrd = IF aux_flgfirst THEN 
                                         TRIM(crapadc.nmresadm)
                                      ELSE aux_dsadmcrd + "," + TRIM(crapadc.nmresadm)
        
                       aux_cdadmcrd = IF aux_flgfirst THEN
                                         TRIM(STRING(crapadc.cdadmcrd))
                                      ELSE aux_cdadmcrd + "," + TRIM(STRING(crapadc.cdadmcrd)) 

                       aux_nmbandei = IF aux_flgfirst THEN 
                                         TRIM(crapadc.nmbandei)
                                      ELSE aux_nmbandei + "," + TRIM(crapadc.nmbandei)
                                          
                       aux_flgfirst = FALSE.
                
                IF crapadc.floutros THEN
                   DO:
                       IF aux_dsoutros = "" THEN 
                          ASSIGN aux_dsoutros = "OUTROS".
                       ELSE 
                          ASSIGN aux_dsoutros = aux_dsoutros + ",OUTROS".
                   END.
                ELSE
                   DO:
                       IF aux_dsoutros = "" THEN 
                          ASSIGN aux_dsoutros = "NORMAL".
                       ELSE 
                          ASSIGN aux_dsoutros = aux_dsoutros + ",NORMAL".
                   END.                   
            END.
                          
    END.
    
    IF NOT DYNAMIC-FUNCTION("solicita_revisao_cadastral_cartoes",
                        INPUT par_cdcooper,
                        INPUT par_nrdcaixa, 
                        INPUT par_cdagenci,
                        INPUT "", /*cdoperad*/
                        INPUT par_dtmvtolt, 
                        INPUT 1,
                        INPUT 0, /* cdadmcrd */
                        INPUT par_nrdconta,
                        OUTPUT aux_dsmensag) THEN
     DO:
         ASSIGN aux_cdcritic = 0
                aux_dscritic = aux_dsmensag.
   
          RUN gera_erro (INPUT par_cdcooper,
                         INPUT par_cdagenci,
                         INPUT par_nrdcaixa,
                         INPUT 1,            /** Sequencia **/
                         INPUT aux_cdcritic,
                         INPUT-OUTPUT aux_dscritic).
                                                    
          RETURN "NOK".
   
     END. 

    IF  crapass.inpessoa = 2 AND
        aux_cdadmcrd = ""  AND par_bthabipj = 'V'  THEN
        DO:

            ASSIGN aux_cdcritic = 0
                   aux_dscritic = "Nao existe administradora de cartao habilitada para pessoa juridica.".

            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).

            RETURN "NOK".        

        END.

    RUN sistema/generico/procedures/b1wgen0001.p
        PERSISTENT SET h-b1wgen0001.
       
    IF   VALID-HANDLE(h-b1wgen0001)   THEN
         DO:
             RUN ver_capital IN h-b1wgen0001(INPUT par_cdcooper,
                                             INPUT par_nrdconta,
                                             INPUT par_cdagenci,       
                                             INPUT par_nrdcaixa,       
                                             INPUT 0, /* vllanto */
                                             INPUT par_dtmvtolt,
                                             INPUT "b1wgen0028",
                                             INPUT 5, /* INTRANET */
                                            OUTPUT TABLE tt-erro).

             /* Verifica se houve erro */
             FIND FIRST tt-erro NO-LOCK NO-ERROR.

             IF   AVAILABLE tt-erro   THEN
                  DO:
                      ASSIGN aux_cdcritic = tt-erro.cdcritic
                             aux_dscritic = tt-erro.dscritic.
                             
                      RUN gera_erro (INPUT par_cdcooper,
                                     INPUT par_cdagenci,
                                     INPUT par_nrdcaixa,
                                     INPUT 1,            /** Sequencia **/
                                     INPUT aux_cdcritic,
                                     INPUT-OUTPUT aux_dscritic).
                                     
                      DELETE PROCEDURE h-b1wgen0001.
                      
                      RETURN "NOK".
                  END.
             ELSE
                  DO:
                      RUN ver_cadastro IN h-b1wgen0001
                                                  (INPUT  par_cdcooper,
                                                   INPUT  par_nrdconta,
                                                   INPUT  par_cdagenci,
                                                   INPUT  par_nrdcaixa,
                                                   INPUT  par_dtmvtolt,
                                                   INPUT  5, /* INTRANET */
                                                   OUTPUT TABLE tt-erro).
  
                      /* Verifica se houve erro */
                      FIND FIRST tt-erro NO-LOCK NO-ERROR.
      
                      IF   AVAILABLE tt-erro   THEN
                           DO:
                               ASSIGN aux_cdcritic = tt-erro.cdcritic
                                      aux_dscritic = tt-erro.dscritic.
                                      
                               RUN gera_erro (INPUT par_cdcooper,
                                              INPUT par_cdagenci,
                                              INPUT par_nrdcaixa,
                                              INPUT 1,     /** Sequencia **/
                                              INPUT aux_cdcritic,
                                              INPUT-OUTPUT aux_dscritic).
                                              
                               DELETE PROCEDURE h-b1wgen0001.
                               
                               RETURN "NOK".
                          END.
                  END.
         
             DELETE PROCEDURE h-b1wgen0001.
         END.

    DO aux_contador = 1 TO NUM-ENTRIES(aux_cdadmcrd): 
        
        RUN busca_dddebito(INPUT par_cdcooper, 
                           INPUT INT(ENTRY(aux_contador,aux_cdadmcrd)),
                           OUTPUT aux_dddebito).
                        
        aux_dias = aux_dias + aux_dddebito + "#".
                        
    END.
    
    DO aux_contador = 1 TO NUM-ENTRIES(aux_cdadmcrd): 
        
       RUN busca_limite_proposto_bancoob(INPUT par_cdcooper, 
                                         INPUT INT(ENTRY(aux_contador,aux_cdadmcrd)),
                                         OUTPUT aux_dslimaux).
                        
       ASSIGN aux_dslimite = aux_dslimite + STRING(aux_cdadmcrd, "99") + ";" + aux_dslimaux + "#".
       
    END.
    
    IF  crapass.inpessoa = 1 THEN
        DO:
            FOR FIRST crapttl FIELDS(vlsalari) WHERE
                crapttl.cdcooper = crapass.cdcooper AND
                crapttl.nrdconta = crapass.nrdconta AND
                crapttl.idseqttl = 1 
                NO-LOCK:
            END.       
            ASSIGN aux_vlsalari = crapttl.vlsalari.
        END.
    ELSE
        ASSIGN aux_vlsalari = 0.
    
    RUN corrige_segntl(INPUT crapass.nmsegntl,
                       OUTPUT aux_nmsegntl).
    
    ASSIGN aux_flgfirst = TRUE.

    IF  crapass.inpessoa = 2 AND par_bthabipj = 'V' THEN
        DO:

            IF   craphcj.nrcpfpri <> 0 THEN 
                 DO:

                     FOR FIRST crabass FIELDS(nmprimtl)
                                                            WHERE crabass.cdcooper = par_cdcooper     AND
                                              crabass.nrcpfcgc = craphcj.nrcpfpri 
                                              NO-LOCK: END.
        
                     ASSIGN aux_nrrepinc = STRING(craphcj.nrcpfpri).
        
                     IF   AVAILABLE crabass THEN
                          ASSIGN aux_dsrepinc = crabass.nmprimtl.
                     ELSE
                          DO:
                
                              FIND crapncp WHERE crapncp.nrdoccpf = craphcj.nrcpfpri 
                                                 NO-LOCK NO-ERROR.
                
                              IF   AVAILABLE crapncp THEN
                                   ASSIGN aux_dsrepinc = crapncp.nmpessoa.
                
                          END.
        
                     ASSIGN aux_flgfirst = FALSE.
        
        
                 END.
        
            IF   craphcj.nrcpfseg <> 0 THEN 
                 DO:
        
                     FOR FIRST crabass FIELDS(nmprimtl)
                                                            WHERE crabass.cdcooper = par_cdcooper     AND
                                              crabass.nrcpfcgc = craphcj.nrcpfseg
                                              NO-LOCK: END.
        
                     ASSIGN aux_nrrepinc = IF  aux_flgfirst THEN
                                               STRING(craphcj.nrcpfseg)
                                           ELSE
                                               aux_nrrepinc + "," + STRING(craphcj.nrcpfseg)
                                               .
        
        
                     IF   AVAILABLE crabass THEN
                          ASSIGN aux_dsrepinc = IF aux_flgfirst THEN
                                                   crabass.nmprimtl
                                                ELSE
                                                   aux_dsrepinc + "," + crabass.nmprimtl
                                                   .
        
                     ELSE
                          DO:
        
                              FIND crapncp WHERE crapncp.nrdoccpf = craphcj.nrcpfseg
                                                 NO-LOCK NO-ERROR.
        
                              IF   AVAILABLE crapncp THEN
                                   ASSIGN aux_dsrepinc = IF aux_flgfirst THEN                               
                                                            crapncp.nmpessoa
                                                         ELSE
                                                            aux_dsrepinc + "," + crapncp.nmpessoa
                                                            .
        
                          END.
        
        
                      ASSIGN aux_flgfirst = FALSE.
        
        
                 END.
        
            IF   craphcj.nrcpfter <> 0 THEN 
                 DO:
        
                     FOR FIRST crabass FIELDS(nmprimtl)
                                                            WHERE crabass.cdcooper = par_cdcooper     AND
                                              crabass.nrcpfcgc = craphcj.nrcpfter
                                              NO-LOCK: END.
        
                     ASSIGN aux_nrrepinc = IF  aux_flgfirst THEN
                                               STRING(craphcj.nrcpfter)
                                           ELSE
                                               aux_nrrepinc + "," + STRING(craphcj.nrcpfter)
                                               .
        
        
                     IF   AVAILABLE crabass THEN
                          ASSIGN aux_dsrepinc = IF aux_flgfirst THEN
                                                   crabass.nmprimtl
                                                ELSE
                                                   aux_dsrepinc + "," + crabass.nmprimtl
                                                   .
        
                     ELSE
                          DO:
        
                              FIND crapncp WHERE crapncp.nrdoccpf = craphcj.nrcpfter
                                                 NO-LOCK NO-ERROR.
        
                              IF   AVAILABLE crapncp THEN
                                   ASSIGN aux_dsrepinc = IF aux_flgfirst THEN                               
                                                            crapncp.nmpessoa
                                                         ELSE
                                                            aux_dsrepinc + "," + crapncp.nmpessoa
                                                            .
        
                           END.
        
        
                     ASSIGN aux_flgfirst = FALSE.
        
                 END.

        END.

    FIND crapcje WHERE crapcje.cdcooper = par_cdcooper AND 
                       crapcje.nrdconta = crapass.nrdconta AND 
                       crapcje.idseqttl = 1 USE-INDEX crapcje1 NO-ERROR.
              
    IF AVAILABLE crapcje THEN
      ASSIGN aux_nmconjug = crapcje.nmconjug
             aux_dtnasccj = crapcje.dtnasccj.

    CREATE tt-nova_proposta.
    ASSIGN tt-nova_proposta.dsgraupr = aux_dsgraupr 
           tt-nova_proposta.cdgraupr = aux_cdgraupr
           tt-nova_proposta.dsadmcrd = aux_dsadmcrd
           tt-nova_proposta.dscartao = aux_dscartao
           tt-nova_proposta.vlsalari = aux_vlsalari
           tt-nova_proposta.dddebito = aux_dias
           tt-nova_proposta.cdtipcta = crapass.cdtipcta
           tt-nova_proposta.nrcpfstl = crapass.nrcpfstl
           tt-nova_proposta.inpessoa = crapass.inpessoa
           tt-nova_proposta.dtnasstl = crapass.dtnasstl
           tt-nova_proposta.nrdocstl = crapass.nrdocstl
           tt-nova_proposta.nmconjug = aux_nmconjug
           tt-nova_proposta.dtnasccj = aux_dtnasccj
           tt-nova_proposta.nmtitcrd = crapass.nmprimtl
           tt-nova_proposta.nrcpfcgc = crapass.nrcpfcgc
           tt-nova_proposta.dtnasctl = crapass.dtnasctl
           tt-nova_proposta.nrdocptl = crapass.nrdocptl
           tt-nova_proposta.nmsegntl = aux_nmsegntl
           tt-nova_proposta.cdadmdeb = aux_cdadmdeb
           tt-nova_proposta.cdadmcrd = aux_cdadmcrd
           tt-nova_proposta.dsrepinc = aux_dsrepinc
           tt-nova_proposta.nrrepinc = aux_nrrepinc
           tt-nova_proposta.nmbandei = aux_nmbandei
           tt-nova_proposta.dslimite = aux_dslimite
           tt-nova_proposta.dsoutros = aux_dsoutros.

    RETURN "OK".       
    
END PROCEDURE.

/****************************************
    Validar uma nova proposta de cartao
****************************************/
PROCEDURE valida_nova_proposta:
 
    DEF  INPUT  PARAM par_cdcooper                             AS INTE NO-UNDO.
    DEF  INPUT  PARAM par_cdagenci                             AS INTE NO-UNDO.
    DEF  INPUT  PARAM par_nrdcaixa                             AS INTE NO-UNDO.
    DEF  INPUT  PARAM par_idorigem                             AS INTE NO-UNDO.
    DEF  INPUT  PARAM par_nmdatela                             AS CHAR NO-UNDO.
    DEF  INPUT  PARAM par_cdoperad                             AS CHAR NO-UNDO.
    DEF  INPUT  PARAM par_nrdconta                             AS INTE NO-UNDO.
    DEF  INPUT  PARAM par_dtmvtolt                             AS DATE NO-UNDO.
    DEF  INPUT  PARAM par_dsgraupr  /* "Parentesco"         */ AS CHAR NO-UNDO.
    DEF  INPUT  PARAM par_nmtitcrd  /* "Titular do Cartao"  */ AS CHAR NO-UNDO.
    DEF  INPUT  PARAM par_dsadmcrd  /* "Administradora"     */ AS CHAR NO-UNDO.
    DEF  INPUT  PARAM par_dscartao  /* "Tipo"               */ AS CHAR NO-UNDO.
    DEF  INPUT  PARAM par_vllimpro  /* "Limite Proposto"    */ AS DECI NO-UNDO.
    DEF  INPUT  PARAM par_vllimdeb  /* "Limite Deb Proposto */ AS DECI NO-UNDO.
    DEF  INPUT  PARAM par_nrcpfcgc                             AS DECI NO-UNDO.
    DEF  INPUT  PARAM par_dddebito  /* "Dia do debito"      */ AS INTE NO-UNDO.
    DEF  INPUT  PARAM par_dtnasccr                             AS DATE NO-UNDO.
    DEF  INPUT  PARAM par_nrdoccrd                             AS CHAR NO-UNDO.    
    DEF  INPUT  PARAM par_dsrepinc                             AS CHAR NO-UNDO.
    DEF  INPUT  PARAM par_dsrepres                             AS CHAR NO-UNDO.

    DEF OUTPUT  PARAM TABLE FOR tt-msg-confirma.
    DEF OUTPUT  PARAM TABLE FOR tt-erro.

    DEF  VAR aux_tpcartao AS INTE                                    NO-UNDO.
    DEF  VAR aux_dscartao AS CHAR INIT "NACIONAL,INTERNACIONAL,GOLD" NO-UNDO.
    DEF  VAR aux_cdcartao AS CHAR INIT "1,2,3"                       NO-UNDO.
    DEF  VAR aux_dddebito AS CHAR                                    NO-UNDO.
    
    DEF  VAR h-b1wgen9999 AS HANDLE NO-UNDO.
    DEF  VAR h-b1wgen0110 AS HANDLE NO-UNDO.
    DEF  VAR aux_stsnrcal AS LOGI   NO-UNDO.
    DEF  VAR aux_inpessoa AS INTE   NO-UNDO.    
    DEF  VAR aux_tpendass AS INTE   NO-UNDO.

    DEF  VAR aux_vllimcrd LIKE craptlc.vllimcrd NO-UNDO.
    
    DEF  VAR aux_vlcreuso AS DECI   NO-UNDO.
    DEF  VAR aux_vlcresol AS DECI   NO-UNDO.
    DEF  VAR aux_vlcredbb AS DECI   NO-UNDO.
    DEF  VAR aux_vldebdbb AS DECI   NO-UNDO.
    DEF  VAR aux_vlsaquso AS DECI   NO-UNDO.
    DEF  VAR aux_vlsaqsol AS DECI   NO-UNDO.    
    DEF  VAR aux_vlrfalta AS DECI   NO-UNDO.
    DEF  VAR aux_vlpassou AS DECI   NO-UNDO.
    
    DEF  VAR aux_nrdeanos AS INT    NO-UNDO.
    DEF  VAR aux_nrdmeses AS INT    NO-UNDO.
    DEF  VAR aux_dsdidade AS CHAR   NO-UNDO.
    DEF  VAR aux_dsoperac AS CHAR   NO-UNDO.
    DEF  VAR aux_nmbandei AS CHAR   NO-UNDO.
    
    DEF  BUFFER crabcrd FOR crawcrd.
    DEF  BUFFER crabtlc FOR craptlc.
    DEF  BUFFER crabass FOR crapass.
    DEF  BUFFER cra2ass FOR crapass.

    DEF  BUFFER cratadc FOR crapadc.
    DEF  BUFFER cratcrd FOR crawcrd.
         
    EMPTY TEMP-TABLE tt-msg-confirma.
    EMPTY TEMP-TABLE tt-erro.

    
    FOR crapass FIELDS(inpessoa nrdconta nrcpfcgc 
                       cdcooper cdtipcta nrdctitg flgctitg inhabmen cdsitdct)
                    WHERE crapass.cdcooper = par_cdcooper AND
                      crapass.nrdconta = par_nrdconta
                      NO-LOCK: END.

    IF  NOT AVAIL crapass THEN
        DO:
           ASSIGN aux_cdcritic = 0
                  aux_dscritic = "Registro de associado nao encontrado.".

           RUN gera_erro (INPUT par_cdcooper,
                          INPUT par_cdagenci,
                          INPUT par_nrdcaixa,
                          INPUT 1,            /** Sequencia **/
                          INPUT aux_cdcritic,
                          INPUT-OUTPUT aux_dscritic).
                          
           RETURN "NOK".
        
        END.

    FIND FIRST crapadc WHERE crapadc.cdcooper = par_cdcooper   AND
                      UPPER(crapadc.nmresadm) = UPPER(par_dsadmcrd) NO-LOCK NO-ERROR.
                             
    IF   NOT AVAILABLE crapadc THEN
         DO:
             
             ASSIGN aux_cdcritic = 605
                    aux_dscritic = "".

             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).                
                
             RETURN "NOK".
         END.

    /* Contas na situação 5 devem permitir cartão apenas PURO DÉBITO */
    IF crapass.cdsitdct = 5 AND (crapadc.cdadmcrd <> 16 AND crapadc.cdadmcrd <> 17) THEN
        DO:
            ASSIGN aux_cdcritic = 0
                   aux_dscritic = "Situacao da conta permite apenas cartoes de debito.".
    
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                              
            RETURN "NOK".
            
        END.
    
    IF par_dsrepinc = "OUTROS" THEN
       DO:
           IF INT(NUM-ENTRIES(par_dsrepres)) <= 0 THEN
              DO:
                  ASSIGN aux_dscritic = "Representante nao informado.".
                  RUN gera_erro (INPUT par_cdcooper,
                                 INPUT par_cdagenci,
                                 INPUT par_nrdcaixa,
                                 INPUT 1,            /** Sequencia **/
                                 INPUT aux_cdcritic,
                                 INPUT-OUTPUT aux_dscritic).
                                               
                  RETURN "NOK".
              END.
              
       END. /* END IF par_dsrepinc = "OUTROS" THEN */
       
    /* Pessoa Juridica */
    IF crapass.inpessoa = 2 THEN
       DO:
          IF par_dsrepinc <> "OUTROS" THEN
             DO:       
                 FIND FIRST crapavt WHERE crapavt.cdcooper = par_cdcooper AND
                                          crapavt.nrdconta = par_nrdconta AND
                                          crapavt.tpctrato = 6            AND
                                          crapavt.nrcpfcgc = par_nrcpfcgc
                                          NO-LOCK NO-ERROR.
                                          
                 IF NOT AVAILABLE crapavt THEN
                    DO:
                        ASSIGN aux_cdcritic = 0
                               aux_dscritic = "Representante nao encontrato. CPF: " + 
                                              STRING((STRING(par_nrcpfcgc,"99999999999")),"xxx.xxx.xxx-xx").

                        RUN gera_erro (INPUT par_cdcooper,
                                       INPUT par_cdagenci,
                                       INPUT par_nrdcaixa,
                                       INPUT 1,            /** Sequencia **/
                                       INPUT aux_cdcritic,
                                       INPUT-OUTPUT aux_dscritic).
                                               
                        RETURN "NOK". 
                    END.
                 
                 IF crapavt.dsproftl = "PROCURADOR" THEN
                    DO:
                        /* Vamos verificar se o procurador estah vencido */
                        IF NOT(crapavt.dtvalida >= par_dtmvtolt OR crapavt.dtvalida = ?) THEN 
                           DO:
                               ASSIGN aux_cdcritic = 0
                                      aux_dscritic = "Procuracao vencida, verifique validade atraves da tela Contas".

                               RUN gera_erro (INPUT par_cdcooper,
                                              INPUT par_cdagenci,
                                              INPUT par_nrdcaixa,
                                              INPUT 1,            /** Sequencia **/
                                              INPUT aux_cdcritic,
                                              INPUT-OUTPUT aux_dscritic).

                               RETURN "NOK".
                           END.
                    END.
                    
             END.  /* END IF par_dsrepinc <> "OUTROS" THEN */
             
       END. /* END IF crapass.inpessoa = 2 THEN */
      
    /*Monta a mensagem da operacao para envio no e-mail*/
    ASSIGN aux_dsoperac = "Tentativa de nova proposta de cartao de credito "  +
                          "na conta " + STRING(crapass.nrdconta,"zzzz,zzz,9") +
                          " - CPF/CNPJ "                                      +
                         (IF crapass.inpessoa = 1 THEN
                             STRING((STRING(crapass.nrcpfcgc,
                                     "99999999999")),"xxx.xxx.xxx-xx")
                          ELSE
                             STRING((STRING(crapass.nrcpfcgc,
                                     "99999999999999")),
                                     "xx.xxx.xxx/xxxx-xx")).

    IF NOT VALID-HANDLE(h-b1wgen0110) THEN
       RUN sistema/generico/procedures/b1wgen0110.p
           PERSISTENT SET h-b1wgen0110.
           
    /*Verifica se o associado esta no cadastro restritivo. Se estiver,
      sera enviado um e-mail informando a situacao*/
    RUN alerta_fraude IN h-b1wgen0110(INPUT par_cdcooper,
                                      INPUT par_cdagenci,
                                      INPUT par_nrdcaixa,
                                      INPUT par_cdoperad,
                                      INPUT par_nmdatela,
                                      INPUT par_dtmvtolt,
                                      INPUT par_idorigem,
                                      INPUT crapass.nrcpfcgc, 
                                      INPUT crapass.nrdconta,
                                      INPUT 1, /*idseqttl*/
                                      INPUT TRUE, /*bloqueia operacao*/
                                      INPUT 17, /*cdoperac*/
                                      INPUT aux_dsoperac,
                                      OUTPUT TABLE tt-erro).
    
    IF VALID-HANDLE(h-b1wgen0110) THEN
       DELETE PROCEDURE(h-b1wgen0110).

    IF RETURN-VALUE <> "OK" THEN
       DO:
          IF NOT TEMP-TABLE tt-erro:HAS-RECORDS THEN
             DO:
                ASSIGN aux_dscritic = "Nao foi possivel verificar o " + 
                                      "cadastro restritivo.".
                
                RUN gera_erro (INPUT par_cdcooper,
                               INPUT par_cdagenci,
                               INPUT par_nrdcaixa,
                               INPUT 1, /*sequencia*/
                               INPUT aux_cdcritic,
                               INPUT-OUTPUT aux_dscritic).

             END.

          RETURN "NOK".

       END.
   
    
    IF   crapass.inpessoa = 1             AND
         par_dsgraupr = "Segundo Titular" THEN 
         IF   crapass.cdtipcta <>  3 AND
              crapass.cdtipcta <>  4 AND
              crapass.cdtipcta <> 10 AND
              crapass.cdtipcta <> 11 AND
              crapass.cdtipcta <> 14 AND
              crapass.cdtipcta <> 15 THEN
             DO:
                 ASSIGN aux_cdcritic = 332
                        aux_dscritic = "".

                 RUN gera_erro (INPUT par_cdcooper,
                                INPUT par_cdagenci,
                                INPUT par_nrdcaixa,
                                INPUT 1,            /** Sequencia **/
                                INPUT aux_cdcritic,
                                INPUT-OUTPUT aux_dscritic).                
                
                 RETURN "NOK".
             END.

    IF   crapass.inpessoa = 1       AND
         par_dsgraupr = "Conjuge"   THEN
         /* Busca o conjuge */
         IF  NOT CAN-FIND(crapcje WHERE crapcje.cdcooper = crapass.cdcooper AND
                                        crapcje.nrdconta = crapass.nrdconta AND
                                        crapcje.idseqttl = 1
                                        NO-LOCK)  THEN
             DO:
                 ASSIGN aux_cdcritic = 610
                        aux_dscritic = "".

                 RUN gera_erro (INPUT par_cdcooper,
                                INPUT par_cdagenci,
                                INPUT par_nrdcaixa,
                                INPUT 1,            /** Sequencia **/
                                INPUT aux_cdcritic,
                                INPUT-OUTPUT aux_dscritic).                
                
                 RETURN "NOK".                 
             END.
                  
    ASSIGN aux_cdcritic = 0
           aux_dscritic = "".

    RUN ValidaNome (INPUT  par_nmtitcrd,
                    OUTPUT aux_dscritic).

    IF  RETURN-VALUE = "NOK" THEN
        DO:
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).                
                
            RETURN "NOK".
        END.

    FIND crapope WHERE crapope.cdcooper = par_cdcooper AND
                       crapope.cdoperad = par_cdoperad NO-LOCK NO-ERROR.

    IF  NOT AVAIL(crapope) THEN
        DO:
            ASSIGN aux_cdcritic = 0
                   aux_dscritic = "Operador inexistente.".
    
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).                
    
            RETURN "NOK".
    
        END.

    IF  crapass.inpessoa = 1 AND
        crapadc.tpctahab <> 0 AND 
        crapadc.tpctahab <> 1 THEN
        DO:
            ASSIGN aux_cdcritic = 0.
                   aux_dscritic = "Este cartao nao pode ser solicitado a PF.".

            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                                        
            RETURN "NOK".
        END.

    IF  crapass.inpessoa = 2 AND
        crapadc.tpctahab <> 0 AND 
        crapadc.tpctahab <> 2 THEN
        DO:
            ASSIGN aux_cdcritic = 0.
                   aux_dscritic = "Este cartao nao pode ser solicitado a PJ.".

            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                                        
            RETURN "NOK".
        END.

    /*Bloquear solicitacao de cartao se nao for departamento de cartoes*/
    IF  crapadc.cdadmcrd = 3 AND crapope.cddepart  <> 2 THEN  /* 2-CARTOES */
        DO:
            ASSIGN aux_cdcritic = 0.
                   aux_dscritic = "Administradora de cartoes CECRED VISA " +
                                   "bloqueada.".

            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                                        
            RETURN "NOK".
        END.

    IF  f_verifica_adm(crapadc.cdadmcrd) = 1 THEN
        DO:
            IF  crapass.inpessoa = 1                AND
                par_dsgraupr <> "Primeiro Titular"  THEN /* 1o TITULAR */
                DO: 
                    ASSIGN aux_cdcritic = 607
                           aux_dscritic = "".
             
                    RUN gera_erro (INPUT par_cdcooper,
                                   INPUT par_cdagenci,
                                   INPUT par_nrdcaixa,
                                   INPUT 1,            /** Sequencia **/
                                   INPUT aux_cdcritic,
                                   INPUT-OUTPUT aux_dscritic).                
                        
                    RETURN "NOK".
                END.

            ASSIGN aux_tpendass = IF crapass.inpessoa = 1 THEN 10 ELSE 9.

            FIND crapenc WHERE crapenc.cdcooper = par_cdcooper AND
                               crapenc.nrdconta = par_nrdconta AND
                               crapenc.idseqttl = 1            AND
                               crapenc.tpendass = aux_tpendass NO-LOCK NO-ERROR.
        
            IF  NOT AVAILABLE crapenc  THEN
                DO:
                    ASSIGN aux_cdcritic = 0
                           aux_dscritic = "Cooperado sem endereco cadastrado.".
        
                    RUN gera_erro (INPUT par_cdcooper,
                                   INPUT par_cdagenci,
                                   INPUT par_nrdcaixa,
                                   INPUT 1,            /** Sequencia **/
                                   INPUT aux_cdcritic,
                                   INPUT-OUTPUT aux_dscritic).
        
                    RETURN "NOK".
                END.
        
            IF  NOT CAN-FIND(FIRST crapdne 
                             WHERE crapdne.nrceplog = crapenc.nrcepend)  OR 
                NOT CAN-FIND(FIRST crapdne
                             WHERE crapdne.nrceplog = crapenc.nrcepend  
                               AND (TRIM(crapenc.dsendere) MATCHES 
                                   ("*" + TRIM(crapdne.nmextlog) + "*")
                                OR TRIM(crapenc.dsendere) MATCHES
                                   ("*" + TRIM(crapdne.nmreslog) + "*"))) THEN
                DO:
                    ASSIGN aux_cdcritic = 0
                           aux_dscritic = "CEP/Endereco nao conferem, efetuar " +
                                          "revisao cadastral.".
        
                    RUN gera_erro (INPUT par_cdcooper,
                                   INPUT par_cdagenci,
                                   INPUT par_nrdcaixa,
                                   INPUT 1,            /** Sequencia **/
                                   INPUT aux_cdcritic,
                                   INPUT-OUTPUT aux_dscritic).
        
                    RETURN "NOK".
                END.
        END.
         
    RUN sistema/generico/procedures/b1wgen9999.p PERSISTENT SET h-b1wgen9999.
    
    IF  NOT VALID-HANDLE(h-b1wgen9999)  THEN
        DO:
            ASSIGN aux_cdcritic = 0
                   aux_dscritic = "Handle invalido para BO b1wgen9999.".
                   
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
            
            RETURN "NOK".
        END.

    RUN valida-cpf-cnpj IN h-b1wgen9999 (INPUT par_nrcpfcgc,
                                        OUTPUT aux_stsnrcal,
                                        OUTPUT aux_inpessoa).
                                
    IF  NOT aux_stsnrcal  THEN
        DO:
            ASSIGN aux_cdcritic = 0
                   aux_dscritic = "CPF informado invalido.".

            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,     /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
            DELETE PROCEDURE h-b1wgen9999.                                 
            RETURN "NOK".
        END.
    
    IF   par_dtnasccr = ?  THEN
         DO:
             ASSIGN aux_cdcritic = 013
                    aux_dscritic = "".

             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).                
             DELETE PROCEDURE h-b1wgen9999.   
             RETURN "NOK".
         END.     
    ELSE
         DO:
             RUN idade IN h-b1wgen9999 (INPUT par_dtnasccr,
                                        INPUT par_dtmvtolt,
                                       OUTPUT aux_nrdeanos,
                                       OUTPUT aux_nrdmeses,
                                       OUTPUT aux_dsdidade).

             IF f_verifica_adm(crapadc.cdadmcrd) = 2 AND
                /* crapass.inpessoa  = 1          AND */
                crapadc.cdadmcrd <> 16   THEN    /* não deve considerar a idade para cartões Puro débito, conforme SD 254668 */
                         DO:

                                 IF par_dsgraupr = "Primeiro Titular" THEN /* Daniel */
                                 DO:
                                 
                                          IF aux_nrdeanos < 18 AND 
                                                 crapass.inhabmen <> 1 THEN /* Nao Emancipado */
                                          DO:
                                                                ASSIGN aux_cdcritic = 0
                                                                           aux_dscritic =
                                                                                          "Solicitacao nao disponivel " +
                                                                                          "para menores de 18 anos.".
        
                                                                 RUN gera_erro (INPUT par_cdcooper,
                                                                                                INPUT par_cdagenci,
                                                                                                INPUT par_nrdcaixa,
                                                                                                INPUT 1, /** Sequencia **/
                                                                                                INPUT aux_cdcritic,
                                                                                                INPUT-OUTPUT aux_dscritic).
                                                                 DELETE PROCEDURE h-b1wgen9999.
                                                                 RETURN "NOK".
                                          END.
                                 END.
                                 ELSE
                                 DO:
                                          IF   aux_nrdeanos < 16 THEN /* Nao Emancipado */
                                          DO:
                                          
                                                        ASSIGN aux_cdcritic = 0
                                                                   aux_dscritic =
                                                                                  "Solicitacao nao disponivel " +
                                                                                  "para menores de 16 anos.".

                                                         RUN gera_erro (INPUT par_cdcooper,
                                                                                        INPUT par_cdagenci,
                                                                                        INPUT par_nrdcaixa,
                                                                                        INPUT 1, /** Sequencia **/
                                                                                        INPUT aux_cdcritic,
                                                                                        INPUT-OUTPUT aux_dscritic).
                                                         DELETE PROCEDURE h-b1wgen9999.
                                                         RETURN "NOK".
                                          END.
                                 END.
                         END.
             ELSE
             IF f_verifica_adm(crapadc.cdadmcrd) = 3 THEN
                         DO:
                                 /*   Cartoes Bradesco */
                                 IF   aux_nrdeanos < 18 THEN
                                  DO:
                                            ASSIGN aux_cdcritic = 0
                                                     aux_dscritic = "Solicitacao nao disponivel " +
                                                                                        "para menores de 18 anos.".
                       
                                            RUN gera_erro (INPUT par_cdcooper,
                                                                              INPUT par_cdagenci,
                                                                              INPUT par_nrdcaixa,
                                                                              INPUT 1, /** Sequencia **/
                                                                              INPUT aux_cdcritic,
                                                                              INPUT-OUTPUT aux_dscritic).
                                            DELETE PROCEDURE h-b1wgen9999.
                                            RETURN "NOK".
                                  END.
                         END.
             ELSE
                         IF f_verifica_adm(crapadc.cdadmcrd) = 1 THEN
             DO:
                 /*   Cartoes BB */
                 IF   aux_nrdeanos < 16 THEN
                 DO:
                      ASSIGN aux_cdcritic = 0
                             aux_dscritic =
                                    "Solicitacao nao disponivel " +
                                    "para menores de 16 anos.".

                       RUN gera_erro (INPUT par_cdcooper,
                                      INPUT par_cdagenci,
                                      INPUT par_nrdcaixa,
                                      INPUT 1, /** Sequencia **/
                                      INPUT aux_cdcritic,
                                      INPUT-OUTPUT aux_dscritic).
                       DELETE PROCEDURE h-b1wgen9999.
                       RETURN "NOK".
                 END.
             END.
         END.
         
    DELETE PROCEDURE h-b1wgen9999.        
     

    IF   par_nmtitcrd = "" THEN
         DO:
            ASSIGN aux_cdcritic = 016
                   aux_dscritic = "".
     
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).                
                
            RETURN "NOK".
         END.
    ELSE    
    IF   LENGTH(par_nmtitcrd) > crapadc.qtcarnom THEN
         DO:
             ASSIGN aux_cdcritic = 0
                    aux_dscritic = "606 - Nome muito extenso. " +
                                   " Maximo de " + STRING(crapadc.qtcarnom) +
                                   " caracteres.".
             
             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).                
                            
             RETURN "NOK".
         END.    

    IF   crapass.inpessoa = 1   AND
         par_nrdoccrd = ""      THEN                         
         DO:
             ASSIGN aux_cdcritic = 022
                    aux_dscritic = "".

             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).                
                
             RETURN "NOK".
         END.
         
    ASSIGN aux_tpcartao = 
           INTEGER( ENTRY( LOOKUP(par_dscartao,aux_dscartao) , aux_cdcartao)). 
    
    IF  f_verifica_adm(crapadc.cdadmcrd) = 1 THEN
        DO:
            FOR EACH crapcop NO-LOCK:
 
                FOR EACH cra2ass FIELDS(nrdconta) WHERE
                         cra2ass.cdcooper = crapcop.cdcooper  AND
                         cra2ass.nrcpfcgc = crapass.nrcpfcgc
                         NO-LOCK:
 
                    FOR EACH crawcrd WHERE
                             crawcrd.cdcooper = crapcop.cdcooper AND
                             crawcrd.nrdconta = cra2ass.nrdconta AND
                             CAN-DO("83,84,85,86,87,88",
                                    STRING(crawcrd.cdadmcrd)) NO-LOCK:
 
                        IF   crawcrd.cdadmcrd = crapadc.cdadmcrd  THEN
                             DO:
                                 ASSIGN aux_cdcritic = 0
                                        aux_dscritic =
                                              "Ja existe cartao BB desta " +
                                              "modalidade para este CPF na " +
                                              crapcop.nmrescop + ". " +
                                              "Operacao nao permitida.".
 
                                 RUN gera_erro (INPUT par_cdcooper,
                                                INPUT par_cdagenci,
                                                INPUT par_nrdcaixa,
                                                INPUT 1, /** Sequencia **/
                                                INPUT aux_cdcritic,
                                                INPUT-OUTPUT aux_dscritic).
 
                                 RETURN "NOK".
                             END.
 
                        IF   crawcrd.cdcooper = crapadc.cdcooper  AND
                             crawcrd.nrcrcard = 0  THEN
                             DO:
                                 ASSIGN aux_cdcritic = 0
                                        aux_dscritic =
                                              "Ja existe cartao BB " +
                                              "solicitado para este CPF. " +
                                              "Operacao nao permitida.".
 
                                 RUN gera_erro (INPUT par_cdcooper,
                                                INPUT par_cdagenci,
                                                INPUT par_nrdcaixa,
                                                INPUT 1, /** Sequencia **/
                                                INPUT aux_cdcritic,
                                                INPUT-OUTPUT aux_dscritic).
 
                                 RETURN "NOK".
 
                             END.
 
                    END.
                END. /** Fim do FOR EACH cra2ass **/
            END.
        END.
    ELSE
        IF  f_verifica_adm(crapadc.cdadmcrd) = 3 THEN
           DO:
             /*VALIDANDO O BOTÃO HABILITAR PRA CARTÕES BRADESCO*/
             IF crapass.inpessoa = 2  THEN
                       DO:
            
                               FIND craphcj WHERE craphcj.cdcooper = par_cdcooper   AND
                                                                  craphcj.nrdconta = par_nrdconta   NO-LOCK NO-ERROR.
            
                               IF NOT AVAILABLE craphcj THEN
                                  DO:
            
                                          ASSIGN aux_cdcritic = 0
                                                         aux_dscritic = "Verifique a opcao Habilitar.".
            
                                          RUN gera_erro (INPUT par_cdcooper,
                                                                         INPUT par_cdagenci,
                                                                         INPUT par_nrdcaixa,
                                                                         INPUT 1,            /** Sequencia **/
                                                                         INPUT aux_cdcritic,
                                                                         INPUT-OUTPUT aux_dscritic).
            
                                          RETURN "NOK".
                                  END.        
                       END.
           END.
    ELSE
        IF  f_verifica_adm(crapadc.cdadmcrd) = 2 THEN
        DO:
            /* Validacao de Cartoes Bancoob */
            FIND crapcop WHERE crapcop.cdcooper = par_cdcooper NO-LOCK NO-ERROR NO-WAIT.

            FOR EACH crawcrd WHERE
                     crawcrd.cdcooper = par_cdcooper AND
                     crawcrd.nrdconta = par_nrdconta AND
                     crawcrd.nrcpftit = par_nrcpfcgc AND
                     crawcrd.cdadmcrd <= 80          AND
                     crawcrd.cdadmcrd >= 10 NO-LOCK:
                   
                IF   crawcrd.cdadmcrd = crapadc.cdadmcrd  THEN
                     DO:
                        
                         ASSIGN aux_cdcritic = 0
                                aux_dscritic =
                                      "Ja existe cartao Bancoob desta " +
                                      "modalidade para este CPF na " +
                                      crapcop.nmrescop + ". " +
                                      "Operacao nao permitida.".
            
                         RUN gera_erro (INPUT par_cdcooper,
                                        INPUT par_cdagenci,
                                        INPUT par_nrdcaixa,
                                        INPUT 1, /** Sequencia **/
                                        INPUT aux_cdcritic,
                                        INPUT-OUTPUT aux_dscritic).
    
                         RETURN "NOK".
                     END.

                IF crawcrd.cdcooper = crapadc.cdcooper /* AND
                   crawcrd.nrcrcard = 0  */ THEN
                    DO:
                        FIND cratadc WHERE cratadc.cdcooper = par_cdcooper and
                                           cratadc.cdadmcrd = crapadc.cdadmcrd NO-LOCK NO-ERROR NO-WAIT.

                        ASSIGN aux_nmbandei = cratadc.nmbandei.
                         
                        FOR EACH cratcrd WHERE cratcrd.cdcooper = par_cdcooper AND
                                               cratcrd.nrdconta = par_nrdconta AND
                                               cratcrd.nrcpftit = par_nrcpfcgc AND
                                               cratcrd.cdadmcrd <= 80          AND
                                               cratcrd.cdadmcrd >= 10 NO-LOCK:

                            FIND cratadc WHERE cratadc.cdcooper = par_cdcooper and
                                               cratadc.cdadmcrd = cratcrd.cdadmcrd NO-LOCK NO-ERROR NO-WAIT.

                            IF UPPER(aux_nmbandei) = UPPER(cratadc.nmbandei) THEN
                                DO:
                                     ASSIGN aux_cdcritic = 0
                                            aux_dscritic =
                                                  "Ja existe cartao Bancoob " +
                                                  "solicitado para este CPF. " +
                                                  "Operacao nao permitida.".
                
                                     RUN gera_erro (INPUT par_cdcooper,
                                                    INPUT par_cdagenci,
                                                    INPUT par_nrdcaixa,
                                                    INPUT 1, /** Sequencia **/
                                                    INPUT aux_cdcritic,
                                                    INPUT-OUTPUT aux_dscritic).
                
                                     RETURN "NOK".
                                END.
                        END.
                         
                     END.
    
            END.
            /* Fim validacao Cartoes Bancoob */
        END.
              
    IF f_verifica_adm(crapadc.cdadmcrd) <> 2 THEN
        DO:
            FIND craptlc WHERE  craptlc.cdcooper = par_cdcooper     AND
                                craptlc.cdadmcrd = crapadc.cdadmcrd AND
                                craptlc.dddebito = par_dddebito     AND
                                craptlc.tpcartao = 0                AND
                                craptlc.cdlimcrd = 0 
                                NO-LOCK NO-ERROR.
               
            IF   NOT AVAILABLE craptlc   THEN
                 DO:
                     ASSIGN aux_cdcritic = 553
                            aux_dscritic = "".
        
                     RUN gera_erro (INPUT par_cdcooper,
                                    INPUT par_cdagenci,
                                    INPUT par_nrdcaixa,
                                    INPUT 1,            /** Sequencia **/
                                    INPUT aux_cdcritic,
                                    INPUT-OUTPUT aux_dscritic).                
                        
                     RETURN "NOK".             
                 END.        
                
            IF   craptlc.insittab <> 0 THEN
                 DO:
                     ASSIGN aux_cdcritic = 520
                            aux_dscritic = "".
        
                     RUN gera_erro (INPUT par_cdcooper,
                                    INPUT par_cdagenci,
                                    INPUT par_nrdcaixa,
                                    INPUT 1,            /** Sequencia **/
                                    INPUT aux_cdcritic,
                                    INPUT-OUTPUT aux_dscritic).                
                        
                     RETURN "NOK".
                 END.

                    FIND FIRST craptlc WHERE craptlc.cdcooper = par_cdcooper     AND
                                             craptlc.cdadmcrd = crapadc.cdadmcrd AND
                                             craptlc.dddebito = 0                AND
                                             craptlc.tpcartao = 
                                             INTEGER(ENTRY(LOOKUP(par_dscartao,aux_dscartao),
                                                aux_cdcartao)) AND
                                             craptlc.vllimcrd = par_vllimpro
                                             NO-LOCK NO-ERROR.
                
                    IF   NOT AVAILABLE craptlc   THEN
                         DO:
                             ASSIGN aux_cdcritic = 0
                                    aux_dscritic = "Limite proposto e/ou tipo de cartao " +
                                                   "invalido.".
                
                             RUN gera_erro (INPUT par_cdcooper,
                                            INPUT par_cdagenci,
                                            INPUT par_nrdcaixa,
                                            INPUT 1,            /** Sequencia **/
                                            INPUT aux_cdcritic,
                                            INPUT-OUTPUT aux_dscritic).                
                                
                             RETURN "NOK".
                         END.
                
                            FIND FIRST craptlc WHERE craptlc.cdcooper = par_cdcooper     AND
                                                     craptlc.cdadmcrd = crapadc.cdadmcrd AND
                                                     craptlc.dddebito = 0                AND
                                                     craptlc.tpcartao = 
                                                     INTEGER(ENTRY(LOOKUP(par_dscartao,aux_dscartao),
                                                        aux_cdcartao)) AND
                                                     craptlc.vllimcrd = par_vllimpro
                                                     NO-LOCK NO-ERROR.
                            
                            IF   NOT AVAILABLE craptlc   THEN
                                 DO:
                                     ASSIGN aux_cdcritic = 0
                                            aux_dscritic = "Limite proposto e/ou tipo de cartao " +
                                                           "invalido.".
                                                        
                                     RUN gera_erro (INPUT par_cdcooper,
                                                    INPUT par_cdagenci,
                                                    INPUT par_nrdcaixa,
                                                    INPUT 1,            /** Sequencia **/
                                                    INPUT aux_cdcritic,
                                                    INPUT-OUTPUT aux_dscritic).                
                                        
                                     RETURN "NOK".
                                 END.
                        
                            IF   craptlc.insittab <>  0 THEN
                                 DO:
                                     ASSIGN aux_cdcritic = 604
                                            aux_dscritic = "".
                        
                                     RUN gera_erro (INPUT par_cdcooper,
                                                    INPUT par_cdagenci,
                                                    INPUT par_nrdcaixa,
                                                    INPUT 1,            /** Sequencia **/
                                                    INPUT aux_cdcritic,
                                                    INPUT-OUTPUT aux_dscritic).                
                                        
                                     RETURN "NOK".
                                 END.    
    END.

    /* Se for administradora de cartao conta integracao, faz validacao */
    /*IF   f_verifica_adm(craptlc.cdadmcrd) = 1 AND*/
      IF   f_verifica_adm(crapadc.cdadmcrd) = 1 AND
        (crapass.nrdctitg  = ""   OR
         crapass.cdtipcta  < 8    OR
         crapass.flgctitg <> 2)             THEN
         DO:
            
             ASSIGN aux_cdcritic = 860
                    aux_dscritic = "".

             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).                
                
             RETURN "NOK".
         END.
    
    /* Limite das administradoras do BB */
    /*IF   f_verifica_adm(craptlc.cdadmcrd) = 1 THEN*/
      IF   f_verifica_adm(crapadc.cdadmcrd) = 1 THEN
         DO:
    
             /** Totais em uso e solicitados **/
             FOR EACH crabcrd FIELDS(cdadmcrd tpcartao cdlimcrd nrdconta 
                                     insitcrd)
                              WHERE crabcrd.cdcooper = par_cdcooper AND
                                    crabcrd.cdadmcrd > 82           AND 
                                    crabcrd.cdadmcrd < 89           AND
                                    CAN-DO("0,1,4,5",STRING(crabcrd.insitcrd))
                                    NO-LOCK,

                 EACH crabtlc FIELDS(vllimcrd)
                              WHERE crabtlc.cdcooper = par_cdcooper     AND 
                                    crabtlc.cdadmcrd = crabcrd.cdadmcrd AND
                                    crabtlc.tpcartao = crabcrd.tpcartao AND
                                    crabtlc.cdlimcrd = crabcrd.cdlimcrd AND
                                    crabtlc.dddebito = 0  
                                    NO-LOCK,

                 EACH crabass FIELDS(vllimdeb)
                                              WHERE crabass.cdcooper = par_cdcooper     AND
                                    crabass.nrdconta = crabcrd.nrdconta  
                                    NO-LOCK:

                 IF crabcrd.insitcrd = 4  THEN  /* Em uso */ 
                    ASSIGN aux_vlcreuso = aux_vlcreuso + crabtlc.vllimcrd
                           aux_vlsaquso = aux_vlsaquso + crabass.vllimdeb.
                 ELSE  
                    DO: /* Solicitado e Canc/Bloq */ 
                        aux_vlcresol = aux_vlcresol + crabtlc.vllimcrd.
                           
                        /* Para Debitos somente cartoes solicitados */
                        IF crabcrd.insitcrd <> 5  THEN  /* Em uso */ 
                           aux_vlsaqsol = aux_vlsaqsol + crabass.vllimdeb.
                    END.

             END. /* Fim do FOR EACH */

             /** Limites com o BB **/ 
             FIND craptab WHERE craptab.cdcooper = par_cdcooper AND
                                craptab.nmsistem = "CRED"       AND
                                craptab.tptabela = "USUARI"     AND
                                craptab.cdempres = 11           AND
                                craptab.cdacesso = "VLCONTRCRD" AND
                                craptab.tpregist = 0
                                NO-LOCK NO-ERROR NO-WAIT.
            
             IF  AVAIL craptab  THEN 
                 ASSIGN aux_vlcredbb = DEC(SUBSTRING(craptab.dstextab,14,12))
                        aux_vldebdbb = DEC(SUBSTRING(craptab.dstextab,40,12)).
             
             /*****  VALIDACOES DE CREDITO  *****/
             /* 
                   Se a soma dos limites em uso e solicitados + a alteracao
                   atual dividido pelo limite parametrizado com o BB
                   for menor ou igual a 5% mostra a mensagem 
             */
             aux_vlrfalta = 100 - 
                            (((aux_vlcreuso + aux_vlcresol + par_vllimpro)
                               / aux_vlcredbb) * 100).
             IF  aux_vlrfalta <= 5  AND aux_vlrfalta > 0  THEN
                 DO:
                     CREATE tt-msg-confirma.
                     ASSIGN tt-msg-confirma.inconfir = 1
                            tt-msg-confirma.dsmensag = "Faltam " +
                            STRING(aux_vlrfalta,"99.999999") + "%" +
                            " para exceder o limite da Cooperativa " +
                            "com o BB. Verificar com a Gerencia da Coop. " +
                            "o limite de credito contratado. Tela CCARBB.".
                 END.            
             ELSE
             IF  aux_vlrfalta = 0  THEN
                 DO:
                     CREATE tt-msg-confirma.
                     ASSIGN tt-msg-confirma.inconfir = 1
                            tt-msg-confirma.dsmensag = 
                            "Valor total de cartoes da Cooperativa chegou" +
                            " ao limite contratado junto ao BB. " +
                            "Verificar com a Gerencia da Cooperativa o " +
                            "limite de credito contratado. Tela CCARBB.".
                 END.
             ELSE
             /* 
                Se a soma dos limites em uso e solicitados + a alteracao
                atual for maior que o limite parametrizado com o BB
                mostra a mensagem e aborta a operacao
             */ 
                 DO:
                     aux_vlpassou = aux_vlcreuso + 
                                    aux_vlcresol +
                                    par_vllimpro.

                     IF  aux_vlpassou > aux_vlcredbb THEN
                         DO:
                             ASSIGN aux_cdcritic = 0
                                    aux_dscritic = 
                                    "Valor ultrapassou o limite de credito" +
                                    " da Cooperativa com o BB. " +
                                    "Verificar com a Gerencia da Cooperativa" +
                                    " o limite de credito contratado. " +
                                    "Tela CCARBB.".

                             RUN gera_erro (INPUT par_cdcooper,
                                            INPUT par_cdagenci,
                                            INPUT par_nrdcaixa,
                                            INPUT 1,    /** Sequencia **/
                                            INPUT aux_cdcritic,
                                            INPUT-OUTPUT aux_dscritic).
                
                             RETURN "NOK".                            
                         END.            
                           
                 END.
                 
             /*****  VALIDACOES DE DEBITO  *****/
             /* 
                   Se a soma dos limites em uso e solicitados + a alteracao
                   atual dividido pelo limite parametrizado com o BB
                   for menor ou igual a 5% mostra a mensagem 
             */
             aux_vlrfalta = 100 - 
                            (((aux_vlsaquso + aux_vlsaqsol + par_vllimdeb)
                               / aux_vldebdbb) * 100).
             IF  aux_vlrfalta <= 5  AND aux_vlrfalta > 0  THEN
                 DO:
                     CREATE tt-msg-confirma.
                     ASSIGN tt-msg-confirma.inconfir = 1
                            tt-msg-confirma.dsmensag = "Faltam " +
                            STRING(aux_vlrfalta,"99.999999") + "%" +
                            " para exceder o limite da Cooperativa " +
                            "com o BB. Verificar com a Gerencia da Coop. o " +
                            "limite de debito contratado. Tela CCARBB.".
                 END.            
             ELSE
             IF  aux_vlrfalta = 0  THEN
                 DO:
                     CREATE tt-msg-confirma.
                     ASSIGN tt-msg-confirma.inconfir = 1
                            tt-msg-confirma.dsmensag = 
                            "Valor total de cartoes da Cooperativa chegou" +
                            " ao limite contratado junto ao BB. " +
                            "Verificar com a Gerencia da Cooperativa o " +
                            "limite de debito contratado. Tela CCARBB.".        
                            
                 END.
             ELSE
             /* 
                Se a soma dos limites em uso e solicitados + a alteracao
                atual for maior que o limite parametrizado com o BB
                mostra a mensagem e aborta a operacao
             */
                 DO: 
                     aux_vlpassou = aux_vlsaquso + 
                                    aux_vlsaqsol +
                                    par_vllimdeb.

                     IF  aux_vlpassou > aux_vldebdbb THEN
                         DO:
                             ASSIGN aux_cdcritic = 0
                                    aux_dscritic = 
                                    "Valor ultrapassou o limite de debito" +
                                    " da Cooperativa com o BB. " +
                                    "Verificar com a Gerencia da Cooperativa" +
                                    " o limite de debito contratado. " + 
                                    "Tela CCARBB.".

                             RUN gera_erro (INPUT par_cdcooper,
                                            INPUT par_cdagenci,
                                            INPUT par_nrdcaixa,
                                            INPUT 1,    /** Sequencia **/
                                            INPUT aux_cdcritic,
                                            INPUT-OUTPUT aux_dscritic).
                
                             RETURN "NOK".                            
                         END.            
                           
                 END.    
                       
         END. /* Fim do IF adm's = BB */

    IF  crapass.inpessoa = 2 THEN
        DO:

            ASSIGN aux_vllimcrd = par_vllimpro.

            FOR EACH crawcrd WHERE  crawcrd.cdcooper = par_cdcooper  AND
                                    crawcrd.nrdconta = par_nrdconta  AND
                                   (crawcrd.insitcrd = 0             OR /* estudo */
                                    crawcrd.insitcrd = 1             OR /* aprov */
                                    crawcrd.insitcrd = 2             OR /* solic */
                                    crawcrd.insitcrd = 3             OR /* liberado */
                                    crawcrd.insitcrd = 4 )              /* em uso */
                                    NO-LOCK:

                IF  f_verifica_adm(crawcrd.cdadmcrd) <> 2 THEN
                    DO:
                        FIND craptlc WHERE  craptlc.cdcooper = crawcrd.cdcooper  AND
                                            craptlc.cdadmcrd = crawcrd.cdadmcrd  AND
                                            craptlc.dddebito = 0                 AND
                                            craptlc.tpcartao = crawcrd.tpcartao  AND
                                            craptlc.cdlimcrd = crawcrd.cdlimcrd  
                                            NO-LOCK NO-ERROR.
        
                        IF   NOT AVAILABLE craptlc   THEN
                             DO:
                                 ASSIGN aux_cdcritic = 532
                                        aux_dscritic = "".
        
                                 RUN gera_erro (INPUT par_cdcooper,
                                                INPUT par_cdagenci,
                                                INPUT par_nrdcaixa,
                                                INPUT 1,            /** Sequencia **/
                                                INPUT aux_cdcritic,
                                                INPUT-OUTPUT aux_dscritic).        
                         
                                   
                                 RETURN "NOK".
                              
                             END.
                       
                        ASSIGN aux_vllimcrd = aux_vllimcrd + craptlc.vllimcrd.
                    END.
                ELSE 
                    ASSIGN aux_vllimcrd = aux_vllimcrd + crawcrd.vllimcrd.

                IF  aux_vllimcrd > craphcj.vllimglb THEN
                    DO:

                        ASSIGN aux_cdcritic = 0
                               aux_dscritic = "Limite proposto excede limite empresarial.".

                        RUN gera_erro (INPUT par_cdcooper,
                                       INPUT par_cdagenci,
                                       INPUT par_nrdcaixa,
                                       INPUT 1,            /** Sequencia **/
                                       INPUT aux_cdcritic,
                                       INPUT-OUTPUT aux_dscritic).        


                        RETURN "NOK".
                    END.
            END.

        END.

    RETURN "OK".
         
END PROCEDURE.

/******************************************************
    Efetuar o cadastro de um novo cartao de credito
 *****************************************************/
PROCEDURE cadastra_novo_cartao:

    DEF INPUT PARAM par_cdcooper AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_cdagenci AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_nrdcaixa AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_cdoperad AS CHAR                         NO-UNDO.
    DEF INPUT PARAM par_nrdconta AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_dtmvtolt AS DATE                         NO-UNDO.
    DEF INPUT PARAM par_idorigem AS INTE                         NO-UNDO. 
    DEF INPUT PARAM par_idseqttl AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_nmdatela AS CHAR                         NO-UNDO.
    DEF INPUT PARAM par_dsgraupr /* Parentesco"       */ AS CHAR NO-UNDO.     
    DEF INPUT PARAM par_nrcpfcpf /* C.P.F."           */ AS CHAR NO-UNDO.       
    DEF INPUT PARAM par_nmextttl /* Titular do Cartao */ AS CHAR NO-UNDO.
    DEF INPUT PARAM par_nmtitcrd /* Nome no Plástico  */ AS CHAR NO-UNDO.     
    DEF INPUT PARAM par_nmempres /* Emp. do Plástico  */ AS CHAR NO-UNDO.
    DEF INPUT PARAM par_nrdoccrd /* Identidade"       */ AS CHAR NO-UNDO.     
    DEF INPUT PARAM par_dtnasccr /* Nascimento"       */ AS DATE NO-UNDO.     
    DEF INPUT PARAM par_dsadmcrd /* Administradora"   */ AS CHAR NO-UNDO.     
    DEF INPUT PARAM par_cdadmcrd                         AS INTE NO-UNDO.
    DEF INPUT PARAM par_dscartao /* Tipo"             */ AS CHAR NO-UNDO.     
    DEF INPUT PARAM par_vlsalari /* Salario"          */ AS DECI NO-UNDO.   
    DEF INPUT PARAM par_vlsalcon /* Salario conjuge"  */ AS DECI NO-UNDO.   
    DEF INPUT PARAM par_vloutras /* Outras rendas"    */ AS DECI NO-UNDO.    
    DEF INPUT PARAM par_vlalugue /* Aluguel"          */ AS DECI NO-UNDO.    
    DEF INPUT PARAM par_dddebito /* Dia debito"       */ AS INTE NO-UNDO.   
    DEF INPUT PARAM par_vllimpro /* Limite proposto"  */ AS DECI NO-UNDO.   
    DEF INPUT PARAM par_flgimpnp /* Promissoria"      */ AS CHAR NO-UNDO.    
    DEF INPUT PARAM par_vllimdeb /* Limite Debito"    */ AS DECI NO-UNDO.
    DEF INPUT PARAM par_nrrepinc /* repres solic      */ AS DECI NO-UNDO.
    DEF INPUT PARAM par_tpdpagto /* Forma de Pagamento*/ AS INTE NO-UNDO.
    DEF INPUT PARAM par_tpenvcrd /* Tipo envio cartao */ AS INTE NO-UNDO.        
    /** ------------------- Parametros do 1 avalista ------------------- **/
    DEF  INPUT PARAM par_nrctaav1 AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nmdaval1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nrcpfav1 AS DECI                           NO-UNDO.
    DEF  INPUT PARAM par_tpdocav1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_dsdocav1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nmdcjav1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_cpfcjav1 AS DECI                           NO-UNDO.
    DEF  INPUT PARAM par_tdccjav1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_doccjav1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_ende1av1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_ende2av1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nrfonav1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_emailav1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nmcidav1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_cdufava1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nrcepav1 AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrender1 AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_complen1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nrcxaps1 AS INTE                           NO-UNDO.
    /** ------------------- Parametros do 2 avalista ------------------- **/
    DEF  INPUT PARAM par_nrctaav2 AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nmdaval2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nrcpfav2 AS DECI                           NO-UNDO.
    DEF  INPUT PARAM par_tpdocav2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_dsdocav2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nmdcjav2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_cpfcjav2 AS DECI                           NO-UNDO.
    DEF  INPUT PARAM par_tdccjav2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_doccjav2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_ende1av2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_ende2av2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nrfonav2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_emailav2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nmcidav2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_cdufava2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nrcepav2 AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrender2 AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_complen2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nrcxaps2 AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_dsrepres AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_dsrepinc AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_flgdebit AS LOG                            NO-UNDO.
    
    DEF OUTPUT PARAM TABLE FOR tt-ctr_novo_cartao.
    DEF OUTPUT PARAM TABLE FOR tt-msg-confirma.
    DEF OUTPUT PARAM TABLE FOR tt-erro.

    DEF  VAR   h-b1wgen9999       AS HANDLE                         NO-UNDO.
    DEF  VAR   h-b1wgen0110       AS HANDLE                         NO-UNDO.
    DEF  VAR   aux_cdlimcrd       AS INTEGER                        NO-UNDO.

    DEF BUFFER crabass FOR crapass.
    DEF BUFFER crabavt FOR crapavt.
    
    DEF VAR    aux_contador       AS INTEGER                        NO-UNDO.
    DEF VAR    aux_flagerro       AS LOGICAL INIT TRUE              NO-UNDO.
    DEF VAR    aux_dsoperac       AS CHAR                           NO-UNDO.
    DEF VAR    aux_ponteiro       AS INTE                           NO-UNDO.
    DEF VAR    aux_nrempcrd       AS INTE                           NO-UNDO.
    DEF VAR    aux_nrctrcrd       AS INTE                           NO-UNDO.
    DEF VAR    aux_flgprcrd       AS INTE INIT 1                    NO-UNDO.
    EMPTY TEMP-TABLE tt-ctr_novo_cartao.
    EMPTY TEMP-TABLE tt-msg-confirma.
    EMPTY TEMP-TABLE tt-erro.
    
    ASSIGN aux_dsorigem = TRIM(ENTRY(par_idorigem,des_dorigens,","))
           /* Caso seja efetuada alguma alteracao na descricao deste log,
              devera ser tratado o relatorio de "demonstrativo produtos por
              colaborador" da tela CONGPR. (Fabricio - 04/05/2012) */
           aux_dstransa = "Cadastrar novo cartao de credito.".
           

    FOR FIRST crapass FIELDS(nrdconta inpessoa nrcpfcgc vllimdeb)  
                     WHERE crapass.cdcooper = par_cdcooper   AND
                       crapass.nrdconta = par_nrdconta   NO-LOCK:
    END.

    IF   NOT AVAILABLE crapass THEN
         DO:
             ASSIGN aux_cdcritic = 9
                    aux_dscritic = "".

             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).                
                
             RETURN "NOK".
         END.       

    IF NOT VALID-HANDLE(h-b1wgen0110) THEN
       RUN sistema/generico/procedures/b1wgen0110.p
           PERSISTENT SET h-b1wgen0110.

    /*Monta a mensagem da operacao para envio no e-mail*/
    ASSIGN aux_dsoperac = "Tentativa de nova proposta de cartao de credito "  +
                          "na conta " + STRING(crapass.nrdconta,"zzzz,zzz,9") +
                          " - CPF/CNPJ "                                      +
                         (IF crapass.inpessoa = 1 THEN
                             STRING((STRING(crapass.nrcpfcgc,
                                     "99999999999")),"xxx.xxx.xxx-xx")
                          ELSE
                             STRING((STRING(crapass.nrcpfcgc,
                                     "99999999999999")),
                                     "xx.xxx.xxx/xxxx-xx")).

    /*Verifica se o associado esta no cadastro restritivo. Se estiver,
      sera enviado um e-mail informando a situacao*/
    RUN alerta_fraude IN h-b1wgen0110(INPUT par_cdcooper,
                                      INPUT par_cdagenci,
                                      INPUT par_nrdcaixa,
                                      INPUT par_cdoperad,
                                      INPUT par_nmdatela,
                                      INPUT par_dtmvtolt,
                                      INPUT par_idorigem,
                                      INPUT crapass.nrcpfcgc, 
                                      INPUT crapass.nrdconta,
                                      INPUT 1, /*idseqttl*/
                                      INPUT TRUE, /*bloqueia operacao*/
                                      INPUT 17, /*cdoperac*/
                                      INPUT aux_dsoperac,
                                      OUTPUT TABLE tt-erro).
    
    IF VALID-HANDLE(h-b1wgen0110) THEN
       DELETE PROCEDURE(h-b1wgen0110).

    IF RETURN-VALUE <> "OK" THEN
       DO:
          IF NOT TEMP-TABLE tt-erro:HAS-RECORDS THEN
             DO:
                ASSIGN aux_dscritic = "Nao foi possivel verificar o " + 
                                      "cadastro restritivo.".
                
                RUN gera_erro (INPUT par_cdcooper,
                               INPUT par_cdagenci,
                               INPUT par_nrdcaixa,
                               INPUT 1, /*sequencia*/
                               INPUT aux_cdcritic,
                               INPUT-OUTPUT aux_dscritic).

             END.

          RETURN "NOK".

       END.

    TRANS_1:
    DO TRANSACTION ON ERROR UNDO TRANS_1, LEAVE TRANS_1:

        { includes/PLSQL_altera_session_antes_st.i &dboraayl={&scd_dboraayl} }

        /* Busca a proxima sequencia do campo crapldt.nrsequen */
        RUN STORED-PROCEDURE pc_sequence_progress
        aux_handproc = PROC-HANDLE NO-ERROR (INPUT "CRAPMAT"
                                            ,INPUT "NRCTRCRD"
                                            ,STRING(par_cdcooper)
                                            ,INPUT "N"
                                            ,"").

        CLOSE STORED-PROC pc_sequence_progress
        aux_statproc = PROC-STATUS WHERE PROC-HANDLE = aux_handproc.

        { includes/PLSQL_altera_session_depois_st.i &dboraayl={&scd_dboraayl} }

        ASSIGN aux_nrctrcrd = INTE(pc_sequence_progress.pr_sequence)
                              WHEN pc_sequence_progress.pr_sequence <> ?.
        
        FIND crapadc WHERE crapadc.cdcooper = par_cdcooper AND
                           crapadc.cdadmcrd = par_cdadmcrd  
                           NO-LOCK NO-ERROR.
    
        IF NOT AVAILABLE crapadc THEN
           DO:
               ASSIGN aux_cdcritic = 605
                      aux_dscritic = "".

               RUN gera_erro (INPUT par_cdcooper,
                              INPUT par_cdagenci,
                              INPUT par_nrdcaixa,
                              INPUT 1,            /** Sequencia **/
                              INPUT aux_cdcritic,
                              INPUT-OUTPUT aux_dscritic).                
                  
               RETURN "NOK".
           END.         

        IF  f_verifica_adm(par_cdadmcrd) <> 2 THEN
            DO:
                FIND FIRST craptlc WHERE craptlc.cdcooper = par_cdcooper     AND
                                         craptlc.cdadmcrd = par_cdadmcrd     AND
                                         craptlc.dddebito = 0                AND
                                         craptlc.tpcartao = 
                                         INTEGER(ENTRY(LOOKUP(par_dscartao,aux_dscartao),
                                         aux_cdcartao))              AND
                                         craptlc.vllimcrd = par_vllimpro 
                                         NO-LOCK NO-ERROR.
                    
                IF   NOT AVAILABLE craptlc   THEN
                     DO:
                         ASSIGN aux_cdcritic = 0
                                aux_dscritic = "Limite proposto e/ou tipo de cartao " +
                                               "invalido.".
                    
                         RUN gera_erro (INPUT par_cdcooper,
                                        INPUT par_cdagenci,
                                        INPUT par_nrdcaixa,
                                        INPUT 1,            /** Sequencia **/
                                        INPUT aux_cdcritic,
                                        INPUT-OUTPUT aux_dscritic).                
                        
                         UNDO TRANS_1, LEAVE TRANS_1.
                     END.
            
                aux_cdlimcrd = craptlc.cdlimcrd.
            END.
        ELSE
           DO:
               ASSIGN aux_cdlimcrd = 0.
                
               IF TRIM(UPPER(crapadc.nmbandei)) <> "MAESTRO" THEN
                  DO:
                      FIND FIRST craptlc WHERE craptlc.cdcooper = par_cdcooper AND
                                               craptlc.cdadmcrd = par_cdadmcrd AND
                                               craptlc.vllimcrd = par_vllimpro AND
                                               craptlc.dddebito = 0            AND
                                               craptlc.insittab = 0
                                               NO-LOCK NO-ERROR.
                           
                      IF NOT AVAILABLE craptlc THEN
                         DO:
                             ASSIGN aux_cdcritic = 0
                                    aux_dscritic = "Limite proposto e/ou tipo de cartao " +
                                                   "invalido.".
                           
                             RUN gera_erro (INPUT par_cdcooper,
                                            INPUT par_cdagenci,
                                            INPUT par_nrdcaixa,
                                            INPUT 1,            /** Sequencia **/
                                            INPUT aux_cdcritic,
                                            INPUT-OUTPUT aux_dscritic).                
                             
                             UNDO TRANS_1, LEAVE TRANS_1.
                         END.                     
                   
                      ASSIGN aux_cdlimcrd = craptlc.cdlimcrd.
                  END.      
           END.
            
        FOR FIRST crawcrd FIELDS(flgprcrd) WHERE crawcrd.cdcooper = par_cdcooper AND
                                                 crawcrd.nrdconta = par_nrdconta AND
                                                 crawcrd.cdadmcrd = par_cdadmcrd AND
                                                 crawcrd.flgprcrd = 1
                                                 NO-LOCK : 
            ASSIGN aux_flgprcrd = 0.
        END.


        /* Inicio - Alteracoes referentes a M181 - Rafael Maciel (RKAM) */
        IF par_cdagenci = 0 THEN
          ASSIGN par_cdagenci = glb_cdagenci.
        /* Fim - Alteracoes referentes a M181 - Rafael Maciel (RKAM) */


        CREATE crawcrd.              /* IF f_verifica_adm(craptlc.cdadmcrd) = 1 THEN */
        ASSIGN crawcrd.vllimcrd    = par_vllimpro /*- Cartao Bancoob Jean */
               crawcrd.flgctitg    = IF f_verifica_adm(par_cdadmcrd) = 1 THEN
                                        0 /*Enviar*/
                                     ELSE 
                                        3 /*Inativo*/ 
               crawcrd.dtmvtolt    = ?
               crawcrd.nrdconta    = par_nrdconta
               crawcrd.nrctrcrd    = aux_nrctrcrd

               /* INICIO - dados para o BI em caso de cancelamento - MACIEL (RKAM) */
               crawcrd.cdopeori = par_cdoperad 
               crawcrd.cdageori = par_cdagenci
               crawcrd.dtinsori = TODAY
               /* FIM - dados para o BI em caso de cancelamento - MACIEL (RKAM) */

               crawcrd.nrcpftit    = DECI(par_nrcpfcpf)
               crawcrd.nmextttl    = CAPS(par_nmextttl)
               crawcrd.nmtitcrd    = CAPS(par_nmtitcrd)               
                           crawcrd.flgprcrd    = aux_flgprcrd
               crawcrd.cdgraupr    = IF  crapass.inpessoa = 1  THEN
                                         INTEGER(ENTRY(LOOKUP(par_dsgraupr,aux_dsgraupr),aux_cdgraupr))
                                     ELSE
                                         5               
               crawcrd.tpdpagto    = par_tpdpagto
               crawcrd.flgdebcc    = IF  par_tpdpagto = 1 OR par_tpdpagto = 2  THEN
                                         TRUE
                                     ELSE
                                         FALSE
               crawcrd.tpenvcrd           = par_tpenvcrd
               crawcrd.vlsalari    = par_vlsalari
               crawcrd.vlsalcon    = par_vlsalcon
               crawcrd.vloutras    = par_vloutras
               crawcrd.vlalugue    = par_vlalugue
               crawcrd.dddebito    = INTE(par_dddebito)
               crawcrd.cdlimcrd    = INTE(aux_cdlimcrd)
               crawcrd.dtpropos    = par_dtmvtolt
               crawcrd.cdoperad    = par_cdoperad
               crawcrd.cdmotivo    = 0
               
                           crawcrd.insitcrd    = IF par_cdadmcrd >= 10 AND par_cdadmcrd < 81 THEN
                                        1 /*Aprovado*/
                                     ELSE 
                                        0 /*Estudo*/
               crawcrd.cdagenci    = 0
               crawcrd.cdbccxlt    = 0
               crawcrd.nrdolote    = 0
               crawcrd.nrseqdig    = 0
               crawcrd.nrcrcard    = 0
               crawcrd.dtsolici    = ?
               crawcrd.dtentreg    = ?
               crawcrd.dtentr2v    = ? 
               crawcrd.dtvalida    = ?
               crawcrd.dtanuida    = ?
               crawcrd.dtcancel    = ?
               crawcrd.dtlibera    = ?
               crawcrd.inanuida    = 0
               crawcrd.qtanuida    = 0
               crawcrd.qtparcan    = 0
               crawcrd.vlanuida    = 0
               crawcrd.tpcartao    = 
                             INTEGER(ENTRY(LOOKUP(par_dscartao,aux_dscartao),
                                 aux_cdcartao))  
               crawcrd.dtnasccr    = par_dtnasccr
               crawcrd.nrdoccrd    = par_nrdoccrd
               crawcrd.flgimpnp    = LOGICAL(par_flgimpnp)
               crawcrd.nrctaav1    = par_nrctaav1
               crawcrd.nrctaav2    = par_nrctaav2
               crawcrd.dsendav1[1] = IF par_nrctaav1 <> 0 THEN 
                                        ""
                                     ELSE 
                                        CAPS(par_ende1av1) + " " +
                                        STRING(par_nrender1)
               crawcrd.dsendav1[2] = IF par_nrctaav1 <> 0 THEN 
                                        ""
                                     ELSE 
                                        CAPS(par_ende2av1) + " - " + 
                                        CAPS(par_nmcidav1) + " - " +
                                        STRING(par_nrcepav1,"99999,999") +
                                        " - " + CAPS(par_cdufava1)
               crawcrd.dsendav2[1] = IF par_nrctaav2 <> 0 THEN 
                                        ""
                                     ELSE 
                                        CAPS(par_ende1av2) + " " +
                                        STRING(par_nrender2)
               crawcrd.dsendav2[2] = IF par_nrctaav2 <> 0 THEN 
                                        ""
                                     ELSE 
                                        CAPS(par_ende2av2) + " - " + 
                                        CAPS(par_nmcidav2) + " - " +
                                        STRING(par_nrcepav2,"99999,999") +
                                        " - " + CAPS(par_cdufava2)
               crawcrd.nmdaval1    = IF par_nrctaav1 <> 0 THEN 
                                        ""
                                     ELSE 
                                        par_nmdaval1
               crawcrd.nmdaval2    = IF par_nrctaav2 <> 0 THEN 
                                        "" 
                                     ELSE 
                                        par_nmdaval2
               crawcrd.dscpfav1    = IF par_nrctaav1 <> 0 THEN 
                                        "" 
                                     ELSE 
                                        par_dsdocav1
               crawcrd.dscpfav2    = IF par_nrctaav2 <> 0 THEN 
                                        ""
                                     ELSE 
                                        par_dsdocav2
               crawcrd.cdcooper    = par_cdcooper
               crawcrd.cdadmcrd    = INTE(par_cdadmcrd)
               crawcrd.flgdebit    = par_flgdebit.

        IF par_dsrepinc = "OUTROS" THEN
           DO:
               ASSIGN crawcrd.cdgraupr = 9.
           
           END.

        IF  crapass.inpessoa = 2  THEN
            DO:
                ASSIGN aux_nrempcrd = 0.
    
                FOR FIRST crabass FIELDS(nrempcrd)
                                WHERE crabass.cdcooper = crapass.cdcooper   AND
                                      crabass.nrdconta = crapass.nrdconta   AND
                                      crabass.inpessoa = 2
                                      EXCLUSIVE-LOCK:
                END.

                ASSIGN crawcrd.nrrepinc = par_nrrepinc
                       crawcrd.nmempcrd = CAPS(par_nmempres)
                       crabass.nrempcrd = aux_nrempcrd.

                VALIDATE crabass.

            END.

        VALIDATE crawcrd.
     
        /*
            Alterar limite de debito somente se administradora 
            for multiplo BB(83 84 85 86 87 88)
        */
        IF  crawcrd.cdadmcrd >= 83  AND
            crawcrd.cdadmcrd <= 88  THEN
            DO:
                DO aux_contador = 1 TO 10:
    
                    FIND crapass WHERE crapass.cdcooper = par_cdcooper  AND
                                       crapass.nrdconta = par_nrdconta
                                       EXCLUSIVE-LOCK NO-ERROR NO-WAIT.

                    IF  NOT AVAILABLE crapass  THEN
                        DO:
                            IF  LOCKED crapass  THEN
                                DO:
                                    aux_dscritic = "Registro de associados esta"
                                          + " sendo alterado. Tente Novamente.".
                                    PAUSE 1 NO-MESSAGE.
                                    NEXT.
                                END.
                            ELSE
                                DO:
                                    aux_dscritic = "Registro de associados " +
                                                   "nao encontrado.".
                          
                                    LEAVE.
                            END.
                        END.

                    ASSIGN crapass.vllimdeb = par_vllimdeb
                           aux_dscritic = "".

                    LEAVE.
            
                 END. /** Fim do DO ... TO **/
       
                 IF  aux_dscritic <> ""  THEN
                     DO:
                         ASSIGN aux_cdcritic = 0.

                         RUN gera_erro (INPUT par_cdcooper,
                                        INPUT par_cdagenci,
                                        INPUT par_nrdcaixa,
                                        INPUT 1,            /** Sequencia **/
                                        INPUT aux_cdcritic,
                                        INPUT-OUTPUT aux_dscritic).
                                                      
                         UNDO TRANS_1, LEAVE TRANS_1.
                     END.
            
            END. /* Fim da atualizacao de limite de debito */
            
        IF  crapass.inpessoa = 1  THEN
            DO:
                RUN sistema/generico/procedures/b1wgen9999.p PERSISTENT 
                    SET h-b1wgen9999.

                IF  NOT VALID-HANDLE(h-b1wgen9999)  THEN
                    DO:
                        ASSIGN aux_cdcritic = 0
                               aux_dscritic = "Handle invalido para BO b1wgen9999.".
                           
                        RUN gera_erro (INPUT par_cdcooper,
                                       INPUT par_cdagenci,
                                       INPUT par_nrdcaixa,
                                       INPUT 1,            /** Sequencia **/
                                       INPUT aux_cdcritic,
                                       INPUT-OUTPUT aux_dscritic).
                                               
                        UNDO TRANS_1, LEAVE TRANS_1.
                    END.
                
                RUN cria-tabelas-avalistas IN h-b1wgen9999 (INPUT par_cdcooper,
                                                            INPUT par_cdoperad,
                                                            INPUT par_idorigem,
                                                            INPUT "CARTAO CRED.",
                                                            INPUT par_nrdconta,
                                                            INPUT par_dtmvtolt,
                                                            INPUT 4, /* Tipo Contrato */
                                                            INPUT aux_nrctrcrd,
                                                            INPUT par_cdagenci,
                                                            INPUT par_nrdcaixa,
                                                            /** 1o avalista **/
                                                            INPUT par_nrctaav1,
                                                            INPUT par_nmdaval1,
                                                            INPUT par_nrcpfav1,
                                                            INPUT par_tpdocav1,
                                                            INPUT par_dsdocav1,
                                                            INPUT par_nmdcjav1,
                                                            INPUT par_cpfcjav1, 
                                                            INPUT par_tdccjav1,
                                                            INPUT par_doccjav1,
                                                            INPUT par_ende1av1,
                                                            INPUT par_ende2av1,
                                                            INPUT par_nrfonav1,
                                                            INPUT par_emailav1,
                                                            INPUT par_nmcidav1,
                                                            INPUT par_cdufava1,
                                                            INPUT par_nrcepav1,
                                                            INPUT "", /* Nacao */
                                                            INPUT 0,  /* Vl.Endiv*/
                                                            INPUT 0,  /* Vl.Rend */
                                                            INPUT par_nrender1, 
                                                            INPUT par_complen1,
                                                            INPUT par_nrcxaps1,
                                                            INPUT 0,  /* inpessoa 1o avail */
                                                            INPUT ?,  /* dtnascto 1o avail */
                                                            /** 2o avalista **/
                                                            INPUT par_nrctaav2,
                                                            INPUT par_nmdaval2, 
                                                            INPUT par_nrcpfav2,
                                                            INPUT par_tpdocav2,
                                                            INPUT par_dsdocav2, 
                                                            INPUT par_nmdcjav2, 
                                                            INPUT par_cpfcjav2,
                                                            INPUT par_tdccjav2,
                                                            INPUT par_doccjav2,
                                                            INPUT par_ende1av2,
                                                            INPUT par_ende2av2,
                                                            INPUT par_nrfonav2,
                                                            INPUT par_emailav2, 
                                                            INPUT par_nmcidav2, 
                                                            INPUT par_cdufava2, 
                                                            INPUT par_nrcepav2,                                                    
                                                            INPUT "", /* Nacao */
                                                            INPUT 0,  /* Vl.Endiv*/
                                                            INPUT 0,  /* Vl.Rend */
                                                            INPUT par_nrender2, 
                                                            INPUT par_complen2,
                                                            INPUT par_nrcxaps2,
                                                            INPUT 0,  /* inpessoa 2o avail */
                                                            INPUT ?,  /* dtnascto 2o avail */
                                                            INPUT "",
                                                           OUTPUT TABLE tt-erro).        
                DELETE PROCEDURE h-b1wgen9999.

                IF RETURN-VALUE = "NOK" THEN
                DO:
                    ASSIGN aux_flagerro = TRUE.
                    UNDO TRANS_1, LEAVE TRANS_1.
                END.
                
                IF  par_nrctaav1 = 0 AND par_nmdaval1 <> ""  THEN
                    DO:
                        ASSIGN crawcrd.dscfcav1 = " "
                               crawcrd.dscpfav1 = TRIM(CAPS(par_tpdocav1)) + " " +
                                                  TRIM(CAPS(par_dsdocav1)) + 
                                                  " C.P.F. " + STRING(par_nrcpfav1).
                        
                        IF  par_cpfcjav1 > 0  THEN
                            DO:    
                                ASSIGN crawcrd.dscfcav1 = TRIM(CAPS(par_tdccjav1)) + 
                                                          " " +
                                                          TRIM(CAPS(par_doccjav1)) + 
                                                          " C.P.F. " +
                                                          STRING(par_cpfcjav1).
                            END.
                    END.        
        
                IF  par_nrctaav2 = 0 AND par_nmdaval2 <> ""  THEN
                    DO:
                        ASSIGN crawcrd.dscfcav2 = " "
                               crawcrd.dscpfav2 = TRIM(CAPS(par_tpdocav2)) + " " +
                                                  TRIM(CAPS(par_dsdocav2)) + 
                                                  " C.P.F. " + STRING(par_nrcpfav2).
                 
                        IF  par_cpfcjav2 > 0  THEN
                            DO:    
                                ASSIGN crawcrd.dscfcav2 = TRIM(CAPS(par_tdccjav2)) + 
                                                          " " +
                                                          TRIM(CAPS(par_doccjav2)) + 
                                                          " C.P.F. " +
                                                          STRING(par_cpfcjav2).
                            END.
                    END.        
                  

            END.
            
        IF par_dsrepinc = "OUTROS" THEN
           DO:
               /* Vamos verificar se foi informado algum representante */ 
               IF INT(NUM-ENTRIES(par_dsrepres)) <= 0 THEN
                  DO:
                      ASSIGN aux_dscritic = "Representante nao informado.".
                      RUN gera_erro (INPUT par_cdcooper,
                                     INPUT par_cdagenci,
                                     INPUT par_nrdcaixa,
                                     INPUT 1,            /** Sequencia **/
                                     INPUT aux_cdcritic,
                                     INPUT-OUTPUT aux_dscritic).
                                               
                      UNDO TRANS_1, LEAVE TRANS_1.                  
                  END.
           
               DO aux_contador = 1 TO NUM-ENTRIES(par_dsrepres):
               
                  FIND FIRST crabavt WHERE crabavt.cdcooper = par_cdcooper AND
                                           crabavt.nrdconta = par_nrdconta AND
                                           crabavt.tpctrato = 6            AND
                                           crabavt.nrcpfcgc = DEC(ENTRY(aux_contador,par_dsrepres))
                                           NO-LOCK NO-ERROR.
                                          
                  IF NOT AVAILABLE crabavt THEN
                     DO:
                         ASSIGN aux_dscritic = "Representante nao encontrato. CPF: " + ENTRY(aux_contador,par_dsrepres).
                           
                         RUN gera_erro (INPUT par_cdcooper,
                                        INPUT par_cdagenci,
                                        INPUT par_nrdcaixa,
                                        INPUT 1,            /** Sequencia **/
                                        INPUT aux_cdcritic,
                                        INPUT-OUTPUT aux_dscritic).
                                               
                         UNDO TRANS_1, LEAVE TRANS_1.
                         
                     END. /* END IF NOT AVAILABLE crabavt THEN */
                     
                  CREATE crapavt.
                  BUFFER-COPY crabavt TO crapavt.
                  ASSIGN crapavt.nrctremp = crawcrd.nrctrcrd
                         crapavt.tpctrato = 10.
                  VALIDATE crapavt.
                                  
               END. /* END DO aux_contador = 1 TO NUM-ENTRIES(par_dsrepres): */
        
           END. /* END IF par_dsrepinc = "OUTROS" THEN */           

        /* Numero do cartao para a impressao da proposta */
        CREATE tt-ctr_novo_cartao.
        ASSIGN tt-ctr_novo_cartao.nrctrcrd = aux_nrctrcrd.
        
        IF   f_verifica_adm(crawcrd.cdadmcrd) = 1 THEN
             DO:
                 CREATE tt-msg-confirma.
                 ASSIGN tt-msg-confirma.inconfir = 1
                        tt-msg-confirma.dsmensag =
                                           "Verificar atualizacao cadastral.".
                 
                 DO aux_contador = 1 TO 10:
    
                    FIND crapalt WHERE crapalt.cdcooper = par_cdcooper AND
                                       crapalt.nrdconta = par_nrdconta AND
                                       crapalt.dtaltera = par_dtmvtolt
                                       EXCLUSIVE-LOCK NO-ERROR.

                    IF   NOT AVAILABLE crapalt   THEN
                         IF   LOCKED crapalt   THEN
                              DO:
                                  aux_dscritic = "Registro de alteracoes esta" 
                                         + " sendo alterado. Tente Novamente.".
                                  PAUSE 1 NO-MESSAGE.
                                  NEXT.
                              END.
                         ELSE
                              DO:
                                  CREATE crapalt.
                                  ASSIGN crapalt.nrdconta = par_nrdconta
                                         crapalt.dtaltera = par_dtmvtolt
                                         crapalt.tpaltera = 2
                                         crapalt.dsaltera = "Cartao BB,"
                                         crapalt.flgctitg = 0
                                         crapalt.cdoperad = par_cdoperad
                                         crapalt.cdcooper = par_cdcooper.
                              END.
                          
                    IF   NOT CAN-DO(crapalt.dsaltera,"Cartao BB")  THEN 
                         ASSIGN crapalt.dsaltera = crapalt.dsaltera + "Cartao BB,"
                                crapalt.flgctitg = 0.  /* Enviar */
                 
                    VALIDATE crapalt.

                    LEAVE.
            
                 END. /** Fim do DO ... TO **/
                 
                 IF  aux_dscritic <> ""  THEN
                     DO:
                        ASSIGN aux_cdcritic = 0.
                
                        RUN gera_erro (INPUT par_cdcooper,
                                       INPUT par_cdagenci,
                                       INPUT par_nrdcaixa,
                                       INPUT 1,            /** Sequencia **/
                                       INPUT aux_cdcritic,
                                       INPUT-OUTPUT aux_dscritic).
                                                              
                        UNDO TRANS_1, LEAVE TRANS_1.
                   END.
             
             END.
          
          ASSIGN aux_flagerro = FALSE.
          
    END.  /*  Fim da transacao  */
    
    /* Se ocorreu algum erro na transacao */
    IF  aux_flagerro  THEN
        DO:
            FIND FIRST tt-erro NO-LOCK NO-ERROR.
            
            IF  NOT AVAILABLE tt-erro  THEN
                DO:                
                    ASSIGN aux_cdcritic = 0
                           aux_dscritic = "Erro na transacao. Nao foi " + 
                                          "possivel cadastrar novo cartao.".

                    RUN gera_erro (INPUT par_cdcooper,
                                   INPUT par_cdagenci,
                                   INPUT par_nrdcaixa,
                                   INPUT 1,            /** Sequencia **/
                                   INPUT aux_cdcritic,
                                   INPUT-OUTPUT aux_dscritic).
                                               
                    RUN proc_gerar_log (INPUT par_cdcooper,
                                        INPUT par_cdoperad,
                                        INPUT aux_dscritic,
                                        INPUT aux_dsorigem,
                                        INPUT aux_dstransa,
                                        INPUT FALSE,
                                        INPUT par_idseqttl,
                                        INPUT par_nmdatela,
                                        INPUT par_nrdconta,
                                       OUTPUT aux_nrdrowid).
        
                    RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                                            INPUT "nrcrcard",
                                            INPUT "",
                                            INPUT crawcrd.nrcrcard).
                END.
                   
            RETURN "NOK".
        END.
        
    RUN proc_gerar_log (INPUT par_cdcooper,
                        INPUT par_cdoperad,
                        INPUT "",
                        INPUT aux_dsorigem,
                        INPUT aux_dstransa,
                        INPUT TRUE,
                        INPUT par_idseqttl,
                        INPUT par_nmdatela,
                        INPUT par_nrdconta,
                       OUTPUT aux_nrdrowid).
                       
    RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                            INPUT "nrcrcard",
                            INPUT "",
                            INPUT crawcrd.nrcrcard).

    RETURN "OK".

END PROCEDURE.

PROCEDURE gera_impressao_contrato_bb:

    DEF  INPUT PARAM par_cdcooper AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_cdagenci AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrdcaixa AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_cdoperad AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nmdatela AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_idorigem AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrdconta AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_idseqttl AS INTE                           NO-UNDO.    
    DEF  INPUT PARAM par_dtmvtolt AS DATE                           NO-UNDO.
    DEF  INPUT PARAM par_dtmvtopr AS DATE                           NO-UNDO.
    DEF  INPUT PARAM par_inproces AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrctrcrd AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_flgimpnp AS LOGI                           NO-UNDO.
    DEF  INPUT PARAM par_nmendter AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_flgimp2v AS LOGI                           NO-UNDO.
    DEF  INPUT PARAM par_flgerlog AS LOGI                           NO-UNDO.
    DEF  INPUT PARAM par_cdmotivo AS INTE                           NO-UNDO.

    DEF OUTPUT PARAM par_nmarqimp AS CHAR                           NO-UNDO.
    DEF OUTPUT PARAM par_nmarqpdf AS CHAR                           NO-UNDO.
    DEF OUTPUT PARAM TABLE FOR tt-erro.

    DEF VAR h_b1wgen0028i         AS HANDLE                         NO-UNDO.

    RUN sistema/generico/procedures/b1wgen0028i.p PERSISTENT SET h_b1wgen0028i. 
     
    IF  NOT VALID-HANDLE(h_b1wgen0028i)  THEN
        DO:
            ASSIGN aux_cdcritic = 0
                   aux_dscritic = "Handle invalido para BO b1wgen0028i.".
                   
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                       
            RETURN "NOK".
        END.
            
    RUN gera_impressao_contrato_bb 
            IN h_b1wgen0028i(INPUT  par_cdcooper,
                             INPUT  par_cdagenci,
                             INPUT  par_nrdcaixa,
                             INPUT  par_cdoperad,
                             INPUT  par_nmdatela,
                             INPUT  par_idorigem,
                             INPUT  par_nrdconta,
                             INPUT  par_idseqttl,
                             INPUT  par_dtmvtolt,
                             INPUT  par_dtmvtopr,
                             INPUT  par_inproces,
                             INPUT  par_nrctrcrd,
                             INPUT  par_flgimpnp,
                             INPUT  par_nmendter,
                             INPUT  par_flgimp2v,
                             INPUT  par_flgerlog,
                             INPUT  par_cdmotivo,
                             OUTPUT par_nmarqimp,
                             OUTPUT par_nmarqpdf,
                             OUTPUT TABLE tt-erro).

      
    DELETE PROCEDURE h_b1wgen0028i.

    IF   RETURN-VALUE = "NOK" THEN
         DO:
            RETURN "NOK".
         END.

    RETURN "OK". 

END.

/*********************
    OPCAO IMPRIMIR
*********************/
/******************************************************************************
    Impressoes Gerais, esta chama as procedures que carregam os dados para
    os contratos gerados.
******************************************************************************/
PROCEDURE impressoes_cartoes:

    DEF  INPUT PARAM par_cdcooper AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_cdagenci AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrdcaixa AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_cdoperad AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nmdatela AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_idorigem AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrdconta AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_idseqttl AS INTE                           NO-UNDO.    
    DEF  INPUT PARAM par_dtmvtolt AS DATE                           NO-UNDO.
    DEF  INPUT PARAM par_dtmvtopr AS DATE                           NO-UNDO.
    DEF  INPUT PARAM par_inproces AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_idimpres AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrctrcrd AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_flgerlog AS LOGI                           NO-UNDO.
    DEF  INPUT PARAM par_flgimpnp AS LOGI                           NO-UNDO.
    DEF  INPUT PARAM par_cdmotivo AS INTE                           NO-UNDO.
    
    DEF OUTPUT PARAM TABLE FOR tt-dados_prp_ccr.
    DEF OUTPUT PARAM TABLE FOR tt-dados_prp_emiss_ccr.
    DEF OUTPUT PARAM TABLE FOR tt-outros_cartoes.
    DEF OUTPUT PARAM TABLE FOR tt-termo_cancblq_cartao.    
    DEF OUTPUT PARAM TABLE FOR tt-ctr_credicard.
    DEF OUTPUT PARAM TABLE FOR tt-bdn_visa_cecred.
    DEF OUTPUT PARAM TABLE FOR tt-termo_solici2via.
    DEF OUTPUT PARAM TABLE FOR tt-avais-ctr.
    DEF OUTPUT PARAM TABLE FOR tt-ctr_bb.
    DEF OUTPUT PARAM TABLE FOR tt-termo_alt_dt_venc.
    DEF OUTPUT PARAM TABLE FOR tt-alt-limite-pj.
    DEF OUTPUT PARAM TABLE FOR tt-alt-dtvenc-pj.
    DEF OUTPUT PARAM TABLE FOR tt-termo-entreg-pj.
    DEF OUTPUT PARAM TABLE FOR tt-segviasen-cartao.
    DEF OUTPUT PARAM TABLE FOR tt-segvia-cartao.
    DEF OUTPUT PARAM TABLE FOR tt-termocan-cartao.
    DEF OUTPUT PARAM TABLE FOR tt-erro.
  
    EMPTY TEMP-TABLE tt-dados_prp_ccr.
    EMPTY TEMP-TABLE tt-outros_cartoes.
    EMPTY TEMP-TABLE tt-termo_cancblq_cartao.
    EMPTY TEMP-TABLE tt-ctr_credicard.
    EMPTY TEMP-TABLE tt-bdn_visa_cecred.
    EMPTY TEMP-TABLE tt-termo_solici2via.
    EMPTY TEMP-TABLE tt-avais-ctr.
    EMPTY TEMP-TABLE tt-ctr_bb.
    EMPTY TEMP-TABLE tt-termo_alt_dt_venc.
    EMPTY TEMP-TABLE tt-erro.
           
    
    ASSIGN aux_dsorigem = TRIM(ENTRY(par_idorigem,des_dorigens,",")).
    
    IF  par_idimpres = 1  THEN
        aux_dstransa = "Carregar dados para impressao da proposta e contrato " +
                       "do cartao de credito".
    ELSE
    IF  par_idimpres = 2  THEN
        aux_dstransa = "Carregar dados para impressao do contrato do cartao " +
                       "credito".
    ELSE
    IF  par_idimpres = 3  THEN
        aux_dstransa = "Carregar dados para impressao da proposta do cartao " +
                       "de credito".
    ELSE
    IF  par_idimpres = 4  THEN
        aux_dstransa = "Carregar dados para impressao do cancelamento do " +
                       "cartao de credito".
    ELSE
    IF  par_idimpres = 5  THEN
        aux_dstransa = "Carregar dados para impressao do contrato de cartao" +
                       " de credito Credicard".
    ELSE
    IF  par_idimpres = 6  THEN
        aux_dstransa = "Carregar dados para impressao do termo de solicitacao" +
                       " de 2via de cartao de credito".
    ELSE
    IF  par_idimpres = 7  THEN
        aux_dstransa = "Carregar dados para impressao do contrato de cartao" +
                       " credito BB".                       
    ELSE
    IF  par_idimpres = 8  THEN
        aux_dstransa = "Carregar dados para impressao do termo de alteracao" +
                       " da data de vencimento do cartao de credito".
    ELSE
    IF  par_idimpres = 9  THEN
        aux_dstransa = "Carregar dados para impressao do termo de entrega" +
                       " do cartao".  
    ELSE
    IF  par_idimpres = 10 THEN
        aux_dstransa = "Imprimindo proposta para emissao de cartao de credito".
    ELSE
    IF  par_idimpres = 11 THEN
        aux_dstransa = "Imprimindo solicitacao de segunda via de cartao de credito".
    ELSE
    IF  par_idimpres = 12 THEN
        aux_dstransa = "Imprimindo solicitacao de segunda via de senha de cartao de credito".
    ELSE
    IF  par_idimpres = 13 THEN
        aux_dstransa = "Imprimindo termo de cancelamento de cartao de credito".
    ELSE
    IF  par_idimpres = 14 THEN
        aux_dstransa = "Imprimindo pedido de alteracao de cartao de credito".
    ELSE
    IF  par_idimpres = 15 THEN
        aux_dstransa = "Imprimindo pedido de alteracao data de vencimento cartao de credito".
    ELSE
        DO:
            ASSIGN aux_cdcritic = 0
                   aux_dscritic = "Tipo de impressao invalida.".
                   
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                       
            IF  par_flgerlog  THEN
                DO:
                    RUN proc_gerar_log (INPUT par_cdcooper,
                                        INPUT par_cdoperad,
                                        INPUT aux_dscritic,
                                        INPUT aux_dsorigem,
                                        INPUT aux_dstransa,
                                        INPUT FALSE,
                                        INPUT par_idseqttl,
                                        INPUT par_nmdatela,
                                        INPUT par_nrdconta,
                                       OUTPUT aux_nrdrowid). 
                
                    RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                                            INPUT "nrctrcrd",
                                            INPUT "",
                                            INPUT par_nrctrcrd).
                
                END.                       
                                  
            RETURN "NOK".
        END.
                       
    FOR FIRST crapass FIELDS(inpessoa nrcpfcgc nmprimtl)
                           WHERE crapass.cdcooper = par_cdcooper AND 
                             crapass.nrdconta = par_nrdconta NO-LOCK:
    END.

    IF  crapass.inpessoa = 1 THEN
        DO:

            FIND crawcrd WHERE crawcrd.cdcooper = par_cdcooper AND
                               crawcrd.nrdconta = par_nrdconta AND
                               crawcrd.nrctrcrd = par_nrctrcrd
                               NO-LOCK NO-ERROR.
        
            IF  NOT AVAILABLE crawcrd  THEN
                DO:
                    IF  par_flgerlog  THEN
                        DO:
                            RUN proc_gerar_log (INPUT par_cdcooper,
                                                INPUT par_cdoperad,
                                                INPUT aux_dscritic,
                                                INPUT aux_dsorigem,
                                                INPUT aux_dstransa,
                                                INPUT FALSE,
                                                INPUT par_idseqttl,
                                                INPUT par_nmdatela,
                                                INPUT par_nrdconta,
                                               OUTPUT aux_nrdrowid).
                                               
                            RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                                                    INPUT "nrctrcrd",
                                                    INPUT "",
                                                    INPUT par_nrctrcrd).               
        
                        END.
        
                    RETURN "NOK".
        
                END.

        END.

    IF  par_idimpres = 1  THEN /** Impressao PROP ALT LIM CRE CARTAO **/
        DO:
            RUN carrega_dados_proposta(INPUT par_cdcooper,
                                       INPUT par_cdagenci,
                                       INPUT par_nrdcaixa,
                                       INPUT par_cdoperad,
                                       INPUT par_nmdatela,
                                       INPUT par_idorigem,
                                       INPUT par_nrdconta,
                                       INPUT par_idseqttl,
                                       INPUT par_dtmvtolt,
                                       INPUT par_dtmvtopr,
                                       INPUT par_inproces,
                                       INPUT par_nrctrcrd,
                                      OUTPUT TABLE tt-dados_prp_ccr,
                                      OUTPUT TABLE tt-outros_cartoes,
                                      OUTPUT TABLE tt-dados-ctr,
                                      OUTPUT TABLE tt-erro).
        
            IF  RETURN-VALUE = "NOK"  THEN
                DO:
                    IF  par_flgerlog  THEN
                        DO:
                            RUN proc_gerar_log (INPUT par_cdcooper,
                                                INPUT par_cdoperad,
                                                INPUT aux_dscritic,
                                                INPUT aux_dsorigem,
                                                INPUT aux_dstransa,
                                                INPUT FALSE,
                                                INPUT par_idseqttl,
                                                INPUT par_nmdatela,
                                                INPUT par_nrdconta,
                                               OUTPUT aux_nrdrowid). 

                            RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                                                    INPUT "nrctrcrd",
                                                    INPUT "",
                                                    INPUT par_nrctrcrd).    
                        END.          
                    RETURN "NOK".
                END.
        END.
    ELSE
    IF  par_idimpres = 2  THEN /** Impressao CONTRATO **/
        DO: 
            RUN contrato_cecred_bdn_visa(INPUT par_cdcooper,
                                         INPUT par_cdagenci, 
                                         INPUT par_nrdcaixa, 
                                         INPUT par_cdoperad, 
                                         INPUT par_nmdatela, 
                                         INPUT par_idorigem, 
                                         INPUT par_nrdconta, 
                                         INPUT par_idseqttl, 
                                         INPUT par_dtmvtolt, 
                                         INPUT par_nrctrcrd, 
                                         INPUT par_flgimpnp, 
                                        OUTPUT TABLE tt-bdn_visa_cecred,
                                        OUTPUT TABLE tt-avais-ctr,
                                        OUTPUT TABLE tt-erro).

            IF  RETURN-VALUE = "NOK"  THEN
                DO:
                    IF  par_flgerlog  THEN
                        DO:
                            RUN proc_gerar_log (INPUT par_cdcooper,
                                                INPUT par_cdoperad,
                                                INPUT aux_dscritic,
                                                INPUT aux_dsorigem,
                                                INPUT aux_dstransa,
                                                INPUT FALSE,
                                                INPUT par_idseqttl,
                                                INPUT par_nmdatela,
                                                INPUT par_nrdconta,
                                               OUTPUT aux_nrdrowid). 

                            RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                                                    INPUT "nrctrcrd",
                                                    INPUT "",
                                                    INPUT par_nrctrcrd).    
                        END.
                                                          
                    RETURN "NOK".
                END.

        END.
    ELSE
    IF  par_idimpres = 3  THEN /** Impressao PROPOSTA **/
        DO: 

            RUN carrega_dados_proposta(INPUT par_cdcooper,
                                       INPUT par_cdagenci,
                                       INPUT par_nrdcaixa,
                                       INPUT par_cdoperad,
                                       INPUT par_nmdatela,
                                       INPUT par_idorigem,
                                       INPUT par_nrdconta,
                                       INPUT par_idseqttl,
                                       INPUT par_dtmvtolt,
                                       INPUT par_dtmvtopr,
                                       INPUT par_inproces,
                                       INPUT par_nrctrcrd,
                                      OUTPUT TABLE tt-dados_prp_ccr,
                                      OUTPUT TABLE tt-outros_cartoes,
                                      OUTPUT TABLE tt-dados-ctr,
                                      OUTPUT TABLE tt-erro).
       
            IF  RETURN-VALUE = "NOK"  THEN
                DO:
                    IF  par_flgerlog  THEN
                        DO:
                            RUN proc_gerar_log (INPUT par_cdcooper,
                                                INPUT par_cdoperad,
                                                INPUT aux_dscritic,
                                                INPUT aux_dsorigem,
                                                INPUT aux_dstransa,
                                                INPUT FALSE,
                                                INPUT par_idseqttl,
                                                INPUT par_nmdatela,
                                                INPUT par_nrdconta,
                                               OUTPUT aux_nrdrowid). 

                            RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                                                    INPUT "nrctrcrd",
                                                    INPUT "",
                                                    INPUT par_nrctrcrd).    
                        END.
                                                          
                    RETURN "NOK".
                END.
        END.
    ELSE
    IF  par_idimpres = 4  THEN /** Impressao CANCELAMENTO/BLOQUEIO **/
        DO:
            RUN termo_cancblq_cartao  (INPUT par_cdcooper,
                                       INPUT par_cdagenci,
                                       INPUT par_nrdcaixa,
                                       INPUT par_cdoperad,
                                       INPUT par_nrdconta,
                                       INPUT par_dtmvtolt,
                                       INPUT par_idorigem,
                                       INPUT par_idseqttl,
                                       INPUT par_nmdatela,
                                       INPUT par_nrctrcrd,
                                      OUTPUT TABLE tt-termo_cancblq_cartao,
                                      OUTPUT TABLE tt-erro).
                                      
            IF  RETURN-VALUE = "NOK"  THEN
                DO:
                    IF  par_flgerlog  THEN
                        DO:
                            RUN proc_gerar_log (INPUT par_cdcooper,
                                                INPUT par_cdoperad,
                                                INPUT aux_dscritic,
                                                INPUT aux_dsorigem,
                                                INPUT aux_dstransa,
                                                INPUT FALSE,
                                                INPUT par_idseqttl,
                                                INPUT par_nmdatela,
                                                INPUT par_nrdconta,
                                               OUTPUT aux_nrdrowid). 

                            RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                                                    INPUT "nrctrcrd",
                                                    INPUT "",
                                                    INPUT par_nrctrcrd).    
                        END.
                                                          
                    RETURN "NOK".
                END.
        END.
    ELSE
    IF  par_idimpres = 5  THEN /** Impressao Contrato Credicard **/
        DO:
            RUN contrato_credicard (INPUT par_cdcooper,
                                    INPUT par_cdagenci,
                                    INPUT par_nrdcaixa,
                                    INPUT par_cdoperad,
                                    INPUT par_nmdatela,
                                    INPUT par_idorigem,
                                    INPUT par_nrdconta,
                                    INPUT par_idseqttl,
                                    INPUT par_dtmvtolt,
                                    INPUT par_nrctrcrd,
                                    INPUT par_flgimpnp,
                                   OUTPUT TABLE tt-ctr_credicard,
                                   OUTPUT TABLE tt-avais-ctr,
                                   OUTPUT TABLE tt-erro).
                                      
            IF  RETURN-VALUE = "NOK"  THEN
                DO:
                    IF  par_flgerlog  THEN
                        DO:
                            RUN proc_gerar_log (INPUT par_cdcooper,
                                                INPUT par_cdoperad,
                                                INPUT aux_dscritic,
                                                INPUT aux_dsorigem,
                                                INPUT aux_dstransa,
                                                INPUT FALSE,
                                                INPUT par_idseqttl,
                                                INPUT par_nmdatela,
                                                INPUT par_nrdconta,
                                               OUTPUT aux_nrdrowid). 

                            RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                                                    INPUT "nrctrcrd",
                                                    INPUT "",
                                                    INPUT par_nrctrcrd).    
                        END.
                                                          
                    RETURN "NOK".
                END.
        END.
    ELSE
    IF  par_idimpres = 6  THEN /** Impressao SOLICITACAO 2VIA **/
        DO:
            RUN termo_solici2via  (INPUT par_cdcooper,
                                   INPUT par_cdagenci,
                                   INPUT par_nrdcaixa,
                                   INPUT par_cdoperad,
                                   INPUT par_nrdconta,
                                   INPUT par_dtmvtolt,
                                   INPUT par_idorigem,
                                   INPUT par_idseqttl,
                                   INPUT par_nmdatela,
                                   INPUT par_nrctrcrd,
                                   INPUT par_cdmotivo,
                                  OUTPUT TABLE tt-termo_solici2via,
                                  OUTPUT TABLE tt-erro).
                                      
            IF  RETURN-VALUE = "NOK"  THEN
                DO:
                    IF  par_flgerlog  THEN
                        DO:
                            RUN proc_gerar_log (INPUT par_cdcooper,
                                                INPUT par_cdoperad,
                                                INPUT aux_dscritic,
                                                INPUT aux_dsorigem,
                                                INPUT aux_dstransa,
                                                INPUT FALSE,
                                                INPUT par_idseqttl,
                                                INPUT par_nmdatela,
                                                INPUT par_nrdconta,
                                               OUTPUT aux_nrdrowid). 

                            RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                                                    INPUT "nrctrcrd",
                                                    INPUT "",
                                                    INPUT par_nrctrcrd).    
                        END.
                                                          
                    RETURN "NOK".
                END.
        END.        
    ELSE
    IF  par_idimpres = 7  THEN /** Impressao CONTRATO BB **/
        DO: 
            RUN contrato_bb(INPUT par_cdcooper,
                            INPUT par_cdagenci, 
                            INPUT par_nrdcaixa, 
                            INPUT par_cdoperad, 
                            INPUT par_nmdatela, 
                            INPUT par_idorigem, 
                            INPUT par_nrdconta, 
                            INPUT par_idseqttl, 
                            INPUT par_dtmvtolt, 
                            INPUT par_nrctrcrd, 
                            INPUT par_flgimpnp, 
                            OUTPUT TABLE tt-ctr_bb,
                            OUTPUT TABLE tt-avais-ctr,
                            OUTPUT TABLE tt-erro).
           
            IF  RETURN-VALUE = "NOK"  THEN
                DO:
                    IF  par_flgerlog  THEN
                        DO:
                            RUN proc_gerar_log (INPUT par_cdcooper,
                                                INPUT par_cdoperad,
                                                INPUT aux_dscritic,
                                                INPUT aux_dsorigem,
                                                INPUT aux_dstransa,
                                                INPUT FALSE,
                                                INPUT par_idseqttl,
                                                INPUT par_nmdatela,
                                                INPUT par_nrdconta,
                                               OUTPUT aux_nrdrowid). 

                            RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                                                    INPUT "nrctrcrd",
                                                    INPUT "",
                                                    INPUT par_nrctrcrd).    
                        END.
                                                          
                    RETURN "NOK".

                END. 
             
        END.
    ELSE
    IF  par_idimpres = 8  THEN /** Impressao TERMO ALT DT VCTO **/
        DO: 
            RUN termo_altdata(INPUT par_cdcooper,
                              INPUT par_cdagenci, 
                              INPUT par_nrdcaixa, 
                              INPUT par_cdoperad, 
                              INPUT par_nmdatela, 
                              INPUT par_idorigem, 
                              INPUT par_nrdconta, 
                              INPUT par_idseqttl, 
                              INPUT par_dtmvtolt, 
                              INPUT par_nrctrcrd, 
                             OUTPUT TABLE tt-termo_alt_dt_venc,
                             OUTPUT TABLE tt-erro).

            IF  RETURN-VALUE = "NOK"  THEN
                DO:
                    IF  par_flgerlog  THEN
                        DO:
                            RUN proc_gerar_log (INPUT par_cdcooper,
                                                INPUT par_cdoperad,
                                                INPUT aux_dscritic,
                                                INPUT aux_dsorigem,
                                                INPUT aux_dstransa,
                                                INPUT FALSE,
                                                INPUT par_idseqttl,
                                                INPUT par_nmdatela,
                                                INPUT par_nrdconta,
                                               OUTPUT aux_nrdrowid). 

                            RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                                                    INPUT "nrctrcrd",
                                                    INPUT "",
                                                    INPUT par_nrctrcrd).    
                        END.
                                                          
                    RETURN "NOK".
                END.

        END.        
    ELSE
    IF  par_idimpres = 9  THEN /** Impressao TERMO de entrega cartao PJ **/
        DO: 
            RUN entrega_cartao_pj( INPUT par_cdcooper,
                                   INPUT par_cdagenci, 
                                   INPUT par_nrdcaixa, 
                                   INPUT par_cdoperad, 
                                   INPUT par_nmdatela, 
                                   INPUT par_idorigem, 
                                   INPUT par_nrdconta, 
                                   INPUT par_idseqttl, 
                                   INPUT par_dtmvtolt, 
                                   INPUT par_nrctrcrd, 
                                  OUTPUT TABLE tt-termo-entreg-pj,
                                  OUTPUT TABLE tt-erro).

            IF  RETURN-VALUE = "NOK"  THEN
                DO:
                    IF  par_flgerlog  THEN
                        DO:
                            RUN proc_gerar_log (INPUT par_cdcooper,
                                                INPUT par_cdoperad,
                                                INPUT aux_dscritic,
                                                INPUT aux_dsorigem,
                                                INPUT aux_dstransa,
                                                INPUT FALSE,
                                                INPUT par_idseqttl,
                                                INPUT par_nmdatela,
                                                INPUT par_nrdconta,
                                               OUTPUT aux_nrdrowid). 

                            RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                                                    INPUT "nrctrcrd",
                                                    INPUT "",
                                                    INPUT par_nrctrcrd).    
                        END.
                                                          
                    RETURN "NOK".
                END.

        END.  
    ELSE
    IF  par_idimpres = 10  THEN /** Impressao PROPOSTA emissao**/
        DO:

            RUN carrega_dados_proposta_emissao( INPUT par_cdcooper,
                                                INPUT par_cdagenci,
                                                INPUT par_nrdcaixa,
                                                INPUT par_cdoperad,
                                                INPUT par_nmdatela,
                                                INPUT par_idorigem,
                                                INPUT par_nrdconta,
                                                INPUT par_idseqttl,
                                                INPUT par_dtmvtolt,
                                                INPUT par_dtmvtopr,
                                                INPUT par_inproces,
                                                INPUT par_nrctrcrd,
                                               OUTPUT TABLE tt-dados_prp_emiss_ccr,
                                               OUTPUT TABLE tt-outros_cartoes,
                                               OUTPUT TABLE tt-dados-ctr,
                                               OUTPUT TABLE tt-erro).


            IF  RETURN-VALUE = "NOK"  THEN
                DO:
                    IF  par_flgerlog  THEN
                        DO:
                            RUN proc_gerar_log (INPUT par_cdcooper,
                                                INPUT par_cdoperad,
                                                INPUT aux_dscritic,
                                                INPUT aux_dsorigem,
                                                INPUT aux_dstransa,
                                                INPUT FALSE,
                                                INPUT par_idseqttl,
                                                INPUT par_nmdatela,
                                                INPUT par_nrdconta,
                                               OUTPUT aux_nrdrowid). 

                            RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                                                    INPUT "nrctrcrd",
                                                    INPUT "",
                                                    INPUT par_nrctrcrd).    
                        END.

                    RETURN "NOK".
                END.
        END.
    ELSE
    IF  par_idimpres = 11  THEN /** Impressao segunda via cartao PJ **/
        DO: 
            RUN segunda_via_cartao_pj( INPUT par_cdcooper,
                                       INPUT par_cdagenci, 
                                       INPUT par_nrdcaixa, 
                                       INPUT par_cdoperad, 
                                       INPUT par_nmdatela, 
                                       INPUT par_idorigem, 
                                       INPUT par_nrdconta, 
                                       INPUT par_idseqttl, 
                                       INPUT par_dtmvtolt, 
                                       INPUT par_nrctrcrd, 
                                      OUTPUT TABLE tt-segvia-cartao,
                                      OUTPUT TABLE tt-erro).

            IF  RETURN-VALUE = "NOK"  THEN
                DO:
                    IF  par_flgerlog  THEN
                        DO:
                            RUN proc_gerar_log (INPUT par_cdcooper,
                                                INPUT par_cdoperad,
                                                INPUT aux_dscritic,
                                                INPUT aux_dsorigem,
                                                INPUT aux_dstransa,
                                                INPUT FALSE,
                                                INPUT par_idseqttl,
                                                INPUT par_nmdatela,
                                                INPUT par_nrdconta,
                                               OUTPUT aux_nrdrowid). 

                            RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                                                    INPUT "nrctrcrd",
                                                    INPUT "",
                                                    INPUT par_nrctrcrd).    
                        END.

                    RETURN "NOK".
                END.

        END.  
     ELSE
     IF  par_idimpres = 12  THEN /** Impressao segunda via senha cartao PJ **/
         DO: 
             RUN segunda_via_senha_cartao_pj( INPUT par_cdcooper,
                                              INPUT par_cdagenci, 
                                              INPUT par_nrdcaixa, 
                                              INPUT par_cdoperad, 
                                              INPUT par_nmdatela, 
                                              INPUT par_idorigem, 
                                              INPUT par_nrdconta, 
                                              INPUT par_idseqttl, 
                                              INPUT par_dtmvtolt, 
                                              INPUT par_nrctrcrd, 
                                             OUTPUT TABLE tt-segviasen-cartao,
                                             OUTPUT TABLE tt-erro).

             IF  RETURN-VALUE = "NOK"  THEN
                 DO:
                     IF  par_flgerlog  THEN
                         DO:
                             RUN proc_gerar_log (INPUT par_cdcooper,
                                                 INPUT par_cdoperad,
                                                 INPUT aux_dscritic,
                                                 INPUT aux_dsorigem,
                                                 INPUT aux_dstransa,
                                                 INPUT FALSE,
                                                 INPUT par_idseqttl,
                                                 INPUT par_nmdatela,
                                                 INPUT par_nrdconta,
                                                OUTPUT aux_nrdrowid). 

                             RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                                                     INPUT "nrctrcrd",
                                                     INPUT "",
                                                     INPUT par_nrctrcrd).    
                         END.

                     RETURN "NOK".
                 END.

         END.  
     ELSE
     IF  par_idimpres = 13  THEN /** Impressao cancelamento cartao PJ **/
         DO: 
             RUN cancela_cartao_pj( INPUT par_cdcooper,
                                    INPUT par_cdagenci, 
                                    INPUT par_nrdcaixa, 
                                    INPUT par_cdoperad, 
                                    INPUT par_nmdatela, 
                                    INPUT par_idorigem, 
                                    INPUT par_nrdconta, 
                                    INPUT par_idseqttl, 
                                    INPUT par_dtmvtolt, 
                                    INPUT par_nrctrcrd, 
                                    OUTPUT TABLE tt-termocan-cartao,
                                    OUTPUT TABLE tt-erro).

             IF  RETURN-VALUE = "NOK"  THEN
                 DO:
                     IF  par_flgerlog  THEN
                         DO:
                             RUN proc_gerar_log (INPUT par_cdcooper,
                                                 INPUT par_cdoperad,
                                                 INPUT aux_dscritic,
                                                 INPUT aux_dsorigem,
                                                 INPUT aux_dstransa,
                                                 INPUT FALSE,
                                                 INPUT par_idseqttl,
                                                 INPUT par_nmdatela,
                                                 INPUT par_nrdconta,
                                                OUTPUT aux_nrdrowid). 

                             RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                                                     INPUT "nrctrcrd",
                                                     INPUT "",
                                                     INPUT par_nrctrcrd).    
                         END.

                     RETURN "NOK".
                 END.

         END.

     ELSE
     IF  par_idimpres = 14  THEN /** Termo Altera limite  PJ **/
         DO: 
             RUN altera_limite_cartao_pj( INPUT par_cdcooper,
                                          INPUT par_cdagenci, 
                                          INPUT par_nrdcaixa, 
                                          INPUT par_cdoperad, 
                                          INPUT par_nmdatela, 
                                          INPUT par_idorigem, 
                                          INPUT par_nrdconta, 
                                          INPUT par_idseqttl, 
                                          INPUT par_dtmvtolt, 
                                          INPUT par_nrctrcrd, 
                                         OUTPUT TABLE tt-alt-limite-pj,
                                         OUTPUT TABLE tt-erro).

             IF  RETURN-VALUE = "NOK"  THEN
                 DO:
                     IF  par_flgerlog  THEN
                         DO:
                             RUN proc_gerar_log ( INPUT par_cdcooper,
                                                  INPUT par_cdoperad,
                                                  INPUT aux_dscritic,
                                                  INPUT aux_dsorigem,
                                                  INPUT aux_dstransa,
                                                  INPUT FALSE,
                                                  INPUT par_idseqttl,
                                                  INPUT par_nmdatela,
                                                  INPUT par_nrdconta,
                                                 OUTPUT aux_nrdrowid). 

                             RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                                                     INPUT "nrctrcrd",
                                                     INPUT "",
                                                     INPUT par_nrctrcrd).    
                         END.

                     RETURN "NOK".
                 END.

         END.
     ELSE
     IF  par_idimpres = 15  THEN /** Impressao TERMO ALT DT VCTO PJ **/
         DO: 
             RUN altera_dtvcto_cartao_pj( INPUT par_cdcooper,
                                          INPUT par_cdagenci, 
                                          INPUT par_nrdcaixa, 
                                          INPUT par_cdoperad, 
                                          INPUT par_nmdatela, 
                                          INPUT par_idorigem, 
                                          INPUT par_nrdconta, 
                                          INPUT par_idseqttl, 
                                          INPUT par_dtmvtolt, 
                                          INPUT par_nrctrcrd, 
                                         OUTPUT TABLE tt-alt-dtvenc-pj,
                                         OUTPUT TABLE tt-erro).

             IF  RETURN-VALUE = "NOK"  THEN
                 DO:
                     IF  par_flgerlog  THEN
                         DO:
                             RUN proc_gerar_log ( INPUT par_cdcooper,
                                                  INPUT par_cdoperad,
                                                  INPUT aux_dscritic,
                                                  INPUT aux_dsorigem,
                                                  INPUT aux_dstransa,
                                                  INPUT FALSE,
                                                  INPUT par_idseqttl,
                                                  INPUT par_nmdatela,
                                                  INPUT par_nrdconta,
                                                 OUTPUT aux_nrdrowid). 

                             RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                                                     INPUT "nrctrcrd",
                                                     INPUT "",
                                                     INPUT par_nrctrcrd).    
                         END.

                     RETURN "NOK".
                 END.

         END.
    
    IF  par_flgerlog  THEN
        DO:
            RUN proc_gerar_log (INPUT par_cdcooper,
                                INPUT par_cdoperad,
                                INPUT "",
                                INPUT aux_dsorigem,
                                INPUT aux_dstransa,
                                INPUT TRUE,
                                INPUT par_idseqttl,
                                INPUT par_nmdatela,
                                INPUT par_nrdconta,
                               OUTPUT aux_nrdrowid).
                               
            IF  crapass.inpessoa = 1 THEN
                RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                                        INPUT "nrcrcard",
                                        INPUT "",
                                        INPUT crawcrd.nrcrcard).
        END.                       
        
              

    RETURN "OK".

END PROCEDURE.  



/*********************
    OPCAO CONSULTAR
*********************/    
/******************************************************
    Consultar os dados de um determinado cartao
 *****************************************************/
PROCEDURE consulta_dados_cartao:

    DEF INPUT PARAM par_cdcooper AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_cdagenci AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_nrdcaixa AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_cdoperad AS CHAR                         NO-UNDO.
    DEF INPUT PARAM par_nrdconta AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_nrctrcrd AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_idorigem AS INTE                         NO-UNDO. 
    DEF INPUT PARAM par_idseqttl AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_nmdatela AS CHAR                         NO-UNDO.

    DEF OUTPUT PARAM TABLE FOR tt-erro.
    DEF OUTPUT PARAM TABLE FOR tt-dados_cartao.
    DEF OUTPUT PARAM TABLE FOR tt-msg-confirma.
    
    EMPTY TEMP-TABLE tt-msg-confirma.

    DEF VAR aux_dtanucrd AS DATE NO-UNDO.
    DEF VAR aux_vlanucrd AS DECI NO-UNDO.
    DEF VAR aux_inanucrd AS INTE NO-UNDO.
    DEF VAR aux_vllimite AS CHAR NO-UNDO.
    DEF VAR aux_dssituac AS CHAR NO-UNDO.
    DEF VAR aux_dsmotivo AS CHAR NO-UNDO.
    DEF VAR aux_dsde2via AS CHAR NO-UNDO.
    DEF VAR aux_ds2viacr AS CHAR NO-UNDO.
    DEF VAR aux_ds2viasn AS CHAR NO-UNDO.
    DEF VAR aux_dspaganu AS CHAR NO-UNDO.
    DEF VAR aux_dscartao AS CHAR NO-UNDO.
    DEF VAR aux_nmoperad AS CHAR NO-UNDO.
    DEF VAR aux_dsparent AS CHAR NO-UNDO.
    DEF VAR aux_dsgraupr AS CHAR INIT
      "Conjuge,Filhos,Companheiro,Primeiro Titular,Segundo Titular,Terceiro Titular,Quarto Titular,Outros" NO-UNDO.
    DEF VAR aux_cdgraupr AS CHAR INIT "1,3,4,5,6,7,8,9" NO-UNDO.
    DEF VAR aux_nrctamae AS DECI NO-UNDO.
    DEF VAR aux_lbcanblq AS CHAR NO-UNDO.
    DEF VAR aux_vllimdeb AS DECI NO-UNDO.
    DEF VAR aux_nrcpfrep AS DECI NO-UNDO.
    
    DEF VAR aux_inacetaa LIKE crapcrd.inacetaa NO-UNDO.
    DEF VAR aux_dtacetaa LIKE crapcrd.dtacetaa NO-UNDO.
    DEF VAR aux_cdopetaa LIKE crapcrd.cdopetaa NO-UNDO.
    DEF VAR aux_nmopetaa AS CHAR               NO-UNDO.
    DEF VAR aux_dsacetaa AS CHAR               NO-UNDO.
    DEF VAR aux_dstitula AS CHAR               NO-UNDO.
    DEF VAR aux_dsdpagto AS CHAR               NO-UNDO.
    
    DEF  BUFFER crabass FOR crapass.
    
    EMPTY TEMP-TABLE tt-erro.
    EMPTY TEMP-TABLE tt-dados_cartao.
    
    ASSIGN aux_dsorigem = TRIM(ENTRY(par_idorigem,des_dorigens,","))
           aux_dstransa = "Consultar dados cartao de credito.".

    FIND crawcrd WHERE crawcrd.cdcooper = par_cdcooper   AND
                       crawcrd.nrdconta = par_nrdconta   AND
                       crawcrd.nrctrcrd = par_nrctrcrd   NO-LOCK NO-ERROR.

    IF   NOT AVAILABLE crawcrd THEN
         DO:
             ASSIGN aux_cdcritic = 535
                    aux_dscritic = "".

             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).                
                
             RETURN "NOK".
         END.
    
    IF  f_verifica_adm(crawcrd.cdadmcrd) = 2  THEN
        DO:
            FIND crapope WHERE crapope.cdcooper = par_cdcooper AND
                               crapope.cdoperad = par_cdoperad 
                               NO-LOCK NO-ERROR NO-WAIT.

            IF  AVAIL crapope  THEN
                DO:
                    IF  par_idorigem = 1         AND
                        crapope.cddepart <> 20   AND  /* TI */
                        crapope.cddepart <> 2   THEN /* CARTOES */
                        DO:
                            ASSIGN aux_cdcritic = 0
                                   aux_dscritic = "Opcao indisponivel. " + 
                                                  "Utilize o Ayllos Web.".

                            RUN gera_erro (INPUT par_cdcooper,
                                           INPUT par_cdagenci,
                                           INPUT par_nrdcaixa,
                                           INPUT 1,            /** Sequencia **/
                                           INPUT aux_cdcritic,
                                           INPUT-OUTPUT aux_dscritic).                
                            
                            RETURN "NOK".
                        END.
                    
                END.
        END.

    FIND crapadc WHERE crapadc.cdcooper = par_cdcooper      AND
                       crapadc.cdadmcrd = crawcrd.cdadmcrd  NO-LOCK NO-ERROR.

    IF   NOT AVAILABLE crapadc THEN
         DO:
             ASSIGN aux_cdcritic = 605
                    aux_dscritic = "".

             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).                
                
             RETURN "NOK".
         END.    

    FIND crapcrd WHERE crapcrd.cdcooper = par_cdcooper      AND
                       crapcrd.nrdconta = par_nrdconta      AND
                       crapcrd.nrcrcard = crawcrd.nrcrcard  NO-LOCK NO-ERROR.

    IF   NOT AVAILABLE crapcrd THEN
         ASSIGN aux_dtanucrd = ?
                aux_vlanucrd = 0
                aux_inanucrd = 0.
    ELSE
      DO:
          ASSIGN aux_dtanucrd = crapcrd.dtanucrd
                 aux_vlanucrd = crapcrd.vlanucrd
                 aux_inanucrd = crapcrd.inanucrd
                 aux_inacetaa = crapcrd.inacetaa
                 aux_dtacetaa = crapcrd.dtacetaa
                 aux_cdopetaa = crapcrd.cdopetaa.
                 
          IF aux_inacetaa = 0 THEN
             ASSIGN aux_dsacetaa = "BLOQUEADO".
          ELSE   
             ASSIGN aux_dsacetaa = "LIBERADO".
                 
          FOR crapope FIELDS(nmoperad)
                      WHERE crapope.cdcooper = par_cdcooper AND
                            crapope.cdoperad = aux_cdopetaa 
                            NO-LOCK: END.

          IF AVAILABLE crapope THEN
             ASSIGN aux_nmopetaa = crapope.nmoperad.          
      END.
      
    IF  f_verifica_adm(crawcrd.cdadmcrd) <> 2 THEN
        DO:

            FIND craptlc WHERE craptlc.cdcooper = par_cdcooper       AND 
                               craptlc.cdadmcrd = crawcrd.cdadmcrd   AND
                               craptlc.tpcartao = crawcrd.tpcartao   AND
                               craptlc.cdlimcrd = crawcrd.cdlimcrd   AND
                               craptlc.dddebito = 0                  NO-LOCK NO-ERROR.

            IF   NOT AVAILABLE craptlc   THEN
                 DO:
                     ASSIGN aux_cdcritic = 532
                            aux_dscritic = "".
        
                     RUN gera_erro (INPUT par_cdcooper,
                                    INPUT par_cdagenci,
                                    INPUT par_nrdcaixa,
                                    INPUT 1,            /** Sequencia **/
                                    INPUT aux_cdcritic,
                                    INPUT-OUTPUT aux_dscritic).                
                        
                     RETURN "NOK".         
                 END.
                ASSIGN aux_vllimite = STRING(crawcrd.cdlimcrd,"zzz99") + " - " +
                                          STRING(craptlc.vllimcrd,"zz,zzz,zz9.99").
        
        END.
    ELSE
        ASSIGN aux_vllimite = STRING(crawcrd.vllimcrd,"zz,zzz,zz9.99").
    
    FOR FIRST crapass FIELDS(inpessoa vllimdeb)
                     WHERE crapass.cdcooper = par_cdcooper  AND
                       crapass.nrdconta = par_nrdconta  NO-LOCK:
    END.
                  
    IF   NOT AVAILABLE crapass THEN
         DO:
             ASSIGN aux_cdcritic = 9
                    aux_dscritic = "".

             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).                
                
             RETURN "NOK".
         END.

    ASSIGN  aux_vllimite = /*STRING(crawcrd.cdlimcrd,"99") + " - " + */ 
                           aux_vllimite 
                           /*STRING(aux_vllimite,"zz,zzz,zz9.99")*/
            aux_dssituac = IF  crawcrd.insitcrd = 0
                               THEN "Estudo"
                           ELSE
                           IF  crawcrd.insitcrd = 1
                               THEN "Aprovado"
                           ELSE
                           IF  crawcrd.insitcrd = 2
                               THEN "Solicitado"
                           ELSE
                           IF  crawcrd.insitcrd = 3
                               THEN "Liberado"
                           ELSE
                           IF  crawcrd.insitcrd = 4 OR
                               crawcrd.insitcrd = 7
                               THEN "Em uso"
                           ELSE
                           IF crawcrd.insitcrd = 5 THEN
                              IF (f_verifica_adm(crawcrd.cdadmcrd) = 1  OR
                                  f_verifica_adm(crawcrd.cdadmcrd) = 2) THEN
                                 "Bloqueado"
                              ELSE
                                 "Cancelado"
                           ELSE
                           IF crawcrd.insitcrd = 6 THEN
                              IF f_verifica_adm(crawcrd.cdadmcrd) = 2 THEN
                                 "Cancelado"
                              ELSE
                                 "Encerrado"
                           ELSE  
                              "??????"
            aux_dsmotivo = IF  crawcrd.cdmotivo = 1
                               THEN "Defeito"
                           ELSE
                           IF  crawcrd.cdmotivo = 2
                               THEN "Perda/Roubo"
                           ELSE
                           IF  crawcrd.cdmotivo = 3
                               THEN "Pelo socio"
                           ELSE
                           IF  crawcrd.cdmotivo = 4
                               THEN "Pela COOP"
                           ELSE    
                           IF  crawcrd.cdmotivo = 5
                               THEN "Cancelado"    
                           ELSE
                           IF  crawcrd.cdmotivo = 6 
                               THEN "Por fraude"
                           ELSE
                           IF  crawcrd.cdmotivo = 7 
                               THEN "Alt.Dt.Venc"
                           ELSE
                           IF  crawcrd.cdmotivo = 8
                               THEN "Comprometido"
                           ELSE
                           IF  crawcrd.cdmotivo = 9
                               THEN "Devolvido/Destruido"
                           ELSE
                           IF  crawcrd.cdmotivo = 10
                               THEN "Reposto/Reimpresso"
                           ELSE
                           IF  crawcrd.cdmotivo = 11
                               THEN "Extraviado"
                           ELSE ""
            aux_dsde2via = IF  crawcrd.dtentr2v <> ?
                               THEN "Cartao 2via entregue em " + 
                                    STRING(crawcrd.dtentr2v,"99/99/9999") 
                           ELSE ""
            aux_ds2viacr = IF  crawcrd.dtsol2vi <> ?
                               THEN "Cartao 2via solicitada em " +
                                    STRING(crawcrd.dtsol2vi,"99/99/9999") 
                           ELSE ""
            aux_ds2viasn = IF  crawcrd.dt2viasn <> ?
                               THEN "Senha 2via solicitada em " +
                                    STRING(crawcrd.dt2viasn,"99/99/9999") 
                           ELSE ""
            aux_dspaganu = TRIM(STRING(aux_vlanucrd,"zzz,zzz,zz9.99")) +
                           IF  aux_inanucrd = 0
                               THEN " "
                           ELSE IF aux_inanucrd = 1
                               THEN " pago pela COOP"
                           ELSE
                               " pago pelo associado" 
            aux_dscartao = TRIM(crapadc.nmresadm) + " " +
                           IF   crawcrd.tpcartao = 1 
                                THEN "NACIONAL"
                           ELSE IF crawcrd.tpcartao = 2 
                                THEN "INTERNACIONAL"
                           ELSE IF crawcrd.tpcartao = 3 
                                THEN "GOLD"
                           ELSE "DESCONHECIDO".

    IF   crawcrd.cdoperad <> par_cdoperad THEN
         DO:
            FIND crapope WHERE crapope.cdcooper = par_cdcooper     AND
                               crapope.cdoperad = crawcrd.cdoperad 
                               NO-LOCK NO-ERROR.

             IF   NOT AVAILABLE crapope THEN
                  aux_nmoperad = STRING(crawcrd.cdoperad,"x(10)") +
                                 " - Nao cadastrado.".
             ELSE
                  aux_nmoperad = crapope.nmoperad.
         END.
    ELSE
         DO:
            FIND crapope WHERE crapope.cdcooper = par_cdcooper     AND
                               crapope.cdoperad = par_cdoperad 
                               NO-LOCK NO-ERROR.

             IF   NOT AVAILABLE crapope THEN
                  aux_nmoperad = STRING(crawcrd.cdoperad,"x(10)") +
                                 " - Nao cadastrado.".
             ELSE
                  aux_nmoperad = crapope.nmoperad.
             
         END.

    IF  f_verifica_adm(crawcrd.cdadmcrd) <> 2 THEN
        DO:
            FIND craptlc WHERE  craptlc.cdcooper = par_cdcooper      AND
                                craptlc.cdadmcrd = crawcrd.cdadmcrd  AND
                                craptlc.dddebito = crawcrd.dddebito  AND
                                craptlc.tpcartao = 0                 AND
                                craptlc.cdlimcrd = 0                 NO-LOCK NO-ERROR.
                                
            IF   NOT AVAILABLE craptlc   THEN
                 DO:
                     ASSIGN aux_cdcritic = 544
                            aux_dscritic = "".
        
                     RUN gera_erro (INPUT par_cdcooper,
                                    INPUT par_cdagenci,
                                    INPUT par_nrdcaixa,
                                    INPUT 1,            /** Sequencia **/
                                    INPUT aux_cdcritic,
                                    INPUT-OUTPUT aux_dscritic).                
                        
                     RETURN "NOK".
                 END.

            IF  crapass.inpessoa = 1 THEN
                DO:
                    ASSIGN aux_nrctamae = craptlc.nrctamae
                           aux_dsparent = STRING(crawcrd.cdgraupr,"9") + " - " +
                           TRIM(ENTRY(LOOKUP(STRING(crawcrd.cdgraupr,"9"),aux_cdgraupr),aux_dsgraupr)).
                END.

        END.
    ELSE /* Bancoob */
        ASSIGN aux_nrctamae = crapadc.nrctamae.

    IF   crapass.inpessoa <> 1 THEN
         DO:
            ASSIGN aux_nrcpfrep = 0.
            /* Para entregar os cartões com CHIP, foi efetuada nova solicitacao 
               via "baca", antes de liberar o produto Cartao PJ. Sendo assim, 
               o campo crawcrd.nrrepinc (Representante que solicitou o cartao) 
               ficou vazio. Nestes casos, na consulta do cartao ira mostar o 
               nome do representante que recebeu o cartao na "Entrega" */
            IF   crawcrd.nrrepinc <> 0 THEN
                 ASSIGN aux_nrcpfrep = crawcrd.nrrepinc.
            ELSE
                 ASSIGN aux_nrcpfrep = crawcrd.nrrepent.
            
            FOR FIRST crabass FIELDS(nrcpfcgc nmprimtl)
                 WHERE crabass.cdcooper = par_cdcooper     AND 
                       crabass.nrcpfcgc = aux_nrcpfrep NO-LOCK: END.
    
            IF   AVAIL crabass AND crabass.nrcpfcgc <> 0 THEN 
                 DO:
                     ASSIGN aux_dsparent = STRING(crabass.nrcpfcgc) + " - " + crabass.nmprimtl.
                 END.
            ELSE 
                 DO:
                    FIND FIRST crapncp
                         WHERE crapncp.nrdoccpf = crawcrd.nrrepinc NO-LOCK NO-ERROR.
                    
                    IF  AVAIL crapncp  THEN 
                        ASSIGN aux_dsparent = STRING(crapncp.nrdoccpf) + " - " + crapncp.nmpessoa.
                 END.

         END.
    
    IF f_verifica_adm(crawcrd.cdadmcrd) = 1 THEN
       ASSIGN aux_lbcanblq = "Bloqueio"
              aux_vllimdeb = crapass.vllimdeb.
    ELSE
       ASSIGN aux_lbcanblq = "Cancelamento"
              aux_vllimdeb = 0.

    /* Titular do Cartao */
    ASSIGN aux_dstitula = TRIM(ENTRY(LOOKUP(STRING(crawcrd.cdgraupr,"9"),aux_cdgraupr),aux_dsgraupr)) NO-ERROR.
    IF ERROR-STATUS:ERROR THEN
       ASSIGN aux_dstitula = " ".
    
    /* Verifica qual eh o tipo de pagamento */   
    CASE crawcrd.tpdpagto:
    
      WHEN 1 THEN ASSIGN aux_dsdpagto = "Debito CC Total".
      WHEN 2 THEN ASSIGN aux_dsdpagto = "Debito CC Minimo".
      WHEN 3 THEN ASSIGN aux_dsdpagto = "Boleto".
      OTHERWISE ASSIGN aux_dsdpagto = " ".
      
    END. 
       
    CREATE tt-dados_cartao.
    ASSIGN tt-dados_cartao.nrcrcard = crawcrd.nrcrcard  
           tt-dados_cartao.nrctrcrd = crawcrd.nrctrcrd
           tt-dados_cartao.dscartao = aux_dscartao
           tt-dados_cartao.nmtitcrd = crawcrd.nmtitcrd
           tt-dados_cartao.nmextttl = crawcrd.nmextttl
           tt-dados_cartao.nrcpftit = crawcrd.nrcpftit
           tt-dados_cartao.dsparent = aux_dsparent
           tt-dados_cartao.dssituac = aux_dssituac
           tt-dados_cartao.vlsalari = crawcrd.vlsalari
           tt-dados_cartao.vlsalcon = crawcrd.vlsalcon
           tt-dados_cartao.vloutras = crawcrd.vloutras
           tt-dados_cartao.vlalugue = crawcrd.vlalugue
           tt-dados_cartao.dddebito = crawcrd.dddebito
           tt-dados_cartao.vllimite = aux_vllimite
           tt-dados_cartao.dtpropos = crawcrd.dtpropos
           tt-dados_cartao.vllimdeb = aux_vllimdeb
           tt-dados_cartao.dtsolici = crawcrd.dtsolici
           tt-dados_cartao.dtlibera = crawcrd.dtlibera
           tt-dados_cartao.dtentreg = crawcrd.dtentreg
           tt-dados_cartao.dtcancel = crawcrd.dtcancel
           tt-dados_cartao.dsmotivo = aux_dsmotivo
           tt-dados_cartao.dtvalida = crawcrd.dtvalida
           tt-dados_cartao.qtanuida = crawcrd.qtanuida
           tt-dados_cartao.nrctamae = aux_nrctamae
           tt-dados_cartao.dsde2via = aux_dsde2via
           tt-dados_cartao.ds2viacr = aux_ds2viacr
           tt-dados_cartao.ds2viasn = aux_ds2viasn
           tt-dados_cartao.dtanucrd = aux_dtanucrd
           tt-dados_cartao.dspaganu = aux_dspaganu
           tt-dados_cartao.nmoperad = aux_nmoperad
           tt-dados_cartao.lbcanblq = aux_lbcanblq
           tt-dados_cartao.inpessoa = crapass.inpessoa
           tt-dados_cartao.dddebant = crawcrd.dddebant           
           tt-dados_cartao.inacetaa = aux_inacetaa
           tt-dados_cartao.dsacetaa = aux_dsacetaa
           tt-dados_cartao.dtacetaa = aux_dtacetaa
           tt-dados_cartao.cdopetaa = aux_cdopetaa
           tt-dados_cartao.nmopetaa = aux_nmopetaa
           tt-dados_cartao.cdadmcrd = crawcrd.cdadmcrd
           tt-dados_cartao.flgdebit = crawcrd.flgdebit
           tt-dados_cartao.dtrejeit = crawcrd.dtrejeit
           tt-dados_cartao.nrcctitg = crawcrd.nrcctitg
           tt-dados_cartao.dsdpagto = aux_dsdpagto
           tt-dados_cartao.dsgraupr = aux_dstitula.
           
    RUN proc_gerar_log (INPUT par_cdcooper,
                        INPUT par_cdoperad,
                        INPUT "",
                        INPUT aux_dsorigem,
                        INPUT aux_dstransa,
                        INPUT TRUE,
                        INPUT par_idseqttl,
                        INPUT par_nmdatela,
                        INPUT par_nrdconta,
                       OUTPUT aux_nrdrowid).    
                       
    RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                            INPUT "nrcrcard",
                            INPUT "",
                            INPUT crawcrd.nrcrcard).
    RETURN "OK".       
       
END PROCEDURE.

/**********************************************************
    Consultar os ultimos debitos de um determinado cartao
 **********************************************************/
PROCEDURE ult_debitos:

    DEF  INPUT PARAM par_cdcooper AS INTE                         NO-UNDO.
    DEF  INPUT PARAM par_cdagenci AS INTE                         NO-UNDO.
    DEF  INPUT PARAM par_nrdcaixa AS INTE                         NO-UNDO.
    DEF  INPUT PARAM par_cdoperad AS CHAR                         NO-UNDO.
    DEF  INPUT PARAM par_nrdconta AS INTE                         NO-UNDO.
    DEF  INPUT PARAM par_nrcrcard AS DECI                         NO-UNDO.
    DEF  INPUT PARAM par_idorigem AS INTE                         NO-UNDO. 
    DEF  INPUT PARAM par_idseqttl AS INTE                         NO-UNDO.
    DEF  INPUT PARAM par_nmdatela AS CHAR                         NO-UNDO.

    DEF OUTPUT PARAM TABLE FOR tt-ult_deb.

    EMPTY TEMP-TABLE tt-ult_deb.

    ASSIGN aux_dsorigem = TRIM(ENTRY(par_idorigem,des_dorigens,","))
           aux_dstransa = "Consultar ultimos debitos do cartao.".    

    FOR EACH  crapdcd WHERE crapdcd.cdcooper = par_cdcooper      AND 
                            crapdcd.nrdconta = par_nrdconta      AND
                            crapdcd.nrcrcard = par_nrcrcard      NO-LOCK:

        CREATE tt-ult_deb.
        ASSIGN tt-ult_deb.dtdebito = crapdcd.dtdebito
               tt-ult_deb.vldebito = crapdcd.vldebito.

    END.
    
    RUN proc_gerar_log (INPUT par_cdcooper,
                        INPUT par_cdoperad,
                        INPUT "",
                        INPUT aux_dsorigem,
                        INPUT aux_dstransa,
                        INPUT TRUE,
                        INPUT par_idseqttl,
                        INPUT par_nmdatela,
                        INPUT par_nrdconta,
                       OUTPUT aux_nrdrowid).    
                       
    RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                            INPUT "nrcrcard",
                            INPUT "",
                            INPUT par_nrcrcard).    
    
    RETURN "OK".

END PROCEDURE.

/************************
    OPCAO LIBERAR
*************************/
/******************************************************
    Validar e Efetuar a liberacao do cartao de credito
 *****************************************************/
/*
PROCEDURE libera_cartao:

    DEF INPUT PARAM par_cdcooper AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_cdagenci AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_nrdcaixa AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_cdoperad AS CHAR                         NO-UNDO.
    DEF INPUT PARAM par_nrdconta AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_dtmvtolt AS DATE                         NO-UNDO.
    DEF INPUT PARAM par_idorigem AS INTE                         NO-UNDO. 
    DEF INPUT PARAM par_idseqttl AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_nmdatela AS CHAR                         NO-UNDO.
    DEF INPUT PARAM par_nrctrcrd AS INTE                         NO-UNDO.    
    DEF INPUT PARAM par_inconfir AS INTE                         NO-UNDO. 

    DEF OUTPUT PARAM TABLE FOR tt-msg-confirma.
    DEF OUTPUT PARAM TABLE FOR tt-erro.
    
    DEF VAR aux_contador AS INTE                                 NO-UNDO.
    DEF VAR aux_dsoperac AS CHAR                                 NO-UNDO.
    DEF VAR h-b1wgen0110 AS HANDLE                               NO-UNDO.

    EMPTY TEMP-TABLE tt-msg-confirma.
    EMPTY TEMP-TABLE tt-erro.
    
    ASSIGN aux_dsorigem = TRIM(ENTRY(par_idorigem,des_dorigens,","))
           aux_dstransa = "Liberar Cartao de Credito.".

    
    TRANS_LIBERA:
    DO TRANSACTION ON ERROR UNDO TRANS_LIBERA, LEAVE TRANS_LIBERA:
        
       DO aux_contador = 1 TO 10:
    
          FIND FIRST crawcrd WHERE crawcrd.cdcooper = par_cdcooper  AND
                                   crawcrd.nrdconta = par_nrdconta  AND
                                   crawcrd.nrctrcrd = par_nrctrcrd
                                   EXCLUSIVE-LOCK NO-ERROR NO-WAIT.
                                     
          IF NOT AVAILABLE crawcrd  THEN
             DO:
                 IF LOCKED crawcrd  THEN
                    DO:
                        ASSIGN aux_dscritic = "Registro de cartao de credito " +
                                              "esta sendo alterado. "          +
                                              "Tente Novamente.".
                        PAUSE 1 NO-MESSAGE.
                        NEXT.

                    END.
                 ELSE
                    DO:
                        ASSIGN aux_dscritic = "Registro de cartao de credito " +
                                              "nao encontrado.".
                        
                        LEAVE.

                    END.

             END.

          ASSIGN aux_dscritic = "".

          LEAVE.
           
       END. /** Fim do DO ... TO **/
       
       IF aux_dscritic <> ""  THEN
          DO:
              ASSIGN aux_cdcritic = 0.
    
              RUN gera_erro (INPUT par_cdcooper,
                             INPUT par_cdagenci,
                             INPUT par_nrdcaixa,
                             INPUT 1,            /** Sequencia **/
                             INPUT aux_cdcritic,
                             INPUT-OUTPUT aux_dscritic).
                                                     
              UNDO TRANS_LIBERA, RETURN "NOK".

          END.

       IF crawcrd.insitcrd <> 2 THEN
          DO:
              ASSIGN aux_cdcritic = 551
                     aux_dscritic = "".
       
              RUN gera_erro (INPUT par_cdcooper,
                             INPUT par_cdagenci,
                             INPUT par_nrdcaixa,
                             INPUT 1,            /** Sequencia **/
                             INPUT aux_cdcritic,
                             INPUT-OUTPUT aux_dscritic).
                                                    
              RUN proc_gerar_log (INPUT par_cdcooper,
                                  INPUT par_cdoperad,
                                  INPUT aux_dscritic,
                                  INPUT aux_dsorigem,
                                  INPUT aux_dstransa,
                                  INPUT FALSE,
                                  INPUT par_idseqttl,
                                  INPUT par_nmdatela,
                                  INPUT par_nrdconta,
                                 OUTPUT aux_nrdrowid).
                                 
              RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                                      INPUT "nrcrcard",
                                      INPUT "",
                                      INPUT crawcrd.nrcrcard).        
              
              UNDO TRANS_LIBERA, RETURN "NOK".

          END.

       FOR FIRST crapass FIELDS(nrdconta inpessa nrcpfcgc cdsitdct)
                        WHERE crapass.cdcooper = par_cdcooper AND
                          crapass.nrdconta = par_nrdconta 
                          NO-LOCK: END.
                         
       IF NOT AVAILABLE crapass THEN
          DO:
              ASSIGN aux_cdcritic = 9
                     aux_dscritic = "".

              RUN gera_erro (INPUT par_cdcooper,
                             INPUT par_cdagenci,
                             INPUT par_nrdcaixa,
                             INPUT 1,            /** Sequencia **/
                             INPUT aux_cdcritic,
                             INPUT-OUTPUT aux_dscritic).
                                                    
              UNDO TRANS_LIBERA, RETURN "NOK".

          END.

       IF NOT VALID-HANDLE(h-b1wgen0110) THEN
          RUN sistema/generico/procedures/b1wgen0110.p
              PERSISTENT SET h-b1wgen0110.
     
       /*Monta a mensagem da operacao para envio no e-mail*/
       ASSIGN aux_dsoperac = "Tentativa de liberar cartoes de credito " + 
                             "na conta "                                +   
                             STRING(crapass.nrdconta,"zzzz,zzz,9")      +
                             " - CPF/CNPJ "                             +
                            (IF crapass.inpessoa = 1 THEN
                                STRING((STRING(crapass.nrcpfcgc,
                                        "99999999999")),"xxx.xxx.xxx-xx")
                             ELSE
                                STRING((STRING(crapass.nrcpfcgc,
                                        "99999999999999")),
                                        "xx.xxx.xxx/xxxx-xx")).

       /*Verifica se o associado esta no cadastro restritivo. Se estiver,
         sera enviado um e-mail informando a situacao*/
       RUN alerta_fraude IN h-b1wgen0110(INPUT par_cdcooper,
                                         INPUT par_cdagenci,
                                         INPUT par_nrdcaixa,
                                         INPUT par_cdoperad,
                                         INPUT par_nmdatela,
                                         INPUT par_dtmvtolt,
                                         INPUT par_idorigem,
                                         INPUT crapass.nrcpfcgc, 
                                         INPUT crapass.nrdconta,
                                         INPUT par_idseqttl,
                                         INPUT TRUE, /*bloqueia operacao*/
                                         INPUT 16, /*cdoperac*/
                                         INPUT aux_dsoperac,
                                         OUTPUT TABLE tt-erro).
       
       IF VALID-HANDLE(h-b1wgen0110) THEN
          DELETE PROCEDURE(h-b1wgen0110).
     
       IF RETURN-VALUE <> "OK" THEN
          DO:
             IF NOT TEMP-TABLE tt-erro:HAS-RECORDS THEN
                DO:
                   ASSIGN aux_dscritic = "Nao foi possivel verificar o " + 
                                         "cadastro restritivo.".
                   
                   RUN gera_erro (INPUT par_cdcooper,
                                  INPUT par_cdagenci,
                                  INPUT par_nrdcaixa,
                                  INPUT 1, /*sequencia*/
                                  INPUT aux_cdcritic,
                                  INPUT-OUTPUT aux_dscritic).
     
                END.
     
             UNDO TRANS_LIBERA, RETURN "NOK".
     
          END.
        
       IF par_inconfir = 1   THEN
          DO:
             IF crapass.cdsitdct <> 1   AND
                crapass.cdsitdct <> 6   THEN
                DO:
                    CREATE tt-msg-confirma.

                    ASSIGN tt-msg-confirma.inconfir = par_inconfir + 1
                           tt-msg-confirma.dsmensag = 
                                "Atencao! Conta encerrada. Confirma ?".
                                
                    RETURN "OK".            

                END.
             ELSE
                DO:
                    CREATE tt-msg-confirma.

                    ASSIGN tt-msg-confirma.inconfir = par_inconfir + 1
                           tt-msg-confirma.dsmensag = 
                                          "Confirma a operacao?".
                                          
                    RETURN "OK".                      

                END.

          END.

       IF par_inconfir = 2   THEN
          DO:
              ASSIGN crawcrd.insitcrd = 3
                     crawcrd.cdoperad = par_cdoperad
                     crawcrd.dtlibera = par_dtmvtolt.
          END.
    
    END. /* DO TRANSACTION */
    
    RUN proc_gerar_log (INPUT par_cdcooper,
                        INPUT par_cdoperad,
                        INPUT "",
                        INPUT aux_dsorigem,
                        INPUT aux_dstransa,
                        INPUT TRUE,
                        INPUT par_idseqttl,
                        INPUT par_nmdatela,
                        INPUT par_nrdconta,
                       OUTPUT aux_nrdrowid).
                       
    RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                            INPUT "nrctrcrd",
                            INPUT "",
                            INPUT crawcrd.nrctrcrd).                       
    
    RETURN "OK".

END PROCEDURE.
*/
/******************************************************
    Desfazer a liberacao de um determinado cartao
 *****************************************************/
/*
PROCEDURE desfaz_liberacao_cartao:

    DEF INPUT PARAM par_cdcooper AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_cdagenci AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_nrdcaixa AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_cdoperad AS CHAR                         NO-UNDO.
    DEF INPUT PARAM par_nrdconta AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_dtmvtolt AS DATE                         NO-UNDO.
    DEF INPUT PARAM par_idorigem AS INTE                         NO-UNDO. 
    DEF INPUT PARAM par_idseqttl AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_nmdatela AS CHAR                         NO-UNDO.
    DEF INPUT PARAM par_nrctrcrd AS INTE                         NO-UNDO.    

    DEF OUTPUT PARAM TABLE FOR tt-erro.
    
    DEF VAR aux_contador AS INTE                                 NO-UNDO.
    
    EMPTY TEMP-TABLE tt-erro.
    
    ASSIGN aux_dsorigem = TRIM(ENTRY(par_idorigem,des_dorigens,","))
           aux_dstransa = "Desfazer liberacao de Cartao de Credito.".
    
    TRANS_DESFAZ:
    DO TRANSACTION ON ERROR UNDO TRANS_DESFAZ, LEAVE TRANS_DESFAZ:
        
        DO aux_contador = 1 TO 10:
    
           FIND FIRST crawcrd WHERE crawcrd.cdcooper = par_cdcooper  AND
                                    crawcrd.nrdconta = par_nrdconta  AND
                                    crawcrd.nrctrcrd = par_nrctrcrd
                                    EXCLUSIVE-LOCK NO-ERROR NO-WAIT.
                                      
           IF  NOT AVAILABLE crawcrd  THEN
               DO:
                   IF  LOCKED crawcrd  THEN
                       DO:
                           aux_dscritic = "Registro de cartao de credito esta" 
                                          + " sendo alterado. Tente Novamente.".
                           PAUSE 1 NO-MESSAGE.
                           NEXT.
                       END.
                   ELSE
                       DO:
                           aux_dscritic = "Registro de cartao de credito nao" +
                                          " encontrado.".
                           
                           LEAVE.
                       END.
               END.

           ASSIGN aux_dscritic = "".

           LEAVE.
            
        END. /** Fim do DO ... TO **/
       
        IF  aux_dscritic <> ""  THEN
            DO:
                ASSIGN aux_cdcritic = 0.
    
                RUN gera_erro (INPUT par_cdcooper,
                               INPUT par_cdagenci,
                               INPUT par_nrdcaixa,
                               INPUT 1,            /** Sequencia **/
                               INPUT aux_cdcritic,
                               INPUT-OUTPUT aux_dscritic).
                                                      
                UNDO TRANS_DESFAZ, RETURN "NOK".
   
            END.

       IF   crawcrd.insitcrd <> 3   THEN
            DO:
                ASSIGN aux_cdcritic = 552
                       aux_dscritic = "".
       
                RUN gera_erro (INPUT par_cdcooper,
                               INPUT par_cdagenci,
                               INPUT par_nrdcaixa,
                               INPUT 1,            /** Sequencia **/
                               INPUT aux_cdcritic,
                               INPUT-OUTPUT aux_dscritic).
                                                      
                RUN proc_gerar_log (INPUT par_cdcooper,
                                    INPUT par_cdoperad,
                                    INPUT aux_dscritic,
                                    INPUT aux_dsorigem,
                                    INPUT aux_dstransa,
                                    INPUT FALSE,
                                    INPUT par_idseqttl,
                                    INPUT par_nmdatela,
                                    INPUT par_nrdconta,
                                   OUTPUT aux_nrdrowid).
                                   
                RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                                        INPUT "nrcrcard",
                                        INPUT "",
                                        INPUT crawcrd.nrcrcard).        
                
                UNDO TRANS_DESFAZ, RETURN "NOK".
            END.

       ASSIGN crawcrd.insitcrd = 2
              crawcrd.cdoperad = par_cdoperad
              crawcrd.dtlibera = ?.
       
    END. /* DO TRANSACTION */
    
    RUN proc_gerar_log (INPUT par_cdcooper,
                        INPUT par_cdoperad,
                        INPUT "",
                        INPUT aux_dsorigem,
                        INPUT aux_dstransa,
                        INPUT TRUE,
                        INPUT par_idseqttl,
                        INPUT par_nmdatela,
                        INPUT par_nrdconta,
                       OUTPUT aux_nrdrowid).
                       
    RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                            INPUT "nrctrcrd",
                            INPUT "",
                            INPUT crawcrd.nrctrcrd).
    
    RETURN "OK".

END PROCEDURE.
*/
/**************************
    OPCAO ENTREGAR
***************************/
/******************************************************
    Validar dados para efetuar a entregar de um cartao
 *****************************************************/
PROCEDURE valida_entrega_cartao:

    DEF INPUT PARAM par_cdcooper  AS  INTE                       NO-UNDO.
    DEF INPUT PARAM par_cdagenci  AS  INTE                       NO-UNDO.
    DEF INPUT PARAM par_nrdcaixa  AS  INTE                       NO-UNDO.
    DEF INPUT PARAM par_cdoperad  AS  CHAR                       NO-UNDO.
    DEF INPUT PARAM par_nrdconta  AS  INTE                       NO-UNDO.
    DEF INPUT PARAM par_dtmvtolt  AS  DATE                       NO-UNDO.
    DEF INPUT PARAM par_dtmvtopr  AS  DATE                       NO-UNDO.
    DEF INPUT PARAM par_idorigem  AS  INTE                       NO-UNDO. 
    DEF INPUT PARAM par_idseqttl  AS  INTE                       NO-UNDO.
    DEF INPUT PARAM par_nmdatela  AS  CHAR                       NO-UNDO.
    DEF INPUT PARAM par_inconfir  AS  INTE                       NO-UNDO.
    DEF INPUT PARAM par_nrctrcrd  AS  INTE                       NO-UNDO.
    DEF INPUT PARAM par_nrcrcard  AS  DECI                       NO-UNDO.
    DEF INPUT PARAM par_nrcrcard2 AS  DECI                       NO-UNDO.
    DEF INPUT PARAM par_dtvalida  AS  CHAR                       NO-UNDO.
    DEF INPUT PARAM par_repsolic  AS  CHAR                       NO-UNDO.
    
    DEF OUTPUT PARAM TABLE FOR tt-erro.
    DEF OUTPUT PARAM TABLE FOR tt-msg-confirma.
    
    DEF VAR aux_dstextab AS CHAR NO-UNDO.
    DEF VAR aux_dtexiste AS LOGI NO-UNDO.
    DEF VAR aux_dttabela AS DATE NO-UNDO.
    DEF VAR aux_vlanuida AS DECI NO-UNDO.
    DEF VAR aux_qtparcan AS INTE NO-UNDO.
    DEF VAR aux_dtcalcu2 AS DATE NO-UNDO.
    DEF VAR aux_ultdiame AS DATE NO-UNDO.
                                 
    EMPTY TEMP-TABLE tt-erro.
    EMPTY TEMP-TABLE tt-msg-confirma.
    
    FIND FIRST crawcrd WHERE crawcrd.cdcooper = par_cdcooper  AND
                             crawcrd.nrdconta = par_nrdconta  AND
                             crawcrd.nrctrcrd = par_nrctrcrd
                             NO-LOCK NO-ERROR NO-WAIT.
                                      
    IF  NOT AVAILABLE crawcrd  THEN
        DO:
           ASSIGN aux_cdcritic = 546
                  aux_dscritic = "".
    
           RUN gera_erro (INPUT par_cdcooper,
                          INPUT par_cdagenci,
                          INPUT par_nrdcaixa,
                          INPUT 1,            /** Sequencia **/
                          INPUT aux_cdcritic,
                          INPUT-OUTPUT aux_dscritic).
                                                           
           RETURN "NOK".
                
        END.

    IF par_idorigem <> 5 THEN
       DO:
           /* Valida se o cartao eh da CABAL */
           IF f_verifica_adm(crawcrd.cdadmcrd) = 2 THEN
              DO:
                  ASSIGN aux_cdcritic = 0
                         aux_dscritic = "Opcao de entrega somente disponivel " +
                                        "no Ayllos Web.".

                  RUN gera_erro (INPUT par_cdcooper,
                                 INPUT par_cdagenci,
                                 INPUT par_nrdcaixa,
                                 INPUT 1,            /** Sequencia **/
                                 INPUT aux_cdcritic,
                                 INPUT-OUTPUT aux_dscritic).
                                                                   
                  RETURN "NOK".
              END.

       END. /* IF par_idorigem <> 5 */

    /* Verifica se o cartao eh do BB */
    RUN verifica_cartao_bb(INPUT crawcrd.cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa, 
                           INPUT crawcrd.cdadmcrd, 
                           OUTPUT TABLE tt-erro). 

    IF  RETURN-VALUE = "NOK"  THEN
        RETURN "NOK".

    IF   par_inconfir = 99  THEN /* Verifica se o cartao pode ser entregue */
         DO:

            IF   crawcrd.insitcrd <> 3 THEN
                 DO:
                     ASSIGN aux_cdcritic = 547
                            aux_dscritic = "".

                     RUN gera_erro (INPUT par_cdcooper,
                                    INPUT par_cdagenci,
                                    INPUT par_nrdcaixa,
                                    INPUT 1,     /** Sequencia **/
                                    INPUT aux_cdcritic,
                                    INPUT-OUTPUT aux_dscritic).
                                                 
                     RETURN "NOK".               
                 END.
         END.
    
    /* Valida dados da entrega - Nr. Cart.Cred. e Data Validade */
    IF   par_inconfir = 1   THEN 
         DO:
            
            FIND craptab WHERE craptab.cdcooper = par_cdcooper       AND
                               craptab.nmsistem = "CRED"             AND 
                               craptab.tptabela = "USUARI"           AND
                               craptab.cdempres = 11                 AND
                               craptab.cdacesso = "NUMICARTAO"       AND
                               craptab.tpregist = crawcrd.cdadmcrd   
                               NO-LOCK NO-ERROR.
                              
            IF   NOT AVAILABLE craptab THEN
                 DO:
                    ASSIGN aux_cdcritic = 612
                            aux_dscritic = "".
    
                     RUN gera_erro (INPUT par_cdcooper,
                                    INPUT par_cdagenci,
                                    INPUT par_nrdcaixa,
                                    INPUT 1,            /** Sequencia **/
                                    INPUT aux_cdcritic,
                                    INPUT-OUTPUT aux_dscritic).
                                                  
                     RETURN "NOK".

                 END.
            ELSE
                 aux_dstextab = craptab.dstextab.

            IF   NOT CAN-DO(RIGHT-TRIM(TRIM(aux_dstextab)), 
                 SUBSTR(STRING(par_nrcrcard,"9999,9999,9999,9999"),1,4))  THEN
                 DO:
                     ASSIGN aux_cdcritic = 380
                            aux_dscritic = "".

                     RUN gera_erro (INPUT par_cdcooper,
                                    INPUT par_cdagenci,
                                    INPUT par_nrdcaixa,
                                    INPUT 1,            /** Sequencia **/
                                    INPUT aux_cdcritic,
                                    INPUT-OUTPUT aux_dscritic).
                                                      
                     RETURN "NOK".

                 END.

            IF   par_nrcrcard = 0 THEN
                 DO:
                     
                     ASSIGN aux_cdcritic = 380
                            aux_dscritic = "".
    
                     RUN gera_erro (INPUT par_cdcooper,
                                    INPUT par_cdagenci,
                                    INPUT par_nrdcaixa,
                                    INPUT 1,            /** Sequencia **/
                                    INPUT aux_cdcritic,
                                    INPUT-OUTPUT aux_dscritic).
                                                      
                     RETURN "NOK".
                 END.

            IF  INTE(SUBSTR(par_dtvalida,01,02)) > 12 OR
                INTE(SUBSTR(par_dtvalida,01,02)) = 0  OR
                INTE(SUBSTR(par_dtvalida,03,04)) < YEAR(par_dtmvtolt)
                THEN
                DO:
                    ASSIGN aux_cdcritic = 13
                           aux_dscritic = "".
    
                    RUN gera_erro (INPUT par_cdcooper,
                                   INPUT par_cdagenci,
                                   INPUT par_nrdcaixa,
                                   INPUT 1,            /** Sequencia **/
                                   INPUT aux_cdcritic,
                                   INPUT-OUTPUT aux_dscritic).
                                                     
                    RETURN "NOK".
                END.            
            
            /* Calcula o ultimo dia do mes informado */
            aux_dtcalcu2 = DATE(INTE(SUBSTR(par_dtvalida,01,02)),
                                01,
                                INTE(SUBSTR(par_dtvalida,03,04))).
            aux_ultdiame = ((DATE(MONTH(aux_dtcalcu2),
                                  28,
                                  YEAR(aux_dtcalcu2)) + 4) -
                                  DAY(DATE(MONTH(aux_dtcalcu2),
                                           28,
                                           YEAR(aux_dtcalcu2)) + 4)).
            
            IF  (aux_ultdiame < par_dtmvtopr) OR 
                 aux_ultdiame = ? THEN
                 DO:
                     ASSIGN aux_cdcritic = 13
                            aux_dscritic = "".
    
                     RUN gera_erro (INPUT par_cdcooper,
                                    INPUT par_cdagenci,
                                    INPUT par_nrdcaixa,
                                    INPUT 1,            /** Sequencia **/
                                    INPUT aux_cdcritic,
                                    INPUT-OUTPUT aux_dscritic).
                                                      
                     RETURN "NOK".
                 END.


            FOR FIRST crapass FIELDS(inpessoa cdsitdct) 
                                     WHERE crapass.cdcooper = par_cdcooper AND
                               crapass.nrdconta = par_nrdconta 
                               NO-LOCK:
                    END.

            IF crapass.inpessoa = 2 THEN
                DO:
                    IF par_repsolic = "" THEN
                        DO:
                            ASSIGN aux_cdcritic = 0
                                   aux_dscritic = "Incluir um Representante".
                        
                            RUN gera_erro (INPUT par_cdcooper,
                                           INPUT par_cdagenci,
                                           INPUT par_nrdcaixa,
                                           INPUT 1,            /** Sequencia **/
                                           INPUT aux_cdcritic,
                                           INPUT-OUTPUT aux_dscritic).
                                                              
                            RETURN "NOK".
                        END.

                    FOR EACH craphcj
                        WHERE craphcj.cdcooper = par_cdcooper
                          AND craphcj.nrdconta = par_nrdconta NO-LOCK:

                        FOR FIRST crapass FIELDS(inpessoa cdsitdct)
                             WHERE crapass.cdcooper = craphcj.cdcooper   AND  
                                   (crapass.nrcpfcgc = craphcj.nrcpfpri  OR
                                    crapass.nrcpfcgc = craphcj.nrcpfseg  OR
                                    crapass.nrcpfcgc = craphcj.nrcpfter) AND 
                                   crapass.nmprimtl = par_repsolic       NO-LOCK:
                                            END.
                        
                        IF   NOT AVAIL crapass THEN
                            DO:
                                FIND FIRST crapncp
                                    WHERE (crapncp.nrdoccpf = craphcj.nrcpfpri OR
                                           crapncp.nrdoccpf = craphcj.nrcpfseg OR
                                           crapncp.nrdoccpf = craphcj.nrcpfter) 
                                      AND crapncp.nmpessoa  = par_repsolic NO-LOCK NO-ERROR.
                               
                                IF   NOT AVAIL crapncp THEN
                                     DO:
                                         
                                         ASSIGN aux_cdcritic = 0
                                                aux_dscritic = "Representante Invalido".
                        
                                         RUN gera_erro (INPUT par_cdcooper,
                                                        INPUT par_cdagenci,
                                                        INPUT par_nrdcaixa,
                                                        INPUT 1,            /** Sequencia **/
                                                        INPUT aux_cdcritic,
                                                        INPUT-OUTPUT aux_dscritic).
                                                                          
                                         RETURN "NOK".
                                
                                     END.
                            END.
                    END.
                END.


             RETURN "OK".   
                
         END.

    IF   par_inconfir = 2   THEN /* Valida confirmacao do cartao digitado */
         DO:
            IF   par_nrcrcard2 <> par_nrcrcard   THEN
                 DO:
                     
                     ASSIGN aux_cdcritic = 380
                            aux_dscritic = "".
    
                     RUN gera_erro (INPUT par_cdcooper,
                                    INPUT par_cdagenci,
                                    INPUT par_nrdcaixa,
                                    INPUT 1,            /** Sequencia **/
                                    INPUT aux_cdcritic,
                                    INPUT-OUTPUT aux_dscritic).
                                                   
                     RETURN "NOK".
                 END. 
            
            ASSIGN aux_dtexiste = FALSE
                   aux_dttabela = ?.

            FOR EACH  craptab WHERE craptab.cdcooper = par_cdcooper     AND
                                    craptab.nmsistem = "CRED"           AND
                                    craptab.tptabela = "USUARI"         AND
                                    craptab.cdempres = 11               AND
                                    craptab.cdacesso = "ENTRGCART" + 
                                            STRING(crawcrd.cdadmcrd,"9")
                                    NO-LOCK:

                    aux_dttabela = DATE(INT(SUBSTR(craptab.dstextab,17,2)),
                                        INT(SUBSTR(craptab.dstextab,14,2)),
                                        INT(SUBSTR(craptab.dstextab,20,4))).

                    IF   aux_dttabela > crawcrd.dtpropos THEN
                         NEXT.

                    ASSIGN aux_dtexiste = TRUE
                           aux_vlanuida = DECIMAL(SUBSTR(craptab.dstextab,4,9))
                           aux_qtparcan = INTEGER(SUBSTR(craptab.dstextab,1,2)).

                    LEAVE.

            END.

            IF  NOT aux_dtexiste THEN
                DO:
                    ASSIGN aux_cdcritic = 539
                           aux_dscritic = "".
    
                    RUN gera_erro (INPUT par_cdcooper,
                                   INPUT par_cdagenci,
                                   INPUT par_nrdcaixa,
                                   INPUT 1,            /** Sequencia **/
                                   INPUT aux_cdcritic,
                                   INPUT-OUTPUT aux_dscritic).
                                                      
                    RETURN "NOK".
                END.

            FIND crapcrd WHERE crapcrd.cdcooper = par_cdcooper   AND
                               crapcrd.nrcrcard = par_nrcrcard   NO-LOCK
                               USE-INDEX crapcrd3 NO-ERROR.

            IF   AVAILABLE crapcrd THEN
                 DO:
                     ASSIGN aux_cdcritic = 548
                            aux_dscritic = "".
    
                     RUN gera_erro (INPUT par_cdcooper,
                                    INPUT par_cdagenci,
                                    INPUT par_nrdcaixa,
                                    INPUT 1,            /** Sequencia **/
                                    INPUT aux_cdcritic,
                                    INPUT-OUTPUT aux_dscritic).
                                                   
                     RETURN "NOK".
                 END.

            FOR FIRST crapass FIELDS(inpessoa cdsitdct)
                                     WHERE crapass.cdcooper = par_cdcooper AND
                               crapass.nrdconta = par_nrdconta 
                               NO-LOCK:  
                    END.
                         
            IF   NOT AVAILABLE crapass THEN
                 DO:
                     ASSIGN aux_cdcritic = 9
                            aux_dscritic = "".

                     RUN gera_erro (INPUT par_cdcooper,
                                    INPUT par_cdagenci,
                                    INPUT par_nrdcaixa,
                                    INPUT 1,            /** Sequencia **/
                                    INPUT aux_cdcritic,
                                    INPUT-OUTPUT aux_dscritic).
                                                      
                     RETURN "NOK".
                 END.

            IF crapass.inpessoa = 2 THEN
                DO:
                    IF par_repsolic = "" THEN
                        DO:
                            ASSIGN aux_cdcritic = 0
                                   aux_dscritic = "Incluir um Representante".
                        
                            RUN gera_erro (INPUT par_cdcooper,
                                           INPUT par_cdagenci,
                                           INPUT par_nrdcaixa,
                                           INPUT 1,            /** Sequencia **/
                                           INPUT aux_cdcritic,
                                           INPUT-OUTPUT aux_dscritic).
                                                              
                            RETURN "NOK".
                        END. 
                END.


        
            IF   crapass.cdsitdct <> 1   AND
                 crapass.cdsitdct <> 6   THEN
                 DO:
                     CREATE tt-msg-confirma.
                     ASSIGN tt-msg-confirma.dsmensag = 
                                 "Atencao! Conta encerrada. Confirma ?".

                     RETURN "OK".            
                 END.
            ELSE
                 DO:
                     CREATE tt-msg-confirma.
                     ASSIGN tt-msg-confirma.dsmensag = 
                                              "Confirma a operacao?".

                     RETURN "OK".                         
                END.
                
         END.
         
    RETURN "OK".      

END PROCEDURE.

PROCEDURE valida_entrega_cartao_bancoob:

    DEF INPUT PARAM par_cdcooper  AS  INTE                       NO-UNDO.
    DEF INPUT PARAM par_cdagenci  AS  INTE                       NO-UNDO.
    DEF INPUT PARAM par_nrdcaixa  AS  INTE                       NO-UNDO.
    DEF INPUT PARAM par_cdoperad  AS  CHAR                       NO-UNDO.
    DEF INPUT PARAM par_nrdconta  AS  INTE                       NO-UNDO.
    DEF INPUT PARAM par_dtmvtolt  AS  DATE                       NO-UNDO.
    DEF INPUT PARAM par_idorigem  AS  INTE                       NO-UNDO. 
    DEF INPUT PARAM par_idseqttl  AS  INTE                       NO-UNDO.
    DEF INPUT PARAM par_nmdatela  AS  CHAR                       NO-UNDO.
    DEF INPUT PARAM par_nrctrcrd  AS  INTE                       NO-UNDO.
    DEF INPUT PARAM par_nrcrcard  AS  DECI                       NO-UNDO.
    DEF INPUT PARAM par_dtvalida  AS  CHAR                       NO-UNDO.
    DEF INPUT PARAM par_flag2via  AS  LOGICAL                    NO-UNDO.
    
    DEF OUTPUT PARAM par_flpurcrd AS  LOGICAL                    NO-UNDO.  
    DEF OUTPUT PARAM TABLE FOR tt-erro.
    DEF OUTPUT PARAM TABLE FOR tt-msg-confirma.
    
    EMPTY TEMP-TABLE tt-erro.
    EMPTY TEMP-TABLE tt-msg-confirma.
    
    FOR FIRST crawcrd FIELDS (nrcrcard dtvalida insitcrd cdadmcrd dtpropos flgdebit cdgraupr)
                WHERE crawcrd.cdcooper = par_cdcooper  AND
                      crawcrd.nrdconta = par_nrdconta  AND
                      crawcrd.nrctrcrd = par_nrctrcrd
                      NO-LOCK: END.
                                      
    IF NOT AVAILABLE crawcrd  THEN
       DO:
           ASSIGN aux_cdcritic = 546
                  aux_dscritic = "".
        
           RUN gera_erro (INPUT par_cdcooper,
                          INPUT par_cdagenci,
                          INPUT par_nrdcaixa,
                          INPUT 1,            /** Sequencia **/
                          INPUT aux_cdcritic,
                          INPUT-OUTPUT aux_dscritic).
                                                           
           RETURN "NOK".
       END.
    
    IF NOT par_flag2via THEN
       DO:
           /* Verificar se eh diferente que liberado */
           IF crawcrd.insitcrd <> 3 THEN
              DO:
                  ASSIGN aux_cdcritic = 0
                         aux_dscritic = "Erro ao entregar o cartao, situacao " +
                                        "diferente que Liberado.".
                      
                  RUN gera_erro (INPUT par_cdcooper,
                                 INPUT par_cdagenci,
                                 INPUT par_nrdcaixa,
                                 INPUT 1,     /** Sequencia **/
                                 INPUT aux_cdcritic,
                                 INPUT-OUTPUT aux_dscritic).
                                              
                  RETURN "NOK".               
              END.

       END.
    
    /* Validar o numero do cartao informado */
    IF crawcrd.nrcrcard <> par_nrcrcard THEN
       DO:
           ASSIGN aux_cdcritic = 0
                  aux_dscritic = "Cartao inserido diferente do cartao selecionado".
        
           RUN gera_erro (INPUT par_cdcooper,
                          INPUT par_cdagenci,
                          INPUT par_nrdcaixa,
                          INPUT 1,            /** Sequencia **/
                          INPUT aux_cdcritic,
                          INPUT-OUTPUT aux_dscritic).
                                         
           RETURN "NOK".
       END. 

    FOR FIRST crapass FIELDS(cdsitdct)
                    WHERE crapass.cdcooper = par_cdcooper AND
                      crapass.nrdconta = par_nrdconta 
                      NO-LOCK:  END.
                 
    IF NOT AVAILABLE crapass THEN
       DO:
           ASSIGN aux_cdcritic = 9
                  aux_dscritic = "".

           RUN gera_erro (INPUT par_cdcooper,
                          INPUT par_cdagenci,
                          INPUT par_nrdcaixa,
                          INPUT 1,            /** Sequencia **/
                          INPUT aux_cdcritic,
                          INPUT-OUTPUT aux_dscritic).
                                            
           RETURN "NOK".
       END.

    /* Condicao para verificar se o cartao eh puro credito */
    IF crawcrd.flgdebit = FALSE OR crawcrd.cdgraupr = 9 THEN
       ASSIGN par_flpurcrd = TRUE.
    ELSE
       ASSIGN par_flpurcrd = FALSE.
    
    IF crapass.cdsitdct <> 1   AND
       crapass.cdsitdct <> 6   THEN
       DO:
           CREATE tt-msg-confirma.
           ASSIGN tt-msg-confirma.dsmensag = 
                       "Atencao! Conta encerrada. Confirma ?".
           RETURN "OK".
       END.
    ELSE
       DO:
           CREATE tt-msg-confirma.
           ASSIGN tt-msg-confirma.dsmensag = "Confirmar a operacao?".
           RETURN "OK".                         
       END.

    RETURN "OK".

END PROCEDURE.

/******************************************************
    Efetuar a entrega de um determinado cartao
 *****************************************************/
PROCEDURE entrega_cartao:

    DEF INPUT PARAM par_cdcooper AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_cdagenci AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_nrdcaixa AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_cdoperad AS CHAR                         NO-UNDO.
    DEF INPUT PARAM par_nrdconta AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_dtmvtolt AS DATE                         NO-UNDO.
    DEF INPUT PARAM par_idorigem AS INTE                         NO-UNDO. 
    DEF INPUT PARAM par_idseqttl AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_nmdatela AS CHAR                         NO-UNDO.
    DEF INPUT PARAM par_nrctrcrd AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_nrcrcard AS DECI                         NO-UNDO.
    DEF INPUT PARAM par_dtvalida AS CHAR                         NO-UNDO.
    DEF INPUT PARAM par_cpfrepre AS DEC                          NO-UNDO.
    DEF INPUT PARAM par_pessoaPj AS CHAR                         NO-UNDO.
    
    DEF OUTPUT PARAM TABLE FOR tt-erro.

    DEF VAR aux_contador AS INTE                                 NO-UNDO.

    DEF VAR aux_inanuida AS INTE                                 NO-UNDO.
    DEF VAR aux_vlanuida AS DECI                                 NO-UNDO.
    DEF VAR aux_qtparcan AS INTE                                 NO-UNDO.
    DEF VAR aux_dttabela AS DATE                                 NO-UNDO.
    DEF VAR aux_dtcalcu2 AS DATE                                 NO-UNDO.
    DEF VAR aux_ultdiame AS DATE                                 NO-UNDO.
    DEF VAR aux_dsoperac AS CHAR                                 NO-UNDO.
    DEF VAR h-b1wgen0110 AS HANDLE                               NO-UNDO.

    EMPTY TEMP-TABLE tt-erro.
    
    ASSIGN aux_dsorigem = TRIM(ENTRY(par_idorigem,des_dorigens,","))
           aux_dstransa = "Entregar Cartao de Credito.".
    
    
    TRANS_ENTREGA:
    DO TRANSACTION ON ERROR UNDO TRANS_ENTREGA, LEAVE TRANS_ENTREGA:

       DO aux_contador = 1 TO 10:
    
          FIND FIRST crawcrd WHERE crawcrd.cdcooper = par_cdcooper  AND
                                   crawcrd.nrdconta = par_nrdconta  AND
                                   crawcrd.nrctrcrd = par_nrctrcrd
                                   EXCLUSIVE-LOCK NO-ERROR NO-WAIT.
                                     
          IF NOT AVAILABLE crawcrd  THEN
             DO:
                IF LOCKED crawcrd  THEN
                   DO:
                       ASSIGN aux_dscritic = "Registro de cartao de credito " +
                                             "esta sendo alterado. Tente "    +
                                             "Novamente.".
                       PAUSE 1 NO-MESSAGE.
                       NEXT.

                   END.
                ELSE
                   DO:
                       ASSIGN aux_dscritic = "Registro de cartao de credito " +
                                             "nao encontrado.".
                       
                       LEAVE.

                   END.

             END.

          ASSIGN aux_dscritic = "".

          LEAVE.
            
       END. /** Fim do DO ... TO **/
       
       IF aux_dscritic <> ""  THEN
          DO:
              ASSIGN aux_cdcritic = 0.

              RUN gera_erro (INPUT par_cdcooper,
                             INPUT par_cdagenci,
                             INPUT par_nrdcaixa,
                             INPUT 1,            /** Sequencia **/
                             INPUT aux_cdcritic,
                             INPUT-OUTPUT aux_dscritic).
                                                     
              UNDO TRANS_ENTREGA, RETURN "NOK".
   
          END.

       /* Verifica controle de cobranca de anuidade */
       FIND crapadc WHERE crapadc.cdcooper = crawcrd.cdcooper AND
                          crapadc.cdadmcrd = crawcrd.cdadmcrd
                          NO-LOCK NO-ERROR.

       IF NOT AVAILABLE crapadc  THEN
          ASSIGN aux_inanuida = 3. /* padrao, cobrar de todos */
       ELSE
          ASSIGN aux_inanuida = crapadc.inanuida.


       FOR FIRST crapass FIELDS(nrdconta inpessoa nrcpfcgc)
                        WHERE crapass.cdcooper = crawcrd.cdcooper AND
                          crapass.nrdconta = crawcrd.nrdconta 
                          NO-LOCK:
           END.

       IF NOT VALID-HANDLE(h-b1wgen0110) THEN
          RUN sistema/generico/procedures/b1wgen0110.p
              PERSISTENT SET h-b1wgen0110.
   
       /*Monta a mensagem da operacao para envio no e-mail*/
       ASSIGN aux_dsoperac = "Tentativa de entregar cartoes de credito " + 
                             "na conta "                                 +
                             STRING(crapass.nrdconta,"zzzz,zzz,9")       +
                             " - CPF/CNPJ "                              +
                            (IF crapass.inpessoa = 1 THEN
                                STRING((STRING(crapass.nrcpfcgc,
                                        "99999999999")),"xxx.xxx.xxx-xx")
                             ELSE
                                STRING((STRING(crapass.nrcpfcgc,
                                        "99999999999999")),
                                        "xx.xxx.xxx/xxxx-xx")).

       /*Verifica se o associado esta no cadastro restritivo. Se estiver,
         sera enviado um e-mail informando a situacao*/
       RUN alerta_fraude IN h-b1wgen0110(INPUT par_cdcooper,
                                         INPUT par_cdagenci,
                                         INPUT par_nrdcaixa,
                                         INPUT par_cdoperad,
                                         INPUT par_nmdatela,
                                         INPUT par_dtmvtolt,
                                         INPUT par_idorigem,
                                         INPUT crapass.nrcpfcgc, 
                                         INPUT crapass.nrdconta,
                                         INPUT par_idseqttl,
                                         INPUT TRUE, /*bloqueia operacao*/
                                         INPUT 15, /*cdoperac*/
                                         INPUT aux_dsoperac,
                                         OUTPUT TABLE tt-erro).
       
       IF VALID-HANDLE(h-b1wgen0110) THEN
          DELETE PROCEDURE(h-b1wgen0110).
   
       IF RETURN-VALUE <> "OK" THEN
          DO:
             IF NOT TEMP-TABLE tt-erro:HAS-RECORDS THEN
                DO:
                   ASSIGN aux_dscritic = "Nao foi possivel verificar o " + 
                                         "cadastro restritivo.".
                   
                   RUN gera_erro (INPUT par_cdcooper,
                                  INPUT par_cdagenci,
                                  INPUT par_nrdcaixa,
                                  INPUT 1, /*sequencia*/
                                  INPUT aux_cdcritic,
                                  INPUT-OUTPUT aux_dscritic).
   
                END.
   
             UNDO TRANS_ENTREGA, RETURN "NOK".
   
          END.

           /* isenta todos */
       IF  aux_inanuida = 0                            OR
           /* isenta PJ */
          (aux_inanuida = 1 AND crapass.inpessoa <> 1) OR
           /* isenta PF */
          (aux_inanuida = 2 AND crapass.inpessoa = 1)  THEN
           ASSIGN aux_vlanuida = 0
                  aux_qtparcan = 0.
       ELSE
          DO:
             ASSIGN aux_dttabela = ?.
         
             /* Busca Valor Anuidade */
             FOR EACH craptab WHERE craptab.cdcooper = par_cdcooper     AND
                                    craptab.nmsistem = "CRED"           AND
                                    craptab.tptabela = "USUARI"         AND
                                    craptab.cdempres = 11               AND
                                    craptab.cdacesso = "ENTRGCART" + 
                                                    STRING(crawcrd.cdadmcrd,"9")
                                    NO-LOCK:
                  
                 ASSIGN aux_dttabela = DATE(INT(SUBSTR(craptab.dstextab,17,2)),
                                            INT(SUBSTR(craptab.dstextab,14,2)),
                                            INT(SUBSTR(craptab.dstextab,20,4))).
         
                  IF aux_dttabela > crawcrd.dtpropos THEN
                     NEXT.
         
                  ASSIGN aux_vlanuida = DECIMAL(SUBSTR(craptab.dstextab,4,9))
                         aux_qtparcan = INTEGER(SUBSTR(craptab.dstextab,1,2)).
         
                  LEAVE.
         
             END. /* Fim EACH */

          END.

       /* Calcula o ultimo dia do mes informado */
       ASSIGN aux_dtcalcu2 = DATE(INTE(SUBSTR(par_dtvalida,01,02)),
                                  01,
                                  INTE(SUBSTR(par_dtvalida,03,04))).
       ASSIGN aux_ultdiame = DATE((DATE(MONTH(aux_dtcalcu2),
                                   28,
                                   YEAR(aux_dtcalcu2)) + 4) -
                                   DAY(DATE(MONTH(aux_dtcalcu2),
                                            28,
                                            YEAR(aux_dtcalcu2)) + 4)).
              
       
        /* Inicio - Alteracoes referentes a M181 - Rafael Maciel (RKAM) */
        IF par_cdagenci = 0 THEN
          ASSIGN par_cdagenci = glb_cdagenci.
        /* Fim - Alteracoes referentes a M181 - Rafael Maciel (RKAM) */


       CREATE crapcrd.

       ASSIGN crawcrd.nrcrcard = par_nrcrcard
              crawcrd.dtvalida = aux_ultdiame
              crawcrd.dtentreg = par_dtmvtolt
              crawcrd.dtanuida = par_dtmvtolt
              crawcrd.vlanuida = aux_vlanuida
              crawcrd.inanuida = 0
              crawcrd.qtanuida = 0
              crawcrd.qtparcan = aux_qtparcan
              crawcrd.insitcrd = 4
              crawcrd.cdoperad = par_cdoperad
              /* Inicio - Alteracoes referentes a M181 - Rafael Maciel (RKAM) */
              crawcrd.cdopeori = par_cdoperad
              crawcrd.cdageori = par_cdagenci
              crawcrd.dtinsori = TODAY
              /* Fim - Alteracoes referentes a M181 - Rafael Maciel (RKAM) */
              

              crapcrd.nrdconta = crawcrd.nrdconta
              crapcrd.nrcrcard = crawcrd.nrcrcard
              crapcrd.nrctrcrd = crawcrd.nrctrcrd
              crapcrd.nrcpftit = crawcrd.nrcpftit
              crapcrd.nmtitcrd = crawcrd.nmtitcrd
              crapcrd.dddebito = crawcrd.dddebito
              crapcrd.cdlimcrd = crawcrd.cdlimcrd
              crapcrd.dtvalida = crawcrd.dtvalida
              crapcrd.tpcartao = crawcrd.tpcartao
              crapcrd.cdadmcrd = crawcrd.cdadmcrd
              crapcrd.flgdebit = crawcrd.flgdebit
              crapcrd.dtcancel = ?
              crapcrd.cdmotivo = 0
              /* Inicio - Alteracoes referentes a M181 - Rafael Maciel (RKAM) */
              crapcrd.cdopeori = par_cdoperad
              crapcrd.cdageori = par_cdagenci
              crapcrd.dtinsori = TODAY
              /* Fim - Alteracoes referentes a M181 - Rafael Maciel (RKAM) */
              crapcrd.cdcooper = par_cdcooper.

       VALIDATE crapcrd.

       IF par_pessoaPj = "2" THEN 
          DO:
             ASSIGN crawcrd.nrrepent = par_cpfrepre.
          END.

    END. /* DO TRANSACTION */

    RUN proc_gerar_log (INPUT par_cdcooper,
                        INPUT par_cdoperad,
                        INPUT "",
                        INPUT aux_dsorigem,
                        INPUT aux_dstransa,
                        INPUT TRUE,
                        INPUT par_idseqttl,
                        INPUT par_nmdatela,
                        INPUT par_nrdconta,
                       OUTPUT aux_nrdrowid).
                       
    RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                            INPUT "nrcrcard",
                            INPUT "",
                            INPUT crawcrd.nrcrcard).
    
    RETURN "OK".

END PROCEDURE.

PROCEDURE grava_dados_cartao_nao_gerado:

    DEF INPUT PARAM par_cdcooper  AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_cdagenci  AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_nrdcaixa  AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_cdoperad  AS CHAR                         NO-UNDO.
    DEF INPUT PARAM par_nrdconta  AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_dtmvtolt  AS DATE                         NO-UNDO.
    DEF INPUT PARAM par_idorigem  AS INTE                         NO-UNDO. 
    DEF INPUT PARAM par_idseqttl  AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_nmdatela  AS CHAR                         NO-UNDO.
    DEF INPUT PARAM par_nrctrcrd  AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_nrcrcard  AS DECI                         NO-UNDO.
    DEF INPUT PARAM par_nrcctitg  AS DECI                         NO-UNDO.
    DEF INPUT PARAM par_nrcctitg2 AS DECI                         NO-UNDO.
    DEF INPUT PARAM par_repsolic  AS CHAR                         NO-UNDO.

    DEF OUTPUT PARAM TABLE FOR tt-erro.

    DEF VAR aux_contador AS INTE                                 NO-UNDO.

    DEF BUFFER crabcrd FOR crawcrd.

    EMPTY TEMP-TABLE tt-erro.
    
    ASSIGN aux_dsorigem = TRIM(ENTRY(par_idorigem,des_dorigens,","))
           aux_dstransa = "Entrega Cartao Solicitado".

    GRAVA_DADOS:
    DO TRANSACTION ON ERROR UNDO GRAVA_DADOS, LEAVE GRAVA_DADOS:

       /* Validacao de Cartoes Bancoob */
       FOR crapcop FIELDS(cdagebcb)
                   WHERE crapcop.cdcooper = par_cdcooper 
                         NO-LOCK: END.
                          
       DO aux_contador = 1 TO 10:

          FIND crawcrd WHERE crawcrd.cdcooper = par_cdcooper  AND
                             crawcrd.nrdconta = par_nrdconta  AND
                             crawcrd.nrctrcrd = par_nrctrcrd
                             EXCLUSIVE-LOCK NO-ERROR NO-WAIT.
                                     
          IF NOT AVAIL crawcrd  THEN
             DO:
                 IF LOCKED crawcrd  THEN
                    DO:
                        ASSIGN aux_dscritic = "Registro de cartao de credito " +
                                              "esta sendo alterado. Tente "    +
                                              "Novamente.".
                        PAUSE 1 NO-MESSAGE.
                        NEXT.
                    END.
                 ELSE
                    DO:
                        ASSIGN aux_dscritic = "Registro de cartao de credito " +
                                             "nao encontrado.".
                        LEAVE.
                    END.
             END.

          LEAVE.
            
       END. /** Fim do DO ... TO **/

       IF aux_dscritic <> ""  THEN
          DO:
              RUN gera_erro (INPUT par_cdcooper,
                             INPUT par_cdagenci,
                             INPUT par_nrdcaixa,
                             INPUT 1,            /** Sequencia **/
                             INPUT aux_cdcritic,
                             INPUT-OUTPUT aux_dscritic).
                                                     
              UNDO GRAVA_DADOS, RETURN "NOK".
          END.

        /* Inicio - Alteracoes referentes a M181 - Rafael Maciel (RKAM) */
        IF par_cdagenci = 0 THEN
          ASSIGN par_cdagenci = glb_cdagenci.
        /* Fim - Alteracoes referentes a M181 - Rafael Maciel (RKAM) */

       /* Validacao do campo Conta Cartao  */
       IF LENGTH(STRING(par_nrcctitg)) <> 13 THEN
          DO:
              ASSIGN aux_cdcritic = 0
                     aux_dscritic = "Numero da Conta Cartao invalida.".
                     
              RUN gera_erro (INPUT par_cdcooper,
                             INPUT par_cdagenci,
                             INPUT par_nrdcaixa,
                             INPUT 1,
                             INPUT aux_cdcritic,
                             INPUT-OUTPUT aux_dscritic).
                                                     
              UNDO GRAVA_DADOS, RETURN "NOK".          
          END.       
          
       /* Validacao do campo Conta Cartao  */
       IF INT(SUBSTR(STRING(par_nrcctitg),1,3)) <> 756              OR
          INT(SUBSTR(STRING(par_nrcctitg),4,4)) <> crapcop.cdagebcb THEN
          DO:
              ASSIGN aux_cdcritic = 0
                     aux_dscritic = "Numero da Conta Cartao invalida.".
                     
              RUN gera_erro (INPUT par_cdcooper,
                             INPUT par_cdagenci,
                             INPUT par_nrdcaixa,
                             INPUT 1,
                             INPUT aux_cdcritic,
                             INPUT-OUTPUT aux_dscritic).
                                                     
              UNDO GRAVA_DADOS, RETURN "NOK".
          END.

       IF par_nrcctitg <> par_nrcctitg2 THEN
          DO:
              ASSIGN aux_cdcritic = 0
                     aux_dscritic = "Numero da conta cartao nao confere " +
                                    "com o numero redigitado".
                     
              RUN gera_erro (INPUT par_cdcooper,
                             INPUT par_cdagenci,
                             INPUT par_nrdcaixa,
                             INPUT 1,
                             INPUT aux_cdcritic,
                             INPUT-OUTPUT aux_dscritic).
                                                     
              UNDO GRAVA_DADOS, RETURN "NOK".
          END.

       /* Valida se a situacao do Cartao */
       IF crawcrd.insitcrd <> 2 THEN
          DO:
              ASSIGN aux_cdcritic = 0
                     aux_dscritic = "Erro ao entregar o cartao, situacao " +
                                    "diferente que Solicitado.".
                     
              RUN gera_erro (INPUT par_cdcooper,
                             INPUT par_cdagenci,
                             INPUT par_nrdcaixa,
                             INPUT 1,
                             INPUT aux_cdcritic,
                             INPUT-OUTPUT aux_dscritic).
                                                     
              UNDO GRAVA_DADOS, RETURN "NOK".
          END.

       /* Validar se o nome do portador eh igual ao nome da tabel crawcrd */
       IF UPPER(par_repsolic) <> UPPER(crawcrd.nmtitcrd) THEN
          DO:
              ASSIGN aux_cdcritic = 0
                     aux_dscritic = "Cartao inserido diferente do cartao selecionado".

              RUN gera_erro (INPUT par_cdcooper,
                             INPUT par_cdagenci,
                             INPUT par_nrdcaixa,
                             INPUT 1,
                             INPUT aux_cdcritic,
                             INPUT-OUTPUT aux_dscritic).
                                                     
              UNDO GRAVA_DADOS, RETURN "NOK".
          END.

       /* Valida se jah possui conta cartao cadastrada */
       FOR FIRST crabcrd FIELDS(cdcooper)
                         WHERE crabcrd.cdcooper  = par_cdcooper AND
                               crabcrd.nrcctitg  = par_nrcctitg AND
                               crabcrd.nrdconta <> par_nrdconta
                               NO-LOCK: END.

       IF AVAIL crabcrd THEN
          DO:
              ASSIGN aux_cdcritic = 0
                     aux_dscritic = "Conta Cartao ja cadastrada.".

              RUN gera_erro (INPUT par_cdcooper,
                             INPUT par_cdagenci,
                             INPUT par_nrdcaixa,
                             INPUT 1,
                             INPUT aux_cdcritic,
                             INPUT-OUTPUT aux_dscritic).
                                                     
              UNDO GRAVA_DADOS, RETURN "NOK".

          END.

       
       /* Mantem relacionamento conta x conta cartao */
       { includes/PLSQL_altera_session_antes_st.i &dboraayl={&scd_dboraayl} }

       /* Efetuar a chamada a rotina Oracle */ 
       RUN STORED-PROCEDURE pc_insere_conta_cartao
          aux_handproc = PROC-HANDLE NO-ERROR (INPUT par_cdcooper,
                                               INPUT par_nrdconta,
                                               INPUT par_nrcctitg,
                                              OUTPUT 0,
                                              OUTPUT "").
         
         /* Fechar o procedimento para buscarmos o resultado */ 
       CLOSE STORED-PROC pc_insere_conta_cartao
            aux_statproc = PROC-STATUS WHERE PROC-HANDLE = aux_handproc. 

       { includes/PLSQL_altera_session_depois_st.i &dboraayl={&scd_dboraayl} }

       ASSIGN aux_cdcritic = pc_insere_conta_cartao.pr_cdcritic
                                WHEN pc_insere_conta_cartao.pr_cdcritic <> ?           
              aux_dscritic = pc_insere_conta_cartao.pr_dscritic
                                WHEN pc_insere_conta_cartao.pr_dscritic <> ?.       
       IF aux_cdcritic <> 0   OR
          aux_dscritic <> ""  THEN
          DO:
              RUN gera_erro (INPUT par_cdcooper,
                             INPUT par_cdagenci,
                             INPUT par_nrdcaixa,
                             INPUT 1,
                             INPUT aux_cdcritic,
                             INPUT-OUTPUT aux_dscritic).
                                                     
              UNDO GRAVA_DADOS, RETURN "NOK".
          END.
          

       CREATE crapcrd.

       ASSIGN crawcrd.nrcrcard = par_nrcrcard
              crawcrd.insitcrd = 3
              crawcrd.dtlibera = par_dtmvtolt
              crawcrd.nrcctitg = par_nrcctitg
           
              crapcrd.cdcooper = crawcrd.cdcooper
              crapcrd.nrdconta = crawcrd.nrdconta
              crapcrd.nrctrcrd = crawcrd.nrctrcrd
              crapcrd.nrcrcard = crawcrd.nrcrcard
              crapcrd.nrcpftit = crawcrd.nrcpftit
              crapcrd.nmtitcrd = crawcrd.nmtitcrd
              crapcrd.dddebito = crawcrd.dddebito
              crapcrd.cdlimcrd = crawcrd.cdlimcrd
              crapcrd.dtcancel = crawcrd.dtcancel
              crapcrd.cdmotivo = crawcrd.cdmotivo
              crapcrd.nrprotoc = crawcrd.nrprotoc
              crapcrd.cdadmcrd = crawcrd.cdadmcrd
              crapcrd.tpcartao = crawcrd.tpcartao
              /* Inicio - Alteracoes referentes a M181 - Rafael Maciel (RKAM) */
              crapcrd.cdopeori = par_cdoperad
              crapcrd.cdageori = par_cdagenci
              crapcrd.dtinsori = TODAY
              /* Fim - Alteracoes referentes a M181 - Rafael Maciel (RKAM) */
              crapcrd.flgdebit = crawcrd.flgdebit.

    END. /* DO TRANSACTION */

    RUN proc_gerar_log (INPUT par_cdcooper,
                        INPUT par_cdoperad,
                        INPUT "",
                        INPUT aux_dsorigem,
                        INPUT aux_dstransa,
                        INPUT TRUE,
                        INPUT par_idseqttl,
                        INPUT par_nmdatela,
                        INPUT par_nrdconta,
                       OUTPUT aux_nrdrowid).
                       
    RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                            INPUT "nrcrcard",
                            INPUT "",
                            INPUT crawcrd.nrcrcard).

    RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                            INPUT "nrcctitg",
                            INPUT "",
                            INPUT crawcrd.nrcctitg).                            

    RETURN "OK".

END.

PROCEDURE entrega_cartao_bancoob:

    DEF INPUT PARAM par_cdcooper AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_cdagenci AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_nrdcaixa AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_cdoperad AS CHAR                         NO-UNDO.
    DEF INPUT PARAM par_nrdconta AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_dtmvtolt AS DATE                         NO-UNDO.
    DEF INPUT PARAM par_idorigem AS INTE                         NO-UNDO. 
    DEF INPUT PARAM par_idseqttl AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_nmdatela AS CHAR                         NO-UNDO.
    DEF INPUT PARAM par_nrctrcrd AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_nrcrcard AS DECI                         NO-UNDO.
    DEF INPUT PARAM par_dtvalida AS CHAR                         NO-UNDO.
    
    DEF OUTPUT PARAM TABLE FOR tt-erro.

    DEF VAR aux_contador AS INTE                                 NO-UNDO.
    DEF VAR aux_dsoperac AS CHAR                                 NO-UNDO.
    DEF VAR aux_dtcalcu2 AS DATE                                 NO-UNDO.
    DEF VAR aux_ultdiame AS DATE                                 NO-UNDO.
    DEF VAR h-b1wgen0110 AS HANDLE                               NO-UNDO.

    EMPTY TEMP-TABLE tt-erro.
    
    ASSIGN aux_dsorigem = TRIM(ENTRY(par_idorigem,des_dorigens,","))
           aux_dstransa = "Entregar Cartao de Credito.".
    
    TRANS_ENTREGA:
    DO TRANSACTION ON ERROR UNDO TRANS_ENTREGA, LEAVE TRANS_ENTREGA:

       DO aux_contador = 1 TO 10:

          FIND crawcrd WHERE crawcrd.cdcooper = par_cdcooper  AND
                             crawcrd.nrdconta = par_nrdconta  AND
                             crawcrd.nrctrcrd = par_nrctrcrd
                             EXCLUSIVE-LOCK NO-ERROR NO-WAIT.
                                     
          IF NOT AVAIL crawcrd  THEN
             DO:
                 IF LOCKED crawcrd  THEN
                    DO:
                        ASSIGN aux_dscritic = "Registro de cartao de credito " +
                                              "esta sendo alterado. Tente "    +
                                              "Novamente.".
                        PAUSE 1 NO-MESSAGE.
                        NEXT.
                    END.
                 ELSE
                    DO:
                        ASSIGN aux_dscritic = "Registro de cartao de credito " +
                                             "nao encontrado.".
                        LEAVE.
                    END.
             END.

          LEAVE.
            
       END. /** Fim do DO ... TO **/
       
       IF aux_dscritic <> ""  THEN
          DO:
              RUN gera_erro (INPUT par_cdcooper,
                             INPUT par_cdagenci,
                             INPUT par_nrdcaixa,
                             INPUT 1,            /** Sequencia **/
                             INPUT aux_cdcritic,
                             INPUT-OUTPUT aux_dscritic).
                                                     
              UNDO TRANS_ENTREGA, RETURN "NOK".
          END.

       DO aux_contador = 1 TO 10:

          FIND crapcrd WHERE crapcrd.cdcooper = par_cdcooper AND
                             crapcrd.nrdconta = par_nrdconta AND
                             crapcrd.nrcrcard = par_nrcrcard
                             EXCLUSIVE-LOCK NO-ERROR NO-WAIT.

          IF NOT AVAIL crapcrd THEN
             DO:
                 IF LOCKED crapcrd THEN
                    DO:
                        ASSIGN aux_dscritic = "Registro de cartao de credito " +
                                              "esta sendo alterado. Tente "    +
                                              "Novamente.".
                        PAUSE 1 NO-MESSAGE.
                        NEXT.
                    END.
                 ELSE
                    DO:
                        ASSIGN aux_dscritic = "Registro de cartao de credito " +
                                              "nao encontrado.".
                        LEAVE.
                    END.
             END.

          LEAVE.
            
       END. /** Fim do DO ... TO **/
       
       IF aux_dscritic <> ""  THEN
          DO:
              RUN gera_erro (INPUT par_cdcooper,
                             INPUT par_cdagenci,
                             INPUT par_nrdcaixa,
                             INPUT 1,            /** Sequencia **/
                             INPUT aux_cdcritic,
                             INPUT-OUTPUT aux_dscritic).
                                                     
              UNDO TRANS_ENTREGA, RETURN "NOK".
          END.

       FOR FIRST crapass FIELDS(nrdconta inpessoa nrcpfcgc)
                       WHERE crapass.cdcooper = crawcrd.cdcooper AND
                         crapass.nrdconta = crawcrd.nrdconta 
                         NO-LOCK:
           END.

       IF NOT VALID-HANDLE(h-b1wgen0110) THEN
          RUN sistema/generico/procedures/b1wgen0110.p
              PERSISTENT SET h-b1wgen0110.
   
       /*Monta a mensagem da operacao para envio no e-mail*/
       ASSIGN aux_dsoperac = "Tentativa de entregar cartoes de credito " + 
                             "na conta "                                 +
                             STRING(crapass.nrdconta,"zzzz,zzz,9")       +
                             " - CPF/CNPJ "                              +
                            (IF crapass.inpessoa = 1 THEN
                                STRING((STRING(crapass.nrcpfcgc,
                                        "99999999999")),"xxx.xxx.xxx-xx")
                             ELSE
                                STRING((STRING(crapass.nrcpfcgc,
                                        "99999999999999")),
                                        "xx.xxx.xxx/xxxx-xx")).

       /*Verifica se o associado esta no cadastro restritivo. Se estiver,
         sera enviado um e-mail informando a situacao*/
       RUN alerta_fraude IN h-b1wgen0110(INPUT par_cdcooper,
                                         INPUT par_cdagenci,
                                         INPUT par_nrdcaixa,
                                         INPUT par_cdoperad,
                                         INPUT par_nmdatela,
                                         INPUT par_dtmvtolt,
                                         INPUT par_idorigem,
                                         INPUT crapass.nrcpfcgc, 
                                         INPUT crapass.nrdconta,
                                         INPUT par_idseqttl,
                                         INPUT TRUE, /*bloqueia operacao*/
                                         INPUT 15, /*cdoperac*/
                                         INPUT aux_dsoperac,
                                         OUTPUT TABLE tt-erro).
       
       IF VALID-HANDLE(h-b1wgen0110) THEN
          DELETE PROCEDURE(h-b1wgen0110).
   
       IF RETURN-VALUE <> "OK" THEN
          DO:
             IF NOT TEMP-TABLE tt-erro:HAS-RECORDS THEN
                DO:
                   ASSIGN aux_dscritic = "Nao foi possivel verificar o " + 
                                         "cadastro restritivo.".
                   
                   RUN gera_erro (INPUT par_cdcooper,
                                  INPUT par_cdagenci,
                                  INPUT par_nrdcaixa,
                                  INPUT 1, /*sequencia*/
                                  INPUT aux_cdcritic,
                                  INPUT-OUTPUT aux_dscritic).
   
                END.
   
             UNDO TRANS_ENTREGA, RETURN "NOK".
   
          END.

       /* Calcula o ultimo dia do mes informado */
       ASSIGN aux_dtcalcu2 = DATE(INTE(SUBSTR(par_dtvalida,01,02)),
                                  01,
                                  INTE(SUBSTR(par_dtvalida,03,04))).
       ASSIGN aux_ultdiame = DATE((DATE(MONTH(aux_dtcalcu2),
                                   28,
                                   YEAR(aux_dtcalcu2)) + 4) -
                                   DAY(DATE(MONTH(aux_dtcalcu2),
                                            28,
                                            YEAR(aux_dtcalcu2)) + 4)).

       ASSIGN crawcrd.dtentreg = par_dtmvtolt
              crawcrd.insitcrd = 4
              crawcrd.cdoperad = par_cdoperad
                  crawcrd.dtvalida = aux_ultdiame
              crapcrd.dtvalida = crawcrd.dtvalida.
       
    END. /* DO TRANSACTION */

    RUN proc_gerar_log (INPUT par_cdcooper,
                        INPUT par_cdoperad,
                        INPUT "",
                        INPUT aux_dsorigem,
                        INPUT aux_dstransa,
                        INPUT TRUE,
                        INPUT par_idseqttl,
                        INPUT par_nmdatela,
                        INPUT par_nrdconta,
                       OUTPUT aux_nrdrowid).
                       
    RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                            INPUT "nrcrcard",
                            INPUT "",
                            INPUT crawcrd.nrcrcard).
    
    RETURN "OK".

END PROCEDURE.

/******************************************************
    Desfazer a entrega de um determinado cartao
 *****************************************************/
PROCEDURE desfaz_entrega_cartao:

    DEF INPUT PARAM par_cdcooper AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_cdagenci AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_nrdcaixa AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_cdoperad AS CHAR                         NO-UNDO.
    DEF INPUT PARAM par_nrdconta AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_dtmvtolt AS DATE                         NO-UNDO.
    DEF INPUT PARAM par_idorigem AS INTE                         NO-UNDO. 
    DEF INPUT PARAM par_idseqttl AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_nmdatela AS CHAR                         NO-UNDO.
    DEF INPUT PARAM par_nrctrcrd AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_inconfir AS INTE                         NO-UNDO.
    
    DEF OUTPUT PARAM TABLE FOR tt-msg-confirma.
    DEF OUTPUT PARAM TABLE FOR tt-erro.

    DEF VAR aux_contador AS INTE                                 NO-UNDO.

    DEF VAR aux_vlanuida AS DECI                                 NO-UNDO.
    DEF VAR aux_qtparcan AS INTE                                 NO-UNDO.
    DEF VAR aux_dttabela AS DATE                                 NO-UNDO.
    
    EMPTY TEMP-TABLE tt-msg-confirma.
    EMPTY TEMP-TABLE tt-erro.
    
    ASSIGN aux_dsorigem = TRIM(ENTRY(par_idorigem,des_dorigens,","))
           aux_dstransa = "Desfazer entrega de Cartao de Credito.".
    
    TRANS_D_ENTREGA:
    DO TRANSACTION ON ERROR UNDO TRANS_D_ENTREGA, LEAVE TRANS_D_ENTREGA:
    
       DO aux_contador = 1 TO 10:
    
          FIND FIRST crawcrd WHERE crawcrd.cdcooper = par_cdcooper  AND
                                   crawcrd.nrdconta = par_nrdconta  AND
                                   crawcrd.nrctrcrd = par_nrctrcrd
                                   EXCLUSIVE-LOCK NO-ERROR NO-WAIT.
                                     
          IF  NOT AVAILABLE crawcrd  THEN
              DO:
                  IF  LOCKED crawcrd  THEN
                      DO:
                          aux_dscritic = "Registro de cartao de credito esta" 
                                         + " sendo alterado. Tente Novamente.".
                          PAUSE 1 NO-MESSAGE.
                          NEXT.
                      END.
                  ELSE
                      DO:
                          aux_dscritic = "Registro de cartao de credito nao" +
                                         " encontrado.".
                          
                          LEAVE.
                      END.
              END.

          ASSIGN aux_dscritic = "".

          LEAVE.
            
       END. /** Fim do DO ... TO **/
       
       IF  aux_dscritic <> ""  THEN
           DO:
               ASSIGN aux_cdcritic = 0.

               RUN gera_erro (INPUT par_cdcooper,
                              INPUT par_cdagenci,
                              INPUT par_nrdcaixa,
                              INPUT 1,            /** Sequencia **/
                              INPUT aux_cdcritic,
                              INPUT-OUTPUT aux_dscritic).
                                                      
               UNDO TRANS_D_ENTREGA, RETURN "NOK".
   
           END.

        IF   crawcrd.insitcrd <> 4 THEN
             DO:
                 ASSIGN aux_cdcritic = 534
                        aux_dscritic = "".
   
                 RUN gera_erro (INPUT par_cdcooper,
                                INPUT par_cdagenci,
                                INPUT par_nrdcaixa,
                                INPUT 1,            /** Sequencia **/
                                INPUT aux_cdcritic,
                                INPUT-OUTPUT aux_dscritic).
                                                       
                  RETURN "NOK".                  
             END.     

        IF   crawcrd.qtanuida > 1               AND 
             crawcrd.dtentr2v <> par_dtmvtolt   THEN
             DO:
                 ASSIGN aux_cdcritic = 541
                        aux_dscritic = "".
   
                 RUN gera_erro (INPUT par_cdcooper,
                                INPUT par_cdagenci,
                                INPUT par_nrdcaixa,
                                INPUT 1,            /** Sequencia **/
                                INPUT aux_cdcritic,
                                INPUT-OUTPUT aux_dscritic).
                                                       
                 RETURN "NOK".
             END.

        FIND FIRST crapdcd WHERE crapdcd.cdcooper = par_cdcooper     AND
                                 crapdcd.nrdconta = crawcrd.nrdconta AND
                                 crapdcd.nrcrcard = crawcrd.nrcrcard
                                 NO-LOCK NO-ERROR.

        IF  AVAILABLE crapdcd THEN
            DO:
                ASSIGN aux_cdcritic = 543
                       aux_dscritic = "".
   
                RUN gera_erro (INPUT par_cdcooper,
                               INPUT par_cdagenci,
                               INPUT par_nrdcaixa,
                               INPUT 1,            /** Sequencia **/
                               INPUT aux_cdcritic,
                               INPUT-OUTPUT aux_dscritic).
                                                      
                RETURN "NOK".
            
            END.
                 
       DO aux_contador = 1 TO 10:
    
          FIND  crapcrd WHERE crapcrd.cdcooper = par_cdcooper      AND
                              crapcrd.nrdconta = crawcrd.nrdconta  AND
                              crapcrd.nrctrcrd = crawcrd.nrctrcrd
                              EXCLUSIVE-LOCK NO-ERROR NO-WAIT.
          
          IF  NOT AVAILABLE crapcrd  THEN
              DO:
                 IF  LOCKED crapcrd  THEN
                     DO:
                        aux_dscritic = "Registro de cartao de credito " +
                                       "esta sendo alterado. Tente " +
                                       "Novamente.".
                        PAUSE 1 NO-MESSAGE.
                        NEXT.
                     END.
                 ELSE
                     DO:
                        aux_dscritic = "Registro de cartao de credito " +
                                       "nao encontrado.".
                        LEAVE.
                     END.
              END.

       END. /** Fim do DO ... TO **/
            
       IF  aux_dscritic <> ""  THEN
           DO:
               ASSIGN aux_cdcritic = 0.

               RUN gera_erro (INPUT par_cdcooper,
                              INPUT par_cdagenci,
                              INPUT par_nrdcaixa,
                              INPUT 1,            /** Sequencia **/
                              INPUT aux_cdcritic,
                              INPUT-OUTPUT aux_dscritic).
                                                      
               UNDO TRANS_D_ENTREGA, RETURN "NOK".
           END.     
            
       FIND craptlc WHERE craptlc.cdcooper = par_cdcooper      AND
                          craptlc.cdadmcrd = crawcrd.cdadmcrd  AND
                          craptlc.tpcartao = crawcrd.tpcartao  AND
                          craptlc.cdlimcrd = crawcrd.cdlimcrd  AND
                          craptlc.dddebito = 0         
                          NO-LOCK NO-ERROR.
                        
       IF   NOT AVAILABLE craptlc   THEN
            DO:
               ASSIGN aux_cdcritic = 532
                      aux_dscritic = "".

               RUN gera_erro (INPUT par_cdcooper,
                              INPUT par_cdagenci,
                              INPUT par_nrdcaixa,
                              INPUT 1,            /** Sequencia **/
                              INPUT aux_cdcritic,
                              INPUT-OUTPUT aux_dscritic).
                                                      
               UNDO TRANS_D_ENTREGA, RETURN "NOK".

            END.
            
       IF   par_inconfir = 1   THEN
            DO:
               IF   crawcrd.qtanuida > 0 THEN
                    DO:
                        CREATE tt-msg-confirma.
                        ASSIGN tt-msg-confirma.inconfir = par_inconfir + 1
                               tt-msg-confirma.dsmensag = 
                               "Anuidade ja foi paga, confirma a operacao?".
                        
                        RETURN "OK".       
                    END.
               ELSE
                    DO:
                        CREATE tt-msg-confirma.
                        ASSIGN tt-msg-confirma.inconfir = par_inconfir + 1
                               tt-msg-confirma.dsmensag = 
                                              "Confirma a operacao?".
                                              
                        RETURN "OK".                      
                    END.     
            END.
       
       IF  par_inconfir = 2   THEN
           DO:
               DELETE crapcrd.

               ASSIGN crawcrd.nrcrcard = 0
                      crawcrd.dtvalida = ?
                      crawcrd.dtentreg = ?
                      crawcrd.dtanuida = ?
                      crawcrd.vlanuida = 0
                      crawcrd.inanuida = 0
                      crawcrd.qtanuida = 0
                      crawcrd.qtparcan = 0
                      crawcrd.insitcrd = 3
                      crawcrd.cdoperad = par_cdoperad
                      crawcrd.nrrepent = 0.                   
           END.

    END. /* Fim da transacao */
    
    RUN proc_gerar_log (INPUT par_cdcooper,
                        INPUT par_cdoperad,
                        INPUT "",
                        INPUT aux_dsorigem,
                        INPUT aux_dstransa,
                        INPUT TRUE,
                        INPUT par_idseqttl,
                        INPUT par_nmdatela,
                        INPUT par_nrdconta,
                       OUTPUT aux_nrdrowid).
                       
    RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                            INPUT "nrctrcrd",
                            INPUT "",
                            INPUT crawcrd.nrctrcrd).                       
    
    RETURN "OK".

END PROCEDURE.

/**********************
    OPCAO ALTERAR
***********************/    
/********************************************************
    Verificar permissao para acessar a opcao alterar
 *******************************************************/
PROCEDURE verifica_acesso_alterar:

    DEF  INPUT PARAM par_cdcooper AS INTE                        NO-UNDO.
    DEF  INPUT PARAM par_cdagenci AS INTE                        NO-UNDO.
    DEF  INPUT PARAM par_nrdcaixa AS INTE                        NO-UNDO.
    DEF  INPUT PARAM par_cdoperad AS CHAR                        NO-UNDO.
    DEF  INPUT PARAM par_nrdconta AS INTE                        NO-UNDO.
    DEF  INPUT PARAM par_nrctrcrd AS INTE                        NO-UNDO.
    
    DEF OUTPUT PARAM par_flgadmbb AS LOGI                        NO-UNDO.

    DEF OUTPUT PARAM TABLE FOR tt-erro.

    EMPTY TEMP-TABLE tt-erro.
    
    FIND crawcrd WHERE crawcrd.cdcooper = par_cdcooper AND
                       crawcrd.nrdconta = par_nrdconta AND
                       crawcrd.nrctrcrd = par_nrctrcrd NO-LOCK NO-ERROR.

    IF   NOT AVAILABLE crawcrd   THEN
         DO:
             ASSIGN aux_cdcritic = 535
                    aux_dscritic = "".

             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                                      
             RETURN "NOK".
             
         END.

    IF   crawcrd.insitcrd = 4 AND crawcrd.dtsol2vi <> ?   THEN
         DO:
            ASSIGN aux_cdcritic = 0
                   aux_dscritic = "Opcao nao disponivel. 2.Via do cartao foi " +
                                  "solicitada.".

            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                                      
            RETURN "NOK".
         END.

    par_flgadmbb = IF f_verifica_adm(crawcrd.cdadmcrd) = 1 THEN
                                      TRUE
                                   ELSE
                                          FALSE.

    RETURN "OK".

END PROCEDURE.

/******************************************************
    Carregar dados sobre limite de debito do cartao
    para efetuar a troca de limite
 *****************************************************/
PROCEDURE carrega_dados_limdeb_cartao:

    DEF INPUT PARAM par_cdcooper AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_cdagenci AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_nrdcaixa AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_cdoperad AS CHAR                         NO-UNDO.
    DEF INPUT PARAM par_nrdconta AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_dtmvtolt AS DATE                         NO-UNDO.
    DEF INPUT PARAM par_idorigem AS INTE                         NO-UNDO. 
    DEF INPUT PARAM par_idseqttl AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_nmdatela AS CHAR                         NO-UNDO.
    DEF INPUT PARAM par_nrctrcrd AS INTE                         NO-UNDO.
    
    DEF OUTPUT PARAM TABLE FOR tt-limite_deb_cartao.
    DEF OUTPUT PARAM TABLE FOR tt-erro.
    
    DEF VAR aux_dsoperac AS CHAR                                 NO-UNDO.
    DEF VAR h-b1wgen0110 AS HANDLE                               NO-UNDO.

    EMPTY TEMP-TABLE tt-limite_deb_cartao.
    EMPTY TEMP-TABLE tt-erro.

    FOR FIRST crapass FIELDS(nrdconta inpessoa nrcpfcgc vllimdeb)
                     WHERE crapass.cdcooper = par_cdcooper   AND
                       crapass.nrdconta = par_nrdconta   
                       NO-LOCK:
        END.   
                       
    IF NOT AVAIL crapass THEN
       DO:
          ASSIGN aux_cdcritic = 9
                 aux_dscritic = "".

          RUN gera_erro (INPUT par_cdcooper,
                         INPUT par_cdagenci,
                         INPUT par_nrdcaixa,
                         INPUT 1,            /** Sequencia **/
                         INPUT aux_cdcritic,
                         INPUT-OUTPUT aux_dscritic).
                                                    
          RETURN "NOK".

       END.
    
    IF NOT VALID-HANDLE(h-b1wgen0110) THEN
       RUN sistema/generico/procedures/b1wgen0110.p
           PERSISTENT SET h-b1wgen0110.

    /*Monta a mensagem da operacao para envio no e-mail*/
    ASSIGN aux_dsoperac = "Tentativa de alterar o limite do cartao de " + 
                          "debito na conta "                            +
                          STRING(crapass.nrdconta,"zzzz,zzz,9")          + 
                          " - CPF/CNPJ "                                +
                         (IF crapass.inpessoa = 1 THEN
                             STRING((STRING(crapass.nrcpfcgc,
                                     "99999999999")),"xxx.xxx.xxx-xx")
                          ELSE
                             STRING((STRING(crapass.nrcpfcgc,
                                     "99999999999999")),
                                     "xx.xxx.xxx/xxxx-xx")).

    /*Verifica se o associado esta no cadastro restritivo. Se estiver,
      sera enviado um e-mail informando a situacao*/
    RUN alerta_fraude IN h-b1wgen0110(INPUT par_cdcooper,
                                      INPUT par_cdagenci,
                                      INPUT par_nrdcaixa,
                                      INPUT par_cdoperad,
                                      INPUT par_nmdatela,
                                      INPUT par_dtmvtolt,
                                      INPUT par_idorigem,
                                      INPUT crapass.nrcpfcgc, 
                                      INPUT crapass.nrdconta,
                                      INPUT par_idseqttl,
                                      INPUT TRUE, /*bloqueia operacao*/
                                      INPUT 13, /*cdoperac*/
                                      INPUT aux_dsoperac,
                                      OUTPUT TABLE tt-erro).
    
    IF VALID-HANDLE(h-b1wgen0110) THEN
       DELETE PROCEDURE(h-b1wgen0110).

    IF RETURN-VALUE <> "OK" THEN
       DO:
          IF NOT TEMP-TABLE tt-erro:HAS-RECORDS THEN
             DO:
                ASSIGN aux_dscritic = "Nao foi possivel verificar o " + 
                                      "cadastro restritivo.".
                
                RUN gera_erro (INPUT par_cdcooper,
                               INPUT par_cdagenci,
                               INPUT par_nrdcaixa,
                               INPUT 1, /*sequencia*/
                               INPUT aux_cdcritic,
                               INPUT-OUTPUT aux_dscritic).

             END.

          RETURN "NOK".

       END.

    CREATE tt-limite_deb_cartao.
    ASSIGN tt-limite_deb_cartao.vllimdeb = crapass.vllimdeb.

    RETURN "OK".
    
END PROCEDURE.

/******************************************************
    Efetuar a alteracao do limite de debito do cartao
 *****************************************************/
PROCEDURE altera_limdeb_cartao:

    DEF INPUT PARAM par_cdcooper AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_cdagenci AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_nrdcaixa AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_cdoperad AS CHAR                         NO-UNDO.
    DEF INPUT PARAM par_nrdconta AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_dtmvtolt AS DATE                         NO-UNDO.
    DEF INPUT PARAM par_idorigem AS INTE                         NO-UNDO. 
    DEF INPUT PARAM par_idseqttl AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_nmdatela AS CHAR                         NO-UNDO.
    DEF INPUT PARAM par_nrctrcrd AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_vllimdeb AS DECI                         NO-UNDO.
    
    DEF OUTPUT PARAM TABLE FOR tt-msg-confirma.
    DEF OUTPUT PARAM TABLE FOR tt-erro.    

    DEF  VAR aux_contador AS INTE   NO-UNDO.
    DEF  VAR aux_vldebdbb AS DECI   NO-UNDO.
    DEF  VAR aux_vlsaquso AS DECI   NO-UNDO.
    DEF  VAR aux_vlsaqsol AS DECI   NO-UNDO.    
    DEF  VAR aux_vlrfalta AS DECI   NO-UNDO.
    DEF  VAR aux_vlpassou AS DECI   NO-UNDO.
    DEF  VAR aux_dsoperac AS CHAR   NO-UNDO.
    DEF  VAR h-b1wgen0110 AS HANDLE NO-UNDO.
    
    DEF  BUFFER crabcrd FOR crawcrd.
    DEF  BUFFER crabass FOR crapass.    
    
    DEF VAR aux_vllimant AS DECI    NO-UNDO.
    
    EMPTY TEMP-TABLE tt-msg-confirma.
    EMPTY TEMP-TABLE tt-erro.
    
    ASSIGN aux_dsorigem = TRIM(ENTRY(par_idorigem,des_dorigens,","))
           aux_dstransa = "Alterar limite de debito de Cartao de Credito.".
    

    FIND FIRST crawcrd WHERE crawcrd.cdcooper = par_cdcooper  AND
                             crawcrd.nrdconta = par_nrdconta  AND
                             crawcrd.nrctrcrd = par_nrctrcrd
                             NO-LOCK NO-ERROR NO-WAIT.

    IF NOT AVAILABLE crawcrd THEN
       DO:
           ASSIGN aux_cdcritic = 535
                    aux_dscritic = "".

           RUN gera_erro (INPUT par_cdcooper,
                          INPUT par_cdagenci,
                          INPUT par_nrdcaixa,
                          INPUT 1,            /** Sequencia **/
                          INPUT aux_cdcritic,
                          INPUT-OUTPUT aux_dscritic).
                                                    
           RETURN "NOK".
           
       END.

    IF crawcrd.insitcrd <> 3 AND crawcrd.insitcrd <> 4 THEN
       DO:
           ASSIGN aux_cdcritic = 555
                  aux_dscritic = "".

           RUN gera_erro (INPUT par_cdcooper,
                          INPUT par_cdagenci,
                          INPUT par_nrdcaixa,
                          INPUT 1,            /** Sequencia **/
                          INPUT aux_cdcritic,
                          INPUT-OUTPUT aux_dscritic).
                                                    
           RETURN "NOK".

       END.

    FOR FIRST crapass FIELDS(nrdconta inpessoa nrcpfcgc vllimdeb)
                     WHERE crapass.cdcooper = par_cdcooper   AND
                       crapass.nrdconta = par_nrdconta   
                       NO-LOCK:
    END.
                       
    IF NOT AVAIL crapass THEN
       DO:
           ASSIGN aux_cdcritic = 9
                  aux_dscritic = "".

           RUN gera_erro (INPUT par_cdcooper,
                          INPUT par_cdagenci,
                          INPUT par_nrdcaixa,
                          INPUT 1,            /** Sequencia **/
                          INPUT aux_cdcritic,
                          INPUT-OUTPUT aux_dscritic).
                                                  
            RETURN "NOK".

       END.

    IF NOT VALID-HANDLE(h-b1wgen0110) THEN
       RUN sistema/generico/procedures/b1wgen0110.p
           PERSISTENT SET h-b1wgen0110.

    /*Monta a mensagem da operacao para envio no e-mail*/
    ASSIGN aux_dsoperac = "Tentativa de alterar o limite de cartao de " + 
                          "debito na conta "                            +
                          STRING(crapass.nrdconta,"zzzz,zzz,9")         +
                          " - CPF/CNPJ "                                +
                         (IF crapass.inpessoa = 1 THEN
                             STRING((STRING(crapass.nrcpfcgc,
                                     "99999999999")),"xxx.xxx.xxx-xx")
                          ELSE
                             STRING((STRING(crapass.nrcpfcgc,
                                     "99999999999999")),
                                     "xx.xxx.xxx/xxxx-xx")).

    /*Verifica se o associado esta no cadastro restritivo. Se estiver,
      sera enviado um e-mail informando a situacao*/
    RUN alerta_fraude IN h-b1wgen0110(INPUT par_cdcooper,
                                      INPUT par_cdagenci,
                                      INPUT par_nrdcaixa,
                                      INPUT par_cdoperad,
                                      INPUT par_nmdatela,
                                      INPUT par_dtmvtolt,
                                      INPUT par_idorigem,
                                      INPUT crapass.nrcpfcgc,
                                      INPUT crapass.nrdconta,
                                      INPUT par_idseqttl,
                                      INPUT TRUE, /*bloqueia operacao*/
                                      INPUT 13, /*cdoperac*/
                                      INPUT aux_dsoperac,
                                      OUTPUT TABLE tt-erro).
    
    IF VALID-HANDLE(h-b1wgen0110) THEN
       DELETE PROCEDURE(h-b1wgen0110).

    IF RETURN-VALUE <> "OK" THEN
       DO:
          IF NOT TEMP-TABLE tt-erro:HAS-RECORDS THEN
             DO:
                ASSIGN aux_dscritic = "Nao foi possivel verificar o " + 
                                      "cadastro restritivo.".
                
                RUN gera_erro (INPUT par_cdcooper,
                               INPUT par_cdagenci,
                               INPUT par_nrdcaixa,
                               INPUT 1, /*sequencia*/
                               INPUT aux_cdcritic,
                               INPUT-OUTPUT aux_dscritic).

             END.

          RETURN "NOK".

       END.
         
    ASSIGN aux_vllimant = crapass.vllimdeb.     
    
    /* Limite das administradoras do BB */
    IF f_verifica_adm(crawcrd.cdadmcrd) = 1 THEN
       DO:
           /** Totais em uso e solicitados **/
           /** Para Cartoes de Debito nao considera cartoes Canc/Bloq **/
           FOR EACH crabcrd FIELDS(nrdconta insitcrd)
                            WHERE crabcrd.cdcooper = par_cdcooper AND
                                  crabcrd.cdadmcrd > 82           AND 
                                  crabcrd.cdadmcrd < 89           AND
                                  CAN-DO("0,1,4",STRING(crabcrd.insitcrd))
                                  NO-LOCK,
       
               EACH crabass FIELDS(vllimdeb)
                                         WHERE crabass.cdcooper = par_cdcooper     AND
                                  crabass.nrdconta = crabcrd.nrdconta  
                                  NO-LOCK:
                           
               IF crabcrd.insitcrd = 4  THEN  /* Em uso */ 
                  ASSIGN aux_vlsaquso = aux_vlsaquso + crabass.vllimdeb.
               ELSE  /* Solicitado */ 
                  ASSIGN aux_vlsaqsol = aux_vlsaqsol + crabass.vllimdeb.
             
           END. /* Fim do FOR EACH */
             
           /** Limites com o BB **/ 
           FIND craptab WHERE craptab.cdcooper = par_cdcooper AND
                              craptab.nmsistem = "CRED"       AND
                              craptab.tptabela = "USUARI"     AND
                              craptab.cdempres = 11           AND
                              craptab.cdacesso = "VLCONTRCRD" AND
                              craptab.tpregist = 0
                              NO-LOCK NO-ERROR NO-WAIT.
          
           IF AVAIL craptab  THEN 
              ASSIGN aux_vldebdbb = DEC(SUBSTRING(craptab.dstextab,40,12)).
           
           /* 
                 Se a soma dos limites em uso e solicitados + a alteracao
                 atual dividido pelo limite parametrizado com o BB
                 for menor ou igual a 5% mostra a mensagem 
           */
           ASSIGN aux_vlrfalta = 100 - (( ((aux_vlsaquso + aux_vlsaqsol) +
                                           (par_vllimdeb - aux_vllimant))
                                         / aux_vldebdbb) * 100).
           
           IF aux_vlrfalta <= 5  AND aux_vlrfalta > 0  THEN
              DO:
                  CREATE tt-msg-confirma.

                  ASSIGN tt-msg-confirma.inconfir = 1
                         tt-msg-confirma.dsmensag = "Faltam " +
                         STRING(aux_vlrfalta,"99.999999") + "%" +
                         " para exceder o limite da Cooperativa com o " +
                         "BB. Verificar com a Gerencia da Cooperativa o " +
                         "limite de debito contratado. Tela CCARBB.".
              END.            
           ELSE
           IF aux_vlrfalta = 0  THEN
              DO:
                 CREATE tt-msg-confirma.

                 ASSIGN tt-msg-confirma.inconfir = 1
                        tt-msg-confirma.dsmensag = 
                        "Valor total de cartoes da Cooperativa chegou" +
                        " ao limite contratado junto ao BB. " +
                        "Verificar com a Gerencia da Cooperativa o " +
                        "limite de debito contratado. Tela CCARBB.".        
                          
              END.
           ELSE
           /* 
              Se a soma dos limites em uso e solicitados + a alteracao
              atual for maior que o limite parametrizado com o BB
              mostra a mensagem e aborta a operacao
           */
              DO:
                 ASSIGN aux_vlpassou = aux_vlsaquso + 
                                       aux_vlsaqsol +
                                       par_vllimdeb.

                 IF aux_vlpassou > aux_vldebdbb THEN
                    DO:
                       ASSIGN aux_cdcritic = 0
                              aux_dscritic = 
                              "Valor ultrapassou o limite de debito" +
                              " da Cooperativa com o BB. " +
                              "Verificar com a Gerencia da Cooperativa" +
                              " o limite contratado de debito. " + 
                              "Tela CCARBB.".

                       RUN gera_erro (INPUT par_cdcooper,
                                      INPUT par_cdagenci,
                                      INPUT par_nrdcaixa,
                                      INPUT 1,    /** Sequencia **/
                                      INPUT aux_cdcritic,
                                      INPUT-OUTPUT aux_dscritic).
              
                       RETURN "NOK".                            

                    END.            
                       
              END.    
                     
       END. /* Fim do IF adm's = BB */
    
    TRANSACAO:
    DO TRANSACTION ON ERROR UNDO TRANSACAO, LEAVE TRANSACAO:

       DO aux_contador = 1 TO 10:    
         
          FIND crapass WHERE crapass.cdcooper = par_cdcooper   AND
                             crapass.nrdconta = par_nrdconta   
                             EXCLUSIVE-LOCK NO-ERROR NO-WAIT.
                    
          IF NOT AVAILABLE crapass THEN
             DO:
                IF LOCKED crapass  THEN
                   DO:
                       ASSIGN aux_dscritic = "Registro de associados esta " +
                                             "sendo alterado. Tente " + 
                                             "Novamente.".
                       PAUSE 1 NO-MESSAGE.
                       NEXT.

                   END.
                ELSE
                   DO:
                      ASSIGN aux_dscritic = "Registro de associado nao " + 
                                            "encontrado.".
                      LEAVE.

                   END.
             END.  
          ELSE
             DO:
                 ASSIGN crapass.vllimdeb = par_vllimdeb
                        aux_dscritic = "".
             END.    
              
       IF aux_dscritic <> ""  THEN
          DO:
              ASSIGN aux_cdcritic = 0.

              RUN gera_erro (INPUT par_cdcooper,
                             INPUT par_cdagenci,
                             INPUT par_nrdcaixa,
                             INPUT 1,            /** Sequencia **/
                             INPUT aux_cdcritic,
                             INPUT-OUTPUT aux_dscritic).
                                                     
              UNDO TRANSACAO, RETURN "NOK".

          END.    
       
       END. /* Fim do DO .. TO */
       
    END. /* DO TRANSACTION */    
    
    RUN proc_gerar_log (INPUT par_cdcooper,
                        INPUT par_cdoperad,
                        INPUT "",
                        INPUT aux_dsorigem,
                        INPUT aux_dstransa,
                        INPUT TRUE,
                        INPUT par_idseqttl,
                        INPUT par_nmdatela,
                        INPUT par_nrdconta,
                       OUTPUT aux_nrdrowid).
                       
    RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                            INPUT "nrctrcrd",
                            INPUT "",
                            INPUT crawcrd.nrctrcrd).
                            
    RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                            INPUT "vllimdeb",
                            INPUT aux_vllimant,
                            INPUT par_vllimdeb).                            
    
    RETURN "OK".

END PROCEDURE.

/******************************************************
    Carregar dados do limite sobre limite de credito
    do cartao para efetuar uma troca do limite
 *****************************************************/
PROCEDURE carrega_dados_limcred_cartao:
    
    DEF INPUT PARAM par_cdcooper AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_cdagenci AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_nrdcaixa AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_cdoperad AS CHAR                         NO-UNDO.
    DEF INPUT PARAM par_nrdconta AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_dtmvtolt AS DATE                         NO-UNDO.
    DEF INPUT PARAM par_idorigem AS INTE                         NO-UNDO. 
    DEF INPUT PARAM par_idseqttl AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_nmdatela AS CHAR                         NO-UNDO.
    DEF INPUT PARAM par_nrctrcrd AS INTE                         NO-UNDO.

    DEF OUTPUT PARAM TABLE FOR tt-limite_crd_cartao.
    DEF OUTPUT PARAM TABLE FOR tt-erro.

    EMPTY TEMP-TABLE tt-limite_crd_cartao.
    EMPTY TEMP-TABLE tt-erro.

    FIND FIRST crawcrd WHERE crawcrd.cdcooper = par_cdcooper  AND
                             crawcrd.nrdconta = par_nrdconta  AND
                             crawcrd.nrctrcrd = par_nrctrcrd
                             NO-LOCK NO-ERROR.

    IF   NOT AVAILABLE crawcrd THEN
         DO:
             ASSIGN aux_cdcritic = 546
                    aux_dscritic = "".

             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                                      
             RETURN "NOK".
         END.

    /* verifica se administradora é CECRED VISA e o operador eh do setor CARTOES */
    FIND FIRST crapope WHERE crapope.cdcooper = par_cdcooper AND
                             crapope.cdoperad = par_cdoperad 
                             NO-LOCK NO-ERROR.
    
    IF  crawcrd.cdadmcrd = 3 AND crapope.cddepart <> 2 THEN   /* 2-CARTOES */ 
        DO:
            ASSIGN aux_cdcritic = 0
                   aux_dscritic = "Administradora de cartoes CECRED VISA bloqueada".
        
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                                   
            RETURN "NOK".
        END.


   IF   crawcrd.insitcrd <> 4 THEN
        DO:
            ASSIGN aux_cdcritic = 555
                   aux_dscritic = "".

            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                                     
            RETURN "NOK".
        END.

   /* verifica se administradora é CREDICARD MASTERCARD */
   IF   crawcrd.cdadmcrd = 1 THEN
        DO:
            ASSIGN aux_cdcritic = 0
                   aux_dscritic = "Administradora de cartoes MASTERCARD bloqueada".

            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                                     
            RETURN "NOK".
        END.

   FIND craptlc WHERE craptlc.cdcooper = par_cdcooper       AND
                      craptlc.cdadmcrd = crawcrd.cdadmcrd   AND
                      craptlc.tpcartao = crawcrd.tpcartao   AND
                      craptlc.cdlimcrd = crawcrd.cdlimcrd   AND
                      craptlc.dddebito = 0                  NO-LOCK NO-ERROR.

   IF   NOT AVAILABLE craptlc   THEN
        DO:
            ASSIGN aux_cdcritic = 532
                   aux_dscritic = "".

            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                                      
            RETURN "NOK".
 
        END.

   CREATE tt-limite_crd_cartao.
   ASSIGN tt-limite_crd_cartao.vllimcrd = craptlc.vllimcrd.
   
   RETURN "OK".

END PROCEDURE.

/******************************************************
    Validar valor do novo limite de credito informado
    para o cartao de credito
 *****************************************************/
PROCEDURE valida_dados_limcred_cartao:

    DEF INPUT PARAM par_cdcooper AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_cdagenci AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_nrdcaixa AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_cdoperad AS CHAR                         NO-UNDO.
    DEF INPUT PARAM par_nrdconta AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_dtmvtolt AS DATE                         NO-UNDO.
    DEF INPUT PARAM par_idorigem AS INTE                         NO-UNDO. 
    DEF INPUT PARAM par_idseqttl AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_nmdatela AS CHAR                         NO-UNDO.
    DEF INPUT PARAM par_nrctrcrd AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_vllimcrd AS DECI                         NO-UNDO.
    DEF INPUT PARAM par_repsolic  AS  CHAR                       NO-UNDO.

    DEF OUTPUT PARAM TABLE FOR tt-dados-avais.
    DEF OUTPUT PARAM TABLE FOR tt-msg-confirma.
    DEF OUTPUT PARAM TABLE FOR tt-erro. 

    DEF VAR aux_contador AS INTE   NO-UNDO.
    DEF VAR h-b1wgen9999 AS HANDLE NO-UNDO.
    DEF VAR h-b1wgen0110 AS HANDLE NO-UNDO.
    
    DEF  VAR aux_vlcreuso AS DECI   NO-UNDO.
    DEF  VAR aux_vlcresol AS DECI   NO-UNDO.
    DEF  VAR aux_vlcredbb AS DECI   NO-UNDO.
    DEF  VAR aux_vlrfalta AS DECI   NO-UNDO.
    DEF  VAR aux_vlpassou AS DECI   NO-UNDO.
    DEF  VAR aux_dsoperac AS CHAR   NO-UNDO.

    DEF  BUFFER crabcrd FOR crawcrd.
    DEF  BUFFER crabtlc FOR craptlc.
    DEF  BUFFER crabass FOR crapass.    
    
    DEF VAR aux_vllimant AS DECI    NO-UNDO.
    DEF VAR aux_vllimcrd AS DECI    NO-UNDO.
    
    EMPTY TEMP-TABLE tt-dados-avais.
    EMPTY TEMP-TABLE tt-msg-confirma.
    EMPTY TEMP-TABLE tt-erro.
    
    FOR FIRST crapass FIELDS(nrdconta inpessoa nrcpfcgc)
                     WHERE crapass.cdcooper = par_cdcooper AND
                       crapass.nrdconta = par_nrdconta 
                       NO-LOCK: 
    END.

    IF NOT VALID-HANDLE(h-b1wgen0110) THEN
       RUN sistema/generico/procedures/b1wgen0110.p
           PERSISTENT SET h-b1wgen0110.

    /*Monta a mensagem da operacao para envio no e-mail*/
    ASSIGN aux_dsoperac = "Tentativa de alterar o limite de cartao de " + 
                          "credito na conta "                           +
                          STRING(crapass.nrdconta,"zzzz,zzz,9")         +
                          " - CPF/CNPJ "                                +
                         (IF crapass.inpessoa = 1 THEN
                             STRING((STRING(crapass.nrcpfcgc,
                                     "99999999999")),"xxx.xxx.xxx-xx")
                          ELSE
                             STRING((STRING(crapass.nrcpfcgc,
                                     "99999999999999")),
                                     "xx.xxx.xxx/xxxx-xx")).

    /*Verifica se o associado esta no cadastro restritivo. Se estiver,
      sera enviado um e-mail informando a situacao*/
    RUN alerta_fraude IN h-b1wgen0110(INPUT par_cdcooper,
                                      INPUT par_cdagenci,
                                      INPUT par_nrdcaixa,
                                      INPUT par_cdoperad,
                                      INPUT par_nmdatela,
                                      INPUT par_dtmvtolt,
                                      INPUT par_idorigem,
                                      INPUT crapass.nrcpfcgc,
                                      INPUT crapass.nrdconta,
                                      INPUT par_idseqttl,
                                      INPUT TRUE, /*bloqueia operacao*/
                                      INPUT 20, /*cdoperac*/
                                      INPUT aux_dsoperac,
                                      OUTPUT TABLE tt-erro).
    
    IF VALID-HANDLE(h-b1wgen0110) THEN
       DELETE PROCEDURE(h-b1wgen0110).

    IF RETURN-VALUE <> "OK" THEN
       DO:
          IF NOT TEMP-TABLE tt-erro:HAS-RECORDS THEN
             DO:
                ASSIGN aux_dscritic = "Nao foi possivel verificar o " + 
                                      "cadastro restritivo.".
                
                RUN gera_erro (INPUT par_cdcooper,
                               INPUT par_cdagenci,
                               INPUT par_nrdcaixa,
                               INPUT 1, /*sequencia*/
                               INPUT aux_cdcritic,
                               INPUT-OUTPUT aux_dscritic).

             END.

          RETURN "NOK".

       END.

    IF crapass.inpessoa = 2 THEN
        DO:
            IF par_repsolic = "" THEN
                DO:
                    ASSIGN aux_cdcritic = 0
                           aux_dscritic = "Incluir um Representante".
                
                    RUN gera_erro (INPUT par_cdcooper,
                                   INPUT par_cdagenci,
                                   INPUT par_nrdcaixa,
                                   INPUT 1,            /** Sequencia **/
                                   INPUT aux_cdcritic,
                                   INPUT-OUTPUT aux_dscritic).
                                                      
                    RETURN "NOK".
                END.

            
            ASSIGN aux_vllimcrd = par_vllimcrd.

            FOR EACH crawcrd FIELDS(cdcooper cdadmcrd tpcartao cdlimcrd) 
                             WHERE crawcrd.cdcooper = par_cdcooper  AND
                                   crawcrd.nrdconta = par_nrdconta  AND
                                   crawcrd.nrctrcrd <> par_nrctrcrd AND
                                  (crawcrd.insitcrd = 0             OR /* estudo */
                                   crawcrd.insitcrd = 1             OR /* aprov */
                                   crawcrd.insitcrd = 2             OR /* solic */
                                   crawcrd.insitcrd = 3             OR /* liberado */
                                   crawcrd.insitcrd = 4 )              /* em uso */
                                   NO-LOCK,

                EACH craptlc FIELDS(vllimcrd)
                             WHERE craptlc.cdcooper = crawcrd.cdcooper  AND
                                   craptlc.cdadmcrd = crawcrd.cdadmcrd  AND
                                   craptlc.dddebito = 0                 AND
                                   craptlc.tpcartao = crawcrd.tpcartao  AND
                                   craptlc.cdlimcrd = crawcrd.cdlimcrd  
                                   NO-LOCK:

                ASSIGN aux_vllimcrd = aux_vllimcrd + craptlc.vllimcrd.
                
                FIND FIRST craphcj
                     WHERE craphcj.cdcooper = par_cdcooper
                       AND craphcj.nrdconta = par_nrdconta NO-LOCK NO-ERROR.

                IF aux_vllimcrd > craphcj.vllimglb THEN
                   DO:
                       ASSIGN aux_cdcritic = 0
                              aux_dscritic = "Limite proposto excede limite empresarial.".
                       
                       RUN gera_erro (INPUT par_cdcooper,
                                      INPUT par_cdagenci,
                                      INPUT par_nrdcaixa,
                                      INPUT 1,            /** Sequencia **/
                                      INPUT aux_cdcritic,
                                      INPUT-OUTPUT aux_dscritic).     


                       RETURN "NOK".
                   END.
            END.


            FOR EACH craphcj
                WHERE craphcj.cdcooper = par_cdcooper
                  AND craphcj.nrdconta = par_nrdconta NO-LOCK:

                FOR FIRST crapass FIELDS(inpessoa)
                    WHERE crapass.cdcooper = craphcj.cdcooper   AND 
                          (crapass.nrcpfcgc = craphcj.nrcpfpri  OR
                           crapass.nrcpfcgc = craphcj.nrcpfseg  OR
                           crapass.nrcpfcgc = craphcj.nrcpfter) AND 
                          crapass.nmprimtl = par_repsolic       NO-LOCK:
                                END.
                
                IF   NOT AVAIL crapass THEN
                    DO:
                        FIND FIRST crapncp
                            WHERE (crapncp.nrdoccpf = craphcj.nrcpfpri OR
                                   crapncp.nrdoccpf = craphcj.nrcpfseg OR
                                   crapncp.nrdoccpf = craphcj.nrcpfter) 
                              AND crapncp.nmpessoa  = par_repsolic NO-LOCK NO-ERROR.
                       
                        IF   NOT AVAIL crapncp THEN
                             DO:
                                 
                                 ASSIGN aux_cdcritic = 0
                                        aux_dscritic = "Representante Invalido".
                
                                 RUN gera_erro (INPUT par_cdcooper,
                                                INPUT par_cdagenci,
                                                INPUT par_nrdcaixa,
                                                INPUT 1,            /** Sequencia **/
                                                INPUT aux_cdcritic,
                                                INPUT-OUTPUT aux_dscritic).
                                                                  
                                 RETURN "NOK".
                             END.
                    END.
            END.
        END. 
    
    FIND FIRST crawcrd WHERE crawcrd.cdcooper = par_cdcooper  AND
                             crawcrd.nrdconta = par_nrdconta  AND
                             crawcrd.nrctrcrd = par_nrctrcrd
                             NO-LOCK NO-ERROR.
                                     
    IF  NOT AVAILABLE crawcrd  THEN
        DO:
            ASSIGN aux_cdcritic = 546
                   aux_dscritic = "".
    
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                                           
            RETURN "NOK".

        END.

    FIND craptlc WHERE craptlc.cdcooper = par_cdcooper       AND
                       craptlc.cdadmcrd = crawcrd.cdadmcrd   AND
                       craptlc.tpcartao = crawcrd.tpcartao   AND
                       craptlc.cdlimcrd = crawcrd.cdlimcrd   AND
                       craptlc.dddebito = 0                  
                       NO-LOCK NO-ERROR.

     IF   NOT AVAILABLE craptlc   THEN
          DO:
              ASSIGN aux_cdcritic = 532
                     aux_dscritic = "".

              RUN gera_erro (INPUT par_cdcooper,
                             INPUT par_cdagenci,
                             INPUT par_nrdcaixa,
                             INPUT 1,            /** Sequencia **/
                             INPUT aux_cdcritic,
                             INPUT-OUTPUT aux_dscritic).
                                                      
              RETURN "NOK".
 
          END.
          
    ASSIGN aux_vllimant = craptlc.vllimcrd.          

    FIND FIRST craptlc WHERE craptlc.cdcooper = par_cdcooper      AND
                             craptlc.cdadmcrd = crawcrd.cdadmcrd  AND
                             craptlc.tpcartao = crawcrd.tpcartao  AND
                             craptlc.dddebito = 0                 AND
                             craptlc.vllimcrd = par_vllimcrd     
                             NO-LOCK NO-ERROR.

    IF   NOT AVAILABLE craptlc   THEN
         DO:
             ASSIGN aux_cdcritic = 269
                    aux_dscritic = "".

             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                                      
             RETURN "NOK".
         END.

    IF   craptlc.insittab <> 0 THEN
         DO:
             ASSIGN aux_cdcritic = 604
                    aux_dscritic = "".

             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                                      
             RETURN "NOK".
         END.
         
    RUN sistema/generico/procedures/b1wgen9999.p PERSISTENT
        SET h-b1wgen9999.

    IF  NOT VALID-HANDLE(h-b1wgen9999)  THEN
        DO:
            ASSIGN aux_cdcritic = 0
                   aux_dscritic = "Handle invalido para BO b1wgen9999.".
                   
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                       
            RETURN "NOK".
        END.
        
    RUN lista_avalistas IN h-b1wgen9999 (INPUT par_cdcooper,  
                                         INPUT par_cdagenci,
                                         INPUT par_nrdcaixa,
                                         INPUT par_cdoperad,
                                         INPUT par_nmdatela,
                                         INPUT par_idorigem,
                                         INPUT par_nrdconta,
                                         INPUT par_idseqttl,
                                         INPUT 4, /** Tipo do contrato **/
                                         INPUT par_nrctrcrd,
                                         INPUT crawcrd.nrctaav1,
                                         INPUT crawcrd.nrctaav2,
                                        OUTPUT TABLE tt-dados-avais,
                                        OUTPUT TABLE tt-erro).
           
    DELETE PROCEDURE h-b1wgen9999.
    
    IF  RETURN-VALUE = "NOK"  THEN
        RETURN "NOK".
        
    /* Limite das administradoras do BB */
    IF   f_verifica_adm(craptlc.cdadmcrd) = 1 THEN
         DO:
             /** Totais em uso e solicitados **/
             FOR EACH crabcrd FIELDS (cdadmcrd tpcartao cdlimcrd insitcrd)
                              WHERE crabcrd.cdcooper = par_cdcooper AND
                                    crabcrd.cdadmcrd > 82           AND 
                                    crabcrd.cdadmcrd < 89           AND
                                    CAN-DO("0,1,4,5",STRING(crabcrd.insitcrd))
                                    NO-LOCK,

                 EACH crabtlc FIELDS (vllimcrd)
                              WHERE crabtlc.cdcooper = par_cdcooper     AND 
                                    crabtlc.cdadmcrd = crabcrd.cdadmcrd AND
                                    crabtlc.tpcartao = crabcrd.tpcartao AND
                                    crabtlc.cdlimcrd = crabcrd.cdlimcrd AND
                                    crabtlc.dddebito = 0  
                                    NO-LOCK:
            
                 IF crabcrd.insitcrd = 4  THEN  /* Em uso */ 
                    ASSIGN aux_vlcreuso = aux_vlcreuso + crabtlc.vllimcrd.
                 ELSE  /* Solicitado */ 
                    ASSIGN aux_vlcresol = aux_vlcresol + crabtlc.vllimcrd.
               
             END. /* Fim do FOR EACH */
               
             /** Limites com o BB **/ 
             FIND craptab WHERE craptab.cdcooper = par_cdcooper AND
                                craptab.nmsistem = "CRED"       AND
                                craptab.tptabela = "USUARI"     AND
                                craptab.cdempres = 11           AND
                                craptab.cdacesso = "VLCONTRCRD" AND
                                craptab.tpregist = 0
                                NO-LOCK NO-ERROR NO-WAIT.
            
             IF  AVAIL craptab  THEN 
                 ASSIGN aux_vlcredbb = DEC(SUBSTRING(craptab.dstextab,14,12)).

             /* 
                   Se a soma dos limites em uso e solicitados + a alteracao
                   atual dividido pelo limite parametrizado com o BB
                   for menor ou igual a 5% mostra a mensagem 
             */
             aux_vlrfalta = 100 - (( ((aux_vlcreuso + aux_vlcresol) +
                                      (par_vllimcrd - aux_vllimant))
                                      / aux_vlcredbb) * 100).
             
             IF  aux_vlrfalta <= 5  AND aux_vlrfalta > 0  THEN
                 DO:
                     CREATE tt-msg-confirma.
                     ASSIGN tt-msg-confirma.inconfir = 1
                            tt-msg-confirma.dsmensag = "Faltam " +
                            STRING(aux_vlrfalta,"99.999999") + "%" +
                            " para exceder o limite da Cooperativa com o " +
                            "BB. Verificar com a Gerencia da Cooperativa o " +
                            "limite de credito contratado. Tela CCARBB.".
                 END.            
             ELSE
             IF  aux_vlrfalta = 0  THEN
                 DO:
                     CREATE tt-msg-confirma.
                     ASSIGN tt-msg-confirma.inconfir = 1
                            tt-msg-confirma.dsmensag = 
                            "Valor total de cartoes da Cooperativa chegou" +
                            " ao limite contratado junto ao BB. " +
                            "Verificar com a Gerencia da Cooperativa o " +
                            "limite de credito contratado. Tela CCARBB.".
                 END.
             ELSE
             /* 
                Se a soma dos limites em uso e solicitados + a alteracao
                atual for maior que o limite parametrizado com o BB
                mostra a mensagem e aborta a operacao
             */
                 DO:
                     aux_vlpassou = aux_vlcreuso + 
                                    aux_vlcresol +
                                    par_vllimcrd.

                     IF  aux_vlpassou > aux_vlcredbb THEN
                         DO:
                             ASSIGN aux_cdcritic = 0
                                    aux_dscritic = 
                                    "Valor ultrapassou o limite de credito" +
                                    " da Cooperativa com o BB. " +
                                    "Verificar com a Gerencia da Cooperativa" +
                                    " o limite de credito contratado. " +
                                    " Tela CCARBB.".

                             RUN gera_erro (INPUT par_cdcooper,
                                            INPUT par_cdagenci,
                                            INPUT par_nrdcaixa,
                                            INPUT 1,    /** Sequencia **/
                                            INPUT aux_cdcritic,
                                            INPUT-OUTPUT aux_dscritic).
                
                             RETURN "NOK".                            
                         END.            
                           
                 END.
                 
         END. /* Fim do IF adm's = BB */ 

    RETURN "OK".

END PROCEDURE.

/******************************************************
    Efetuar a alteracao do limite de credito do cartao
 *****************************************************/
PROCEDURE altera_limcred_cartao:
  
    DEF  INPUT PARAM par_cdcooper AS INTE                         NO-UNDO.
    DEF  INPUT PARAM par_cdagenci AS INTE                         NO-UNDO.
    DEF  INPUT PARAM par_nrdcaixa AS INTE                         NO-UNDO.
    DEF  INPUT PARAM par_cdoperad AS CHAR                         NO-UNDO.
    DEF  INPUT PARAM par_nrdconta AS INTE                         NO-UNDO.
    DEF  INPUT PARAM par_dtmvtolt AS DATE                         NO-UNDO.
    DEF  INPUT PARAM par_idorigem AS INTE                         NO-UNDO. 
    DEF  INPUT PARAM par_idseqttl AS INTE                         NO-UNDO.
    DEF  INPUT PARAM par_nmdatela AS CHAR                         NO-UNDO.
    DEF  INPUT PARAM par_nrctrcrd AS INTE                         NO-UNDO.
    DEF  INPUT PARAM par_vllimcrd AS DECI                         NO-UNDO.
    DEF  INPUT PARAM par_flgimpnp AS LOG                          NO-UNDO.
    DEF  INPUT PARAM par_repsolic AS DEC                          NO-UNDO.
    /** ------------------- Parametros do 1 avalista ------------------- **/
    DEF  INPUT PARAM par_nrctaav1 AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nmdaval1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nrcpfav1 AS DECI                           NO-UNDO.
    DEF  INPUT PARAM par_tpdocav1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_dsdocav1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nmdcjav1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_cpfcjav1 AS DECI                           NO-UNDO.
    DEF  INPUT PARAM par_tdccjav1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_doccjav1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_ende1av1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_ende2av1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nrfonav1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_emailav1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nmcidav1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_cdufava1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nrcepav1 AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrender1 AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_complen1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nrcxaps1 AS INTE                           NO-UNDO.
    /** ------------------- Parametros do 2 avalista ------------------- **/
    DEF  INPUT PARAM par_nrctaav2 AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nmdaval2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nrcpfav2 AS DECI                           NO-UNDO.
    DEF  INPUT PARAM par_tpdocav2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_dsdocav2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nmdcjav2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_cpfcjav2 AS DECI                           NO-UNDO.
    DEF  INPUT PARAM par_tdccjav2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_doccjav2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_ende1av2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_ende2av2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nrfonav2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_emailav2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nmcidav2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_cdufava2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nrcepav2 AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrender2 AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_complen2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nrcxaps2 AS INTE                           NO-UNDO.
    
    DEF VAR aux_vllimcrd AS DECI                                    NO-UNDO.
    
    DEF OUTPUT PARAM TABLE FOR tt-erro. 
      
    DEF VAR aux_contador AS INTE NO-UNDO.
    DEF VAR h-b1wgen9999 AS HANDLE NO-UNDO.
    DEF VAR old_vllimite AS DECI NO-UNDO.
    
    DEF BUFFER crabtlc FOR craptlc.
    
    EMPTY TEMP-TABLE tt-erro.
    
    ASSIGN aux_dsorigem = TRIM(ENTRY(par_idorigem,des_dorigens,","))
           aux_dstransa = "Alterar limite de credito do Cartao de Credito.".



    FOR FIRST crapass FIELDS(inpessoa)
        WHERE crapass.cdcooper = par_cdcooper
          AND crapass.nrdconta = par_nrdconta NO-LOCK:
    END.

    
    IF  crapass.inpessoa = 2 THEN
        DO:
            ASSIGN aux_vllimcrd = par_vllimcrd.

            FOR EACH crawcrd WHERE  crawcrd.cdcooper = par_cdcooper  AND
                                    crawcrd.nrdconta = par_nrdconta  AND
                                    crawcrd.nrctrcrd <> par_nrctrcrd AND
                                   (crawcrd.insitcrd = 0             OR /* estudo */
                                    crawcrd.insitcrd = 1             OR /* aprov */
                                    crawcrd.insitcrd = 2             OR /* solic */
                                    crawcrd.insitcrd = 3             OR /* liberado */
                                    crawcrd.insitcrd = 4 )           AND /* em uso */
                                   (crawcrd.cdadmcrd < 10            OR 
                                    crawcrd.cdadmcrd > 80)
                                    NO-LOCK:

                FIND craptlc WHERE  craptlc.cdcooper = crawcrd.cdcooper  AND
                                    craptlc.cdadmcrd = crawcrd.cdadmcrd  AND
/*                                     craptlc.dddebito = crawcrd.dddebito  AND */
                                    craptlc.dddebito = 0                 AND
                                    craptlc.tpcartao = crawcrd.tpcartao  AND
                                    craptlc.cdlimcrd = crawcrd.cdlimcrd  NO-LOCK NO-ERROR.

                IF   NOT AVAILABLE craptlc   THEN
                     DO:
                         ASSIGN aux_cdcritic = 532
                                aux_dscritic = "".

                         RUN gera_erro (INPUT par_cdcooper,
                                        INPUT par_cdagenci,
                                        INPUT par_nrdcaixa,
                                        INPUT 1,            /** Sequencia **/
                                        INPUT aux_cdcritic,
                                        INPUT-OUTPUT aux_dscritic). 
                           
                         RETURN "NOK".
                     END.
               
                ASSIGN aux_vllimcrd = aux_vllimcrd + craptlc.vllimcrd.

                
                FIND FIRST craphcj
                    WHERE craphcj.cdcooper = par_cdcooper
                      AND craphcj.nrdconta = par_nrdconta NO-LOCK NO-ERROR.

                
                IF  aux_vllimcrd > craphcj.vllimglb THEN
                    DO:

                        ASSIGN aux_cdcritic = 0
                               aux_dscritic = "Limite proposto excede limite empresarial.".
                        
                        RUN gera_erro (INPUT par_cdcooper,
                                       INPUT par_cdagenci,
                                       INPUT par_nrdcaixa,
                                       INPUT 1,            /** Sequencia **/
                                       INPUT aux_cdcritic,
                                       INPUT-OUTPUT aux_dscritic).     


                        RETURN "NOK".
                    END.
            END.
        END.



    
    TRANS_ALTERACAO:
    DO TRANSACTION ON ERROR UNDO TRANS_ALTERACAO, LEAVE TRANS_ALTERACAO:

       DO aux_contador = 1 TO 10:
       
          FIND FIRST crawcrd WHERE crawcrd.cdcooper = par_cdcooper  AND
                                   crawcrd.nrdconta = par_nrdconta  AND
                                   crawcrd.nrctrcrd = par_nrctrcrd
                                   EXCLUSIVE-LOCK NO-ERROR NO-WAIT.
                                     
          IF  NOT AVAILABLE crawcrd  THEN
              DO:
                  IF  LOCKED crawcrd  THEN
                      DO:
                          aux_dscritic = "Registro de cartao de credito esta" 
                                         + " sendo alterado. Tente Novamente.".
                          PAUSE 1 NO-MESSAGE.
                          NEXT.
                      END.
                  ELSE
                      DO:
                          aux_dscritic = "Registro de cartao de credito nao" +
                                         " encontrado.".
                          
                          LEAVE.
                      END.
              END.

          LEAVE.
            
       END. /** Fim do DO ... TO **/

       IF  aux_dscritic <> ""  THEN
           DO:
               ASSIGN aux_cdcritic = 0.

               RUN gera_erro (INPUT par_cdcooper,
                              INPUT par_cdagenci,
                              INPUT par_nrdcaixa,
                              INPUT 1,            /** Sequencia **/
                              INPUT aux_cdcritic,
                              INPUT-OUTPUT aux_dscritic).
                                                      
               UNDO TRANS_ALTERACAO, RETURN "NOK".
           END.
    
       FIND craptlc WHERE craptlc.cdcooper = par_cdcooper       AND
                          craptlc.cdadmcrd = crawcrd.cdadmcrd   AND
                          craptlc.tpcartao = crawcrd.tpcartao   AND
                          craptlc.cdlimcrd = crawcrd.cdlimcrd   AND
                          craptlc.dddebito = 0                  
                          NO-LOCK NO-ERROR.

       IF   NOT AVAILABLE craptlc   THEN
            DO:
                ASSIGN aux_cdcritic = 532
                       aux_dscritic = "".

                RUN gera_erro (INPUT par_cdcooper,
                               INPUT par_cdagenci,
                               INPUT par_nrdcaixa,
                               INPUT 1,            /** Sequencia **/
                               INPUT aux_cdcritic,
                               INPUT-OUTPUT aux_dscritic).
                                                      
                UNDO TRANS_ALTERACAO, RETURN "NOK".
 
            END.

        /* Para o LOG */
        FIND FIRST crabtlc WHERE crabtlc.cdcooper = par_cdcooper      AND
                                 crabtlc.cdadmcrd = crawcrd.cdadmcrd  AND
                                 crabtlc.tpcartao = crawcrd.tpcartao  AND
                                 crabtlc.cdlimcrd = crawcrd.cdlimcrd  AND
                                 crabtlc.dddebito = 0
                                 NO-LOCK NO-ERROR.

        IF   NOT AVAILABLE crabtlc   THEN
             DO:
                 ASSIGN aux_cdcritic = 269
                        aux_dscritic = "".

                 RUN gera_erro (INPUT par_cdcooper,
                                INPUT par_cdagenci,
                                INPUT par_nrdcaixa,
                                INPUT 1,            /** Sequencia **/
                                INPUT aux_cdcritic,
                                INPUT-OUTPUT aux_dscritic).
                                                      
                 UNDO TRANS_ALTERACAO, RETURN "NOK".
             END.
        
        FIND FIRST craptlc WHERE craptlc.cdcooper = par_cdcooper      AND
                                 craptlc.cdadmcrd = crawcrd.cdadmcrd  AND
                                 craptlc.tpcartao = crawcrd.tpcartao  AND
                                 craptlc.dddebito = 0                 AND
                                 craptlc.vllimcrd = par_vllimcrd     
                                 NO-LOCK NO-ERROR.

        IF   NOT AVAILABLE craptlc   THEN
             DO:
                 ASSIGN aux_cdcritic = 269
                        aux_dscritic = "".

                 RUN gera_erro (INPUT par_cdcooper,
                                INPUT par_cdagenci,
                                INPUT par_nrdcaixa,
                                INPUT 1,            /** Sequencia **/
                                INPUT aux_cdcritic,
                                INPUT-OUTPUT aux_dscritic).
                                                      
                 UNDO TRANS_ALTERACAO, RETURN "NOK".
             END.

        IF   craptlc.insittab <> 0 THEN
             DO:
                 ASSIGN aux_cdcritic = 604
                        aux_dscritic = "".

                 RUN gera_erro (INPUT par_cdcooper,
                                INPUT par_cdagenci,
                                INPUT par_nrdcaixa,
                                INPUT 1,            /** Sequencia **/
                                INPUT aux_cdcritic,
                                INPUT-OUTPUT aux_dscritic).
                                                          
                 UNDO TRANS_ALTERACAO, RETURN "NOK".
             END.

        DO aux_contador = 1 TO 10:
    
           FIND  crapcrd WHERE crapcrd.cdcooper = par_cdcooper      AND
                               crapcrd.nrdconta = crawcrd.nrdconta  AND
                               crapcrd.nrctrcrd = crawcrd.nrctrcrd
                               EXCLUSIVE-LOCK NO-ERROR NO-WAIT.
           
           IF  NOT AVAILABLE crapcrd  THEN
               DO:
                  IF  LOCKED crapcrd  THEN
                      DO:
                         aux_dscritic = "Registro de cartao de credito " +
                                        "esta sendo alterado. Tente " +
                                        "Novamente.".
                         PAUSE 1 NO-MESSAGE.
                         NEXT.
                      END.
                  ELSE
                      DO:
                         aux_dscritic = "Registro de cartao de credito " +
                                        "nao encontrado.".
                         LEAVE.
                      END.
               END.
      
        END. /** Fim do DO ... TO **/

        IF  aux_dscritic <> ""  THEN
            DO:
                ASSIGN aux_cdcritic = 0.
           
                RUN gera_erro (INPUT par_cdcooper,
                               INPUT par_cdagenci,
                               INPUT par_nrdcaixa,
                               INPUT 1,            /** Sequencia **/
                               INPUT aux_cdcritic,
                               INPUT-OUTPUT aux_dscritic).
                                                       
                UNDO TRANS_ALTERACAO, RETURN "NOK".
            END.     
              
        RUN sistema/generico/procedures/b1wgen9999.p 
            PERSISTENT SET h-b1wgen9999.

        IF   VALID-HANDLE(h-b1wgen9999)   THEN
             DO:
                RUN atualiza_tabela_avalistas IN h-b1wgen9999
                                (INPUT par_cdcooper,
                                 INPUT par_cdoperad,
                                 INPUT par_idorigem,
                                 INPUT "CARTAO CRED.",
                                 INPUT par_nrdconta,
                                 INPUT par_dtmvtolt,
                                 INPUT 4, /* Tp.Ctrato - Cart.Cred */
                                 INPUT par_nrctrcrd,
                                 INPUT par_cdagenci,
                                 INPUT par_nrdcaixa,
                                 /* 1 avalista */
                                 INPUT par_nrctaav1,
                                 INPUT par_nmdaval1,
                                 INPUT par_nrcpfav1,
                                 INPUT par_tpdocav1,
                                 INPUT par_dsdocav1,
                                 INPUT par_nmdcjav1,
                                 INPUT par_cpfcjav1,
                                 INPUT par_tdccjav1,
                                 INPUT par_doccjav1,
                                 INPUT par_ende1av1,
                                 INPUT par_ende2av1,
                                 INPUT par_nrfonav1,
                                 INPUT par_emailav1,
                                 INPUT par_nmcidav1,
                                 INPUT par_cdufava1,
                                 INPUT par_nrcepav1,
                                 INPUT "", /* Nacao */
                                 INPUT 0,  /* Vl.Endiv*/
                                 INPUT 0,  /* Vl.Rend */
                                 INPUT par_nrender1, 
                                 INPUT par_complen1,
                                 INPUT par_nrcxaps1,
                                 INPUT 0,  /* inpessoa 1o avail */
                                 INPUT ?,  /* dtnascto 1o avail */
                                 /* 2 avalista */
                                 INPUT par_nrctaav2,
                                 INPUT par_nmdaval2,
                                 INPUT par_nrcpfav2,
                                 INPUT par_tpdocav2,
                                 INPUT par_dsdocav2,
                                 INPUT par_nmdcjav2,
                                 INPUT par_cpfcjav2,
                                 INPUT par_tdccjav2,
                                 INPUT par_doccjav2,
                                 INPUT par_ende1av2,
                                 INPUT par_ende2av2,
                                 INPUT par_nrfonav2,
                                 INPUT par_emailav2,
                                 INPUT par_nmcidav2,
                                 INPUT par_cdufava2,
                                 INPUT par_nrcepav2,
                                 INPUT "", /* Nacao */
                                 INPUT 0,  /* Vl.Endiv*/
                                 INPUT 0,  /* Vl.Rend */
                                 INPUT par_nrender2, 
                                 INPUT par_complen2,
                                 INPUT par_nrcxaps2,
                                 INPUT 0,  /* inpessoa 2o avail */
                                 INPUT ?,  /* dtnascto 2o avail */
                                 INPUT ""). /* Bens */                                 
                                 
                DELETE PROCEDURE h-b1wgen9999.                 
        
             END.
        ELSE 
             DO:
                ASSIGN aux_cdcritic = 0
                       aux_dscritic = "Handle invalido para BO b1wgen9999.".
                   
                RUN gera_erro (INPUT par_cdcooper,
                               INPUT par_cdagenci,
                               INPUT par_nrdcaixa,
                               INPUT 1,            /** Sequencia **/
                               INPUT aux_cdcritic,
                               INPUT-OUTPUT aux_dscritic).
                                     
                RETURN "NOK".                
             END.
        
        ASSIGN crapcrd.cdlimcrd = craptlc.cdlimcrd
               crapcrd.dtaltlim = par_dtmvtolt
               crawcrd.cdlimcrd = craptlc.cdlimcrd
               crawcrd.cdoperad = par_cdoperad
               crawcrd.flgimpnp = par_flgimpnp
               crawcrd.nrctaav1 = par_nrctaav1
               crawcrd.nrctaav2 = par_nrctaav2
               crawcrd.flgctitg = 0
               crawcrd.nrreplim = par_repsolic.

    END. /* DO TRANSACTION */      
            
    RUN proc_gerar_log (INPUT par_cdcooper,
                        INPUT par_cdoperad,
                        INPUT "",
                        INPUT aux_dsorigem,
                        INPUT aux_dstransa,
                        INPUT TRUE,
                        INPUT par_idseqttl,
                        INPUT par_nmdatela,
                        INPUT par_nrdconta,
                       OUTPUT aux_nrdrowid).
    
    RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                            INPUT "nrcrcard",
                            INPUT "",
                            INPUT crawcrd.nrcrcard).
                            
    RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                            INPUT "vllimite",
                            INPUT crabtlc.vllimcrd,
                            INPUT craptlc.vllimcrd). 
    
    RETURN "OK".            

END PROCEDURE.

/***************************************************************
        Carregar dados para alteração da data de vencimento
****************************************************************/
PROCEDURE carrega_dados_dtvencimento_cartao_2via:

    DEF  INPUT PARAM par_cdcooper AS INTE                         NO-UNDO.
    DEF  INPUT PARAM par_cdagenci AS INTE                         NO-UNDO.
    DEF  INPUT PARAM par_nrdcaixa AS INTE                         NO-UNDO.
    DEF  INPUT PARAM par_cdoperad AS CHAR                         NO-UNDO.
    DEF  INPUT PARAM par_nrdconta AS INTE                         NO-UNDO.
    DEF  INPUT PARAM par_dtmvtolt AS DATE                         NO-UNDO.
    DEF  INPUT PARAM par_idorigem AS INTE                         NO-UNDO. 
    DEF  INPUT PARAM par_idseqttl AS INTE                         NO-UNDO.
    DEF  INPUT PARAM par_nmdatela AS CHAR                         NO-UNDO.
    DEF  INPUT PARAM par_nrctrcrd AS INTE                         NO-UNDO.
    DEF  INPUT PARAM par_cdadmcrd AS INTE                         NO-UNDO.

    DEF OUTPUT PARAM TABLE FOR tt-erro.
    DEF OUTPUT PARAM TABLE FOR tt-dtvencimento_cartao.
    
    DEF VAR aux_dddebito AS CHAR NO-UNDO.
    
    EMPTY TEMP-TABLE tt-erro.
    EMPTY TEMP-TABLE tt-dtvencimento_cartao.
    
    FIND FIRST crawcrd WHERE crawcrd.cdcooper = par_cdcooper  AND
                             crawcrd.nrdconta = par_nrdconta  AND
                             crawcrd.nrctrcrd = par_nrctrcrd
                             NO-LOCK NO-ERROR NO-WAIT.
                             
    IF   NOT AVAILABLE crawcrd THEN
         DO:
             ASSIGN aux_cdcritic = 546
                    aux_dscritic = "". 
                                   
             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,     /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                           
             RETURN "NOK".
         END.
                                   
    IF   crawcrd.cdadmcrd <> 3  THEN /* Somente CECRED VISA */ 
         DO:
             ASSIGN aux_cdcritic = 0
                    aux_dscritic = "Administradora de cartoes BB " +
                                   "bloqueado.".
                                   
             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,     /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                           
             RETURN "NOK".                   
         END.

    IF   crawcrd.insitcrd <> 4 THEN
         DO:
             ASSIGN aux_cdcritic = 555
                    aux_dscritic = "". 
                                   
             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,     /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                           
             RETURN "NOK".
         END.
       
    FIND crapadc WHERE crapadc.cdcooper = par_cdcooper       AND
                       crapadc.cdadmcrd = crawcrd.cdadmcrd   NO-LOCK NO-ERROR.

    IF   NOT AVAILABLE crapadc   THEN     
         DO:
             ASSIGN aux_cdcritic = 605
                    aux_dscritic = "". 
                                   
             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,     /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                           
             RETURN "NOK".
         END.

    RUN busca_dddebito (INPUT par_cdcooper,
                        INPUT par_cdadmcrd,
                       OUTPUT aux_dddebito).

    CREATE tt-dtvencimento_cartao.
    ASSIGN tt-dtvencimento_cartao.diasdadm = aux_dddebito
           tt-dtvencimento_cartao.dddebito = crawcrd.dddebito.
           
    RETURN "OK".           

END PROCEDURE.



/***************************************************************
        Carregar dados para alteração da data de vencimento
****************************************************************/
PROCEDURE carrega_dados_dtvencimento_cartao:

    DEF  INPUT PARAM par_cdcooper AS INTE                         NO-UNDO.
    DEF  INPUT PARAM par_cdagenci AS INTE                         NO-UNDO.
    DEF  INPUT PARAM par_nrdcaixa AS INTE                         NO-UNDO.
    DEF  INPUT PARAM par_cdoperad AS CHAR                         NO-UNDO.
    DEF  INPUT PARAM par_nrdconta AS INTE                         NO-UNDO.
    DEF  INPUT PARAM par_dtmvtolt AS DATE                         NO-UNDO.
    DEF  INPUT PARAM par_idorigem AS INTE                         NO-UNDO. 
    DEF  INPUT PARAM par_idseqttl AS INTE                         NO-UNDO.
    DEF  INPUT PARAM par_nmdatela AS CHAR                         NO-UNDO.
    DEF  INPUT PARAM par_nrctrcrd AS INTE                         NO-UNDO.
    DEF  INPUT PARAM par_cdadmcrd AS INTE                         NO-UNDO.

    DEF OUTPUT PARAM TABLE FOR tt-erro.
    DEF OUTPUT PARAM TABLE FOR tt-dtvencimento_cartao.
    
    DEF VAR aux_dddebito AS CHAR NO-UNDO.
    
    EMPTY TEMP-TABLE tt-erro.
    EMPTY TEMP-TABLE tt-dtvencimento_cartao.
    
    FIND FIRST crawcrd WHERE crawcrd.cdcooper = par_cdcooper  AND
                             crawcrd.nrdconta = par_nrdconta  AND
                             crawcrd.nrctrcrd = par_nrctrcrd
                             NO-LOCK NO-ERROR NO-WAIT.
                             
    IF   NOT AVAILABLE crawcrd THEN
         DO:
             ASSIGN aux_cdcritic = 546
                    aux_dscritic = "". 
                                   
             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,     /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                           
             RETURN "NOK".
         END.

    IF   crawcrd.cdadmcrd = 3  THEN /* CECRED VISA */ 
         DO:
             ASSIGN aux_cdcritic = 0
                    aux_dscritic = "Administradora de cartoes CECRED VISA " +
                                   "bloqueada.".
                                   
             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,     /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                           
             RETURN "NOK".                   
                 
         END.


    /* Verifica se o cartao eh do BB */
    RUN verifica_cartao_bb (INPUT crawcrd.cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa, 
                            INPUT crawcrd.cdadmcrd, 
                           OUTPUT TABLE tt-erro). 

    IF   RETURN-VALUE = "NOK"   THEN
         RETURN "NOK".
         
    IF   crawcrd.insitcrd <> 4 THEN
         DO:
             ASSIGN aux_cdcritic = 555
                    aux_dscritic = "". 
                                   
             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,     /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                           
             RETURN "NOK".
         END.
       
    FIND crapadc WHERE crapadc.cdcooper = par_cdcooper       AND
                       crapadc.cdadmcrd = crawcrd.cdadmcrd   NO-LOCK NO-ERROR.

    IF   NOT AVAILABLE crapadc   THEN     
         DO:
             ASSIGN aux_cdcritic = 605
                    aux_dscritic = "". 
                                   
             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,     /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                           
             RETURN "NOK".
         END.

    IF   crawcrd.dtentreg <> ? AND par_dtmvtolt - crawcrd.dtentreg <= 30  THEN
         DO:
             ASSIGN aux_cdcritic = 0
                    aux_dscritic = "Alteracao de vencimento somente a " +
                                   "partir do dia " +
                                   STRING(crawcrd.dtentreg + 30,"99/99/9999") +
                                   ".". 
                                   
             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,     /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                           
             RETURN "NOK".
         END.

    FIND crapcrd WHERE crapcrd.cdcooper = par_cdcooper AND
                       crapcrd.nrdconta = par_nrdconta AND
                       crapcrd.nrctrcrd = par_nrctrcrd NO-LOCK NO-ERROR.
                       
    IF   AVAILABLE crapcrd                       AND
         crapcrd.dtaltddb <> ?                   AND 
         par_dtmvtolt - crapcrd.dtaltddb <= 30   THEN
         DO:
             ASSIGN aux_cdcritic = 0
                    aux_dscritic = "Alteracao de vencimento somente a " + 
                                   "partir do dia " +
                                   STRING(crapcrd.dtaltddb + 30,"99/99/9999") +
                                   "." .
            
             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,     /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                           
             RETURN "NOK".
         END.
    
    RUN busca_dddebito (INPUT par_cdcooper,
                        INPUT par_cdadmcrd,
                       OUTPUT aux_dddebito).

    CREATE tt-dtvencimento_cartao.
    ASSIGN tt-dtvencimento_cartao.diasdadm = aux_dddebito
           tt-dtvencimento_cartao.dddebito = crawcrd.dddebito.
           
    RETURN "OK".           

END PROCEDURE.

/*************************************************************
        Efetuar a alteração da data de vencimento do cartão
*************************************************************/
PROCEDURE altera_dtvencimento_cartao:

    DEF  INPUT PARAM par_cdcooper AS INTE                         NO-UNDO.
    DEF  INPUT PARAM par_cdagenci AS INTE                         NO-UNDO.
    DEF  INPUT PARAM par_nrdcaixa AS INTE                         NO-UNDO.
    DEF  INPUT PARAM par_cdoperad AS CHAR                         NO-UNDO.
    DEF  INPUT PARAM par_nrdconta AS INTE                         NO-UNDO.
    DEF  INPUT PARAM par_dtmvtolt AS DATE                         NO-UNDO.
    DEF  INPUT PARAM par_idorigem AS INTE                         NO-UNDO. 
    DEF  INPUT PARAM par_idseqttl AS INTE                         NO-UNDO.
    DEF  INPUT PARAM par_nmdatela AS CHAR                         NO-UNDO.
    DEF  INPUT PARAM par_nrctrcrd AS INTE                         NO-UNDO.
    DEF  INPUT PARAM par_dddebito AS INTE                         NO-UNDO.
    DEF  INPUT PARAM par_cpfrepre AS DEC                          NO-UNDO.
    DEF  INPUT PARAM par_repsolic AS CHAR                         NO-UNDO.

    DEF OUTPUT PARAM TABLE FOR tt-erro.

    DEF VAR aux_contador AS INTE   NO-UNDO.
    DEF VAR aux_dddebito AS INTE   NO-UNDO.
    DEF VAR aux_dsoperac AS CHAR   NO-UNDO.
    DEF VAR h-b1wgen0110 AS HANDLE NO-UNDO.

    EMPTY TEMP-TABLE tt-erro.
    
    ASSIGN aux_dsorigem = TRIM(ENTRY(par_idorigem,des_dorigens,","))
           aux_dstransa = "Alterar data do debito do Cartao de Credito.".
               
    
    TRANS_ALTDTV:
    DO TRANSACTION ON ERROR UNDO TRANS_ALTDTV, LEAVE TRANS_ALTDTV:

       DO aux_contador = 1 TO 10:
       
          FIND FIRST crawcrd WHERE crawcrd.cdcooper = par_cdcooper  AND
                                   crawcrd.nrdconta = par_nrdconta  AND
                                   crawcrd.nrctrcrd = par_nrctrcrd
                                   EXCLUSIVE-LOCK NO-ERROR NO-WAIT.
                                     
          IF NOT AVAILABLE crawcrd  THEN
             DO:
                IF LOCKED crawcrd  THEN
                   DO:
                       ASSIGN aux_dscritic = "Registro de cartao de credito " +
                                             "esta sendo alterado. Tente "    +
                                             "Novamente.".
                       PAUSE 1 NO-MESSAGE.
                       NEXT.

                   END.
                ELSE
                   DO:
                       ASSIGN aux_dscritic = "Registro de cartao de credito " +
                                             "nao encontrado.".
                       
                       LEAVE.

                   END.

             END.

          ASSIGN aux_dscritic = "".

          LEAVE.
            
       END. /** Fim do DO ... TO **/
       

       IF aux_dscritic <> ""  THEN
          DO:
              ASSIGN aux_cdcritic = 0.

              RUN gera_erro (INPUT par_cdcooper,
                             INPUT par_cdagenci,
                             INPUT par_nrdcaixa,
                             INPUT 1,            /** Sequencia **/
                             INPUT aux_cdcritic,
                             INPUT-OUTPUT aux_dscritic).
                                                     
              UNDO TRANS_ALTDTV, RETURN "NOK".

          END.

       DO aux_contador = 1 TO 10:
    
          FIND crapcrd WHERE crapcrd.cdcooper = par_cdcooper      AND
                             crapcrd.nrdconta = crawcrd.nrdconta  AND
                             crapcrd.nrctrcrd = crawcrd.nrctrcrd
                             EXCLUSIVE-LOCK NO-ERROR NO-WAIT.
          
          IF NOT AVAILABLE crapcrd  THEN
             DO:
                IF LOCKED crapcrd  THEN
                   DO:
                      ASSIGN aux_dscritic = "Registro de cartao de credito " +
                                            "esta sendo alterado. Tente "    +
                                            "Novamente.".
                      PAUSE 1 NO-MESSAGE.
                      NEXT.

                   END.
                ELSE
                   DO:
                      ASSIGN aux_dscritic = "Registro de cartao de credito " +
                                            "nao encontrado.".
                      LEAVE.

                   END.

             END.

       END. /** Fim do DO ... TO **/

       FOR FIRST crapass FIELDS(inpessoa nrdconta nrcpfcgc)
                        WHERE crapass.cdcooper = par_cdcooper AND
                          crapass.nrdconta = par_nrdconta 
                          NO-LOCK: 
           END.

       IF NOT VALID-HANDLE(h-b1wgen0110) THEN
          RUN sistema/generico/procedures/b1wgen0110.p
              PERSISTENT SET h-b1wgen0110.
   
       /*Monta a mensagem da operacao para envio no e-mail*/
       ASSIGN aux_dsoperac =  "Tentativa de alterar a data de vencimento de " +
                              "cartoes de credito na conta "                  +
                              STRING(crapass.nrdconta,"zzzz,zzz,9")           +
                              " - CPF/CNPJ "                                  +
                             (IF crapass.inpessoa = 1 THEN
                                 STRING((STRING(crapass.nrcpfcgc,
                                         "99999999999")),"xxx.xxx.xxx-xx")
                              ELSE
                                 STRING((STRING(crapass.nrcpfcgc,
                                         "99999999999999")),
                                         "xx.xxx.xxx/xxxx-xx")).

       /*Verifica se o associado esta no cadastro restritivo. Se estiver,
        sera enviado um e-mail informando a situacao*/
       RUN alerta_fraude IN h-b1wgen0110(INPUT par_cdcooper,
                                         INPUT par_cdagenci,
                                         INPUT par_nrdcaixa,
                                         INPUT par_cdoperad,
                                         INPUT par_nmdatela,
                                         INPUT par_dtmvtolt,
                                         INPUT par_idorigem,
                                         INPUT crapass.nrcpfcgc, 
                                         INPUT crapass.nrdconta,
                                         INPUT par_idseqttl,
                                         INPUT TRUE, /*bloqueia operacao*/
                                         INPUT 14, /*cdoperac*/
                                         INPUT aux_dsoperac,
                                         OUTPUT TABLE tt-erro).
       
       IF VALID-HANDLE(h-b1wgen0110) THEN
          DELETE PROCEDURE(h-b1wgen0110).
   
       IF RETURN-VALUE <> "OK" THEN
          DO:
             IF NOT TEMP-TABLE tt-erro:HAS-RECORDS THEN
                DO:
                   ASSIGN aux_dscritic = "Nao foi possivel verificar o " + 
                                         "cadastro restritivo.".
                   
                   RUN gera_erro (INPUT par_cdcooper,
                                  INPUT par_cdagenci,
                                  INPUT par_nrdcaixa,
                                  INPUT 1, /*sequencia*/
                                  INPUT aux_cdcritic,
                                  INPUT-OUTPUT aux_dscritic).
   
                END.
   
             UNDO TRANS_ALTDTV, RETURN "NOK".
   
          END.

       IF crapass.inpessoa = 2 THEN
          DO:
             IF par_repsolic = "" THEN
                DO:
                    ASSIGN aux_cdcritic = 0
                           aux_dscritic = "Incluir um Representante".
                
                    RUN gera_erro (INPUT par_cdcooper,
                                   INPUT par_cdagenci,
                                   INPUT par_nrdcaixa,
                                   INPUT 1,            /** Sequencia **/
                                   INPUT aux_cdcritic,
                                   INPUT-OUTPUT aux_dscritic).
                                                      
                    UNDO TRANS_ALTDTV, RETURN "NOK".

                END.

             FOR EACH craphcj WHERE craphcj.cdcooper = par_cdcooper AND
                                    craphcj.nrdconta = par_nrdconta 
                                    NO-LOCK:

                 FOR FIRST crapass FIELDS(inpessoa)
                     WHERE crapass.cdcooper = craphcj.cdcooper   AND 
                           (crapass.nrcpfcgc = craphcj.nrcpfpri  OR
                            crapass.nrcpfcgc = craphcj.nrcpfseg  OR
                            crapass.nrcpfcgc = craphcj.nrcpfter) AND
                           crapass.nmprimtl = par_repsolic       
                           NO-LOCK: 
                             END.
                 
                 IF NOT AVAIL crapass THEN
                    DO:
                        FIND FIRST crapncp
                            WHERE (crapncp.nrdoccpf = craphcj.nrcpfpri  OR
                                   crapncp.nrdoccpf = craphcj.nrcpfseg  OR
                                   crapncp.nrdoccpf = craphcj.nrcpfter) AND
                                  crapncp.nmpessoa  = par_repsolic 
                                  NO-LOCK NO-ERROR.
                       
                        IF NOT AVAIL crapncp THEN
                           DO:
                               ASSIGN aux_cdcritic = 0
                                      aux_dscritic = "Representante Invalido".
                 
                               RUN gera_erro (INPUT par_cdcooper,
                                              INPUT par_cdagenci,
                                              INPUT par_nrdcaixa,
                                              INPUT 1,            /** Sequencia **/
                                              INPUT aux_cdcritic,
                                              INPUT-OUTPUT aux_dscritic).
                                                                
                               UNDO TRANS_ALTDTV, RETURN "NOK".
                        
                           END.

                    END.

             END.

          END.

       IF aux_dscritic <> ""  THEN
          DO:
              ASSIGN aux_cdcritic = 0.

              RUN gera_erro (INPUT par_cdcooper,
                             INPUT par_cdagenci,
                             INPUT par_nrdcaixa,
                             INPUT 1,            /** Sequencia **/
                             INPUT aux_cdcritic,
                             INPUT-OUTPUT aux_dscritic).
                                                     
              UNDO TRANS_ALTDTV, RETURN "NOK".

          END.
    
        IF crawcrd.dddebito <> par_dddebito THEN
           DO:
              FIND craptlc WHERE craptlc.cdcooper = par_cdcooper       AND
                                 craptlc.cdadmcrd = crawcrd.cdadmcrd   AND
                                 craptlc.tpcartao = 0                  AND
                                 craptlc.cdlimcrd = 0                  AND
                                 craptlc.dddebito = crawcrd.dddebito        
                                 NO-LOCK NO-ERROR.

              IF (NOT AVAILABLE craptlc) OR (craptlc.insittab <> 0) THEN
                  DO:
                     ASSIGN aux_cdcritic = 533
                            aux_dscritic = "". 
                                    
                     RUN gera_erro (INPUT par_cdcooper,
                                    INPUT par_cdagenci,
                                    INPUT par_nrdcaixa,
                                    INPUT 1,     /** Sequencia **/
                                    INPUT aux_cdcritic,
                                    INPUT-OUTPUT aux_dscritic).
                                        
                    UNDO TRANS_ALTDTV, RETURN "NOK".

                  END.

           END.           
             
        ASSIGN aux_dddebito     = crapcrd.dddebito
               crawcrd.dddebant = par_dddebito
               crapcrd.dtaltddb = par_dtmvtolt 
               crawcrd.cdoperad = par_cdoperad
               crawcrd.nrrepven = par_cpfrepre
               crawcrd.dtsol2vi = par_dtmvtolt
               crawcrd.cdmotivo = 7
               crawcrd.insitcrd = 7.
        
    END. /* Fim da Transacao */    
    
    RUN proc_gerar_log (INPUT par_cdcooper,
                        INPUT par_cdoperad,
                        INPUT "",
                        INPUT aux_dsorigem,
                        INPUT aux_dstransa,
                        INPUT TRUE,
                        INPUT par_idseqttl,
                        INPUT par_nmdatela,
                        INPUT par_nrdconta,
                       OUTPUT aux_nrdrowid).
    
    RUN proc_gerar_log_item (INPUT aux_nrdrowid,
                             INPUT "nrctrcrd",
                             INPUT "",
                             INPUT crawcrd.nrctrcrd).
                             
    RUN proc_gerar_log_item (INPUT aux_nrdrowid,
                             INPUT "dddebito",
                             INPUT STRING(aux_dddebito),
                             INPUT STRING(par_dddebito)).
    
    RETURN "OK".    

END PROCEDURE.

/*******************
    OPCAO 2VIA
*******************/
/***********************************************************************
      Verificar acesso para opcao de solicitacao da segunda via ***********************************************************************/
PROCEDURE verifica_acesso_2via:

    DEF INPUT PARAM par_cdcooper AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_cdagenci AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_nrdcaixa AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_cdoperad AS CHAR                         NO-UNDO.
    DEF INPUT PARAM par_nrdconta AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_nrctrcrd AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_dtmvtolt AS DATE                         NO-UNDO.
    
    DEF OUTPUT PARAM TABLE FOR tt-erro.

    DEF VAR aux_dsmensag AS CHAR                                 NO-UNDO.
    
    EMPTY TEMP-TABLE tt-erro.

    FOR FIRST crapass FIELDS(cdsitdct)
                     WHERE crapass.cdcooper = par_cdcooper AND
                       crapass.nrdconta = par_nrdconta NO-LOCK:
    END.
                   
    IF  NOT AVAILABLE crapass  THEN
        DO:
            ASSIGN aux_cdcritic = 9
                   aux_dscritic = "".

            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                                      
            RETURN "NOK".
        END.
                                         
    FIND crawcrd WHERE crawcrd.cdcooper = par_cdcooper AND
                       crawcrd.nrdconta = par_nrdconta AND
                       crawcrd.nrctrcrd = par_nrctrcrd NO-LOCK NO-ERROR.
                       
    IF  NOT AVAILABLE crawcrd  THEN
        DO:
            ASSIGN aux_cdcritic = 546
                   aux_dscritic = "".

            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                                      
            RETURN "NOK".
        END.

     IF NOT DYNAMIC-FUNCTION("solicita_revisao_cadastral_cartoes",
                          INPUT par_cdcooper,
                          INPUT par_nrdcaixa, 
                          INPUT par_cdagenci,
                          INPUT par_cdoperad,
                          INPUT par_dtmvtolt, 
                          INPUT 7,
                          INPUT crawcrd.cdadmcrd,
                          INPUT par_nrdconta,
                          OUTPUT aux_dsmensag) THEN
       DO:
           ASSIGN aux_cdcritic = 0
                   aux_dscritic = aux_dsmensag.

            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                                      
            RETURN "NOK".

       END.


    RUN verifica_cartao_bb (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT crawcrd.cdadmcrd,
                           OUTPUT TABLE tt-erro).

    IF  RETURN-VALUE = "NOK"  THEN
        RETURN "NOK".

    IF  crapass.cdsitdct <> 1 AND crapass.cdsitdct <> 6  THEN
        DO:
            ASSIGN aux_cdcritic = 0
                   aux_dscritic = (IF  crapass.cdsitdct = 5  THEN
                                       "Conta nao aprovada"
                                   ELSE
                                       "Conta encerrada") +
                                   ". Solicitacao de 2.Via nao disponivel.".
        
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                                      
            RETURN "NOK".
        END.
        
    /* Alterado para permitir solicitacao de segunda via de senha para cartao bancoob encerrados ( Renato - Supero ) */
    IF  crawcrd.insitcrd <> 4 AND
        crawcrd.insitcrd <> 7 AND
        f_verifica_adm(crawcrd.cdadmcrd) = 2 AND
        crawcrd.insitcrd <> 6 THEN
        DO:
            ASSIGN aux_cdcritic = 538
                   aux_dscritic = "".

            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                                      
            RETURN "NOK".
        END.

    RETURN "OK".
       
END PROCEDURE.

/**********************************************************************
        Carregar os motivos da solicitação da segunda via
***********************************************************************/
PROCEDURE carrega_dados_solicitacao2via_cartao:

    DEF  INPUT PARAM par_cdcooper AS INTE                         NO-UNDO.
    DEF  INPUT PARAM par_cdagenci AS INTE                         NO-UNDO.
    DEF  INPUT PARAM par_nrdcaixa AS INTE                         NO-UNDO.
    DEF  INPUT PARAM par_cdoperad AS CHAR                         NO-UNDO.
    DEF  INPUT PARAM par_nrdconta AS INTE                         NO-UNDO.
    DEF  INPUT PARAM par_nrctrcrd AS INTE                         NO-UNDO.
    DEF  INPUT PARAM par_dtmvtolt AS DATE                         NO-UNDO.
    
    DEF OUTPUT PARAM TABLE FOR tt-erro.
    DEF OUTPUT PARAM TABLE FOR tt-motivos_2via.

    EMPTY TEMP-TABLE tt-motivos_2via.            
    EMPTY TEMP-TABLE tt-erro.
    
    FIND FIRST crawcrd WHERE crawcrd.cdcooper = par_cdcooper  AND
                             crawcrd.nrdconta = par_nrdconta  AND
                             crawcrd.nrctrcrd = par_nrctrcrd
                             NO-LOCK NO-ERROR NO-WAIT.
                                      
    IF  NOT AVAILABLE crawcrd  THEN
        DO:
           ASSIGN aux_cdcritic = 546
                  aux_dscritic = "".
    
           RUN gera_erro (INPUT par_cdcooper,
                          INPUT par_cdagenci,
                          INPUT par_nrdcaixa,
                          INPUT 1,            /** Sequencia **/
                          INPUT aux_cdcritic,
                          INPUT-OUTPUT aux_dscritic).
                                                           
           RETURN "NOK".
                
        END.
                                    
    FIND crapope WHERE crapope.cdcooper = par_cdcooper AND
                       crapope.cdoperad = par_cdoperad NO-LOCK NO-ERROR.

    IF  NOT AVAIL(crapope) THEN
        DO:
            ASSIGN aux_cdcritic = 0
                   aux_dscritic = "Operador inexistente".
    
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,     /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
    
            RETURN "NOK".
        END.                
    
    IF   crawcrd.cdadmcrd = 3 AND 
         crapope.cddepart <> 2 THEN /* CECRED VISA */ 
         DO:
             ASSIGN aux_cdcritic = 0
                    aux_dscritic = "Administradora de cartoes CECRED VISA " +
                                   "bloqueada.".

             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,     /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                           
             RETURN "NOK".
         END.

   IF   crawcrd.dtsol2vi <> ? AND crawcrd.insitcrd = 4   THEN
        DO:
           ASSIGN aux_cdcritic = 802
                  aux_dscritic = "".
    
           RUN gera_erro (INPUT par_cdcooper,
                          INPUT par_cdagenci,
                          INPUT par_nrdcaixa,
                          INPUT 1,            /** Sequencia **/
                          INPUT aux_cdcritic,
                          INPUT-OUTPUT aux_dscritic).
                                                           
           RETURN "NOK".         
        END.
   ELSE
   IF   crawcrd.insitcrd = 5   THEN
        DO:
           ASSIGN aux_cdcritic = 625
                  aux_dscritic = "".
    
           RUN gera_erro (INPUT par_cdcooper,
                          INPUT par_cdagenci,
                          INPUT par_nrdcaixa,
                          INPUT 1,            /** Sequencia **/
                          INPUT aux_cdcritic,
                          INPUT-OUTPUT aux_dscritic).
                                                           
           RETURN "NOK".
        END.
                     
    CREATE tt-motivos_2via.
    ASSIGN tt-motivos_2via.dsmotivo = "Defeito no cartao"
           tt-motivos_2via.cdmotivo = 1.

    CREATE tt-motivos_2via.
    ASSIGN tt-motivos_2via.dsmotivo = "Mudanca de nome"
           tt-motivos_2via.cdmotivo = 5. 
           
    CREATE tt-motivos_2via.
    ASSIGN tt-motivos_2via.dsmotivo = "Data de Vencimento"
           tt-motivos_2via.cdmotivo = 7. 
       
           
    RETURN "OK".
    
END PROCEDURE.

/************************************************************************
        Efetuar a solicitacao da segunda via de um determinado cartao
************************************************************************/
PROCEDURE efetua_solicitacao2via_cartao:

    DEF  INPUT  PARAM  par_cdcooper  AS  INTE  NO-UNDO.                   
    DEF  INPUT  PARAM  par_cdagenci  AS  INTE  NO-UNDO.                
    DEF  INPUT  PARAM  par_nrdcaixa  AS  INTE  NO-UNDO.                     
    DEF  INPUT  PARAM  par_cdoperad  AS  CHAR  NO-UNDO.                
    DEF  INPUT  PARAM  par_nrdconta  AS  INTE  NO-UNDO.
    DEF  INPUT  PARAM  par_nrctrcrd  AS  INTE  NO-UNDO.
    DEF  INPUT  PARAM  par_dtmvtolt  AS  DATE  NO-UNDO.
    DEF  INPUT  PARAM  par_idorigem  AS  INTE  NO-UNDO. 
    DEF  INPUT  PARAM  par_idseqttl  AS  INTE  NO-UNDO.
    DEF  INPUT  PARAM  par_nmdatela  AS  CHAR  NO-UNDO.
    DEF  INPUT  PARAM  par_cdadmcrd  AS  INTE  NO-UNDO.
    DEF  INPUT  PARAM  par_cdmotivo  AS  INTE  NO-UNDO.
    DEF  INPUT  PARAM  par_nmtitcrd  AS  CHAR  NO-UNDO.
    DEF  INPUT  PARAM  par_cpfrepre  AS  DECI FORMAT "zzzzzzzzzz9"     NO-UNDO.
    DEF  INPUT  PARAM  par_repsolic  AS  CHAR  NO-UNDO.

    DEF OUTPUT PARAM TABLE FOR tt-erro.

    DEF  VAR  aux_contador AS INTE   NO-UNDO.
    DEF  VAR  aux_tpendass AS INTE   NO-UNDO.
    DEF  VAR  old_nmtitcrd AS CHAR   NO-UNDO.
    DEF  VAR  aux_dsoperac AS CHAR   NO-UNDO.
    DEF  VAR  h-b1wgen0110 AS HANDLE NO-UNDO.

    DEF BUFFER b-crapass FOR crapass.

    EMPTY TEMP-TABLE tt-erro.

    Valida_Dados: DO:
    
       FOR FIRST crapass FIELDS(nrdconta inpessoa nrcpfcgc)
                        WHERE crapass.cdcooper = par_cdcooper AND
                          crapass.nrdconta = par_nrdconta 
                          NO-LOCK:
       END.

       IF NOT VALID-HANDLE(h-b1wgen0110) THEN
          RUN sistema/generico/procedures/b1wgen0110.p
              PERSISTENT SET h-b1wgen0110.

       /*Monta a mensagem da operacao para envio no e-mail*/
       ASSIGN aux_dsoperac = "Tentativa de solicitar 2.a. via de cartoes " + 
                             "na conta "                                   +
                             STRING(crapass.nrdconta,"zzzz,zzz,9")         +
                             " - CPF/CNPJ "                                +
                            (IF crapass.inpessoa = 1 THEN
                                STRING((STRING(crapass.nrcpfcgc,
                                        "99999999999")),"xxx.xxx.xxx-xx")
                             ELSE
                                STRING((STRING(crapass.nrcpfcgc,
                                        "99999999999999")),
                                        "xx.xxx.xxx/xxxx-xx")).
   
       /*Verifica se o associado esta no cadastro restritivo. Se estiver,
         sera enviado um e-mail informando a situacao*/
       RUN alerta_fraude IN h-b1wgen0110(INPUT par_cdcooper,
                                         INPUT par_cdagenci,
                                         INPUT par_nrdcaixa,
                                         INPUT par_cdoperad,
                                         INPUT par_nmdatela,
                                         INPUT par_dtmvtolt,
                                         INPUT par_idorigem,
                                         INPUT crapass.nrcpfcgc, 
                                         INPUT crapass.nrdconta,
                                         INPUT par_idseqttl,
                                         INPUT TRUE, /*bloqueia operacao*/
                                         INPUT 19, /*cdoperac*/
                                         INPUT aux_dsoperac,
                                         OUTPUT TABLE tt-erro).
       
       IF VALID-HANDLE(h-b1wgen0110) THEN
          DELETE PROCEDURE(h-b1wgen0110).
   
       IF RETURN-VALUE <> "OK" THEN
          DO:
             FIND FIRST tt-erro NO-LOCK NO-ERROR.

             IF NOT AVAIL tt-erro THEN
                DO:
                   ASSIGN aux_dscritic = "Nao foi possivel verificar o " + 
                                         "cadastro restritivo.".
    
                   RUN gera_erro (INPUT par_cdcooper,
                                  INPUT par_cdagenci,
                                  INPUT par_nrdcaixa,
                                  INPUT 1,            /** Sequencia **/
                                  INPUT aux_cdcritic,
                                  INPUT-OUTPUT aux_dscritic).
                END.

             RETURN "NOK".
   
          END.

       IF crapass.inpessoa = 2 THEN
          DO:
             IF par_repsolic = "" THEN
                DO:
                    ASSIGN aux_cdcritic = 0
                           aux_dscritic = "Incluir um Representante".
                   
                    LEAVE Valida_Dados.      
                END.
          
             FOR EACH craphcj WHERE craphcj.cdcooper = par_cdcooper AND
                                    craphcj.nrdconta = par_nrdconta 
                                    NO-LOCK:
    
                 FIND FIRST b-crapass
                      WHERE b-crapass.cdcooper = craphcj.cdcooper   AND 
                           (b-crapass.nrcpfcgc = craphcj.nrcpfpri   OR
                            b-crapass.nrcpfcgc = craphcj.nrcpfseg   OR
                            b-crapass.nrcpfcgc = craphcj.nrcpfter)  AND
                            b-crapass.nmprimtl = par_repsolic       
                            NO-LOCK NO-ERROR.
                
                 IF NOT AVAIL b-crapass THEN
                    DO:
                       FIND FIRST crapncp
                           WHERE (crapncp.nrdoccpf = craphcj.nrcpfpri  OR
                                  crapncp.nrdoccpf = craphcj.nrcpfseg  OR
                                  crapncp.nrdoccpf = craphcj.nrcpfter) AND
                                 crapncp.nmpessoa  = par_repsolic 
                                 NO-LOCK NO-ERROR.
                   
                       IF NOT AVAIL crapncp THEN
                          DO:
                              ASSIGN aux_cdcritic = 0
                                     aux_dscritic = "Representante Invalido".
                   
                              LEAVE Valida_Dados.              
                          END.

                    END.

             END.

          END.

       RUN ValidaNome (INPUT  par_nmtitcrd,
                      OUTPUT aux_dscritic).

       IF  RETURN-VALUE = "NOK" THEN
           LEAVE Valida_Dados.
           
       ASSIGN aux_tpendass = IF crapass.inpessoa = 1 THEN 10 ELSE 9.

       FIND crapenc WHERE crapenc.cdcooper = par_cdcooper AND
                          crapenc.nrdconta = par_nrdconta AND
                          crapenc.idseqttl = 1            AND
                          crapenc.tpendass = aux_tpendass 
                          NO-LOCK NO-ERROR.
       
       IF NOT AVAILABLE crapenc  THEN
          DO:
              ASSIGN aux_cdcritic = 0
                     aux_dscritic = "Cooperado sem endereco cadastrado.".
              
              LEAVE Valida_Dados.
          END.

       IF NOT CAN-FIND(FIRST crapdne 
                        WHERE crapdne.nrceplog = crapenc.nrcepend)  OR 
          NOT CAN-FIND(FIRST crapdne
                        WHERE crapdne.nrceplog = crapenc.nrcepend  AND 
                             (TRIM(crapenc.dsendere) MATCHES 
                              ("*" + TRIM(crapdne.nmextlog) + "*") OR
                              TRIM(crapenc.dsendere) MATCHES
                              ("*" + TRIM(crapdne.nmreslog) + "*"))) THEN
          DO:
              ASSIGN aux_cdcritic = 0
                     aux_dscritic = "CEP/Endereco nao conferem, efetuar " +
                                    "revisao cadastral.".

              LEAVE Valida_Dados.
          END.

       /** Atribui descricao da origem e da transacao **/
       ASSIGN aux_dsorigem = TRIM(ENTRY(par_idorigem,des_dorigens,","))
              aux_dstransa = "Solicitar 2via de cartao de credito.".
               
       IF par_cdmotivo = 5  THEN /* nome */
          DO:
             IF TRIM(par_nmtitcrd) = ""  THEN
                DO:
                    ASSIGN aux_cdcritic = 0
                           aux_dscritic = "Informe o nome do titular.".
               
                    LEAVE Valida_Dados.                 
                END.
             
             FIND crapadc WHERE crapadc.cdcooper = par_cdcooper AND
                                crapadc.cdadmcrd = par_cdadmcrd 
                                NO-LOCK NO-ERROR.         

             IF LENGTH(TRIM(par_nmtitcrd)) > crapadc.qtcarnom  THEN
                DO:
                   ASSIGN aux_cdcritic = 0
                          aux_dscritic = "Nome do Titular deve conter no " +
                                         "maximo " + STRING(crapadc.qtcarnom) +
                                         " caracteres".
                  
                   LEAVE Valida_Dados.                      

                END.

          END.         

    END. /* Fim validacao*/

    IF aux_cdcritic <> 0   OR
       aux_dscritic <> ""  THEN
       DO:           
           RUN gera_erro (INPUT par_cdcooper,
                          INPUT par_cdagenci,
                          INPUT par_nrdcaixa,
                          INPUT 1,            /** Sequencia **/
                          INPUT aux_cdcritic,
                          INPUT-OUTPUT aux_dscritic). 
        
           RETURN "NOK".
       END.

    TRANS_s2via:
    DO TRANSACTION ON ERROR UNDO TRANS_s2via, LEAVE TRANS_s2via:
        
       DO aux_contador = 1 TO 10:
    
          FIND FIRST crawcrd WHERE crawcrd.cdcooper = par_cdcooper  AND
                                   crawcrd.nrdconta = par_nrdconta  AND
                                   crawcrd.nrctrcrd = par_nrctrcrd
                                   EXCLUSIVE-LOCK NO-ERROR NO-WAIT.
                                     
          IF NOT AVAILABLE crawcrd  THEN
             DO:
                IF LOCKED crawcrd  THEN
                   DO:
                       ASSIGN aux_dscritic = "Registro de cartao de credito " +
                                             "esta sendo alterado. Tente "    +
                                             "Novamente.".
                       PAUSE 1 NO-MESSAGE.
                       NEXT.

                   END.
                ELSE
                   DO:
                       ASSIGN aux_dscritic = "Registro de cartao de credito " +
                                             "nao encontrado.".                           
                       LEAVE.
                   END.
             END.

          ASSIGN aux_dscritic = "".

          LEAVE.
           
       END. /** Fim do DO ... TO **/
       
       IF  aux_dscritic <> ""  THEN
           DO:
               ASSIGN aux_cdcritic = 0.
    
               RUN gera_erro (INPUT par_cdcooper,
                              INPUT par_cdagenci,
                              INPUT par_nrdcaixa,
                              INPUT 1,            /** Sequencia **/
                              INPUT aux_cdcritic,
                              INPUT-OUTPUT aux_dscritic).
                                                      
               UNDO TRANS_s2via, RETURN "NOK".
           END.    

       ASSIGN crawcrd.dtsol2vi = par_dtmvtolt
              crawcrd.cdmotivo = par_cdmotivo
              crawcrd.nrrepcar = par_cpfrepre.
              

       IF  par_cdmotivo = 5  THEN
           ASSIGN old_nmtitcrd     = crawcrd.nmtitcrd
                  crawcrd.nmtitcrd = UPPER(par_nmtitcrd).

    END.

    RUN proc_gerar_log (INPUT par_cdcooper,
                        INPUT par_cdoperad,
                        INPUT "",
                        INPUT aux_dsorigem,
                        INPUT aux_dstransa,
                        INPUT TRUE,
                        INPUT par_idseqttl,
                        INPUT par_nmdatela,
                        INPUT par_nrdconta,
                       OUTPUT aux_nrdrowid).

    RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                            INPUT "nrcrcard",
                            INPUT "",
                            INPUT crawcrd.nrcrcard).
                       
    IF  par_nmtitcrd <> ""  THEN
        RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                                INPUT "nmtitcrd",
                                INPUT old_nmtitcrd,
                                INPUT crawcrd.nmtitcrd).
    
    RETURN "OK".
    
END PROCEDURE.

/*******************************************************************************
        Efetuar a solicitacao da segunda via de senha de um determinado cartao
*******************************************************************************/
PROCEDURE efetua_solicitacao2via_senha:

    DEF  INPUT PARAM par_cdcooper AS INTE                           NO-UNDO. 
    DEF  INPUT PARAM par_cdagenci AS INTE                           NO-UNDO. 
    DEF  INPUT PARAM par_nrdcaixa AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_cdoperad AS CHAR                           NO-UNDO. 
    DEF  INPUT PARAM par_nrdconta AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_idseqttl AS INTE                           NO-UNDO.  
    DEF  INPUT PARAM par_idorigem AS INTE                           NO-UNDO. 
    DEF  INPUT PARAM par_nmdatela AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_dtmvtolt AS DATE                           NO-UNDO.
    DEF  INPUT PARAM par_nrctrcrd AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_cpfrepre AS DECI FORMAT "zzzzzzzzzz9"      NO-UNDO.
    DEF  INPUT PARAM par_repsolic AS  CHAR                          NO-UNDO.
            
    DEF OUTPUT PARAM TABLE FOR tt-erro.

    DEF VAR aux_tpendass AS INTE                                    NO-UNDO.
    DEF VAR aux_contador AS INTE                                    NO-UNDO.

    DEF VAR aux_flgtrans AS LOGI                                    NO-UNDO.

    DEF BUFFER b-crapass FOR crapass.

    EMPTY TEMP-TABLE tt-erro.

    /** Atribui descricao da origem e da transacao **/
    ASSIGN aux_dsorigem = TRIM(ENTRY(par_idorigem,des_dorigens,","))
           aux_dstransa = "Solicitar 2via de senha de cartao de credito."
           aux_flgtrans = FALSE.
               
    TRANS_s2via:
    DO TRANSACTION ON ERROR UNDO TRANS_s2via, LEAVE TRANS_s2via:
        
        DO aux_contador = 1 TO 10:
    
            FIND FIRST crawcrd WHERE crawcrd.cdcooper = par_cdcooper AND
                                     crawcrd.nrdconta = par_nrdconta AND
                                     crawcrd.nrctrcrd = par_nrctrcrd
                                     EXCLUSIVE-LOCK NO-ERROR NO-WAIT.
                                      
            IF  NOT AVAILABLE crawcrd  THEN
                DO:
                    IF  LOCKED crawcrd  THEN
                        DO:
                            aux_dscritic = "Registro de cartao de credito " + 
                                           "esta sendo alterado. Tente " +
                                           "Novamente.".
                            PAUSE 1 NO-MESSAGE.
                            NEXT.
                        END.
                    ELSE
                        DO:
                            aux_dscritic = "Registro de cartao de credito nao" +
                                           " encontrado.".
                            LEAVE.
                        END.
                END.

            ASSIGN aux_dscritic = "".
            LEAVE.
            
        END. /** Fim do DO ... TO **/

        IF   aux_dscritic <> ""   THEN
             UNDO TRANS_s2via, LEAVE TRANS_s2via.
            
        FOR FIRST crapass FIELDS(inpessoa)  
                             WHERE crapass.cdcooper = par_cdcooper AND
                           crapass.nrdconta = par_nrdconta NO-LOCK:
            END.

        IF  crapass.inpessoa = 2 THEN
            DO:
                IF  par_repsolic = "" THEN
                    DO:
                        ASSIGN aux_cdcritic = 0
                               aux_dscritic = "Incluir um Representante".
        
                        UNDO TRANS_s2via, LEAVE TRANS_s2via.
                    END.
        
                FOR EACH craphcj
                    WHERE craphcj.cdcooper = par_cdcooper
                      AND craphcj.nrdconta = par_nrdconta NO-LOCK:
        
                    FIND FIRST b-crapass
                        WHERE b-crapass.cdcooper = craphcj.cdcooper   AND
                              (b-crapass.nrcpfcgc = craphcj.nrcpfpri  OR
                               b-crapass.nrcpfcgc = craphcj.nrcpfseg  OR
                               b-crapass.nrcpfcgc = craphcj.nrcpfter) AND
                               b-crapass.nmprimtl = par_repsolic
                              NO-LOCK NO-ERROR.
               
                    IF   NOT AVAIL b-crapass THEN
                        DO:
                            FIND FIRST crapncp
                                WHERE (crapncp.nrdoccpf = craphcj.nrcpfpri OR
                                       crapncp.nrdoccpf = craphcj.nrcpfseg OR
                                       crapncp.nrdoccpf = craphcj.nrcpfter) 
                                  AND crapncp.nmpessoa  = par_repsolic NO-LOCK NO-ERROR.
        
                            IF   NOT AVAIL crapncp THEN
                                 DO:
        
                                     ASSIGN aux_cdcritic = 0
                                            aux_dscritic = "Representante Invalido".
        
                                    UNDO TRANS_s2via, LEAVE TRANS_s2via.
        
                                 END.
                        END.
                END.
            END.

        ASSIGN aux_tpendass = IF crapass.inpessoa = 1 THEN 10 ELSE 9.

        FIND crapenc WHERE crapenc.cdcooper = par_cdcooper AND
                           crapenc.nrdconta = par_nrdconta AND
                           crapenc.idseqttl = 1            AND
                           crapenc.tpendass = aux_tpendass NO-LOCK NO-ERROR.
       
        IF  NOT AVAILABLE crapenc  THEN
            DO:
                ASSIGN aux_cdcritic = 0
                       aux_dscritic = "Cooperado sem endereco cadastrado.".
        
                UNDO TRANS_s2via, LEAVE TRANS_s2via.
            END.

        IF  NOT CAN-FIND(FIRST crapdne 
                         WHERE crapdne.nrceplog = crapenc.nrcepend)  OR 
            NOT CAN-FIND(FIRST crapdne
                         WHERE crapdne.nrceplog = crapenc.nrcepend  
                           AND (TRIM(crapenc.dsendere) MATCHES 
                               ("*" + TRIM(crapdne.nmextlog) + "*")
                            OR TRIM(crapenc.dsendere) MATCHES
                               ("*" + TRIM(crapdne.nmreslog) + "*"))) THEN
            DO:
                ASSIGN aux_cdcritic = 0
                       aux_dscritic = "CEP/Endereco nao conferem, efetuar " +
                                      "revisao cadastral.".
                UNDO TRANS_s2via, LEAVE TRANS_s2via.
            END.
        
        IF  crawcrd.insitcrd <> 4  THEN
            DO:
                ASSIGN aux_cdcritic = 277
                       aux_dscritic = "".

                UNDO TRANS_s2via, LEAVE TRANS_s2via.
            END.
        ELSE
        IF  crawcrd.dt2viasn = par_dtmvtolt  THEN
            DO:
                ASSIGN aux_cdcritic = 802
                       aux_dscritic = "".

                UNDO TRANS_s2via, LEAVE TRANS_s2via.
            END.
        ELSE
        IF  crawcrd.dt2viasn <> ?                    AND
            par_dtmvtolt <= (crawcrd.dt2viasn + 15)  THEN
            DO:
                ASSIGN aux_cdcritic = 0
                       aux_dscritic = "2.Via ja solicitada. Prazo para " +
                                      "recebimento de 15 dias.".
                                      
                UNDO TRANS_s2via, LEAVE TRANS_s2via.                         
            END.

        /** Atualiza data de solicitacao da senha **/
        ASSIGN crawcrd.dt2viasn = par_dtmvtolt
               crawcrd.nrrepsen = par_cpfrepre.

        /** Flag que indica se transacao foi efetuada com sucesso **/
        ASSIGN aux_flgtrans = TRUE.

    END. /** Fim do DO TRANSACTION - TRANS_s2via **/
    
    IF  NOT aux_flgtrans  THEN
        DO:
            FIND FIRST tt-erro NO-LOCK NO-ERROR.
            
            IF  NOT AVAILABLE tt-erro  THEN
                DO:                
                    IF   aux_cdcritic = 0    AND    aux_dscritic = ""   THEN
                         ASSIGN aux_cdcritic = 0
                                aux_dscritic = 
                                    "Erro na transacao. Nao foi " + 
                                    "possivel efetuar a solicitacao.".

                    RUN gera_erro (INPUT par_cdcooper,
                                   INPUT par_cdagenci,
                                   INPUT par_nrdcaixa,
                                   INPUT 1,            /** Sequencia **/
                                   INPUT aux_cdcritic,
                                   INPUT-OUTPUT aux_dscritic).
                END.
                                                    
            RUN proc_gerar_log (INPUT par_cdcooper,
                                INPUT par_cdoperad,
                                INPUT aux_dscritic,
                                INPUT aux_dsorigem,
                                INPUT aux_dstransa,
                                INPUT FALSE,
                                INPUT par_idseqttl,
                                INPUT par_nmdatela,
                                INPUT par_nrdconta,
                               OUTPUT aux_nrdrowid).
                   
            RETURN "NOK".
        END.
        
    RUN proc_gerar_log (INPUT par_cdcooper,
                        INPUT par_cdoperad,
                        INPUT "",
                        INPUT aux_dsorigem,
                        INPUT aux_dstransa,
                        INPUT TRUE,
                        INPUT par_idseqttl,
                        INPUT par_nmdatela,
                        INPUT par_nrdconta,
                       OUTPUT aux_nrdrowid).

    RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                            INPUT "nrcrcard",
                            INPUT "",
                            INPUT crawcrd.nrcrcard).
                       
    RETURN "OK".
    
END PROCEDURE.

/**********************************************************************
        Valida se pode entregar e carrega os dados p/
        entregar a segunda via do cartao
***********************************************************************/
PROCEDURE valida_carregamento_entrega2via_cartao:

    DEF  INPUT PARAM par_cdcooper AS INTE                         NO-UNDO.
    DEF  INPUT PARAM par_cdagenci AS INTE                         NO-UNDO.
    DEF  INPUT PARAM par_nrdcaixa AS INTE                         NO-UNDO.
    DEF  INPUT PARAM par_cdoperad AS CHAR                         NO-UNDO.
    DEF  INPUT PARAM par_nrdconta AS INTE                         NO-UNDO.
    DEF  INPUT PARAM par_nrctrcrd AS INTE                         NO-UNDO.
    
    DEF OUTPUT PARAM TABLE FOR tt-erro.

    EMPTY TEMP-TABLE tt-erro.
    
    FIND FIRST crawcrd WHERE crawcrd.cdcooper = par_cdcooper  AND
                             crawcrd.nrdconta = par_nrdconta  AND
                             crawcrd.nrctrcrd = par_nrctrcrd
                             NO-LOCK NO-ERROR NO-WAIT.
                                      
    IF  NOT AVAILABLE crawcrd  THEN
        DO:
           ASSIGN aux_cdcritic = 546
                  aux_dscritic = "".
    
           RUN gera_erro (INPUT par_cdcooper,
                          INPUT par_cdagenci,
                          INPUT par_nrdcaixa,
                          INPUT 1,            /** Sequencia **/
                          INPUT aux_cdcritic,
                          INPUT-OUTPUT aux_dscritic).
                                                           
           RETURN "NOK".
                
        END.
            
    IF  crawcrd.insitcrd < 4  THEN
        DO:
            ASSIGN aux_cdcritic = 554
                   aux_dscritic = "".
    
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                                           
            RETURN "NOK".            
        END.           
    ELSE
    IF  crawcrd.dtsol2vi = ?  THEN
        DO:
            ASSIGN aux_cdcritic = 804
                   aux_dscritic = "".
    
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                                           
            RETURN "NOK".
        END.

    RETURN "OK".    
   
END PROCEDURE.

/**********************************************************************
        Valida dados para efetuar a entrega da segunda via do cartao
***********************************************************************/
PROCEDURE valida_dados_entrega2via_cartao:

    DEF  INPUT PARAM par_cdcooper AS INTE                         NO-UNDO.
    DEF  INPUT PARAM par_cdagenci AS INTE                         NO-UNDO.
    DEF  INPUT PARAM par_nrdcaixa AS INTE                         NO-UNDO.
    DEF  INPUT PARAM par_cdoperad AS CHAR                         NO-UNDO.
    DEF  INPUT PARAM par_nrdconta AS INTE                         NO-UNDO.
    DEF  INPUT PARAM par_dtmvtolt AS DATE                         NO-UNDO.
    DEF  INPUT PARAM par_idorigem AS INTE                         NO-UNDO.
    DEF  INPUT PARAM par_idseqttl AS INTE                         NO-UNDO.
    DEF  INPUT PARAM par_nmdatela AS CHAR                         NO-UNDO.
    DEF  INPUT PARAM par_nrctrcrd AS INTE                         NO-UNDO.
    DEF  INPUT PARAM par_nrcrcard AS DECI                         NO-UNDO.    
    DEF  INPUT PARAM par_dtvalida AS CHAR                         NO-UNDO.
    DEF  INPUT PARAM par_flgimpnp AS CHAR                         NO-UNDO.
    DEF  INPUT PARAM par_repsolic AS CHAR                       NO-UNDO.
    
    DEF OUTPUT PARAM TABLE FOR tt-dados-avais.
    DEF OUTPUT PARAM TABLE FOR tt-erro.
            
    DEF VAR h-b1wgen9999 AS HANDLE NO-UNDO.
    DEF VAR h-b1wgen0110 AS HANDLE NO-UNDO.
    DEF VAR aux_dtcalcu2 AS DATE   NO-UNDO.
    DEF VAR aux_ultdiame AS DATE   NO-UNDO.
    DEF VAR aux_dsoperac AS CHAR   NO-UNDO.

    EMPTY TEMP-TABLE tt-dados-avais.
    EMPTY TEMP-TABLE tt-erro.

    IF  INTE(SUBSTR(par_dtvalida,01,02)) > 12 OR
        INTE(SUBSTR(par_dtvalida,01,02)) = 0  OR
        INTE(SUBSTR(par_dtvalida,03,04)) < YEAR(par_dtmvtolt)
        THEN
        DO:
            ASSIGN aux_cdcritic = 13
                   aux_dscritic = "".
    
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                                     
            RETURN "NOK".

        END.            
            
    /* Calcula o ultimo dia do mes informado */
    ASSIGN aux_dtcalcu2 = DATE(INTE(SUBSTR(par_dtvalida,01,02)),
                               01,
                               INTE(SUBSTR(par_dtvalida,03,04)))
           aux_ultdiame = ((DATE(MONTH(aux_dtcalcu2),
                                 28,
                                 YEAR(aux_dtcalcu2)) + 4) -
                                 DAY(DATE(MONTH(aux_dtcalcu2),
                                          28,
                                          YEAR(aux_dtcalcu2)) + 4)).

    FOR FIRST crapass FIELDS(nrdconta inpessoa nrcpfcgc)
                     WHERE crapass.cdcooper = par_cdcooper AND
                       crapass.nrdconta = par_nrdconta 
                       NO-LOCK:
   END.

    IF NOT VALID-HANDLE(h-b1wgen0110) THEN
       RUN sistema/generico/procedures/b1wgen0110.p 
           PERSISTENT SET h-b1wgen0110.
   

    /*Monta a mensagem da operacao para envio no e-mail*/
    ASSIGN aux_dsoperac = "Tentativa de entregar 2.a. via de cartoes "  +
                          "na conta "                                   +
                          STRING(crapass.nrdconta,"zzzz,zzz,9")         +
                          " - CPF/CNPJ "                                +
                         (IF crapass.inpessoa = 1 THEN
                             STRING((STRING(crapass.nrcpfcgc,
                                     "99999999999")),"xxx.xxx.xxx-xx")
                          ELSE
                             STRING((STRING(crapass.nrcpfcgc,
                                     "99999999999999")),
                                     "xx.xxx.xxx/xxxx-xx")).

    /*Verifica se o associado esta no cadastro restritivo. Se estiver,
      sera enviado um e-mail informando a situacao*/
    RUN alerta_fraude IN h-b1wgen0110(INPUT par_cdcooper,
                                      INPUT par_cdagenci,
                                      INPUT par_nrdcaixa,
                                      INPUT par_cdoperad,
                                      INPUT par_nmdatela,
                                      INPUT par_dtmvtolt,
                                      INPUT par_idorigem,
                                      INPUT crapass.nrcpfcgc, 
                                      INPUT crapass.nrdconta,
                                      INPUT par_idseqttl,
                                      INPUT TRUE, /*bloqueia operacao*/
                                      INPUT 34, /*cdoperac*/
                                      INPUT aux_dsoperac,
                                      OUTPUT TABLE tt-erro).

    IF VALID-HANDLE(h-b1wgen0110) THEN
       DELETE PROCEDURE(h-b1wgen0110).
   
    IF RETURN-VALUE <> "OK" THEN
       DO:
          FIND FIRST tt-erro NO-LOCK NO-ERROR.

          IF NOT AVAIL tt-erro THEN
             DO:
                ASSIGN aux_dscritic = "Nao foi possivel verificar o " + 
                                      "cadastro restritivo.".
    
                RUN gera_erro (INPUT par_cdcooper,
                               INPUT par_cdagenci,
                               INPUT par_nrdcaixa,
                               INPUT 1,            /** Sequencia **/
                               INPUT aux_cdcritic,
                               INPUT-OUTPUT aux_dscritic).
             END.

          RETURN "NOK". 
   
       END.

    IF crapass.inpessoa = 2 THEN
       DO:
          IF par_repsolic = "" THEN
             DO:
                 ASSIGN aux_cdcritic = 0
                        aux_dscritic = "Incluir um Representante".
    
                 RUN gera_erro (INPUT par_cdcooper,
                                INPUT par_cdagenci,
                                INPUT par_nrdcaixa,
                                INPUT 1,            /** Sequencia **/
                                INPUT aux_cdcritic,
                                INPUT-OUTPUT aux_dscritic).
    
                 RETURN "NOK".

             END.
    
          FOR EACH craphcj WHERE craphcj.cdcooper = par_cdcooper AND
                                 craphcj.nrdconta = par_nrdconta 
                                 NO-LOCK:
    
              FOR FIRST crapass FIELDS(inpessoa) 
                                             WHERE crapass.cdcooper = craphcj.cdcooper  AND
                                      (crapass.nrcpfcgc = craphcj.nrcpfpri  OR
                                       crapass.nrcpfcgc = craphcj.nrcpfseg  OR
                                       crapass.nrcpfcgc = craphcj.nrcpfter) AND
                                       crapass.nmprimtl = par_repsolic       
                                       NO-LOCK: END.
       
              IF NOT AVAIL crapass THEN
                 DO:
                     FIND FIRST crapncp
                         WHERE (crapncp.nrdoccpf = craphcj.nrcpfpri OR
                                crapncp.nrdoccpf = craphcj.nrcpfseg OR
                                crapncp.nrdoccpf = craphcj.nrcpfter) AND
                                crapncp.nmpessoa  = par_repsolic 
                                NO-LOCK NO-ERROR.
    
                     IF NOT AVAIL crapncp THEN
                        DO:
                            ASSIGN aux_cdcritic = 0
                                   aux_dscritic = "Representante Invalido".
    
                            RUN gera_erro (INPUT par_cdcooper,
                                           INPUT par_cdagenci,
                                           INPUT par_nrdcaixa,
                                           INPUT 1,          /** Sequencia **/
                                           INPUT aux_cdcritic,
                                           INPUT-OUTPUT aux_dscritic).
    
                            RETURN "NOK".
    
                        END.

                 END.

          END.

       END.

    IF aux_ultdiame <= par_dtmvtolt  THEN
       DO:
           ASSIGN aux_cdcritic = 13
                  aux_dscritic = "".
    
           RUN gera_erro (INPUT par_cdcooper,
                          INPUT par_cdagenci,
                          INPUT par_nrdcaixa,
                          INPUT 1,            /** Sequencia **/
                          INPUT aux_cdcritic,
                          INPUT-OUTPUT aux_dscritic).
                                                    
           RETURN "NOK".

       END.
            
    FIND FIRST crawcrd WHERE crawcrd.cdcooper = par_cdcooper  AND
                             crawcrd.nrdconta = par_nrdconta  AND
                             crawcrd.nrctrcrd = par_nrctrcrd
                             NO-LOCK NO-ERROR NO-WAIT.
                                      
    IF NOT AVAILABLE crawcrd  THEN
       DO:
          ASSIGN aux_cdcritic = 546
                 aux_dscritic = "".
    
          RUN gera_erro (INPUT par_cdcooper,
                         INPUT par_cdagenci,
                         INPUT par_nrdcaixa,
                         INPUT 1,            /** Sequencia **/
                         INPUT aux_cdcritic,
                         INPUT-OUTPUT aux_dscritic).
                                                          
          RETURN "NOK".
               
       END.    

    IF crawcrd.insitcrd <> 4 AND  
       crawcrd.insitcrd <> 7 THEN
       DO:
           ASSIGN aux_cdcritic = 538
                  aux_dscritic = "".
    
           RUN gera_erro (INPUT par_cdcooper,
                          INPUT par_cdagenci,
                          INPUT par_nrdcaixa,
                          INPUT 1,            /** Sequencia **/
                          INPUT aux_cdcritic,
                          INPUT-OUTPUT aux_dscritic).
                                                         
           RETURN "NOK".

       END.

    FIND craptab WHERE craptab.cdcooper = par_cdcooper      AND
                       craptab.nmsistem = "CRED"            AND 
                       craptab.tptabela = "USUARI"          AND
                       craptab.cdempres = 11                AND
                       craptab.cdacesso = "NUMICARTAO"      AND
                       craptab.tpregist = crawcrd.cdadmcrd  
                       NO-LOCK NO-ERROR.
                               
    IF NOT AVAILABLE craptab THEN
       DO:
           ASSIGN aux_cdcritic = 612
                  aux_dscritic = "".
    
           RUN gera_erro (INPUT par_cdcooper,
                          INPUT par_cdagenci,
                          INPUT par_nrdcaixa,
                          INPUT 1,            /** Sequencia **/
                          INPUT aux_cdcritic,
                          INPUT-OUTPUT aux_dscritic).
                                                          
           RETURN "NOK".

       END.

    IF NOT CAN-DO(TRIM(craptab.dstextab), 
                  SUBSTR(STRING(par_nrcrcard,"9999,9999,9999,9999"),1,4))  THEN
       DO:
          ASSIGN aux_cdcritic = 380
                 aux_dscritic = "".
    
          RUN gera_erro (INPUT par_cdcooper,
                         INPUT par_cdagenci,
                         INPUT par_nrdcaixa,
                         INPUT 1,            /** Sequencia **/
                         INPUT aux_cdcritic,
                         INPUT-OUTPUT aux_dscritic).
                                                           
          RETURN "NOK".

       END.
 
    IF par_nrcrcard = 0 THEN
       DO:
           ASSIGN aux_cdcritic = 380
                  aux_dscritic = "".
     
           RUN gera_erro (INPUT par_cdcooper,
                          INPUT par_cdagenci,
                          INPUT par_nrdcaixa,
                          INPUT 1,            /** Sequencia **/
                          INPUT aux_cdcritic,
                          INPUT-OUTPUT aux_dscritic).
                                                          
          RETURN "NOK".     

       END.
           
    FIND crapcrd WHERE crapcrd.cdcooper = par_cdcooper AND
                       crapcrd.nrcrcard = par_nrcrcard    
                       NO-LOCK USE-INDEX crapcrd3 NO-ERROR.

    IF AVAILABLE crapcrd THEN
       DO:
           ASSIGN aux_cdcritic = 548
                  aux_dscritic = "".
    
           RUN gera_erro (INPUT par_cdcooper,
                          INPUT par_cdagenci,
                          INPUT par_nrdcaixa,
                          INPUT 1,            /** Sequencia **/
                          INPUT aux_cdcritic,
                          INPUT-OUTPUT aux_dscritic).
                                                          
           RETURN "NOK".

       END.     
      
    RUN sistema/generico/procedures/b1wgen9999.p 
        PERSISTENT SET h-b1wgen9999.

    IF NOT VALID-HANDLE(h-b1wgen9999)  THEN
       DO:
           ASSIGN aux_cdcritic = 0
                  aux_dscritic = "Handle invalido para BO b1wgen9999.".
                  
           RUN gera_erro (INPUT par_cdcooper,
                          INPUT par_cdagenci,
                          INPUT par_nrdcaixa,
                          INPUT 1,            /** Sequencia **/
                          INPUT aux_cdcritic,
                          INPUT-OUTPUT aux_dscritic).
                                      
           RETURN "NOK".

       END.
        
    RUN lista_avalistas IN h-b1wgen9999 (INPUT par_cdcooper,  
                                         INPUT par_cdagenci,
                                         INPUT par_nrdcaixa,
                                         INPUT par_cdoperad,
                                         INPUT par_nmdatela,
                                         INPUT par_idorigem,
                                         INPUT par_nrdconta,
                                         INPUT par_idseqttl,
                                         INPUT 4, /** Tipo do contrato **/
                                         INPUT par_nrctrcrd,
                                         INPUT crawcrd.nrctaav1,
                                         INPUT crawcrd.nrctaav2,
                                        OUTPUT TABLE tt-dados-avais,
                                        OUTPUT TABLE tt-erro).
                
    DELETE PROCEDURE h-b1wgen9999.
    
    IF RETURN-VALUE = "NOK"  THEN
       RETURN "NOK".

    RETURN "OK".

END PROCEDURE.

/*******************************************************************
    Efetuar a entrega da segunda via de um determinado cartao
*******************************************************************/
PROCEDURE efetua_entrega2via_cartao:

    DEF INPUT PARAM par_cdcooper AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_cdagenci AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_nrdcaixa AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_cdoperad AS CHAR                         NO-UNDO.
    DEF INPUT PARAM par_nrdconta AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_dtmvtolt AS DATE                         NO-UNDO.
    DEF INPUT PARAM par_idorigem AS INTE                         NO-UNDO. 
    DEF INPUT PARAM par_idseqttl AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_nmdatela AS CHAR                         NO-UNDO.
    DEF INPUT PARAM par_cdadmcrd AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_nrctrcrd AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_nrcrcard AS DECI                         NO-UNDO.
    DEF INPUT PARAM par_dtvalida AS CHAR                         NO-UNDO.
    DEF INPUT PARAM par_flgimpnp AS CHAR                         NO-UNDO.
    /** ------------------- Parametros do 1 avalista ------------------- **/
    DEF  INPUT PARAM par_nrctaav1 AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nmdaval1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nrcpfav1 AS DECI                           NO-UNDO.
    DEF  INPUT PARAM par_tpdocav1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_dsdocav1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nmdcjav1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_cpfcjav1 AS DECI                           NO-UNDO.
    DEF  INPUT PARAM par_tdccjav1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_doccjav1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_ende1av1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_ende2av1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nrfonav1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_emailav1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nmcidav1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_cdufava1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nrcepav1 AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrender1 AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_complen1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nrcxaps1 AS INTE                           NO-UNDO.
    /** ------------------- Parametros do 2 avalista ------------------- **/
    DEF  INPUT PARAM par_nrctaav2 AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nmdaval2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nrcpfav2 AS DECI                           NO-UNDO.
    DEF  INPUT PARAM par_tpdocav2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_dsdocav2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nmdcjav2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_cpfcjav2 AS DECI                           NO-UNDO.
    DEF  INPUT PARAM par_tdccjav2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_doccjav2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_ende1av2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_ende2av2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nrfonav2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_emailav2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nmcidav2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_cdufava2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nrcepav2 AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrender2 AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_complen2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nrcxaps2 AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_cpfrepre AS DECI                           NO-UNDO.
    
    DEF OUTPUT PARAM par_nrctr2vi AS DECI                           NO-UNDO.
    DEF OUTPUT PARAM TABLE FOR tt-erro.

    DEF  VAR   h-b1wgen9999       AS HANDLE                         NO-UNDO.
    DEF  VAR   h-b1wgen0110       AS HANDLE                         NO-UNDO.
    DEF  VAR   aux_contador       AS INTEGER                        NO-UNDO.
    DEF  VAR   aux_dtcalcu2       AS DATE                           NO-UNDO.
    DEF  VAR   aux_ultdiame       AS DATE                           NO-UNDO.
    DEF  VAR   aux_dsoperac       AS CHAR                           NO-UNDO.
    DEF  VAR   aux_ponteiro       AS INTE                           NO-UNDO.
    DEF  VAR   aux_nrctrcrd       AS INTE                           NO-UNDO.
  
    DEF  VAR   aux_flgtrans       AS LOGI                           NO-UNDO.

    DEF BUFFER crabcrd FOR crawcrd.
    DEF BUFFER cratcrd FOR crapcrd.

    EMPTY TEMP-TABLE tt-erro.
    
    /** Atribui descricao da origem e da transacao **/
    ASSIGN aux_dsorigem = TRIM(ENTRY(par_idorigem,des_dorigens,","))
           aux_dstransa = "Entregar 2via de cartao de credito.". 
    
    TRANS_1:
    DO TRANSACTION ON ERROR UNDO TRANS_1, LEAVE TRANS_1:

       DO aux_contador = 1 TO 10:       
        
          FIND FIRST cratcrd WHERE cratcrd.cdcooper = par_cdcooper  AND
                                   cratcrd.nrdconta = par_nrdconta  AND
                                   cratcrd.nrctrcrd = par_nrctrcrd
                                   USE-INDEX crapcrd1
                                   EXCLUSIVE-LOCK NO-ERROR NO-WAIT.
                                     
          IF  NOT AVAILABLE cratcrd  THEN
              DO:
                  IF  LOCKED cratcrd  THEN
                      DO:
                          aux_dscritic = "Registro de cartao de credito esta" 
                                         + " sendo alterado. Tente Novamente.".
                          PAUSE 1 NO-MESSAGE.
                          NEXT.
                      END.
                  ELSE
                      DO:
                          aux_dscritic = "Registro de cartao de credito nao" +
                                         " encontrado.".
                          
                          LEAVE.
                      END.
              END.

          ASSIGN aux_dscritic = "".

          LEAVE.
            
       END. /** Fim do DO ... TO **/

       IF  aux_dscritic <> ""  THEN
           DO:
               ASSIGN aux_cdcritic = 0.

               RUN gera_erro (INPUT par_cdcooper,
                              INPUT par_cdagenci,
                              INPUT par_nrdcaixa,
                              INPUT 1,            /** Sequencia **/
                              INPUT aux_cdcritic,
                              INPUT-OUTPUT aux_dscritic).
                                                      
               UNDO TRANS_1, RETURN "NOK".
           END.              
              
       FOR FIRST crapass FIELDS(nrdconta inpessoa nrcpfcgc)
                        WHERE crapass.cdcooper = par_cdcooper AND
                          crapass.nrdconta = par_nrdconta 
                          NO-LOCK:
           END.

       IF NOT VALID-HANDLE(h-b1wgen0110) THEN
          RUN sistema/generico/procedures/b1wgen0110.p
              PERSISTENT SET h-b1wgen0110.

       /*Monta a mensagem da operacao para envio no e-mail*/
       ASSIGN aux_dsoperac = "Tentativa de entregar 2.a. via de cartoes "  +
                             "na conta "                                   +
                             STRING(crapass.nrdconta,"zzzz,zzz,9")         +
                             " - CPF/CNPJ "                                +
                            (IF crapass.inpessoa = 1 THEN
                                STRING((STRING(crapass.nrcpfcgc,
                                        "99999999999")),"xxx.xxx.xxx-xx")
                             ELSE
                                STRING((STRING(crapass.nrcpfcgc,
                                        "99999999999999")),
                                        "xx.xxx.xxx/xxxx-xx")).
      
       /*Verifica se o associado esta no cadastro restritivo. Se estiver,
         sera enviado um e-mail informando a situacao*/
       RUN alerta_fraude IN h-b1wgen0110(INPUT par_cdcooper,
                                         INPUT par_cdagenci,
                                         INPUT par_nrdcaixa,
                                         INPUT par_cdoperad,
                                         INPUT par_nmdatela,
                                         INPUT par_dtmvtolt,
                                         INPUT par_idorigem,
                                         INPUT crapass.nrcpfcgc, 
                                         INPUT crapass.nrdconta,
                                         INPUT par_idseqttl,
                                         INPUT TRUE, /*bloqueia operacao*/
                                         INPUT 34, /*cdoperac*/
                                         INPUT aux_dsoperac,
                                         OUTPUT TABLE tt-erro).
       
       IF VALID-HANDLE(h-b1wgen0110) THEN
          DELETE PROCEDURE(h-b1wgen0110).
   
       IF RETURN-VALUE <> "OK" THEN
          DO:
             FIND FIRST tt-erro NO-LOCK NO-ERROR.

             IF NOT AVAIL tt-erro THEN
                DO:
                   ASSIGN aux_dscritic = "Nao foi possivel verificar o " + 
                                         "cadastro restritivo.".
    
                   RUN gera_erro (INPUT par_cdcooper,
                                  INPUT par_cdagenci,
                                  INPUT par_nrdcaixa,
                                  INPUT 1,            /** Sequencia **/
                                  INPUT aux_cdcritic,
                                  INPUT-OUTPUT aux_dscritic).
                END.

              IF TEMP-TABLE tt-erro:HAS-RECORDS THEN
                 MESSAGE tt-erro.dscritic.

              PAUSE.

             UNDO TRANS_1, RETURN "NOK".
   
          END.


       DO aux_contador = 1 TO 10:       
        
          FIND FIRST crabcrd WHERE crabcrd.cdcooper = par_cdcooper  AND
                                   crabcrd.nrdconta = par_nrdconta  AND
                                   crabcrd.nrctrcrd = par_nrctrcrd
                                   EXCLUSIVE-LOCK NO-ERROR NO-WAIT.
                                     
          IF  NOT AVAILABLE crabcrd  THEN
              DO:
                  IF  LOCKED crabcrd  THEN
                      DO:
                          aux_dscritic = "Registro de cartao de credito esta" 
                                         + " sendo alterado. Tente Novamente.".
                          PAUSE 1 NO-MESSAGE.
                          NEXT.
                      END.
                  ELSE
                      DO:
                          aux_dscritic = "Registro de cartao de credito nao" +
                                         " encontrado.".
                          
                          LEAVE.
                      END.
              END.

          ASSIGN aux_dscritic = "".

          LEAVE.
            
       END. /** Fim do DO ... TO **/
       
       IF  aux_dscritic <> ""  THEN
           DO:
               ASSIGN aux_cdcritic = 0.

               RUN gera_erro (INPUT par_cdcooper,
                              INPUT par_cdagenci,
                              INPUT par_nrdcaixa,
                              INPUT 1,            /** Sequencia **/
                              INPUT aux_cdcritic,
                              INPUT-OUTPUT aux_dscritic).
                                                      
               UNDO TRANS_1, RETURN "NOK".
           END.
       
           { includes/PLSQL_altera_session_antes_st.i &dboraayl={&scd_dboraayl} }

           /* Busca a proxima sequencia do campo crapldt.nrsequen */
           RUN STORED-PROCEDURE pc_sequence_progress
           aux_handproc = PROC-HANDLE NO-ERROR (INPUT "CRAPMAT"
                                               ,INPUT "NRCTRCRD"
                                               ,INPUT STRING(par_cdcooper)
                                               ,INPUT "N"
                                               ,"").

           CLOSE STORED-PROC pc_sequence_progress
           aux_statproc = PROC-STATUS WHERE PROC-HANDLE = aux_handproc.

           { includes/PLSQL_altera_session_depois_st.i &dboraayl={&scd_dboraayl} }

           ASSIGN aux_nrctrcrd = INTE(pc_sequence_progress.pr_sequence)
                                 WHEN pc_sequence_progress.pr_sequence <> ?.

        /* Calcula o ultimo dia do mes informado */
        aux_dtcalcu2 = DATE(INTE(SUBSTR(par_dtvalida,01,02)),
                            01,
                            INTE(SUBSTR(par_dtvalida,03,04))).
        aux_ultdiame = ((DATE(MONTH(aux_dtcalcu2),
                              28,
                              YEAR(aux_dtcalcu2)) + 4) -
                              DAY(DATE(MONTH(aux_dtcalcu2),
                                       28,
                                       YEAR(aux_dtcalcu2)) + 4)).
        

        /* Inicio - Alteracoes referentes a M181 - Rafael Maciel (RKAM) */
        IF par_cdagenci = 0 THEN
          ASSIGN par_cdagenci = glb_cdagenci.
        /* Fim - Alteracoes referentes a M181 - Rafael Maciel (RKAM) */


        CREATE crawcrd.
        CREATE crapcrd.
        ASSIGN crawcrd.dtmvtolt = par_dtmvtolt
               crawcrd.nrdconta = par_nrdconta
               crawcrd.nrctrcrd = aux_nrctrcrd
               crawcrd.nrcpftit = crabcrd.nrcpftit
               crawcrd.nmtitcrd = crabcrd.nmtitcrd
               crawcrd.cdgraupr = crabcrd.cdgraupr
               crawcrd.vlsalari = crabcrd.vlsalari
               crawcrd.vlsalcon = crabcrd.vlsalcon
               crawcrd.vloutras = crabcrd.vloutras
               crawcrd.vlalugue = crabcrd.vlalugue
               crawcrd.dddebito = IF   crabcrd.cdmotivo = 7 THEN
                                       crabcrd.dddebant
                                  ELSE crabcrd.dddebito
               crawcrd.cdlimcrd = crabcrd.cdlimcrd
               crawcrd.cdadmcrd = crabcrd.cdadmcrd
               crawcrd.tpcartao = crabcrd.tpcartao
               crawcrd.dtnasccr = crabcrd.dtnasccr
               crawcrd.nrdoccrd = crabcrd.nrdoccrd
               crawcrd.dtpropos = IF   crabcrd.cdmotivo = 5 OR
                                       crabcrd.cdmotivo = 7 THEN
                                       crabcrd.dtpropos
                                  ELSE par_dtmvtolt
               crawcrd.cdoperad = par_cdoperad
               crawcrd.insitcrd = IF   crabcrd.insitcrd = 7 THEN
                                       4
                                  ELSE crabcrd.insitcrd
               crawcrd.cdagenci = 0
               crawcrd.cdbccxlt = 0
               crawcrd.nrdolote = 0
               crawcrd.nrseqdig = 0
               crawcrd.nrcrcard = par_nrcrcard
               crawcrd.dtsolici = IF   crabcrd.cdmotivo = 5 OR
                                       crabcrd.cdmotivo = 7 THEN
                                       crabcrd.dtsolici 
                                  ELSE par_dtmvtolt
               crawcrd.dtentreg = IF   crabcrd.cdmotivo = 7 THEN
                                       par_dtmvtolt     
                                  ELSE crabcrd.dtentreg
               crawcrd.dtentr2v = par_dtmvtolt
               crawcrd.dtvalida = aux_ultdiame
               crawcrd.dtlibera = crabcrd.dtlibera
               crawcrd.vlanuida = crabcrd.vlanuida
               crawcrd.qtanuida = crabcrd.qtanuida
               crawcrd.qtparcan = crabcrd.qtparcan
               crawcrd.dtanuida = crabcrd.dtanuida
               crawcrd.inanuida = crabcrd.inanuida
               crawcrd.flgdebit = crabcrd.flgdebit
               crawcrd.dtcancel = ?
               crawcrd.cdmotivo = 0
               crawcrd.flgimpnp = LOGICAL(par_flgimpnp)
               crawcrd.nrctaav1 = par_nrctaav1
               crawcrd.nrctaav2 = par_nrctaav2
               crawcrd.dsendav1[1] = IF par_nrctaav1 <> 0 THEN 
                                        ""
                                     ELSE 
                                        CAPS(par_ende1av1) + " " +
                                        STRING(par_nrender1)
               crawcrd.dsendav1[2] = IF par_nrctaav1 <> 0 THEN 
                                        ""
                                     ELSE 
                                        CAPS(par_ende2av1) + " - " + 
                                        CAPS(par_nmcidav1) + " - " +
                                        STRING(par_nrcepav1,"99999,999") +
                                        " - " + CAPS(par_cdufava1)
               crawcrd.dsendav2[1] = IF par_nrctaav2 <> 0 THEN 
                                        ""
                                     ELSE 
                                        CAPS(par_ende1av2) + " " +
                                        STRING(par_nrender2)
               crawcrd.dsendav2[2] = IF par_nrctaav2 <> 0 THEN 
                                        ""
                                     ELSE 
                                        CAPS(par_ende2av2) + " - " + 
                                        CAPS(par_nmcidav2) + " - " +
                                        STRING(par_nrcepav2,"99999,999") +
                                        " - " + CAPS(par_cdufava2)
               crawcrd.nmdaval1    = IF par_nrctaav1 <> 0 THEN 
                                        ""
                                     ELSE 
                                        par_nmdaval1
               crawcrd.nmdaval2    = IF par_nrctaav2 <> 0 THEN 
                                        "" 
                                     ELSE 
                                        par_nmdaval2
               crawcrd.dscpfav1    = IF par_nrctaav1 <> 0 THEN 
                                        "" 
                                     ELSE 
                                        par_dsdocav1
               crawcrd.dscpfav2    = IF par_nrctaav2 <> 0 THEN 
                                        ""
                                     ELSE 
                                        par_dsdocav2         
               crawcrd.cdcooper = par_cdcooper 
               crawcrd.nrrepent = par_cpfrepre
               crawcrd.nrrepinc = par_cpfrepre
               /* INICIO - dados para o BI em caso de cancelamento - MACIEL (RKAM) */
               crawcrd.cdopeori = par_cdoperad 
               crawcrd.cdageori = par_cdagenci
               crawcrd.dtinsori = TODAY
               /* FIM - dados para o BI em caso de cancelamento - MACIEL (RKAM) */

               crabcrd.insitcrd = 5
               crabcrd.dtcancel = par_dtmvtolt
               crabcrd.cdoperad = par_cdoperad
               crapcrd.nrdconta = crawcrd.nrdconta
               crapcrd.nrcrcard = crawcrd.nrcrcard
               crapcrd.nrcpftit = crawcrd.nrcpftit
               crapcrd.nmtitcrd = crawcrd.nmtitcrd
               crapcrd.dddebito = crawcrd.dddebito
               crapcrd.cdlimcrd = crawcrd.cdlimcrd
               crapcrd.dtvalida = aux_ultdiame
               crapcrd.nrctrcrd = crawcrd.nrctrcrd
               crapcrd.tpcartao = crawcrd.tpcartao
               crapcrd.cdadmcrd = crawcrd.cdadmcrd
               crapcrd.dtcancel = ?
               crapcrd.cdmotivo = 0
               crapcrd.cdcooper = crawcrd.cdcooper
               crapcrd.flgdebit = crawcrd.flgdebit
               cratcrd.dtcancel = par_dtmvtolt
               cratcrd.cdmotivo = crabcrd.cdmotivo
               crapcrd.dtanucrd = cratcrd.dtanucrd
               crapcrd.inanucrd = cratcrd.inanucrd
               crapcrd.vlanucrd = cratcrd.vlanucrd
               par_nrctr2vi     = crawcrd.nrctrcrd.
        
                                        
        RUN sistema/generico/procedures/b1wgen9999.p PERSISTENT 
            SET h-b1wgen9999.            

        IF  NOT VALID-HANDLE(h-b1wgen9999)  THEN
            DO:
                ASSIGN aux_cdcritic = 0
                       aux_dscritic = "Handle invalido para BO b1wgen9999.".
                   
                RUN gera_erro (INPUT par_cdcooper,
                               INPUT par_cdagenci,
                               INPUT par_nrdcaixa,
                               INPUT 1,            /** Sequencia **/
                               INPUT aux_cdcritic,
                               INPUT-OUTPUT aux_dscritic).
                                       
                UNDO TRANS_1, LEAVE TRANS_1.
            END.
        
        RUN cria-tabelas-avalistas IN h-b1wgen9999 (INPUT par_cdcooper,
                                                    INPUT par_cdoperad,
                                                    INPUT par_idorigem,
                                                    INPUT "CARTAO CRED.",
                                                    INPUT par_nrdconta,
                                                    INPUT par_dtmvtolt,
                                                    INPUT 4, /* Tipo Contrato */
                                                    INPUT aux_nrctrcrd,
                                                    INPUT par_cdagenci,
                                                    INPUT par_nrdcaixa,
                                                    /** 1o avalista **/
                                                    INPUT par_nrctaav1,
                                                    INPUT par_nmdaval1,
                                                    INPUT par_nrcpfav1,
                                                    INPUT par_tpdocav1,
                                                    INPUT par_dsdocav1,
                                                    INPUT par_nmdcjav1,
                                                    INPUT par_cpfcjav1, 
                                                    INPUT par_tdccjav1,
                                                    INPUT par_doccjav1,
                                                    INPUT par_ende1av1,
                                                    INPUT par_ende2av1,
                                                    INPUT par_nrfonav1,
                                                    INPUT par_emailav1,
                                                    INPUT par_nmcidav1,
                                                    INPUT par_cdufava1,
                                                    INPUT par_nrcepav1,
                                                    INPUT "", /* Nacao */
                                                    INPUT 0,  /* Vl.Endiv*/
                                                    INPUT 0,  /* Vl.Rend */
                                                    INPUT par_nrender1, 
                                                    INPUT par_complen1,
                                                    INPUT par_nrcxaps1,
                                                    INPUT 0,  /* inpessoa 1o avail */
                                                    INPUT ?,  /* dtnascto 1o avail */
                                                    /** 2o avalista **/
                                                    INPUT par_nrctaav2,
                                                    INPUT par_nmdaval2, 
                                                    INPUT par_nrcpfav2,
                                                    INPUT par_tpdocav2,
                                                    INPUT par_dsdocav2, 
                                                    INPUT par_nmdcjav2, 
                                                    INPUT par_cpfcjav2,
                                                    INPUT par_tdccjav2,
                                                    INPUT par_doccjav2,
                                                    INPUT par_ende1av2,
                                                    INPUT par_ende2av2,
                                                    INPUT par_nrfonav2,
                                                    INPUT par_emailav2, 
                                                    INPUT par_nmcidav2, 
                                                    INPUT par_cdufava2, 
                                                    INPUT par_nrcepav2,                                                    
                                                    INPUT "", /* Nacao */
                                                    INPUT 0,  /* Vl.Endiv*/
                                                    INPUT 0,  /* Vl.Rend */
                                                    INPUT par_nrender2, 
                                                    INPUT par_complen2,
                                                    INPUT par_nrcxaps2,
                                                    INPUT 0,  /* inpessoa 2o avail */
                                                    INPUT ?,  /* dtnascto 2o avail */
                                                    INPUT "",
                                                   OUTPUT TABLE tt-erro). 

        DELETE PROCEDURE h-b1wgen9999.
            
        IF RETURN-VALUE = "NOK" THEN
        DO:
            ASSIGN aux_flgtrans = FALSE.
            UNDO TRANS_1, LEAVE TRANS_1.
        END.

        IF  par_nrctaav1 = 0 AND par_nmdaval1 <> ""  THEN
            DO:
                ASSIGN crawcrd.dscfcav1 = " "
                       crawcrd.dscpfav1 = TRIM(CAPS(par_tpdocav1)) + " " +
                                          TRIM(CAPS(par_dsdocav1)) + 
                                          " C.P.F. " + STRING(par_nrcpfav1).
                
                IF  par_cpfcjav1 > 0  THEN
                    DO:    
                        ASSIGN crawcrd.dscfcav1 = TRIM(CAPS(par_tdccjav1)) + 
                                                  " " +
                                                  TRIM(CAPS(par_doccjav1)) + 
                                                  " C.P.F. " +
                                                  STRING(par_cpfcjav1).
                    END.
            END.        

        IF  par_nrctaav2 = 0 AND par_nmdaval2 <> ""  THEN
            DO:
                ASSIGN crawcrd.dscfcav2 = " "
                       crawcrd.dscpfav2 = TRIM(CAPS(par_tpdocav2)) + " " +
                                          TRIM(CAPS(par_dsdocav2)) + 
                                          " C.P.F. " + STRING(par_nrcpfav2).
         
                IF  par_cpfcjav2 > 0  THEN
                    DO:    
                        ASSIGN crawcrd.dscfcav2 = TRIM(CAPS(par_tdccjav2)) + 
                                                  " " +
                                                  TRIM(CAPS(par_doccjav2)) + 
                                                  " C.P.F. " +
                                                  STRING(par_cpfcjav2).
                    END.
            END.

        VALIDATE crawcrd.
        VALIDATE crapcrd.

    END. /* fim TRANSACTION TRANS_1 */
    
    IF NOT aux_flgtrans THEN
       RETURN "NOK".

    RUN proc_gerar_log (INPUT par_cdcooper,
                        INPUT par_cdoperad,
                        INPUT "",
                        INPUT aux_dsorigem,
                        INPUT aux_dstransa,
                        INPUT TRUE,
                        INPUT par_idseqttl,
                        INPUT par_nmdatela,
                        INPUT par_nrdconta,
                       OUTPUT aux_nrdrowid).
    
    RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                            INPUT "nrcrcard",
                            INPUT "",
                            INPUT cratcrd.nrcrcard).
    
    RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                            INPUT "nrcrcard - 2 via",
                            INPUT "",
                            INPUT crawcrd.nrcrcard).
    
    RETURN "OK".
    
END PROCEDURE.

/**********************************************************************
    Desfazer a solicitacao de segunda via de um determinado cartao
***********************************************************************/
PROCEDURE desfaz_solici2via_cartao:
    
    DEF  INPUT  PARAM  par_cdcooper  AS  INTE  NO-UNDO.                   
    DEF  INPUT  PARAM  par_cdagenci  AS  INTE  NO-UNDO.                
    DEF  INPUT  PARAM  par_nrdcaixa  AS  INTE  NO-UNDO.                     
    DEF  INPUT  PARAM  par_cdoperad  AS  CHAR  NO-UNDO.                
    DEF  INPUT  PARAM  par_nrdconta  AS  INTE  NO-UNDO.
    DEF  INPUT  PARAM  par_nrctrcrd  AS  INTE  NO-UNDO.
    DEF  INPUT  PARAM  par_dtmvtolt  AS  DATE  NO-UNDO.
    DEF  INPUT  PARAM  par_idorigem  AS  INTE  NO-UNDO. 
    DEF  INPUT  PARAM  par_idseqttl  AS  INTE  NO-UNDO.
    DEF  INPUT  PARAM  par_nmdatela  AS  CHAR  NO-UNDO.

    DEF OUTPUT  PARAM TABLE FOR tt-erro.

    DEF VAR aux_contador AS INTE NO-UNDO.
    
    /** Atribui descricao da origem e da transacao **/
    ASSIGN aux_dsorigem = TRIM(ENTRY(par_idorigem,des_dorigens,","))
           aux_dstransa = "Desfazer solicitacao de 2via de cartao.".
    
    TRANS_DESFAZ:
    DO TRANSACTION ON ERROR UNDO TRANS_DESFAZ, LEAVE TRANS_DESFAZ:

       DO aux_contador = 1 TO 10:
    
          FIND FIRST crawcrd WHERE crawcrd.cdcooper = par_cdcooper  AND
                                   crawcrd.nrdconta = par_nrdconta  AND
                                   crawcrd.nrctrcrd = par_nrctrcrd
                                   EXCLUSIVE-LOCK NO-ERROR NO-WAIT.
                                     
          IF  NOT AVAILABLE crawcrd  THEN
              DO:
                  IF  LOCKED crawcrd  THEN
                      DO:
                          ASSIGN aux_cdcritic = 0 
                                 aux_dscritic = 
                                         "Registro de cartao de credito esta" 
                                         + " sendo alterado. Tente Novamente.".
                          PAUSE 1 NO-MESSAGE.
                          NEXT.
                      END.
                  ELSE
                      DO: 
                          ASSIGN aux_cdcritic = 0  
                                 aux_dscritic = "Registro de cartao de credito" 
                                                + " nao encontrado.".
                          LEAVE.
                      END.
              END.

          FIND FIRST crapcrd WHERE crapcrd.cdcooper = par_cdcooper  AND
                                   crapcrd.nrdconta = par_nrdconta  AND
                                   crapcrd.nrctrcrd = par_nrctrcrd
                                   EXCLUSIVE-LOCK NO-ERROR NO-WAIT.
                                     
          IF  NOT AVAILABLE crapcrd  THEN
              DO:
                  IF  LOCKED crapcrd  THEN
                      DO:
                          ASSIGN aux_cdcritic = 0 
                                 aux_dscritic = 
                                         "Registro de cartao de credito esta" 
                                         + " sendo alterado. Tente Novamente.".
                          PAUSE 1 NO-MESSAGE.
                          NEXT.
                      END.
                  ELSE
                      DO: 
                          ASSIGN aux_cdcritic = 0  
                                 aux_dscritic = "Registro de cartao de credito" 
                                                + " nao encontrado.".
                          LEAVE.
                      END.
              END.
          
          ASSIGN aux_dscritic = "".

          LEAVE.
            
       END. /** Fim do DO ... TO **/
        
       IF  aux_dscritic = ""  THEN 
           DO: 
               FIND crapope WHERE crapope.cdcooper = par_cdcooper AND
                                  crapope.cdoperad = par_cdoperad
                                  NO-LOCK NO-ERROR NO-WAIT.
               
               /* Verifica se o operador não pertence ao setor de CARTOES ou TI */
               IF  AVAIL crapope THEN
                   IF  crapope.cddepart <> 2   AND  /* "CARTOES" */
                       crapope.cddepart <> 20 THEN  /* "TI"      */

                           /*** Critica se 2a. via do cartao CECRED VISA for desfeita numa data 
                                diferente da data de solicitacao ***/
                           IF  NOT CAN-DO("83,84,85,86,87,88",STRING(crawcrd.cdadmcrd)) AND
                               crawcrd.dtsol2vi <> par_dtmvtolt                         THEN
                               DO:
                                    ASSIGN aux_cdcritic = 551
                                           aux_dscritic = "". 
                                    
                                    RUN proc_gerar_log (INPUT par_cdcooper,
                                                        INPUT par_cdoperad,
                                                        INPUT aux_dscritic,
                                                        INPUT aux_dsorigem,
                                                        INPUT aux_dstransa,
                                                        INPUT FALSE,
                                                        INPUT par_idseqttl,
                                                        INPUT par_nmdatela,
                                                        INPUT par_nrdconta,
                                                       OUTPUT aux_nrdrowid).
                                                   
                                    RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                                                            INPUT "nrcrcard",
                                                            INPUT "",
                                                            INPUT crawcrd.nrcrcard).
                               END.
           END.

       IF  aux_cdcritic <> 0   OR      
           aux_dscritic <> ""  THEN
           DO:              
               RUN gera_erro (INPUT par_cdcooper,
                              INPUT par_cdagenci,
                              INPUT par_nrdcaixa,
                              INPUT 1,            /** Sequencia **/
                              INPUT aux_cdcritic,
                              INPUT-OUTPUT aux_dscritic).
                                                      
               UNDO TRANS_DESFAZ, RETURN "NOK".
           END.

       ASSIGN crawcrd.dtsol2vi = ?
              crawcrd.cdmotivo = 0
              crawcrd.nrrepcar = 0.

       IF   crawcrd.insitcrd = 7 THEN
            ASSIGN crawcrd.insitcrd = 4
                   crawcrd.nrrepven = 0
                   crapcrd.dddebito = crawcrd.dddebant
                   crapcrd.dtaltddb = ?
                   crawcrd.dddebant = 0.
    END.
    
    RUN proc_gerar_log (INPUT par_cdcooper,
                        INPUT par_cdoperad,
                        INPUT "",
                        INPUT aux_dsorigem,
                        INPUT aux_dstransa,
                        INPUT TRUE,
                        INPUT par_idseqttl,
                        INPUT par_nmdatela,
                        INPUT par_nrdconta,
                       OUTPUT aux_nrdrowid).
                       
    RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                            INPUT "nrcrcard",
                            INPUT "",
                            INPUT crawcrd.nrcrcard).
    
    RETURN "OK".
    
END PROCEDURE.

/*******************************************************************************
    Desfazer a solicitacao de segunda via de senha de um determinado cartao
*******************************************************************************/
PROCEDURE desfaz_solici2via_senha:
    
    DEF  INPUT PARAM par_cdcooper AS INTE                           NO-UNDO.   
    DEF  INPUT PARAM par_cdagenci AS INTE                           NO-UNDO.  
    DEF  INPUT PARAM par_nrdcaixa AS INTE                           NO-UNDO.   
    DEF  INPUT PARAM par_cdoperad AS CHAR                           NO-UNDO.   
    DEF  INPUT PARAM par_nrdconta AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_idseqttl AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_idorigem AS INTE                           NO-UNDO. 
    DEF  INPUT PARAM par_nmdatela AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_dtmvtolt AS DATE                           NO-UNDO.
    DEF  INPUT PARAM par_nrctrcrd AS INTE                           NO-UNDO.    

    DEF OUTPUT PARAM TABLE FOR tt-erro.

    DEF VAR aux_contador AS INTE                                    NO-UNDO.
    
    DEF VAR aux_flgtrans AS LOGI                                    NO-UNDO.
    
    EMPTY TEMP-TABLE tt-erro.
    
    /** Atribui descricao da origem e da transacao **/
    ASSIGN aux_dsorigem = TRIM(ENTRY(par_idorigem,des_dorigens,","))
           aux_dstransa = "Desfazer solicitacao de 2via de senha."
           aux_flgtrans = FALSE.
    
    TRANS_DESFAZ:
    DO TRANSACTION ON ERROR UNDO TRANS_DESFAZ, LEAVE TRANS_DESFAZ:

        DO aux_contador = 1 TO 10:
    
            FIND FIRST crawcrd WHERE crawcrd.cdcooper = par_cdcooper AND
                                     crawcrd.nrdconta = par_nrdconta AND
                                     crawcrd.nrctrcrd = par_nrctrcrd
                                     EXCLUSIVE-LOCK NO-ERROR NO-WAIT.
                                     
            IF  NOT AVAILABLE crawcrd  THEN
                DO:
                    IF  LOCKED crawcrd  THEN
                        DO:
                            aux_dscritic = "Registro de cartao de credito " + 
                                           "esta sendo alterado. Tente " +
                                           "Novamente.".
                            PAUSE 1 NO-MESSAGE.
                            NEXT.
                        END.
                    ELSE
                        DO:
                            aux_dscritic = "Registro de cartao de credito nao" +
                                           " encontrado.".
                            LEAVE.
                        END.
                END.

            ASSIGN aux_dscritic = "".

            LEAVE.
            
        END. /** Fim do DO ... TO **/
       
        IF  aux_dscritic <> ""  THEN
            DO:
                ASSIGN aux_cdcritic = 0.

                RUN gera_erro (INPUT par_cdcooper,
                               INPUT par_cdagenci,
                               INPUT par_nrdcaixa,
                               INPUT 1,            /** Sequencia **/
                               INPUT aux_cdcritic,
                               INPUT-OUTPUT aux_dscritic).
                                                       
                UNDO TRANS_DESFAZ, RETURN "NOK".
            END.
            
        IF  crawcrd.dt2viasn <> par_dtmvtolt  THEN
            DO:
                IF  crawcrd.dt2viasn <> ?                   AND
                    par_dtmvtolt <= (crawcrd.dt2viasn + 15) THEN
                    DO:
                        ASSIGN aux_cdcritic = 0
                               aux_dscritic = "Prazo de recebimento nao " +
                                              "esgotado. Consulte a data de " +
                                              "solicitacao.".

                        RUN gera_erro (INPUT par_cdcooper,
                                       INPUT par_cdagenci,
                                       INPUT par_nrdcaixa,
                                       INPUT 1,            /** Sequencia **/
                                       INPUT aux_cdcritic,
                                       INPUT-OUTPUT aux_dscritic).
                                                       
                        UNDO TRANS_DESFAZ, RETURN "NOK".
                    END.
                ELSE
                    DO:
                        ASSIGN aux_cdcritic = 804
                               aux_dscritic = "".

                        RUN gera_erro (INPUT par_cdcooper,
                                       INPUT par_cdagenci,
                                       INPUT par_nrdcaixa,
                                       INPUT 1,            /** Sequencia **/
                                       INPUT aux_cdcritic,
                                       INPUT-OUTPUT aux_dscritic).
                                                       
                        UNDO TRANS_DESFAZ, RETURN "NOK".
                    END.
            END.            
           
        /** Atualiza registro **/
        ASSIGN crawcrd.dt2viasn = ?
               crawcrd.nrrepsen = 0.

        /** Flag que indica se transacao foi efetuada com sucesso **/
        ASSIGN aux_flgtrans = TRUE.
    
    END. /** Fim do DO TRANSACTION - TRANS_DESFAZ **/

    IF  NOT aux_flgtrans  THEN
        DO:
            FIND FIRST tt-erro NO-LOCK NO-ERROR.
            
            IF  NOT AVAILABLE tt-erro  THEN
                DO:                
                    ASSIGN aux_cdcritic = 0
                           aux_dscritic = "Erro na transacao. Nao foi " + 
                                          "possivel desfazer solicitacao.".

                    RUN gera_erro (INPUT par_cdcooper,
                                   INPUT par_cdagenci,
                                   INPUT par_nrdcaixa,
                                   INPUT 1,            /** Sequencia **/
                                   INPUT aux_cdcritic,
                                   INPUT-OUTPUT aux_dscritic).
                END.
                                                    
            RUN proc_gerar_log (INPUT par_cdcooper,
                                INPUT par_cdoperad,
                                INPUT aux_dscritic,
                                INPUT aux_dsorigem,
                                INPUT aux_dstransa,
                                INPUT FALSE,
                                INPUT par_idseqttl,
                                INPUT par_nmdatela,
                                INPUT par_nrdconta,
                               OUTPUT aux_nrdrowid).
                   
            RETURN "NOK".
        END.
    
    RUN proc_gerar_log (INPUT par_cdcooper,
                        INPUT par_cdoperad,
                        INPUT "",
                        INPUT aux_dsorigem,
                        INPUT aux_dstransa,
                        INPUT TRUE,
                        INPUT par_idseqttl,
                        INPUT par_nmdatela,
                        INPUT par_nrdconta,
                       OUTPUT aux_nrdrowid).
                       
    RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                            INPUT "nrcrcard",
                            INPUT "",
                            INPUT crawcrd.nrcrcard).
    
    RETURN "OK".
    
END PROCEDURE.

/***********************
    OPCAO RENOVAR
***********************/    
/********************************************************
    Carregar dados sobre renovacao do cartao de credito
 *******************************************************/
PROCEDURE carrega_dados_renovacao:

    DEF INPUT PARAM par_cdcooper AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_cdagenci AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_nrdcaixa AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_cdoperad AS CHAR                         NO-UNDO.
    DEF INPUT PARAM par_nrdconta AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_nrctrcrd AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_dtmvtolt AS DATE                         NO-UNDO.
    DEF INPUT PARAM par_idorigem AS INTE                         NO-UNDO. 
    DEF INPUT PARAM par_idseqttl AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_nmdatela AS CHAR                         NO-UNDO.
    
    DEF OUTPUT PARAM TABLE FOR tt-dados_renovacao_cartao.
    DEF OUTPUT PARAM TABLE FOR tt-erro.

    DEF VAR h-b1wgen0001 AS HANDLE             NO-UNDO.
    
    EMPTY TEMP-TABLE tt-dados_renovacao_cartao.
    EMPTY TEMP-TABLE tt-erro.
            
    FOR FIRST crapass FIELDS(inpessoa nrdconta cdtipcta cdsitdct cdsitdtl dtdemiss)
                     WHERE crapass.cdcooper = par_cdcooper   AND
                       crapass.nrdconta = par_nrdconta   NO-LOCK:
    END.

    IF   NOT AVAILABLE crapass   THEN
         DO:
             ASSIGN aux_cdcritic = 9
                    aux_dscritic = "".

             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).                
                
             RETURN "NOK".
         END.       
         
    ASSIGN aux_cdcritic = 0
           aux_dscritic = "".
           
/*     IF   crapass.inpessoa <> 1   AND                                            */
/*          crapass.nrdconta <> 2393409  AND                                       */
/*          crapass.nrdconta <> 942405   AND                                       */
/*          crapass.nrdconta <> 2919109  AND                                       */
/*          crapass.nrdconta <> 2466970  AND                                       */
/*          crapass.nrdconta <> 1868594  THEN                                      */
/*          aux_dscritic = "Nao permitido cartao de credito para pessoa juridica". */
/*     ELSE                                                                        */
    IF   crapass.cdtipcta = 5    OR
         crapass.cdtipcta = 6    OR
         crapass.cdtipcta = 7    OR
         crapass.cdtipcta = 17   OR
         crapass.cdtipcta = 18   THEN
         aux_cdcritic = 332.
    ELSE
    IF   crapass.cdsitdct <> 1   AND
         crapass.cdsitdct <> 6   THEN
         aux_cdcritic = 332.
    ELSE
    IF   CAN-DO("5,6,7,8",STRING(crapass.cdsitdtl))   THEN
         aux_cdcritic = 695.
    ELSE
    IF   CAN-DO("2,4,6,8",STRING(crapass.cdsitdtl)) THEN
         aux_cdcritic = 95.
    ELSE
    IF   crapass.dtdemiss <> ?   THEN
         aux_cdcritic = 75.
    
    IF   aux_cdcritic <> 0 OR aux_dscritic <> ""   THEN
         DO:
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                          
            RETURN "NOK".
         END.
             
    RUN sistema/generico/procedures/b1wgen0001.p PERSISTENT SET h-b1wgen0001.
        
    IF   VALID-HANDLE(h-b1wgen0001)   THEN
         DO:
             RUN ver_capital IN h-b1wgen0001
                                    (INPUT  par_cdcooper,
                                     INPUT  par_nrdconta,
                                     INPUT  0, /* cod-agencia */
                                     INPUT  0, /* nro-caixa   */
                                     0,
                                     INPUT  par_dtmvtolt,
                                     INPUT  "b1wgen0028",
                                     INPUT  par_idorigem,
                                     OUTPUT TABLE tt-erro).
             
             /* Verifica se houve erro */
             FIND FIRST tt-erro NO-LOCK NO-ERROR.

             IF   AVAILABLE tt-erro   THEN
                  DO:
                      ASSIGN aux_cdcritic = tt-erro.cdcritic
                             aux_dscritic = tt-erro.dscritic.
                             
                      RUN gera_erro (INPUT par_cdcooper,
                                     INPUT par_cdagenci,
                                     INPUT par_nrdcaixa,
                                     INPUT 1,            /** Sequencia **/
                                     INPUT aux_cdcritic,
                                     INPUT-OUTPUT aux_dscritic).
                                     
                      DELETE PROCEDURE h-b1wgen0001.
                      
                      RETURN "NOK".                             
                  END.
             ELSE
                  DO:
                      RUN ver_cadastro IN h-b1wgen0001
                                           (INPUT  par_cdcooper,
                                            INPUT  par_nrdconta,
                                            INPUT  0, /* cod-agencia */
                                            INPUT  0, /* nro-caixa   */
                                            INPUT  par_dtmvtolt,
                                            INPUT  par_idorigem,
                                            OUTPUT TABLE tt-erro).

                      /* Verifica se houve erro */
                      FIND FIRST tt-erro NO-LOCK NO-ERROR.
      
                      IF   AVAILABLE tt-erro   THEN
                           DO:
                               ASSIGN aux_cdcritic = tt-erro.cdcritic
                                      aux_dscritic = tt-erro.dscritic.
                                      
                               RUN gera_erro (INPUT par_cdcooper,
                                             INPUT par_cdagenci,
                                             INPUT par_nrdcaixa,
                                             INPUT 1,      /** Sequencia **/
                                             INPUT aux_cdcritic,
                                             INPUT-OUTPUT aux_dscritic).
                                     
                               DELETE PROCEDURE h-b1wgen0001.
                        
                               RETURN "NOK".
                           END.
                  END.
             DELETE PROCEDURE h-b1wgen0001.
         END.

    FIND FIRST crawcrd WHERE crawcrd.cdcooper = par_cdcooper  AND
                             crawcrd.nrdconta = par_nrdconta  AND
                             crawcrd.nrctrcrd = par_nrctrcrd
                             NO-LOCK NO-ERROR NO-WAIT.

    IF   NOT AVAILABLE crawcrd THEN
         DO:
             ASSIGN aux_cdcritic = 546
                    aux_dscritic = "". 
                                   
             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,     /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                           
             RETURN "NOK".
         END.
    
    /* Opcao nao disponivel para Cartao BB */ 
    IF   f_verifica_adm(crawcrd.cdadmcrd) = 1 THEN
         DO:
             ASSIGN aux_cdcritic = 0
                    aux_dscritic = "Opcao nao disponivel para Cartao BB.". 
                                   
             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,     /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                             
             RETURN "NOK".
         END.
         
    IF   crawcrd.insitcrd <> 4 THEN
         DO:
            ASSIGN aux_cdcritic = 625
                   aux_dscritic = "".

            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                                      
            RETURN "NOK".
         END.   

    IF   crawcrd.dtsol2vi <> ?   THEN
         DO:
            ASSIGN aux_cdcritic = 0
                   aux_dscritic = "Opcao nao disponivel. 2.Via do cartao foi " +
                                  "solicitada.".

            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                                      
            RETURN "NOK".
         END.
    
    FIND crapcrd WHERE crapcrd.cdcooper = par_cdcooper AND
                       crapcrd.nrdconta = par_nrdconta AND
                       crapcrd.nrctrcrd = par_nrctrcrd 
                       NO-LOCK NO-ERROR NO-WAIT.
   
    IF   NOT AVAILABLE crapcrd   THEN
         DO:
             ASSIGN aux_cdcritic = 546
                    aux_dscritic = "". 
                                   
             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,     /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                             
             RETURN "NOK".
         END.
    
    CREATE tt-dados_renovacao_cartao.
    ASSIGN tt-dados_renovacao_cartao.nrctrcrd = crawcrd.nrctrcrd
           tt-dados_renovacao_cartao.dtvalida = crawcrd.dtvalida
           tt-dados_renovacao_cartao.dtaltval = crapcrd.dtaltval
           tt-dados_renovacao_cartao.nrctaav1 = crawcrd.nrctaav1
           tt-dados_renovacao_cartao.nrctaav2 = crawcrd.nrctaav2.
           
    RETURN "OK".

END PROCEDURE.

/********************************************************
    Valida renovacao do cartao e carrega os avalistas
 *******************************************************/
PROCEDURE valida_renovacao_cartao:

    DEF INPUT PARAM par_cdcooper AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_cdagenci AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_nrdcaixa AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_cdoperad AS CHAR                         NO-UNDO.
    DEF INPUT PARAM par_nrdconta AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_dtmvtolt AS DATE                         NO-UNDO.
    DEF INPUT PARAM par_idorigem AS INTE                         NO-UNDO. 
    DEF INPUT PARAM par_idseqttl AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_nmdatela AS CHAR                         NO-UNDO.         
    DEF INPUT PARAM par_dtvalida AS CHAR                         NO-UNDO.
    DEF INPUT PARAM par_nrctrcrd AS INTE                         NO-UNDO.
    
    DEF OUTPUT PARAM TABLE FOR tt-dados-avais.
    DEF OUTPUT PARAM TABLE FOR tt-erro.

    DEF VAR h-b1wgen9999 AS HANDLE NO-UNDO.
    DEF VAR h-b1wgen0110 AS HANDLE NO-UNDO.
    DEF VAR aux_dtcalcu2 AS DATE   NO-UNDO.
    DEF VAR aux_ultdiame AS DATE   NO-UNDO.
    DEF VAR aux_dsoperac AS CHAR   NO-UNDO.
    

    EMPTY TEMP-TABLE tt-dados-avais.
    EMPTY TEMP-TABLE tt-erro.

    FOR FIRST crapass FIELDS(nrdconta inpessoa nrcpfcgc)
                     WHERE crapass.cdcooper = par_cdcooper AND
                       crapass.nrdconta = par_nrdconta
                       NO-LOCK:
    END.
    
    IF NOT VALID-HANDLE(h-b1wgen0110) THEN
       RUN sistema/generico/procedures/b1wgen0110.p
           PERSISTENT SET h-b1wgen0110.

    /*Monta a mensagem da operacao para envio no e-mail*/
    ASSIGN aux_dsoperac = "Tentativa de entregar o cartao com nova "    +
                          "validade (renovacao) na conta "              +
                          STRING(crapass.nrdconta,"zzzz,zzz,9")         +
                          " - CPF/CNPJ "                                +
                         (IF crapass.inpessoa = 1 THEN
                             STRING((STRING(crapass.nrcpfcgc,
                                     "99999999999")),"xxx.xxx.xxx-xx")
                          ELSE
                             STRING((STRING(crapass.nrcpfcgc,
                                     "99999999999999")),
                                     "xx.xxx.xxx/xxxx-xx")).

    /*Verifica se o associado esta no cadastro restritivo. Se estiver,
      sera enviado um e-mail informando a situacao*/
    RUN alerta_fraude IN h-b1wgen0110(INPUT par_cdcooper,
                                      INPUT par_cdagenci,
                                      INPUT par_nrdcaixa,
                                      INPUT par_cdoperad,
                                      INPUT par_nmdatela,
                                      INPUT par_dtmvtolt,
                                      INPUT par_idorigem,
                                      INPUT crapass.nrcpfcgc, 
                                      INPUT crapass.nrdconta,
                                      INPUT par_idseqttl,
                                      INPUT TRUE, /*bloqueia operacao*/
                                      INPUT 18, /*cdoperac*/
                                      INPUT aux_dsoperac,
                                      OUTPUT TABLE tt-erro).
    
    IF VALID-HANDLE(h-b1wgen0110) THEN
       DELETE PROCEDURE(h-b1wgen0110).

    IF RETURN-VALUE <> "OK" THEN
       DO:
          IF NOT TEMP-TABLE tt-erro:HAS-RECORDS THEN
             DO:
                ASSIGN aux_dscritic = "Nao foi possivel verificar o " + 
                                      "cadastro restritivo.".
                
                RUN gera_erro (INPUT par_cdcooper,
                               INPUT par_cdagenci,
                               INPUT par_nrdcaixa,
                               INPUT 1, /*sequencia*/
                               INPUT aux_cdcritic,
                               INPUT-OUTPUT aux_dscritic).

             END.

          RETURN "NOK".

       END.

    FIND FIRST crawcrd WHERE crawcrd.cdcooper = par_cdcooper  AND
                             crawcrd.nrdconta = par_nrdconta  AND
                             crawcrd.nrctrcrd = par_nrctrcrd
                             NO-LOCK NO-ERROR NO-WAIT.
                                      
    IF  NOT AVAILABLE crawcrd  THEN
        DO:
           ASSIGN aux_cdcritic = 546
                  aux_dscritic = "".
    
           RUN gera_erro (INPUT par_cdcooper,
                          INPUT par_cdagenci,
                          INPUT par_nrdcaixa,
                          INPUT 1,            /** Sequencia **/
                          INPUT aux_cdcritic,
                          INPUT-OUTPUT aux_dscritic).
                                                           
           RETURN "NOK".
                
        END.
        
    IF  INTE(SUBSTR(par_dtvalida,01,02)) > 12 OR
        INTE(SUBSTR(par_dtvalida,01,02)) = 0  OR
        INTE(SUBSTR(par_dtvalida,03,04)) < YEAR(par_dtmvtolt)
        THEN
        DO:
            ASSIGN aux_cdcritic = 13
                   aux_dscritic = "".
    
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                                     
            RETURN "NOK".
        END.            
            
    /* Calcula o ultimo dia do mes informado */
    ASSIGN aux_dtcalcu2 = DATE(INTE(SUBSTR(par_dtvalida,01,02)),
                               01,
                               INTE(SUBSTR(par_dtvalida,03,04))).
    ASSIGN aux_ultdiame = ((DATE(MONTH(aux_dtcalcu2),
                                 28,
                                 YEAR(aux_dtcalcu2)) + 4) -
                                 DAY(DATE(MONTH(aux_dtcalcu2),
                                          28,
                                          YEAR(aux_dtcalcu2)) + 4)).            

    IF aux_ultdiame <= crawcrd.dtvalida  OR
       aux_ultdiame <= par_dtmvtolt      OR
       aux_ultdiame = ?                  THEN
       DO:
           ASSIGN aux_cdcritic = 13
                  aux_dscritic = "".

           RUN gera_erro (INPUT par_cdcooper,
                          INPUT par_cdagenci,
                          INPUT par_nrdcaixa,
                          INPUT 1,            /** Sequencia **/
                          INPUT aux_cdcritic,
                          INPUT-OUTPUT aux_dscritic).
                                                  
           RETURN "NOK".

       END.

    RUN sistema/generico/procedures/b1wgen9999.p PERSISTENT SET h-b1wgen9999.
        
    IF  NOT VALID-HANDLE(h-b1wgen9999)  THEN
        DO:
            ASSIGN aux_cdcritic = 0
                   aux_dscritic = "Handle invalido para BO b1wgen9999.".
                   
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                       
            RETURN "NOK".
        END.
        
    RUN lista_avalistas IN h-b1wgen9999 
                               (INPUT par_cdcooper,
                                INPUT par_cdagenci,
                                INPUT par_nrdcaixa,
                                INPUT par_cdoperad,
                                INPUT par_nmdatela,
                                INPUT par_idorigem,
                                INPUT par_nrdconta,
                                INPUT par_idseqttl,
                                INPUT 4, /* Tipo Contrato - Cartao Credito */
                                INPUT par_nrctrcrd,
                                INPUT crawcrd.nrctaav1,
                                INPUT crawcrd.nrctaav2,
                               OUTPUT TABLE tt-dados-avais,
                               OUTPUT TABLE tt-erro).
                
    DELETE PROCEDURE h-b1wgen9999.
    
    IF  RETURN-VALUE = "NOK"  THEN
        RETURN "NOK".
    
    RETURN "OK".     

END PROCEDURE.

/*****************************************************
    Valida avalista e efetua a renovacao do cartao
*****************************************************/
PROCEDURE renova_cartao:

    DEF INPUT PARAM par_cdcooper AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_cdagenci AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_nrdcaixa AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_cdoperad AS CHAR                         NO-UNDO.
    DEF INPUT PARAM par_nrdconta AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_dtmvtolt AS DATE                         NO-UNDO.
    DEF INPUT PARAM par_idorigem AS INTE                         NO-UNDO. 
    DEF INPUT PARAM par_idseqttl AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_nmdatela AS CHAR                         NO-UNDO.
    DEF INPUT PARAM par_nrctrcrd AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_dtvalida AS CHAR                         NO-UNDO.
    DEF INPUT PARAM par_flgimpnp AS LOGI                         NO-UNDO.
    /** ------------------- Parametros do 1 avalista ------------------- **/
    DEF  INPUT PARAM par_nrctaav1 AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nmdaval1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nrcpfav1 AS DECI                           NO-UNDO.
    DEF  INPUT PARAM par_tpdocav1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_dsdocav1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nmdcjav1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_cpfcjav1 AS DECI                           NO-UNDO.
    DEF  INPUT PARAM par_tdccjav1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_doccjav1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_ende1av1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_ende2av1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nrfonav1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_emailav1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nmcidav1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_cdufava1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nrcepav1 AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrender1 AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_complen1 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nrcxaps1 AS INTE                           NO-UNDO.
    /** ------------------- Parametros do 2 avalista ------------------- **/
    DEF  INPUT PARAM par_nrctaav2 AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nmdaval2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nrcpfav2 AS DECI                           NO-UNDO.
    DEF  INPUT PARAM par_tpdocav2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_dsdocav2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nmdcjav2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_cpfcjav2 AS DECI                           NO-UNDO.
    DEF  INPUT PARAM par_tdccjav2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_doccjav2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_ende1av2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_ende2av2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nrfonav2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_emailav2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nmcidav2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_cdufava2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nrcepav2 AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrender2 AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_complen2 AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nrcxaps2 AS INTE                           NO-UNDO.
    
    DEF OUTPUT PARAM TABLE FOR tt-erro.

    DEF  VAR   h-b1wgen9999       AS HANDLE                         NO-UNDO.
    DEF  VAR   h-b1wgen0001       AS HANDLE                         NO-UNDO.
    DEF  VAR   aux_cdlimcrd       AS INTEGER                        NO-UNDO.
    DEF  VAR   aux_dtvalida       AS DATE                           NO-UNDO.
    DEF  VAR   aux_contador       AS INTEGER                        NO-UNDO.
    DEF  VAR   aux_flagerro       AS LOGICAL INIT TRUE              NO-UNDO.
    DEF  VAR   aux_dtcalcu2       AS DATE                           NO-UNDO.
    DEF  VAR   aux_ultdiame       AS DATE                           NO-UNDO.
    
    EMPTY TEMP-TABLE tt-erro.
    
    ASSIGN aux_dsorigem = TRIM(ENTRY(par_idorigem,des_dorigens,","))
           aux_dstransa = "Renovar Cartao de Credito.".
    

    FOR FIRST crapass FIELDS(inpessoa)
                     WHERE crapass.cdcooper = par_cdcooper   AND
                       crapass.nrdconta = par_nrdconta   NO-LOCK:

    END.

    IF   NOT AVAILABLE crapass   THEN
         DO:
             ASSIGN aux_cdcritic = 9
                    aux_dscritic = "".

             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).                

             RETURN "NOK".

         END.       

    TRANS_RENOVA:
    DO TRANSACTION ON ERROR UNDO TRANS_RENOVA, LEAVE TRANS_RENOVA:

       DO aux_contador = 1 TO 10:
    
          FIND FIRST crawcrd WHERE crawcrd.cdcooper = par_cdcooper  AND
                                   crawcrd.nrdconta = par_nrdconta  AND
                                   crawcrd.nrctrcrd = par_nrctrcrd
                                   EXCLUSIVE-LOCK NO-ERROR NO-WAIT.
                                     
          IF  NOT AVAILABLE crawcrd  THEN
              DO:
                  IF  LOCKED crawcrd  THEN
                      DO:
                          aux_dscritic = "Registro de cartao de credito esta" 
                                         + " sendo alterado. Tente Novamente.".
                          PAUSE 1 NO-MESSAGE.
                          NEXT.
                      END.
                  ELSE
                      DO:
                          aux_dscritic = "Registro de cartao de credito nao" +
                                         " encontrado.".
                          
                          LEAVE.
                      END.
              END.

          ASSIGN aux_dscritic = "".

          LEAVE.
            
       END. /** Fim do DO ... TO **/
       
       IF  aux_dscritic <> ""  THEN
           DO:
               ASSIGN aux_cdcritic = 0.

               RUN gera_erro (INPUT par_cdcooper,
                              INPUT par_cdagenci,
                              INPUT par_nrdcaixa,
                              INPUT 1,            /** Sequencia **/
                              INPUT aux_cdcritic,
                              INPUT-OUTPUT aux_dscritic).
                                                      
               UNDO TRANS_RENOVA, RETURN "NOK".
           END.

       DO aux_contador = 1 TO 10:
    
          FIND crapcrd WHERE crapcrd.cdcooper = par_cdcooper   AND
                             crapcrd.nrdconta = par_nrdconta   AND
                             crapcrd.nrctrcrd = par_nrctrcrd
                             EXCLUSIVE-LOCK NO-ERROR NO-WAIT.
                                     
          IF  NOT AVAILABLE crapcrd  THEN
              DO:
                  IF  LOCKED crapcrd  THEN
                      DO:
                          aux_dscritic = "Registro de cartao de credito esta" 
                                         + " sendo alterado. Tente Novamente.".
                          PAUSE 1 NO-MESSAGE.
                          NEXT.
                      END.
                  ELSE
                      DO:
                          aux_dscritic = "Registro de cartao de credito nao" +
                                         " encontrado.".
                          
                          LEAVE.
                      END.
              END.

          IF   crawcrd.insitcrd <> 4 THEN
               ASSIGN aux_dscritic = "Cartao BLOQUEADO, CANCELADO ou ENCERRADO."
                      aux_dscritic = "".

          LEAVE.
            
       END. /** Fim do DO ... TO **/

       IF  aux_dscritic <> ""  THEN
           DO:
               ASSIGN aux_cdcritic = 0.

               RUN gera_erro (INPUT par_cdcooper,
                              INPUT par_cdagenci,
                              INPUT par_nrdcaixa,
                              INPUT 1,            /** Sequencia **/
                              INPUT aux_cdcritic,
                              INPUT-OUTPUT aux_dscritic).
                                                      
               UNDO TRANS_RENOVA, RETURN "NOK".
   
           END.
   
        IF  crapass.inpessoa = 1 THEN
            DO:
                RUN sistema/generico/procedures/b1wgen9999.p PERSISTENT 
                SET h-b1wgen9999.

                IF  NOT VALID-HANDLE(h-b1wgen9999)  THEN
                    DO:
                        ASSIGN aux_cdcritic = 0
                               aux_dscritic = "Handle invalido para BO b1wgen9999.".
                           
                        RUN gera_erro (INPUT par_cdcooper,
                                       INPUT par_cdagenci,
                                       INPUT par_nrdcaixa,
                                       INPUT 1,            /** Sequencia **/
                                       INPUT aux_cdcritic,
                                       INPUT-OUTPUT aux_dscritic).
                                             
                        RETURN "NOK".
                    END.
                   
                /* Atualizar os avalistas */
                RUN atualiza_tabela_avalistas IN h-b1wgen9999
                                           (INPUT par_cdcooper,
                                            INPUT par_cdoperad,
                                            INPUT par_idorigem,
                                            INPUT "CARTAO CRED.",
                                            INPUT par_nrdconta,
                                            INPUT par_dtmvtolt,
                                            INPUT 4, /* Tp.Ctrato - Cart.Cred */
                                            INPUT par_nrctrcrd,
                                            INPUT par_cdagenci,
                                            INPUT par_nrdcaixa,
                                            /* 1 avalista */
                                            INPUT par_nrctaav1,
                                            INPUT par_nmdaval1,
                                            INPUT par_nrcpfav1,
                                            INPUT par_tpdocav1,
                                            INPUT par_dsdocav1,
                                            INPUT par_nmdcjav1,
                                            INPUT par_cpfcjav1,
                                            INPUT par_tdccjav1,
                                            INPUT par_doccjav1,
                                            INPUT par_ende1av1,
                                            INPUT par_ende2av1,
                                            INPUT par_nrfonav1,
                                            INPUT par_emailav1,
                                            INPUT par_nmcidav1,
                                            INPUT par_cdufava1,
                                            INPUT par_nrcepav1,
                                            INPUT "", /* Nacao */
                                            INPUT 0,  /* Vl.Endiv*/
                                            INPUT 0,  /* Vl.Rend */
                                            INPUT par_nrender1, 
                                            INPUT par_complen1,
                                            INPUT par_nrcxaps1,
                                            INPUT 0,  /* inpessoa 1o avail */
                                            INPUT ?,  /* dtnascto 1o avail */
                                            /* 2 avalista */
                                            INPUT par_nrctaav2,
                                            INPUT par_nmdaval2,
                                            INPUT par_nrcpfav2,
                                            INPUT par_tpdocav2,
                                            INPUT par_dsdocav2,
                                            INPUT par_nmdcjav2,
                                            INPUT par_cpfcjav2,
                                            INPUT par_tdccjav2,
                                            INPUT par_doccjav2,
                                            INPUT par_ende1av2,
                                            INPUT par_ende2av2,
                                            INPUT par_nrfonav2,
                                            INPUT par_emailav2,
                                            INPUT par_nmcidav2,
                                            INPUT par_cdufava2,
                                            INPUT par_nrcepav2,
                                            INPUT "", /* Nacao */
                                            INPUT 0,  /* Vl.Endiv*/
                                            INPUT 0,  /* Vl.Rend */
                                            INPUT par_nrender2, 
                                            INPUT par_complen2,
                                            INPUT par_nrcxaps2,
                                            INPUT 0,  /* inpessoa 2o avail */
                                            INPUT ?,  /* dtnascto 2o avail */
                                            INPUT ""). /* Bens */                                    
        
               DELETE PROCEDURE h-b1wgen9999. 
       

            END.

       /* Calcula o ultimo dia do mes informado */
       aux_dtcalcu2 = DATE(INTE(SUBSTR(par_dtvalida,01,02)),
                           01,
                           INTE(SUBSTR(par_dtvalida,03,04))).
       aux_ultdiame = ((DATE(MONTH(aux_dtcalcu2),
                             28,
                             YEAR(aux_dtcalcu2)) + 4) -
                             DAY(DATE(MONTH(aux_dtcalcu2),
                                      28,
                                      YEAR(aux_dtcalcu2)) + 4)).
       
       ASSIGN aux_dtvalida     = crawcrd.dtvalida
              crawcrd.dtvalida = aux_ultdiame
              crapcrd.dtaltval = par_dtmvtolt
              crawcrd.cdoperad = par_cdoperad
              crapcrd.dtvalida = crawcrd.dtvalida
              crawcrd.flgimpnp    = par_flgimpnp
              crawcrd.nrctaav1    = par_nrctaav1
              crawcrd.nrctaav2    = par_nrctaav2
              crawcrd.dsendav1[1] = IF par_nrctaav1 <> 0 THEN 
                                       ""
                                    ELSE 
                                       CAPS(par_ende1av1) + " " +
                                       STRING(par_nrender1)
              crawcrd.dsendav1[2] = IF par_nrctaav1 <> 0 THEN 
                                       ""
                                    ELSE 
                                       CAPS(par_ende2av1) + " - " + 
                                       CAPS(par_nmcidav1) + " - " +
                                       STRING(par_nrcepav1,"99999,999") +
                                       " - " + CAPS(par_cdufava1)
              crawcrd.dsendav2[1] = IF par_nrctaav2 <> 0 THEN 
                                       ""
                                    ELSE 
                                       CAPS(par_ende1av2) + " " +
                                       STRING(par_nrender2)
              crawcrd.dsendav2[2] = IF par_nrctaav2 <> 0 THEN 
                                       ""
                                    ELSE 
                                       CAPS(par_ende2av2) + " - " + 
                                       CAPS(par_nmcidav2) + " - " +
                                       STRING(par_nrcepav2,"99999,999") +
                                       " - " + CAPS(par_cdufava2)
              crawcrd.nmdaval1    = IF par_nrctaav1 <> 0 THEN 
                                       ""
                                    ELSE 
                                       par_nmdaval1
              crawcrd.nmdaval2    = IF par_nrctaav2 <> 0 THEN 
                                       "" 
                                    ELSE 
                                       par_nmdaval2
              crawcrd.dscpfav1    = IF par_nrctaav1 <> 0 THEN 
                                       "" 
                                    ELSE 
                                       par_dsdocav1
              crawcrd.dscpfav2    = IF par_nrctaav2 <> 0 THEN 
                                       ""
                                    ELSE 
                                       par_dsdocav2.

       IF  par_nrctaav1 = 0 AND par_nmdaval1 <> ""  THEN
           DO:
               ASSIGN crawcrd.dscfcav1 = " "
                      crawcrd.dscpfav1 = TRIM(CAPS(par_tpdocav1)) + " " +
                                         TRIM(CAPS(par_dsdocav1)) + 
                                         " C.P.F. " + STRING(par_nrcpfav1).
               
               IF  par_cpfcjav1 > 0  THEN
                   DO:    
                       ASSIGN crawcrd.dscfcav1 = TRIM(CAPS(par_tdccjav1)) + 
                                                 " " +
                                                 TRIM(CAPS(par_doccjav1)) + 
                                                 " C.P.F. " +
                                                 STRING(par_cpfcjav1).
                   END.
           END.        

       IF  par_nrctaav2 = 0 AND par_nmdaval2 <> ""  THEN
           DO:
               ASSIGN crawcrd.dscfcav2 = " "
                      crawcrd.dscpfav2 = TRIM(CAPS(par_tpdocav2)) + " " +
                                         TRIM(CAPS(par_dsdocav2)) + 
                                         " C.P.F. " + STRING(par_nrcpfav2).
        
               IF  par_cpfcjav2 > 0  THEN
                   DO:    
                       ASSIGN crawcrd.dscfcav2 = TRIM(CAPS(par_tdccjav2)) + 
                                                 " " +
                                                 TRIM(CAPS(par_doccjav2)) + 
                                                 " C.P.F. " +
                                                 STRING(par_cpfcjav2).
                   END.
           END.   
   
   END. /* Fim da transacao */

   RUN proc_gerar_log (INPUT par_cdcooper,
                       INPUT par_cdoperad,
                       INPUT "",
                       INPUT aux_dsorigem,
                       INPUT aux_dstransa,
                       INPUT TRUE,
                       INPUT par_idseqttl,
                       INPUT par_nmdatela,
                       INPUT par_nrdconta,
                      OUTPUT aux_nrdrowid).    
                       
   RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                           INPUT "nrcrcard",
                           INPUT "",
                           INPUT crawcrd.nrcrcard).
                           
   RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                           INPUT "dtvalida",
                           INPUT aux_dtvalida,
                           INPUT crawcrd.dtvalida).                            
                                                   
   RETURN "OK".

END PROCEDURE.

/************************************
    OPCAO CANCELAMENTO/BLOQUEIO
*************************************/
/*********************************************************************
    Verificar permissao para acessar a opcao cancelamento/bloqueio
 *********************************************************************/
PROCEDURE verifica_acesso_cancblq:

    DEF  INPUT PARAM par_cdcooper AS INTE                        NO-UNDO.
    DEF  INPUT PARAM par_cdagenci AS INTE                        NO-UNDO.
    DEF  INPUT PARAM par_nrdcaixa AS INTE                        NO-UNDO.
    DEF  INPUT PARAM par_cdoperad AS CHAR                        NO-UNDO.
    DEF  INPUT PARAM par_nrdconta AS INTE                        NO-UNDO.
    DEF  INPUT PARAM par_nrctrcrd AS INTE                        NO-UNDO.
    
    DEF OUTPUT PARAM par_flgadmbb AS LOGI                        NO-UNDO.

    DEF OUTPUT PARAM TABLE FOR tt-erro.

    EMPTY TEMP-TABLE tt-erro.
    
    FIND crawcrd WHERE crawcrd.cdcooper = par_cdcooper AND
                       crawcrd.nrdconta = par_nrdconta AND
                       crawcrd.nrctrcrd = par_nrctrcrd NO-LOCK NO-ERROR.

    IF   NOT AVAILABLE crawcrd   THEN
         DO:
             ASSIGN aux_cdcritic = 535
                    aux_dscritic = "".

             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                                      
             RETURN "NOK".
             
         END.

    IF   crawcrd.insitcrd = 4 AND crawcrd.dtsol2vi <> ?   THEN
         DO:
            ASSIGN aux_cdcritic = 0
                   aux_dscritic = "Opcao nao disponivel. 2.Via do cartao foi " +
                                  "solicitada.".

            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                                      
            RETURN "NOK".
         END.

    par_flgadmbb = IF f_verifica_adm(crawcrd.cdadmcrd) = 1 THEN
                                      TRUE
                                   ELSE
                                          FALSE.

    RETURN "OK".

END PROCEDURE.

/***************************************************************
        Verificar se o cartao pode ou nao ser cancelado/bloquado
****************************************************************/
PROCEDURE verifica_canc_cartao:
    
    DEF  INPUT  PARAM  par_cdcooper  AS  INTE  NO-UNDO.                   
    DEF  INPUT  PARAM  par_cdagenci  AS  INTE  NO-UNDO.                
    DEF  INPUT  PARAM  par_nrdcaixa  AS  INTE  NO-UNDO.                     
    DEF  INPUT  PARAM  par_cdoperad  AS  CHAR  NO-UNDO.                
    DEF  INPUT  PARAM  par_nrdconta  AS  INTE  NO-UNDO.
    DEF  INPUT  PARAM  par_nrctrcrd  AS  INTE  NO-UNDO.
    
    DEF OUTPUT  PARAM TABLE FOR tt-erro.

    FIND crawcrd WHERE crawcrd.cdcooper = par_cdcooper   AND
                       crawcrd.nrdconta = par_nrdconta   AND
                       crawcrd.nrctrcrd = par_nrctrcrd   NO-LOCK NO-ERROR.

    IF   NOT AVAILABLE crawcrd   THEN
         DO:
             ASSIGN aux_cdcritic = 535
                    aux_dscritic = "".

             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).                
                
             RETURN "NOK".
         END.
         
    IF   crawcrd.insitcrd <> 4   THEN
         DO:
             ASSIGN aux_cdcritic = 538
                    aux_dscritic = "". 
                                   
             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,     /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).

             RETURN "NOK".
         END.
         
    RETURN "OK".
                    
END PROCEDURE.

/******************************************************
    Efetuar o bloqueio do cartao -> Cartoes do BB
                        OU
    Efetuar o cancelamento do cartao -> Demais cartoes
 *****************************************************/
PROCEDURE cancela_bloqueia_cartao:

    DEF  INPUT  PARAM  par_cdcooper  AS  INTE  NO-UNDO.                   
    DEF  INPUT  PARAM  par_cdagenci  AS  INTE  NO-UNDO.                
    DEF  INPUT  PARAM  par_nrdcaixa  AS  INTE  NO-UNDO.                     
    DEF  INPUT  PARAM  par_cdoperad  AS  CHAR  NO-UNDO.                
    DEF  INPUT  PARAM  par_nrdconta  AS  INTE  NO-UNDO.
    DEF  INPUT  PARAM  par_nrctrcrd  AS  INTE  NO-UNDO.
    DEF  INPUT  PARAM  par_indposic  AS  INTE  NO-UNDO.
    DEF  INPUT  PARAM  par_dtmvtolt  AS  DATE  NO-UNDO.
    DEF  INPUT  PARAM  par_idorigem  AS  INTE  NO-UNDO. 
    DEF  INPUT  PARAM  par_idseqttl  AS  INTE  NO-UNDO.
    DEF  INPUT  PARAM  par_nmdatela  AS  CHAR  NO-UNDO.
    DEF  INPUT  PARAM  par_repsolic  AS  CHAR  NO-UNDO.
    DEF  INPUT  PARAM  par_cpfrepre  AS  DEC   NO-UNDO.

    DEF OUTPUT  PARAM  par_mensagem  AS  CHAR  NO-UNDO.
    DEF OUTPUT  PARAM TABLE FOR tt-erro.

    DEF  VAR aux_dsmotivo  AS CHAR  INIT "Pelo socio,Pela COOP,Por fraude"    NO-UNDO.
    DEF  VAR aux_cdmotivo  AS CHAR  INIT "3,4,6"                      NO-UNDO.
    DEF  VAR aux_contador  AS INTE                                    NO-UNDO.
    DEF  VAR aux_insitcrd  AS INTE                                    NO-UNDO.
    
    ASSIGN aux_dsorigem = TRIM(ENTRY(par_idorigem,des_dorigens,","))
           aux_dstransa = "Cancelamento/Bloqueio de Cartao de Credito.".


    /* #272659 alertar quando for cartao do BB */
    IF CAN-FIND(crawcrd WHERE crawcrd.cdcooper = par_cdcooper AND
                              crawcrd.nrdconta = par_nrdconta AND
                              crawcrd.nrctrcrd = par_nrctrcrd AND
                              CAN-DO("83,85,87",STRING(crawcrd.cdadmcrd))) THEN
    DO:
        ASSIGN par_mensagem = "O comando realizado bloqueia o cartão. Para " +
                              "realizar o cancelamento do plástico o cooperado " +
                              "deve contatar a Central de Atendimento do BB.".
    END.


    TRANS_CANCBLQ:
    DO TRANSACTION ON ERROR UNDO TRANS_CANCBLQ, LEAVE TRANS_CANCBLQ:

        FOR FIRST crapass FIELDS(inpessoa) 
                             WHERE crapass.cdcooper = par_cdcooper AND
                           crapass.nrdconta = par_nrdconta NO-LOCK:
                END.

        IF crapass.inpessoa = 2 THEN
            DO:
                IF par_repsolic = "" THEN
                    DO:
                        ASSIGN aux_cdcritic = 0
                               aux_dscritic = "Incluir um Representante".
        
                        RUN gera_erro (INPUT par_cdcooper,
                                       INPUT par_cdagenci,
                                       INPUT par_nrdcaixa,
                                       INPUT 1,            /** Sequencia **/
                                       INPUT aux_cdcritic,
                                       INPUT-OUTPUT aux_dscritic).
        
                        RETURN "NOK".
                    END.
        
                FOR EACH craphcj
                   WHERE craphcj.cdcooper = par_cdcooper
                     AND craphcj.nrdconta = par_nrdconta NO-LOCK:
        
                   FOR FIRST crapass FIELDS(inpessoa)
                       WHERE crapass.cdcooper = craphcj.cdcooper   AND
                             (crapass.nrcpfcgc = craphcj.nrcpfpri  OR
                              crapass.nrcpfcgc = craphcj.nrcpfseg  OR
                              crapass.nrcpfcgc = craphcj.nrcpfter) AND
                             crapass.nmprimtl = par_repsolic       NO-LOCK: END.
                
                   IF   NOT AVAIL crapass THEN
                        DO:
                            FIND FIRST crapncp
                                WHERE (crapncp.nrdoccpf = craphcj.nrcpfpri OR
                                       crapncp.nrdoccpf = craphcj.nrcpfseg OR
                                       crapncp.nrdoccpf = craphcj.nrcpfter) 
                                  AND crapncp.nmpessoa  = par_repsolic NO-LOCK NO-ERROR.
        
                            IF   NOT AVAIL crapncp THEN
                                 DO:
        
                                     ASSIGN aux_cdcritic = 0
                                            aux_dscritic = "Representante Invalido".
        
                                     RUN gera_erro (INPUT par_cdcooper,
                                                    INPUT par_cdagenci,
                                                    INPUT par_nrdcaixa,
                                                    INPUT 1,            /** Sequencia **/
                                                    INPUT aux_cdcritic,
                                                    INPUT-OUTPUT aux_dscritic).
        
                                     RETURN "NOK".
        
                                 END.
                        END.
                END.
            END.

       DO aux_contador = 1 TO 10:
    
          FIND FIRST crawcrd WHERE crawcrd.cdcooper = par_cdcooper  AND
                                   crawcrd.nrdconta = par_nrdconta  AND
                                   crawcrd.nrctrcrd = par_nrctrcrd
                                   EXCLUSIVE-LOCK NO-ERROR NO-WAIT.
                                     
          IF  NOT AVAILABLE crawcrd  THEN
              DO:
                  IF  LOCKED crawcrd  THEN
                      DO:
                          aux_dscritic = "Registro de cartao de credito esta" 
                                         + " sendo alterado. Tente Novamente.".
                          PAUSE 1 NO-MESSAGE.
                          NEXT.
                      END.
                  ELSE
                      DO:
                          aux_dscritic = "Registro de cartao de credito nao" +
                                         " encontrado.".
                          
                          LEAVE.
                      END.
              END.

          ASSIGN aux_dscritic = "".

          LEAVE.
            
       END. /** Fim do DO ... TO **/
       
       IF  aux_dscritic <> ""  THEN
           DO:
               ASSIGN aux_cdcritic = 0.

               RUN gera_erro (INPUT par_cdcooper,
                              INPUT par_cdagenci,
                              INPUT par_nrdcaixa,
                              INPUT 1,            /** Sequencia **/
                              INPUT aux_cdcritic,
                              INPUT-OUTPUT aux_dscritic).
                                                      
               UNDO TRANS_CANCBLQ, RETURN "NOK".
           END.
       
       IF   crawcrd.insitcrd <> 4 THEN
            DO:
                ASSIGN aux_cdcritic = 538
                       aux_dscritic = "". 
                                   
                RUN gera_erro (INPUT par_cdcooper,
                               INPUT par_cdagenci,
                               INPUT par_nrdcaixa,
                               INPUT 1,     /** Sequencia **/
                               INPUT aux_cdcritic,
                               INPUT-OUTPUT aux_dscritic).
                               
                RUN proc_gerar_log (INPUT par_cdcooper,
                                    INPUT par_cdoperad,
                                    INPUT aux_dscritic,
                                    INPUT aux_dsorigem,
                                    INPUT aux_dstransa,
                                    INPUT FALSE,
                                    INPUT par_idseqttl,
                                    INPUT par_nmdatela,
                                    INPUT par_nrdconta,
                                   OUTPUT aux_nrdrowid).
                               
                RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                                        INPUT "nrcrcard",
                                        INPUT "",
                                        INPUT crawcrd.nrcrcard).
                                             
                UNDO TRANS_CANCBLQ, RETURN "NOK".
            END.

       DO aux_contador = 1 TO 10:
    
          FIND  crapcrd WHERE crapcrd.cdcooper = par_cdcooper      AND
                              crapcrd.nrdconta = crawcrd.nrdconta  AND
                              crapcrd.nrctrcrd = crawcrd.nrctrcrd
                              EXCLUSIVE-LOCK NO-ERROR NO-WAIT.
          
          IF  NOT AVAILABLE crapcrd  THEN
              DO:
                 IF  LOCKED crapcrd  THEN
                     DO:
                        aux_dscritic = "Registro de cartao de credito " +
                                       "esta sendo alterado. Tente " +
                                       "Novamente.".
                        PAUSE 1 NO-MESSAGE.
                        NEXT.
                     END.
                 ELSE
                     DO:
                        aux_dscritic = "Registro de cartao de credito " +
                                       "nao encontrado.".
                        LEAVE.
                     END.
              END.

       END. /** Fim do DO ... TO **/
            
       IF  aux_dscritic <> ""  THEN
           DO:
               ASSIGN aux_cdcritic = 0.

               RUN gera_erro (INPUT par_cdcooper,
                              INPUT par_cdagenci,
                              INPUT par_nrdcaixa,
                              INPUT 1,            /** Sequencia **/
                              INPUT aux_cdcritic,
                              INPUT-OUTPUT aux_dscritic).
                                                      
               UNDO TRANS_CANCBLQ, RETURN "NOK".
           END.
       
        /* Inicio - Alteracoes referentes a M181 - Rafael Maciel (RKAM) */
        IF par_cdagenci = 0 THEN
          ASSIGN par_cdagenci = glb_cdagenci.
        /* Fim - Alteracoes referentes a M181 - Rafael Maciel (RKAM) */


       ASSIGN aux_insitcrd     = crawcrd.insitcrd
              crawcrd.insitcrd = 5
              /* INICIO - dados para o BI em caso de cancelamento - MACIEL (RKAM) */
              crawcrd.cdopeexc = par_cdoperad 
              crawcrd.cdageexc = par_cdagenci
              crawcrd.dtinsexc = TODAY
              /* FIM - dados para o BI em caso de cancelamento - MACIEL (RKAM) */
              crawcrd.flgctitg = IF f_verifica_adm(crawcrd.cdadmcrd) = 1 THEN
                                    0 /*Enviar*/
                                 ELSE 3 /*Inativo*/
              crawcrd.dtcancel = par_dtmvtolt
              crawcrd.cdmotivo =
                          INTEGER(TRIM(ENTRY(par_indposic,aux_cdmotivo)))
              crawcrd.cdoperad = par_cdoperad
              crawcrd.nrrepcan = par_cpfrepre

              crapcrd.dtcancel = par_dtmvtolt
              crapcrd.cdmotivo =
                          INTEGER(TRIM(ENTRY(par_indposic,aux_cdmotivo))).

              
       FIND craptlc WHERE craptlc.cdcooper = par_cdcooper      AND
                          craptlc.cdadmcrd = crawcrd.cdadmcrd  AND
                          craptlc.tpcartao = crawcrd.tpcartao  AND
                          craptlc.cdlimcrd = crawcrd.cdlimcrd  AND
                          craptlc.dddebito = 0                    
                          NO-LOCK NO-ERROR.

       IF   NOT AVAILABLE craptlc   THEN
            DO:
               ASSIGN aux_cdcritic = 269
                      aux_dscritic = "". 
                                   
               RUN gera_erro (INPUT par_cdcooper,
                              INPUT par_cdagenci,
                              INPUT par_nrdcaixa,
                              INPUT 1,     /** Sequencia **/
                              INPUT aux_cdcritic,
                              INPUT-OUTPUT aux_dscritic).
                                             
               UNDO TRANS_CANCBLQ, RETURN "NOK".
                     
            END.

    END. /* DO TRANSACTION */
    
    RUN proc_gerar_log (INPUT par_cdcooper,
                        INPUT par_cdoperad,
                        INPUT "",
                        INPUT aux_dsorigem,
                        INPUT aux_dstransa,
                        INPUT TRUE,
                        INPUT par_idseqttl,
                        INPUT par_nmdatela,
                        INPUT par_nrdconta,
                       OUTPUT aux_nrdrowid).    
                       
    RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                            INPUT "nrcrcard",
                            INPUT "",
                            INPUT crawcrd.nrcrcard).
                                                   
    RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                            INPUT "insitcrd",
                            INPUT aux_insitcrd,
                            INPUT crawcrd.insitcrd).
    
    RETURN "OK".

END PROCEDURE.

/******************************************************
    Desbloquear cartao BB ou 
    Desfazer cancelamento caso nao seja um cartao BB
 *****************************************************/
PROCEDURE desfaz_cancblq_cartao:

    DEF  INPUT  PARAM  par_cdcooper  AS  INTE  NO-UNDO.                   
    DEF  INPUT  PARAM  par_cdagenci  AS  INTE  NO-UNDO.                
    DEF  INPUT  PARAM  par_nrdcaixa  AS  INTE  NO-UNDO.                     
    DEF  INPUT  PARAM  par_cdoperad  AS  CHAR  NO-UNDO.                
    DEF  INPUT  PARAM  par_nrdconta  AS  INTE  NO-UNDO.
    DEF  INPUT  PARAM  par_nrctrcrd  AS  INTE  NO-UNDO.
    DEF  INPUT  PARAM  par_indposic  AS  INTE  NO-UNDO.
    DEF  INPUT  PARAM  par_dtmvtolt  AS  DATE  NO-UNDO.
    DEF  INPUT  PARAM  par_idorigem  AS  INTE  NO-UNDO. 
    DEF  INPUT  PARAM  par_idseqttl  AS  INTE  NO-UNDO.
    DEF  INPUT  PARAM  par_nmdatela  AS  CHAR  NO-UNDO.
    DEF  INPUT  PARAM  par_cpfrepre  AS  DEC   NO-UNDO.

    DEF OUTPUT  PARAM  par_msgalert  AS  CHAR  NO-UNDO.
    DEF OUTPUT  PARAM TABLE FOR tt-erro.

    DEF  VAR aux_insitcrd  AS INTE                                    NO-UNDO.
    DEF  VAR aux_contador  AS INTE                                    NO-UNDO.
    
    ASSIGN aux_dsorigem = TRIM(ENTRY(par_idorigem,des_dorigens,","))
           aux_dstransa = "Desfazer Cancelamento/Bloqueio de Cartao Credito.".
    
    TRANS_DESFAZ:
    DO TRANSACTION ON ERROR UNDO TRANS_DESFAZ, LEAVE TRANS_DESFAZ:

       DO aux_contador = 1 TO 10:
    
          FIND FIRST crawcrd WHERE crawcrd.cdcooper = par_cdcooper  AND
                                   crawcrd.nrdconta = par_nrdconta  AND
                                   crawcrd.nrctrcrd = par_nrctrcrd
                                   EXCLUSIVE-LOCK NO-ERROR NO-WAIT.
                                     
          IF  NOT AVAILABLE crawcrd  THEN
              DO:
                  IF  LOCKED crawcrd  THEN
                      DO:
                          aux_dscritic = "Registro de cartao de credito esta" 
                                         + " sendo alterado. Tente Novamente.".
                          PAUSE 1 NO-MESSAGE.
                          NEXT.
                      END.
                  ELSE
                      DO:
                          aux_dscritic = "Registro de cartao de credito nao" +
                                         " encontrado.".
                          
                          LEAVE.
                      END.
              END.

          ASSIGN aux_dscritic = "".

          LEAVE.
            
       END. /** Fim do DO ... TO **/
       
       IF  aux_dscritic <> ""  THEN
           DO:
               ASSIGN aux_cdcritic = 0.

               RUN gera_erro (INPUT par_cdcooper,
                              INPUT par_cdagenci,
                              INPUT par_nrdcaixa,
                              INPUT 1,            /** Sequencia **/
                              INPUT aux_cdcritic,
                              INPUT-OUTPUT aux_dscritic).
                              
               UNDO TRANS_DESFAZ, RETURN "NOK".
           END.
       
       IF   crawcrd.insitcrd <> 5 THEN
            DO:
                ASSIGN aux_cdcritic = 554
                       aux_dscritic = "". 
                                   
                RUN gera_erro (INPUT par_cdcooper,
                               INPUT par_cdagenci,
                               INPUT par_nrdcaixa,
                               INPUT 1,     /** Sequencia **/
                               INPUT aux_cdcritic,
                               INPUT-OUTPUT aux_dscritic).
                                             
                RUN proc_gerar_log (INPUT par_cdcooper,
                                    INPUT par_cdoperad,
                                    INPUT aux_dscritic,
                                    INPUT aux_dsorigem,
                                    INPUT aux_dstransa,
                                    INPUT FALSE,
                                    INPUT par_idseqttl,
                                    INPUT par_nmdatela,
                                    INPUT par_nrdconta,
                                   OUTPUT aux_nrdrowid).
                               
                RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                                        INPUT "nrcrcard",
                                        INPUT "",
                                        INPUT crawcrd.nrcrcard).
                
                UNDO TRANS_DESFAZ, RETURN "NOK".
            END.

       IF   NOT CAN-DO("83,84,85,86,87,88",STRING(crawcrd.cdadmcrd)) AND
            crawcrd.dtcancel <> par_dtmvtolt                         THEN
            DO:
                ASSIGN aux_cdcritic = 551
                       aux_dscritic = "". 
                                   
                RUN gera_erro (INPUT par_cdcooper,
                               INPUT par_cdagenci,
                               INPUT par_nrdcaixa,
                               INPUT 1,     /** Sequencia **/
                               INPUT aux_cdcritic,
                               INPUT-OUTPUT aux_dscritic).
                                             
                RUN proc_gerar_log (INPUT par_cdcooper,
                                    INPUT par_cdoperad,
                                    INPUT aux_dscritic,
                                    INPUT aux_dsorigem,
                                    INPUT aux_dstransa,
                                    INPUT FALSE,
                                    INPUT par_idseqttl,
                                    INPUT par_nmdatela,
                                    INPUT par_nrdconta,
                                   OUTPUT aux_nrdrowid).
                               
                RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                                        INPUT "nrcrcard",
                                        INPUT "",
                                        INPUT crawcrd.nrcrcard).
                
                UNDO TRANS_DESFAZ, RETURN "NOK".
            END.
                   
       DO aux_contador = 1 TO 10:
    
          FIND  crapcrd WHERE crapcrd.cdcooper = par_cdcooper      AND
                              crapcrd.nrdconta = crawcrd.nrdconta  AND
                              crapcrd.nrctrcrd = crawcrd.nrctrcrd
                              EXCLUSIVE-LOCK NO-ERROR NO-WAIT.
          
          IF  NOT AVAILABLE crapcrd  THEN
              DO:
                 IF  LOCKED crapcrd  THEN
                     DO:
                        aux_dscritic = "Registro de cartao de credito " +
                                       "esta sendo alterado. Tente " +
                                       "Novamente.".
                        PAUSE 1 NO-MESSAGE.
                        NEXT.
                     END.
                 ELSE
                     DO:
                        aux_dscritic = "Registro de cartao de credito " +
                                       "nao encontrado.".
                        LEAVE.
                     END.
              END.

       END. /** Fim do DO ... TO **/
            
       IF  aux_dscritic <> ""  THEN
           DO:
               ASSIGN aux_cdcritic = 0.

               RUN gera_erro (INPUT par_cdcooper,
                              INPUT par_cdagenci,
                              INPUT par_nrdcaixa,
                              INPUT 1,            /** Sequencia **/
                              INPUT aux_cdcritic,
                              INPUT-OUTPUT aux_dscritic).
                                                      
               UNDO TRANS_DESFAZ, RETURN "NOK".
           END.
       
       ASSIGN aux_insitcrd     = crawcrd.insitcrd 
              crawcrd.insitcrd = 4
              crawcrd.flgctitg = IF CAN-DO("83,84,85,86,87,88",
                                    STRING(crawcrd.cdadmcrd)) THEN 
                                    5  /* Desbloqueada */
                                 ELSE 
                                    3  /* Nao Enviada */
              crawcrd.dtcancel = ?
              crawcrd.cdmotivo = 0
              crawcrd.cdoperad = par_cdoperad
              crawcrd.nrprotoc = 0
              crawcrd.nrrepcan = 0  

              crapcrd.dtcancel = ?
              crapcrd.cdmotivo = 0
              crapcrd.nrprotoc = 0.

        
       /*  Testa administradora */
       FIND crapadc WHERE crapadc.cdcooper = par_cdcooper      AND
                          crapadc.cdadmcrd = crawcrd.cdadmcrd       
                          NO-LOCK NO-ERROR.

       IF   NOT AVAILABLE crapadc  THEN
            DO:
                ASSIGN aux_cdcritic = 607
                       aux_dscritic = "". 
                                   
                RUN gera_erro (INPUT par_cdcooper,
                               INPUT par_cdagenci,
                               INPUT par_nrdcaixa,
                               INPUT 1,     /** Sequencia **/
                               INPUT aux_cdcritic,
                               INPUT-OUTPUT aux_dscritic).
                                             
                UNDO TRANS_DESFAZ, RETURN "NOK".
            END.

       /* Testa dia do debito */
       FIND craptlc WHERE craptlc.cdcooper = par_cdcooper      AND
                          craptlc.cdadmcrd = crawcrd.cdadmcrd  AND
                          craptlc.tpcartao = 0                 AND
                          craptlc.cdlimcrd = 0                 AND
                          craptlc.dddebito = crawcrd.dddebito     
                          NO-LOCK NO-ERROR.

       IF   NOT AVAILABLE craptlc   OR
            craptlc.insittab <> 0   THEN
            DO:
                ASSIGN aux_cdcritic = 533
                       aux_dscritic = "". 
                                   
                RUN gera_erro (INPUT par_cdcooper,
                               INPUT par_cdagenci,
                               INPUT par_nrdcaixa,
                               INPUT 1,     /** Sequencia **/
                               INPUT aux_cdcritic,
                               INPUT-OUTPUT aux_dscritic).
                                             
                UNDO TRANS_DESFAZ, RETURN "NOK".
            END.
            
       /* Testa e soma limite de credito */
       FIND craptlc WHERE craptlc.cdcooper = par_cdcooper      AND
                          craptlc.cdadmcrd = crawcrd.cdadmcrd  AND
                          craptlc.tpcartao = crawcrd.tpcartao  AND
                          craptlc.cdlimcrd = crawcrd.cdlimcrd  AND
                          craptlc.dddebito = 0                    
                          NO-LOCK NO-ERROR.

       IF   NOT AVAILABLE craptlc   THEN
            DO:
                ASSIGN aux_cdcritic = 269
                       aux_dscritic = "". 
                                   
                RUN gera_erro (INPUT par_cdcooper,
                               INPUT par_cdagenci,
                               INPUT par_nrdcaixa,
                               INPUT 1,     /** Sequencia **/
                               INPUT aux_cdcritic,
                               INPUT-OUTPUT aux_dscritic).
                                             
                UNDO TRANS_DESFAZ, RETURN "NOK".
            END.

       IF   craptlc.insittab <> 0 THEN
            DO: 
                ASSIGN aux_cdcritic = 604
                       aux_dscritic = "". 
                                   
                RUN gera_erro (INPUT par_cdcooper,
                               INPUT par_cdagenci,
                               INPUT par_nrdcaixa,
                               INPUT 1,     /** Sequencia **/
                               INPUT aux_cdcritic,
                               INPUT-OUTPUT aux_dscritic).
                                             
                UNDO TRANS_DESFAZ, RETURN "NOK".
            END.

       IF   f_verifica_adm(crawcrd.cdadmcrd) = 1 THEN
            ASSIGN par_msgalert = "Oriente o cooperado a ligar no 0800 99 " +
                                  "0001 e solicitar 2via do cartao.".
                     
    END. /* DO TRANSACTION */
    
    RUN proc_gerar_log (INPUT par_cdcooper,
                        INPUT par_cdoperad,
                        INPUT "",
                        INPUT aux_dsorigem,
                        INPUT aux_dstransa,
                        INPUT TRUE,
                        INPUT par_idseqttl,
                        INPUT par_nmdatela,
                        INPUT par_nrdconta,
                       OUTPUT aux_nrdrowid).    

    RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                            INPUT "nrcrcard",
                            INPUT "",
                            INPUT crawcrd.nrcrcard).
                            
    RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                            INPUT "insitcrd",
                            INPUT aux_insitcrd,
                            INPUT crawcrd.insitcrd). 
    
    RETURN "OK".

END PROCEDURE.

/************************************
    OPCAO ENCERRAMENTO
*************************************/
/*********************************************************************
    Verificar permissao para acessar a opcao encerramento
 *********************************************************************/
PROCEDURE verifica_acesso_enc:

    DEF  INPUT PARAM par_cdcooper AS INTE                        NO-UNDO.
    DEF  INPUT PARAM par_cdagenci AS INTE                        NO-UNDO.
    DEF  INPUT PARAM par_nrdcaixa AS INTE                        NO-UNDO.
    DEF  INPUT PARAM par_cdoperad AS CHAR                        NO-UNDO.
    DEF  INPUT PARAM par_nrdconta AS INTE                        NO-UNDO.
    DEF  INPUT PARAM par_nrctrcrd AS INTE                        NO-UNDO.
    
    DEF OUTPUT PARAM par_flgadmbb AS LOGI                        NO-UNDO.

    DEF OUTPUT PARAM TABLE FOR tt-erro.

    EMPTY TEMP-TABLE tt-erro.

    /* #272659 verifica permissao de acesso a opcao de encerramento 
    FIND FIRST crapace WHERE
            crapace.cdcooper = par_cdcooper AND 
            crapace.cdoperad = par_cdoperad AND 
            crapace.nmrotina = 'CARTAO CRED' AND 
            crapace.nmdatela = 'ATENDA'      AND 
            crapace.cddopcao = 'Z'
            NO-LOCK NO-ERROR.
    IF NOT AVAIL crapace THEN
    DO:
        RUN gera_erro (INPUT par_cdcooper,
                       INPUT par_cdagenci,
                       INPUT par_nrdcaixa,
                       INPUT 1,            /** Sequencia **/
                       INPUT 323, /* cdcritic 323 - Opcao nao permitida para a tela. */
                       INPUT-OUTPUT aux_dscritic).
        RETURN "NOK".
    END.
*/
    FIND crawcrd WHERE crawcrd.cdcooper = par_cdcooper AND
                       crawcrd.nrdconta = par_nrdconta AND
                       crawcrd.nrctrcrd = par_nrctrcrd NO-LOCK NO-ERROR.

    IF   NOT AVAILABLE crawcrd   THEN
         DO:
             ASSIGN aux_cdcritic = 535
                    aux_dscritic = "".

             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                                      
             RETURN "NOK".
             
         END.

    IF   crawcrd.insitcrd = 4 AND crawcrd.dtsol2vi <> ?   THEN
         DO:
            ASSIGN aux_cdcritic = 0
                   aux_dscritic = "Opcao nao disponivel. 2.Via do cartao foi " +
                                  "solicitada.".

            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                                      
            RETURN "NOK".
         END.

    par_flgadmbb = IF f_verifica_adm(crawcrd.cdadmcrd) = 1 THEN
                                      TRUE
                                   ELSE
                                          FALSE.

    RETURN "OK".

END PROCEDURE.

/***************************************************************
        Verificar se o cartao pode ou nao ser encerrado
****************************************************************/
PROCEDURE verifica_enc_cartao:
    
    DEF  INPUT  PARAM  par_cdcooper  AS  INTE  NO-UNDO.                   
    DEF  INPUT  PARAM  par_cdagenci  AS  INTE  NO-UNDO.                
    DEF  INPUT  PARAM  par_nrdcaixa  AS  INTE  NO-UNDO.                     
    DEF  INPUT  PARAM  par_cdoperad  AS  CHAR  NO-UNDO.                
    DEF  INPUT  PARAM  par_nrdconta  AS  INTE  NO-UNDO.
    DEF  INPUT  PARAM  par_nrctrcrd  AS  INTE  NO-UNDO.
    
    DEF OUTPUT  PARAM TABLE FOR tt-erro.

    FIND crawcrd WHERE crawcrd.cdcooper = par_cdcooper   AND
                       crawcrd.nrdconta = par_nrdconta   AND
                       crawcrd.nrctrcrd = par_nrctrcrd   NO-LOCK NO-ERROR.

    IF   NOT AVAILABLE crawcrd   THEN
         DO:
             ASSIGN aux_cdcritic = 535
                    aux_dscritic = "".

             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).                
                
             RETURN "NOK".
         END.

    IF crawcrd.insitcrd = 6 THEN
    DO:
        ASSIGN aux_cdcritic = 935
               aux_dscritic = "". 
                              
        RUN gera_erro (INPUT par_cdcooper,
                       INPUT par_cdagenci,
                       INPUT par_nrdcaixa,
                       INPUT 1,     /** Sequencia **/
                       INPUT aux_cdcritic,
                       INPUT-OUTPUT aux_dscritic).

        RETURN "NOK".
    END.
                      
    IF NOT(crawcrd.insitcrd = 4  OR
           crawcrd.insitcrd = 5  OR
           crawcrd.insitcrd = 6) THEN
         DO:
             ASSIGN aux_cdcritic = 538
                    aux_dscritic = "". 
                                   
             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,     /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).

             RETURN "NOK".
         END.           
         
    RETURN "OK".
                    
END PROCEDURE.

/******************************************************
    Efetuar o encerramento do cartao -> Cartoes do BB
 *****************************************************/
PROCEDURE encerra_cartao:

    DEF  INPUT  PARAM  par_cdcooper  AS  INTE  NO-UNDO.                   
    DEF  INPUT  PARAM  par_cdagenci  AS  INTE  NO-UNDO.                
    DEF  INPUT  PARAM  par_nrdcaixa  AS  INTE  NO-UNDO.                     
    DEF  INPUT  PARAM  par_cdoperad  AS  CHAR  NO-UNDO.                
    DEF  INPUT  PARAM  par_nrdconta  AS  INTE  NO-UNDO.
    DEF  INPUT  PARAM  par_nrctrcrd  AS  INTE  NO-UNDO.
    DEF  INPUT  PARAM  par_indposic  AS  INTE  NO-UNDO.
    DEF  INPUT  PARAM  par_dtmvtolt  AS  DATE  NO-UNDO.
    DEF  INPUT  PARAM  par_idorigem  AS  INTE  NO-UNDO. 
    DEF  INPUT  PARAM  par_idseqttl  AS  INTE  NO-UNDO.
    DEF  INPUT  PARAM  par_nmdatela  AS  CHAR  NO-UNDO.
    DEF  INPUT  PARAM  par_repsolic  AS  CHAR  NO-UNDO.
    DEF  INPUT  PARAM  par_cpfrepre  AS  DEC   NO-UNDO.

    DEF OUTPUT  PARAM TABLE FOR tt-erro.

    DEF  VAR aux_dsmotivo  AS CHAR  INIT "Pelo socio,Pela COOP,Por fraude"    NO-UNDO.
    DEF  VAR aux_cdmotivo  AS CHAR  INIT "3,4,6"                              NO-UNDO.
    DEF  VAR aux_contador  AS INTE                                            NO-UNDO.
    DEF  VAR aux_insitcrd  AS INTE                                            NO-UNDO.
    
    ASSIGN aux_dsorigem = TRIM(ENTRY(par_idorigem,des_dorigens,","))
           aux_dstransa = "Encerramento de Cartao de Credito.".
    
    TRANS_ENC:
    DO TRANSACTION ON ERROR UNDO TRANS_ENC, LEAVE TRANS_ENC:

        FOR FIRST crapass FIELDS(inpessoa)
                             WHERE crapass.cdcooper = par_cdcooper AND
                           crapass.nrdconta = par_nrdconta NO-LOCK:
            END.

        IF crapass.inpessoa = 2 THEN
            DO:
                IF par_repsolic = "" THEN
                    DO:
                        ASSIGN aux_cdcritic = 0
                               aux_dscritic = "Incluir um Representante".
        
                        RUN gera_erro (INPUT par_cdcooper,
                                       INPUT par_cdagenci,
                                       INPUT par_nrdcaixa,
                                       INPUT 1,            /** Sequencia **/
                                       INPUT aux_cdcritic,
                                       INPUT-OUTPUT aux_dscritic).
        
                        RETURN "NOK".
                    END.
        
                FOR EACH craphcj
                   WHERE craphcj.cdcooper = par_cdcooper
                     AND craphcj.nrdconta = par_nrdconta NO-LOCK:
        
                   FOR FIRST crapass FIELDS(inpessoa)
                       WHERE crapass.cdcooper = craphcj.cdcooper  AND
                            (crapass.nrcpfcgc = craphcj.nrcpfpri  OR
                             crapass.nrcpfcgc = craphcj.nrcpfseg  OR
                             crapass.nrcpfcgc = craphcj.nrcpfter) AND
                             crapass.nmprimtl = par_repsolic      NO-LOCK: END.
                
                   IF   NOT AVAIL crapass THEN
                        DO:
                            FIND FIRST crapncp
                                WHERE (crapncp.nrdoccpf = craphcj.nrcpfpri OR
                                       crapncp.nrdoccpf = craphcj.nrcpfseg OR
                                       crapncp.nrdoccpf = craphcj.nrcpfter) 
                                  AND crapncp.nmpessoa  = par_repsolic NO-LOCK NO-ERROR.
        
                            IF   NOT AVAIL crapncp THEN
                                 DO:
        
                                     ASSIGN aux_cdcritic = 0
                                            aux_dscritic = "Representante Invalido".
        
                                     RUN gera_erro (INPUT par_cdcooper,
                                                    INPUT par_cdagenci,
                                                    INPUT par_nrdcaixa,
                                                    INPUT 1,            /** Sequencia **/
                                                    INPUT aux_cdcritic,
                                                    INPUT-OUTPUT aux_dscritic).
        
                                     RETURN "NOK".
        
                                 END.
                        END.
                END.
            END.

       DO aux_contador = 1 TO 10:
    
          FIND FIRST crawcrd WHERE crawcrd.cdcooper = par_cdcooper  AND
                                   crawcrd.nrdconta = par_nrdconta  AND
                                   crawcrd.nrctrcrd = par_nrctrcrd
                                   EXCLUSIVE-LOCK NO-ERROR NO-WAIT.
                                     
          IF  NOT AVAILABLE crawcrd  THEN
              DO:
                  IF  LOCKED crawcrd  THEN
                      DO:
                          aux_dscritic = "Registro de cartao de credito esta" 
                                         + " sendo alterado. Tente Novamente.".
                          PAUSE 1 NO-MESSAGE.  
                          NEXT.
                      END.          
                  ELSE
                      DO:
                          aux_dscritic = "Registro de cartao de credito nao" +
                                         " encontrado.".
                          
                          LEAVE.
                      END.
              END.

          ASSIGN aux_dscritic = "".
         
          LEAVE.
            
       END. /** Fim do DO ... TO **/
       
       IF  aux_dscritic <> ""  THEN
           DO:
               ASSIGN aux_cdcritic = 0.

               RUN gera_erro (INPUT par_cdcooper,
                              INPUT par_cdagenci,
                              INPUT par_nrdcaixa,
                              INPUT 1,            /** Sequencia **/
                              INPUT aux_cdcritic,
                              INPUT-OUTPUT aux_dscritic).
                                                      
               UNDO TRANS_ENC, RETURN "NOK".
           END.
                        
       IF NOT(crawcrd.insitcrd = 4  OR
              crawcrd.insitcrd = 5  OR
              crawcrd.insitcrd = 6) THEN
            DO:
                ASSIGN aux_cdcritic = 538
                       aux_dscritic = "". 
                                   
                RUN gera_erro (INPUT par_cdcooper,
                               INPUT par_cdagenci,
                               INPUT par_nrdcaixa,
                               INPUT 1,     /** Sequencia **/
                               INPUT aux_cdcritic,
                               INPUT-OUTPUT aux_dscritic).
                               
                RUN proc_gerar_log (INPUT par_cdcooper,
                                    INPUT par_cdoperad,
                                    INPUT aux_dscritic,
                                    INPUT aux_dsorigem,
                                    INPUT aux_dstransa,
                                    INPUT FALSE,
                                    INPUT par_idseqttl,
                                    INPUT par_nmdatela,
                                    INPUT par_nrdconta,
                                   OUTPUT aux_nrdrowid).
                               
                RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                                        INPUT "nrcrcard",
                                        INPUT "",
                                        INPUT crawcrd.nrcrcard).
                                             
                UNDO TRANS_ENC, RETURN "NOK".
            END.           

       DO aux_contador = 1 TO 10:
    
          FIND  crapcrd WHERE crapcrd.cdcooper = par_cdcooper      AND
                              crapcrd.nrdconta = crawcrd.nrdconta  AND
                              crapcrd.nrctrcrd = crawcrd.nrctrcrd
                              EXCLUSIVE-LOCK NO-ERROR NO-WAIT.
          
          IF  NOT AVAILABLE crapcrd  THEN
              DO:
                 IF  LOCKED crapcrd  THEN
                     DO:
                        aux_dscritic = "Registro de cartao de credito " +
                                       "esta sendo alterado. Tente " +
                                       "Novamente.".
                        PAUSE 1 NO-MESSAGE.
                        NEXT.
                     END.
                 ELSE
                     DO:
                        aux_dscritic = "Registro de cartao de credito " +
                                       "nao encontrado.".
                        LEAVE.
                     END.
              END.

       END. /** Fim do DO ... TO **/
            
       IF  aux_dscritic <> ""  THEN
           DO:
               ASSIGN aux_cdcritic = 0.

               RUN gera_erro (INPUT par_cdcooper,
                              INPUT par_cdagenci,
                              INPUT par_nrdcaixa,
                              INPUT 1,            /** Sequencia **/
                              INPUT aux_cdcritic,
                              INPUT-OUTPUT aux_dscritic).
                                                      
               UNDO TRANS_ENC, RETURN "NOK".
           END.
       
       ASSIGN aux_insitcrd     = crawcrd.insitcrd
              crawcrd.insitcrd = 6
              /* Inicio - Alteracoes referentes a M181 - Rafael Maciel (RKAM) */
              crawcrd.cdopeexc = par_cdoperad
              crawcrd.cdageexc = par_cdagenci
              crawcrd.dtinsexc = TODAY
              /* Fim - Alteracoes referentes a M181 - Rafael Maciel (RKAM) */

              crawcrd.flgctitg = IF f_verifica_adm(crawcrd.cdadmcrd) = 1 THEN
                                    0 /*Enviar*/
                                 ELSE 3 /*Inativo*/
              crawcrd.dtcancel = par_dtmvtolt
              crawcrd.cdmotivo =
                          INTEGER(TRIM(ENTRY(par_indposic,aux_cdmotivo)))
              crawcrd.cdoperad = par_cdoperad
              crawcrd.nrrepcan = par_cpfrepre

              crapcrd.dtcancel = par_dtmvtolt
              crapcrd.cdmotivo =
                          INTEGER(TRIM(ENTRY(par_indposic,aux_cdmotivo))).
              
       FIND craptlc WHERE craptlc.cdcooper = par_cdcooper      AND
                          craptlc.cdadmcrd = crawcrd.cdadmcrd  AND
                          craptlc.tpcartao = crawcrd.tpcartao  AND
                          craptlc.cdlimcrd = crawcrd.cdlimcrd  AND
                          craptlc.dddebito = 0                    
                          NO-LOCK NO-ERROR.

       IF   NOT AVAILABLE craptlc   THEN
            DO:
               ASSIGN aux_cdcritic = 269
                      aux_dscritic = "". 
                                   
               RUN gera_erro (INPUT par_cdcooper,
                              INPUT par_cdagenci,
                              INPUT par_nrdcaixa,
                              INPUT 1,     /** Sequencia **/
                              INPUT aux_cdcritic,
                              INPUT-OUTPUT aux_dscritic).
                                             
               UNDO TRANS_ENC, RETURN "NOK".
                     
            END.

    END. /* DO TRANSACTION */
    
    RUN proc_gerar_log (INPUT par_cdcooper,
                        INPUT par_cdoperad,
                        INPUT "",
                        INPUT aux_dsorigem,
                        INPUT aux_dstransa,
                        INPUT TRUE,
                        INPUT par_idseqttl,
                        INPUT par_nmdatela,
                        INPUT par_nrdconta,
                       OUTPUT aux_nrdrowid).    
                       
    RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                            INPUT "nrcrcard",
                            INPUT "",
                            INPUT crawcrd.nrcrcard).
                                                   
    RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                            INPUT "insitcrd",
                            INPUT aux_insitcrd,
                            INPUT crawcrd.insitcrd).
    
    RETURN "OK".

END PROCEDURE.

/******************************************************
    Desfazer encerramento cartao BB
 *****************************************************/
PROCEDURE desfaz_enc_cartao:

    DEF  INPUT  PARAM  par_cdcooper  AS  INTE  NO-UNDO.                   
    DEF  INPUT  PARAM  par_cdagenci  AS  INTE  NO-UNDO.                
    DEF  INPUT  PARAM  par_nrdcaixa  AS  INTE  NO-UNDO.                     
    DEF  INPUT  PARAM  par_cdoperad  AS  CHAR  NO-UNDO.                
    DEF  INPUT  PARAM  par_nrdconta  AS  INTE  NO-UNDO.
    DEF  INPUT  PARAM  par_nrctrcrd  AS  INTE  NO-UNDO.
    DEF  INPUT  PARAM  par_indposic  AS  INTE  NO-UNDO.
    DEF  INPUT  PARAM  par_dtmvtolt  AS  DATE  NO-UNDO.
    DEF  INPUT  PARAM  par_idorigem  AS  INTE  NO-UNDO. 
    DEF  INPUT  PARAM  par_idseqttl  AS  INTE  NO-UNDO.
    DEF  INPUT  PARAM  par_nmdatela  AS  CHAR  NO-UNDO.
    DEF  INPUT  PARAM  par_cpfrepre  AS  DEC   NO-UNDO.

    DEF OUTPUT  PARAM  par_msgalert  AS  CHAR  NO-UNDO.

    DEF OUTPUT  PARAM TABLE FOR tt-erro.

    DEF  VAR aux_insitcrd  AS INTE                                    NO-UNDO.
    DEF  VAR aux_contador  AS INTE                                    NO-UNDO.
    
    ASSIGN aux_dsorigem = TRIM(ENTRY(par_idorigem,des_dorigens,","))
           aux_dstransa = "Desfazer Encerramento de Cartao Credito.".
    
    TRANS_DESFAZ:
    DO TRANSACTION ON ERROR UNDO TRANS_DESFAZ, LEAVE TRANS_DESFAZ:

       DO aux_contador = 1 TO 10:
    
          FIND FIRST crawcrd WHERE crawcrd.cdcooper = par_cdcooper  AND
                                   crawcrd.nrdconta = par_nrdconta  AND
                                   crawcrd.nrctrcrd = par_nrctrcrd
                                   EXCLUSIVE-LOCK NO-ERROR NO-WAIT.
                                     
          IF  NOT AVAILABLE crawcrd  THEN
              DO:
                  IF  LOCKED crawcrd  THEN
                      DO:
                          aux_dscritic = "Registro de cartao de credito esta" 
                                         + " sendo alterado. Tente Novamente.".
                          PAUSE 1 NO-MESSAGE.
                          NEXT.
                      END.
                  ELSE
                      DO:
                          aux_dscritic = "Registro de cartao de credito nao" +
                                         " encontrado.".
                          
                          LEAVE.
                      END.
              END.

          ASSIGN aux_dscritic = "".

          LEAVE.
            
       END. /** Fim do DO ... TO **/
       
       IF  aux_dscritic <> ""  THEN
           DO:
               ASSIGN aux_cdcritic = 0.

               RUN gera_erro (INPUT par_cdcooper,
                              INPUT par_cdagenci,
                              INPUT par_nrdcaixa,
                              INPUT 1,            /** Sequencia **/
                              INPUT aux_cdcritic,
                              INPUT-OUTPUT aux_dscritic).
                              
               UNDO TRANS_DESFAZ, RETURN "NOK".
           END.
       
       IF   crawcrd.insitcrd <> 6 THEN
            DO:
                ASSIGN aux_cdcritic = 936
                       aux_dscritic = "". 
                                   
                RUN gera_erro (INPUT par_cdcooper,
                               INPUT par_cdagenci,
                               INPUT par_nrdcaixa,
                               INPUT 1,     /** Sequencia **/
                               INPUT aux_cdcritic,
                               INPUT-OUTPUT aux_dscritic).

                RUN proc_gerar_log (INPUT par_cdcooper,
                                    INPUT par_cdoperad,
                                    INPUT aux_dscritic,
                                    INPUT aux_dsorigem,
                                    INPUT aux_dstransa,
                                    INPUT FALSE,
                                    INPUT par_idseqttl,
                                    INPUT par_nmdatela,
                                    INPUT par_nrdconta,
                                   OUTPUT aux_nrdrowid).

                RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                                        INPUT "nrcrcard",
                                        INPUT "",
                                        INPUT crawcrd.nrcrcard).
                
                UNDO TRANS_DESFAZ, RETURN "NOK".
            END.

      IF  CAN-DO("83,84,85,86,87,88",STRING(crawcrd.cdadmcrd)) THEN
            DO:
                IF crawcrd.dtcancel <> ? and crawcrd.flgctitg = 1 THEN
                    ASSIGN aux_cdcritic = 551.
            END.
        ELSE
            IF crawcrd.dtcancel <> par_dtmvtolt THEN
                ASSIGN aux_cdcritic = 551.

       IF   aux_cdcritic = 551 THEN
            DO:
                ASSIGN aux_dscritic = "".  
                                   
                RUN gera_erro (INPUT par_cdcooper,
                               INPUT par_cdagenci,
                               INPUT par_nrdcaixa,
                               INPUT 1,     /** Sequencia **/
                               INPUT aux_cdcritic,
                               INPUT-OUTPUT aux_dscritic).
                                             
                RUN proc_gerar_log (INPUT par_cdcooper,
                                    INPUT par_cdoperad,
                                    INPUT aux_dscritic,
                                    INPUT aux_dsorigem,
                                    INPUT aux_dstransa,
                                    INPUT FALSE,
                                    INPUT par_idseqttl,
                                    INPUT par_nmdatela,
                                    INPUT par_nrdconta,
                                   OUTPUT aux_nrdrowid).
                               
                RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                                        INPUT "nrcrcard",
                                        INPUT "",
                                        INPUT crawcrd.nrcrcard).
                
                UNDO TRANS_DESFAZ, RETURN "NOK".
            END.
                   
       DO aux_contador = 1 TO 10:
    
          FIND  crapcrd WHERE crapcrd.cdcooper = par_cdcooper      AND
                              crapcrd.nrdconta = crawcrd.nrdconta  AND
                              crapcrd.nrctrcrd = crawcrd.nrctrcrd
                              EXCLUSIVE-LOCK NO-ERROR NO-WAIT.
          
          IF  NOT AVAILABLE crapcrd  THEN
              DO:
                 IF  LOCKED crapcrd  THEN
                     DO:
                        aux_dscritic = "Registro de cartao de credito " +
                                       "esta sendo alterado. Tente " +
                                       "Novamente.".
                        PAUSE 1 NO-MESSAGE.
                        NEXT.
                     END.
                 ELSE
                     DO:
                        aux_dscritic = "Registro de cartao de credito " +
                                       "nao encontrado.".
                        LEAVE.
                     END.
              END.

       END. /** Fim do DO ... TO **/
            
       IF  aux_dscritic <> ""  THEN
           DO:
               ASSIGN aux_cdcritic = 0.

               RUN gera_erro (INPUT par_cdcooper,
                              INPUT par_cdagenci,
                              INPUT par_nrdcaixa,
                              INPUT 1,            /** Sequencia **/
                              INPUT aux_cdcritic,
                              INPUT-OUTPUT aux_dscritic).
                                                      
               UNDO TRANS_DESFAZ, RETURN "NOK".
           END.
       
       ASSIGN aux_insitcrd     = crawcrd.insitcrd 
              crawcrd.insitcrd = 4 
              crawcrd.flgctitg = IF CAN-DO("83,84,85,86,87,88",
                                    STRING(crawcrd.cdadmcrd)) THEN 
                                    5  /* Desbloqueada */
                                 ELSE 
                                    3  /* Nao Enviada */
              crawcrd.dtcancel = ?
              crawcrd.cdmotivo = 0
              crawcrd.cdoperad = par_cdoperad
              crawcrd.nrprotoc = 0
              crawcrd.nrrepcan = 0  

              crapcrd.dtcancel = ?
              crapcrd.cdmotivo = 0
              crapcrd.nrprotoc = 0. 
        
       /*  Testa administradora */
       FIND crapadc WHERE crapadc.cdcooper = par_cdcooper      AND
                          crapadc.cdadmcrd = crawcrd.cdadmcrd       
                          NO-LOCK NO-ERROR.

       IF   NOT AVAILABLE crapadc  THEN
            DO:
                ASSIGN aux_cdcritic = 607
                       aux_dscritic = "". 
                                   
                RUN gera_erro (INPUT par_cdcooper,
                               INPUT par_cdagenci,
                               INPUT par_nrdcaixa,
                               INPUT 1,     /** Sequencia **/
                               INPUT aux_cdcritic,
                               INPUT-OUTPUT aux_dscritic).
                                             
                UNDO TRANS_DESFAZ, RETURN "NOK".
            END.

       /* Testa dia do debito */
       FIND craptlc WHERE craptlc.cdcooper = par_cdcooper      AND
                          craptlc.cdadmcrd = crawcrd.cdadmcrd  AND
                          craptlc.tpcartao = 0                 AND
                          craptlc.cdlimcrd = 0                 AND
                          craptlc.dddebito = crawcrd.dddebito     
                          NO-LOCK NO-ERROR.

       IF   NOT AVAILABLE craptlc   OR
            craptlc.insittab <> 0   THEN
            DO:
                ASSIGN aux_cdcritic = 533
                       aux_dscritic = "". 
                                   
                RUN gera_erro (INPUT par_cdcooper,
                               INPUT par_cdagenci,
                               INPUT par_nrdcaixa,
                               INPUT 1,     /** Sequencia **/
                               INPUT aux_cdcritic,
                               INPUT-OUTPUT aux_dscritic).
                                             
                UNDO TRANS_DESFAZ, RETURN "NOK".
            END.
            
       /* Testa e soma limite de credito */
       FIND craptlc WHERE craptlc.cdcooper = par_cdcooper      AND
                          craptlc.cdadmcrd = crawcrd.cdadmcrd  AND
                          craptlc.tpcartao = crawcrd.tpcartao  AND
                          craptlc.cdlimcrd = crawcrd.cdlimcrd  AND
                          craptlc.dddebito = 0                    
                          NO-LOCK NO-ERROR.

       IF   NOT AVAILABLE craptlc   THEN
            DO:
                ASSIGN aux_cdcritic = 269
                       aux_dscritic = "". 
                                   
                RUN gera_erro (INPUT par_cdcooper,
                               INPUT par_cdagenci,
                               INPUT par_nrdcaixa,
                               INPUT 1,     /** Sequencia **/
                               INPUT aux_cdcritic,
                               INPUT-OUTPUT aux_dscritic).
                                             
                UNDO TRANS_DESFAZ, RETURN "NOK".
            END.

       IF   craptlc.insittab <> 0 THEN
            DO: 
                ASSIGN aux_cdcritic = 604
                       aux_dscritic = "". 
                                   
                RUN gera_erro (INPUT par_cdcooper,
                               INPUT par_cdagenci,
                               INPUT par_nrdcaixa,
                               INPUT 1,     /** Sequencia **/
                               INPUT aux_cdcritic,
                               INPUT-OUTPUT aux_dscritic).
                                             
                UNDO TRANS_DESFAZ, RETURN "NOK".
            END.
    END. /* DO TRANSACTION */
    
    RUN proc_gerar_log (INPUT par_cdcooper,
                        INPUT par_cdoperad,
                        INPUT "",
                        INPUT aux_dsorigem,
                        INPUT aux_dstransa,
                        INPUT TRUE,
                        INPUT par_idseqttl,
                        INPUT par_nmdatela,
                        INPUT par_nrdconta,
                       OUTPUT aux_nrdrowid).    

    RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                            INPUT "nrcrcard",
                            INPUT "",
                            INPUT crawcrd.nrcrcard).
                            
    RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                            INPUT "insitcrd",
                            INPUT aux_insitcrd,
                            INPUT crawcrd.insitcrd). 
    
    RETURN "OK".

END PROCEDURE.

/********************
    OPCAO EXCLUIR
********************/
/******************************************************
    Excluir um determinado cartao de credito
 *****************************************************/
PROCEDURE exclui_cartao:

    DEF  INPUT  PARAM  par_cdcooper  AS  INTE  NO-UNDO.                   
    DEF  INPUT  PARAM  par_cdagenci  AS  INTE  NO-UNDO.                
    DEF  INPUT  PARAM  par_nrdcaixa  AS  INTE  NO-UNDO.                     
    DEF  INPUT  PARAM  par_cdoperad  AS  CHAR  NO-UNDO.                
    DEF  INPUT  PARAM  par_nrdconta  AS  INTE  NO-UNDO.
    DEF  INPUT  PARAM  par_nrctrcrd  AS  INTE  NO-UNDO.
    DEF  INPUT  PARAM  par_dtmvtolt  AS  DATE  NO-UNDO.
    DEF  INPUT  PARAM  par_idorigem  AS  INTE  NO-UNDO. 
    DEF  INPUT  PARAM  par_idseqttl  AS  INTE  NO-UNDO.
    DEF  INPUT  PARAM  par_nmdatela  AS  CHAR  NO-UNDO.
    
    DEF OUTPUT PARAM TABLE FOR tt-erro.

    DEF VAR    aux_contador       AS INTE                           NO-UNDO.
    
    DEF BUFFER crawbcrd FOR crawcrd.
    
    EMPTY TEMP-TABLE tt-erro.

    /** Atribui descricao da origem e da transacao **/
    ASSIGN aux_dsorigem = TRIM(ENTRY(par_idorigem,des_dorigens,","))
           aux_dstransa = "Exclusao de cartao de credito.".      
      
    TRANS_EXCLUSAO:
    DO TRANSACTION ON ERROR UNDO TRANS_EXCLUSAO, LEAVE TRANS_EXCLUSAO:

       DO aux_contador = 1 TO 10:
    
          FIND FIRST crawcrd WHERE crawcrd.cdcooper = par_cdcooper  AND
                                   crawcrd.nrdconta = par_nrdconta  AND
                                   crawcrd.nrctrcrd = par_nrctrcrd
                                   EXCLUSIVE-LOCK NO-ERROR NO-WAIT.
                                     
          IF  NOT AVAILABLE crawcrd  THEN
              DO:
                  IF  LOCKED crawcrd  THEN
                      DO:
                          aux_dscritic = "Registro de cartao de credito esta" 
                                         + " sendo alterado. Tente Novamente.".
                          PAUSE 1 NO-MESSAGE.
                          NEXT.
                      END.
                  ELSE
                      DO:
                          aux_dscritic = "Registro de cartao de credito nao" +
                                         " encontrado.".
                          
                          LEAVE.
                      END.
              END.

          IF f_verifica_adm(crawcrd.cdadmcrd) <> 2  AND
              crawcrd.insitcrd <> 0   THEN
              DO:
                  ASSIGN aux_dscritic = "Cartao ja solicitado.".
                  LEAVE.
              END.               
          
          /* Se for um cartao Bancoob - Deve verificar se existem adicionais 
             cadastrados - 11/11/2014 - Renato - Supero */
          IF f_verifica_adm(crawcrd.cdadmcrd) = 2 THEN
            DO:
                /* Buscar o CPF do titular da conta */
                FIND FIRST crapttl WHERE crapttl.cdcooper = par_cdcooper
                                     AND crapttl.nrdconta = par_nrdconta
                                     AND crapttl.idseqttl = 1 NO-LOCK NO-ERROR.
                
                /* Verifica se o registro foi encontrado */
                IF AVAIL crapttl THEN
                DO:
                    /* Se estiver tentando excluir o cartao do titular */
                    IF crawcrd.nrcpftit = crapttl.nrcpfcgc THEN
                      DO:
                          /* Buscar outros registros da operadora */
                          FIND FIRST crawbcrd WHERE crawbcrd.cdcooper  = crawcrd.cdcooper  AND
                                                    crawbcrd.nrdconta  = crawcrd.nrdconta  AND
                                                    crawbcrd.nrctrcrd <> crawcrd.nrctrcrd  AND 
                                                    crawbcrd.cdadmcrd  = crawcrd.cdadmcrd
                                                    NO-LOCK NO-ERROR.
                                               
                          IF AVAILABLE crawbcrd  THEN
                             ASSIGN aux_dscritic = "Cartao possui adicionais. Exclusao nao permitida.".
                      
                          LEAVE. 
                      END.
                END.
            END.
            
          ASSIGN aux_dscritic = "".

          LEAVE.
            
       END. /** Fim do DO ... TO **/

       IF  aux_dscritic <> ""  THEN
           DO:
               ASSIGN aux_cdcritic = 0.

               RUN gera_erro (INPUT par_cdcooper,
                              INPUT par_cdagenci,
                              INPUT par_nrdcaixa,
                              INPUT 1,            /** Sequencia **/
                              INPUT aux_cdcritic,
                              INPUT-OUTPUT aux_dscritic).
                                                      
               UNDO TRANS_EXCLUSAO, RETURN "NOK".
           END.

       RUN proc_gerar_log (INPUT par_cdcooper,
                           INPUT par_cdoperad,
                           INPUT "",
                           INPUT aux_dsorigem,
                           INPUT aux_dstransa,
                           INPUT TRUE,
                           INPUT par_idseqttl,
                           INPUT par_nmdatela,
                           INPUT par_nrdconta,
                          OUTPUT aux_nrdrowid).
       
       IF  crawcrd.nrctaav1 <> 0 THEN 
           DO:
               FOR EACH crapavl WHERE 
                        crapavl.cdcooper = par_cdcooper     AND
                        crapavl.nrdconta = crawcrd.nrctaav1 AND
                        crapavl.nrctravd = crawcrd.nrctrcrd AND
                        crapavl.tpctrato = 4                EXCLUSIVE-LOCK:
                        
                   RUN proc_gerar_log_item (INPUT aux_nrdrowid,
                                            INPUT "Aval 1 - ctrato",
                                            INPUT crawcrd.nrctrcrd,
                                            INPUT "").                        
                        
                   DELETE crapavl.
               END.
           END.
                
       IF  crawcrd.nrctaav2 <> 0 THEN
           DO:
               FOR EACH crapavl WHERE
                        crapavl.cdcooper = par_cdcooper     AND
                        crapavl.nrdconta = crawcrd.nrctaav2 AND
                        crapavl.nrctravd = crawcrd.nrctrcrd AND
                        crapavl.tpctrato = 4                EXCLUSIVE-LOCK:
                        
                   RUN proc_gerar_log_item (INPUT aux_nrdrowid,
                                            INPUT "Aval 2 - ctrato",
                                            INPUT crawcrd.nrctrcrd,
                                            INPUT "").           
                                            
                   DELETE crapavl.
               END.
           END.
                   
       FOR EACH crapavt  WHERE crapavt.cdcooper = par_cdcooper     AND
                               crapavt.tpctrato = 4                AND
                               crapavt.nrdconta = crawcrd.nrdconta AND
                               crapavt.nrctremp = crawcrd.nrctrcrd 
                               EXCLUSIVE-LOCK:
           
           RUN proc_gerar_log_item (INPUT aux_nrdrowid,
                                    INPUT "crapavt - ctrato",
                                    INPUT crawcrd.nrctrcrd,
                                    INPUT "").
                               
           DELETE crapavt.
       END.
       
       FOR EACH crapavt WHERE crapavt.cdcooper = par_cdcooper     AND
                              crapavt.tpctrato = 10               AND
                              crapavt.nrdconta = crawcrd.nrdconta AND
                              crapavt.nrctremp = crawcrd.nrctrcrd 
                              EXCLUSIVE-LOCK:
           
           RUN proc_gerar_log_item (INPUT aux_nrdrowid,
                                    INPUT "crapavt - ctrato",
                                    INPUT crawcrd.nrctrcrd,
                                    INPUT "").
                               
           DELETE crapavt.
       END.

       RUN proc_gerar_log_item (INPUT aux_nrdrowid,
                                INPUT "nrctrcrd",
                                INPUT crawcrd.nrctrcrd,
                                INPUT "").
                                
       DELETE crawcrd.                         
    
    END.  /*  Fim da transacao  */
    
    RETURN "OK".
    
END PROCEDURE.

/***************************************************************************/
/*********************     PROCEDURES INTERNAS     *************************/
/***************************************************************************/
/** AVAIS  **/
PROCEDURE carrega_dados_avais:

    DEF  INPUT PARAM par_cdcooper AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_cdagenci AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrdcaixa AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_cdoperad AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nmdatela AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_idorigem AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrdconta AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_idseqttl AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_dtmvtolt AS DATE                           NO-UNDO.
    DEF  INPUT PARAM par_nrctrcrd AS INTE                           NO-UNDO.
    
    DEF OUTPUT PARAM TABLE FOR tt-dados-avais.
    DEF OUTPUT PARAM TABLE FOR tt-erro.

    DEF VAR h-b1wgen9999 AS HANDLE NO-UNDO.
    
    FOR FIRST crapass FIELDS(inpessoa)
                     WHERE crapass.cdcooper = par_cdcooper   AND
                       crapass.nrdconta = par_nrdconta   NO-LOCK:
    END.

    IF   NOT AVAILABLE crapass   THEN
         DO:
             ASSIGN aux_cdcritic = 9
                    aux_dscritic = "".

             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).                

             RETURN "NOK".

         END. 

    IF  crapass.inpessoa = 1 THEN
        DO:

            FIND FIRST crawcrd WHERE crawcrd.cdcooper = par_cdcooper AND
                                     crawcrd.nrdconta = par_nrdconta AND
                                     crawcrd.nrctrcrd = par_nrctrcrd     
                                     NO-LOCK NO-ERROR.
        
            IF   NOT AVAILABLE crawcrd THEN
                 DO:
                     ASSIGN aux_cdcritic = 535
                            aux_dscritic = "".
                           
                     RUN gera_erro (INPUT par_cdcooper,
                                    INPUT par_cdagenci,
                                    INPUT par_nrdcaixa,
                                    INPUT 1,            /** Sequencia **/
                                    INPUT aux_cdcritic,
                                    INPUT-OUTPUT aux_dscritic).
                                               
                     RETURN "NOK".
                 END.
        

        END.
    
    RUN sistema/generico/procedures/b1wgen9999.p PERSISTENT
        SET h-b1wgen9999.

    IF  NOT VALID-HANDLE(h-b1wgen9999)  THEN
        DO:
            ASSIGN aux_cdcritic = 0
                   aux_dscritic = "Handle invalido para BO b1wgen9999.".
                   
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                       
            RETURN "NOK".
        END.
        

    IF  crapass.inpessoa = 1 THEN
        DO:
                
            RUN lista_avalistas IN h-b1wgen9999 (INPUT par_cdcooper,  
                                                 INPUT par_cdagenci,
                                                 INPUT par_nrdcaixa,
                                                 INPUT par_cdoperad,
                                                 INPUT par_nmdatela,
                                                 INPUT par_idorigem,
                                                 INPUT par_nrdconta,
                                                 INPUT par_idseqttl,
                                                 INPUT 4, /** Tipo do contrato **/
                                                 INPUT par_nrctrcrd,
                                                 INPUT crawcrd.nrctaav1,
                                                 INPUT crawcrd.nrctaav2,
                                                OUTPUT TABLE tt-dados-avais,
                                                OUTPUT TABLE tt-erro).
                        

        END.
     ELSE
        DO:


            FIND craphcj WHERE craphcj.cdcooper = par_cdcooper   AND
                               craphcj.nrdconta = par_nrdconta   NO-LOCK NO-ERROR.

            IF  NOT AVAILABLE craphcj THEN
                DO:

                    ASSIGN aux_cdcritic = 0
                           aux_dscritic = "Dados da habilitacao para Conta juridica nao disponiveis".

                    RUN gera_erro (INPUT par_cdcooper,
                                   INPUT par_cdagenci,
                                   INPUT par_nrdcaixa,
                                   INPUT 1,            /** Sequencia **/
                                   INPUT aux_cdcritic,
                                   INPUT-OUTPUT aux_dscritic).                
                    DELETE PROCEDURE h-b1wgen9999.
                    RETURN "NOK".


                END.
                
            RUN lista_avalistas IN h-b1wgen9999 ( INPUT par_cdcooper,  
                                                  INPUT par_cdagenci,
                                                  INPUT par_nrdcaixa,
                                                  INPUT par_cdoperad,
                                                  INPUT par_nmdatela,
                                                  INPUT par_idorigem,
                                                  INPUT par_nrdconta,
                                                  INPUT par_idseqttl,
                                                  INPUT 4, /** Tipo do contrato **/
                                                  INPUT par_nrctrcrd,
                                                  INPUT craphcj.nrctaav1,
                                                  INPUT craphcj.nrctaav2,
                                                 OUTPUT TABLE tt-dados-avais,
                                                 OUTPUT TABLE tt-erro).
                        
        END.



    DELETE PROCEDURE h-b1wgen9999.
    
    IF  RETURN-VALUE = "NOK"  THEN
        RETURN "NOK".                 

    RETURN "OK".
    
END PROCEDURE.

/******************************************************************************/
/**        Procedure para carregar dados do avalista                         **/
/******************************************************************************/
PROCEDURE carrega_avalista:

    DEF  INPUT PARAM par_cdcooper AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_cdagenci AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrdcaixa AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_cdoperad AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nmdatela AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_idorigem AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrdconta AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_idseqttl AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_dtmvtolt AS DATE                           NO-UNDO.
    DEF  INPUT PARAM par_nrctaava AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrcpfcgc AS DECI                           NO-UNDO.
    DEF  INPUT PARAM par_flgerlog AS LOGI                           NO-UNDO.
       
    DEF OUTPUT PARAM TABLE FOR tt-dados-avais.
    DEF OUTPUT PARAM TABLE FOR tt-erro.

    DEF VAR h-b1wgen9999 AS HANDLE                                  NO-UNDO.
    
    EMPTY TEMP-TABLE tt-dados-avais.
    EMPTY TEMP-TABLE tt-erro.
    

    IF  par_nrctaava > 0 THEN
        DO:

            RUN sistema/generico/procedures/b1wgen9999.p PERSISTENT SET h-b1wgen9999.
        
            IF  NOT VALID-HANDLE(h-b1wgen9999)  THEN
                DO:
                    ASSIGN aux_cdcritic = 0
                           aux_dscritic = "Handle invalido para BO b1wgen9999.".
                           
                    RUN gera_erro (INPUT par_cdcooper,
                                   INPUT par_cdagenci,
                                   INPUT par_nrdcaixa,
                                   INPUT 1,            /** Sequencia **/
                                   INPUT aux_cdcritic,
                                   INPUT-OUTPUT aux_dscritic).
                                             
                    RETURN "NOK".
                END.
           
            RUN consulta-avalista IN h-b1wgen9999 (INPUT par_cdcooper,
                                                   INPUT par_cdagenci,
                                                   INPUT par_nrdcaixa,
                                                   INPUT par_idorigem,
                                                   INPUT par_nrdconta,
                                                   INPUT par_dtmvtolt,
                                                   INPUT par_nrctaava,
                                                   INPUT par_nrcpfcgc,
                                                  OUTPUT TABLE tt-dados-avais,
                                                  OUTPUT TABLE tt-erro).
                
            DELETE PROCEDURE h-b1wgen9999.

            IF  RETURN-VALUE = "NOK"  THEN
                RETURN "NOK".

        END.
     ELSE
       
       DO:

            RUN sistema/generico/procedures/b1wgen9999.p PERSISTENT SET h-b1wgen9999.
        
            IF  NOT VALID-HANDLE(h-b1wgen9999)  THEN
                DO:
                    ASSIGN aux_cdcritic = 0
                           aux_dscritic = "Handle invalido para BO b1wgen9999.".
                           
                    RUN gera_erro (INPUT par_cdcooper,
                                   INPUT par_cdagenci,
                                   INPUT par_nrdcaixa,
                                   INPUT 1,            /** Sequencia **/
                                   INPUT aux_cdcritic,
                                   INPUT-OUTPUT aux_dscritic).
                                             
                    RETURN "NOK".
                END.
           
            RUN consulta-avalista IN h-b1wgen9999 (INPUT par_cdcooper,
                                                   INPUT par_cdagenci,
                                                   INPUT par_nrdcaixa,
                                                   INPUT par_idorigem,
                                                   INPUT par_nrdconta,
                                                   INPUT par_dtmvtolt,
                                                   INPUT 0,
                                                   INPUT par_nrcpfcgc,
                                                  OUTPUT TABLE tt-dados-avais,
                                                  OUTPUT TABLE tt-erro).
                
            DELETE PROCEDURE h-b1wgen9999.

            IF  RETURN-VALUE = "NOK"  THEN
                RETURN "NOK".

        END.
       
     /*ELSE                                                                
         DO:                                                             
                                                                         
                                                                         
             FOR EACH crapavt WHERE crapavt.cdcooper = par_cdcooper AND  
                                    crapavt.nrdconta = par_nrdconta      
                        NO-LOCK NO-ERROR.                                
                                                                         
             IF  AVAILABLE crapavt  THEN                                 
             DO:                                                         
                 CREATE tt-dados-avais.                                  
                 ASSIGN tt-dados-avais.nrctaava = 0                      
                        tt-dados-avais.nmdavali = crapavt.nmdavali       
                        tt-dados-avais.nrcpfcgc = crapavt.nrcpfcgc       
                        tt-dados-avais.nrdocava = crapavt.nrdocava       
                        tt-dados-avais.tpdocava = crapavt.tpdocava       
                        tt-dados-avais.nmconjug = crapavt.nmconjug       
                        tt-dados-avais.nrcpfcjg = crapavt.nrcpfcjg       
                        tt-dados-avais.nrdoccjg = crapavt.nrdoccjg       
                        tt-dados-avais.tpdoccjg = crapavt.tpdoccjg       
                        tt-dados-avais.nrfonres = crapavt.nrfonres       
                        tt-dados-avais.dsdemail = crapavt.dsdemail       
                        tt-dados-avais.dsendre1 = crapavt.dsendres[1]    
                        tt-dados-avais.dsendre2 = crapavt.dsendres[2]    
                        tt-dados-avais.nmcidade = crapavt.nmcidade       
                        tt-dados-avais.cdufresd = crapavt.cdufresd       
                        tt-dados-avais.nrcepend = crapavt.nrcepend       
                        tt-dados-avais.dsnacion = CAPS(crapavt.dsnacion) 
                        tt-dados-avais.vlrenmes = crapavt.vlrenmes       
                        tt-dados-avais.vledvmto = crapavt.vledvmto.      
                                                                         
         END.                                                            
  */
        
    RETURN "OK".
        
END PROCEDURE.

/** IMPRESSOES **/
/*********************************************************
    Carrega dados para termo de cancelamento do cartao
**********************************************************/
PROCEDURE termo_cancblq_cartao:

    DEF INPUT PARAM par_cdcooper AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_cdagenci AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_nrdcaixa AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_cdoperad AS CHAR                         NO-UNDO.
    DEF INPUT PARAM par_nrdconta AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_dtmvtolt AS DATE                         NO-UNDO.
    DEF INPUT PARAM par_idorigem AS INTE                         NO-UNDO. 
    DEF INPUT PARAM par_idseqttl AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_nmdatela AS CHAR                         NO-UNDO.
    DEF INPUT PARAM par_nrctrcrd AS INTE                         NO-UNDO.    

    DEF OUTPUT PARAM TABLE FOR tt-termo_cancblq_cartao.
    DEF OUTPUT PARAM TABLE FOR tt-erro.

    DEF VAR aux_operador AS CHAR                NO-UNDO.
    DEF VAR aux_nrcrcard LIKE crawcrd.nrcrcard  NO-UNDO.
    DEF VAR aux_dsadmcrd AS CHAR                NO-UNDO.   
    DEF VAR aux_localdat AS CHAR                NO-UNDO.
    DEF VAR aux_dsdtermo AS CHAR                NO-UNDO.
    
    EMPTY TEMP-TABLE tt-termo_cancblq_cartao.
    EMPTY TEMP-TABLE tt-erro.
    
    FIND crapcop WHERE crapcop.cdcooper = par_cdcooper NO-LOCK NO-ERROR.

    IF   NOT AVAILABLE crapcop THEN
         DO:
             ASSIGN aux_cdcritic = 651
                    aux_dscritic = "".

             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                                       
             RETURN "NOK".

         END.

    FIND crapope WHERE crapope.cdcooper = par_cdcooper AND
                       crapope.cdoperad = par_cdoperad NO-LOCK NO-ERROR.
                   
    ASSIGN aux_operador = STRING(crapope.cdoperad,"x(10)") + " - " +
                          crapope.nmoperad.

    FIND crawcrd WHERE crawcrd.cdcooper = par_cdcooper   AND
                       crawcrd.nrdconta = par_nrdconta   AND
                       crawcrd.nrctrcrd = par_nrctrcrd   NO-LOCK NO-ERROR.

    IF   NOT AVAILABLE crawcrd THEN
         DO:
             ASSIGN aux_cdcritic = 535
                    aux_dscritic = "".

             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).                
                
             RETURN "NOK".
         END.
    
    aux_nrcrcard = crawcrd.nrcrcard.

    FIND crapadc WHERE crapadc.cdcooper = par_cdcooper     AND
                       crapadc.cdadmcrd = crawcrd.cdadmcrd NO-LOCK NO-ERROR.
                   
    IF  AVAIL crapadc  THEN
        aux_dsadmcrd = TRIM(crapadc.nmresadm).
    ELSE
        aux_dsadmcrd = "NAO CADASTRADO".

    FOR FIRST crapass FIELDS(nrdconta nmprimtl)
                     WHERE crapass.cdcooper = par_cdcooper  AND
                       crapass.nrdconta = par_nrdconta  NO-LOCK:
    END.
                   
    IF   NOT AVAILABLE crapass THEN
         DO:
             ASSIGN aux_cdcritic = 9
                    aux_dscritic = "".

             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).                
                
             RETURN "NOK".
         END.

    aux_localdat = TRIM(crapcop.nmcidade) + " " + 
                   TRIM(crapcop.cdufdcop) + ", " +
                   STRING(par_dtmvtolt,"99/99/9999") + ".".

    CASE crawcrd.insitcrd:
        WHEN 5 THEN
        DO:
            IF f_verifica_adm(crawcrd.cdadmcrd) = 1 THEN 
                aux_dsdtermo = "BLOQUEIO".
            ELSE
                aux_dsdtermo = "CANCELAMENTO".
        END.

        WHEN 6 THEN
            aux_dsdtermo = "ENCERRAMENTO".
    END CASE.

    CREATE tt-termo_cancblq_cartao.
    ASSIGN tt-termo_cancblq_cartao.nrdconta = crapass.nrdconta
           tt-termo_cancblq_cartao.nrcrcard = aux_nrcrcard
           tt-termo_cancblq_cartao.nmprimtl = crapass.nmprimtl
           tt-termo_cancblq_cartao.dsadmcrd = aux_dsadmcrd
           tt-termo_cancblq_cartao.localdat = aux_localdat
           tt-termo_cancblq_cartao.operador = aux_operador
           tt-termo_cancblq_cartao.dsdtermo = aux_dsdtermo.
           
    RETURN "OK".           

END PROCEDURE.

/*********************************************************
    Solicitacao de segunda via de cartao de credito
**********************************************************/
PROCEDURE termo_solici2via:

    DEF INPUT PARAM par_cdcooper AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_cdagenci AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_nrdcaixa AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_cdoperad AS CHAR                         NO-UNDO.
    DEF INPUT PARAM par_nrdconta AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_dtmvtolt AS DATE                         NO-UNDO.
    DEF INPUT PARAM par_idorigem AS INTE                         NO-UNDO. 
    DEF INPUT PARAM par_idseqttl AS INTE                         NO-UNDO.
    DEF INPUT PARAM par_nmdatela AS CHAR                         NO-UNDO.
    DEF INPUT PARAM par_nrctrcrd AS INTE                         NO-UNDO.    
    DEF INPUT PARAM par_cdmotivo AS INTE                         NO-UNDO.

    DEF OUTPUT PARAM TABLE FOR tt-termo_solici2via.
    DEF OUTPUT PARAM TABLE FOR tt-erro.

    DEF VAR aux_nrcrcard LIKE crawcrd.nrcrcard  NO-UNDO.
    DEF VAR aux_dsadmcrd AS CHAR                NO-UNDO.   
    DEF VAR aux_localdat AS CHAR                NO-UNDO.
    DEF VAR aux_nmrecop1 AS CHAR                NO-UNDO.
    DEF VAR aux_nmrecop2 AS CHAR                NO-UNDO.
    DEF VAR h-b1wgen9999 AS HANDLE              NO-UNDO.
    
    EMPTY TEMP-TABLE tt-termo_solici2via.
    EMPTY TEMP-TABLE tt-erro.
    
    FIND crapcop WHERE crapcop.cdcooper = par_cdcooper NO-LOCK NO-ERROR.

    IF   NOT AVAILABLE crapcop THEN
         DO:
             ASSIGN aux_cdcritic = 651
                    aux_dscritic = "".

             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                                       
             RETURN "NOK".

         END.

    RUN sistema/generico/procedures/b1wgen9999.p PERSISTENT
        SET h-b1wgen9999.
        
    IF  NOT VALID-HANDLE(h-b1wgen9999)  THEN
        DO:
            ASSIGN aux_cdcritic = 0
                   aux_dscritic = "Handle invalido para BO b1wgen9999.".
                   
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                       
            RETURN "NOK".
        END.
    
    RUN divide-nome-coop IN h-b1wgen9999 (INPUT crapcop.nmextcop,
                                          OUTPUT aux_nmrecop1,
                                          OUTPUT aux_nmrecop2).         

    DELETE PROCEDURE h-b1wgen9999.
    
    FIND crawcrd WHERE crawcrd.cdcooper = par_cdcooper   AND
                       crawcrd.nrdconta = par_nrdconta   AND
                       crawcrd.nrctrcrd = par_nrctrcrd   NO-LOCK NO-ERROR.

    IF   NOT AVAILABLE crawcrd THEN
         DO:
             ASSIGN aux_cdcritic = 535
                    aux_dscritic = "".

             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).                
                
             RETURN "NOK".
         END.
    
    aux_nrcrcard = crawcrd.nrcrcard.

    FIND crapadc WHERE crapadc.cdcooper = par_cdcooper     AND
                       crapadc.cdadmcrd = crawcrd.cdadmcrd NO-LOCK NO-ERROR.
                   
    IF  AVAIL crapadc  THEN
        aux_dsadmcrd = TRIM(crapadc.nmresadm).
    ELSE
        aux_dsadmcrd = "NAO CADASTRADO".

    FOR FIRST crapass FIELDS(nmprimtl nrdconta) 
                     WHERE crapass.cdcooper = par_cdcooper  AND
                       crapass.nrdconta = par_nrdconta  NO-LOCK:
    END.
                   
    IF   NOT AVAILABLE crapass THEN
         DO:
             ASSIGN aux_cdcritic = 9
                    aux_dscritic = "".

             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).                
                
             RETURN "NOK".
         END.

    aux_localdat = TRIM(crapcop.nmcidade) + " " + 
                   TRIM(crapcop.cdufdcop) + ", " +
                   STRING(par_dtmvtolt,"99/99/9999") + ".".

    ASSIGN par_cdmotivo = crawcrd.cdmotivo.

    CREATE tt-termo_solici2via.
    ASSIGN tt-termo_solici2via.nmextcop = crapcop.nmextcop
           tt-termo_solici2via.nrdocnpj = crapcop.nrdocnpj
           tt-termo_solici2via.nrcrcard = aux_nrcrcard
           tt-termo_solici2via.nrdconta = crapass.nrdconta
           tt-termo_solici2via.nmprimtl = crapass.nmprimtl
           tt-termo_solici2via.dsadmcrd = aux_dsadmcrd
           tt-termo_solici2via.dsmot2vi = IF par_cdmotivo = 1 THEN
                                             "Defeito no cartao"
                                          ELSE
                                          IF par_cdmotivo = 2 THEN
                                             "Perda/Roubo"
                                          ELSE
                                          IF par_cdmotivo = 5 THEN
                                             "Mudanca de nome"
                                          ELSE
                                          IF par_cdmotivo = 7 THEN
                                             "Alt. Data Vencimento"
                                          ELSE   
                                             "MOTIVO NAO CADASTRADO"
           tt-termo_solici2via.localdat = aux_localdat
           tt-termo_solici2via.nmrecop1 = aux_nmrecop1
           tt-termo_solici2via.nmrecop2 = aux_nmrecop2.
           
    RETURN "OK".           

END PROCEDURE.

/********************************************************************
    Carregar dados para impressao da proposta de cartao de credito
*********************************************************************/
PROCEDURE carrega_dados_proposta:

    DEF  INPUT PARAM par_cdcooper AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_cdagenci AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrdcaixa AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_cdoperad AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nmdatela AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_idorigem AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrdconta AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_idseqttl AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_dtmvtolt AS DATE                           NO-UNDO.
    DEF  INPUT PARAM par_dtmvtopr AS DATE                           NO-UNDO.
    DEF  INPUT PARAM par_inproces AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrctrcrd AS INTE                           NO-UNDO.
    
    DEF OUTPUT PARAM TABLE FOR tt-dados_prp_ccr.
    DEF OUTPUT PARAM TABLE FOR tt-outros_cartoes.
    DEF OUTPUT PARAM TABLE FOR tt-dados-ctr.    
    DEF OUTPUT PARAM TABLE FOR tt-erro.

    DEF VAR aux_nmrecop1 AS CHAR                                    NO-UNDO.
    DEF VAR aux_nmrecop2 AS CHAR                                    NO-UNDO.
    DEF VAR aux_nmresage AS CHAR                                    NO-UNDO.
    DEF VAR aux_dsempres AS CHAR                                    NO-UNDO.
    DEF VAR aux_nrcpfcgc AS CHAR                                    NO-UNDO.
    DEF VAR aux_dstipcta AS CHAR                                    NO-UNDO.
    DEF VAR aux_dssitdct AS CHAR                                    NO-UNDO.
    DEF VAR aux_nrdofone AS CHAR                                    NO-UNDO.
    DEF VAR aux_nmoperad AS CHAR                                    NO-UNDO.
    DEF VAR aux_dsmesref AS CHAR INIT
                         ["Janeiro,Fevereiro,Marco,Abril,Maio,Junho,
                          Julho,Agosto,Setembro,Outubro,Novembro,Dezembro"]
                                                                    NO-UNDO.

    DEF VAR aux_qtprecal AS DECI                                    NO-UNDO.
    DEF VAR aux_vlutiliz AS DECI                                    NO-UNDO.
    DEF VAR aux_vlsldrdc AS DECI                                    NO-UNDO.
    DEF VAR aux_vltotppr AS DECI DECIMALS 8                         NO-UNDO.
    DEF VAR aux_vlsmdtri AS DECI                                    NO-UNDO.
    DEF VAR aux_vlcaptal AS DECI                                    NO-UNDO.
    DEF VAR aux_vlprepla AS DECI                                    NO-UNDO.
    DEF VAR aux_vltotccr AS DECI                                    NO-UNDO.
    DEF VAR aux_vltotemp AS DECI                                    NO-UNDO.
    DEF VAR aux_vltotpre AS DECI                                    NO-UNDO.
    DEF VAR aux_vllimcre AS DECI                                    NO-UNDO.
    DEF VAR aux_vllimdeb AS DECI                                    NO-UNDO.
    DEF VAR aux_nmtitcrd AS CHAR                                    NO-UNDO.
    DEF VAR aux_dsparent AS CHAR                                    NO-UNDO.
    DEF VAR aux_nrcpftit AS DECI                                    NO-UNDO.
    DEF VAR aux_cdlimcrd AS INTE                                    NO-UNDO.
    DEF VAR aux_vllimcrd AS DECI                                    NO-UNDO.
    DEF VAR aux_qtcartao AS INTE                                    NO-UNDO.
    DEF VAR aux_dsadicio AS CHAR                                    NO-UNDO.
    DEF VAR aux_tpcartao AS CHAR                                    NO-UNDO.
    DEF VAR aux_nmresemp AS CHAR                                    NO-UNDO.
    DEF VAR aux_nrctamae AS DECI                                    NO-UNDO.
    DEF VAR aux_dslinha1 AS CHAR                                    NO-UNDO.
    DEF VAR aux_dslinha2 AS CHAR                                    NO-UNDO.
    DEF VAR aux_dslinha3 AS CHAR                                    NO-UNDO.   
    DEF VAR aux_dsdestin AS CHAR                                    NO-UNDO.
    DEF VAR aux_dscontat AS CHAR                                    NO-UNDO.
    DEF VAR aux_dsectrnp AS CHAR                                    NO-UNDO.
    
    DEF VAR aux_dsvllim1 AS CHAR                                    NO-UNDO.
    DEF VAR aux_dsvllim2 AS CHAR                                    NO-UNDO. 
    DEF VAR aux_nmcidpac AS CHAR                                    NO-UNDO.
    DEF VAR aux_dsdtmvt1 AS CHAR                                    NO-UNDO.
    DEF VAR aux_dsdtmvt2 AS CHAR                                    NO-UNDO. 
    DEF VAR aux_dsextens AS CHAR                                    NO-UNDO.
    DEF VAR aux_dsbranco AS CHAR                                    NO-UNDO. 
    DEF VAR aux_dsvlnpr1 AS CHAR                                    NO-UNDO.
    DEF VAR aux_dsvlnpr2 AS CHAR                                    NO-UNDO. 
    DEF VAR aux_nmexcop1 AS CHAR                                    NO-UNDO.
    DEF VAR aux_nmexcop2 AS CHAR                                    NO-UNDO.
    DEF VAR aux_cdempres AS INT                                     NO-UNDO.
    
    DEF VAR aux_nrposext AS INT                                     NO-UNDO.
    DEF VAR aux_vlrftmes AS DECI                                    NO-UNDO.
    DEF VAR aux_vlrfttot AS DECI                                    NO-UNDO.
    DEF VAR aux_vallimit AS DECI                                    NO-UNDO.
    DEF VAR aux_dtauxili AS DATE                                    NO-UNDO.
    DEF VAR aux_dtperiod AS DATE                                    NO-UNDO.
    DEF VAR aux_mesperio AS INT                                     NO-UNDO.
    DEF VAR aux_anoperio AS INT                                     NO-UNDO.
    DEF VAR aux_vlsldrgt AS DEC                                     NO-UNDO.
    DEF VAR aux_vlsldtot AS DEC                                     NO-UNDO.
    DEF VAR aux_vlsldapl AS DEC                                     NO-UNDO.

    DEF VAR h-b1wgen0001 AS HANDLE                                  NO-UNDO.
    DEF VAR h-b1wgen0002 AS HANDLE                                  NO-UNDO.
    DEF VAR h-b1wgen0004 AS HANDLE                                  NO-UNDO.
    DEF VAR h-b1wgen0006 AS HANDLE                                  NO-UNDO.
    DEF VAR h-b1wgen0021 AS HANDLE                                  NO-UNDO.
    DEF VAR h-b1wgen0069 AS HANDLE                                  NO-UNDO.
    DEF VAR h-b1wgen9999 AS HANDLE                                  NO-UNDO.
    DEF VAR h-b1wgen0081 AS HANDLE                                  NO-UNDO.        

    DEF BUFFER crabcrd FOR crawcrd.
    /* para includes notapromissoria */
    DEF BUFFER crabass FOR crapass.
    
    EMPTY TEMP-TABLE tt-dados_prp_ccr.
    EMPTY TEMP-TABLE tt-outros_cartoes.
    EMPTY TEMP-TABLE tt-dados-ctr.
    EMPTY TEMP-TABLE tt-erro.
        

    FIND crapcop WHERE crapcop.cdcooper = par_cdcooper NO-LOCK NO-ERROR.
    
    IF  NOT AVAILABLE crapcop  THEN
        DO: 
            ASSIGN aux_cdcritic = 651
                   aux_dscritic = "".
                   
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                       
            RETURN "NOK".            
        END.
                
    /* Verifica se ha outros cartoes */
    FOR EACH crabcrd WHERE crabcrd.cdcooper = par_cdcooper  AND
                           crabcrd.nrdconta = par_nrdconta  NO-LOCK:

        IF   crabcrd.nrctrcrd = par_nrctrcrd THEN
             NEXT.

        IF  f_verifica_adm(crabcrd.cdadmcrd) <> 2 THEN
            DO:                
                FIND craptlc WHERE craptlc.cdcooper = par_cdcooper      AND
                                   craptlc.cdadmcrd = crabcrd.cdadmcrd  AND
                                   craptlc.tpcartao = crabcrd.tpcartao  AND
                                   craptlc.cdlimcrd = crabcrd.cdlimcrd  AND
                                   craptlc.dddebito = 0                 
                                   NO-LOCK NO-ERROR.
                                
                IF   NOT AVAILABLE craptlc   THEN
                     DO:
        
                        ASSIGN aux_cdcritic = 532
                               aux_dscritic = "".
                           
                        RUN gera_erro (INPUT par_cdcooper,
                                       INPUT par_cdagenci,
                                       INPUT par_nrdcaixa,
                                       INPUT 1,            /** Sequencia **/
                                       INPUT aux_cdcritic,
                                       INPUT-OUTPUT aux_dscritic).
                                               
                        RETURN "NOK".                 
                     END.
                ELSE
                    ASSIGN aux_vallimit = craptlc.vllimcrd.                    
            END.    
        ELSE
            DO:
                FIND crawcrd WHERE crawcrd.cdcooper = crabcrd.cdcooper AND
                                   crawcrd.nrdconta = crabcrd.nrdconta AND
                                   crawcrd.cdadmcrd = crabcrd.cdadmcrd AND
                                   crawcrd.nrctrcrd = crabcrd.nrctrcrd NO-LOCK NO-ERROR.
                IF  AVAIL crawcrd THEN
                    ASSIGN aux_vallimit = crawcrd.vllimcrd.
            END.           

        FIND crapadc WHERE crapadc.cdcooper = par_cdcooper      AND
                           crapadc.cdadmcrd = crabcrd.cdadmcrd  
                           NO-LOCK NO-ERROR.
     
        IF   NOT AVAILABLE crapadc THEN
             DO:
                ASSIGN aux_cdcritic = 605
                       aux_dscritic = "".
                   
                RUN gera_erro (INPUT par_cdcooper,
                               INPUT par_cdagenci,
                               INPUT par_nrdcaixa,
                               INPUT 1,            /** Sequencia **/
                               INPUT aux_cdcritic,
                               INPUT-OUTPUT aux_dscritic).
                                       
                RETURN "NOK".                 
             END.

        CREATE tt-outros_cartoes.
        ASSIGN aux_qtcartao = aux_qtcartao + 1
               tt-outros_cartoes.dsdnomes = crabcrd.nmtitcrd
               tt-outros_cartoes.vllimite = aux_vallimit
               tt-outros_cartoes.dstipcrd = TRIM(crapadc.nmresadm) + " " +
                                            IF   crabcrd.tpcartao = 1 
                                                 THEN "NACIONAL"
                                            ELSE IF crabcrd.tpcartao = 2 
                                                 THEN "INTERNACIONAL"
                                            ELSE IF crabcrd.tpcartao = 3 
                                                 THEN "GOLD"
                                            ELSE "DESCONHECIDO"
               tt-outros_cartoes.dssituac = IF  crabcrd.insitcrd = 0
                                                THEN "Estudo"
                                            ELSE
                                            IF  crabcrd.insitcrd = 1
                                                THEN "Aprovado"
                                            ELSE
                                            IF   crabcrd.insitcrd = 2
                                                 THEN "Solicitado"
                                            ELSE
                                            IF   crabcrd.insitcrd = 3
                                                 THEN "Liberado"
                                            ELSE
                                            IF   crabcrd.insitcrd = 4
                                                 THEN "Em uso"
                                            ELSE
                                            IF   crabcrd.insitcrd = 5
                                                 THEN "Cancelado"
                                            ELSE  "??????".

    END. /* Fim leitura outros cartoes */
        
    FOR FIRST crapass FIELDS(nrcpfcgc nrdconta vllimcre vllimdeb cdagenci 
                           cdcooper inpessoa nrmatric dtadmiss nmsegntl nmprimtl)
                     WHERE crapass.cdcooper = par_cdcooper AND
                       crapass.nrdconta = par_nrdconta NO-LOCK:
    END.
    
    IF  NOT AVAILABLE crapass  THEN
        DO: 
            ASSIGN aux_cdcritic = 9.
                   aux_dscritic = "".
                   
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                       
            RETURN "NOK".           
        END.

    FIND crawcrd WHERE crawcrd.cdcooper = par_cdcooper AND
                       crawcrd.nrdconta = par_nrdconta AND
                       crawcrd.nrctrcrd = par_nrctrcrd NO-LOCK NO-ERROR.
        
    IF  NOT AVAILABLE crawcrd  THEN
        DO:
            ASSIGN aux_cdcritic = 0
                   aux_dscritic = "Proposta de cartao de credito nao " +
                                  "cadastrada.".

            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                       
            RETURN "NOK".
                                  
        END.

    IF  crapass.inpessoa = 1   THEN
        DO:

            ASSIGN aux_dsparent =
                       TRIM(ENTRY(LOOKUP(STRING(crawcrd.cdgraupr,"9"),aux_cdgraupr),
                                         aux_dsgraupr))
                   aux_nmtitcrd = crawcrd.nmtitcrd
                   aux_nrcpftit = crawcrd.nrcpftit
                   aux_cdlimcrd = crawcrd.cdlimcrd.    
            
        END.


    RUN sistema/generico/procedures/b1wgen9999.p PERSISTENT
        SET h-b1wgen9999.
        
    IF  NOT VALID-HANDLE(h-b1wgen9999)  THEN
        DO:
            DELETE PROCEDURE h-b1wgen9999.
            
            ASSIGN aux_cdcritic = 0
                   aux_dscritic = "Handle invalido para BO b1wgen9999.".
                   
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                       
            RETURN "NOK".
        END.
    
    RUN divide-nome-coop IN h-b1wgen9999 (INPUT crapcop.nmextcop,
                                          OUTPUT aux_nmrecop1,
                                          OUTPUT aux_nmrecop2).
        
    ASSIGN aux_dslinha1 = "CNPJ " + 
                           STRING(STRING(crapcop.nrdocnpj,"99999999999999"),
                                         "xx.xxx.xxx/xxxx-xx") +
                          "  FONE: " + crapcop.nrtelvoz
                    
           aux_dslinha2 = crapcop.dsendcop + ", " + 
                          STRING(crapcop.nrendcop,"zz,zz9") + " - CP " +
                          STRING(crapcop.nrcxapst,"zz,zz9")
                    
           aux_dslinha3 = STRING(crapcop.nrcepend,"zz,zzz,zzz") + " - " +
                          crapcop.nmcidade + " - " + crapcop.cdufdcop.
    
    RUN saldo_utiliza IN h-b1wgen9999 (INPUT par_cdcooper,
                                       INPUT par_cdagenci,
                                       INPUT par_nrdcaixa,
                                       INPUT par_cdoperad,
                                       INPUT par_nmdatela,
                                       INPUT par_idorigem,
                                       INPUT par_nrdconta,
                                       INPUT par_idseqttl,
                                       INPUT par_dtmvtolt,
                                       INPUT par_dtmvtopr,
                                       INPUT "",
                                       INPUT par_inproces,
                                       INPUT FALSE, /*Consulta por cpf*/
                                      OUTPUT aux_vlutiliz,
                                      OUTPUT TABLE tt-erro).
                                      
    DELETE PROCEDURE h-b1wgen9999.
    
    IF  RETURN-VALUE = "NOK"  THEN
        RETURN "NOK". 

    IF  crapass.inpessoa = 1   THEN
        FIND crapadc WHERE crapadc.cdcooper = par_cdcooper      AND
                           crapadc.cdadmcrd = crawcrd.cdadmcrd  AND
                          (crapadc.tpctahab = 0                 OR
                           crapadc.tpctahab = 1)   NO-LOCK NO-ERROR.
    ELSE
        FIND crapadc WHERE crapadc.cdcooper = par_cdcooper      AND                           
                           crapadc.cdadmcrd = crawcrd.cdadmcrd  AND 
                          (crapadc.tpctahab = 0                 OR
                           crapadc.tpctahab = 2)   NO-LOCK NO-ERROR.            

    IF   NOT AVAILABLE crapadc THEN
         DO:

            ASSIGN aux_cdcritic = 605
                   aux_dscritic = "".

            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                       
            RETURN "NOK".            
         END.
    ELSE   
    IF   aux_qtcartao > 0 AND crapass.inpessoa = 1   THEN
         aux_dsadicio = "ADICIONAL - " + crapadc.nmresadm.
    ELSE
         aux_dsadicio = crapadc.nmresadm.

    IF   crapadc.cdadmcrd = 3   THEN
         ASSIGN aux_dsdestin = "CECRED" 
                aux_dscontat = "ADMINISTRATIVO/FINANCEIRO".
    ELSE
         ASSIGN aux_dsdestin = crapadc.nmresadm
                aux_dscontat = crapadc.nmpescto.

    IF  crapass.inpessoa = 1   THEN
    ASSIGN aux_tpcartao = TRIM(crapadc.nmresadm) + " " +
                          IF   crawcrd.tpcartao = 1 
                               THEN "NACIONAL"
                          ELSE IF crawcrd.tpcartao = 2 
                                  THEN "INTERNACIONAL"
                               ELSE IF crawcrd.tpcartao = 3 
                                       THEN "GOLD"
                                       ELSE "DESCONHECIDO".
    
    RUN sistema/generico/procedures/b1wgen0001.p PERSISTENT
        SET h-b1wgen0001.
        
    IF  NOT VALID-HANDLE(h-b1wgen0001)  THEN
        DO:
            ASSIGN aux_cdcritic = 0
                   aux_dscritic = "Handle invalido para BO b1wgen0001.".
                   
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                       
            RETURN "NOK".
        END.

    RUN obtem-cabecalho IN h-b1wgen0001 (INPUT par_cdcooper,
                                         INPUT par_cdagenci,
                                         INPUT par_nrdcaixa,
                                         INPUT par_cdoperad,
                                         INPUT par_nrdconta,
                                         INPUT "",
                                         INPUT par_dtmvtolt,
                                         INPUT par_dtmvtolt,
                                         INPUT par_idorigem,
                                        OUTPUT TABLE tt-erro,
                                        OUTPUT TABLE tt-cabec).

    IF  RETURN-VALUE = "NOK"  THEN
        DO:
            DELETE PROCEDURE h-b1wgen0001.
            RETURN "NOK".
        END.

    RUN carrega_medias IN h-b1wgen0001 (INPUT par_cdcooper,
                                        INPUT par_cdagenci,
                                        INPUT par_nrdcaixa,
                                        INPUT par_cdoperad,
                                        INPUT par_nrdconta,
                                        INPUT par_dtmvtolt,
                                        INPUT par_idorigem,
                                        INPUT par_idseqttl,
                                        INPUT par_nmdatela,
                                        INPUT FALSE, /** NAO GERAR LOG **/
                                       OUTPUT TABLE tt-erro,
                                       OUTPUT TABLE tt-medias,
                                       OUTPUT TABLE tt-comp_medias).

    DELETE PROCEDURE h-b1wgen0001.
        
    IF  RETURN-VALUE = "NOK"  THEN
        RETURN "NOK".
    
    FIND FIRST tt-cabec NO-LOCK NO-ERROR.
    
    IF  AVAILABLE tt-cabec  THEN
        ASSIGN aux_dstipcta = tt-cabec.dstipcta
               aux_dssitdct = tt-cabec.dssitdct.
        
    FIND FIRST tt-comp_medias NO-LOCK NO-ERROR.
    
    IF  AVAILABLE tt-comp_medias  THEN
        ASSIGN aux_vlsmdtri = tt-comp_medias.vlsmdtri.

    RUN sistema/generico/procedures/b1wgen0002.p PERSISTENT
        SET h-b1wgen0002.

    IF  NOT VALID-HANDLE(h-b1wgen0002)  THEN
        DO:
            ASSIGN aux_cdcritic = 0
                   aux_dscritic = "Handle invalido para BO b1wgen0002.".

            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).

            RETURN "NOK".
        END.

    RUN saldo-devedor-epr IN h-b1wgen0002 (INPUT par_cdcooper,
                                           INPUT par_cdagenci,
                                           INPUT par_nrdcaixa,
                                           INPUT par_cdoperad,
                                           INPUT par_nmdatela,
                                           INPUT par_idorigem,
                                           INPUT par_nrdconta,
                                           INPUT par_idseqttl,
                                           INPUT par_dtmvtolt,
                                           INPUT par_dtmvtopr,
                                           INPUT 0, /** NR. CONTRATO **/
                                           INPUT "B1WGEN0028",
                                           INPUT par_inproces,
                                           INPUT FALSE, /** NAO GERAR LOG **/
                                          OUTPUT aux_vltotemp,
                                          OUTPUT aux_vltotpre,
                                          OUTPUT aux_qtprecal,
                                          OUTPUT TABLE tt-erro).

    DELETE PROCEDURE h-b1wgen0002.

    IF  RETURN-VALUE = "NOK"  THEN
        RETURN "NOK".
        
    RUN sistema/generico/procedures/b1wgen0021.p PERSISTENT
        SET h-b1wgen0021.
        
    IF  NOT VALID-HANDLE(h-b1wgen0021)  THEN
        DO:
            ASSIGN aux_cdcritic = 0
                   aux_dscritic = "Handle invalido para BO b1wgen0021.".
                   
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                       
            RETURN "NOK".
        END.

    RUN obtem_dados_capital IN h-b1wgen0021 (INPUT par_cdcooper,
                                             INPUT par_cdagenci,
                                             INPUT par_nrdcaixa,
                                             INPUT par_cdoperad,
                                             INPUT par_nmdatela,
                                             INPUT par_idorigem,
                                             INPUT par_nrdconta,
                                             INPUT par_idseqttl,
                                             INPUT par_dtmvtolt,
                                             INPUT FALSE, /** NAO GERAR LOG **/
                                            OUTPUT TABLE tt-dados-capital,
                                            OUTPUT TABLE tt-erro).

    DELETE PROCEDURE h-b1wgen0021.
    
    IF  RETURN-VALUE = "NOK"  THEN
        RETURN "NOK".    
        
    FIND FIRST tt-dados-capital NO-LOCK NO-ERROR.
    
    IF  AVAILABLE tt-dados-capital  THEN
        ASSIGN aux_vlcaptal = tt-dados-capital.vlcaptal
               aux_vlprepla = tt-dados-capital.vlprepla.
               

    /** Saldo das aplicacoes **/
	RUN sistema/generico/procedures/b1wgen0081.p PERSISTENT
		SET h-b1wgen0081.        
   
	IF  VALID-HANDLE(h-b1wgen0081)  THEN
		DO:
			ASSIGN aux_vlsldtot = 0.

			
			RUN obtem-dados-aplicacoes IN h-b1wgen0081
									  (INPUT par_cdcooper,
									   INPUT par_cdagenci,
									   INPUT 1,
									   INPUT 1,
									   INPUT par_nmdatela,
									   INPUT 1,
									   INPUT par_nrdconta,
									   INPUT 1,
									   INPUT 0,
									   INPUT par_nmdatela,
									   INPUT FALSE,
									   INPUT ?,
									   INPUT ?,
									   OUTPUT aux_vlsldrdc,
									   OUTPUT TABLE tt-saldo-rdca,
									   OUTPUT TABLE tt-erro).
		
			IF  RETURN-VALUE = "NOK"  THEN
				DO:
					DELETE PROCEDURE h-b1wgen0081.
					
					FIND FIRST tt-erro NO-LOCK NO-ERROR.
				 
					IF  AVAILABLE tt-erro  THEN
						MESSAGE tt-erro.dscritic.
					ELSE
						MESSAGE "Erro nos dados das aplicacoes.".
		
					NEXT.
				END.

			DELETE PROCEDURE h-b1wgen0081.
		END.
	 
	   DO TRANSACTION ON ERROR UNDO, RETRY:
		 /*Busca Saldo Novas Aplicacoes*/
		 
		 { includes/PLSQL_altera_session_antes_st.i &dboraayl={&scd_dboraayl} }    
		  RUN STORED-PROCEDURE pc_busca_saldo_aplicacoes
			aux_handproc = PROC-HANDLE NO-ERROR
									(INPUT par_cdcooper, /* Código da Cooperativa */
									 INPUT '1',            /* Código do Operador */
									 INPUT par_nmdatela, /* Nome da Tela */
									 INPUT 1,            /* Identificador de Origem (1 - AYLLOS / 2 - CAIXA / 3 - INTERNET / 4 - TAA / 5 - AYLLOS WEB / 6 - URA */
									 INPUT par_nrdconta, /* Número da Conta */
									 INPUT 1,            /* Titular da Conta */
									 INPUT 0,            /* Número da Aplicação / Parâmetro Opcional */
									 INPUT par_dtmvtolt, /* Data de Movimento */
									 INPUT 0,            /* Código do Produto */
									 INPUT 1,            /* Identificador de Bloqueio de Resgate (1  Todas / 2  Bloqueadas / 3  Desbloqueadas) */
									 INPUT 0,            /* Identificador de Log (0  Não / 1  Sim) */
									OUTPUT 0,            /* Saldo Total da Aplicação */
									OUTPUT 0,            /* Saldo Total para Resgate */
									OUTPUT 0,            /* Código da crítica */
									OUTPUT "").          /* Descrição da crítica */
		  
		  CLOSE STORED-PROC pc_busca_saldo_aplicacoes
				aux_statproc = PROC-STATUS WHERE PROC-HANDLE = aux_handproc.
		  
		  { includes/PLSQL_altera_session_depois_st.i &dboraayl={&scd_dboraayl} }

		  ASSIGN aux_cdcritic = 0
				 aux_dscritic = ""
				 aux_vlsldtot = 0
				 aux_vlsldrgt = 0
				 aux_cdcritic = pc_busca_saldo_aplicacoes.pr_cdcritic 
								 WHEN pc_busca_saldo_aplicacoes.pr_cdcritic <> ?
				 aux_dscritic = pc_busca_saldo_aplicacoes.pr_dscritic
								 WHEN pc_busca_saldo_aplicacoes.pr_dscritic <> ?
				 aux_vlsldtot = pc_busca_saldo_aplicacoes.pr_vlsldtot
								 WHEN pc_busca_saldo_aplicacoes.pr_vlsldtot <> ?
				 aux_vlsldrgt = pc_busca_saldo_aplicacoes.pr_vlsldrgt
								 WHEN pc_busca_saldo_aplicacoes.pr_vlsldrgt <> ?.

		  IF aux_cdcritic <> 0   OR
			 aux_dscritic <> ""  THEN
			 DO:
				 IF aux_dscritic = "" THEN
					DO:
					   FIND crapcri WHERE crapcri.cdcritic = aux_cdcritic
										  NO-LOCK NO-ERROR.
		
					   IF AVAIL crapcri THEN
						  ASSIGN aux_dscritic = crapcri.dscritic.
		
					END.
		
				 CREATE tt-erro.
		
				 ASSIGN tt-erro.cdcritic = aux_cdcritic
						tt-erro.dscritic = aux_dscritic.
		  
				 RETURN "NOK".
								
			 END.
											  
		 ASSIGN aux_vlsldrdc = aux_vlsldrgt + aux_vlsldrdc.
	 END.
	 /*Fim Busca Saldo Novas Aplicacoes*/

     
    RUN sistema/generico/procedures/b1wgen0006.p PERSISTENT
        SET h-b1wgen0006.
        
    IF  NOT VALID-HANDLE(h-b1wgen0006)  THEN
        DO:
            ASSIGN aux_cdcritic = 0
                   aux_dscritic = "Handle invalido para BO b1wgen0006.".
                   
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                       
            RETURN "NOK".
        END.
                         
    RUN consulta-poupanca IN h-b1wgen0006 (INPUT par_cdcooper,
                                           INPUT par_cdagenci,
                                           INPUT par_nrdcaixa,
                                           INPUT par_cdoperad,
                                           INPUT par_nmdatela,
                                           INPUT par_idorigem,
                                           INPUT par_nrdconta,
                                           INPUT par_idseqttl,
                                           INPUT 0,
                                           INPUT par_dtmvtolt,
                                           INPUT par_dtmvtopr,
                                           INPUT par_inproces,
                                           INPUT par_nmdatela,
                                           INPUT FALSE, 
                                          OUTPUT aux_vltotppr,
                                          OUTPUT TABLE tt-erro,
                                          OUTPUT TABLE tt-dados-rpp). 
                           
    DELETE PROCEDURE h-b1wgen0006.
            
    IF  RETURN-VALUE = "NOK"  THEN
        RETURN "NOK".

    ASSIGN aux_cdempres = 0.
 
    /* Tratamento de CPF/CGC */
    IF   crapass.inpessoa = 1   THEN
         DO:
             FIND crapttl WHERE crapttl.cdcooper = par_cdcooper AND
                                crapttl.nrdconta = par_nrdconta AND
                                crapttl.idseqttl = 1            
                                NO-LOCK NO-ERROR.
        
             IF  AVAILABLE crapttl  THEN
                 ASSIGN aux_cdempres = crapttl.cdempres.
                
             ASSIGN  aux_nrcpfcgc = STRING(crapass.nrcpfcgc,"99999999999")
                     aux_nrcpfcgc = STRING(aux_nrcpfcgc,"    xxx.xxx.xxx-xx").
         END.
    ELSE
         DO:
             FIND crapjur WHERE crapjur.cdcooper = par_cdcooper  AND
                                crapjur.nrdconta = crapass.nrdconta
                                NO-LOCK NO-ERROR.

             IF   AVAIL crapjur  THEN
                  ASSIGN aux_cdempres = crapjur.cdempres.
                  
             ASSIGN  aux_nrcpfcgc = STRING(crapass.nrcpfcgc,"99999999999999")
                     aux_nrcpfcgc = STRING(aux_nrcpfcgc,"xx.xxx.xxx/xxxx-xx").
         END.
    
    ASSIGN aux_vllimcre = crapass.vllimcre. 

    IF   crapass.inpessoa = 1   THEN
         IF  f_verifica_adm(crawcrd.cdadmcrd) = 1 THEN
             aux_vllimdeb = crapass.vllimdeb.
         ELSE
             aux_vllimdeb = 0.
    ELSE
         aux_vllimdeb = 0.
    
    FIND crapage WHERE crapage.cdcooper = par_cdcooper      AND
                       crapage.cdagenci = crapass.cdagenci  NO-LOCK NO-ERROR.

    IF   NOT AVAILABLE crapage THEN
         aux_nmresage = STRING(crapass.cdagenci,"999") + " - Nao cadastrada".
    ELSE
         aux_nmresage = STRING(crapage.cdagenci,"999") + " - " 
                        + crapage.nmresage.
    
    FIND crapemp WHERE crapemp.cdcooper = par_cdcooper  AND
                       crapemp.cdempres = aux_cdempres  NO-LOCK NO-ERROR.

    IF   NOT AVAILABLE crapemp THEN
         DO: 
             ASSIGN aux_cdcritic = 40.
                    aux_dscritic = "".
                    
             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                       
             RETURN "NOK".           
         END.
    ELSE
         aux_nmresemp = crapemp.nmresemp.
         
    IF   crapass.inpessoa = 1   THEN
         DO:
            
            FIND craptlc WHERE craptlc.cdcooper = par_cdcooper      AND
                               craptlc.cdadmcrd = crawcrd.cdadmcrd  AND
                               craptlc.dddebito = crawcrd.dddebito  AND
                               craptlc.tpcartao = 0                 AND
                               craptlc.cdlimcrd = 0                 NO-LOCK NO-ERROR.
        
        
            IF   NOT AVAILABLE craptlc   THEN
                 DO:
                    ASSIGN aux_cdcritic = 544
                           aux_dscritic = "".
        
                    RUN gera_erro (INPUT par_cdcooper,
                                   INPUT par_cdagenci,
                                   INPUT par_nrdcaixa,
                                   INPUT 1,            /** Sequencia **/
                                   INPUT aux_cdcritic,
                                   INPUT-OUTPUT aux_dscritic).
                  
                    RETURN "NOK".             
                 END.
    
         ASSIGN aux_nrctamae = craptlc.nrctamae.

         FOR FIRST craptfc FIELDS(nrdddtfc nrtelefo)
                           WHERE craptfc.cdcooper = crapass.cdcooper
                           AND   craptfc.nrdconta = crapass.nrdconta
                           AND   craptfc.tptelefo = 1
                           NO-LOCK:

              ASSIGN aux_nrdofone = STRING(craptfc.nrdddtfc) +
                                    STRING(craptfc.nrtelefo).
         END.
      END.
   ELSE
      DO:
          ASSIGN aux_nrctamae = 0.
    
          FOR FIRST craptfc FIELDS(nrdddtfc nrtelefo)
                            WHERE craptfc.cdcooper = crapass.cdcooper
                            AND   craptfc.nrdconta = crapass.nrdconta
                            AND   craptfc.tptelefo = 3
                            NO-LOCK:
              ASSIGN aux_nrdofone = STRING(craptfc.nrdddtfc) +
                                    STRING(craptfc.nrtelefo).
          END.
      END.

    IF   crapass.inpessoa = 1   THEN
         DO:

                FIND craptlc WHERE craptlc.cdcooper = par_cdcooper      AND
                                   craptlc.cdadmcrd = crawcrd.cdadmcrd  AND
                                   craptlc.tpcartao = crawcrd.tpcartao  AND
                                   craptlc.cdlimcrd = crawcrd.cdlimcrd  AND
                                   craptlc.dddebito = 0                 NO-LOCK NO-ERROR.
                                    
            
                IF   NOT AVAILABLE craptlc   THEN
                     DO:
                        ASSIGN aux_cdcritic = 532
                               aux_dscritic = "".
            
                        RUN gera_erro (INPUT par_cdcooper,
                                       INPUT par_cdagenci,
                                       INPUT par_nrdcaixa,
                                       INPUT 1,            /** Sequencia **/
                                       INPUT aux_cdcritic,
                                       INPUT-OUTPUT aux_dscritic).
                      
                        RETURN "NOK".
                     END.
                        
                ASSIGN aux_vllimcrd = craptlc.vllimcrd.

         END.
    ELSE
         DO:

                FIND craphcj WHERE craphcj.cdcooper = par_cdcooper   AND
                                   craphcj.nrdconta = par_nrdconta   NO-LOCK NO-ERROR.


                IF   AVAILABLE craphcj THEN
                     ASSIGN aux_vllimcrd = craphcj.vllimglb.
                ELSE
                     ASSIGN aux_vllimcrd = 0.


         END.


    /* consulta faturamento */
    IF  NOT VALID-HANDLE(h-b1wgen0069) THEN
        RUN sistema/generico/procedures/b1wgen0069.p
            PERSISTENT SET h-b1wgen0069.

    ASSIGN aux_nrposext = 0.

    RUN Busca_Dados IN h-b1wgen0069
        ( INPUT par_cdcooper,
          INPUT 0,
          INPUT 0,
          INPUT par_cdoperad,
          INPUT par_nmdatela,
          INPUT 1,
          INPUT par_nrdconta,
          INPUT par_idseqttl,
          INPUT YES,
          INPUT aux_nrposext,
         OUTPUT TABLE tt-faturam,
         OUTPUT TABLE tt-erro) .

    IF  RETURN-VALUE <> "OK" OR TEMP-TABLE tt-erro:HAS-RECORDS THEN
        DO:
           FIND FIRST tt-erro NO-ERROR.

           IF  AVAILABLE tt-erro THEN
               DO:
                  MESSAGE tt-erro.dscritic.
                  DELETE PROCEDURE h-b1wgen0069.
                  RETURN "NOK".
               END.
        END.

    FIND tt-faturam WHERE mesftbru = MONTH(par_dtmvtolt)    AND 
                          anoftbru =  YEAR(par_dtmvtolt) NO-LOCK NO-ERROR.

    IF  AVAIL tt-faturam THEN
        ASSIGN aux_vlrftmes = tt-faturam.vlrftbru.
    ELSE
        ASSIGN aux_vlrftmes = 0.


    ASSIGN aux_vlrfttot = 0.

    ASSIGN aux_dtperiod = ADD-INTERVAL (par_dtmvtolt, -12, "MONTHS"). 

    DO aux_dtauxili = aux_dtperiod TO par_dtmvtolt:

        IF MONTH(aux_dtauxili) <> aux_mesperio OR YEAR(aux_dtauxili) <> aux_anoperio THEN DO:

            ASSIGN 
                aux_mesperio = MONTH(aux_dtauxili)
                aux_anoperio = YEAR(aux_dtauxili).

            IF NOT CAN-FIND(FIRST ttPeriodo
                            WHERE ttPeriodo.ano = aux_anoperio
                              AND ttPeriodo.mes = aux_mesperio) THEN DO:

                CREATE ttPeriodo.
                ASSIGN
                    ttPeriodo.ano = aux_anoperio
                    ttPeriodo.mes = aux_mesperio.
            END.

        END.

    END.
    
    FOR EACH ttPeriodo NO-LOCK
       BREAK BY ttPeriodo.ano
             BY ttPeriodo.mes:  

       FIND tt-faturam WHERE mesftbru = ttPeriodo.mes     AND 
                             anoftbru = ttPeriodo.ano NO-LOCK NO-ERROR.

       IF  AVAIL tt-faturam THEN
           ASSIGN aux_vlrfttot = aux_vlrfttot + tt-faturam.vlrftbru.

           
    END.

    IF  VALID-HANDLE(h-b1wgen0069) THEN
        DELETE PROCEDURE h-b1wgen0069.

    FIND crapope WHERE crapope.cdcooper = par_cdcooper     AND
                       crapope.cdoperad = par_cdoperad NO-LOCK NO-ERROR.
                           
    IF  AVAILABLE crapope  THEN
        ASSIGN aux_nmoperad = crapope.nmoperad.
    ELSE
        ASSIGN aux_nmoperad = STRING(par_cdoperad,"x(10)") +
                              " - NAO CADASTRADO".
        
    IF  crapass.inpessoa = 1  THEN
        DO:
            FIND crapttl WHERE crapttl.cdcooper = par_cdcooper AND
                               crapttl.nrdconta = par_nrdconta AND
                               crapttl.idseqttl = 1            NO-LOCK NO-ERROR.
        
            IF  NOT AVAILABLE crapttl  THEN
                DO:
                    ASSIGN aux_cdcritic = 0
                           aux_dscritic = "Titular nao cadastrado.".
                
                    RUN gera_erro (INPUT par_cdcooper,
                                   INPUT par_cdagenci,
                                   INPUT par_nrdcaixa,
                                   INPUT 1,            /** Sequencia **/
                                   INPUT aux_cdcritic,
                                   INPUT-OUTPUT aux_dscritic).
                                       
                    RETURN "NOK".
                END.
                
            ASSIGN aux_nrcpfcgc = STRING(STRING(crapass.nrcpfcgc,
                                  "99999999999"),"xxx.xxx.xxx-xx").
        END.
    ELSE
        ASSIGN  aux_nrcpfcgc = STRING(STRING(crapass.nrcpfcgc,
                              "99999999999999"),"xx.xxx.xxx/xxxx-xx").
                              
    IF  crapass.inpessoa = 1  THEN 
        DO:

            /* Cria tabela de avalistas para Nota Promissoria */
            { sistema/generico/includes/b1wgen0028.i }

        END.


    /************NOTA PROMISSORIA**************/
    RUN sistema/generico/procedures/b1wgen9999.p PERSISTENT SET h-b1wgen9999.

    IF  NOT VALID-HANDLE(h-b1wgen9999)  THEN
        DO:
            ASSIGN aux_cdcritic = 0
                   aux_dscritic = "Handle invalido para BO b1wgen9999.".

            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).

            RETURN "NOK".
        END.

    RUN valor-extenso IN h-b1wgen9999 (INPUT aux_vllimcrd,
                                       INPUT 20,
                                       INPUT 69,
                                       INPUT "M",
                                      OUTPUT aux_dsvllim1,
                                      OUTPUT aux_dsvllim2).
          
    IF  RETURN-VALUE = "NOK"  THEN
        DO:
            DELETE PROCEDURE h-b1wgen9999.
            RETURN "NOK".       
        END.    

    IF  DAY(par_dtmvtolt) > 1  THEN
        DO:
            RUN valor-extenso IN h-b1wgen9999 (INPUT DAY(par_dtmvtolt), 
                                               INPUT 50,
                                               INPUT 50, 
                                               INPUT "I",
                                              OUTPUT aux_dsextens, 
                                              OUTPUT aux_dsbranco).

            IF  RETURN-VALUE = "NOK"  THEN
                DO:
                    DELETE PROCEDURE h-b1wgen9999.
                    RETURN "NOK".       
                END.
        
            ASSIGN aux_dsextens = aux_dsextens + " DIAS DO MES DE " +
                                  CAPS(ENTRY(MONTH(par_dtmvtolt),aux_dsmesref)) 
                                  + " DE ".  

            RUN valor-extenso IN h-b1wgen9999 (INPUT YEAR(par_dtmvtolt),
                                               INPUT 68 - LENGTH(aux_dsextens),
                                               INPUT 44, 
                                               INPUT "I",
                                              OUTPUT aux_dsdtmvt1, 
                                              OUTPUT aux_dsdtmvt2).

            IF  RETURN-VALUE = "NOK"  THEN
                DO:
                    DELETE PROCEDURE h-b1wgen9999.
                    RETURN "NOK".       
                END.    

            ASSIGN aux_dsdtmvt1 = aux_dsextens + aux_dsdtmvt1
                   aux_dsdtmvt2 = aux_dsdtmvt2.
                   
            IF  par_idorigem = 5  THEN /** Ayllos WEB **/
                ASSIGN aux_dsdtmvt1 = aux_dsdtmvt1 + 
                                      FILL("*",78 - LENGTH(aux_dsdtmvt1))
                       aux_dsdtmvt2 = aux_dsdtmvt2 + 
                                      FILL("*",8 - LENGTH(aux_dsdtmvt2)).
            ELSE
                ASSIGN aux_dsdtmvt1 = aux_dsdtmvt1 + 
                                      FILL("*",68 - LENGTH(aux_dsdtmvt1))
                       aux_dsdtmvt2 = aux_dsdtmvt2 + 
                                      FILL("*",44 - LENGTH(aux_dsdtmvt2)).
        END.
    ELSE
        DO:            
            ASSIGN aux_dsextens = "PRIMEIRO DIA DO MES DE " +
                                  CAPS(ENTRY(MONTH(par_dtmvtolt),aux_dsmesref))
                                  + " DE ".

            RUN valor-extenso IN h-b1wgen9999 (INPUT YEAR(par_dtmvtolt),
                                               INPUT 68 - LENGTH(aux_dsextens),
                                               INPUT 44, 
                                               INPUT "I",
                                              OUTPUT aux_dsdtmvt1, 
                                              OUTPUT aux_dsdtmvt2).

            IF  RETURN-VALUE = "NOK"  THEN
                DO:
                    DELETE PROCEDURE h-b1wgen9999.
                    RETURN "NOK".       
                END.

            ASSIGN aux_dsdtmvt1 = aux_dsextens + aux_dsdtmvt1 
                   aux_dsdtmvt2 = aux_dsdtmvt2. 
                   
            IF  par_idorigem = 5  THEN /** Ayllos WEB **/
                ASSIGN aux_dsdtmvt1 = aux_dsdtmvt1 + 
                                      FILL("*",78 - LENGTH(aux_dsdtmvt1))
                       aux_dsdtmvt2 = aux_dsdtmvt2 + 
                                      FILL("*",8 - LENGTH(aux_dsdtmvt2)).
            ELSE
                ASSIGN aux_dsdtmvt1 = aux_dsdtmvt1 + 
                                      FILL("*",68 - LENGTH(aux_dsdtmvt1))
                       aux_dsdtmvt2 = aux_dsdtmvt2 + 
                                      FILL("*",44 - LENGTH(aux_dsdtmvt2)).
        END.

    RUN valor-extenso IN h-b1wgen9999 (INPUT aux_vllimcrd, 
                                       INPUT 45,
                                       INPUT 73,
                                       INPUT "M",
                                      OUTPUT aux_dsvlnpr1,
                                      OUTPUT aux_dsvlnpr2).
    
    IF  RETURN-VALUE = "NOK"  THEN
        DO:
            DELETE PROCEDURE h-b1wgen9999.
            RETURN "NOK".       
        END.
                    
    RUN divide-nome-coop IN h-b1wgen9999 (INPUT crapcop.nmextcop,
                                         OUTPUT aux_nmexcop1,
                                         OUTPUT aux_nmexcop2).
        
    DELETE PROCEDURE h-b1wgen9999.

    FIND crapage WHERE crapage.cdcooper = par_cdcooper     AND
                       crapage.cdagenci = crapass.cdagenci 
                       NO-LOCK NO-ERROR.

    IF  NOT AVAILABLE crapage  THEN
        ASSIGN aux_nmcidpac = "____________________".
    ELSE
        ASSIGN aux_nmcidpac = crapage.nmcidade.
    
    /* Tratamento de CPF/CGC */
    IF   crapass.inpessoa = 1   THEN
         ASSIGN  aux_nrcpfcgc = STRING(crapass.nrcpfcgc,"99999999999")
                 aux_nrcpfcgc = STRING(aux_nrcpfcgc,"    xxx.xxx.xxx-xx").
    ELSE
         ASSIGN  aux_nrcpfcgc = STRING(crapass.nrcpfcgc,"99999999999999")
                 aux_nrcpfcgc = STRING(aux_nrcpfcgc,"xx.xxx.xxx/xxxx-xx").     
                    
    ASSIGN  aux_dsectrnp = STRING(DAY(par_dtmvtolt),"99") + 
                               " de " +
                           TRIM(ENTRY(MONTH(par_dtmvtolt),aux_dsmesref)) +
                               " de " +
                               STRING(YEAR(par_dtmvtolt)).                       
    FIND crapenc WHERE crapenc.cdcooper = par_cdcooper     AND
                       crapenc.nrdconta = crapass.nrdconta AND
                       crapenc.idseqttl = 1                AND
                       crapenc.cdseqinc = 1 
                       NO-LOCK NO-ERROR.
    
    CREATE tt-dados_prp_ccr.
    ASSIGN tt-dados_prp_ccr.nmextcop = crapcop.nmextcop
           tt-dados_prp_ccr.dsadicio = aux_dsadicio
           tt-dados_prp_ccr.nrctrcrd = par_nrctrcrd
           tt-dados_prp_ccr.nrdconta = par_nrdconta
           tt-dados_prp_ccr.nrmatric = crapass.nrmatric
           tt-dados_prp_ccr.nmresage = aux_nmresage
           tt-dados_prp_ccr.nmprimtl = crapass.nmprimtl
           tt-dados_prp_ccr.dtadmiss = crapass.dtadmiss
           tt-dados_prp_ccr.nmsegntl = crapass.nmsegntl
           tt-dados_prp_ccr.nmresemp = aux_nmresemp
           tt-dados_prp_ccr.nrdofone = aux_nrdofone
           tt-dados_prp_ccr.dstipcta = aux_dstipcta
           tt-dados_prp_ccr.dssitdct = aux_dssitdct
           tt-dados_prp_ccr.tpcartao = aux_tpcartao           
           tt-dados_prp_ccr.nmtitcrd = IF   crapass.inpessoa = 1   THEN
                                            crawcrd.nmtitcrd
                                       ELSE
                                            ""
           tt-dados_prp_ccr.vlaplica = aux_vlsldrdc + aux_vltotppr
           tt-dados_prp_ccr.nrcpfcgc = aux_nrcpfcgc
           tt-dados_prp_ccr.nrcpftit = aux_nrcpftit
           tt-dados_prp_ccr.dsparent = aux_dsparent
           tt-dados_prp_ccr.vlsmdtri = aux_vlsmdtri
           tt-dados_prp_ccr.vltotemp = aux_vltotemp
           tt-dados_prp_ccr.vltotpre = aux_vltotpre
           tt-dados_prp_ccr.vlutiliz = aux_vlutiliz
           tt-dados_prp_ccr.vlcaptal = aux_vlcaptal  
           tt-dados_prp_ccr.vlprepla = aux_vlprepla
           tt-dados_prp_ccr.vlaplica = aux_vlsldrdc + aux_vltotppr
           tt-dados_prp_ccr.vlsalari = IF   crapass.inpessoa = 1   THEN 
                                            crawcrd.vlsalari
                                       ELSE
                                            0
           tt-dados_prp_ccr.vlsalcon = IF   crapass.inpessoa = 1   THEN
                                            crawcrd.vlsalcon
                                       ELSE
                                            0
           tt-dados_prp_ccr.vloutras = IF   crapass.inpessoa = 1   THEN
                                            crawcrd.vloutras
                                       ELSE
                                            0
           tt-dados_prp_ccr.vllimcre = crapass.vllimcre
           tt-dados_prp_ccr.vllimdeb = aux_vllimdeb           
           tt-dados_prp_ccr.vlalugue = IF   crapass.inpessoa = 1   THEN
                                            crawcrd.vlalugue
                                       ELSE
                                            0
           tt-dados_prp_ccr.vltotemp = aux_vltotemp
           tt-dados_prp_ccr.vltotpre = aux_vltotpre           
           tt-dados_prp_ccr.dddebito = IF   crapass.inpessoa = 1   THEN
                                            crawcrd.dddebito
                                       ELSE
                                            0
           tt-dados_prp_ccr.nrctamae = aux_nrctamae           
           tt-dados_prp_ccr.cdlimcrd = IF   crapass.inpessoa = 1   THEN
                                            crawcrd.cdlimcrd
                                       ELSE
                                            0
           tt-dados_prp_ccr.vllimcrd = aux_vllimcrd
           tt-dados_prp_ccr.nmoperad = aux_nmoperad
           tt-dados_prp_ccr.nmprimtl = crapass.nmprimtl
           tt-dados_prp_ccr.nmrecop1 = aux_nmrecop1    
           tt-dados_prp_ccr.nmrecop2 = aux_nmrecop2
           tt-dados_prp_ccr.nmcidade = crapcop.nmcidade
           tt-dados_prp_ccr.cdufdcop = crapcop.cdufdcop
           tt-dados_prp_ccr.dsemsprp = IF   crapass.inpessoa = 1   THEN
                                            STRING(DAY(crawcrd.dtpropos),"99") + 
                                            " de " +
                                TRIM(ENTRY(MONTH(crawcrd.dtpropos),aux_dsmesref)) +
                                            " de " +
                                            STRING(YEAR(crawcrd.dtpropos),"9999")
                                       ELSE
                                            STRING(DAY(par_dtmvtolt),"99") + 
                                            " de " +
                                TRIM(ENTRY(MONTH(par_dtmvtolt),aux_dsmesref)) +
                                            " de " +
                                            STRING(YEAR(par_dtmvtolt),"9999")
           tt-dados_prp_ccr.dslinha1 = aux_dslinha1
           tt-dados_prp_ccr.dslinha2 = aux_dslinha2
           tt-dados_prp_ccr.dslinha3 = aux_dslinha3
           tt-dados_prp_ccr.dsdestin = aux_dsdestin
           tt-dados_prp_ccr.dscontat = aux_dscontat           
           tt-dados_prp_ccr.nrcrcard = IF   crapass.inpessoa = 1   THEN
                                            crawcrd.nrcrcard
                                       ELSE
                                            0
           tt-dados_prp_ccr.dsemprp2 = STRING(DAY(par_dtmvtolt),"99") + 
                                       " de " +
                           TRIM(ENTRY(MONTH(par_dtmvtolt),aux_dsmesref)) +
                                       " de " +
                                       STRING(YEAR(par_dtmvtolt),"9999")
           tt-dados_prp_ccr.nmexcop1 = aux_nmexcop1
           tt-dados_prp_ccr.nmexcop2 = aux_nmexcop2
           tt-dados_prp_ccr.dscpfcgc = IF crapass.inpessoa = 1
                                         THEN "C.P.F. " + TRIM(aux_nrcpfcgc)
                                         ELSE "CNPJ " + TRIM(aux_nrcpfcgc)
           tt-dados_prp_ccr.endeass1 = crapenc.dsendere + " " + 
                                   TRIM(STRING(crapenc.nrendere,"zzz,zzz"))
           tt-dados_prp_ccr.endeass2 = TRIM(crapenc.nmbairro) + " - " +
                                   TRIM(crapenc.nmcidade) + " - " +
                                   STRING(crapenc.nrcepend,"99,999,999") + 
                                   " - " + crapenc.cdufende
           tt-dados_prp_ccr.nmcidpac = aux_nmcidpac
           tt-dados_prp_ccr.dsctrcrd = IF   crapass.inpessoa = 1   THEN
                                            TRIM(STRING(crawcrd.nrctrcrd,
                                                     "z,zzz,zz9")) + "/001"
                                       ELSE
/*                                            TRIM(STRING(craphcj.nrctrhcj,   */
/*                                                     "z,zzz,zz9")) + "/001" */
                                            ""
           tt-dados_prp_ccr.vllimite = IF   crapass.inpessoa = 1   THEN
                                            craptlc.vllimcrd
                                       ELSE
                                            IF  AVAIL craptlc THEN
                                                craptlc.vllimcrd
                                            ELSE
                                                0
           tt-dados_prp_ccr.dsdtmvt1 = aux_dsdtmvt1
           tt-dados_prp_ccr.dsdtmvt2 = aux_dsdtmvt2
           tt-dados_prp_ccr.dsvlnpr1 = aux_dsvlnpr1
           tt-dados_prp_ccr.dsvlnpr2 = aux_dsvlnpr2
           tt-dados_prp_ccr.dsdmoeda = "R$"
           tt-dados_prp_ccr.vlrftmes = aux_vlrftmes
           tt-dados_prp_ccr.vlrfttot = aux_vlrfttot.
                                       
    RETURN "OK".
    
END PROCEDURE.

/***************************************************
    Carregar dados para impressao do contrato 
    do cartao de credito CREDICARD
****************************************************/
PROCEDURE contrato_credicard:

    DEF  INPUT PARAM par_cdcooper AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_cdagenci AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrdcaixa AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_cdoperad AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nmdatela AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_idorigem AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrdconta AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_idseqttl AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_dtmvtolt AS DATE                           NO-UNDO.
    DEF  INPUT PARAM par_nrctrcrd AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_flgimpnp AS LOGI                           NO-UNDO.
    
    DEF OUTPUT PARAM TABLE FOR tt-ctr_credicard.
    DEF OUTPUT PARAM TABLE FOR tt-avais-ctr.
    DEF OUTPUT PARAM TABLE FOR tt-erro.

    DEF VAR aux_nmcidade AS CHAR        NO-UNDO.
    DEF VAR aux_nmrecop1 AS CHAR        NO-UNDO.
    DEF VAR aux_nmrecop2 AS CHAR        NO-UNDO.
    DEF VAR aux_nrdocnpj AS CHAR        NO-UNDO.
    DEF VAR aux_dsmesref AS CHAR INIT
                         ["Janeiro,Fevereiro,Marco,Abril,Maio,Junho,
                          Julho,Agosto,Setembro,Outubro,Novembro,Dezembro"]
                                        NO-UNDO.   
    DEF VAR aux_dsemsctr AS CHAR        NO-UNDO.
    DEF VAR aux_dssubsti AS CHAR        NO-UNDO.
    DEF VAR aux_nmoperad AS CHAR        NO-UNDO.
    DEF VAR aux_nrcpfcgc AS CHAR        NO-UNDO.
    DEF VAR aux_dsectrnp AS CHAR        NO-UNDO.
    
    /** NOTA PROMISSORIA **/
    DEF VAR aux_nmexcop1 AS CHAR                                    NO-UNDO.
    DEF VAR aux_nmexcop2 AS CHAR                                    NO-UNDO. 
    DEF VAR aux_dsvllim1 AS CHAR                                    NO-UNDO.
    DEF VAR aux_dsvllim2 AS CHAR                                    NO-UNDO. 
    DEF VAR aux_nmcidpac AS CHAR                                    NO-UNDO.
    DEF VAR aux_dsdtmvt1 AS CHAR                                    NO-UNDO.
    DEF VAR aux_dsdtmvt2 AS CHAR                                    NO-UNDO. 
    DEF VAR aux_dsextens AS CHAR                                    NO-UNDO.
    DEF VAR aux_dsbranco AS CHAR                                    NO-UNDO. 
    DEF VAR aux_dsvlnpr1 AS CHAR                                    NO-UNDO.
    DEF VAR aux_dsvlnpr2 AS CHAR                                    NO-UNDO. 

    DEF VAR h-b1wgen9999 AS HANDLE      NO-UNDO.
    /* para includes notapromissoria */
    DEF BUFFER crabass FOR crapass.
    
    EMPTY TEMP-TABLE tt-ctr_credicard.
    EMPTY TEMP-TABLE tt-avais-ctr.
    EMPTY TEMP-TABLE tt-erro.

    FIND crapcop WHERE crapcop.cdcooper = par_cdcooper NO-LOCK NO-ERROR.

    IF   NOT AVAILABLE crapcop THEN
         DO:
             ASSIGN aux_cdcritic = 651
                    aux_dscritic = "".
                   
             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                       
             RETURN "NOK".
         END.
 
    ASSIGN aux_nmcidade = TRIM(crapcop.nmcidade).

    RUN sistema/generico/procedures/b1wgen9999.p PERSISTENT
        SET h-b1wgen9999.
        
    IF  NOT VALID-HANDLE(h-b1wgen9999)  THEN
        DO:
            ASSIGN aux_cdcritic = 0
                   aux_dscritic = "Handle invalido para BO b1wgen9999.".
                   
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                       
            RETURN "NOK".
        END.
    
    RUN divide-nome-coop IN h-b1wgen9999 (INPUT crapcop.nmextcop,
                                          OUTPUT aux_nmrecop1,
                                          OUTPUT aux_nmrecop2).

    DELETE PROCEDURE h-b1wgen9999.
    
    aux_nrdocnpj = "CNPJ " + STRING(STRING(crapcop.nrdocnpj,"99999999999999"),
                                    "xx.xxx.xxx/xxxx-xx").

    FIND FIRST crawcrd WHERE crawcrd.cdcooper = par_cdcooper AND
                             crawcrd.nrdconta = par_nrdconta AND
                             crawcrd.nrctrcrd = par_nrctrcrd     
                             NO-LOCK NO-ERROR.

    IF   NOT AVAILABLE crawcrd THEN
         DO:
             ASSIGN aux_cdcritic = 535
                    aux_dscritic = "".
                   
             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                       
             RETURN "NOK".
         END.

    IF  crawcrd.insitcrd <> 4 THEN
        DO:
            ASSIGN aux_cdcritic = 538
                   aux_dscritic = "".
                   
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                       
            RETURN "NOK".
        END.
        
    FIND craptlc WHERE craptlc.cdcooper = par_cdcooper       AND
                       craptlc.cdadmcrd = crawcrd.cdadmcrd   AND
                       craptlc.tpcartao = crawcrd.tpcartao   AND
                       craptlc.cdlimcrd = crawcrd.cdlimcrd   AND
                       craptlc.dddebito = 0  
                       NO-LOCK NO-ERROR.
                         
    IF  NOT AVAILABLE craptlc   THEN
        DO:
            ASSIGN aux_cdcritic = 532
                   aux_dscritic = "".

            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).        
                 
            RETURN "NOK".
                      
       END.        

    IF   crawcrd.dtentr2v <> ? AND
         crawcrd.dtultval <> par_dtmvtolt THEN
         ASSIGN aux_dssubsti = "(SEGUNDA VIA)"
                aux_dsemsctr = STRING(DAY(crawcrd.dtentr2v),"99") + 
                               " de " +
                           TRIM(ENTRY(MONTH(crawcrd.dtentr2v),aux_dsmesref)) +
                               " de " +
                               STRING(YEAR(crawcrd.dtentr2v),"9999").
    ELSE
         IF   crawcrd.dtultval = par_dtmvtolt THEN
              ASSIGN aux_dssubsti = "RENOVACAO"
                     aux_dsemsctr = STRING(DAY(crawcrd.dtultval),"99") + 
                                    " de " +
                           TRIM(ENTRY(MONTH(crawcrd.dtultval),aux_dsmesref)) +
                                    " de " +                              
                                    STRING(YEAR(crawcrd.dtultval),"9999").
         ELSE
              ASSIGN aux_dssubsti = ""
                     aux_dsemsctr = STRING(DAY(crawcrd.dtentreg),"99") + 
                                    " de " +
                            TRIM(ENTRY(MONTH(crawcrd.dtentreg),aux_dsmesref)) +
                                    " de " +
                                    STRING(YEAR(crawcrd.dtentreg),"9999").

    /* Cria tabela de avalistas para Nota Promissoria */
    { sistema/generico/includes/b1wgen0028.i }
    
    FOR FIRST crapass FIELDS(inpessoa nmprimtl nrcpfcgc nrdconta cdagenci)
                     WHERE crapass.cdcooper = par_cdcooper   AND
                       crapass.nrdconta = par_nrdconta   NO-LOCK:
    END.

    IF   NOT AVAILABLE crapass   THEN
         DO:
             ASSIGN aux_cdcritic = 251
                    aux_dscritic = "".
                   
             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                       
             RETURN "NOK".
         END.
         
    /* Tratamento de CPF/CGC */
    IF   crapass.inpessoa = 1   THEN
         ASSIGN  aux_nrcpfcgc = STRING(crapass.nrcpfcgc,"99999999999")
                 aux_nrcpfcgc = STRING(aux_nrcpfcgc,"    xxx.xxx.xxx-xx").
    ELSE
         ASSIGN  aux_nrcpfcgc = STRING(crapass.nrcpfcgc,"99999999999999")
                 aux_nrcpfcgc = STRING(aux_nrcpfcgc,"xx.xxx.xxx/xxxx-xx").
         
    FIND crapope WHERE crapope.cdcooper = par_cdcooper     AND
                       crapope.cdoperad = par_cdoperad NO-LOCK NO-ERROR.
                           
    IF  AVAILABLE crapope  THEN
        ASSIGN aux_nmoperad = crapope.nmoperad.
    ELSE
        ASSIGN aux_nmoperad = STRING(par_cdoperad,"x(10)") +
                              " - NAO CADASTRADO".

    /************NOTA PROMISSORIA**************/
    RUN sistema/generico/procedures/b1wgen9999.p PERSISTENT SET h-b1wgen9999.
        
    IF  NOT VALID-HANDLE(h-b1wgen9999)  THEN
        DO:
            ASSIGN aux_cdcritic = 0
                   aux_dscritic = "Handle invalido para BO b1wgen9999.".
                   
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
            
            RETURN "NOK".
        END.    

    RUN valor-extenso IN h-b1wgen9999 (INPUT craptlc.vllimcrd, 
                                       INPUT 20,
                                       INPUT 69,
                                       INPUT "M",
                                      OUTPUT aux_dsvllim1, 
                                      OUTPUT aux_dsvllim2).
          
    IF  RETURN-VALUE = "NOK"  THEN
        DO:
            DELETE PROCEDURE h-b1wgen9999.
            
            ASSIGN aux_cdcritic = 0
                   aux_dscritic = aux_dsvllim1.
                   
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
            
            RETURN "NOK".       
        END.

    IF  DAY(par_dtmvtolt) > 1  THEN
        DO:
            RUN valor-extenso IN h-b1wgen9999 (INPUT DAY(par_dtmvtolt), 
                                               INPUT 50,
                                               INPUT 50, 
                                               INPUT "I",
                                              OUTPUT aux_dsextens, 
                                              OUTPUT aux_dsbranco).

            IF  RETURN-VALUE = "NOK"  THEN
                DO:
                    DELETE PROCEDURE h-b1wgen9999.
            
                    ASSIGN aux_cdcritic = 0
                           aux_dscritic = aux_dsextens.
                   
                    RUN gera_erro (INPUT par_cdcooper,
                                   INPUT par_cdagenci,
                                   INPUT par_nrdcaixa,
                                   INPUT 1,            /** Sequencia **/
                                   INPUT aux_cdcritic,
                                   INPUT-OUTPUT aux_dscritic).
            
                    RETURN "NOK".       
                END.
        
            ASSIGN aux_dsextens = aux_dsextens + " DIAS DO MES DE " +
                                  CAPS(ENTRY(MONTH(par_dtmvtolt),aux_dsmesref)) 
                                  + " DE ".  

            RUN valor-extenso IN h-b1wgen9999 (INPUT YEAR(par_dtmvtolt),
                                               INPUT 68 - LENGTH(aux_dsextens),
                                               INPUT 44, 
                                               INPUT "I",
                                              OUTPUT aux_dsdtmvt1, 
                                              OUTPUT aux_dsdtmvt2).

            IF  RETURN-VALUE = "NOK"  THEN
                DO:
                    DELETE PROCEDURE h-b1wgen9999.
            
                    ASSIGN aux_cdcritic = 0
                           aux_dscritic = aux_dsdtmvt1.
                   
                    RUN gera_erro (INPUT par_cdcooper,
                                   INPUT par_cdagenci,
                                   INPUT par_nrdcaixa,
                                   INPUT 1,            /** Sequencia **/
                                   INPUT aux_cdcritic,
                                   INPUT-OUTPUT aux_dscritic).
            
                    RETURN "NOK".       
                END.

            ASSIGN aux_dsdtmvt1 = aux_dsextens + aux_dsdtmvt1
                   aux_dsdtmvt2 = aux_dsdtmvt2.
                   
            IF  par_idorigem = 5  THEN /** Ayllos WEB **/
                ASSIGN aux_dsdtmvt1 = aux_dsdtmvt1 + 
                                      FILL("*",78 - LENGTH(aux_dsdtmvt1))
                       aux_dsdtmvt2 = aux_dsdtmvt2 + 
                                      FILL("*",8 - LENGTH(aux_dsdtmvt2)).
            ELSE
                ASSIGN aux_dsdtmvt1 = aux_dsdtmvt1 + 
                                      FILL("*",68 - LENGTH(aux_dsdtmvt1))
                       aux_dsdtmvt2 = aux_dsdtmvt2 + 
                                      FILL("*",44 - LENGTH(aux_dsdtmvt2)).
        END.
    ELSE
        DO:            
            ASSIGN aux_dsextens = "PRIMEIRO DIA DO MES DE " +
                                  CAPS(ENTRY(MONTH(par_dtmvtolt),aux_dsmesref))
                                  + " DE ".

            RUN valor-extenso IN h-b1wgen9999 (INPUT YEAR(par_dtmvtolt),
                                               INPUT 68 - LENGTH(aux_dsextens),
                                               INPUT 44, 
                                               INPUT "I",
                                              OUTPUT aux_dsdtmvt1, 
                                              OUTPUT aux_dsdtmvt2).

            IF  RETURN-VALUE = "NOK"  THEN
                DO:
                    DELETE PROCEDURE h-b1wgen9999.
            
                    ASSIGN aux_cdcritic = 0
                           aux_dscritic = aux_dsdtmvt1.
                   
                    RUN gera_erro (INPUT par_cdcooper,
                                   INPUT par_cdagenci,
                                   INPUT par_nrdcaixa,
                                   INPUT 1,            /** Sequencia **/
                                   INPUT aux_cdcritic,
                                   INPUT-OUTPUT aux_dscritic).
            
                    RETURN "NOK".       
                END.

            ASSIGN aux_dsdtmvt1 = aux_dsextens + aux_dsdtmvt1 
                   aux_dsdtmvt2 = aux_dsdtmvt2. 
                   
            IF  par_idorigem = 5  THEN /** Ayllos WEB **/
                ASSIGN aux_dsdtmvt1 = aux_dsdtmvt1 + 
                                      FILL("*",78 - LENGTH(aux_dsdtmvt1))
                       aux_dsdtmvt2 = aux_dsdtmvt2 + 
                                      FILL("*",8 - LENGTH(aux_dsdtmvt2)).
            ELSE
                ASSIGN aux_dsdtmvt1 = aux_dsdtmvt1 + 
                                      FILL("*",68 - LENGTH(aux_dsdtmvt1))
                       aux_dsdtmvt2 = aux_dsdtmvt2 + 
                                      FILL("*",44 - LENGTH(aux_dsdtmvt2)).
        END.
    
    RUN valor-extenso IN h-b1wgen9999 (INPUT craptlc.vllimcrd, 
                                       INPUT 45,
                                       INPUT 73,
                                       INPUT "M",
                                      OUTPUT aux_dsvlnpr1,
                                      OUTPUT aux_dsvlnpr2).
    
    IF  RETURN-VALUE = "NOK"  THEN
        DO:
            DELETE PROCEDURE h-b1wgen9999.
            
            ASSIGN aux_cdcritic = 0
                   aux_dscritic = aux_dsvlnpr1.
                   
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
           
            RETURN "NOK".       
        END.
                    
    RUN divide-nome-coop IN h-b1wgen9999 (INPUT crapcop.nmextcop,
                                         OUTPUT aux_nmexcop1,
                                         OUTPUT aux_nmexcop2).
        
    DELETE PROCEDURE h-b1wgen9999.

    FIND crapage WHERE crapage.cdcooper = par_cdcooper     AND
                       crapage.cdagenci = crapass.cdagenci 
                       NO-LOCK NO-ERROR.

    IF  NOT AVAILABLE crapage  THEN
        ASSIGN aux_nmcidpac = "____________________".
    ELSE
        ASSIGN aux_nmcidpac = crapage.nmcidade.
    
    /* Tratamento de CPF/CGC */
    IF   crapass.inpessoa = 1   THEN
         ASSIGN  aux_nrcpfcgc = STRING(crapass.nrcpfcgc,"99999999999")
                 aux_nrcpfcgc = STRING(aux_nrcpfcgc,"    xxx.xxx.xxx-xx").
    ELSE
         ASSIGN  aux_nrcpfcgc = STRING(crapass.nrcpfcgc,"99999999999999")
                 aux_nrcpfcgc = STRING(aux_nrcpfcgc,"xx.xxx.xxx/xxxx-xx").     
                    
    ASSIGN  aux_dsectrnp = STRING(DAY(par_dtmvtolt),"99") + 
                               " de " +
                           TRIM(ENTRY(MONTH(par_dtmvtolt),aux_dsmesref)) +
                               " de " +
                               STRING(YEAR(par_dtmvtolt)).
                               
    FIND crapenc WHERE crapenc.cdcooper = par_cdcooper     AND
                       crapenc.nrdconta = crapass.nrdconta AND
                       crapenc.idseqttl = 1                AND
                       crapenc.cdseqinc = 1 
                       NO-LOCK NO-ERROR.
                    
    CREATE tt-ctr_credicard.
    ASSIGN tt-ctr_credicard.nmextcop = crapcop.nmextcop
           tt-ctr_credicard.dssubsti = aux_dssubsti
           tt-ctr_credicard.nmprimtl = crapass.nmprimtl
           tt-ctr_credicard.nrcpfcgc = crapass.nrcpfcgc
           tt-ctr_credicard.nrdconta = crapass.nrdconta
           tt-ctr_credicard.cdagenci = crapass.cdagenci
           tt-ctr_credicard.nrdocnpj = aux_nrdocnpj
           tt-ctr_credicard.nmrescop = crapcop.nmrescop
           tt-ctr_credicard.nrcrcard = crawcrd.nrcrcard
           tt-ctr_credicard.nrctrcrd = crawcrd.nrctrcrd
           tt-ctr_credicard.nmtitcrd = crawcrd.nmtitcrd
           tt-ctr_credicard.nmcidade = crapcop.nmcidade
           tt-ctr_credicard.cdufdcop = crapcop.cdufdcop
           tt-ctr_credicard.dsemsctr = aux_dsemsctr
           tt-ctr_credicard.nmoperad = aux_nmoperad
           tt-ctr_credicard.nmrecop1 = aux_nmrecop1
           tt-ctr_credicard.nmrecop2 = aux_nmrecop2
           tt-ctr_credicard.dsectrnp = aux_dsectrnp
           tt-ctr_credicard.nmexcop1 = aux_nmexcop1
           tt-ctr_credicard.nmexcop2 = aux_nmexcop2
           tt-ctr_credicard.dscpfcgc = IF crapass.inpessoa = 1
                                         THEN "C.P.F. " + TRIM(aux_nrcpfcgc)
                                         ELSE "CNPJ " + TRIM(aux_nrcpfcgc)
           tt-ctr_credicard.endeass1 = crapenc.dsendere + " " + 
                                   TRIM(STRING(crapenc.nrendere,"zzz,zzz"))
           tt-ctr_credicard.endeass2 = TRIM(crapenc.nmbairro) + " - " +
                                   TRIM(crapenc.nmcidade) + " - " +
                                   STRING(crapenc.nrcepend,"99,999,999") + 
                                   " - " + crapenc.cdufende
           tt-ctr_credicard.nmcidpac = aux_nmcidpac
           tt-ctr_credicard.dsctrcrd = TRIM(STRING(crawcrd.nrctrcrd,
                                                "z,zzz,zz9")) + "/001"
           tt-ctr_credicard.vllimite = craptlc.vllimcrd
           tt-ctr_credicard.dsdtmvt1 = aux_dsdtmvt1
           tt-ctr_credicard.dsdtmvt2 = aux_dsdtmvt2
           tt-ctr_credicard.dsvlnpr1 = aux_dsvlnpr1
           tt-ctr_credicard.dsvlnpr2 = aux_dsvlnpr2
           tt-ctr_credicard.dsdmoeda = "R$".
           
    RETURN "OK".           

END PROCEDURE.

/***************************************************
    Carregar dados para impressao do contrato 
    CECRED/VISA e BRADESCO/VISA
****************************************************/
PROCEDURE contrato_cecred_bdn_visa:

    DEF  INPUT PARAM par_cdcooper AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_cdagenci AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrdcaixa AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_cdoperad AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nmdatela AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_idorigem AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrdconta AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_idseqttl AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_dtmvtolt AS DATE                           NO-UNDO.
    DEF  INPUT PARAM par_nrctrcrd AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_flgimpnp AS LOGI                           NO-UNDO.
    
    DEF OUTPUT PARAM TABLE FOR tt-bdn_visa_cecred.
    DEF OUTPUT PARAM TABLE FOR tt-avais-ctr.
    DEF OUTPUT PARAM TABLE FOR tt-erro.

    DEF VAR aux_nmcidade AS CHAR        NO-UNDO.
    DEF VAR aux_nrdocnpj AS CHAR        NO-UNDO.
    DEF VAR aux_dsmesref AS CHAR INIT
                         ["janeiro,fevereiro,marco,abril,maio,junho,
                          julho,agosto,setembro,outubro,novembro,dezembro"]
                                        NO-UNDO.
    DEF VAR aux_dsemsctr AS CHAR        NO-UNDO.
    DEF VAR aux_dssubsti AS CHAR        NO-UNDO.
    DEF VAR aux_nmoperad AS CHAR        NO-UNDO.
    DEF VAR aux_nmcartao AS CHAR        NO-UNDO.
    DEF VAR aux_dsvincul AS CHAR        NO-UNDO.
    DEF VAR aux_nrcpfcgc AS CHAR        NO-UNDO.
    DEF VAR aux_nrcpfavi AS CHAR        NO-UNDO.    
    DEF VAR aux_nrcpfcjg AS CHAR        NO-UNDO.
    DEF VAR aux_contador AS INTE        NO-UNDO.
    
    DEF VAR aux_nmexcop1 AS CHAR                                    NO-UNDO.
    DEF VAR aux_nmexcop2 AS CHAR                                    NO-UNDO. 
    DEF VAR aux_dsvllim1 AS CHAR                                    NO-UNDO.
    DEF VAR aux_dsvllim2 AS CHAR                                    NO-UNDO. 
    DEF VAR aux_nmcidpac AS CHAR                                    NO-UNDO.
    DEF VAR aux_dsdtmvt1 AS CHAR                                    NO-UNDO.
    DEF VAR aux_dsdtmvt2 AS CHAR                                    NO-UNDO. 
    DEF VAR aux_dsextens AS CHAR                                    NO-UNDO.
    DEF VAR aux_dsbranco AS CHAR                                    NO-UNDO. 
    DEF VAR aux_dsvlnpr1 AS CHAR                                    NO-UNDO.
    DEF VAR aux_dsvlnpr2 AS CHAR                                    NO-UNDO. 
    
    DEF VAR aux_dsrepres AS CHAR                                    NO-UNDO. 
    DEF VAR aux_dsrepre1 AS CHAR                                    NO-UNDO. 
    DEF VAR aux_dsrepre2 AS CHAR                                    NO-UNDO. 

    DEF VAR aux_nmprimtl AS CHAR                                    NO-UNDO.
    DEF VAR aux_inpessoa AS INTE                                    NO-UNDO.
    DEF VAR aux_msgconta AS CHAR                                    NO-UNDO.

    DEF VAR aux_nmdaval1 AS CHAR                                    NO-UNDO.
    DEF VAR aux_cpfcgc1  AS CHAR                                    NO-UNDO.
    DEF VAR aux_nmdaval2 AS CHAR                                    NO-UNDO.
    DEF VAR aux_cpfcgc2  AS CHAR                                    NO-UNDO.
    DEF VAR aux_nmconju1 AS CHAR                                    NO-UNDO.
    DEF VAR aux_nrcpfcj1 AS CHAR                                    NO-UNDO.
    DEF VAR aux_nmconju2 AS CHAR                                    NO-UNDO.
    DEF VAR aux_nrcpfcj2 AS CHAR                                    NO-UNDO.
    DEF VAR aux_vllimglb AS DECI                                    NO-UNDO.

    DEF VAR h-b1wgen9999 AS HANDLE                                  NO-UNDO.
    
    /* para includes notapromissoria */
    DEF BUFFER crabass FOR crapass.
    
    EMPTY TEMP-TABLE tt-bdn_visa_cecred.
    EMPTY TEMP-TABLE tt-avais-ctr.
    EMPTY TEMP-TABLE tt-erro.

    FIND crapcop WHERE crapcop.cdcooper = par_cdcooper NO-LOCK NO-ERROR.

    IF   NOT AVAILABLE crapcop THEN
         DO:
             ASSIGN aux_cdcritic = 651
                    aux_dscritic = "".
                   
             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                       
             RETURN "NOK".
         END.
 
    ASSIGN aux_nmcidade = TRIM(crapcop.nmcidade).


    FOR FIRST crapass FIELDS(inpessoa nrcpfcgc cdagenci nmprimtl nrdconta)
                     WHERE crapass.cdcooper = par_cdcooper   AND
                       crapass.nrdconta = par_nrdconta   NO-LOCK:
    END.

    IF   NOT AVAILABLE crapass   THEN
         DO:
             ASSIGN aux_cdcritic = 251
                    aux_dscritic = "".
                   
             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                       
             RETURN "NOK".
         END.

    IF   crapass.inpessoa = 1   THEN
         ASSIGN aux_nrdocnpj = "CNPJ " + STRING(STRING(crapcop.nrdocnpj,"99999999999999"),
                                         "xx.xxx.xxx/xxxx-xx").


    ELSE
         ASSIGN aux_nrdocnpj = STRING(STRING(crapcop.nrdocnpj,"99999999999999"),
                                      "xx.xxx.xxx/xxxx-xx").
           
    IF   crapass.inpessoa = 1   THEN
         DO:

            FIND FIRST crawcrd WHERE crawcrd.cdcooper = par_cdcooper AND
                                     crawcrd.nrdconta = par_nrdconta AND
                                     crawcrd.nrctrcrd = par_nrctrcrd     
                                     NO-LOCK NO-ERROR.
        
            IF   NOT AVAILABLE crawcrd THEN
                 DO:
                     ASSIGN aux_cdcritic = 535
                            aux_dscritic = "".
                           
                     RUN gera_erro (INPUT par_cdcooper,
                                    INPUT par_cdagenci,
                                    INPUT par_nrdcaixa,
                                    INPUT 1,            /** Sequencia **/
                                    INPUT aux_cdcritic,
                                    INPUT-OUTPUT aux_dscritic).
                                               
                     RETURN "NOK".
                 END.
        
            IF  crawcrd.insitcrd <> 4 THEN
                DO:
                    ASSIGN aux_cdcritic = 538
                           aux_dscritic = "".
                           
                    RUN gera_erro (INPUT par_cdcooper,
                                   INPUT par_cdagenci,
                                   INPUT par_nrdcaixa,
                                   INPUT 1,            /** Sequencia **/
                                   INPUT aux_cdcritic,
                                   INPUT-OUTPUT aux_dscritic).
                                               
                    RETURN "NOK".
                END.

                FIND craptlc WHERE craptlc.cdcooper = par_cdcooper       AND
                                   craptlc.cdadmcrd = crawcrd.cdadmcrd   AND
                                   craptlc.tpcartao = crawcrd.tpcartao   AND
                                   craptlc.cdlimcrd = crawcrd.cdlimcrd   AND
                                   craptlc.dddebito = 0  
                                   NO-LOCK NO-ERROR.
                                     
                IF  NOT AVAILABLE craptlc   THEN
                    DO:
                        ASSIGN aux_cdcritic = 532
                               aux_dscritic = "".
            
                        RUN gera_erro (INPUT par_cdcooper,
                                       INPUT par_cdagenci,
                                       INPUT par_nrdcaixa,
                                       INPUT 1,            /** Sequencia **/
                                       INPUT aux_cdcritic,
                                       INPUT-OUTPUT aux_dscritic).        
                             
                        RETURN "NOK".
                                  
                   END.

         END.
    
    IF   crapass.inpessoa = 1   THEN
         IF   crawcrd.cdadmcrd = 3   THEN
              ASSIGN aux_nmcartao = "CECRED/VISA"
                     aux_dsvincul = "COOPERATIVA FILIADA.".
         ELSE
              ASSIGN aux_nmcartao = "BRADESCO/VISA"
                     aux_dsvincul = "PORTADOR.".
    
    ELSE
         ASSIGN aux_nmcartao = "CECRED/VISA"
                aux_dsvincul = "COOPERATIVA FILIADA.". /* PJ */

    IF   crapass.inpessoa = 1   THEN
         IF   crawcrd.dtentr2v <> ? AND
              crawcrd.dtultval <> par_dtmvtolt THEN
              ASSIGN aux_dssubsti = "(SEGUNDA VIA)"
                     aux_dsemsctr = STRING(DAY(crawcrd.dtentr2v),"99") + 
                                    " de " +
                                TRIM(ENTRY(MONTH(crawcrd.dtentr2v),aux_dsmesref)) +
                                    " de " +
                                    STRING(YEAR(crawcrd.dtentr2v),"9999").
         ELSE
              IF   crawcrd.dtultval = par_dtmvtolt THEN
                   ASSIGN aux_dssubsti = "RENOVACAO"
                          aux_dsemsctr = STRING(DAY(crawcrd.dtultval),"99") + 
                                         " de " +
                                TRIM(ENTRY(MONTH(crawcrd.dtultval),aux_dsmesref)) +
                                         " de " +
                                         STRING(YEAR(crawcrd.dtultval),"9999").
              ELSE
                   ASSIGN aux_dssubsti = ""
                          aux_dsemsctr = STRING(DAY(crawcrd.dtentreg),"99") + 
                                         " de " +
                                 TRIM(ENTRY(MONTH(crawcrd.dtentreg),aux_dsmesref)) +
                                         " de " +
                                         STRING(YEAR(crawcrd.dtentreg),"9999").


     ELSE
         ASSIGN aux_dssubsti = "PESSOA JURIDICA"
                aux_dsemsctr = STRING(DAY(par_dtmvtolt),"99") + 
                               " de " +
                       TRIM(ENTRY(MONTH(par_dtmvtolt),aux_dsmesref)) +
                               " de " +
                               STRING(YEAR(par_dtmvtolt),"9999").

    IF  crapass.inpessoa = 1   THEN 
        DO:
            /* Cria tabela de avalistas para Nota Promissoria */
            { sistema/generico/includes/b1wgen0028.i } 

        END.
    ELSE
        DO: 

            FIND craphcj WHERE craphcj.cdcooper = par_cdcooper   AND
                               craphcj.nrdconta = par_nrdconta   NO-LOCK NO-ERROR.
    
            IF  NOT AVAILABLE craphcj THEN
                DO:
    
                    ASSIGN aux_cdcritic = 0
                           aux_dscritic = "Dados da habilitacao para Conta juridica nao disponiveis".
    
                    RUN gera_erro (INPUT par_cdcooper,
                                   INPUT par_cdagenci,
                                   INPUT par_nrdcaixa,
                                   INPUT 1,            /** Sequencia **/
                                   INPUT aux_cdcritic,
                                   INPUT-OUTPUT aux_dscritic).                
    
                    RETURN "NOK".
    
    
                END.

            IF  craphcj.nrctaav1 <> 0  THEN
                DO:
                    CREATE tt-avais-ctr.

                    FIND crabass WHERE crabass.cdcooper = par_cdcooper     AND
                                       crabass.nrdconta = craphcj.nrctaav1
                                       NO-LOCK NO-ERROR.

                    IF  AVAILABLE crabass   THEN
                        DO:
                            IF  crabass.inpessoa = 1 THEN
                                ASSIGN tt-avais-ctr.cpfavali =
                                                 STRING(crabass.nrcpfcgc,"99999999999")
                                                 tt-avais-ctr.cpfavali =
                                                 STRING(tt-avais-ctr.cpfavali,
                                                 "    xxx.xxx.xxx-xx")
                                       tt-avais-ctr.cpfavali =
                                                 "C.P.F. " +
                                                 STRING(tt-avais-ctr.cpfavali,"x(23)") +
                                                 STRING(crabass.nrdconta,"zzzz,zz9,9").

                            ELSE
                                ASSIGN tt-avais-ctr.cpfavali =
                                                 STRING(crabass.nrcpfcgc,"99999999999999")
                                                 tt-avais-ctr.cpfavali =
                                                 STRING(tt-avais-ctr.cpfavali,
                                                 "xx.xxx.xxx/xxxx-xx")
                                                 tt-avais-ctr.cpfavali =
                                                 "CNPJ " +
                                                 STRING(tt-avais-ctr.cpfavali,"x(25)") +
                                                 STRING(crabass.nrdconta,"zzzz,zz9,9").

                            FIND crapenc WHERE crapenc.cdcooper = par_cdcooper       AND
                                               crapenc.nrdconta = crabass.nrdconta  AND
                                               crapenc.idseqttl = 1                 AND
                                               crapenc.cdseqinc = 1 NO-LOCK NO-ERROR.
                            FIND  crapcje WHERE crapcje.cdcooper = par_cdcooper AND 
                                                crapcje.nrdconta = crabass.nrdconta AND 
                                                crapcje.idseqttl = 1 USE-INDEX crapcje1 NO-ERROR.
                      
                           IF AVAILABLE crapcje THEN
                                ASSIGN aux_nmconjug = crapcje.nmconjug.

                            ASSIGN tt-avais-ctr.nmdavali = crabass.nmprimtl
                                   tt-avais-ctr.nmconjug = IF aux_nmconjug = ""
                                                           THEN FILL("_",40)
                                                           ELSE aux_nmconjug
                                   tt-avais-ctr.nrcpfcjg = "C.P.F. " +
                                                           STRING(STRING(crabass.nrcpfstl,
                                                           "99999999999"),"xxx.xxx.xxx-xx")
                                   tt-avais-ctr.dsendav1 = SUBSTRING(crapenc.dsendere,1,32)
                                                           + " " +
                                                           TRIM(STRING(crapenc.nrendere,
                                                               "zzz,zzz" ))
                                   tt-avais-ctr.dsendav2 = TRIM(crapenc.nmbairro)
                                   tt-avais-ctr.dsendav3 = STRING(crapenc.nrcepend,"99999,999") +
                                                           " - " +
                                                           TRIM(crapenc.nmcidade) + 
                                                           "/" +
                                                           crapenc.cdufende.         

                        END.
                    ELSE
                        ASSIGN tt-avais-ctr.nmdavali = "*** NAO CADASTRADO ***"
                               tt-avais-ctr.nrcpfcjg = FILL("-",40)
                               tt-avais-ctr.nmconjug = FILL("_",40)
                               tt-avais-ctr.nrcpfcjg = FILL("_",40)
                               tt-avais-ctr.dsendav1 = FILL("_",40)
                               tt-avais-ctr.dsendav2 = FILL("_",40)
                               tt-avais-ctr.dsendav3 = FILL("_",40).
                END.

            IF  craphcj.nrctaav2 <> 0  THEN
                DO:
                    CREATE tt-avais-ctr.

                    FIND crabass WHERE crabass.cdcooper = par_cdcooper     AND
                                       crabass.nrdconta = craphcj.nrctaav2
                                       NO-LOCK NO-ERROR.

                    IF  AVAILABLE crabass   THEN
                        DO:
                           IF  crabass.inpessoa = 1 THEN
                               ASSIGN tt-avais-ctr.cpfavali =
                                          STRING(crabass.nrcpfcgc,"99999999999")
                                      tt-avais-ctr.cpfavali =
                                                  STRING(tt-avais-ctr.cpfavali,
                                                  "    xxx.xxx.xxx-xx")
                                      tt-avais-ctr.cpfavali =
                                              "C.P.F. " +
                                              STRING(tt-avais-ctr.cpfavali,"x(23)") +
                                              STRING(crabass.nrdconta,"zzzz,zz9,9").

                           ELSE
                               ASSIGN tt-avais-ctr.cpfavali =
                                          STRING(crabass.nrcpfcgc,"99999999999999")
                                       tt-avais-ctr.cpfavali =
                                                  STRING(tt-avais-ctr.cpfavali,
                                                  "xx.xxx.xxx/xxxx-xx")
                                       tt-avais-ctr.cpfavali =
                                              "CNPJ " +
                                              STRING(tt-avais-ctr.cpfavali,"x(25)") +
                                              STRING(crabass.nrdconta,"zzzz,zz9,9").

                           FIND crapenc WHERE crapenc.cdcooper = par_cdcooper      AND
                                              crapenc.nrdconta = crabass.nrdconta  AND
                                              crapenc.idseqttl = 1                 AND
                                              crapenc.cdseqinc = 1 NO-LOCK NO-ERROR.

                          FIND  crapcje WHERE crapcje.cdcooper = par_cdcooper AND 
                                              crapcje.nrdconta = crabass.nrdconta AND 
                                              crapcje.idseqttl = 1 USE-INDEX crapcje1 NO-ERROR.
                      
                          IF AVAILABLE crapcje THEN
                                ASSIGN aux_nmconjug = crapcje.nmconjug.

                           ASSIGN tt-avais-ctr.nmdavali = crabass.nmprimtl
                                  tt-avais-ctr.nmconjug = IF aux_nmconjug = ""
                                                          THEN FILL("_",40)
                                                          ELSE aux_nmconjug
                                  tt-avais-ctr.nrcpfcjg = "C.P.F. " +
                                                          STRING(STRING(crabass.nrcpfstl,
                                                          "99999999999"),"xxx.xxx.xxx-xx")
                                  tt-avais-ctr.dsendav1 = SUBSTRING(crapenc.dsendere,1,32)
                                                          + " " +
                                                          TRIM(STRING(crapenc.nrendere,
                                                                      "zzz,zzz" ))
                                  tt-avais-ctr.dsendav2 = TRIM(crapenc.nmbairro)
                                  tt-avais-ctr.dsendav3 = STRING(crapenc.nrcepend,"99999,999") +
                                                          " - " +
                                                          TRIM(crapenc.nmcidade) + 
                                                          "/" +
                                                          crapenc.cdufende.         

                        END.
                    ELSE
                        ASSIGN tt-avais-ctr.nmdavali = "*** NAO CADASTRADO ***"
                               tt-avais-ctr.nrcpfcjg = FILL("-",40)
                               tt-avais-ctr.nmconjug = FILL("_",40)
                               tt-avais-ctr.nrcpfcjg = FILL("_",40)
                               tt-avais-ctr.dsendav1 = FILL("_",40)
                               tt-avais-ctr.dsendav2 = FILL("_",40)
                               tt-avais-ctr.dsendav3 = FILL("_",40).
                END.

            FOR EACH crapavt WHERE crapavt.cdcooper = par_cdcooper     AND
                                   crapavt.nrdconta = craphcj.nrdconta AND
                                   crapavt.nrctremp = craphcj.nrctrhcj AND
                                   crapavt.tpctrato = 4                NO-LOCK:

                CREATE tt-avais-ctr.
                ASSIGN tt-avais-ctr.nmdavali = crapavt.nmdavali
                       tt-avais-ctr.cpfavali = "CPF: " + STRING(STRING(crapavt.nrcpfcgc,
                                               "99999999999"),"xxx.xxx.xxx-xx")
                       tt-avais-ctr.dsdocava = crapavt.tpdocava + ": " +
                                               crapavt.nrdocava
                       tt-avais-ctr.dsendav1 = IF  crapavt.nrendere > 0  THEN 
                                                   SUBSTR(crapavt.dsendres[1],
                                                          1,32) + " " +
                                                   STRING(crapavt.nrendere)
                                               ELSE
                                                   crapavt.dsendres[1]
                       tt-avais-ctr.dsendav2 = crapavt.dsendres[2]
                       tt-avais-ctr.dsendav3 = STRING(crapavt.nrcepend,"99999,999") +
                                               " - " +
                                               crapavt.nmcidade + "/" +
                                               crapavt.cdufresd.

                IF  crapavt.nmconjug <> ""  THEN
                    ASSIGN tt-avais-ctr.nmconjug = crapavt.nmconjug.
                ELSE
                    ASSIGN tt-avais-ctr.nmconjug = FILL("_",40).

                IF  crapavt.nrcpfcjg <> 0  THEN
                    ASSIGN tt-avais-ctr.nrcpfcjg = "CPF: " +
                                                   STRING(STRING(crapavt.nrcpfcjg,
                                                   "99999999999"),"xxx.xxx.xxx-xx").
                ELSE
                    ASSIGN tt-avais-ctr.nrcpfcjg = "CPF: " + FILL("_",35).

                IF  crapavt.tpdoccjg <> "" AND crapavt.nrdoccjg <> ""  THEN
                    ASSIGN tt-avais-ctr.dsdoccjg = crapavt.tpdoccjg + ": " +
                                                   crapavt.nrdoccjg.
                ELSE
                    ASSIGN tt-avais-ctr.dsdoccjg = "CI: " + FILL("_",36).

            END. /** Fim do FOR EACH crapavt **/

        END.
         
    /* Tratamento de CPF/CGC */
    IF   crapass.inpessoa = 1   THEN
         ASSIGN  aux_nrcpfcgc = STRING(crapass.nrcpfcgc,"99999999999")
                 aux_nrcpfcgc = STRING(aux_nrcpfcgc,"    xxx.xxx.xxx-xx").
    ELSE
         ASSIGN  aux_nrcpfcgc = STRING(crapass.nrcpfcgc,"99999999999999")
                 aux_nrcpfcgc = STRING(aux_nrcpfcgc,"xx.xxx.xxx/xxxx-xx").
         
    FIND crapope WHERE crapope.cdcooper = par_cdcooper     AND
                       crapope.cdoperad = par_cdoperad NO-LOCK NO-ERROR.
                           
    IF  AVAILABLE crapope  THEN
        ASSIGN aux_nmoperad = crapope.nmoperad.
    ELSE
        ASSIGN aux_nmoperad = STRING(par_cdoperad,"x(10)") +
                              " - NAO CADASTRADO".
        
    /************NOTA PROMISSORIA**************/
    RUN sistema/generico/procedures/b1wgen9999.p PERSISTENT SET h-b1wgen9999.
    
    IF  NOT VALID-HANDLE(h-b1wgen9999)  THEN
        DO:
            
            
            ASSIGN aux_cdcritic = 0
                   aux_dscritic = "Handle invalido para BO b1wgen9999.".
                   
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
            
            RETURN "NOK".
        END.    

   

    IF   crapass.inpessoa = 1   THEN
        RUN valor-extenso IN h-b1wgen9999 (INPUT craptlc.vllimcrd, 
                                           INPUT 20,
                                           INPUT 69,
                                           INPUT "M",
                                          OUTPUT aux_dsvllim1, 
                                          OUTPUT aux_dsvllim2).

    ELSE
        DO:

            ASSIGN aux_cpfcgc1 = ""
                   aux_cpfcgc2 = "".
    
            IF   AVAILABLE craphcj THEN DO:

                ASSIGN aux_vllimglb = craphcj.vllimglb.

                RUN valor-extenso IN h-b1wgen9999 (INPUT craphcj.vllimglb,
                                                   INPUT 105,
                                                   INPUT 133,
                                                   INPUT "M",
                                                  OUTPUT aux_dsvllim1,
                                                  OUTPUT aux_dsvllim2).
                    
                RUN carrega_dados_avais (INPUT par_cdcooper,
                                         INPUT 0, 
                                         INPUT 0, 
                                         INPUT par_cdoperad,
                                         INPUT par_nmdatela,
                                         INPUT 1, 
                                         INPUT par_nrdconta,
                                         INPUT 1, 
                                         INPUT par_dtmvtolt,
                                         INPUT craphcj.nrctrhcj,
                                        OUTPUT TABLE tt-dados-avais,
                                        OUTPUT TABLE tt-erro).
                            
                IF   CAN-FIND(FIRST tt-erro)   THEN
                     DO. 
                         DELETE PROCEDURE h-b1wgen9999.     
                         RETURN "NOK".
                     END.

                ASSIGN aux_contador = 1.

                FOR EACH tt-dados-avais:

                    IF  aux_contador = 1  THEN
                        ASSIGN aux_nmdaval1 = tt-dados-avais.nmdavali
                               aux_nrcpfavi = STRING(tt-dados-avais.nrcpfcgc,"99999999999")
                               aux_cpfcgc1  = STRING(aux_nrcpfavi,"xxx.xxx.xxx-xx")
                               aux_nmconju1 = tt-dados-avais.nmconjug
                               aux_nrcpfcj1 = TRIM(SUBSTRING(tt-dados-avais.nrdoccjg,8,
                                                             LENGTH(tt-dados-avais.nrdoccjg)))
                               aux_contador = 2.
                    ELSE
                        ASSIGN aux_nmdaval2 = tt-dados-avais.nmdavali
                               aux_nrcpfavi = STRING(tt-dados-avais.nrcpfcgc,"99999999999")
                               aux_cpfcgc2  = STRING(aux_nrcpfavi,"xxx.xxx.xxx-xx")
                               aux_nmconju2 = tt-dados-avais.nmconjug
                               aux_nrcpfcj2 = TRIM(SUBSTRING(tt-dados-avais.nrdoccjg,8,
                                                             LENGTH(tt-dados-avais.nrdoccjg))).

                END.
                                    
                ASSIGN aux_dsrepres = "".

                IF   craphcj.nrcpfpri <> 0 THEN
                     DO:

                        FOR FIRST crabass FIELDS(nmprimtl)
                                                                   WHERE crabass.cdcooper = par_cdcooper     AND
                                                 crabass.nrcpfcgc = craphcj.nrcpfpri
                                                 NO-LOCK: END.

                        IF   AVAILABLE crabass THEN
                             ASSIGN aux_nmprimtl = crabass.nmprimtl.
                        ELSE
                             DO:

                                 FIND crapncp WHERE crapncp.nrdoccpf = craphcj.nrcpfpri
                                      NO-LOCK NO-ERROR.

                                 IF   AVAILABLE crapncp THEN
                                      ASSIGN aux_nmprimtl = crapncp.nmpessoa.
                             END.

                        ASSIGN aux_dsrepres = UPPER(TRIM(aux_nmprimtl)) +
                                              ", CPF "           +
                                              STRING(STRING(craphcj.nrcpfpri,"99999999999"),"xxx.xxx.xxx-xx") +
                                              ";".

                     END.

                IF   craphcj.nrcpfseg <> 0 THEN
                     DO:

                         FOR FIRST crabass FIELDS(nmprimtl)
                                                                    WHERE crabass.cdcooper = par_cdcooper     AND
                                                  crabass.nrcpfcgc = craphcj.nrcpfseg
                                                  NO-LOCK: END.

                         IF   AVAILABLE crabass THEN
                              ASSIGN aux_nmprimtl = crabass.nmprimtl.
                         ELSE
                              DO:

                                  FIND crapncp WHERE crapncp.nrdoccpf = craphcj.nrcpfseg
                                                     NO-LOCK NO-ERROR.

                                  IF   AVAILABLE crapncp THEN
                                       ASSIGN aux_nmprimtl = crapncp.nmpessoa.
                              END.

                         ASSIGN aux_dsrepres = aux_dsrepres              +
                                               UPPER(TRIM(aux_nmprimtl)) +
                                               ", CPF "                  +
                                               STRING(STRING(craphcj.nrcpfseg,"99999999999"),"xxx.xxx.xxx-xx") +
                                               ";".

                     END.

                 IF   craphcj.nrcpfter <> 0 THEN
                      DO:

                          FOR FIRST crabass FIELDS(nmprimtl)
                                                                     WHERE crabass.cdcooper = par_cdcooper     AND
                                                   crabass.nrcpfcgc = craphcj.nrcpfter
                                                   NO-LOCK: END.

                          IF   AVAILABLE crabass THEN
                               ASSIGN aux_nmprimtl = crabass.nmprimtl.
                          ELSE
                               DO:

                                   FIND crapncp WHERE crapncp.nrdoccpf = craphcj.nrcpfter
                                                      NO-LOCK NO-ERROR.

                                   IF   AVAILABLE crapncp THEN
                                        ASSIGN aux_nmprimtl = crapncp.nmpessoa.
                               END.


                           ASSIGN aux_dsrepres = aux_dsrepres              +
                                                 UPPER(TRIM(aux_nmprimtl)) +
                                                 ", CPF "                  +
                                                 STRING(STRING(craphcj.nrcpfter,"99999999999"),"xxx.xxx.xxx-xx") +
                                                 ";".

                      END.

                IF  NUM-ENTRIES(aux_dsrepres,";") < 4 THEN
                    DO:
                    
                        IF NUM-ENTRIES(aux_dsrepres,";") > 1 THEN
                           ASSIGN aux_dsrepre1 = ENTRY(1,aux_dsrepres,";") + 
                                                 IF  INDEX(ENTRY(2,aux_dsrepres,";"),"CPF") > 0 THEN                    
                                                    ";" + ENTRY(2,aux_dsrepres,";") + "."
                                                 ELSE
                                                    "."                                                                             
                                  aux_dsrepre2 = "".

                    END.
                 ELSE
                    ASSIGN aux_dsrepre1 = ENTRY(1,aux_dsrepres,";") + ";" + ENTRY(2,aux_dsrepres,";") + ";"
                           aux_dsrepre2 = ENTRY(3,aux_dsrepres,";") + ".".

            END.  /* IF   AVAILABLE craphcj */

        END.

          
    IF  RETURN-VALUE = "NOK"  THEN
        DO:
            DELETE PROCEDURE h-b1wgen9999.
            
            ASSIGN aux_cdcritic = 0
                   aux_dscritic = aux_dsvllim1.
                   
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
            
            RETURN "NOK".       
        END.

    IF  DAY(par_dtmvtolt) > 1  THEN
        DO:
            RUN valor-extenso IN h-b1wgen9999 (INPUT DAY(par_dtmvtolt), 
                                               INPUT 50,
                                               INPUT 50, 
                                               INPUT "I",
                                              OUTPUT aux_dsextens, 
                                              OUTPUT aux_dsbranco).

            IF  RETURN-VALUE = "NOK"  THEN
                DO:
                    DELETE PROCEDURE h-b1wgen9999.
            
                    ASSIGN aux_cdcritic = 0
                           aux_dscritic = aux_dsextens.
                   
                    RUN gera_erro (INPUT par_cdcooper,
                                   INPUT par_cdagenci,
                                   INPUT par_nrdcaixa,
                                   INPUT 1,            /** Sequencia **/
                                   INPUT aux_cdcritic,
                                   INPUT-OUTPUT aux_dscritic).
            
                    RETURN "NOK".       
                END.
        
            ASSIGN aux_dsextens = aux_dsextens + " DIAS DO MES DE " +
                                  CAPS(ENTRY(MONTH(par_dtmvtolt),aux_dsmesref)) 
                                  + " DE ".  

            RUN valor-extenso IN h-b1wgen9999 (INPUT YEAR(par_dtmvtolt),
                                               INPUT 68 - LENGTH(aux_dsextens),
                                               INPUT 44, 
                                               INPUT "I",
                                              OUTPUT aux_dsdtmvt1, 
                                              OUTPUT aux_dsdtmvt2).

            IF  RETURN-VALUE = "NOK"  THEN
                DO:
                    DELETE PROCEDURE h-b1wgen9999.
            
                    ASSIGN aux_cdcritic = 0
                           aux_dscritic = aux_dsdtmvt1.
                   
                    RUN gera_erro (INPUT par_cdcooper,
                                   INPUT par_cdagenci,
                                   INPUT par_nrdcaixa,
                                   INPUT 1,            /** Sequencia **/
                                   INPUT aux_cdcritic,
                                   INPUT-OUTPUT aux_dscritic).
            
                    RETURN "NOK".       
                END.

            ASSIGN aux_dsdtmvt1 = aux_dsextens + aux_dsdtmvt1
                   aux_dsdtmvt2 = aux_dsdtmvt2.
                   
            IF  par_idorigem = 5  THEN /** Ayllos WEB **/
                ASSIGN aux_dsdtmvt1 = aux_dsdtmvt1 + 
                                      FILL("*",78 - LENGTH(aux_dsdtmvt1))
                       aux_dsdtmvt2 = aux_dsdtmvt2 + 
                                      FILL("*",8 - LENGTH(aux_dsdtmvt2)).
            ELSE
                ASSIGN aux_dsdtmvt1 = aux_dsdtmvt1 + 
                                      FILL("*",68 - LENGTH(aux_dsdtmvt1))
                       aux_dsdtmvt2 = aux_dsdtmvt2 + 
                                      FILL("*",44 - LENGTH(aux_dsdtmvt2)).
        END.
    ELSE
        DO:            
            ASSIGN aux_dsextens = "PRIMEIRO DIA DO MES DE " +
                                  CAPS(ENTRY(MONTH(par_dtmvtolt),aux_dsmesref))
                                  + " DE ".

            RUN valor-extenso IN h-b1wgen9999 (INPUT YEAR(par_dtmvtolt),
                                               INPUT 68 - LENGTH(aux_dsextens),
                                               INPUT 44, 
                                               INPUT "I",
                                              OUTPUT aux_dsdtmvt1, 
                                              OUTPUT aux_dsdtmvt2).

            IF  RETURN-VALUE = "NOK"  THEN
                DO:
                    DELETE PROCEDURE h-b1wgen9999.
            
                    ASSIGN aux_cdcritic = 0
                           aux_dscritic = aux_dsdtmvt1.
                   
                    RUN gera_erro (INPUT par_cdcooper,
                                   INPUT par_cdagenci,
                                   INPUT par_nrdcaixa,
                                   INPUT 1,            /** Sequencia **/
                                   INPUT aux_cdcritic,
                                   INPUT-OUTPUT aux_dscritic).
            
                    RETURN "NOK".       
                END.

            ASSIGN aux_dsdtmvt1 = aux_dsextens + aux_dsdtmvt1 
                   aux_dsdtmvt2 = aux_dsdtmvt2. 
                   
            IF  par_idorigem = 5  THEN /** Ayllos WEB **/
                ASSIGN aux_dsdtmvt1 = aux_dsdtmvt1 + 
                                      FILL("*",78 - LENGTH(aux_dsdtmvt1))
                       aux_dsdtmvt2 = aux_dsdtmvt2 + 
                                      FILL("*",8 - LENGTH(aux_dsdtmvt2)).
            ELSE
                ASSIGN aux_dsdtmvt1 = aux_dsdtmvt1 + 
                                      FILL("*",68 - LENGTH(aux_dsdtmvt1))
                       aux_dsdtmvt2 = aux_dsdtmvt2 + 
                                      FILL("*",44 - LENGTH(aux_dsdtmvt2)).
        END.


    IF   crapass.inpessoa = 1   THEN
         RUN valor-extenso IN h-b1wgen9999 (INPUT craptlc.vllimcrd,
                                            INPUT 45,
                                            INPUT 73,
                                            INPUT "M",
                                            OUTPUT aux_dsvlnpr1,
                                            OUTPUT aux_dsvlnpr2).
    ELSE
         RUN valor-extenso IN h-b1wgen9999 (INPUT craphcj.vllimglb,
                                            INPUT 45,
                                            INPUT 73,
                                            INPUT "M",
                                            OUTPUT aux_dsvlnpr1,
                                            OUTPUT aux_dsvlnpr2).

    IF  RETURN-VALUE = "NOK"  THEN
        DO:
            DELETE PROCEDURE h-b1wgen9999.
            
            ASSIGN aux_cdcritic = 0
                   aux_dscritic = aux_dsvlnpr1.
                   
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
           
            RETURN "NOK".       
        END.
                    
    RUN divide-nome-coop IN h-b1wgen9999 (INPUT crapcop.nmextcop,
                                         OUTPUT aux_nmexcop1,
                                         OUTPUT aux_nmexcop2).
        
    DELETE PROCEDURE h-b1wgen9999.

    FIND crapage WHERE crapage.cdcooper = par_cdcooper     AND
                       crapage.cdagenci = crapass.cdagenci 
                       NO-LOCK NO-ERROR.

    IF  NOT AVAILABLE crapage  THEN
        ASSIGN aux_nmcidpac = "____________________".
    ELSE
        ASSIGN aux_nmcidpac = crapage.nmcidade.           
        
    FIND crapenc WHERE crapenc.cdcooper = par_cdcooper AND
                       crapenc.nrdconta = par_nrdconta AND
                       crapenc.idseqttl = 1            AND
                       crapenc.cdseqinc = 1            NO-LOCK NO-ERROR.

    IF  NOT AVAILABLE crapenc  THEN
        DO: 
             ASSIGN aux_cdcritic = 0
                    aux_dscritic = "Endereco nao encontrado".
                   
             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                       
             RETURN "NOK".        
        END.
    
    CREATE tt-bdn_visa_cecred.
    ASSIGN tt-bdn_visa_cecred.nmcartao = aux_nmcartao
           tt-bdn_visa_cecred.dssubsti = aux_dssubsti
           tt-bdn_visa_cecred.nmextcop = crapcop.nmextcop
           tt-bdn_visa_cecred.nmrescop = crapcop.nmrescop
           tt-bdn_visa_cecred.nrdocnpj = aux_nrdocnpj
           tt-bdn_visa_cecred.dsendcop = crapcop.dsendcop
           tt-bdn_visa_cecred.nrendcop = crapcop.nrendcop
           tt-bdn_visa_cecred.nmbairro = crapcop.nmbairro
           tt-bdn_visa_cecred.nmcidade = crapcop.nmcidade
           tt-bdn_visa_cecred.cdufdcop = crapcop.cdufdcop
           tt-bdn_visa_cecred.nmprimtl = crapass.nmprimtl
           tt-bdn_visa_cecred.nrcpfcgc = aux_nrcpfcgc
           tt-bdn_visa_cecred.nrdconta = crapass.nrdconta
           tt-bdn_visa_cecred.dsvincul = aux_dsvincul
           tt-bdn_visa_cecred.nrcrcard = IF   crapass.inpessoa = 1   THEN
                                              crawcrd.nrcrcard
                                         ELSE
                                              0
           tt-bdn_visa_cecred.nrctrcrd = IF   crapass.inpessoa = 1   THEN
                                              crawcrd.nrctrcrd
                                         ELSE
                                              craphcj.nrctrhcj
           tt-bdn_visa_cecred.nmtitcrd = IF   crapass.inpessoa = 1   THEN
                                              crawcrd.nmtitcrd
                                         ELSE
                                              ""
           tt-bdn_visa_cecred.dsemsctr = aux_dsemsctr
           tt-bdn_visa_cecred.nmoperad = aux_nmoperad
           /*promissoria*/
           tt-bdn_visa_cecred.nmexcop1 = aux_nmexcop1
           tt-bdn_visa_cecred.nmexcop2 = aux_nmexcop2
           tt-bdn_visa_cecred.dscpfcgc = IF crapass.inpessoa = 1
                                         THEN "C.P.F. " + TRIM(aux_nrcpfcgc)
                                         ELSE "CNPJ " + TRIM(aux_nrcpfcgc)
           tt-bdn_visa_cecred.endeass1 = crapenc.dsendere + " " + 
                                   TRIM(STRING(crapenc.nrendere,"zzz,zzz"))
           tt-bdn_visa_cecred.endeass2 = TRIM(crapenc.nmbairro) + " - " +
                                   TRIM(crapenc.nmcidade) + " - " +
                                   STRING(crapenc.nrcepend,"99,999,999") + 
                                   " - " + crapenc.cdufende
           tt-bdn_visa_cecred.nmcidpac = aux_nmcidpac
           tt-bdn_visa_cecred.dsctrcrd = IF   crapass.inpessoa = 1   THEN
                                              TRIM(STRING(crawcrd.nrctrcrd,
                                                     "z,zzz,zz9")) + "/001"
                                         ELSE
                                              TRIM(STRING(craphcj.nrctrhcj,
                                                     "z,zzz,zz9")) + "/001"        
           tt-bdn_visa_cecred.vllimite = IF   crapass.inpessoa = 1   THEN
                                              craptlc.vllimcrd
                                         ELSE
                                              craphcj.vllimglb
           tt-bdn_visa_cecred.vllimglb = aux_vllimglb
           tt-bdn_visa_cecred.dsvllim1 = aux_dsvllim1
           tt-bdn_visa_cecred.dsvllim2 = aux_dsvllim2                                                     
           tt-bdn_visa_cecred.nmdaval1 = aux_nmdaval1
           tt-bdn_visa_cecred.cpfcgc1  = aux_cpfcgc1
           tt-bdn_visa_cecred.nmconju1 = aux_nmconju1
           tt-bdn_visa_cecred.nrcpfcj1 = aux_nrcpfcj1
           tt-bdn_visa_cecred.nmdaval2 = aux_nmdaval2
           tt-bdn_visa_cecred.cpfcgc2  = aux_cpfcgc2
           tt-bdn_visa_cecred.nmconju2 = aux_nmconju2
           tt-bdn_visa_cecred.nrcpfcj2 = aux_nrcpfcj2
           tt-bdn_visa_cecred.dsrepre1 = aux_dsrepre1
           tt-bdn_visa_cecred.dsrepre2 = aux_dsrepre2
           tt-bdn_visa_cecred.dsdtmvt1 = aux_dsdtmvt1
           tt-bdn_visa_cecred.dsdtmvt2 = aux_dsdtmvt2
           tt-bdn_visa_cecred.dsvlnpr1 = aux_dsvlnpr1
           tt-bdn_visa_cecred.dsvlnpr2 = aux_dsvlnpr2
           tt-bdn_visa_cecred.dsdmoeda = "R$".           
           /*promissoria*/
           
    RETURN "OK".           

END PROCEDURE.

/***************************************************
    Carregar dados para impressao do contrato 
    MULTIPLO BB
****************************************************/
PROCEDURE contrato_bb:

    DEF  INPUT PARAM par_cdcooper AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_cdagenci AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrdcaixa AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_cdoperad AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nmdatela AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_idorigem AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrdconta AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_idseqttl AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_dtmvtolt AS DATE                           NO-UNDO.
    DEF  INPUT PARAM par_nrctrcrd AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_flgimpnp AS LOGI                           NO-UNDO.
    
    DEF OUTPUT PARAM TABLE FOR tt-ctr_bb.
    DEF OUTPUT PARAM TABLE FOR tt-avais-ctr.
    DEF OUTPUT PARAM TABLE FOR tt-erro.

    DEF VAR aux_nmcidade AS CHAR        NO-UNDO.
    DEF VAR aux_nrdocnpj AS CHAR        NO-UNDO.
    DEF VAR aux_dsmesref AS CHAR INIT
                         ["Janeiro,Fevereiro,Marco,Abril,Maio,Junho,
                          Julho,Agosto,Setembro,Outubro,Novembro,Dezembro"]
                                        NO-UNDO.   
    DEF VAR aux_dsemsctr AS CHAR        NO-UNDO.
    DEF VAR aux_nmoperad AS CHAR        NO-UNDO.
    DEF VAR aux_nmcartao AS CHAR        NO-UNDO.
    DEF VAR aux_nrcpfcgc AS CHAR        NO-UNDO.
    
    DEF VAR aux_nmexcop1 AS CHAR                                    NO-UNDO.
    DEF VAR aux_nmexcop2 AS CHAR                                    NO-UNDO. 
    DEF VAR aux_dsvllim1 AS CHAR                                    NO-UNDO.
    DEF VAR aux_dsvllim2 AS CHAR                                    NO-UNDO. 
    DEF VAR aux_nmcidpac AS CHAR                                    NO-UNDO.
    DEF VAR aux_dsdtmvt1 AS CHAR                                    NO-UNDO.
    DEF VAR aux_dsdtmvt2 AS CHAR                                    NO-UNDO. 
    DEF VAR aux_dsextens AS CHAR                                    NO-UNDO.
    DEF VAR aux_dsbranco AS CHAR                                    NO-UNDO. 
    DEF VAR aux_dsvlnpr1 AS CHAR                                    NO-UNDO.
    DEF VAR aux_dsvlnpr2 AS CHAR                                    NO-UNDO. 
    
    DEF VAR h-b1wgen9999 AS HANDLE      NO-UNDO.
    
    /* para includes notapromissoria */
    DEF BUFFER crabass FOR crapass.
    
    EMPTY TEMP-TABLE tt-bdn_visa_cecred.
    EMPTY TEMP-TABLE tt-avais-ctr.
    EMPTY TEMP-TABLE tt-erro.

    FIND crapcop WHERE crapcop.cdcooper = par_cdcooper NO-LOCK NO-ERROR.

    IF   NOT AVAILABLE crapcop THEN
         DO:
             ASSIGN aux_cdcritic = 651
                    aux_dscritic = "".
                   
             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                       
             RETURN "NOK".
         END.
 
    ASSIGN aux_nmcidade = TRIM(crapcop.nmcidade).

    aux_nrdocnpj = "CNPJ " + STRING(STRING(crapcop.nrdocnpj,"99999999999999"),
                          "xx.xxx.xxx/xxxx-xx").

    FIND FIRST crawcrd WHERE crawcrd.cdcooper = par_cdcooper AND
                             crawcrd.nrdconta = par_nrdconta AND
                             crawcrd.nrctrcrd = par_nrctrcrd     
                             NO-LOCK NO-ERROR.

    IF   NOT AVAILABLE crawcrd THEN
         DO:
             ASSIGN aux_cdcritic = 535
                    aux_dscritic = "".
                   
             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                       
             RETURN "NOK".
         END.

    IF  crawcrd.insitcrd <> 1 AND
        crawcrd.insitcrd <> 4 THEN
        DO:
            ASSIGN aux_cdcritic = 538
                   aux_dscritic = "".
                   
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                       
            RETURN "NOK".
        END.

    IF   crawcrd.tpcartao = 1 THEN
         aux_nmcartao = "   NACIONAL". 
    ELSE
    IF   crawcrd.tpcartao = 2 THEN
         aux_nmcartao = " INTERNACIONAL".
    ELSE                     
    IF   crawcrd.tpcartao = 3 THEN  
         aux_nmcartao = "     GOLD".

    FIND craptlc WHERE craptlc.cdcooper = par_cdcooper       AND
                       craptlc.cdadmcrd = crawcrd.cdadmcrd   AND
                       craptlc.tpcartao = crawcrd.tpcartao   AND
                       craptlc.cdlimcrd = crawcrd.cdlimcrd   AND
                       craptlc.dddebito = 0  
                       NO-LOCK NO-ERROR.
                         
    IF  NOT AVAILABLE craptlc   THEN
        DO:
            ASSIGN aux_cdcritic = 532
                   aux_dscritic = "".

            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).        
                 
            RETURN "NOK".
                      
       END.
    
    /* Cria tabela de avalistas para Nota Promissoria */
    { sistema/generico/includes/b1wgen0028.i }

    FOR FIRST crapass FIELDS(inpessoa nrcpfcgc nmprimtl nrdconta cdagenci nrdctitg) 
                     WHERE crapass.cdcooper = par_cdcooper   AND
                       crapass.nrdconta = par_nrdconta   NO-LOCK:
    END.

    IF   NOT AVAILABLE crapass   THEN
         DO:
             ASSIGN aux_cdcritic = 251
                    aux_dscritic = "".
                   
             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                       
             RETURN "NOK".
         END.
         
    /* Tratamento de CPF/CGC */
    IF   crapass.inpessoa = 1   THEN
         ASSIGN  aux_nrcpfcgc = STRING(crapass.nrcpfcgc,"99999999999")
                 aux_nrcpfcgc = STRING(aux_nrcpfcgc,"    xxx.xxx.xxx-xx").
    ELSE
         ASSIGN  aux_nrcpfcgc = STRING(crapass.nrcpfcgc,"99999999999999")
                 aux_nrcpfcgc = STRING(aux_nrcpfcgc,"xx.xxx.xxx/xxxx-xx").
         
    FIND crapope WHERE crapope.cdcooper = par_cdcooper     AND
                       crapope.cdoperad = par_cdoperad NO-LOCK NO-ERROR.
                           
    IF  AVAILABLE crapope  THEN
        ASSIGN aux_nmoperad = crapope.nmoperad.
    ELSE
        ASSIGN aux_nmoperad = STRING(par_cdoperad,"x(10)") +
                              " - NAO CADASTRADO".
        
    /************NOTA PROMISSORIA**************/
    RUN sistema/generico/procedures/b1wgen9999.p PERSISTENT SET h-b1wgen9999.
    
    IF  NOT VALID-HANDLE(h-b1wgen9999)  THEN
        DO:
            ASSIGN aux_cdcritic = 0
                   aux_dscritic = "Handle invalido para BO b1wgen9999.".
                   
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
            
            RETURN "NOK".
        END.    

    RUN valor-extenso IN h-b1wgen9999 (INPUT craptlc.vllimcrd, 
                                       INPUT 20,
                                       INPUT 69,
                                       INPUT "M",
                                      OUTPUT aux_dsvllim1, 
                                      OUTPUT aux_dsvllim2).
          
    IF  RETURN-VALUE = "NOK"  THEN
        DO:
            DELETE PROCEDURE h-b1wgen9999.
            
            ASSIGN aux_cdcritic = 0
                   aux_dscritic = aux_dsvllim1.
                   
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
            
            RETURN "NOK".       
        END.

    IF  DAY(par_dtmvtolt) > 1  THEN
        DO:
            RUN valor-extenso IN h-b1wgen9999 (INPUT DAY(par_dtmvtolt), 
                                               INPUT 50,
                                               INPUT 50, 
                                               INPUT "I",
                                              OUTPUT aux_dsextens, 
                                              OUTPUT aux_dsbranco).

            IF  RETURN-VALUE = "NOK"  THEN
                DO:
                    DELETE PROCEDURE h-b1wgen9999.
            
                    ASSIGN aux_cdcritic = 0
                           aux_dscritic = aux_dsextens.
                   
                    RUN gera_erro (INPUT par_cdcooper,
                                   INPUT par_cdagenci,
                                   INPUT par_nrdcaixa,
                                   INPUT 1,            /** Sequencia **/
                                   INPUT aux_cdcritic,
                                   INPUT-OUTPUT aux_dscritic).
            
                    RETURN "NOK".       
                END.
        
            ASSIGN aux_dsextens = aux_dsextens + " DIAS DO MES DE " +
                                  CAPS(ENTRY(MONTH(par_dtmvtolt),aux_dsmesref)) 
                                  + " DE ".  

            RUN valor-extenso IN h-b1wgen9999 (INPUT YEAR(par_dtmvtolt),
                                               INPUT 68 - LENGTH(aux_dsextens),
                                               INPUT 44, 
                                               INPUT "I",
                                              OUTPUT aux_dsdtmvt1, 
                                              OUTPUT aux_dsdtmvt2).

            IF  RETURN-VALUE = "NOK"  THEN
                DO:
                    DELETE PROCEDURE h-b1wgen9999.
            
                    ASSIGN aux_cdcritic = 0
                           aux_dscritic = aux_dsdtmvt1.
                   
                    RUN gera_erro (INPUT par_cdcooper,
                                   INPUT par_cdagenci,
                                   INPUT par_nrdcaixa,
                                   INPUT 1,            /** Sequencia **/
                                   INPUT aux_cdcritic,
                                   INPUT-OUTPUT aux_dscritic).
            
                    RETURN "NOK".       
                END.

            ASSIGN aux_dsdtmvt1 = aux_dsextens + aux_dsdtmvt1
                   aux_dsdtmvt2 = aux_dsdtmvt2.
                   
            IF  par_idorigem = 5  THEN /** Ayllos WEB **/
                ASSIGN aux_dsdtmvt1 = aux_dsdtmvt1 + 
                                      FILL("*",78 - LENGTH(aux_dsdtmvt1))
                       aux_dsdtmvt2 = aux_dsdtmvt2 + 
                                      FILL("*",8 - LENGTH(aux_dsdtmvt2)).
            ELSE
                ASSIGN aux_dsdtmvt1 = aux_dsdtmvt1 + 
                                      FILL("*",68 - LENGTH(aux_dsdtmvt1))
                       aux_dsdtmvt2 = aux_dsdtmvt2 + 
                                      FILL("*",44 - LENGTH(aux_dsdtmvt2)).
        END.
    ELSE
        DO:            
            ASSIGN aux_dsextens = "PRIMEIRO DIA DO MES DE " +
                                  CAPS(ENTRY(MONTH(par_dtmvtolt),aux_dsmesref))
                                  + " DE ".

            RUN valor-extenso IN h-b1wgen9999 (INPUT YEAR(par_dtmvtolt),
                                               INPUT 68 - LENGTH(aux_dsextens),
                                               INPUT 44, 
                                               INPUT "I",
                                              OUTPUT aux_dsdtmvt1, 
                                              OUTPUT aux_dsdtmvt2).

            IF  RETURN-VALUE = "NOK"  THEN
                DO:
                    DELETE PROCEDURE h-b1wgen9999.
            
                    ASSIGN aux_cdcritic = 0
                           aux_dscritic = aux_dsdtmvt1.
                   
                    RUN gera_erro (INPUT par_cdcooper,
                                   INPUT par_cdagenci,
                                   INPUT par_nrdcaixa,
                                   INPUT 1,            /** Sequencia **/
                                   INPUT aux_cdcritic,
                                   INPUT-OUTPUT aux_dscritic).
            
                    RETURN "NOK".       
                END.

            ASSIGN aux_dsdtmvt1 = aux_dsextens + aux_dsdtmvt1 
                   aux_dsdtmvt2 = aux_dsdtmvt2. 
                   
            IF  par_idorigem = 5  THEN /** Ayllos WEB **/
                ASSIGN aux_dsdtmvt1 = aux_dsdtmvt1 + 
                                      FILL("*",78 - LENGTH(aux_dsdtmvt1))
                       aux_dsdtmvt2 = aux_dsdtmvt2 + 
                                      FILL("*",8 - LENGTH(aux_dsdtmvt2)).
            ELSE
                ASSIGN aux_dsdtmvt1 = aux_dsdtmvt1 + 
                                      FILL("*",68 - LENGTH(aux_dsdtmvt1))
                       aux_dsdtmvt2 = aux_dsdtmvt2 + 
                                      FILL("*",44 - LENGTH(aux_dsdtmvt2)).
        END.

    RUN valor-extenso IN h-b1wgen9999 (INPUT craptlc.vllimcrd, 
                                       INPUT 45,
                                       INPUT 73,
                                       INPUT "M",
                                      OUTPUT aux_dsvlnpr1,
                                      OUTPUT aux_dsvlnpr2).
    
    IF  RETURN-VALUE = "NOK"  THEN
        DO:
            DELETE PROCEDURE h-b1wgen9999.
            
            ASSIGN aux_cdcritic = 0
                   aux_dscritic = aux_dsvlnpr1.
                   
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
           
            RETURN "NOK".       
        END.
                    
    RUN divide-nome-coop IN h-b1wgen9999 (INPUT crapcop.nmextcop,
                                         OUTPUT aux_nmexcop1,
                                         OUTPUT aux_nmexcop2).
        
    DELETE PROCEDURE h-b1wgen9999.

    FIND crapage WHERE crapage.cdcooper = par_cdcooper     AND
                       crapage.cdagenci = crapass.cdagenci 
                       NO-LOCK NO-ERROR.

    IF  NOT AVAILABLE crapage  THEN
        ASSIGN aux_nmcidpac = "____________________".
    ELSE
        ASSIGN aux_nmcidpac = crapage.nmcidade.           
        
    FIND crapenc WHERE crapenc.cdcooper = par_cdcooper AND
                       crapenc.nrdconta = par_nrdconta AND
                       crapenc.idseqttl = 1            AND
                       crapenc.cdseqinc = 1            NO-LOCK NO-ERROR.

    IF  NOT AVAILABLE crapenc  THEN
        DO: 
             ASSIGN aux_cdcritic = 0
                    aux_dscritic = "Endereco nao encontrado".
                   
             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                       
             RETURN "NOK".        
        END.
        
    ASSIGN aux_dsemsctr = STRING(DAY(crawcrd.dtmvtolt),"99") + " de " +
                          TRIM(ENTRY(MONTH(crawcrd.dtmvtolt),aux_dsmesref)) +
                          " de " + STRING(YEAR(crawcrd.dtmvtolt),"9999").  
    
    CREATE tt-ctr_bb.
    ASSIGN tt-ctr_bb.nmcartao = aux_nmcartao
           tt-ctr_bb.nrctrcrd = crawcrd.nrctrcrd
           tt-ctr_bb.nmextcop = crapcop.nmextcop
           tt-ctr_bb.nmrescop = crapcop.nmrescop
           tt-ctr_bb.nrdocnpj = aux_nrdocnpj
           tt-ctr_bb.dsendcop = crapcop.dsendcop
           tt-ctr_bb.nrendcop = crapcop.nrendcop
           tt-ctr_bb.nmbairroc = crapcop.nmbairro
           tt-ctr_bb.nmcidadec = crapcop.nmcidade
           tt-ctr_bb.cdufdcop = crapcop.cdufdcop
           tt-ctr_bb.nmprimtl = crapass.nmprimtl
           tt-ctr_bb.nrcpfcgc = aux_nrcpfcgc
           tt-ctr_bb.nrdconta = crapass.nrdconta
           tt-ctr_bb.nrcrcard = crawcrd.nrcrcard
           tt-ctr_bb.nrctrcrd = crawcrd.nrctrcrd
           tt-ctr_bb.nmtitcrd = crawcrd.nmtitcrd
           tt-ctr_bb.cdagenci = crapass.cdagenci
           tt-ctr_bb.dsemsctr = aux_dsemsctr
           tt-ctr_bb.nmoperad = aux_nmoperad
           tt-ctr_bb.dsendere = crapenc.dsendere
           tt-ctr_bb.nrendere = crapenc.nrendere
           tt-ctr_bb.nmbairro = crapenc.nmbairro
           tt-ctr_bb.nmcidade = crapenc.nmcidade
           tt-ctr_bb.nrcepend = crapenc.nrcepend
           tt-ctr_bb.cdufende = crapenc.cdufende
           tt-ctr_bb.nrdctitg = crapass.nrdctitg
           /*promissoria*/
           tt-ctr_bb.nmexcop1 = aux_nmexcop1
           tt-ctr_bb.nmexcop2 = aux_nmexcop2
           tt-ctr_bb.dscpfcgc = IF crapass.inpessoa = 1
                                         THEN "C.P.F. " + TRIM(aux_nrcpfcgc)
                                         ELSE "CNPJ " + TRIM(aux_nrcpfcgc)
           tt-ctr_bb.endeass1 = crapenc.dsendere + " " + 
                                   TRIM(STRING(crapenc.nrendere,"zzz,zzz"))
           tt-ctr_bb.endeass2 = TRIM(crapenc.nmbairro) + " - " +
                                   TRIM(crapenc.nmcidade) + " - " +
                                   STRING(crapenc.nrcepend,"99,999,999") + 
                                   " - " + crapenc.cdufende
           tt-ctr_bb.nmcidpac = aux_nmcidpac
           tt-ctr_bb.dsctrcrd = TRIM(STRING(crawcrd.nrctrcrd,
                                                "z,zzz,zz9")) + "/001"
           tt-ctr_bb.vllimite = craptlc.vllimcrd
           tt-ctr_bb.dsdtmvt1 = aux_dsdtmvt1
           tt-ctr_bb.dsdtmvt2 = aux_dsdtmvt2
           tt-ctr_bb.dsvlnpr1 = aux_dsvlnpr1
           tt-ctr_bb.dsvlnpr2 = aux_dsvlnpr2
           tt-ctr_bb.dsemsdnp = STRING(DAY(par_dtmvtolt),"99") + " de " +
                                TRIM(ENTRY(MONTH(par_dtmvtolt),aux_dsmesref)) +
                                " de " + STRING(YEAR(par_dtmvtolt),"9999").
           tt-ctr_bb.dsdmoeda = "R$".           
           /*promissoria*/
           
           
    RETURN "OK".           

END PROCEDURE.

PROCEDURE termo_altdata:

    DEF  INPUT PARAM par_cdcooper AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_cdagenci AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrdcaixa AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_cdoperad AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nmdatela AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_idorigem AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrdconta AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_idseqttl AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_dtmvtolt AS DATE                           NO-UNDO.
    DEF  INPUT PARAM par_nrctrcrd AS INTE                           NO-UNDO.
    
    DEF OUTPUT PARAM TABLE FOR tt-termo_alt_dt_venc.
    DEF OUTPUT PARAM TABLE FOR tt-erro.

    DEF VAR aux_dsmesref AS CHAR INIT
                         ["Janeiro,Fevereiro,Marco,Abril,Maio,Junho,
                          Julho,Agosto,Setembro,Outubro,Novembro,Dezembro"]
                                                                    NO-UNDO.
    DEF VAR aux_dslinha1 AS CHAR                                    NO-UNDO.
    DEF VAR aux_dslinha2 AS CHAR                                    NO-UNDO.
    DEF VAR aux_dslinha3 AS CHAR                                    NO-UNDO.   
    DEF VAR aux_nmoperad AS CHAR                                    NO-UNDO.
    DEF VAR aux_nmrecop1 AS CHAR                                    NO-UNDO.
    DEF VAR aux_nmrecop2 AS CHAR                                    NO-UNDO.
    DEF VAR aux_dsemsctr AS CHAR                                    NO-UNDO.
    DEF VAR h-b1wgen9999 AS HANDLE                                  NO-UNDO.
    
    EMPTY TEMP-TABLE tt-termo_alt_dt_venc.
    EMPTY TEMP-TABLE tt-erro.
    
    FIND crapcop WHERE crapcop.cdcooper = par_cdcooper NO-LOCK NO-ERROR.

    IF   NOT AVAILABLE crapcop THEN
         DO:
             ASSIGN aux_cdcritic = 651
                    aux_dscritic = "".
                   
             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                       
             RETURN "NOK".
         END.
         
    ASSIGN aux_dslinha1 = "CNPJ " + 
                           STRING(STRING(crapcop.nrdocnpj,"99999999999999"),
                                         "xx.xxx.xxx/xxxx-xx") +
                          "  FONE: " + crapcop.nrtelvoz
                    
           aux_dslinha2 = crapcop.dsendcop + ", " + 
                          STRING(crapcop.nrendcop,"zz,zz9") + " - CP " +
                          STRING(crapcop.nrcxapst,"zz,zz9")
                    
           aux_dslinha3 = STRING(crapcop.nrcepend,"zz,zzz,zzz") + " - " +
                          crapcop.nmcidade + " - " + crapcop.cdufdcop.         
 
    FIND FIRST crawcrd WHERE crawcrd.cdcooper = par_cdcooper AND
                             crawcrd.nrdconta = par_nrdconta AND
                             crawcrd.nrctrcrd = par_nrctrcrd     
                             NO-LOCK NO-ERROR.

    IF   NOT AVAILABLE crawcrd THEN
         DO:
             ASSIGN aux_cdcritic = 535
                    aux_dscritic = "".
                   
             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                       
             RETURN "NOK".
         END.    
         
    FOR FIRST crapass FIELDS(nmprimtl)
                     WHERE crapass.cdcooper = par_cdcooper  AND
                       crapass.nrdconta = par_nrdconta  NO-LOCK:
    END.
                   
    IF   NOT AVAILABLE crapass THEN
         DO:
             ASSIGN aux_cdcritic = 9
                    aux_dscritic = "".

             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).                
                
             RETURN "NOK".
         END.
    
    FIND crapope WHERE crapope.cdcooper = par_cdcooper     AND
                       crapope.cdoperad = crawcrd.cdoperad 
                       NO-LOCK NO-ERROR.

    IF   NOT AVAILABLE crapope THEN
         aux_nmoperad = STRING(crawcrd.cdoperad,"x(10)") +
                        " - Nao cadastrado.".
    ELSE
         aux_nmoperad = crapope.nmoperad.    
    
    RUN sistema/generico/procedures/b1wgen9999.p PERSISTENT
        SET h-b1wgen9999.
        
    IF  NOT VALID-HANDLE(h-b1wgen9999)  THEN
        DO:
            ASSIGN aux_cdcritic = 0
                   aux_dscritic = "Handle invalido para BO b1wgen9999.".
                   
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                       
            RETURN "NOK".
        END.
    
    RUN divide-nome-coop IN h-b1wgen9999 (INPUT crapcop.nmextcop,
                                          OUTPUT aux_nmrecop1,
                                          OUTPUT aux_nmrecop2).         

    DELETE PROCEDURE h-b1wgen9999.
    
    ASSIGN aux_dsemsctr = crapcop.nmcidade + ", " +
                          STRING(DAY(crawcrd.dtmvtolt),"99") + " de " +
                          TRIM(ENTRY(MONTH(crawcrd.dtmvtolt),aux_dsmesref)) +
                          " de " + STRING(YEAR(crawcrd.dtmvtolt),"9999").    
                          
    CREATE tt-termo_alt_dt_venc.
    ASSIGN tt-termo_alt_dt_venc.nmextcop = crapcop.nmextcop
           tt-termo_alt_dt_venc.dslinha1 = aux_dslinha1
           tt-termo_alt_dt_venc.dslinha2 = aux_dslinha2
           tt-termo_alt_dt_venc.dslinha3 = aux_dslinha3
           tt-termo_alt_dt_venc.dsemsctr = aux_dsemsctr
           tt-termo_alt_dt_venc.nrcrcard = crawcrd.nrcrcard
           tt-termo_alt_dt_venc.nmtitcrd = crawcrd.nmtitcrd
           tt-termo_alt_dt_venc.dddebito = crawcrd.dddebant
           tt-termo_alt_dt_venc.nmprimtl = crapass.nmprimtl
           tt-termo_alt_dt_venc.dsoperad = STRING(par_cdoperad,"x(10)") +
                                           " - " + aux_nmoperad
           tt-termo_alt_dt_venc.nmrecop1 = aux_nmrecop1
           tt-termo_alt_dt_venc.nmrecop2 = aux_nmrecop2.

    RETURN "OK".
    
END PROCEDURE.    

/** GERAIS **/
PROCEDURE corrige_segntl:

    DEF   INPUT  PARAMETER    par_nmsegntl   AS CHAR                    NO-UNDO.
    DEF   OUTPUT PARAMETER    par_nmresult   AS CHAR                    NO-UNDO.

    DO WHILE TRUE ON ENDKEY UNDO, LEAVE:

       IF   CAPS(SUBSTR(par_nmsegntl, 1, 4)) = "EOU "   THEN 
            DO:
               par_nmsegntl = SUBSTR(par_nmsegntl, 5, LENGTH(par_nmsegntl)).
               NEXT.
            END.

       IF   INDEX(SUBSTR(par_nmsegntl, 1, 5), "/") > 0   THEN
            DO:
               par_nmsegntl = SUBSTR(par_nmsegntl, 
                              INDEX(SUBSTR(par_nmsegntl, 1, 5), "/") + 1, 
                              LENGTH(par_nmsegntl)).
               NEXT.
            END.
     
       IF   INDEX(SUBSTR(par_nmsegntl, 1, 2), " ") > 0   THEN
            DO:
               par_nmsegntl = SUBSTR(par_nmsegntl, 
                              INDEX(SUBSTR(par_nmsegntl, 1, 2), " ") + 1,
                              LENGTH(par_nmsegntl)).
               NEXT.
            END.

       IF   INDEX(CAPS(SUBSTR(par_nmsegntl, 1, 3)), "OU ") > 0   THEN
            DO:
               par_nmsegntl = SUBSTR(par_nmsegntl, 
                             INDEX(CAPS(SUBSTR(par_nmsegntl, 1, 3)), "OU ") + 1,
                              LENGTH(par_nmsegntl)).
               NEXT.
            END.
     
       LEAVE.
  
    END.

    par_nmresult = par_nmsegntl.
    
    RETURN "OK".
  
END PROCEDURE.  

PROCEDURE busca_dddebito:

  DEF  INPUT PARAM par_cdcooper AS INTE          NO-UNDO.
  DEF  INPUT PARAM par_cdadmcrd AS INTE          NO-UNDO.
  DEF OUTPUT PARAM aux_dddebito AS CHAR          NO-UNDO.

  DEF VAR aux AS INTE EXTENT 32                  NO-UNDO.
  DEF VAR contador AS INTE                       NO-UNDO.
  DEF VAR aux_flgfirst AS LOG                    NO-UNDO.
  

  IF f_verifica_adm(par_cdadmcrd) = 2 THEN
      DO:
        FOR EACH craptlc WHERE craptlc.cdcooper = par_cdcooper   AND
                         craptlc.cdadmcrd = par_cdadmcrd   AND
                         craptlc.dddebito > 0 AND
						 craptlc.dddebito <> 27 /*Removido vencimento para o dia 27 SD: 636445*/ NO-LOCK:

            ASSIGN aux[craptlc.dddebito] = craptlc.dddebito.
          
        END.
      END.
  ELSE
      DO:
        FOR EACH craptlc WHERE craptlc.cdcooper = par_cdcooper   AND
                         craptlc.cdadmcrd = par_cdadmcrd   AND
                         craptlc.nrctamae > 0              AND 
                         craptlc.dddebito > 0 NO-LOCK:

            ASSIGN aux[craptlc.dddebito] = craptlc.dddebito.
          
        END.
      END.
  
  
  ASSIGN aux_flgfirst = TRUE.

  DO contador=1 TO 32 :

        IF aux[contador] <> 0 THEN DO:
            IF aux_flgfirst = TRUE THEN DO:
                aux_dddebito = STRING(par_cdadmcrd, "99") + ";" + STRING(aux[contador], "99").
                aux_flgfirst = FALSE.
            END.
            ELSE
                aux_dddebito = aux_dddebito + "," + STRING(aux[contador], "99").
        END.

  END.

  IF   aux_dddebito = ""   THEN
       aux_dddebito = "00".
       
  RETURN "OK".     

END PROCEDURE.

PROCEDURE busca_limite_proposto_bancoob:

  DEF  INPUT PARAM par_cdcooper AS INTE                                 NO-UNDO.
  DEF  INPUT PARAM par_cdadmcrd AS INTE                                 NO-UNDO.
  DEF OUTPUT PARAM aux_dslimite AS CHAR                                 NO-UNDO.

  FOR EACH craptlc WHERE craptlc.cdcooper = par_cdcooper AND
                         craptlc.cdadmcrd = par_cdadmcrd AND
                         craptlc.insittab = 0            AND
                         craptlc.dddebito = 0 
                         NO-LOCK,
                            
       EACH crapadc WHERE crapadc.cdcooper = craptlc.cdcooper AND
                          crapadc.cdadmcrd = craptlc.cdadmcrd AND
                          crapadc.nmbandei <> "MAESTRO"
                          NO-LOCK
                          BY craptlc.vllimcrd:

         IF aux_dslimite = "" THEN
            ASSIGN aux_dslimite = STRING(craptlc.vllimcrd,"zz,zzz,zz9.99").
         ELSE
            ASSIGN aux_dslimite = aux_dslimite + "@" + STRING(craptlc.vllimcrd,"zz,zzz,zz9.99").
            
  END. /* END FOR EACH craptlc */
     
  IF aux_dslimite = "" THEN
     ASSIGN aux_dslimite = "0,00".
  
  RETURN "OK".     

END PROCEDURE.
   
PROCEDURE carrega_dados_habilitacao:

  DEF  INPUT PARAM par_cdcooper AS INTE  NO-UNDO.
  DEF  INPUT PARAM par_nrdconta AS INTE  NO-UNDO.  
  DEF OUTPUT PARAM TABLE FOR tt-erro.
  DEF OUTPUT PARAM TABLE FOR tt-hab_cartao.

  FOR FIRST crapass FIELDS(nrcpfcgc nmprimtl)
                     WHERE crapass.cdcooper = par_cdcooper   AND
                           crapass.nrdconta = par_nrdconta   NO-LOCK: 
  END.

  IF   NOT AVAILABLE crapass THEN
       DO:
           ASSIGN aux_cdcritic = 9
                  aux_dscritic = "".

           RUN gera_erro (INPUT par_cdcooper,
                          INPUT 0,
                          INPUT 0,
                          INPUT 1,            /** Sequencia **/
                          INPUT aux_cdcritic,
                          INPUT-OUTPUT aux_dscritic).                

           RETURN "NOK".
       END.       


  CREATE tt-hab_cartao.
  ASSIGN tt-hab_cartao.nrcpfcgc = crapass.nrcpfcgc
         tt-hab_cartao.nmprimtl = crapass.nmprimtl.


  FIND craphcj WHERE craphcj.cdcooper = par_cdcooper   AND
                     craphcj.nrdconta = par_nrdconta   NO-LOCK NO-ERROR.
  

  IF   AVAILABLE craphcj THEN
       DO:
           ASSIGN tt-hab_cartao.nrdconta = craphcj.nrdconta
                  tt-hab_cartao.vllimglb = craphcj.vllimglb
                  tt-hab_cartao.flgativo = craphcj.flgativo
                  tt-hab_cartao.nrcpfpri = craphcj.nrcpfpri
                  tt-hab_cartao.nrcpfseg = craphcj.nrcpfseg
                  tt-hab_cartao.nrcpfter = craphcj.nrcpfter               
                  tt-hab_cartao.nrctrcrd = craphcj.nrctrhcj
                  tt-hab_cartao.nrctaav1 = craphcj.nrctaav1
                  tt-hab_cartao.nrctaav2 = craphcj.nrctaav2
                  tt-hab_cartao.flgrepr1 = NO 
                  tt-hab_cartao.flgrepr2 = NO 
                  tt-hab_cartao.flgrepr3 = NO.

           IF   craphcj.nrcpfpri <> 0 THEN 
                DO:

                   FOR FIRST crapass FIELDS(nmprimtl dtnasctl)
                                                      WHERE crapass.cdcooper = par_cdcooper     AND
                                            crapass.nrcpfcgc = craphcj.nrcpfpri 
                                            NO-LOCK: 
                                   END.

                   IF   AVAILABLE crapass THEN
                        DO:
                            ASSIGN tt-hab_cartao.nmpespri = crapass.nmprimtl
                                   tt-hab_cartao.dtnaspri = crapass.dtnasctl
                                   tt-hab_cartao.flgrepr1 = YES.
        
                        END.
                   ELSE
                        DO:
        
                            FIND crapncp WHERE crapncp.nrdoccpf = craphcj.nrcpfpri 
                                 NO-LOCK NO-ERROR.
        
                            IF   AVAILABLE crapncp THEN
                                 DO:
        
                                     ASSIGN tt-hab_cartao.nmpespri = crapncp.nmpessoa
                                            tt-hab_cartao.dtnaspri = crapncp.dtnasmto.
        
                                 END.
        
                        END.

                END.

           IF   craphcj.nrcpfseg <> 0 THEN
                DO:

                   FOR FIRST crapass FIELDS(nmprimtl dtnasctl)
                                                      WHERE crapass.cdcooper = par_cdcooper     AND
                                            crapass.nrcpfcgc = craphcj.nrcpfseg 
                                            NO-LOCK: END.
        
                   IF   AVAILABLE crapass THEN
                        DO:
                            ASSIGN tt-hab_cartao.nmpesseg = crapass.nmprimtl
                                   tt-hab_cartao.dtnasseg = crapass.dtnasctl
                                   tt-hab_cartao.flgrepr2 = YES.
        
                        END.
                   ELSE
                        DO:
        
                            FIND crapncp WHERE crapncp.nrdoccpf = craphcj.nrcpfseg 
                                 NO-LOCK NO-ERROR.
        
                            IF   AVAILABLE crapncp THEN
                                 DO:
        
                                     ASSIGN tt-hab_cartao.nmpesseg = crapncp.nmpessoa
                                            tt-hab_cartao.dtnasseg = crapncp.dtnasmto.
        
                                 END.
        
                        END.
        
                END.

           IF   craphcj.nrcpfter <> 0 THEN 
                DO:

                   FOR FIRST crapass FIELDS(nmprimtl dtnasctl)
                                                      WHERE crapass.cdcooper = par_cdcooper     AND
                                            crapass.nrcpfcgc = craphcj.nrcpfter 
                                            NO-LOCK: END.
    
                   IF   AVAILABLE crapass THEN
                        DO:
                            ASSIGN tt-hab_cartao.nmpester = crapass.nmprimtl
                                   tt-hab_cartao.dtnaster = crapass.dtnasctl
                                   tt-hab_cartao.flgrepr3 = YES.
    
                        END.
                   ELSE
                        DO:
    
                            FIND crapncp WHERE crapncp.nrdoccpf = craphcj.nrcpfter 
                                 NO-LOCK NO-ERROR.
    
                            IF   AVAILABLE crapncp THEN
                                 DO:
    
                                     ASSIGN tt-hab_cartao.nmpester = crapncp.nmpessoa
                                            tt-hab_cartao.dtnaster = crapncp.dtnasmto.
    
                                 END.
    
                        END.
    
                END.

           FIND FIRST crawcrd WHERE  crawcrd.cdcooper = par_cdcooper  AND
                                     crawcrd.nrdconta = par_nrdconta  AND
                                    (crawcrd.insitcrd = 0             OR /* estudo */
                                     crawcrd.insitcrd = 1             OR /* aprov */
                                     crawcrd.insitcrd = 2             OR /* solic */
                                     crawcrd.insitcrd = 4 )              /* em uso */
                                     NO-LOCK NO-ERROR.

           IF   NOT AVAILABLE crawcrd THEN
                ASSIGN tt-hab_cartao.flgalter = YES.
           ELSE
                ASSIGN tt-hab_cartao.flgalter = NO.

       END.
  ELSE
       ASSIGN tt-hab_cartao.nrctrcrd = 0 /* registro novo */
              tt-hab_cartao.nrctaav1 = 0
              tt-hab_cartao.nrctaav2 = 0
              tt-hab_cartao.flgalter = YES.

  RETURN "OK".     

END PROCEDURE.

PROCEDURE grava_dados_habilitacao:

  DEF INPUT  PARAM par_cdcooper AS INTE                           NO-UNDO.
  DEF INPUT  PARAM par_nrdconta AS INTE                           NO-UNDO.  
  DEF INPUT  PARAM par_cdoperad AS CHAR                           NO-UNDO.
  DEF INPUT  PARAM par_dtmvtolt AS DATE                           NO-UNDO.
  DEF INPUT  PARAM par_idorigem AS INTE                           NO-UNDO.
  DEF INPUT  PARAM par_cdagenci AS INTE                           NO-UNDO.
  DEF INPUT  PARAM par_nrdcaixa AS INTE                           NO-UNDO.
  /** ------------------- Parametros do 1 avalista ------------------- **/
  DEF  INPUT PARAM par_nrctaav1 AS INTE                           NO-UNDO.
  DEF  INPUT PARAM par_nmdaval1 AS CHAR                           NO-UNDO.
  DEF  INPUT PARAM par_nrcpfav1 AS DECI                           NO-UNDO.
  DEF  INPUT PARAM par_tpdocav1 AS CHAR                           NO-UNDO.
  DEF  INPUT PARAM par_dsdocav1 AS CHAR                           NO-UNDO.
  DEF  INPUT PARAM par_nmdcjav1 AS CHAR                           NO-UNDO.  
  DEF  INPUT PARAM par_cpfcjav1 AS DECI                           NO-UNDO.
  DEF  INPUT PARAM par_tdccjav1 AS CHAR                           NO-UNDO.  
  DEF  INPUT PARAM par_doccjav1 AS CHAR                           NO-UNDO.  
  DEF  INPUT PARAM par_ende1av1 AS CHAR                           NO-UNDO.
  DEF  INPUT PARAM par_ende2av1 AS CHAR                           NO-UNDO.  
  DEF  INPUT PARAM par_nrfonav1 AS CHAR                           NO-UNDO.
  DEF  INPUT PARAM par_emailav1 AS CHAR                           NO-UNDO.
  DEF  INPUT PARAM par_nmcidav1 AS CHAR                           NO-UNDO.
  DEF  INPUT PARAM par_cdufava1 AS CHAR                           NO-UNDO.
  DEF  INPUT PARAM par_nrcepav1 AS INTE                           NO-UNDO.
  DEF  INPUT PARAM par_nrender1 AS INTE                           NO-UNDO.
  DEF  INPUT PARAM par_complen1 AS CHAR                           NO-UNDO.
  DEF  INPUT PARAM par_nrcxaps1 AS INTE                           NO-UNDO.
  /** ------------------- Parametros do 2 avalista ------------------- **/
  DEF  INPUT PARAM par_nrctaav2 AS INTE                           NO-UNDO.
  DEF  INPUT PARAM par_nmdaval2 AS CHAR                           NO-UNDO.
  DEF  INPUT PARAM par_nrcpfav2 AS DECI                           NO-UNDO.
  DEF  INPUT PARAM par_tpdocav2 AS CHAR                           NO-UNDO.
  DEF  INPUT PARAM par_dsdocav2 AS CHAR                           NO-UNDO.
  DEF  INPUT PARAM par_nmdcjav2 AS CHAR                           NO-UNDO.
  DEF  INPUT PARAM par_cpfcjav2 AS DECI                           NO-UNDO.
  DEF  INPUT PARAM par_tdccjav2 AS CHAR                           NO-UNDO.
  DEF  INPUT PARAM par_doccjav2 AS CHAR                           NO-UNDO.
  DEF  INPUT PARAM par_ende1av2 AS CHAR                           NO-UNDO.
  DEF  INPUT PARAM par_ende2av2 AS CHAR                           NO-UNDO.
  DEF  INPUT PARAM par_nrfonav2 AS CHAR                           NO-UNDO.
  DEF  INPUT PARAM par_emailav2 AS CHAR                           NO-UNDO.
  DEF  INPUT PARAM par_nmcidav2 AS CHAR                           NO-UNDO.
  DEF  INPUT PARAM par_cdufava2 AS CHAR                           NO-UNDO.
  DEF  INPUT PARAM par_nrcepav2 AS INTE                           NO-UNDO.
  DEF  INPUT PARAM par_nrender2 AS INTE                           NO-UNDO.
  DEF  INPUT PARAM par_complen2 AS CHAR                           NO-UNDO.
  DEF  INPUT PARAM par_nrcxaps2 AS INTE                           NO-UNDO.
  
  DEF OUTPUT PARAM par_nrctrcrd AS INTE  NO-UNDO.

  DEF INPUT  PARAM TABLE FOR tt-hab_cartao.
  DEF OUTPUT PARAM TABLE FOR tt-erro.

  DEF VAR h-b1wgen9999          AS HANDLE                         NO-UNDO.
  DEF VAR aux_contador          AS INTE                           NO-UNDO.
  DEF VAR aux_ponteiro          AS INTE                           NO-UNDO.
  DEF VAR aux_nrctrcrd          AS INTE                           NO-UNDO.
  
  FIND tt-hab_cartao NO-ERROR.

  
  RUN sistema/generico/procedures/b1wgen9999.p PERSISTENT 
      SET h-b1wgen9999.                                   

  IF  NOT VALID-HANDLE(h-b1wgen9999)  THEN
      DO:
          ASSIGN aux_cdcritic = 0
                 aux_dscritic = "Handle invalido para BO b1wgen9999.".

          RUN gera_erro (INPUT par_cdcooper,
                         INPUT 0,
                         INPUT 0,
                         INPUT 1,            /** Sequencia **/
                         INPUT aux_cdcritic,
                         INPUT-OUTPUT aux_dscritic).

          RETURN "NOK".

      END.

  IF   tt-hab_cartao.nrctrcrd = 0  THEN /* registro novo */
       DO:
          
           { includes/PLSQL_altera_session_antes_st.i &dboraayl={&scd_dboraayl} }

           /* Busca a proxima sequencia do campo crapldt.nrsequen */
           RUN STORED-PROCEDURE pc_sequence_progress
           aux_handproc = PROC-HANDLE NO-ERROR (INPUT "CRAPMAT"
                                               ,INPUT "NRCTRCRD"
                                               ,INPUT STRING(par_cdcooper)
                                               ,INPUT "N"
                                               ,"").

           CLOSE STORED-PROC pc_sequence_progress
           aux_statproc = PROC-STATUS WHERE PROC-HANDLE = aux_handproc.

           { includes/PLSQL_altera_session_depois_st.i &dboraayl={&scd_dboraayl} }

           ASSIGN aux_nrctrcrd = INTE(pc_sequence_progress.pr_sequence)
                                 WHEN pc_sequence_progress.pr_sequence <> ?.

          RUN cria-tabelas-avalistas IN h-b1wgen9999 (INPUT par_cdcooper,
                                                      INPUT par_cdoperad,
                                                      INPUT par_idorigem,
                                                      INPUT "CARTAO CRED.",
                                                      INPUT par_nrdconta,
                                                      INPUT par_dtmvtolt,
                                                      INPUT 4, /* Tipo Contrato */
                                                      INPUT aux_nrctrcrd,
                                                      INPUT par_cdagenci,
                                                      INPUT par_nrdcaixa,
                                                      /** 1o avalista **/
                                                      INPUT par_nrctaav1,
                                                      INPUT par_nmdaval1,
                                                      INPUT par_nrcpfav1,
                                                      INPUT par_tpdocav1,
                                                      INPUT par_dsdocav1,
                                                      INPUT par_nmdcjav1,
                                                      INPUT par_cpfcjav1, 
                                                      INPUT par_tdccjav1,
                                                      INPUT par_doccjav1,
                                                      INPUT par_ende1av1,
                                                      INPUT par_ende2av1,
                                                      INPUT par_nrfonav1,
                                                      INPUT par_emailav1,
                                                      INPUT par_nmcidav1,
                                                      INPUT par_cdufava1,
                                                      INPUT par_nrcepav1,
                                                      INPUT "", /* Nacao */
                                                      INPUT 0,  /* Vl.Endiv*/
                                                      INPUT 0,  /* Vl.Rend */
                                                      INPUT par_nrender1, 
                                                      INPUT par_complen1,
                                                      INPUT par_nrcxaps1,
                                                      INPUT 0,  /* inpessoa 1o avail */
                                                      INPUT ?,  /* dtnascto 1o avail */
                                                      /** 2o avalista **/
                                                      INPUT par_nrctaav2,
                                                      INPUT par_nmdaval2, 
                                                      INPUT par_nrcpfav2,
                                                      INPUT par_tpdocav2,
                                                      INPUT par_dsdocav2, 
                                                      INPUT par_nmdcjav2, 
                                                      INPUT par_cpfcjav2,
                                                      INPUT par_tdccjav2,
                                                      INPUT par_doccjav2,
                                                      INPUT par_ende1av2,
                                                      INPUT par_ende2av2,
                                                      INPUT par_nrfonav2,
                                                      INPUT par_emailav2, 
                                                      INPUT par_nmcidav2, 
                                                      INPUT par_cdufava2, 
                                                      INPUT par_nrcepav2,
                                                      INPUT "", /* Nacao */
                                                      INPUT 0,  /* Vl.Endiv*/
                                                      INPUT 0,  /* Vl.Rend */
                                                      INPUT par_nrender2, 
                                                      INPUT par_complen2,
                                                      INPUT par_nrcxaps2,
                                                      INPUT 0,  /* inpessoa 2o avail */
                                                      INPUT ?,  /* dtnascto 2o avail */
                                                      INPUT "",
                                                     OUTPUT TABLE tt-erro).
          
          IF VALID-HANDLE(h-b1wgen9999)  THEN
            DELETE PROCEDURE h-b1wgen9999.

          IF RETURN-VALUE = "NOK" THEN
              DO:
                  RETURN "NOK".
              END.

          ASSIGN tt-hab_cartao.nrctrcrd = aux_nrctrcrd.

       END.

  ELSE
       DO:

          RUN atualiza_tabela_avalistas IN h-b1wgen9999 (INPUT par_cdcooper,
                                                         INPUT par_cdoperad,
                                                         INPUT par_idorigem,
                                                         INPUT "CARTAO CRED.",
                                                         INPUT par_nrdconta,
                                                         INPUT par_dtmvtolt,
                                                         INPUT 4, /* Tipo Contrato */
                                                         INPUT tt-hab_cartao.nrctrcrd,
                                                         INPUT par_cdagenci,
                                                         INPUT par_nrdcaixa,
                                                         /** 1o avalista **/
                                                         INPUT par_nrctaav1,
                                                         INPUT par_nmdaval1,
                                                         INPUT par_nrcpfav1,
                                                         INPUT par_tpdocav1,
                                                         INPUT par_dsdocav1,
                                                         INPUT par_nmdcjav1,
                                                         INPUT par_cpfcjav1, 
                                                         INPUT par_tdccjav1,
                                                         INPUT par_doccjav1,
                                                         INPUT par_ende1av1,
                                                         INPUT par_ende2av1,
                                                         INPUT par_nrfonav1,
                                                         INPUT par_emailav1,
                                                         INPUT par_nmcidav1,
                                                         INPUT par_cdufava1,                                                         
                                                         INPUT par_nrcepav1,
                                                         INPUT "", /* Nacao */
                                                         INPUT 0,  /* Vl.Endiv*/
                                                         INPUT 0,  /* Vl.Rend */
                                                         INPUT par_nrender1, 
                                                         INPUT par_complen1,
                                                         INPUT par_nrcxaps1,
                                                         INPUT 0,  /* inpessoa 1o avail */
                                                         INPUT ?,  /* dtnascto 1o avail */
                                                         /** 2o avalista **/
                                                         INPUT par_nrctaav2,
                                                         INPUT par_nmdaval2, 
                                                         INPUT par_nrcpfav2,
                                                         INPUT par_tpdocav2,
                                                         INPUT par_dsdocav2, 
                                                         INPUT par_nmdcjav2, 
                                                         INPUT par_cpfcjav2,
                                                         INPUT par_tdccjav2,
                                                         INPUT par_doccjav2,
                                                         INPUT par_ende1av2,
                                                         INPUT par_ende2av2,
                                                         INPUT par_nrfonav2,
                                                         INPUT par_emailav2, 
                                                         INPUT par_nmcidav2, 
                                                         INPUT par_cdufava2, 
                                                         INPUT par_nrcepav2,
                                                         INPUT "", /* Nacao */
                                                         INPUT 0,  /* Vl.Endiv*/
                                                         INPUT 0,  /* Vl.Rend */
                                                         INPUT par_nrender2, 
                                                         INPUT par_complen2,
                                                         INPUT par_nrcxaps2,
                                                         INPUT 0,  /* inpessoa 2o avail */
                                                         INPUT ?,  /* dtnascto 2o avail */
                                                         INPUT ""). /* Bens */   

          IF VALID-HANDLE(h-b1wgen9999)  THEN
            DELETE PROCEDURE h-b1wgen9999.

          IF RETURN-VALUE = "NOK" THEN
            DO:
              RETURN "NOK".
            END.
                                                         
       END.
  
  FIND craphcj WHERE craphcj.cdcooper = par_cdcooper   AND
                     craphcj.nrdconta = par_nrdconta   EXCLUSIVE-LOCK NO-ERROR.
  
  IF   NOT AVAILABLE craphcj THEN /* inclusÆo */
       DO:

           CREATE craphcj.
           ASSIGN craphcj.cdcooper = par_cdcooper
                  craphcj.nrdconta = par_nrdconta.

       END.
  
  ASSIGN craphcj.vllimglb = tt-hab_cartao.vllimglb                       
         craphcj.flgativo = tt-hab_cartao.flgativo.
  
  FOR FIRST crapass FIELDS(inpessoa)
                     WHERE crapass.cdcooper = par_cdcooper           AND
                           crapass.nrcpfcgc = tt-hab_cartao.nrcpfpri 
                           NO-LOCK: END.
  
  IF   NOT AVAILABLE crapass       AND 
       tt-hab_cartao.nrcpfpri <> 0 THEN
       DO:
                
            FIND crapncp WHERE crapncp.nrdoccpf = tt-hab_cartao.nrcpfpri 
                 EXCLUSIVE-LOCK NO-ERROR.
                    
            IF  NOT AVAILABLE crapncp THEN 
                DO:
                    CREATE crapncp.
                    ASSIGN crapncp.nrdoccpf = tt-hab_cartao.nrcpfpri.

                END.
                  
            ASSIGN crapncp.nmpessoa = CAPS(tt-hab_cartao.nmpespri)
                   crapncp.dtnasmto = tt-hab_cartao.dtnaspri                                
                   crapncp.cdoperad = par_cdoperad
                   crapncp.dtmvtolt = par_dtmvtolt.
            VALIDATE crapncp.

       END.

        
  FOR FIRST crapass FIELDS(inpessoa)
                     WHERE crapass.cdcooper = par_cdcooper           AND
                           crapass.nrcpfcgc = tt-hab_cartao.nrcpfseg 
                           NO-LOCK: END.

  IF   NOT AVAILABLE crapass       AND
       tt-hab_cartao.nrcpfseg <> 0 THEN
       DO:
  
            FIND crapncp WHERE crapncp.nrdoccpf = tt-hab_cartao.nrcpfseg 
                 EXCLUSIVE-LOCK NO-ERROR.

            IF  NOT AVAILABLE crapncp THEN 
                 DO:
                     CREATE crapncp.
                     ASSIGN crapncp.nrdoccpf = tt-hab_cartao.nrcpfseg.

                 END.

            ASSIGN crapncp.nmpessoa = CAPS(tt-hab_cartao.nmpesseg)
                   crapncp.dtnasmto = tt-hab_cartao.dtnasseg
                   crapncp.cdoperad = par_cdoperad
                   crapncp.dtmvtolt = par_dtmvtolt.
            VALIDATE crapncp.
       END.

  FOR FIRST crapass FIELDS(inpessoa)
                     WHERE crapass.cdcooper = par_cdcooper           AND
                           crapass.nrcpfcgc = tt-hab_cartao.nrcpfter 
                           NO-LOCK: END.

  IF   NOT AVAILABLE crapass       AND
       tt-hab_cartao.nrcpfter <> 0 THEN      
       DO:

           FIND crapncp WHERE crapncp.nrdoccpf = tt-hab_cartao.nrcpfter 
                EXCLUSIVE-LOCK NO-ERROR.

           IF  NOT AVAILABLE crapncp THEN 
               DO:
                   CREATE crapncp.
                    ASSIGN crapncp.nrdoccpf = tt-hab_cartao.nrcpfter.

               END.

            ASSIGN crapncp.nmpessoa = CAPS(tt-hab_cartao.nmpester)
                   crapncp.dtnasmto = tt-hab_cartao.dtnaster
                   crapncp.cdoperad = par_cdoperad
                   crapncp.dtmvtolt = par_dtmvtolt.
            VALIDATE crapncp.
       END.

  ASSIGN craphcj.nrcpfpri = tt-hab_cartao.nrcpfpri
         craphcj.nrcpfseg = tt-hab_cartao.nrcpfseg
         craphcj.nrcpfter = tt-hab_cartao.nrcpfter
         craphcj.nrctrhcj = tt-hab_cartao.nrctrcrd      
         craphcj.nrctaav1 = par_nrctaav1
         craphcj.nrctaav2 = par_nrctaav2.

  VALIDATE craphcj.

  ASSIGN par_nrctrcrd = tt-hab_cartao.nrctrcrd.

  RETURN "OK".     

END PROCEDURE.


FUNCTION ValidaCpfCnpj RETURNS LOGICAL
    ( INPUT  par_cdcooper AS INTEGER,
      INPUT  par_nrcpfcgc AS CHARACTER,
      OUTPUT par_dscritic AS CHARACTER ):

    DEFINE VARIABLE h-b1wgen9999 AS HANDLE      NO-UNDO.
    DEFINE VARIABLE aux_stsnrcal AS LOGICAL     NO-UNDO.
    DEFINE VARIABLE aux_inpessoa AS INTEGER     NO-UNDO.

    /* Se houve erro na conversao para DEC, faz a critica */
    DEC(par_nrcpfcgc) NO-ERROR.

    IF  ERROR-STATUS:ERROR THEN
        DO:
           ASSIGN par_dscritic = "CPF/CNPJ contem caracteres invalidos, deve" +
                                 " possuir apenas numeros.".
           RETURN FALSE.
        END.

    IF  DECI(par_nrcpfcgc) = 0  THEN
        RETURN TRUE.

    IF  NOT VALID-HANDLE(h-b1wgen9999) THEN
        RUN sistema/generico/procedures/b1wgen9999.p
            PERSISTENT SET h-b1wgen9999.

    RUN valida-cpf-cnpj IN h-b1wgen9999 (INPUT par_nrcpfcgc,
                                         OUTPUT aux_stsnrcal,
                                         OUTPUT aux_inpessoa).

    DELETE PROCEDURE h-b1wgen9999.

    IF  NOT aux_stsnrcal THEN 
        DO:

            ASSIGN par_dscritic = "".

            RUN gera_erro (INPUT par_cdcooper,
                           INPUT 0,
                           INPUT 0,
                           INPUT 1,            /** Sequencia **/
                           INPUT 27,
                           INPUT-OUTPUT par_dscritic). 

    END.
        

    RETURN aux_stsnrcal.

END FUNCTION.

FUNCTION f_valida_assoc RETURNS LOGICAL
    ( INPUT  par_cdcooper AS INTEGER,
      INPUT  par_nrcpfcgc AS CHARACTER):

    FOR FIRST crapass FIELDS(inpessoa)
                           WHERE crapass.cdcooper = par_cdcooper      AND
                             crapass.nrcpfcgc = DEC(par_nrcpfcgc) NO-LOCK: 
        END.
    
    IF  AVAIL crapass THEN
        RETURN TRUE.
    ELSE
        RETURN FALSE.

END FUNCTION.

PROCEDURE busca_dados_assoc:

    DEF  INPUT PARAM par_cdcooper AS INTE  NO-UNDO.
    DEF  INPUT PARAM par_nrcpfcgc AS CHAR  NO-UNDO.  
    DEF  INPUT PARAM par_nmabrevi AS LOGI  NO-UNDO. 

    DEF OUTPUT PARAM par_nmprimtl AS CHAR  NO-UNDO.
    DEF OUTPUT PARAM par_dtnasctl AS DATE  NO-UNDO.
    DEF OUTPUT PARAM par_bfexiste AS LOGI  NO-UNDO.

    DEF VAR h-b1wgen9999 AS HANDLE         NO-UNDO.

    FOR FIRST crapass FIELDS(nmprimtl dtnasctl)
                           WHERE crapass.cdcooper = par_cdcooper      AND
                             crapass.nrcpfcgc = DEC(par_nrcpfcgc) AND 
                             crapass.dtdemiss = ?
                             NO-LOCK: END.

    IF  NOT AVAIL crapass   THEN
        DO:
            FOR FIRST crapass FIELDS(nmprimtl dtnasctl)
                                           WHERE crapass.cdcooper = par_cdcooper      AND
                                     crapass.nrcpfcgc = DEC(par_nrcpfcgc) 
                                     NO-LOCK: END.        
        END.
        
    IF  AVAIL crapass THEN 
        DO:
            IF  par_nmabrevi THEN
                DO:
                    /* Instancia a BO para executar as procedures */
                    IF  NOT VALID-HANDLE(h-b1wgen9999) THEN
                    RUN sistema/generico/procedures/b1wgen9999.p
                        PERSISTENT SET h-b1wgen9999.
 
                    /* Se BO foi instanciada */
                    IF  VALID-HANDLE(h-b1wgen9999) THEN
                        DO:
                            RUN Abrevia_Nome IN h-b1wgen9999 ( INPUT crapass.nmprimtl,
                                                               INPUT 19,
                                                              OUTPUT par_nmprimtl).
 
                            /* Mata a instancia da BO */
                        DELETE PROCEDURE h-b1wgen9999.
                    END.


                END.
            ELSE
                ASSIGN par_nmprimtl = crapass.nmprimtl.

            ASSIGN par_dtnasctl = crapass.dtnasctl
                   par_bfexiste = YES.

        END.
    ELSE
        ASSIGN par_nmprimtl = ""                
               par_dtnasctl = ?
               par_bfexiste = NO.

END PROCEDURE.

PROCEDURE valida_habilitacao:

    DEF  INPUT  PARAM par_cdcooper AS INTE                          NO-UNDO.
    DEF  INPUT  PARAM par_nrdconta AS INTE                          NO-UNDO.    
    DEF  INPUT  PARAM par_vllimglb AS DECI                          NO-UNDO.
    DEF  INPUT  PARAM par_flgativo AS LOGI                          NO-UNDO.        
    DEF  INPUT  PARAM par_nrcpfpri AS DECI                          NO-UNDO.
    DEF  INPUT  PARAM par_nrcpfseg AS DECI                          NO-UNDO.
    DEF  INPUT  PARAM par_nrcpfter AS DECI                          NO-UNDO.        
    DEF  INPUT  PARAM par_nmpespri AS CHAR                          NO-UNDO.
    DEF  INPUT  PARAM par_nmpesseg AS CHAR                          NO-UNDO.
    DEF  INPUT  PARAM par_nmpester AS CHAR                          NO-UNDO.        
    DEF  INPUT  PARAM par_dtnaspri AS DATE                          NO-UNDO.
    DEF  INPUT  PARAM par_dtnasseg AS DATE                          NO-UNDO.
    DEF  INPUT  PARAM par_dtnaster AS DATE                          NO-UNDO.

    DEF OUTPUT  PARAM TABLE FOR tt-msg-confirma.
    DEF OUTPUT  PARAM TABLE FOR tt-erro.
    
    DEF VAR aux_vllimcrd LIKE craptlc.vllimcrd.

    EMPTY TEMP-TABLE tt-msg-confirma.
    EMPTY TEMP-TABLE tt-erro.

    IF  par_flgativo = YES AND 
        par_vllimglb = 0   THEN
        DO:

            ASSIGN aux_cdcritic = 0
                   aux_dscritic = "Informe o limite empresarial.".

            RUN gera_erro (INPUT par_cdcooper,
                           INPUT 0,
                           INPUT 0,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).

            RETURN "NOK".

        END.

        IF  par_flgativo = NO THEN
            DO:

                FIND FIRST crawcrd WHERE  crawcrd.cdcooper = par_cdcooper  AND
                              crawcrd.nrdconta = par_nrdconta  AND
                             (crawcrd.insitcrd = 0             OR /* estudo */
                              crawcrd.insitcrd = 1             OR /* aprov */
                              crawcrd.insitcrd = 2             OR /* solic */
                              crawcrd.insitcrd = 4 )              /* em uso */
                              NO-LOCK NO-ERROR.
    
                IF  AVAILABLE crawcrd THEN
                    DO:
    
                        ASSIGN aux_cdcritic = 0
                               aux_dscritic = "Conta com cartao de credito.".
    
                        RUN gera_erro (INPUT par_cdcooper,
                                       INPUT 0,
                                       INPUT 0,
                                       INPUT 1,            /** Sequencia **/
                                       INPUT aux_cdcritic,
                                       INPUT-OUTPUT aux_dscritic).
    
                        RETURN "NOK".
    
    
                    END.

            END.

    ASSIGN aux_vllimcrd = 0.

    FOR EACH crawcrd WHERE  crawcrd.cdcooper = par_cdcooper  AND
                            crawcrd.nrdconta = par_nrdconta  AND
                           (crawcrd.insitcrd = 0             OR /* estudo */
                            crawcrd.insitcrd = 1             OR /* aprov */
                            crawcrd.insitcrd = 2             OR /* solic */
                            crawcrd.insitcrd = 3             OR /* liberado */
                            crawcrd.insitcrd = 4 )           AND /* em uso */
                           (crawcrd.cdadmcrd < 10 OR crawcrd.cdadmcrd > 80) 
                            NO-LOCK:
            
        FIND craptlc WHERE  craptlc.cdcooper = crawcrd.cdcooper  AND
                            craptlc.cdadmcrd = crawcrd.cdadmcrd  AND
                            craptlc.dddebito = 0                 AND
                            craptlc.tpcartao = crawcrd.tpcartao  AND
                            craptlc.cdlimcrd = crawcrd.cdlimcrd  NO-LOCK NO-ERROR.

        IF   NOT AVAILABLE craptlc   THEN
             DO:
                 ASSIGN aux_cdcritic = 532
                        aux_dscritic = "".

                 RUN gera_erro (INPUT par_cdcooper,
                                INPUT 0,
                                INPUT 0,
                                INPUT 1,            /** Sequencia **/
                                INPUT aux_cdcritic,
                                INPUT-OUTPUT aux_dscritic).        


                 RETURN "NOK".

             END.

        ASSIGN aux_vllimcrd = aux_vllimcrd + craptlc.vllimcrd.

    END.

    IF  par_vllimglb < aux_vllimcrd THEN
        DO:

            ASSIGN aux_cdcritic = 0
                   aux_dscritic = "Valor total de limites desta conta excede o limite informado.".

            RUN gera_erro (INPUT par_cdcooper,
                           INPUT 0,
                           INPUT 0,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).        
           
            
            RETURN "NOK".

        END.

    IF  par_nrcpfpri = 0 AND
        par_nrcpfseg = 0 AND
        par_nrcpfter = 0 THEN
        DO:

            ASSIGN aux_cdcritic = 0
                   aux_dscritic = "Informe um representante.".

            RUN gera_erro (INPUT par_cdcooper,
                           INPUT 0,
                           INPUT 0,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).

            RETURN "NOK".

        END.

    IF  (par_nrcpfpri <> 0            AND
         par_nrcpfpri = par_nrcpfseg) OR
        (par_nrcpfpri <> 0            AND
         par_nrcpfpri = par_nrcpfter) OR
        (par_nrcpfseg <> 0            AND
         par_nrcpfseg = par_nrcpfter) THEN
        DO:

            ASSIGN aux_cdcritic = 932
                   aux_dscritic = "".

            RUN gera_erro (INPUT par_cdcooper,
                           INPUT 0,
                           INPUT 0,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
    
            RETURN "NOK".

        END.

    IF  par_nrcpfpri <> 0 THEN
        IF  NOT f_valida_assoc(par_cdcooper,
                               STRING(par_nrcpfpri)) THEN
            DO:
    
                IF  NOT ValidaCpfCnpj(par_cdcooper,
                                      STRING(par_nrcpfpri),
                                      OUTPUT aux_dscritic) THEN 
                    RETURN "NOK".
    
               IF  par_nmpespri = "" OR
                   par_nmpespri = ? THEN 
                   DO:
    
                      ASSIGN aux_cdcritic = 0
                             aux_dscritic = "Informe o nome do primeiro representante.".
    
                      RUN gera_erro (INPUT par_cdcooper,
                                     INPUT 0,
                                     INPUT 0,
                                     INPUT 1,            /** Sequencia **/
                                     INPUT aux_cdcritic,
                                     INPUT-OUTPUT aux_dscritic).
            
                      RETURN "NOK".
    
                   END.
    
    
               IF  par_dtnaspri = ? THEN
                   DO:
    
                      ASSIGN aux_cdcritic = 0
                             aux_dscritic = "Informe a data de nascimento do primeiro representante.".
    
                      RUN gera_erro (INPUT par_cdcooper,
                                     INPUT 0,
                                     INPUT 0,
                                     INPUT 1,            /** Sequencia **/
                                     INPUT aux_cdcritic,
                                     INPUT-OUTPUT aux_dscritic).
    
                      RETURN "NOK".
    
    
                   END.
               
            END.


    IF  par_nrcpfseg <> 0 THEN
        IF  NOT f_valida_assoc(par_cdcooper,
                               STRING(par_nrcpfseg)) THEN
            DO:
    
                IF  NOT ValidaCpfCnpj(par_cdcooper,
                                      STRING(par_nrcpfseg),
                                      OUTPUT aux_dscritic) THEN 
                    RETURN "NOK".
    
                IF  par_nmpesseg = "" OR
                    par_nmpesseg = ? THEN 
                    DO:
    
                        ASSIGN aux_cdcritic = 0
                               aux_dscritic = "Informe o nome do segundo representante.".
    
                        RUN gera_erro (INPUT par_cdcooper,
                                       INPUT 0,
                                       INPUT 0,
                                       INPUT 1,            /** Sequencia **/
                                       INPUT aux_cdcritic,
                                       INPUT-OUTPUT aux_dscritic).
    
                        RETURN "NOK".
    
                    END.
    
    
                IF  par_dtnasseg = ? THEN
                    DO:
    
                        ASSIGN aux_cdcritic = 0
                               aux_dscritic = "Informe a data de nascimento do segundo representante.".
    
                        RUN gera_erro (INPUT par_cdcooper,
                                       INPUT 0,
                                       INPUT 0,
                                       INPUT 1,            /** Sequencia **/
                                       INPUT aux_cdcritic,
                                       INPUT-OUTPUT aux_dscritic).
    
                        RETURN "NOK".
    
    
                    END.
    
            END.

    IF  par_nrcpfter <> 0 THEN
        IF  NOT f_valida_assoc(par_cdcooper,
                               STRING(par_nrcpfter)) THEN
            DO:
    
                IF  NOT ValidaCpfCnpj(par_cdcooper,
                                      STRING(par_nrcpfter),
                                      OUTPUT aux_dscritic) THEN 
                    RETURN "NOK".
    
                IF  par_nmpester = "" OR
                    par_nmpester = ? THEN 
                    DO:
    
                        ASSIGN aux_cdcritic = 0
                               aux_dscritic = "Informe o nome do terceiro representante.".
    
                        RUN gera_erro (INPUT par_cdcooper,
                                       INPUT 0,
                                       INPUT 0,
                                       INPUT 1,            /** Sequencia **/
                                       INPUT aux_cdcritic,
                                       INPUT-OUTPUT aux_dscritic).
    
                        RETURN "NOK".
    
                    END.
    
    
                IF  par_dtnaster = ? THEN
                    DO:
    
                        ASSIGN aux_cdcritic = 0
                               aux_dscritic = "Informe a data de nascimento do terceiro representante.".
    
                        RUN gera_erro (INPUT par_cdcooper,
                                       INPUT 0,
                                       INPUT 0,
                                       INPUT 1,            /** Sequencia **/
                                       INPUT aux_cdcritic,
                                       INPUT-OUTPUT aux_dscritic).
    
                        RETURN "NOK".
    
    
                    END.
    
            END.

    RETURN "OK".

END PROCEDURE.

PROCEDURE gera_impressao_proposta_cartao:

    DEF  INPUT PARAM par_cdcooper AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_idorigem AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_cdoperad AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nmdatela AS CHAR                           NO-UNDO.    
    DEF  INPUT PARAM par_nrdconta AS INTE                           NO-UNDO.    
    DEF  INPUT PARAM par_dtmvtolt AS DATE                           NO-UNDO.
    DEF  INPUT PARAM par_dtmvtopr AS DATE                           NO-UNDO.
    DEF  INPUT PARAM par_inproces AS INTE                           NO-UNDO.       
    DEF  INPUT PARAM par_nrctrcrd AS INTE                           NO-UNDO.    
    DEF  INPUT PARAM par_dsiduser AS CHAR                           NO-UNDO.    

    DEF OUTPUT PARAM par_nmarqimp AS CHAR                           NO-UNDO.
    DEF OUTPUT PARAM par_nmarqpdf AS CHAR                           NO-UNDO.

    DEF OUTPUT PARAM TABLE FOR tt-erro.
 
    DEF   VAR hb1wgen0028i     AS HANDLE                            NO-UNDO.
                                                     
    RUN sistema/generico/procedures/b1wgen0028i.p 
        PERSISTENT SET hb1wgen0028i.
    
    IF  NOT VALID-HANDLE(hb1wgen0028i)  THEN
        DO:
           ASSIGN aux_cdcritic = 0 
                  aux_dscritic = "Handle invalido para BO " +
                                 "b1wgen0028i.".
           
           RUN gera_erro (INPUT par_cdcooper,
                          INPUT 0,
                          INPUT 0,
                          INPUT 1,            /** Sequencia **/
                          INPUT aux_cdcritic,
                          INPUT-OUTPUT aux_dscritic).


           RETURN "NOK".

        END.

    /* isolando a montagem do arquivo de impressao em outro fonte */
    RUN gera_impressao_proposta_cartao IN hb1wgen0028i ( INPUT par_cdcooper,
                                                         INPUT par_idorigem,
                                                         INPUT par_cdoperad,
                                                         INPUT par_nmdatela,
                                                         INPUT par_nrdconta,
                                                         INPUT par_dtmvtolt,
                                                         INPUT par_dtmvtopr,
                                                         INPUT par_inproces,
                                                         INPUT par_nrctrcrd,
                                                         INPUT par_dsiduser,
                                                        OUTPUT par_nmarqimp,
                                                        OUTPUT par_nmarqpdf,
                                                        OUTPUT TABLE tt-erro).


    IF  RETURN-VALUE = "NOK" THEN
        DO:
            FIND FIRST tt-erro NO-LOCK NO-ERROR.
            IF  AVAIL tt-erro THEN 
                DO:
                    DELETE PROCEDURE hb1wgen0028i.           
                    RETURN "NOK".
                END.

        END.
    
        
    DELETE PROCEDURE hb1wgen0028i.
    
    RETURN "OK".

END PROCEDURE.

PROCEDURE gera_impressao_contrato_cartao:

    DEF  INPUT PARAM par_cdcooper AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_idorigem AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_cdoperad AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nmdatela AS CHAR                           NO-UNDO.    
    DEF  INPUT PARAM par_nrdconta AS INTE                           NO-UNDO.    
    DEF  INPUT PARAM par_dtmvtolt AS DATE                           NO-UNDO.
    DEF  INPUT PARAM par_dtmvtopr AS DATE                           NO-UNDO.
    DEF  INPUT PARAM par_inproces AS INTE                           NO-UNDO.       
    DEF  INPUT PARAM par_nrctrcrd AS INTE                           NO-UNDO.    
    DEF  INPUT PARAM par_dsiduser AS CHAR                           NO-UNDO.    
    DEF  INPUT PARAM par_flgimp2v AS LOGI                           NO-UNDO.

    DEF OUTPUT PARAM par_nmarqimp AS CHAR                           NO-UNDO.
    DEF OUTPUT PARAM par_nmarqpdf AS CHAR                           NO-UNDO.

    DEF OUTPUT PARAM TABLE FOR tt-erro.

    DEF   VAR hb1wgen0028i     AS HANDLE                            NO-UNDO.

    RUN sistema/generico/procedures/b1wgen0028i.p 
        PERSISTENT SET hb1wgen0028i.
    
    IF  NOT VALID-HANDLE(hb1wgen0028i)  THEN
        DO:
           ASSIGN aux_cdcritic = 0 
                  aux_dscritic = "Handle invalido para BO " +
                                 "b1wgen0028i.".
           
           RUN gera_erro (INPUT par_cdcooper,
                          INPUT 0,
                          INPUT 0,
                          INPUT 1,            /** Sequencia **/
                          INPUT aux_cdcritic,
                          INPUT-OUTPUT aux_dscritic).


           RETURN "NOK".

        END.

    /* isolando a montagem do arquivo de impressao em outro fonte */
    RUN gera_impressao_contrato_cartao IN hb1wgen0028i ( INPUT par_cdcooper,
                                                         INPUT par_idorigem,
                                                         INPUT par_cdoperad,
                                                         INPUT par_nmdatela,
                                                         INPUT par_nrdconta,
                                                         INPUT par_dtmvtolt,
                                                         INPUT par_dtmvtopr,
                                                         INPUT par_inproces,
                                                         INPUT par_nrctrcrd,
                                                         INPUT par_dsiduser,
                                                         INPUT par_flgimp2v,
                                                        OUTPUT par_nmarqimp,
                                                        OUTPUT par_nmarqpdf,
                                                        OUTPUT TABLE tt-erro).
   
    IF  RETURN-VALUE = "NOK" THEN
        DO:
            FIND FIRST tt-erro NO-LOCK NO-ERROR.
            IF  AVAIL tt-erro THEN 
                DO:
                    DELETE PROCEDURE hb1wgen0028i.           
                    
                    RETURN "NOK".
                END.

        END.

    DELETE PROCEDURE hb1wgen0028i.
    
    RETURN "OK".

END PROCEDURE.

PROCEDURE gera_impressao_promissoria:

    DEF INPUT  PARAM par_cdcooper AS INTE                                NO-UNDO.
    DEF INPUT  PARAM TABLE FOR tt_dados_promissoria_imp.
    DEF OUTPUT PARAM TABLE FOR tt-erro.

    DEF   VAR hb1wgen0028i     AS HANDLE                            NO-UNDO.

    RUN sistema/generico/procedures/b1wgen0028i.p 
        PERSISTENT SET hb1wgen0028i.

    IF  NOT VALID-HANDLE(hb1wgen0028i)  THEN
        DO:
           ASSIGN aux_cdcritic = 0 
                  aux_dscritic = "Handle invalido para BO " +
                                 "b1wgen0028i.".
           
           RUN gera_erro (INPUT par_cdcooper,
                          INPUT 0,
                          INPUT 0,
                          INPUT 1,            /** Sequencia **/
                          INPUT aux_cdcritic,
                          INPUT-OUTPUT aux_dscritic).


           RETURN "NOK".

        END.

    /* isolando a montagem do arquivo de impressao em outro fonte */
    RUN gera_impressao_promissoria IN hb1wgen0028i ( INPUT par_cdcooper,
                                                     INPUT TABLE tt_dados_promissoria_imp,
                                                    OUTPUT TABLE tt-erro).

    IF  RETURN-VALUE = "NOK" THEN
        DO:
            FIND FIRST tt-erro NO-LOCK NO-ERROR.
            IF  AVAIL tt-erro THEN 
                DO:
                    DELETE PROCEDURE hb1wgen0028i.           
                    RETURN "NOK".
                END.

        END.

    DELETE PROCEDURE hb1wgen0028i.

END PROCEDURE.

PROCEDURE entrega_cartao_pj:

    DEF  INPUT PARAM par_cdcooper AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_cdagenci AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrdcaixa AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_cdoperad AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nmdatela AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_idorigem AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrdconta AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_idseqttl AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_dtmvtolt AS DATE                           NO-UNDO.
    DEF  INPUT PARAM par_nrctrcrd AS INTE                           NO-UNDO.
    
    DEF OUTPUT PARAM TABLE FOR tt-termo-entreg-pj.
    DEF OUTPUT PARAM TABLE FOR tt-erro.

    DEF VAR aux_dsmesref AS CHAR INIT
                         ["Janeiro,Fevereiro,Marco,Abril,Maio,Junho,
                          Julho,Agosto,Setembro,Outubro,Novembro,Dezembro"]
                                                                    NO-UNDO.
    DEF VAR aux_dslinha1 AS CHAR                                    NO-UNDO.
    DEF VAR aux_dslinha2 AS CHAR                                    NO-UNDO.
    DEF VAR aux_dslinha3 AS CHAR                                    NO-UNDO.   
    DEF VAR aux_nmoperad AS CHAR                                    NO-UNDO.
    DEF VAR aux_nmrecop1 AS CHAR                                    NO-UNDO.
    DEF VAR aux_nmrecop2 AS CHAR                                    NO-UNDO.
    DEF VAR aux_dsemsctr AS CHAR                                    NO-UNDO.
    DEF VAR aux_dsmotivo AS CHAR                                    NO-UNDO.

    DEF VAR h-b1wgen9999 AS HANDLE                                  NO-UNDO.

    DEF  BUFFER crabass FOR crapass.
    DEF  BUFFER crabncp FOR crapncp.
    
    EMPTY TEMP-TABLE tt-termo-entreg-pj.
    EMPTY TEMP-TABLE tt-erro.
    
    FIND crapcop WHERE crapcop.cdcooper = par_cdcooper NO-LOCK NO-ERROR.

    IF   NOT AVAILABLE crapcop THEN
         DO:
             ASSIGN aux_cdcritic = 651
                    aux_dscritic = "".
                   
             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                       
             RETURN "NOK".
         END.
         
    ASSIGN aux_dslinha1 = "CNPJ " + 
                           STRING(STRING(crapcop.nrdocnpj,"99999999999999"),
                                         "xx.xxx.xxx/xxxx-xx") +
                          "  FONE: " + crapcop.nrtelvoz
                    
           aux_dslinha2 = crapcop.dsendcop + ", " + 
                          STRING(crapcop.nrendcop,"zz,zz9") + " - CP " +
                          STRING(crapcop.nrcxapst,"zz,zz9")
                    
           aux_dslinha3 = STRING(crapcop.nrcepend,"zz,zzz,zzz") + " - " +
                          crapcop.nmcidade + " - " + crapcop.cdufdcop. 

 
    FIND FIRST crawcrd WHERE crawcrd.cdcooper = par_cdcooper AND
                             crawcrd.nrdconta = par_nrdconta AND
                             crawcrd.nrctrcrd = par_nrctrcrd     
                             NO-LOCK NO-ERROR.

    IF   NOT AVAILABLE crawcrd THEN
         DO:
             ASSIGN aux_cdcritic = 535
                    aux_dscritic = "".
                   
             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                       
             RETURN "NOK".
         END.

    
    FOR FIRST crapass FIELDS(nrdconta nmprimtl nrcpfcgc)
                     WHERE crapass.cdcooper = par_cdcooper  AND
                       crapass.nrdconta = par_nrdconta  NO-LOCK: 
    END.
                   
    IF   NOT AVAILABLE crapass THEN
         DO:
             ASSIGN aux_cdcritic = 9
                    aux_dscritic = "".

             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).                
                
             RETURN "NOK".
         END.
    
    FIND crapope WHERE crapope.cdcooper = par_cdcooper     AND
                       crapope.cdoperad = crawcrd.cdoperad 
                       NO-LOCK NO-ERROR.

    IF   NOT AVAILABLE crapope THEN
         aux_nmoperad = STRING(crawcrd.cdoperad,"x(10)") +
                        " - Nao cadastrado.".
    ELSE
         aux_nmoperad = crapope.nmoperad.    
    
    RUN sistema/generico/procedures/b1wgen9999.p PERSISTENT
        SET h-b1wgen9999.
        
    IF  NOT VALID-HANDLE(h-b1wgen9999)  THEN
        DO:
            ASSIGN aux_cdcritic = 0
                   aux_dscritic = "Handle invalido para BO b1wgen9999.".
                   
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                       
            RETURN "NOK".
        END.
    
    RUN divide-nome-coop IN h-b1wgen9999 (INPUT crapcop.nmextcop,
                                          OUTPUT aux_nmrecop1,
                                          OUTPUT aux_nmrecop2).         

    DELETE PROCEDURE h-b1wgen9999.
    
    ASSIGN aux_dsemsctr = TRIM(crapcop.nmcidade) + " " + STRING(crapcop.cdufdcop,"!(2)") + ", " +
                          STRING(DAY(par_dtmvtolt),"99") + " de " +
                          TRIM(ENTRY(MONTH(par_dtmvtolt),aux_dsmesref)) + " de " +
                          STRING(YEAR(par_dtmvtolt)).

    FIND crapenc WHERE crapenc.cdcooper = par_cdcooper     AND
                       crapenc.nrdconta = crapass.nrdconta AND
                       crapenc.idseqttl = 1                AND
                       crapenc.cdseqinc = 1 
                       NO-LOCK NO-ERROR.

    FIND crapcop WHERE crapcop.cdcooper = par_cdcooper NO-LOCK NO-ERROR.

    IF crawcrd.cdmotivo = 1 THEN
        ASSIGN aux_dsmotivo = "Defeito no cartao".

    IF crawcrd.cdmotivo = 5 THEN
        ASSIGN aux_dsmotivo = "Mudanca de nome".
    
    IF crawcrd.cdmotivo = 7 THEN
        ASSIGN aux_dsmotivo = "Alteracao na Data de Vencimento".
    
    CREATE tt-termo-entreg-pj.
    ASSIGN tt-termo-entreg-pj.nome     = crapass.nmprimtl
           tt-termo-entreg-pj.cnpj     = crapass.nrcpfcgc
           tt-termo-entreg-pj.nrrepent = crawcrd.nrrepent
           tt-termo-entreg-pj.nrcpfcgc = crapass.nrcpfcgc
           tt-termo-entreg-pj.nmrescop = crapcop.nmrescop
           tt-termo-entreg-pj.nmextcop = crapcop.nmextcop
           tt-termo-entreg-pj.nrdocnpj = crapcop.nrdocnpj
           tt-termo-entreg-pj.dsendere = crapenc.dsendere
           tt-termo-entreg-pj.nrendere = crapenc.nrendere
           tt-termo-entreg-pj.nmbairro = crapenc.nmbairro
           tt-termo-entreg-pj.nmcidade = crapenc.nmcidade
           tt-termo-entreg-pj.cdufende = crapenc.cdufende
           tt-termo-entreg-pj.nrcepend = crapenc.nrcepend
           tt-termo-entreg-pj.nrcrcard = crawcrd.nrcrcard  
           tt-termo-entreg-pj.nrcpftit = crawcrd.nrcpftit  
           tt-termo-entreg-pj.nmtitcrd = crawcrd.nmtitcrd
           tt-termo-entreg-pj.nmprimtl = crapass.nmprimtl
           tt-termo-entreg-pj.dsemsctr = aux_dsemsctr
           tt-termo-entreg-pj.dsmotivo = aux_dsmotivo
           tt-termo-entreg-pj.cdcooper = crapcop.cdcooper.
    
    FOR FIRST crabass FIELDS(nmprimtl)
         WHERE crabass.cdcooper = par_cdcooper     AND 
               crabass.nrcpfcgc = crawcrd.nrrepent NO-LOCK: END.
    IF   AVAIL crabass THEN 
         DO:
            ASSIGN tt-termo-entreg-pj.nrrepent = crawcrd.nrrepent
                   tt-termo-entreg-pj.nmrepsol = crabass.nmprimtl.
         END.
    ELSE DO:
            FIND FIRST crabncp
                 WHERE crabncp.nrdoccpf = crawcrd.nrrepent NO-LOCK NO-ERROR.
            IF   AVAIL crabncp THEN
                 DO:
                    ASSIGN tt-termo-entreg-pj.nrrepent = crawcrd.nrrepent
                           tt-termo-entreg-pj.nmrepsol = crabncp.nmpessoa.
                END.
            END.

    RETURN "OK".
    
END PROCEDURE.

PROCEDURE segunda_via_cartao_pj:

    DEF  INPUT PARAM par_cdcooper AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_cdagenci AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrdcaixa AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_cdoperad AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nmdatela AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_idorigem AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrdconta AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_idseqttl AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_dtmvtolt AS DATE                           NO-UNDO.
    DEF  INPUT PARAM par_nrctrcrd AS INTE                           NO-UNDO.
    
    DEF OUTPUT PARAM TABLE FOR tt-segvia-cartao.
    DEF OUTPUT PARAM TABLE FOR tt-erro.
        
    DEF VAR aux_dsmesref AS CHAR INIT
                         ["Janeiro,Fevereiro,Marco,Abril,Maio,Junho,
                          Julho,Agosto,Setembro,Outubro,Novembro,Dezembro"]
                                                                    NO-UNDO.
    DEF VAR aux_dslinha1 AS CHAR                                    NO-UNDO.
    DEF VAR aux_dslinha2 AS CHAR                                    NO-UNDO.
    DEF VAR aux_dslinha3 AS CHAR                                    NO-UNDO.   
    DEF VAR aux_nmoperad AS CHAR                                    NO-UNDO.
    DEF VAR aux_nmrecop1 AS CHAR                                    NO-UNDO.
    DEF VAR aux_nmrecop2 AS CHAR                                    NO-UNDO.
    DEF VAR aux_dsemsctr AS CHAR                                    NO-UNDO.
    DEF VAR aux_dsmotivo AS CHAR                                    NO-UNDO.

    DEF VAR h-b1wgen9999 AS HANDLE                                  NO-UNDO.

    DEF  BUFFER crabass FOR crapass.
    DEF  BUFFER crabncp FOR crapncp.
    
    EMPTY TEMP-TABLE tt-segvia-cartao.
    EMPTY TEMP-TABLE tt-erro.
    
    FIND crapcop WHERE crapcop.cdcooper = par_cdcooper NO-LOCK NO-ERROR.

    IF   NOT AVAILABLE crapcop THEN
         DO:
             ASSIGN aux_cdcritic = 651
                    aux_dscritic = "".
                   
             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                       
             RETURN "NOK".
         END.
         
    ASSIGN aux_dslinha1 = "CNPJ " + 
                           STRING(STRING(crapcop.nrdocnpj,"99999999999999"),
                                         "xx.xxx.xxx/xxxx-xx") +
                          "  FONE: " + crapcop.nrtelvoz
                    
           aux_dslinha2 = crapcop.dsendcop + ", " + 
                          STRING(crapcop.nrendcop,"zz,zz9") + " - CP " +
                          STRING(crapcop.nrcxapst,"zz,zz9")
                    
           aux_dslinha3 = STRING(crapcop.nrcepend,"zz,zzz,zzz") + " - " +
                          crapcop.nmcidade + " - " + crapcop.cdufdcop. 

 
    FIND FIRST crawcrd WHERE crawcrd.cdcooper = par_cdcooper AND
                             crawcrd.nrdconta = par_nrdconta AND
                             crawcrd.nrctrcrd = par_nrctrcrd     
                             NO-LOCK NO-ERROR.

    IF   NOT AVAILABLE crawcrd THEN
         DO:
             ASSIGN aux_cdcritic = 535
                    aux_dscritic = "".
                   
             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                       
             RETURN "NOK".
         END.

    
    FOR FIRST crapass FIELDS(nrcpfcgc nrdconta nmprimtl)
                     WHERE crapass.cdcooper = par_cdcooper  AND
                       crapass.nrdconta = par_nrdconta  NO-LOCK:
    END.
                   
    IF   NOT AVAILABLE crapass THEN
         DO:
             ASSIGN aux_cdcritic = 9
                    aux_dscritic = "".

             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).                
                
             RETURN "NOK".
         END.
    
    FIND crapope WHERE crapope.cdcooper = par_cdcooper     AND
                       crapope.cdoperad = crawcrd.cdoperad 
                       NO-LOCK NO-ERROR.

    IF   NOT AVAILABLE crapope THEN
         aux_nmoperad = STRING(crawcrd.cdoperad,"x(10)") +
                        " - Nao cadastrado.".
    ELSE
         aux_nmoperad = crapope.nmoperad.    
    
    RUN sistema/generico/procedures/b1wgen9999.p PERSISTENT
        SET h-b1wgen9999.
        
    IF  NOT VALID-HANDLE(h-b1wgen9999)  THEN
        DO:
            ASSIGN aux_cdcritic = 0
                   aux_dscritic = "Handle invalido para BO b1wgen9999.".
                   
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                       
            RETURN "NOK".
        END.
    
    RUN divide-nome-coop IN h-b1wgen9999 (INPUT crapcop.nmextcop,
                                          OUTPUT aux_nmrecop1,
                                          OUTPUT aux_nmrecop2).         

    DELETE PROCEDURE h-b1wgen9999.
    
    ASSIGN aux_dsemsctr = TRIM(crapcop.nmcidade) + " " + STRING(crapcop.cdufdcop,"!(2)") + ", " +
                          STRING(DAY(par_dtmvtolt),"99") + " de " +
                          TRIM(ENTRY(MONTH(par_dtmvtolt),aux_dsmesref)) + " de " +
                          STRING(YEAR(par_dtmvtolt)).

    FIND crapenc WHERE crapenc.cdcooper = par_cdcooper     AND
                       crapenc.nrdconta = crapass.nrdconta AND
                       crapenc.idseqttl = 1                AND
                       crapenc.cdseqinc = 1 
                       NO-LOCK NO-ERROR.

    FIND crapcop WHERE crapcop.cdcooper = par_cdcooper NO-LOCK NO-ERROR.

    IF crawcrd.cdmotivo = 1 THEN
        ASSIGN aux_dsmotivo = "Defeito no cartao".

    IF crawcrd.cdmotivo = 5 THEN
        ASSIGN aux_dsmotivo = "Mudanca de nome".
    
    IF crawcrd.cdmotivo = 7 THEN
        ASSIGN aux_dsmotivo = "Alteracao na Data de Vencimento".

    
    CREATE tt-segvia-cartao.
    ASSIGN tt-segvia-cartao.nome     = crapass.nmprimtl
           tt-segvia-cartao.cnpj     = crapass.nrcpfcgc
           tt-segvia-cartao.nrrepent = crawcrd.nrrepent
           tt-segvia-cartao.nrcpfcgc = crapass.nrcpfcgc
           tt-segvia-cartao.nmrescop = crapcop.nmrescop
           tt-segvia-cartao.nmextcop = crapcop.nmextcop
           tt-segvia-cartao.nrdocnpj = crapcop.nrdocnpj
           tt-segvia-cartao.dsendere = crapenc.dsendere
           tt-segvia-cartao.nrendere = crapenc.nrendere
           tt-segvia-cartao.nmbairro = crapenc.nmbairro
           tt-segvia-cartao.nmcidade = crapenc.nmcidade
           tt-segvia-cartao.cdufende = crapenc.cdufende
           tt-segvia-cartao.nrcepend = crapenc.nrcepend
           tt-segvia-cartao.nrcrcard = crawcrd.nrcrcard  
           tt-segvia-cartao.nrcpftit = crawcrd.nrcpftit  
           tt-segvia-cartao.nmtitcrd = crawcrd.nmtitcrd
           tt-segvia-cartao.nmprimtl = crapass.nmprimtl
           tt-segvia-cartao.dsemsctr = aux_dsemsctr
           tt-segvia-cartao.dsmotivo = aux_dsmotivo
           tt-segvia-cartao.nrrepcar = crawcrd.nrrepcar
           tt-segvia-cartao.cdcooper = crapcop.cdcooper.
    
    FOR FIRST crabass FIELDS(nmprimtl)
         WHERE crabass.cdcooper = par_cdcooper     AND 
               crabass.nrcpfcgc = crawcrd.nrrepcar NO-LOCK: END.
    IF   AVAIL crabass THEN 
         DO:
            ASSIGN tt-segvia-cartao.dsrepcar = UPPER(crabass.nmprimtl).
         END.
    ELSE DO:
            FIND FIRST crabncp
                 WHERE crabncp.nrdoccpf = crawcrd.nrrepcar NO-LOCK NO-ERROR.
            IF   AVAIL crabncp THEN
                 DO:
                    ASSIGN tt-segvia-cartao.dsrepcar = UPPER(crabncp.nmpessoa).
                END.
            END.

    RETURN "OK".
    
END PROCEDURE.

PROCEDURE segunda_via_senha_cartao_pj:

    DEF  INPUT PARAM par_cdcooper AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_cdagenci AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrdcaixa AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_cdoperad AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nmdatela AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_idorigem AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrdconta AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_idseqttl AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_dtmvtolt AS DATE                           NO-UNDO.
    DEF  INPUT PARAM par_nrctrcrd AS INTE                           NO-UNDO.
    
    DEF OUTPUT PARAM TABLE FOR tt-segviasen-cartao.
    DEF OUTPUT PARAM TABLE FOR tt-erro.
        
    DEF VAR aux_dsmesref AS CHAR INIT
                         ["Janeiro,Fevereiro,Marco,Abril,Maio,Junho,
                          Julho,Agosto,Setembro,Outubro,Novembro,Dezembro"]
                                                                    NO-UNDO.
    DEF VAR aux_dslinha1 AS CHAR                                    NO-UNDO.
    DEF VAR aux_dslinha2 AS CHAR                                    NO-UNDO.
    DEF VAR aux_dslinha3 AS CHAR                                    NO-UNDO.   
    DEF VAR aux_nmoperad AS CHAR                                    NO-UNDO.
    DEF VAR aux_nmrecop1 AS CHAR                                    NO-UNDO.
    DEF VAR aux_nmrecop2 AS CHAR                                    NO-UNDO.
    DEF VAR aux_dsemsctr AS CHAR                                    NO-UNDO.
    DEF VAR aux_dsmotivo AS CHAR                                    NO-UNDO.

    DEF VAR h-b1wgen9999 AS HANDLE                                  NO-UNDO.

    DEF  BUFFER crabass FOR crapass.
    DEF  BUFFER crabncp FOR crapncp.
    
    EMPTY TEMP-TABLE tt-segviasen-cartao.
    EMPTY TEMP-TABLE tt-erro.
    
    FIND crapcop WHERE crapcop.cdcooper = par_cdcooper NO-LOCK NO-ERROR.

    IF   NOT AVAILABLE crapcop THEN
         DO:
             ASSIGN aux_cdcritic = 651
                    aux_dscritic = "".
                   
             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                       
             RETURN "NOK".
         END.
         
    ASSIGN aux_dslinha1 = "CNPJ " + 
                           STRING(STRING(crapcop.nrdocnpj,"99999999999999"),
                                         "xx.xxx.xxx/xxxx-xx") +
                          "  FONE: " + crapcop.nrtelvoz
                    
           aux_dslinha2 = crapcop.dsendcop + ", " + 
                          STRING(crapcop.nrendcop,"zz,zz9") + " - CP " +
                          STRING(crapcop.nrcxapst,"zz,zz9")
                    
           aux_dslinha3 = STRING(crapcop.nrcepend,"zz,zzz,zzz") + " - " +
                          crapcop.nmcidade + " - " + crapcop.cdufdcop. 

 
    FIND FIRST crawcrd WHERE crawcrd.cdcooper = par_cdcooper AND
                             crawcrd.nrdconta = par_nrdconta AND
                             crawcrd.nrctrcrd = par_nrctrcrd     
                             NO-LOCK NO-ERROR.

    IF   NOT AVAILABLE crawcrd THEN
         DO:
             ASSIGN aux_cdcritic = 535
                    aux_dscritic = "".
                   
             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                       
             RETURN "NOK".
         END.

    
    FOR FIRST crapass FIELDS(nrcpfcgc nrdconta nmprimtl)
                     WHERE crapass.cdcooper = par_cdcooper  AND
                       crapass.nrdconta = par_nrdconta  NO-LOCK:
    END.
                   
    IF   NOT AVAILABLE crapass THEN
         DO:
             ASSIGN aux_cdcritic = 9
                    aux_dscritic = "".

             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).                
                
             RETURN "NOK".
         END.
    
    FIND crapope WHERE crapope.cdcooper = par_cdcooper     AND
                       crapope.cdoperad = crawcrd.cdoperad 
                       NO-LOCK NO-ERROR.

    IF   NOT AVAILABLE crapope THEN
         aux_nmoperad = STRING(crawcrd.cdoperad,"x(10)") +
                        " - Nao cadastrado.".
    ELSE
         aux_nmoperad = crapope.nmoperad.    
    
    RUN sistema/generico/procedures/b1wgen9999.p PERSISTENT
        SET h-b1wgen9999.
        
    IF  NOT VALID-HANDLE(h-b1wgen9999)  THEN
        DO:
            ASSIGN aux_cdcritic = 0
                   aux_dscritic = "Handle invalido para BO b1wgen9999.".
                   
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                       
            RETURN "NOK".
        END.
    
    RUN divide-nome-coop IN h-b1wgen9999 (INPUT crapcop.nmextcop,
                                          OUTPUT aux_nmrecop1,
                                          OUTPUT aux_nmrecop2).         

    DELETE PROCEDURE h-b1wgen9999.
    
    ASSIGN aux_dsemsctr = TRIM(crapcop.nmcidade) + " " + STRING(crapcop.cdufdcop,"!(2)") + ", " +
                          STRING(DAY(par_dtmvtolt),"99") + " de " +
                          TRIM(ENTRY(MONTH(par_dtmvtolt),aux_dsmesref)) + " de " +
                          STRING(YEAR(par_dtmvtolt)).

    FIND crapenc WHERE crapenc.cdcooper = par_cdcooper     AND
                       crapenc.nrdconta = crapass.nrdconta AND
                       crapenc.idseqttl = 1                AND
                       crapenc.cdseqinc = 1 
                       NO-LOCK NO-ERROR.

    FIND crapcop WHERE crapcop.cdcooper = par_cdcooper NO-LOCK NO-ERROR.

    IF crawcrd.cdmotivo = 1 THEN
        ASSIGN aux_dsmotivo = "Defeito no cartao".

    IF crawcrd.cdmotivo = 5 THEN
        ASSIGN aux_dsmotivo = "Mudanca de nome".
    
    CREATE tt-segviasen-cartao.
    ASSIGN tt-segviasen-cartao.nome     = crapass.nmprimtl
           tt-segviasen-cartao.cnpj     = crapass.nrcpfcgc
           tt-segviasen-cartao.nrrepent = crawcrd.nrrepent
           tt-segviasen-cartao.nrcpfcgc = crapass.nrcpfcgc
           tt-segviasen-cartao.nmrescop = crapcop.nmrescop
           tt-segviasen-cartao.nmextcop = crapcop.nmextcop
           tt-segviasen-cartao.nrdocnpj = crapcop.nrdocnpj
           tt-segviasen-cartao.dsendere = crapenc.dsendere
           tt-segviasen-cartao.nrendere = crapenc.nrendere
           tt-segviasen-cartao.nmbairro = crapenc.nmbairro
           tt-segviasen-cartao.nmcidade = crapenc.nmcidade
           tt-segviasen-cartao.cdufende = crapenc.cdufende
           tt-segviasen-cartao.nrcepend = crapenc.nrcepend
           tt-segviasen-cartao.nrcrcard = crawcrd.nrcrcard  
           tt-segviasen-cartao.nrcpftit = crawcrd.nrcpftit  
           tt-segviasen-cartao.nmtitcrd = crawcrd.nmtitcrd
           tt-segviasen-cartao.nmprimtl = crapass.nmprimtl
           tt-segviasen-cartao.dsemsctr = aux_dsemsctr
           tt-segviasen-cartao.dsmotivo = aux_dsmotivo
           tt-segviasen-cartao.nrrepsen = crawcrd.nrrepsen
           tt-segviasen-cartao.cdcooper = crapcop.cdcooper.
    
    FOR FIRST crabass FIELDS(nmprimtl)
         WHERE crabass.cdcooper = par_cdcooper     AND 
               crabass.nrcpfcgc = crawcrd.nrrepsen NO-LOCK: END.
    IF   AVAIL crabass THEN 
         DO:
            ASSIGN tt-segviasen-cartao.dsrepsen = UPPER(crabass.nmprimtl).
         END.
    ELSE DO:
            FIND FIRST crabncp
                 WHERE crabncp.nrdoccpf = crawcrd.nrrepsen NO-LOCK NO-ERROR.
            IF   AVAIL crabncp THEN
                 DO:
                    ASSIGN tt-segviasen-cartao.dsrepsen = UPPER(crabncp.nmpessoa).
                END.
            END.

    RETURN "OK".
    
END PROCEDURE.

PROCEDURE cancela_cartao_pj:

    DEF  INPUT PARAM par_cdcooper AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_cdagenci AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrdcaixa AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_cdoperad AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nmdatela AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_idorigem AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrdconta AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_idseqttl AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_dtmvtolt AS DATE                           NO-UNDO.
    DEF  INPUT PARAM par_nrctrcrd AS INTE                           NO-UNDO.
    
    DEF OUTPUT PARAM TABLE FOR tt-termocan-cartao.
    DEF OUTPUT PARAM TABLE FOR tt-erro.
        
    DEF VAR aux_dsmesref AS CHAR INIT
                         ["Janeiro,Fevereiro,Marco,Abril,Maio,Junho,
                          Julho,Agosto,Setembro,Outubro,Novembro,Dezembro"]
                                                                    NO-UNDO.
    DEF VAR aux_dslinha1 AS CHAR                                    NO-UNDO.
    DEF VAR aux_dslinha2 AS CHAR                                    NO-UNDO.
    DEF VAR aux_dslinha3 AS CHAR                                    NO-UNDO.   
    DEF VAR aux_nmoperad AS CHAR                                    NO-UNDO.
    DEF VAR aux_nmrecop1 AS CHAR                                    NO-UNDO.
    DEF VAR aux_nmrecop2 AS CHAR                                    NO-UNDO.
    DEF VAR aux_dsemsctr AS CHAR                                    NO-UNDO.
    DEF VAR aux_dsmotivo AS CHAR                                    NO-UNDO.

    DEF VAR h-b1wgen9999 AS HANDLE                                  NO-UNDO.

    DEF  BUFFER crabass FOR crapass.
    DEF  BUFFER crabncp FOR crapncp.
    
    EMPTY TEMP-TABLE tt-termocan-cartao.
    EMPTY TEMP-TABLE tt-erro.
    
    FIND crapcop WHERE crapcop.cdcooper = par_cdcooper NO-LOCK NO-ERROR.

    IF   NOT AVAILABLE crapcop THEN
         DO:
             ASSIGN aux_cdcritic = 651
                    aux_dscritic = "".
                   
             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                       
             RETURN "NOK".
         END.
         
    ASSIGN aux_dslinha1 = "CNPJ " + 
                           STRING(STRING(crapcop.nrdocnpj,"99999999999999"),
                                         "xx.xxx.xxx/xxxx-xx") +
                          "  FONE: " + crapcop.nrtelvoz
                    
           aux_dslinha2 = crapcop.dsendcop + ", " + 
                          STRING(crapcop.nrendcop,"zz,zz9") + " - CP " +
                          STRING(crapcop.nrcxapst,"zz,zz9")
                    
           aux_dslinha3 = STRING(crapcop.nrcepend,"zz,zzz,zzz") + " - " +
                          crapcop.nmcidade + " - " + crapcop.cdufdcop. 

 
    FIND FIRST crawcrd WHERE crawcrd.cdcooper = par_cdcooper AND
                             crawcrd.nrdconta = par_nrdconta AND
                             crawcrd.nrctrcrd = par_nrctrcrd     
                             NO-LOCK NO-ERROR.

    IF   NOT AVAILABLE crawcrd THEN
         DO:
             ASSIGN aux_cdcritic = 535
                    aux_dscritic = "".
                   
             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                       
             RETURN "NOK".
         END.

     FIND crapadc WHERE crapadc.cdcooper = par_cdcooper     AND
                        crapadc.cdadmcrd = crawcrd.cdadmcrd NO-LOCK NO-ERROR.

     IF   NOT AVAILABLE crapadc THEN                         
          DO:
              ASSIGN aux_cdcritic = 605
                     aux_dscritic = "".

              RUN gera_erro (INPUT par_cdcooper,
                             INPUT par_cdagenci,
                             INPUT par_nrdcaixa,
                             INPUT 1,            /** Sequencia **/
                             INPUT aux_cdcritic,
                             INPUT-OUTPUT aux_dscritic).                

              RETURN "NOK".
          END.

    FOR FIRST crapass FIELDS(nrdconta nmprimtl nrcpfcgc)
                     WHERE crapass.cdcooper = par_cdcooper  AND
                       crapass.nrdconta = par_nrdconta  NO-LOCK:
    END.
                   
    IF   NOT AVAILABLE crapass THEN
         DO:
             ASSIGN aux_cdcritic = 9
                    aux_dscritic = "".

             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).                
                
             RETURN "NOK".
         END.
    
    FIND crapope WHERE crapope.cdcooper = par_cdcooper     AND
                       crapope.cdoperad = crawcrd.cdoperad 
                       NO-LOCK NO-ERROR.

    IF   NOT AVAILABLE crapope THEN
         aux_nmoperad = STRING(crawcrd.cdoperad,"x(10)") +
                        " - Nao cadastrado.".
    ELSE
         aux_nmoperad = crapope.nmoperad.    
    
    RUN sistema/generico/procedures/b1wgen9999.p PERSISTENT
        SET h-b1wgen9999.
        
    IF  NOT VALID-HANDLE(h-b1wgen9999)  THEN
        DO:
            ASSIGN aux_cdcritic = 0
                   aux_dscritic = "Handle invalido para BO b1wgen9999.".
                   
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                       
            RETURN "NOK".
        END.
    
    RUN divide-nome-coop IN h-b1wgen9999 (INPUT crapcop.nmextcop,
                                          OUTPUT aux_nmrecop1,
                                          OUTPUT aux_nmrecop2).         

    DELETE PROCEDURE h-b1wgen9999.
    
    ASSIGN aux_dsemsctr = TRIM(crapcop.nmcidade) + " " + STRING(crapcop.cdufdcop,"!(2)") + ", " +
                          STRING(DAY(par_dtmvtolt),"99") + " de " +
                          TRIM(ENTRY(MONTH(par_dtmvtolt),aux_dsmesref)) + " de " +
                          STRING(YEAR(par_dtmvtolt)).

    FIND crapenc WHERE crapenc.cdcooper = par_cdcooper     AND
                       crapenc.nrdconta = crapass.nrdconta AND
                       crapenc.idseqttl = 1                AND
                       crapenc.cdseqinc = 1 
                       NO-LOCK NO-ERROR.

    FIND crapcop WHERE crapcop.cdcooper = par_cdcooper NO-LOCK NO-ERROR.

    IF crawcrd.cdmotivo = 1 THEN
        ASSIGN aux_dsmotivo = "Defeito no cartao".

    IF crawcrd.cdmotivo = 5 THEN
        ASSIGN aux_dsmotivo = "Mudanca de nome".
    
    CREATE tt-termocan-cartao.
    ASSIGN tt-termocan-cartao.nome     = crapass.nmprimtl
           tt-termocan-cartao.cnpj     = crapass.nrcpfcgc
           tt-termocan-cartao.nrrepent = crawcrd.nrrepent
           tt-termocan-cartao.nrcpfcgc = crapass.nrcpfcgc
           tt-termocan-cartao.nmrescop = crapcop.nmrescop
           tt-termocan-cartao.nmextcop = crapcop.nmextcop
           tt-termocan-cartao.nrdocnpj = crapcop.nrdocnpj
           tt-termocan-cartao.dsendere = crapenc.dsendere
           tt-termocan-cartao.nrendere = crapenc.nrendere
           tt-termocan-cartao.nmbairro = crapenc.nmbairro
           tt-termocan-cartao.nmcidade = crapenc.nmcidade
           tt-termocan-cartao.cdufende = crapenc.cdufende
           tt-termocan-cartao.nrcepend = crapenc.nrcepend
           tt-termocan-cartao.nrcrcard = crawcrd.nrcrcard  
           tt-termocan-cartao.nrcpftit = crawcrd.nrcpftit  
           tt-termocan-cartao.nmtitcrd = crawcrd.nmtitcrd
           tt-termocan-cartao.nmprimtl = crapass.nmprimtl
           tt-termocan-cartao.dsemsctr = aux_dsemsctr
           tt-termocan-cartao.dsmotivo = aux_dsmotivo
           tt-termocan-cartao.nrrepcan = crawcrd.nrrepcan
           tt-termocan-cartao.cdcooper = crapcop.cdcooper
           tt-termocan-cartao.nmresadm = crapadc.nmresadm.
    
    FOR FIRST crabass FIELDS(nmprimtl)
         WHERE crabass.cdcooper = par_cdcooper     AND 
               crabass.nrcpfcgc = crawcrd.nrrepcan NO-LOCK: END.
    IF   AVAIL crabass THEN 
         DO:
            ASSIGN tt-termocan-cartao.dsrepcan = UPPER(crabass.nmprimtl).
         END.
    ELSE DO:
            FIND FIRST crabncp
                 WHERE crabncp.nrdoccpf = crawcrd.nrrepcan NO-LOCK NO-ERROR.
            IF   AVAIL crabncp THEN
                 DO:
                    ASSIGN tt-termocan-cartao.dsrepcan = UPPER(crabncp.nmpessoa).
                END.
            END.

    RETURN "OK".
    
END PROCEDURE.

PROCEDURE altera_limite_cartao_pj:

    DEF  INPUT PARAM par_cdcooper AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_cdagenci AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrdcaixa AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_cdoperad AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nmdatela AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_idorigem AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrdconta AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_idseqttl AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_dtmvtolt AS DATE                           NO-UNDO.
    DEF  INPUT PARAM par_nrctrcrd AS INTE                           NO-UNDO.
    
    DEF OUTPUT PARAM TABLE FOR tt-alt-limite-pj.
    DEF OUTPUT PARAM TABLE FOR tt-erro.
        
    DEF VAR aux_dsmesref AS CHAR INIT
                         ["Janeiro,Fevereiro,Marco,Abril,Maio,Junho,
                          Julho,Agosto,Setembro,Outubro,Novembro,Dezembro"]
                                                                    NO-UNDO.
    DEF VAR aux_dslinha1 AS CHAR                                    NO-UNDO.
    DEF VAR aux_dslinha2 AS CHAR                                    NO-UNDO.
    DEF VAR aux_dslinha3 AS CHAR                                    NO-UNDO.   
    DEF VAR aux_nmoperad AS CHAR                                    NO-UNDO.
    DEF VAR aux_nmrecop1 AS CHAR                                    NO-UNDO.
    DEF VAR aux_nmrecop2 AS CHAR                                    NO-UNDO.
    DEF VAR aux_dsemsctr AS CHAR                                    NO-UNDO.
    DEF VAR aux_dsmotivo AS CHAR                                    NO-UNDO.

    DEF VAR h-b1wgen9999 AS HANDLE                                  NO-UNDO.

    DEF  BUFFER crabass FOR crapass.
    DEF  BUFFER crabncp FOR crapncp.
    
    EMPTY TEMP-TABLE tt-alt-limite-pj.
    EMPTY TEMP-TABLE tt-erro.
    
    FIND crapcop WHERE crapcop.cdcooper = par_cdcooper NO-LOCK NO-ERROR.

    IF   NOT AVAILABLE crapcop THEN
         DO:
             ASSIGN aux_cdcritic = 651
                    aux_dscritic = "".
                   
             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                       
             RETURN "NOK".
         END.
         
    ASSIGN aux_dslinha1 = "CNPJ " + 
                           STRING(STRING(crapcop.nrdocnpj,"99999999999999"),
                                         "xx.xxx.xxx/xxxx-xx") +
                          "  FONE: " + crapcop.nrtelvoz
                    
           aux_dslinha2 = crapcop.dsendcop + ", " + 
                          STRING(crapcop.nrendcop,"zz,zz9") + " - CP " +
                          STRING(crapcop.nrcxapst,"zz,zz9")
                    
           aux_dslinha3 = STRING(crapcop.nrcepend,"zz,zzz,zzz") + " - " +
                          crapcop.nmcidade + " - " + crapcop.cdufdcop. 

 
    FIND FIRST crawcrd WHERE crawcrd.cdcooper = par_cdcooper AND
                             crawcrd.nrdconta = par_nrdconta AND
                             crawcrd.nrctrcrd = par_nrctrcrd     
                             NO-LOCK NO-ERROR.

    IF   NOT AVAILABLE crawcrd THEN
         DO:
             ASSIGN aux_cdcritic = 535
                    aux_dscritic = "".
                   
             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                       
             RETURN "NOK".
         END.

    
    FOR FIRST crapass FIELDS(nrdconta nmprimtl nrcpfcgc)
                     WHERE crapass.cdcooper = par_cdcooper  AND
                       crapass.nrdconta = par_nrdconta  NO-LOCK:
    END.
                   
    IF   NOT AVAILABLE crapass THEN
         DO:
             ASSIGN aux_cdcritic = 9
                    aux_dscritic = "".

             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).                
                
             RETURN "NOK".
         END.
    
    FIND crapope WHERE crapope.cdcooper = par_cdcooper     AND
                       crapope.cdoperad = crawcrd.cdoperad 
                       NO-LOCK NO-ERROR.

    IF   NOT AVAILABLE crapope THEN
         aux_nmoperad = STRING(crawcrd.cdoperad,"x(10)") +
                        " - Nao cadastrado.".
    ELSE
         aux_nmoperad = crapope.nmoperad.    
    
    RUN sistema/generico/procedures/b1wgen9999.p PERSISTENT
        SET h-b1wgen9999.
        
    IF  NOT VALID-HANDLE(h-b1wgen9999)  THEN
        DO:
            ASSIGN aux_cdcritic = 0
                   aux_dscritic = "Handle invalido para BO b1wgen9999.".
                   
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                       
            RETURN "NOK".
        END.
    
    RUN divide-nome-coop IN h-b1wgen9999 (INPUT crapcop.nmextcop,
                                          OUTPUT aux_nmrecop1,
                                          OUTPUT aux_nmrecop2).         

    DELETE PROCEDURE h-b1wgen9999.
    
    ASSIGN aux_dsemsctr = TRIM(crapcop.nmcidade) + " " + STRING(crapcop.cdufdcop,"!(2)") + ", " +
                          STRING(DAY(par_dtmvtolt),"99") + " de " +
                          TRIM(ENTRY(MONTH(par_dtmvtolt),aux_dsmesref)) + " de " +
                          STRING(YEAR(par_dtmvtolt)).

    FIND crapenc WHERE crapenc.cdcooper = par_cdcooper     AND
                       crapenc.nrdconta = crapass.nrdconta AND
                       crapenc.idseqttl = 1                AND
                       crapenc.cdseqinc = 1 
                       NO-LOCK NO-ERROR.

    FIND crapcop WHERE crapcop.cdcooper = par_cdcooper NO-LOCK NO-ERROR.

    IF crawcrd.cdmotivo = 1 THEN
        ASSIGN aux_dsmotivo = "Defeito no cartao".

    IF crawcrd.cdmotivo = 5 THEN
        ASSIGN aux_dsmotivo = "Mudanca de nome".
    
    FIND FIRST craptlc WHERE craptlc.cdcooper = crawcrd.cdcooper      AND
                                 craptlc.cdadmcrd = crawcrd.cdadmcrd  AND
                                 craptlc.tpcartao = crawcrd.tpcartao  AND
                                 craptlc.cdlimcrd = crawcrd.cdlimcrd
                                 NO-LOCK NO-ERROR.

    IF   NOT AVAILABLE craptlc   THEN
         DO:
             ASSIGN aux_cdcritic = 0
                    aux_dscritic = "Limite proposto e/ou tipo de cartao " +
                                   "invalido".
            
             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).                
                
             RETURN "NOK".
         END.

    CREATE tt-alt-limite-pj.
    ASSIGN tt-alt-limite-pj.nome     = crapass.nmprimtl
           tt-alt-limite-pj.cnpj     = crapass.nrcpfcgc
           tt-alt-limite-pj.nrrepent = crawcrd.nrrepent
           tt-alt-limite-pj.nrcpfcgc = crapass.nrcpfcgc
           tt-alt-limite-pj.nmrescop = crapcop.nmrescop
           tt-alt-limite-pj.nmextcop = crapcop.nmextcop
           tt-alt-limite-pj.nrdocnpj = crapcop.nrdocnpj
           tt-alt-limite-pj.dsendere = crapenc.dsendere
           tt-alt-limite-pj.nrendere = crapenc.nrendere
           tt-alt-limite-pj.nmbairro = crapenc.nmbairro
           tt-alt-limite-pj.nmcidade = crapenc.nmcidade
           tt-alt-limite-pj.cdufende = crapenc.cdufende
           tt-alt-limite-pj.nrcepend = crapenc.nrcepend
           tt-alt-limite-pj.nrcrcard = crawcrd.nrcrcard  
           tt-alt-limite-pj.nrcpftit = crawcrd.nrcpftit  
           tt-alt-limite-pj.nmtitcrd = crawcrd.nmtitcrd
           tt-alt-limite-pj.nmprimtl = crapass.nmprimtl
           tt-alt-limite-pj.dsemsctr = aux_dsemsctr
           tt-alt-limite-pj.dsmotivo = aux_dsmotivo
           tt-alt-limite-pj.cdcooper = crapcop.cdcooper
           tt-alt-limite-pj.nrreplim = crawcrd.nrreplim
           tt-alt-limite-pj.vllimcrd = craptlc.vllimcrd.
    
    FOR FIRST crabass FIELDS(nmprimtl)
         WHERE crabass.cdcooper = par_cdcooper     AND
               crabass.nrcpfcgc = crawcrd.nrreplim NO-LOCK:
    END.
    IF   AVAIL crabass THEN
         DO:
            ASSIGN tt-alt-limite-pj.nmrepsol = crabass.nmprimtl.
         END.
    ELSE DO:
            FIND FIRST crabncp
                 WHERE crabncp.nrdoccpf = crawcrd.nrreplim NO-LOCK NO-ERROR.
            IF   AVAIL crabncp THEN
                 DO:
                    ASSIGN tt-alt-limite-pj.nmrepsol = crabncp.nmpessoa.
                END.
            END.

    RETURN "OK".
    
END PROCEDURE.

PROCEDURE altera_dtvcto_cartao_pj:

    DEF  INPUT PARAM par_cdcooper AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_cdagenci AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrdcaixa AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_cdoperad AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nmdatela AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_idorigem AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrdconta AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_idseqttl AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_dtmvtolt AS DATE                           NO-UNDO.
    DEF  INPUT PARAM par_nrctrcrd AS INTE                           NO-UNDO.
    
    DEF OUTPUT PARAM TABLE FOR tt-alt-dtvenc-pj.
    DEF OUTPUT PARAM TABLE FOR tt-erro.

    DEF VAR aux_dsmesref AS CHAR INIT
                         ["Janeiro,Fevereiro,Marco,Abril,Maio,Junho,
                          Julho,Agosto,Setembro,Outubro,Novembro,Dezembro"]
                                                                    NO-UNDO.
    DEF VAR aux_dslinha1 AS CHAR                                    NO-UNDO.
    DEF VAR aux_dslinha2 AS CHAR                                    NO-UNDO.
    DEF VAR aux_dslinha3 AS CHAR                                    NO-UNDO.   
    DEF VAR aux_nmoperad AS CHAR                                    NO-UNDO.
    DEF VAR aux_nmrecop1 AS CHAR                                    NO-UNDO.
    DEF VAR aux_nmrecop2 AS CHAR                                    NO-UNDO.
    DEF VAR aux_dsemsctr AS CHAR                                    NO-UNDO.
    DEF VAR aux_dsmotivo AS CHAR                                    NO-UNDO.

    DEF VAR h-b1wgen9999 AS HANDLE                                  NO-UNDO.

    DEF  BUFFER crabass FOR crapass.
    DEF  BUFFER crabncp FOR crapncp.
    
    EMPTY TEMP-TABLE tt-alt-dtvenc-pj.
    EMPTY TEMP-TABLE tt-erro.
    
    FIND crapcop WHERE crapcop.cdcooper = par_cdcooper NO-LOCK NO-ERROR.

    IF   NOT AVAILABLE crapcop THEN
         DO:
             ASSIGN aux_cdcritic = 651
                    aux_dscritic = "".
                   
             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                       
             RETURN "NOK".
         END.
         
    ASSIGN aux_dslinha1 = "CNPJ " + 
                           STRING(STRING(crapcop.nrdocnpj,"99999999999999"),
                                         "xx.xxx.xxx/xxxx-xx") +
                          "  FONE: " + crapcop.nrtelvoz
                    
           aux_dslinha2 = crapcop.dsendcop + ", " + 
                          STRING(crapcop.nrendcop,"zz,zz9") + " - CP " +
                          STRING(crapcop.nrcxapst,"zz,zz9")
                    
           aux_dslinha3 = STRING(crapcop.nrcepend,"zz,zzz,zzz") + " - " +
                          crapcop.nmcidade + " - " + crapcop.cdufdcop. 

 
    FIND FIRST crawcrd WHERE crawcrd.cdcooper = par_cdcooper AND
                             crawcrd.nrdconta = par_nrdconta AND
                             crawcrd.nrctrcrd = par_nrctrcrd     
                             NO-LOCK NO-ERROR.

    IF   NOT AVAILABLE crawcrd THEN
         DO:
             ASSIGN aux_cdcritic = 535
                    aux_dscritic = "".
                   
             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                       
             RETURN "NOK".
         END.

    
    FOR FIRST crapass FIELDS(nrdconta nmprimtl nrcpfcgc)
                     WHERE crapass.cdcooper = par_cdcooper  AND
                       crapass.nrdconta = par_nrdconta  NO-LOCK:
    END.
                   
    IF   NOT AVAILABLE crapass THEN
         DO:
             ASSIGN aux_cdcritic = 9
                    aux_dscritic = "".

             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).                
                
             RETURN "NOK".
         END.
    
    FIND crapope WHERE crapope.cdcooper = par_cdcooper     AND
                       crapope.cdoperad = crawcrd.cdoperad 
                       NO-LOCK NO-ERROR.

    IF   NOT AVAILABLE crapope THEN
         aux_nmoperad = STRING(crawcrd.cdoperad,"x(10)") +
                        " - Nao cadastrado.".
    ELSE
         aux_nmoperad = crapope.nmoperad.    
    
    RUN sistema/generico/procedures/b1wgen9999.p PERSISTENT
        SET h-b1wgen9999.
        
    IF  NOT VALID-HANDLE(h-b1wgen9999)  THEN
        DO:
            ASSIGN aux_cdcritic = 0
                   aux_dscritic = "Handle invalido para BO b1wgen9999.".
                   
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                       
            RETURN "NOK".
        END.
    
    RUN divide-nome-coop IN h-b1wgen9999 (INPUT crapcop.nmextcop,
                                          OUTPUT aux_nmrecop1,
                                          OUTPUT aux_nmrecop2).         

    DELETE PROCEDURE h-b1wgen9999.
    
    ASSIGN aux_dsemsctr = TRIM(crapcop.nmcidade) + " " + STRING(crapcop.cdufdcop,"!(2)") + ", " +
                          STRING(DAY(par_dtmvtolt),"99") + " de " +
                          TRIM(ENTRY(MONTH(par_dtmvtolt),aux_dsmesref)) + " de " +
                          STRING(YEAR(par_dtmvtolt)).

    FIND crapenc WHERE crapenc.cdcooper = par_cdcooper     AND
                       crapenc.nrdconta = crapass.nrdconta AND
                       crapenc.idseqttl = 1                AND
                       crapenc.cdseqinc = 1 
                       NO-LOCK NO-ERROR.

    FIND crapcop WHERE crapcop.cdcooper = par_cdcooper NO-LOCK NO-ERROR.

    IF crawcrd.cdmotivo = 1 THEN
        ASSIGN aux_dsmotivo = "Defeito no cartao".

    IF crawcrd.cdmotivo = 5 THEN
        ASSIGN aux_dsmotivo = "Mudanca de nome".
    
    FIND FIRST craptlc WHERE craptlc.cdcooper = crawcrd.cdcooper      AND
                                 craptlc.cdadmcrd = crawcrd.cdadmcrd  AND
                                 craptlc.tpcartao = crawcrd.tpcartao  AND
                                 craptlc.cdlimcrd = crawcrd.cdlimcrd
                                 NO-LOCK NO-ERROR.

    IF   NOT AVAILABLE craptlc   THEN
         DO:
             ASSIGN aux_cdcritic = 0
                    aux_dscritic = "Limite proposto e/ou tipo de cartao " +
                                   "invalido".
            
             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).                
                
             RETURN "NOK".
         END.

    CREATE tt-alt-dtvenc-pj.
    ASSIGN tt-alt-dtvenc-pj.nome     = crapass.nmprimtl
           tt-alt-dtvenc-pj.cnpj     = crapass.nrcpfcgc
           tt-alt-dtvenc-pj.nrrepent = crawcrd.nrrepent
           tt-alt-dtvenc-pj.nrcpfcgc = crapass.nrcpfcgc
           tt-alt-dtvenc-pj.nmrescop = crapcop.nmrescop
           tt-alt-dtvenc-pj.nmextcop = crapcop.nmextcop
           tt-alt-dtvenc-pj.nrdocnpj = crapcop.nrdocnpj
           tt-alt-dtvenc-pj.dsendere = crapenc.dsendere
           tt-alt-dtvenc-pj.nrendere = crapenc.nrendere
           tt-alt-dtvenc-pj.nmbairro = crapenc.nmbairro
           tt-alt-dtvenc-pj.nmcidade = crapenc.nmcidade
           tt-alt-dtvenc-pj.cdufende = crapenc.cdufende
           tt-alt-dtvenc-pj.nrcepend = crapenc.nrcepend
           tt-alt-dtvenc-pj.nrcrcard = crawcrd.nrcrcard  
           tt-alt-dtvenc-pj.nrcpftit = crawcrd.nrcpftit  
           tt-alt-dtvenc-pj.nmtitcrd = crawcrd.nmtitcrd
           tt-alt-dtvenc-pj.nmprimtl = crapass.nmprimtl
           tt-alt-dtvenc-pj.dsemsctr = aux_dsemsctr
           tt-alt-dtvenc-pj.dsmotivo = aux_dsmotivo
           tt-alt-dtvenc-pj.cdcooper = crapcop.cdcooper
           tt-alt-dtvenc-pj.nrrepven = crawcrd.nrrepven                       
           tt-alt-dtvenc-pj.dddebito = crawcrd.dddebant.
                                               
    FOR FIRST crabass FIELDS(nmprimtl)
         WHERE crabass.cdcooper = par_cdcooper     AND
               crabass.nrcpfcgc = crawcrd.nrrepven NO-LOCK:
    END.

    IF   AVAIL crabass THEN
         DO:
            ASSIGN tt-alt-dtvenc-pj.nmrepsol = crabass.nmprimtl.
         END.
    ELSE DO:
            FIND FIRST crabncp
                 WHERE crabncp.nrdoccpf = crawcrd.nrrepven NO-LOCK NO-ERROR. 

            IF   AVAIL crabncp THEN
                 DO:
                    ASSIGN tt-alt-dtvenc-pj.nmrepsol = crabncp.nmpessoa.
                END.
            END.

    RETURN "OK".
    
END PROCEDURE.

PROCEDURE gera_impressao_entrega_carta:

    DEF  INPUT PARAM par_cdcooper AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_idorigem AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_cdoperad AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nmdatela AS CHAR                           NO-UNDO.    
    DEF  INPUT PARAM par_nrdconta AS INTE                           NO-UNDO.    
    DEF  INPUT PARAM par_dtmvtolt AS DATE                           NO-UNDO.
    DEF  INPUT PARAM par_dtmvtopr AS DATE                           NO-UNDO.
    DEF  INPUT PARAM par_inproces AS INTE                           NO-UNDO.       
    DEF  INPUT PARAM par_nrctrcrd AS INTE                           NO-UNDO.    
    DEF  INPUT PARAM par_dsiduser AS CHAR                           NO-UNDO. 

    DEF OUTPUT PARAM par_nmarqimp AS CHAR                           NO-UNDO.
    DEF OUTPUT PARAM par_nmarqpdf AS CHAR                           NO-UNDO.

    DEF OUTPUT PARAM TABLE FOR tt-erro.

    DEF   VAR hb1wgen0028i     AS HANDLE                            NO-UNDO.
            
    RUN sistema/generico/procedures/b1wgen0028i.p 
        PERSISTENT SET hb1wgen0028i.

    IF  NOT VALID-HANDLE(hb1wgen0028i)  THEN
        DO:
           ASSIGN aux_cdcritic = 0 
                  aux_dscritic = "Handle invalido para BO " +
                                 "b1wgen0028i.".
           
           RUN gera_erro (INPUT par_cdcooper,
                          INPUT 0,
                          INPUT 0,
                          INPUT 1,            /** Sequencia **/
                          INPUT aux_cdcritic,
                          INPUT-OUTPUT aux_dscritic).


           RETURN "NOK".

        END.

    /* isolando a montagem do arquivo de impressao em outro fonte */
    RUN gera_impressao_entrega_carta IN hb1wgen0028i ( INPUT par_cdcooper,
                                                         INPUT par_idorigem,
                                                         INPUT par_cdoperad,
                                                         INPUT par_nmdatela,
                                                         INPUT par_nrdconta,
                                                         INPUT par_dtmvtolt,
                                                         INPUT par_dtmvtopr,
                                                         INPUT par_inproces,
                                                         INPUT par_nrctrcrd,
                                                         INPUT par_dsiduser,
                                                        OUTPUT par_nmarqimp,
                                                        OUTPUT par_nmarqpdf,
                                                        OUTPUT TABLE tt-erro).

    IF  RETURN-VALUE = "NOK" THEN
        DO:
            FIND FIRST tt-erro NO-LOCK NO-ERROR.
            IF  AVAIL tt-erro THEN 
                DO:
                    DELETE PROCEDURE hb1wgen0028i.           
                    RETURN "NOK".
                END.

        END.

    DELETE PROCEDURE hb1wgen0028i.

    RETURN "ok".

END PROCEDURE.

PROCEDURE gera_impressao_entrega_cartao_bancoob:
    
    DEF  INPUT PARAM par_cdcooper AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_cdagenci AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrdcaixa AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_idorigem AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nmdatela AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_dtmvtolt AS DATE                           NO-UNDO.
    DEF  INPUT PARAM par_nrdconta AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrctrcrd AS INTE                           NO-UNDO.    
    DEF  INPUT PARAM par_dsiduser AS CHAR                           NO-UNDO. 

    DEF OUTPUT PARAM par_nmarqimp AS CHAR                           NO-UNDO.
    DEF OUTPUT PARAM par_nmarqpdf AS CHAR                           NO-UNDO.

    DEF OUTPUT PARAM TABLE FOR tt-erro.

    DEF   VAR aux_nmarquiv AS CHAR                                  NO-UNDO.
    DEF   VAR aux_returnvl AS CHAR                                  NO-UNDO.
    DEF   VAR aux_nrcrcard LIKE crawcrd.nrcrcard                    NO-UNDO.
    DEF   VAR aux_nmprimtl LIKE crapass.nmprimtl                    NO-UNDO.
    DEF   VAR aux_dsemsctr AS CHAR FORMAT "x(80)"                   NO-UNDO.
    DEF   VAR aux_dsmesref AS CHAR INIT
                 ["Janeiro,Fevereiro,Marco,Abril,Maio,Junho,
                   Julho,Agosto,Setembro,Outubro,Novembro,Dezembro"]
                                                                    NO-UNDO.
    DEF   VAR h-b1wgen0024 AS HANDLE                                NO-UNDO.
                    
    EMPTY TEMP-TABLE tt-erro.

    ASSIGN aux_returnvl = "NOK".

    FORM SKIP
         "PROTOCOLO DE ENTREGA DO CARTAO CECRED" AT 23
         SKIP(2)
         "1 - Protocolo de Entrega do cartao CECRED"
         SKIP(1)
         "Declaro que recebi nesta data o cartao listado abaixo, "
         "identificado pelos digitos:"
         SKIP(1)
         "1.1) " aux_nrcrcard
         SKIP(2)
         "2 - Adesao aos servicos adicionais - SEGURO PPR"
         SKIP(1)
         "2.1) _____________________" AT 1 "[  ]Sim" AT 35 "[  ]Nao" AT 55
         SKIP(1)
         "2.2) _____________________" AT 1 "[  ]Sim" AT 35 "[  ]Nao" AT 55
         SKIP(1)
         "2.3) _____________________" AT 1 "[  ]Sim" AT 35 "[  ]Nao" AT 55
         SKIP(1)
         "2.4) _____________________" AT 1 "[  ]Sim" AT 35 "[  ]Nao" AT 55
         SKIP(2)
         "3 - Adesao aos servicos adicionais - SMS"
         SKIP(1)
         "3.1) SMS ilimitado" AT 1 "[  ]Sim" AT 35 "[  ]Nao" AT 55
         SKIP(1)
         "3.2) Celular: (____) ______________________"
         SKIP(2)
         "A nao adesao aos servicos adicionais no momento da entrega do cartao"
         "nao restringe "
         SKIP 
         "a contratacao direta do Cooperado via Central de Atendimento"
         "(0800), Portal do "
         SKIP 
         "Portador ou atraves de posterior oferta."
         SKIP(2)
         "Local e Data: " aux_dsemsctr
         SKIP(2)
         "Assinatura do Cooperado:_____________________________________________"
         aux_nmprimtl AT 26
         WITH WIDTH 132 NO-LABEL SIDE-LABELS NO-BOX FRAME f_entrega.

    FOR crapcop FIELDS(dsdircop nmcidade cdufdcop) 
                       WHERE crapcop.cdcooper = par_cdcooper 
                             NO-LOCK: END.

    ASSIGN aux_nmarquiv = "/usr/coop/" + crapcop.dsdircop + "/rl/" + 
                          par_dsiduser.
    
    UNIX SILENT VALUE("rm " + aux_nmarquiv + "* 2>/dev/null").
    
    ASSIGN aux_nmarquiv = aux_nmarquiv + STRING(TIME)
           par_nmarqimp = aux_nmarquiv + ".ex".

    OUTPUT STREAM str_1 TO VALUE(par_nmarqimp) PAGED PAGE-SIZE 84.

    Imprime: DO ON ERROR UNDO Imprime, LEAVE Imprime:

        FOR crawcrd FIELDS(nrcrcard) WHERE crawcrd.cdcooper = par_cdcooper AND
                                           crawcrd.nrdconta = par_nrdconta AND
                                           crawcrd.nrctrcrd = par_nrctrcrd
                                           NO-LOCK: END.
    
        IF NOT AVAIL crawcrd THEN
           DO:
               ASSIGN aux_cdcritic = 546
                      aux_dscritic = "".
    
               RUN gera_erro (INPUT par_cdcooper,
                              INPUT par_cdagenci,
                              INPUT par_nrdcaixa,
                              INPUT 1,            /** Sequencia **/
                              INPUT aux_cdcritic,
                              INPUT-OUTPUT aux_dscritic).
               LEAVE Imprime.
           END.
    
        FOR crapass FIELDS(nmprimtl)
                    WHERE crapass.cdcooper = crawcrd.cdcooper AND
                          crapass.nrdconta = crawcrd.nrdconta
                          NO-LOCK: END.

        IF NOT AVAIL crapass THEN
           DO:
               ASSIGN aux_cdcritic = 9
                      aux_dscritic = "".
    
               RUN gera_erro (INPUT par_cdcooper,
                              INPUT par_cdagenci,
                              INPUT par_nrdcaixa,
                              INPUT 1,            /** Sequencia **/
                              INPUT aux_cdcritic,
                              INPUT-OUTPUT aux_dscritic).
               LEAVE Imprime.
           END.

        ASSIGN aux_nrcrcard = crawcrd.nrcrcard
               aux_nmprimtl = crapass.nmprimtl
               aux_dsemsctr = TRIM(crapcop.nmcidade) + " " + 
                              STRING(crapcop.cdufdcop,"!(2)") + ", " +
                              STRING(DAY(par_dtmvtolt),"99") + " de " +
                              TRIM(ENTRY(MONTH(par_dtmvtolt),aux_dsmesref)) + 
                              " de " + STRING(YEAR(par_dtmvtolt)).
    
        DISPLAY STREAM str_1 aux_nrcrcard
                             aux_dsemsctr
                             aux_nmprimtl
                             WITH FRAME f_entrega.
    
        OUTPUT STREAM str_1 CLOSE.

        /** Ayllos Web **/
        IF par_idorigem = 5  THEN  
           DO:
               RUN sistema/generico/procedures/b1wgen0024.p PERSISTENT
                   SET h-b1wgen0024.
    
               IF NOT VALID-HANDLE(h-b1wgen0024)  THEN
                  DO:
                      ASSIGN aux_dscritic = "Handle invalido para BO " +
                                            "b1wgen0024.".
                      LEAVE Imprime.
                  END.
    
               RUN envia-arquivo-web IN h-b1wgen0024 (INPUT par_cdcooper,
                                                      INPUT par_cdagenci,
                                                      INPUT par_nrdcaixa,
                                                      INPUT par_nmarqimp,
                                                     OUTPUT par_nmarqpdf,
                                                     OUTPUT TABLE tt-erro ).

               IF VALID-HANDLE(h-b1wgen0024)  THEN
                  DELETE PROCEDURE h-b1wgen0024.
    
               IF RETURN-VALUE <> "OK" THEN
                  LEAVE Imprime.
    
           END. /* END IF par_idorigem = 5 */
    
    END. /* Imprime */

    IF aux_dscritic <> "" OR 
       aux_cdcritic <> 0  OR 
       TEMP-TABLE tt-erro:HAS-RECORDS THEN
       DO:
           ASSIGN aux_returnvl = "NOK".
           
           IF NOT TEMP-TABLE tt-erro:HAS-RECORDS THEN
              RUN gera_erro (INPUT par_cdcooper,
                             INPUT par_cdagenci,
                             INPUT par_nrdcaixa,
                             INPUT 1,
                             INPUT aux_cdcritic,
                             INPUT-OUTPUT aux_dscritic).

       END.
    ELSE
       ASSIGN aux_returnvl = "OK".

    RETURN aux_returnvl.

END PROCEDURE.

PROCEDURE carrega_dados_proposta_emissao:

    DEF  INPUT PARAM par_cdcooper AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_cdagenci AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrdcaixa AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_cdoperad AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nmdatela AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_idorigem AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrdconta AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_idseqttl AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_dtmvtolt AS DATE                           NO-UNDO.
    DEF  INPUT PARAM par_dtmvtopr AS DATE                           NO-UNDO.
    DEF  INPUT PARAM par_inproces AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrctrcrd AS INTE                           NO-UNDO.
    
    DEF OUTPUT PARAM TABLE FOR tt-dados_prp_emiss_ccr.
    DEF OUTPUT PARAM TABLE FOR tt-outros_cartoes.
    DEF OUTPUT PARAM TABLE FOR tt-dados-ctr.    
    DEF OUTPUT PARAM TABLE FOR tt-erro.

    DEF VAR aux_nrcpfcgc AS CHAR        NO-UNDO.
    DEF VAR aux_nrdocnpj AS CHAR        NO-UNDO.
    DEF VAR aux_dsrepinc AS CHAR        NO-UNDO.
    DEF VAR aux_nrcpftit AS CHAR        NO-UNDO.

    DEF VAR aux_dsmesref AS CHAR INIT
                             ["janeiro,fevereiro,marco,abril,maio,junho,
                              julho,agosto,setembro,outubro,novembro,dezembro"]
                                            NO-UNDO.   
    DEF VAR aux_dsemsctr AS CHAR        NO-UNDO.

    DEF  BUFFER crabass FOR crapass.


    EMPTY TEMP-TABLE tt-dados_prp_emiss_ccr.
    EMPTY TEMP-TABLE tt-outros_cartoes.
    EMPTY TEMP-TABLE tt-dados-ctr.
    EMPTY TEMP-TABLE tt-erro.



    FIND crapcop WHERE crapcop.cdcooper = par_cdcooper NO-LOCK NO-ERROR.
    
    IF  NOT AVAILABLE crapcop  THEN
        DO: 
            ASSIGN aux_cdcritic = 651
                   aux_dscritic = "".
                   
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                       
            RETURN "NOK".            
        END.

    FIND crawcrd WHERE crawcrd.cdcooper = par_cdcooper AND
                       crawcrd.nrdconta = par_nrdconta AND
                       crawcrd.nrctrcrd = par_nrctrcrd NO-LOCK NO-ERROR.
                
    IF  NOT AVAILABLE crawcrd  THEN
        DO:
            ASSIGN aux_cdcritic = 0
                   aux_dscritic = "Proposta de cartao de credito nao " +
                                          "cadastrada.".
        
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                              
            RETURN "NOK".
                                          
         END.

    FIND crapadc WHERE crapadc.cdcooper = par_cdcooper      AND                           
                       crapadc.cdadmcrd = crawcrd.cdadmcrd  AND 
                      (crapadc.tpctahab = 0                 OR
                       crapadc.tpctahab = 2)   NO-LOCK NO-ERROR.

    IF   NOT AVAILABLE crapadc THEN
         DO:
            ASSIGN aux_cdcritic = 605
                   aux_dscritic = "".

            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                       
            RETURN "NOK".            
         END.

    FIND craptlc WHERE craptlc.cdcooper = par_cdcooper      AND
                       craptlc.cdadmcrd = crawcrd.cdadmcrd  AND
                       craptlc.tpcartao = crawcrd.tpcartao  AND
                       craptlc.cdlimcrd = crawcrd.cdlimcrd  AND
                       craptlc.dddebito = 0                 NO-LOCK NO-ERROR.
                                    
    IF   NOT AVAILABLE craptlc   THEN
         DO:
             ASSIGN aux_cdcritic = 532
                    aux_dscritic = "".
            
             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                     
             RETURN "NOK".

         END.
                        
                       
    ASSIGN  aux_nrcpfcgc = STRING(crapass.nrcpfcgc,"99999999999999")
            aux_nrcpfcgc = STRING(aux_nrcpfcgc,"xx.xxx.xxx/xxxx-xx")
            aux_nrdocnpj = STRING(crapcop.nrdocnpj,"99999999999999")
            aux_nrdocnpj = STRING(aux_nrdocnpj,"xx.xxx.xxx/xxxx-xx")
            aux_nrcpftit = STRING(crawcrd.nrcpftit,"99999999999")
            aux_nrcpftit = STRING(aux_nrcpftit,"xxx.xxx.xxx-xx").
                    
    FOR FIRST crabass FIELDS(nmprimtl)
         WHERE crabass.cdcooper = par_cdcooper
           AND crabass.nrcpfcgc = crawcrd.nrrepinc NO-LOCK: END.

    IF   AVAIL crabass THEN
         ASSIGN aux_dsrepinc = crabass.nmprimtl.
    ELSE
         DO:

            FIND FIRST crapncp
                 WHERE crapncp.nrdoccpf = crawcrd.nrrepinc NO-LOCK NO-ERROR.
            IF  AVAIL crapncp THEN
                ASSIGN aux_dsrepinc = crapncp.nmpessoa.
         END.

    ASSIGN aux_dsemsctr = TRIM(crapcop.nmcidade) + " " + STRING(crapcop.cdufdcop,"!(2)") + ", " +
                          STRING(DAY(par_dtmvtolt),"99") + " de " +
                          TRIM(ENTRY(MONTH(par_dtmvtolt),aux_dsmesref)) + " de " +
                          STRING(YEAR(par_dtmvtolt)).

    CREATE tt-dados_prp_emiss_ccr.
    ASSIGN tt-dados_prp_emiss_ccr.nmextcop = crapcop.nmextcop
           tt-dados_prp_emiss_ccr.nmprimtl = crapass.nmprimtl
           tt-dados_prp_emiss_ccr.nrcpfcgc = aux_nrcpfcgc
           tt-dados_prp_emiss_ccr.nrdconta = crawcrd.nrdconta
           tt-dados_prp_emiss_ccr.nrdocnpj = aux_nrdocnpj
           tt-dados_prp_emiss_ccr.nrcrcard = crawcrd.nrcrcard
           tt-dados_prp_emiss_ccr.nrctrcrd = crawcrd.nrctrcrd
           tt-dados_prp_emiss_ccr.nmtitcrd = crawcrd.nmtitcrd
           tt-dados_prp_emiss_ccr.dsendcop = crapcop.dsendcop
           tt-dados_prp_emiss_ccr.nrendcop = crapcop.nrendcop
           tt-dados_prp_emiss_ccr.dscomple = crapcop.dscomple
           tt-dados_prp_emiss_ccr.nmbairro = crapcop.nmbairro
           tt-dados_prp_emiss_ccr.nmcidade = crapcop.nmcidade
           tt-dados_prp_emiss_ccr.cdufdcop = crapcop.cdufdcop
           tt-dados_prp_emiss_ccr.dtnasctl = crawcrd.dtnasccr
           tt-dados_prp_emiss_ccr.vllimcrd = craptlc.vllimcrd
           tt-dados_prp_emiss_ccr.dddebito = crawcrd.dddebito
           tt-dados_prp_emiss_ccr.dsemsctr = aux_dsemsctr
           tt-dados_prp_emiss_ccr.dsrepinc = UPPER(aux_dsrepinc)
           tt-dados_prp_emiss_ccr.nrcpftit = aux_nrcpftit.


END PROCEDURE.


PROCEDURE gera_impressao_emissao_cartao:

    DEF  INPUT PARAM par_cdcooper AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_idorigem AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_cdoperad AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nmdatela AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nrdconta AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_dtmvtolt AS DATE                           NO-UNDO.
    DEF  INPUT PARAM par_dtmvtopr AS DATE                           NO-UNDO.
    DEF  INPUT PARAM par_inproces AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrctrcrd AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_dsiduser AS CHAR                           NO-UNDO.

    DEF OUTPUT PARAM par_nmarqimp AS CHAR                           NO-UNDO.
    DEF OUTPUT PARAM par_nmarqpdf AS CHAR                           NO-UNDO.

    DEF OUTPUT PARAM TABLE FOR tt-erro.

    DEF   VAR hb1wgen0028i        AS HANDLE                         NO-UNDO.

    RUN sistema/generico/procedures/b1wgen0028i.p 
        PERSISTENT SET hb1wgen0028i.
    
    IF  NOT VALID-HANDLE(hb1wgen0028i)  THEN
        DO:
           ASSIGN aux_cdcritic = 0 
                  aux_dscritic = "Handle invalido para BO " +
                                 "b1wgen0028i.".
           
           RUN gera_erro (INPUT par_cdcooper,
                          INPUT 0,
                          INPUT 0,
                          INPUT 1,            /** Sequencia **/
                          INPUT aux_cdcritic,
                          INPUT-OUTPUT aux_dscritic).


           RETURN "NOK".

        END.

    /* isolando a montagem do arquivo de impressao em outro fonte */
    RUN gera_impressao_emissao_cartao IN hb1wgen0028i ( INPUT par_cdcooper,
                                                        INPUT par_idorigem,
                                                        INPUT par_cdoperad,
                                                        INPUT par_nmdatela,
                                                        INPUT par_nrdconta,
                                                        INPUT par_dtmvtolt,
                                                        INPUT par_dtmvtopr,
                                                        INPUT par_inproces,
                                                        INPUT par_nrctrcrd,
                                                        INPUT par_dsiduser,
                                                       OUTPUT par_nmarqimp,
                                                       OUTPUT par_nmarqpdf,
                                                       OUTPUT TABLE tt-erro).

    IF  RETURN-VALUE = "NOK" THEN
        DO:
            FIND FIRST tt-erro NO-LOCK NO-ERROR.
            IF  AVAIL tt-erro THEN 
                DO:
                    DELETE PROCEDURE hb1wgen0028i.           
                    
                    RETURN "NOK".
                END.

        END.

    DELETE PROCEDURE hb1wgen0028i.
    
    RETURN "OK".

END PROCEDURE.

PROCEDURE verifica_associado: 
    DEF INPUT PARAM par_cdcooper AS INTEGER NO-UNDO.
    DEF INPUT PARAM par_nrdconta AS INTEGER NO-UNDO.
    DEF OUTPUT PARAM i-tipo      AS INTEGER NO-UNDO.

    FOR FIRST crapass FIELDS(inpessoa)
                                           WHERE crapass.cdcooper = par_cdcooper     AND
                             crapass.nrdconta = par_nrdconta NO-LOCK:
        END.
                                                         
    IF  AVAIL crapass THEN
        ASSIGN i-tipo = crapass.inpessoa.
END PROCEDURE.

PROCEDURE segunda_via_cartao:

    DEF  INPUT PARAM par_cdcooper AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_idorigem AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_cdoperad AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nmdatela AS CHAR                           NO-UNDO. 
    DEF  INPUT PARAM par_nrdconta AS INTE FORMAT "zzzz,zzz,9"       NO-UNDO.    
    DEF  INPUT PARAM par_dtmvtolt AS DATE                           NO-UNDO.
    DEF  INPUT PARAM par_nrctrcrd AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_dsiduser AS CHAR                           NO-UNDO.

    DEF OUTPUT PARAM par_nmarqimp AS CHAR                           NO-UNDO.
    DEF OUTPUT PARAM par_nmarqpdf AS CHAR                           NO-UNDO.

    DEF OUTPUT PARAM TABLE FOR tt-erro.    

    DEF   VAR hb1wgen0028i     AS HANDLE                            NO-UNDO.

    RUN sistema/generico/procedures/b1wgen0028i.p 
        PERSISTENT SET hb1wgen0028i.

    IF  NOT VALID-HANDLE(hb1wgen0028i)  THEN
        DO:
           ASSIGN aux_cdcritic = 0 
                  aux_dscritic = "Handle invalido para BO " +
                                 "b1wgen0028i.".
           
           RUN gera_erro (INPUT par_cdcooper,
                          INPUT 0,
                          INPUT 0,
                          INPUT 1,            /** Sequencia **/
                          INPUT aux_cdcritic,
                          INPUT-OUTPUT aux_dscritic).


           RETURN "NOK".

        END.

    /* isolando a montagem do arquivo de impressao em outro fonte */
    RUN segunda_via_cartao IN hb1wgen0028i ( INPUT par_cdcooper,
                                             INPUT par_idorigem,
                                             INPUT par_cdoperad,
                                             INPUT par_nmdatela,
                                             INPUT par_nrdconta,
                                             INPUT par_dtmvtolt,
                                             INPUT par_nrctrcrd,
                                             INPUT par_dsiduser,
                                            OUTPUT par_nmarqimp,
                                            OUTPUT par_nmarqpdf,
                                            OUTPUT TABLE tt-erro).

    IF  RETURN-VALUE = "NOK" THEN
        DO:
            FIND FIRST tt-erro NO-LOCK NO-ERROR.
            IF  AVAIL tt-erro THEN 
                DO:
                    DELETE PROCEDURE hb1wgen0028i.           
                    RETURN "NOK".
                END.

        END.

    DELETE PROCEDURE hb1wgen0028i.

END PROCEDURE.

PROCEDURE segunda_via_senha_cartao:

    DEF  INPUT PARAM par_cdcooper AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_idorigem AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_cdoperad AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nmdatela AS CHAR                           NO-UNDO. 
    DEF  INPUT PARAM par_nrdconta AS INTE FORMAT "zzzz,zzz,9"       NO-UNDO.    
    DEF  INPUT PARAM par_dtmvtolt AS DATE                           NO-UNDO.
    DEF  INPUT PARAM par_nrctrcrd AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_dsiduser AS CHAR                           NO-UNDO.

    DEF OUTPUT PARAM par_nmarqimp AS CHAR                           NO-UNDO.
    DEF OUTPUT PARAM par_nmarqpdf AS CHAR                           NO-UNDO.

    DEF OUTPUT PARAM TABLE FOR tt-erro.    

    DEF   VAR hb1wgen0028i        AS HANDLE                         NO-UNDO.

    RUN sistema/generico/procedures/b1wgen0028i.p 
        PERSISTENT SET hb1wgen0028i.

    IF  NOT VALID-HANDLE(hb1wgen0028i)  THEN
        DO:
           ASSIGN aux_cdcritic = 0 
                  aux_dscritic = "Handle invalido para BO " +
                                 "b1wgen0028i.".
           
           RUN gera_erro (INPUT par_cdcooper,
                          INPUT 0,
                          INPUT 0,
                          INPUT 1,            /** Sequencia **/
                          INPUT aux_cdcritic,
                          INPUT-OUTPUT aux_dscritic).


           RETURN "NOK".

        END.

    /* isolando a montagem do arquivo de impressao em outro fonte */
    RUN segunda_via_senha_cartao IN hb1wgen0028i ( INPUT par_cdcooper,
                                                   INPUT par_idorigem,
                                                   INPUT par_cdoperad,
                                                   INPUT par_nmdatela,
                                                   INPUT par_nrdconta,
                                                   INPUT par_dtmvtolt,
                                                   INPUT par_nrctrcrd,
                                                   INPUT par_dsiduser,
                                                  OUTPUT par_nmarqimp,
                                                  OUTPUT par_nmarqpdf,
                                                  OUTPUT TABLE tt-erro).

    IF  RETURN-VALUE = "NOK" THEN
        DO:
            FIND FIRST tt-erro NO-LOCK NO-ERROR.
            IF  AVAIL tt-erro THEN 
                DO:
                    DELETE PROCEDURE hb1wgen0028i.           
                    RETURN "NOK".
                END.

        END.

    DELETE PROCEDURE hb1wgen0028i.

END PROCEDURE.

PROCEDURE termo_cancela_cartao:

    DEF  INPUT PARAM par_cdcooper AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_idorigem AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_cdoperad AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nmdatela AS CHAR                           NO-UNDO. 
    DEF  INPUT PARAM par_nrdconta AS INTE FORMAT "zzzz,zzz,9"       NO-UNDO.    
    DEF  INPUT PARAM par_dtmvtolt AS DATE                           NO-UNDO.
    DEF  INPUT PARAM par_nrctrcrd AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_dsiduser AS CHAR                           NO-UNDO.

    DEF OUTPUT PARAM par_nmarqimp AS CHAR                           NO-UNDO.
    DEF OUTPUT PARAM par_nmarqpdf AS CHAR                           NO-UNDO.

    DEF OUTPUT PARAM TABLE FOR tt-erro.    

    DEF   VAR hb1wgen0028i        AS HANDLE                         NO-UNDO.

    RUN sistema/generico/procedures/b1wgen0028i.p 
        PERSISTENT SET hb1wgen0028i.

    IF  NOT VALID-HANDLE(hb1wgen0028i)  THEN
        DO:
           ASSIGN aux_cdcritic = 0 
                  aux_dscritic = "Handle invalido para BO " +
                                 "b1wgen0028i.".
           
           RUN gera_erro (INPUT par_cdcooper,
                          INPUT 0,
                          INPUT 0,
                          INPUT 1,            /** Sequencia **/
                          INPUT aux_cdcritic,
                          INPUT-OUTPUT aux_dscritic).


           RETURN "NOK".

        END.

    /* isolando a montagem do arquivo de impressao em outro fonte */
    RUN termo_cancela_cartao IN hb1wgen0028i ( INPUT par_cdcooper,
                                               INPUT par_idorigem,
                                               INPUT par_cdoperad,
                                               INPUT par_nmdatela,
                                               INPUT par_nrdconta,
                                               INPUT par_dtmvtolt,
                                               INPUT par_nrctrcrd,
                                               INPUT par_dsiduser,
                                              OUTPUT par_nmarqimp,
                                              OUTPUT par_nmarqpdf,
                                              OUTPUT TABLE tt-erro).

    IF  RETURN-VALUE = "NOK" THEN
        DO:
            FIND FIRST tt-erro NO-LOCK NO-ERROR.
            IF  AVAIL tt-erro THEN 
                DO:
                    DELETE PROCEDURE hb1wgen0028i.           
                    RETURN "NOK".
                END.

        END.

    DELETE PROCEDURE hb1wgen0028i.


END PROCEDURE.

PROCEDURE carrega_representante:
    DEFINE INPUT  PARAM par_cdcooper AS INT NO-UNDO.
    DEFINE INPUT  PARAM par_nrdconta AS INT NO-UNDO.
    DEFINE OUTPUT PARAM par_represen AS CHAR NO-UNDO.
    DEFINE OUTPUT PARAM par_cpfrepre AS DEC EXTENT 3 NO-UNDO.
                   
    DEFINE VAR aux_tamanhoc          AS INT NO-UNDO.

    FOR EACH craphcj
       WHERE craphcj.cdcooper = par_cdcooper
         AND craphcj.nrdconta = par_nrdconta NO-LOCK:
        
        IF   craphcj.nrcpfpri <> 0 THEN
             DO:
        
                FOR FIRST crapass FIELDS(nmprimtl nrcpfcgc)
                     WHERE crapass.cdcooper = craphcj.cdcooper AND
                           crapass.nrcpfcgc = craphcj.nrcpfpri NO-LOCK: END.

                IF   AVAIL crapass THEN
                     DO:
                         ASSIGN par_represen    = par_represen +  crapass.nmprimtl + ","
                                par_cpfrepre[1] = crapass.nrcpfcgc.
                     END.
                ELSE 
                     DO:
                         FIND FIRST crapncp
                              WHERE crapncp.nrdoccpf = craphcj.nrcpfpri NO-LOCK NO-ERROR.
                         IF   AVAIL crapncp THEN
                              DO:
                                  ASSIGN par_represen    = par_represen +  crapncp.nmpessoa + ","
                                         par_cpfrepre[1] = crapncp.nrdoccpf.
                              END.
                    END.  
             END.
                
        IF   craphcj.nrcpfseg <> 0 THEN
             DO:
                
                 FOR FIRST crapass FIELDS(nmprimtl nrcpfcgc)
                      WHERE crapass.cdcooper = craphcj.cdcooper AND
                            crapass.nrcpfcgc = craphcj.nrcpfseg NO-LOCK: END.

                 IF   AVAIL crapass THEN
                      DO:
                         
                          ASSIGN par_represen    = par_represen +  crapass.nmprimtl + ","
                                 par_cpfrepre[2] = crapass.nrcpfcgc.
                      END.
                 
                 ELSE 
                      DO:
                          FIND FIRST crapncp
                               WHERE crapncp.nrdoccpf = craphcj.nrcpfseg NO-LOCK NO-ERROR.
                     
                          IF   AVAIL crapncp THEN
                               DO:
                                   ASSIGN par_represen    = par_represen +  crapncp.nmpessoa + ","
                                          par_cpfrepre[2] = crapncp.nrdoccpf.
                                END.
                      END.
             END.
        
        
        IF   craphcj.nrcpfter <> 0 THEN
             DO:
                 FOR FIRST crapass FIELDS(nmprimtl nrcpfcgc)
                      WHERE crapass.cdcooper = craphcj.cdcooper AND
                            crapass.nrcpfcgc = craphcj.nrcpfter NO-LOCK: END.

                 IF   AVAIL crapass THEN
                      DO:
                          ASSIGN par_represen    = par_represen +  crapass.nmprimtl + ","
                                 par_cpfrepre[3] = crapass.nrcpfcgc.
                      END.
                 
                 ELSE 
                      DO:
                          FIND FIRST crapncp
                               WHERE crapncp.nrdoccpf = craphcj.nrcpfter NO-LOCK NO-ERROR.
                          IF   AVAIL crapncp THEN
                               DO:
                                    ASSIGN par_represen    = par_represen +  crapncp.nmpessoa + ","
                                           par_cpfrepre[3] = crapncp.nrdoccpf.
                               END.
                      END.
             END.
    END.

    ASSIGN aux_tamanhoc = LENGTH(par_represen) - 1.
    ASSIGN par_represen = SUBSTRING(par_represen,1,aux_tamanhoc).

END PROCEDURE.

PROCEDURE altera_limite_pj:
    DEF  INPUT PARAM par_cdcooper AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_idorigem AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_cdoperad AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nmdatela AS CHAR                           NO-UNDO. 
    DEF  INPUT PARAM par_dtmvtolt AS DATE                           NO-UNDO.
    DEF  INPUT PARAM par_nrctrcrd AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrdconta AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_dsiduser AS CHAR                           NO-UNDO.

    DEF OUTPUT PARAM par_nmarqimp  AS CHAR                          NO-UNDO.
    DEF OUTPUT PARAM par_nmarqpdf AS CHAR                           NO-UNDO.

    DEF OUTPUT PARAM TABLE FOR tt-erro.    

    DEF   VAR hb1wgen0028i        AS HANDLE                         NO-UNDO.

    RUN sistema/generico/procedures/b1wgen0028i.p 
        PERSISTENT SET hb1wgen0028i.

    IF  NOT VALID-HANDLE(hb1wgen0028i)  THEN
        DO:
           ASSIGN aux_cdcritic = 0 
                  aux_dscritic = "Handle invalido para BO " +
                                 "b1wgen0028i.".
           
           RUN gera_erro (INPUT par_cdcooper,
                          INPUT 0,
                          INPUT 0,
                          INPUT 1,            /** Sequencia **/
                          INPUT aux_cdcritic,
                          INPUT-OUTPUT aux_dscritic).


           RETURN "NOK".

        END.

    /* isolando a montagem do arquivo de impressao em outro fonte */
    RUN altera_limite_pj IN hb1wgen0028i ( INPUT par_cdcooper,
                                           INPUT par_idorigem,
                                           INPUT par_cdoperad,
                                           INPUT par_nmdatela,
                                           INPUT par_dtmvtolt,
                                           INPUT par_nrctrcrd,
                                           INPUT par_nrdconta,                                           
                                           INPUT par_dsiduser,    
                                          OUTPUT par_nmarqimp,
                                          OUTPUT par_nmarqpdf,
                                          OUTPUT TABLE tt-erro).

    IF  RETURN-VALUE = "NOK" THEN
        DO:
            FIND FIRST tt-erro NO-LOCK NO-ERROR.
            IF  AVAIL tt-erro THEN 
                DO:
                    DELETE PROCEDURE hb1wgen0028i.           
                    RETURN "NOK".
                END.

        END.

    DELETE PROCEDURE hb1wgen0028i.

END PROCEDURE.

PROCEDURE imprimi_limite_pf:
   
    DEF  INPUT PARAM par_cdcooper AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_idorigem AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_cdoperad AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nmdatela AS CHAR                           NO-UNDO. 
    DEF  INPUT PARAM par_nrdconta AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_dtmvtolt AS DATE                           NO-UNDO.
    DEF  INPUT PARAM par_dtmvtopr AS DATE                           NO-UNDO.
    DEF  INPUT PARAM par_inproces AS INTE                           NO-UNDO.  
    DEF  INPUT PARAM par_nrctrcrd AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_dsiduser AS CHAR                           NO-UNDO.

    DEF OUTPUT PARAM par_nmarqimp AS CHAR                           NO-UNDO.
    DEF OUTPUT PARAM par_nmarqpdf AS CHAR                           NO-UNDO.

    DEF OUTPUT PARAM TABLE FOR tt-erro.    

    DEF   VAR hb1wgen0028i     AS HANDLE                            NO-UNDO.

    RUN sistema/generico/procedures/b1wgen0028i.p 
        PERSISTENT SET hb1wgen0028i.

    IF  NOT VALID-HANDLE(hb1wgen0028i)  THEN
        DO:
           ASSIGN aux_cdcritic = 0 
                  aux_dscritic = "Handle invalido para BO " +
                                 "b1wgen0028i.".
           
           RUN gera_erro (INPUT par_cdcooper,
                          INPUT 0,
                          INPUT 0,
                          INPUT 1,            /** Sequencia **/
                          INPUT aux_cdcritic,
                          INPUT-OUTPUT aux_dscritic).


           RETURN "NOK".

        END.

    /* isolando a montagem do arquivo de impressao em outro fonte */
    RUN imprimi_limite_pf IN hb1wgen0028i ( INPUT par_cdcooper,
                                            INPUT par_idorigem,
                                            INPUT par_cdoperad,
                                            INPUT par_nmdatela,
                                            INPUT par_nrdconta,
                                            INPUT par_dtmvtolt,
                                            INPUT par_dtmvtopr,
                                            INPUT par_inproces,
                                            INPUT par_nrctrcrd,
                                            INPUT par_dsiduser,
                                           OUTPUT par_nmarqimp,
                                           OUTPUT par_nmarqpdf,
                                           OUTPUT TABLE tt-erro).

    IF  RETURN-VALUE = "NOK" THEN
        DO:
            FIND FIRST tt-erro NO-LOCK NO-ERROR.
            IF  AVAIL tt-erro THEN 
                DO:
                    DELETE PROCEDURE hb1wgen0028i.           
                    RETURN "NOK".
                END.

        END.

    DELETE PROCEDURE hb1wgen0028i.

END PROCEDURE.

PROCEDURE imprime_Alt_data_PJ:
    DEF  INPUT PARAM par_cdcooper AS INTE                       NO-UNDO.
    DEF  INPUT PARAM par_idorigem AS INTE                       NO-UNDO.
    DEF  INPUT PARAM par_cdoperad AS CHAR                       NO-UNDO.
    DEF  INPUT PARAM par_nmdatela AS CHAR                       NO-UNDO. 
    DEF  INPUT PARAM par_dtmvtolt AS DATE                       NO-UNDO.
    DEF  INPUT PARAM par_nrctrcrd AS INTE                       NO-UNDO.   
    DEF  INPUT PARAM par_nrdconta AS INTE                       NO-UNDO.
    DEF  INPUT PARAM par_dsiduser AS CHAR                       NO-UNDO.

    DEF OUTPUT PARAM par_nmarqimp AS CHAR                       NO-UNDO. 
    DEF OUTPUT PARAM par_nmarqpdf AS CHAR                       NO-UNDO.
    
    DEF OUTPUT PARAM TABLE FOR tt-erro.

    DEF   VAR hb1wgen0028i     AS HANDLE                        NO-UNDO.

    RUN sistema/generico/procedures/b1wgen0028i.p 
        PERSISTENT SET hb1wgen0028i.

    IF  NOT VALID-HANDLE(hb1wgen0028i)  THEN
        DO:
           ASSIGN aux_cdcritic = 0 
                  aux_dscritic = "Handle invalido para BO " +
                                 "b1wgen0028i.".
           
           RUN gera_erro (INPUT par_cdcooper,
                          INPUT 0,
                          INPUT 0,
                          INPUT 1,            /** Sequencia **/
                          INPUT aux_cdcritic,
                          INPUT-OUTPUT aux_dscritic).


           RETURN "NOK".

        END.

    /* isolando a montagem do arquivo de impressao em outro fonte */
    RUN imprime_Alt_data_PJ IN hb1wgen0028i ( INPUT par_cdcooper,
                                              INPUT par_idorigem,
                                              INPUT par_cdoperad,
                                              INPUT par_nmdatela,
                                              INPUT par_dtmvtolt,
                                              INPUT par_nrctrcrd,
                                              INPUT par_nrdconta,
                                              INPUT par_dsiduser,
                                             OUTPUT par_nmarqimp,
                                             OUTPUT par_nmarqpdf,      
                                             OUTPUT TABLE tt-erro).

    IF  RETURN-VALUE = "NOK" THEN
        DO:
            FIND FIRST tt-erro NO-LOCK NO-ERROR.
            IF  AVAIL tt-erro THEN 
                DO:
                    DELETE PROCEDURE hb1wgen0028i.           
                    RETURN "NOK".
                END.

        END.

    DELETE PROCEDURE hb1wgen0028i.


END PROCEDURE.

PROCEDURE imprime_Alt_data_PF:
    DEF  INPUT PARAM par_cdcooper AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_idorigem AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_cdoperad AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nmdatela AS CHAR                           NO-UNDO. 
    DEF  INPUT PARAM par_nrdconta AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_dtmvtolt AS DATE                           NO-UNDO.
    DEF  INPUT PARAM par_dtmvtopr AS DATE                           NO-UNDO.
    DEF  INPUT PARAM par_inproces AS INTE                           NO-UNDO.  
    DEF  INPUT PARAM par_nrctrcrd AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_dsiduser AS CHAR                           NO-UNDO.

    DEF OUTPUT PARAM par_nmarqimp AS CHAR                           NO-UNDO.
    DEF OUTPUT PARAM par_nmarqpdf AS CHAR                           NO-UNDO.

    DEF OUTPUT PARAM TABLE FOR tt-erro.

    DEF   VAR hb1wgen0028i     AS HANDLE                            NO-UNDO.

    RUN sistema/generico/procedures/b1wgen0028i.p 
        PERSISTENT SET hb1wgen0028i.

    IF  NOT VALID-HANDLE(hb1wgen0028i)  THEN
        DO:
           ASSIGN aux_cdcritic = 0 
                  aux_dscritic = "Handle invalido para BO " +
                                 "b1wgen0028i.".
           
           RUN gera_erro (INPUT par_cdcooper,
                          INPUT 0,
                          INPUT 0,
                          INPUT 1,            /** Sequencia **/
                          INPUT aux_cdcritic,
                          INPUT-OUTPUT aux_dscritic).


           RETURN "NOK".

        END.
       
    /* isolando a montagem do arquivo de impressao em outro fonte */
    RUN imprime_Alt_data_PF IN hb1wgen0028i ( INPUT par_cdcooper,
                                              INPUT par_idorigem,
                                              INPUT par_cdoperad,
                                              INPUT par_nmdatela,
                                              INPUT par_nrdconta,
                                              INPUT par_dtmvtolt,
                                              INPUT par_dtmvtopr,
                                              INPUT par_inproces,
                                              INPUT par_nrctrcrd,
                                              INPUT par_dsiduser,
                                             OUTPUT par_nmarqimp,
                                             OUTPUT par_nmarqpdf,
                                             OUTPUT TABLE tt-erro).

    IF  RETURN-VALUE = "NOK" THEN
        DO:
            FIND FIRST tt-erro NO-LOCK NO-ERROR.
            IF  AVAIL tt-erro THEN 
                DO:
                    DELETE PROCEDURE hb1wgen0028i.           
                    RETURN "NOK".
                END.

        END.

    DELETE PROCEDURE hb1wgen0028i.

END PROCEDURE.

PROCEDURE ValidaNome:

    DEF INPUT  PARAM par_nmtitcrd AS CHAR NO-UNDO.
    
    DEF OUTPUT PARAM par_dscritic AS CHAR NO-UNDO.

    DEF VAR aux_listachr AS CHAR            NO-UNDO.
    DEF VAR aux_nrextent AS HANDLE EXTENT   NO-UNDO.
    DEF VAR aux_indletra AS INT             NO-UNDO.

    /* Verificacoes para o nome */
    ASSIGN aux_listachr = "=,%,&,#,+,?,.,/,;,[,],!,@,$,(,),*,|,\,:,<,>".

    EXTENT(aux_nrextent) = NUM-ENTRIES(aux_listachr).

    DO aux_indletra = 1 TO EXTENT(aux_nrextent):
       IF  INDEX(par_nmtitcrd,ENTRY(aux_indletra,aux_listachr)) <> 0 THEN
           DO:
               ASSIGN  par_dscritic = "O Caracter " + TRIM(ENTRY(aux_indletra,
                                                                aux_listachr))
                                     + " nao e permitido! " +
                                     "Caracteres invalidos: " +
                                     "=%&#+?',./;][!@$()*|\:<>".
               
                RETURN "NOK".
           END.
    END.

    RETURN "OK".

END PROCEDURE.

/************************************
    OPCAO ENCERRAMENTO
    
    Termo de Encerramento
*************************************/
PROCEDURE termo_encerra_cartao:

    DEF  INPUT PARAM par_cdcooper AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_idorigem AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_cdoperad AS CHAR                           NO-UNDO.
    DEF  INPUT PARAM par_nmdatela AS CHAR                           NO-UNDO. 
    DEF  INPUT PARAM par_nrdconta AS INTE FORMAT "zzzz,zzz,9"       NO-UNDO.    
    DEF  INPUT PARAM par_dtmvtolt AS DATE                           NO-UNDO.
    DEF  INPUT PARAM par_nrctrcrd AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_dsiduser AS CHAR                           NO-UNDO.

    DEF OUTPUT PARAM par_nmarqimp AS CHAR                           NO-UNDO.
    DEF OUTPUT PARAM par_nmarqpdf AS CHAR                           NO-UNDO.

    DEF OUTPUT PARAM TABLE FOR tt-erro.    

    DEF VAR hb1wgen0028i    AS HANDLE                           NO-UNDO.    

    RUN sistema/generico/procedures/b1wgen0028i.p 
        PERSISTENT SET hb1wgen0028i.

    IF  NOT VALID-HANDLE(hb1wgen0028i)  THEN
        DO:
           ASSIGN aux_cdcritic = 0 
                  aux_dscritic = "Handle invalido para BO " +
                                 "b1wgen0028i.".
           
           RUN gera_erro (INPUT par_cdcooper,
                          INPUT 0,
                          INPUT 0,
                          INPUT 1,            /** Sequencia **/
                          INPUT aux_cdcritic,
                          INPUT-OUTPUT aux_dscritic).


           RETURN "NOK".

        END.

    /* isolando a montagem do arquivo de impressao em outro fonte */
    RUN termo_encerra_cartao IN hb1wgen0028i ( INPUT par_cdcooper,
                                               INPUT par_idorigem,
                                               INPUT par_cdoperad,
                                               INPUT par_nmdatela,
                                               INPUT par_nrdconta,
                                               INPUT par_dtmvtolt,
                                               INPUT par_nrctrcrd,
                                               INPUT par_dsiduser,
                                              OUTPUT par_nmarqimp,
                                              OUTPUT par_nmarqpdf,
                                              OUTPUT TABLE tt-erro).

    IF  RETURN-VALUE = "NOK" THEN
        DO:
            FIND FIRST tt-erro NO-LOCK NO-ERROR.
            IF  AVAIL tt-erro THEN 
                DO:
                    DELETE PROCEDURE hb1wgen0028i.           
                    RETURN "NOK".
                END.

        END.

    DELETE PROCEDURE hb1wgen0028i.

END PROCEDURE.


/************************************
    OPCAO EXTRATO
*************************************/
/*............................................................................*/

/*** PROCEDURE DE CONSULTA DO EXTRATO CARTAO BRADESCO **/
PROCEDURE extrato_cartao_bradesco:
    
    DEF  INPUT PARAM par_cdcooper AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrdconta AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrcrcard AS DECI                           NO-UNDO.
    DEF  INPUT PARAM par_dtvctini AS DATE                           NO-UNDO.
    DEF  INPUT PARAM par_dtvctfim AS DATE                           NO-UNDO.

    DEF OUTPUT PARAM TABLE FOR tt-extrato-cartao.
    DEF OUTPUT PARAM TABLE FOR tt-erro.

    EMPTY TEMP-TABLE tt-extrato-cartao.
    EMPTY TEMP-TABLE tt-erro.

    FIND FIRST crawcrd WHERE crawcrd.cdcooper = par_cdcooper  AND
                             crawcrd.nrdconta = par_nrdconta  AND
                             crawcrd.nrcrcard = par_nrcrcard
                             NO-LOCK NO-ERROR.

    IF   NOT AVAILABLE crawcrd THEN
         DO:
             ASSIGN aux_cdcritic = 546
                    aux_dscritic = "".

             RUN gera_erro (INPUT par_cdcooper,
                            INPUT 0,
                            INPUT 0,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).

             RETURN "NOK".
         END.


   FIND craptlc WHERE craptlc.cdcooper = par_cdcooper       AND
                      craptlc.cdadmcrd = crawcrd.cdadmcrd   AND
                      craptlc.tpcartao = crawcrd.tpcartao   AND
                      craptlc.cdlimcrd = crawcrd.cdlimcrd   AND
                      craptlc.dddebito = 0                  NO-LOCK NO-ERROR.

   IF   NOT AVAILABLE craptlc   THEN
        DO:
            ASSIGN aux_cdcritic = 532
                   aux_dscritic = "".

            RUN gera_erro (INPUT par_cdcooper,
                           INPUT 0,
                           INPUT 0,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                                      
            RETURN "NOK".
 
        END.

    FOR FIRST crapass FIELDS(nmprimtl)
                           WHERE crapass.cdcooper = par_cdcooper  AND
                             crapass.nrdconta = par_nrdconta
                             NO-LOCK: END.

    IF   NOT AVAILABLE crapass THEN
         DO:
             ASSIGN aux_cdcritic = 251
                    aux_dscritic = "".

             RUN gera_erro (INPUT par_cdcooper,
                            INPUT 0,
                            INPUT 0,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).

             RETURN "NOK".
         END.
                 
   FOR EACH crapecv NO-LOCK
      WHERE crapecv.cdcooper  = crawcrd.cdcooper
        AND crapecv.nrdconta  = crawcrd.nrdconta
        AND crapecv.nrcrcard  = crawcrd.nrcrcard
        AND crapecv.dtvencto >= par_dtvctini
        AND crapecv.dtvencto <= par_dtvctfim
        AND crapecv.cdcritic  = 0
         BY crapecv.dtcompra
         BY crapecv.nmtitcrd:

       CREATE tt-extrato-cartao.

       ASSIGN tt-extrato-cartao.cdcooper = crapecv.cdcooper  /*  01  */
              tt-extrato-cartao.nrcrcard = crapecv.nrcrcard  /*  02  */
              tt-extrato-cartao.nrdconta = crapecv.nrdconta  /*  03  */
              tt-extrato-cartao.nmtitcrd = crapecv.nmtitcrd  /*  04  */
              tt-extrato-cartao.nmprimtl = crapass.nmprimtl  /*  05  */
              tt-extrato-cartao.dtvencto = crapecv.dtvencto  /*  06  */
              tt-extrato-cartao.dtcompra = crapecv.dtcompra  /*  07  */
              tt-extrato-cartao.cdmoedtr = crapecv.cdmoedtr  /*  08  */
              tt-extrato-cartao.dsatvcom = crapecv.dsatvcom  /*  09  */
              
              /*Replace para caracteres especiais - Sem, retorna erro XML */
              tt-extrato-cartao.dsestabe = IF crapecv.dsparcel <> "" THEN 
                                              TRIM(REPLACE(crapecv.dsestabe,"&","&amp;")) + /*  10  */
                                              " " + SUBSTR(crapecv.dsparcel,1,3)          +
                                              "/" + SUBSTR(crapecv.dsparcel,4,2)
                                           ELSE
                                              REPLACE(crapecv.dsestabe,"&","&amp;")
              tt-extrato-cartao.nmcidade = crapecv.nmcidade  /*  11  */
              tt-extrato-cartao.cdufende = crapecv.cdufende  /*  12  */
              tt-extrato-cartao.idseqinc = crapecv.idseqinc  /*  13  */
              tt-extrato-cartao.indebcre = crapecv.indebcre  /*  14  */
              tt-extrato-cartao.nmarqimp = crapecv.nmarqimp  /*  15  */
              tt-extrato-cartao.tpatvcom = crapecv.tpatvcom  /*  16  */
              tt-extrato-cartao.vlcpaori = crapecv.vlcpaori  /*  17  */
              tt-extrato-cartao.vlcparea = crapecv.vlcparea  /*  18  */
              tt-extrato-cartao.dtmvtolt = crapecv.dtmvtolt  /*  19  */
              tt-extrato-cartao.vllimite = craptlc.vllimcrd  /*  20  */
              tt-extrato-cartao.cdcritic = crapecv.cdcritic  /*  21  */
              tt-extrato-cartao.cdoperad = crapecv.cdoperad  /*  22  */
              tt-extrato-cartao.cdtransa = crapecv.cdtransa. /*  23  */
    END. /* Fim FOR EACH crapecv */

    RETURN "OK".


END PROCEDURE.


/************************************
    OPCAO EXTRATO - IMPRESSAO
*************************************/
PROCEDURE extrato_bradesco_impressao:

    DEF  INPUT PARAM par_idorigem AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_cdcooper AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrdconta AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrcrcard AS DECI                           NO-UNDO.
    DEF  INPUT PARAM par_dtvctini AS DATE                           NO-UNDO.
    DEF  INPUT PARAM par_dtvctfim AS DATE                           NO-UNDO.
    DEF  INPUT PARAM par_dsiduser AS CHAR                           NO-UNDO.

    DEF OUTPUT PARAM par_nmarqimp AS CHAR                           NO-UNDO.
    DEF OUTPUT PARAM par_nmarqpdf AS CHAR                           NO-UNDO.
    DEF OUTPUT PARAM TABLE FOR tt-erro.

    DEF    VAR hb1wgen0028i        AS HANDLE                        NO-UNDO.

    EMPTY TEMP-TABLE tt-erro.

    FIND FIRST crawcrd WHERE crawcrd.cdcooper = par_cdcooper  AND
                             crawcrd.nrdconta = par_nrdconta  AND
                             crawcrd.nrcrcard = par_nrcrcard
        NO-LOCK NO-ERROR.

    IF   NOT AVAILABLE crawcrd THEN
         DO:
             ASSIGN aux_cdcritic = 546
                    aux_dscritic = "".

             RUN gera_erro (INPUT par_cdcooper,
                            INPUT 0,
                            INPUT 0,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).

             RETURN "NOK".
         END.



    RUN sistema/generico/procedures/b1wgen0028i.p 
        PERSISTENT SET hb1wgen0028i.

    IF  NOT VALID-HANDLE(hb1wgen0028i)  THEN
        DO:
           ASSIGN aux_cdcritic = 0 
                  aux_dscritic = "Handle invalido para BO " +
                                 "b1wgen0028i.".
           
           RUN gera_erro (INPUT par_cdcooper,
                          INPUT 0,
                          INPUT 0,
                          INPUT 1,            /** Sequencia **/
                          INPUT aux_cdcritic,
                          INPUT-OUTPUT aux_dscritic).

           RETURN "NOK".

        END.


    /* isolando a montagem do arquivo de impressao em outro fonte */
    RUN extrato_bradesco_impressao IN hb1wgen0028i ( INPUT par_idorigem,
                                                     INPUT par_cdcooper,
                                                     INPUT par_nrdconta,
                                                     INPUT par_nrcrcard,
                                                     INPUT par_dtvctini,
                                                     INPUT par_dtvctfim,
                                                     INPUT par_dsiduser,
                                                    OUTPUT par_nmarqimp,
                                                    OUTPUT par_nmarqpdf,
                                                    OUTPUT TABLE tt-erro).


    IF  RETURN-VALUE = "NOK" THEN
        DO:
            FIND FIRST tt-erro NO-LOCK NO-ERROR.
            IF  AVAIL tt-erro THEN 
                DO:
                    DELETE PROCEDURE hb1wgen0028i.           
                    RETURN "NOK".
                END.

        END.

    DELETE PROCEDURE hb1wgen0028i.

END PROCEDURE.


/*** PROCEDURE DE CONSULTA DE PERIODOS PARA EXTRATO CARTAO BRADESCO **/
PROCEDURE extrato_periodos:
    
    DEF  INPUT PARAM par_cdcooper AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_nrdconta AS INTE                           NO-UNDO.
    DEF  INPUT PARAM par_dtmvtolt AS DATE                           NO-UNDO.

    DEF OUTPUT PARAM TABLE FOR tt-periodos.
    DEF OUTPUT PARAM TABLE FOR tt-cartoes-filtro.
    DEF OUTPUT PARAM TABLE FOR tt-erro.

    DEF          VAR aux_contador AS INTE    INIT 0                 NO-UNDO.
    DEF          VAR aux_mesextra AS INTE                           NO-UNDO.
    DEF          VAR aux_anoextra AS INTE                           NO-UNDO.
    DEF          VAR aux_prdiames AS DATE                           NO-UNDO.
    DEF          VAR aux_uldiames AS DATE                           NO-UNDO.
    DEF          VAR aux_dtmvtolt AS DATE                           NO-UNDO.
    DEF          VAR aux_nmcrexib AS CHAR FORMAT "x(20)"            NO-UNDO.
    DEF          VAR aux_nmcrares AS DEC  FORMAT "zzzzzzz9"         NO-UNDO.
    
    EMPTY TEMP-TABLE tt-periodos.
    EMPTY TEMP-TABLE tt-cartoes-filtro.
    EMPTY TEMP-TABLE tt-erro.
    
    ASSIGN aux_dtmvtolt = par_dtmvtolt
           aux_anoextra = YEAR(aux_dtmvtolt)
           aux_mesextra = MONTH(aux_dtmvtolt). 
    
    /* Mês seguinte ao mês da data atual */
    IF   aux_mesextra = 12 THEN
         ASSIGN aux_uldiames = date("28/01" + "/" + STRING(YEAR(aux_dtmvtolt) + 1)).
    ELSE 
         ASSIGN aux_uldiames = date("28/" + STRING(MONTH(aux_dtmvtolt) + 1) + "/" +  
                                           STRING(YEAR(aux_dtmvtolt))).
 
   
    /* Se já tiver extrato para o mês seguinte, esse será o último período a ser exibido */
    FIND FIRST crapecv NO-LOCK WHERE crapecv.cdcooper = par_cdcooper  AND
                                     crapecv.nrdconta = par_nrdconta  AND
                                     crapecv.cdcritic = 0             AND
                                     MONTH(crapecv.dtvencto) = MONTH(aux_uldiames) AND
                                     YEAR(crapecv.dtvencto)  = YEAR(aux_uldiames)
                                     NO-ERROR.

    /* Se não tiver extrato importado para o mês seguinte o último período a ser listado 
       será o mês atual */
    IF  NOT AVAIL crapecv THEN
        DO:
            ASSIGN aux_uldiames = aux_uldiames - DAY(aux_uldiames).
        END.

    ASSIGN  aux_anoextra = YEAR(aux_uldiames)
            aux_mesextra = MONTH(aux_uldiames). 

    CREATE tt-periodos.
    ASSIGN tt-periodos.cdseqper = 0.
           tt-periodos.dsperiod = STRING(aux_mesextra,"99") + "/" +
                                  STRING(aux_anoextra,"9999").

     DO  WHILE aux_contador < 5:
         IF   aux_mesextra = 1 THEN /* Exceção Janeiro */
              DO:
                 aux_mesextra = 12.
                 aux_anoextra = aux_anoextra - 1.
              END.
          ELSE
              aux_mesextra = aux_mesextra - 1.

          aux_contador = aux_contador + 1.

          CREATE tt-periodos.
          ASSIGN tt-periodos.cdseqper = aux_contador.
                 tt-periodos.dsperiod = STRING(aux_mesextra,"99") + "/" +
                                        STRING(aux_anoextra,"9999").

     END.
     
     /* Lista os cartões com extrato no período para seleção */ 
     aux_prdiames = DATE("01/" + STRING(aux_mesextra) + "/" + STRING(aux_anoextra)).
     
     FOR EACH crapecv WHERE  crapecv.cdcooper = par_cdcooper  AND
                             crapecv.nrdconta = par_nrdconta  AND
                             crapecv.cdcritic = 0             AND
                             crapecv.dtvencto >= aux_prdiames AND
                             crapecv.dtvencto <= aux_uldiames 
                     NO-LOCK BREAK BY nrcrcard.
 
        IF  FIRST-OF (crapecv.nrcrcard) THEN
        DO:

            ASSIGN aux_nmcrexib = SUBSTR(STRING(crapecv.nrcrcard),1,4) +
                   ".****.****." + SUBSTR(STRING(crapecv.nrcrcard),13,4).
    
            ASSIGN aux_nmcrares = DECI(SUBSTR(STRING(crapecv.nrcrcard),1,4) +
                                  SUBSTR(STRING(crapecv.nrcrcard),13,4)).
    
            CREATE tt-cartoes-filtro.
            ASSIGN tt-cartoes-filtro.nrcrexib = aux_nmcrexib
                   tt-cartoes-filtro.nrcarres = aux_nmcrares.
        END. 

     END.

     RETURN "OK".


END PROCEDURE.


PROCEDURE busca-cartao:

   DEF INPUT PARAM par_cdcooper AS INTE                    NO-UNDO.
   DEF INPUT PARAM par_tipopesq AS INTE                    NO-UNDO.
   DEF INPUT PARAM par_dscartao AS CHAR                    NO-UNDO.    
   DEF INPUT PARAM par_nrregist AS INT                     NO-UNDO.
   DEF INPUT PARAM par_nriniseq AS INT                     NO-UNDO.
   DEF INPUT PARAM par_flgpagin AS LOG                     NO-UNDO.
   DEF INPUT PARAM par_cddepart AS INTE                    NO-UNDO.
   
   DEF OUTPUT PARAM par_qtregist AS INT                    NO-UNDO.
   DEF OUTPUT PARAM TABLE FOR tt-cartao.
   DEF OUTPUT PARAM TABLE FOR tt-erro.
   
   DEF VAR aux_nrcrcard AS DECIMAL                         NO-UNDO.
   DEF VAR aux_flenccrd AS LOGICAL                         NO-UNDO.
   DEF VAR aux_nrregist AS INT                             NO-UNDO.
   DEF VAR aux_nrdctitg AS CHAR                            NO-UNDO.

   DEF VAR aux_dsdctitg AS CHAR                            NO-UNDO.
   DEF VAR aux_stsnrcal AS LOGICAL                         NO-UNDO.
   
   EMPTY TEMP-TABLE tt-cartao.

   ASSIGN aux_flenccrd = FALSE
          aux_nrregist = par_nrregist.

   IF  par_tipopesq = 1 THEN
       aux_nrcrcard = DECIMAL(par_dscartao).
   ELSE
       par_dscartao = TRIM(par_dscartao).
           
           
   IF par_cdcooper <> 3  AND
      par_cddepart <> 2 THEN    /* CARTOES */
      DO:
         FIND crapcop WHERE crapcop.cdcooper = par_cdcooper NO-LOCK.

         IF par_tipopesq = 1 THEN
            DO:
               FOR EACH crawcrd WHERE crawcrd.cdcooper = par_cdcooper AND 
                                      crawcrd.nrcrcard = aux_nrcrcard
                                      NO-LOCK,

                   EACH crapass WHERE crapass.cdcooper = par_cdcooper AND
                                      crapass.nrdconta = crawcrd.nrdconta
                                      NO-LOCK BY crawcrd.nmtitcrd:

                   ASSIGN par_qtregist = par_qtregist + 1.

                   /* controles da paginação */
                   IF  par_flgpagin                                   AND
                      (par_qtregist < par_nriniseq                    OR
                       par_qtregist > (par_nriniseq + par_nrregist))  THEN
                       NEXT.

                   IF NOT par_flgpagin OR aux_nrregist > 0 THEN
                      DO:
                         IF crapass.inpessoa = 1 THEN
                            DO:
                               FIND crapttl WHERE
                                    crapttl.cdcooper = crapass.cdcooper AND
                                    crapttl.nrdconta = crapass.nrdconta AND
                                    crapttl.idseqttl = 1 
                                    NO-LOCK NO-ERROR.

                            END.
                         ELSE
                         IF crapass.inpessoa = 2 THEN
                            DO:
                               FIND crapjur WHERE 
                                    crapjur.cdcooper = crapass.cdcooper AND
                                    crapjur.nrdconta = crapass.nrdconta
                                    NO-LOCK NO-ERROR.

                            END.
                      
                         CREATE tt-cartao.

                         ASSIGN aux_flenccrd       = TRUE
                                tt-cartao.nmrescop = crapcop.nmrescop
                                tt-cartao.nrdconta = crawcrd.nrdconta
                                tt-cartao.nrcrcard = crawcrd.nrcrcard
                                tt-cartao.nmtitcrd = crawcrd.nmtitcrd
                                tt-cartao.cdadmcrd = crawcrd.cdadmcrd
                                tt-cartao.nmextttl = IF crapass.inpessoa = 1 THEN
                                                         crapttl.nmextttl
                                                     ELSE
                                                         crapjur.nmextttl
                                tt-cartao.nmplastc = crawcrd.nmtitcrd
                                tt-cartao.cdagenci = crapass.cdagenci
                                tt-cartao.nrdctitg = crapass.nrdctitg  
                                tt-cartao.insitcrd = retorna-situacao (INPUT crawcrd.insitcrd,
                                                                       INPUT crawcrd.dtsol2vi,
                                                                       INPUT crawcrd.cdadmcrd).
                                                         
                                                    
                      END.

                   IF  par_flgpagin  THEN
                       ASSIGN aux_nrregist = aux_nrregist - 1.

               END. /* FIM FOR EACH crawcrd */  

            END. /* FIM par_tipopesq = 1 */
         ELSE
         IF par_tipopesq = 2 THEN
            DO:
               FOR EACH crawcrd WHERE crawcrd.cdcooper = par_cdcooper
                                      NO-LOCK,

                   EACH crapass WHERE  crapass.cdcooper = crawcrd.cdcooper AND
                                       crapass.nrdconta = crawcrd.nrdconta AND
                                      (crapass.nmprimtl MATCHES "*" +
                                       par_dscartao + "*")
                                       NO-LOCK BY crawcrd.nmtitcrd:

                   ASSIGN par_qtregist = par_qtregist + 1.

                   /* controles da paginação */
                   IF  par_flgpagin                                   AND
                      (par_qtregist < par_nriniseq                    OR
                       par_qtregist > (par_nriniseq + par_nrregist))  THEN
                       NEXT.

                   IF NOT par_flgpagin OR aux_nrregist > 0 THEN
                      DO:
                         IF crapass.inpessoa = 1 THEN
                            DO:
                               FIND crapttl WHERE
                                    crapttl.cdcooper = crapass.cdcooper AND
                                    crapttl.nrdconta = crapass.nrdconta AND
                                    crapttl.idseqttl = 1 
                                    NO-LOCK NO-ERROR.

                            END.
                         ELSE
                         IF crapass.inpessoa = 2 THEN
                            DO:
                               FIND crapjur WHERE 
                                    crapjur.cdcooper = crapass.cdcooper AND
                                    crapjur.nrdconta = crapass.nrdconta
                                    NO-LOCK NO-ERROR.

                            END.

                         CREATE tt-cartao.

                         ASSIGN aux_flenccrd       = TRUE
                                tt-cartao.nmrescop = crapcop.nmrescop
                                tt-cartao.nrdconta = crawcrd.nrdconta
                                tt-cartao.nrcrcard = crawcrd.nrcrcard
                                tt-cartao.nmtitcrd = crawcrd.nmtitcrd
                                tt-cartao.cdadmcrd = crawcrd.cdadmcrd
                                tt-cartao.nmextttl = IF crapass.inpessoa = 1 THEN
                                                         crapttl.nmextttl
                                                     ELSE
                                                         crapjur.nmextttl
                                tt-cartao.nmplastc = crawcrd.nmtitcrd
                                tt-cartao.cdagenci = crapass.cdagenci
                                tt-cartao.nrdctitg = crapass.nrdctitg  
                                tt-cartao.insitcrd = retorna-situacao (INPUT crawcrd.insitcrd,
                                                                       INPUT crawcrd.dtsol2vi,
                                                                       INPUT crawcrd.cdadmcrd).
                                                  
                      END.
                    
                   IF par_flgpagin  THEN
                      ASSIGN aux_nrregist = aux_nrregist - 1.

               END. /* FIM FOR EACH crawcrd */

            END. /* FIM par_tipopesq = 2 */     
         ELSE
         IF par_tipopesq = 3 THEN
            DO:
               FOR EACH crawcrd WHERE crawcrd.cdcooper = par_cdcooper AND
                                     (crawcrd.nmtitcrd MATCHES "*" + 
                                      par_dscartao + "*")
                                      NO-LOCK,

                   EACH crapass WHERE crapass.cdcooper = crawcrd.cdcooper AND
                                      crapass.nrdconta = crawcrd.nrdconta 
                                      NO-LOCK BY crawcrd.nmtitcrd:

                   ASSIGN par_qtregist = par_qtregist + 1.

                   /* controles da paginação */
                   IF  par_flgpagin                                   AND
                      (par_qtregist < par_nriniseq                    OR
                       par_qtregist > (par_nriniseq + par_nrregist))  THEN
                       NEXT.

                   IF NOT par_flgpagin OR aux_nrregist > 0 THEN
                      DO:
                         IF crapass.inpessoa = 1 THEN
                            DO: 
                               FIND crapttl WHERE
                                    crapttl.cdcooper = crapass.cdcooper AND
                                    crapttl.nrdconta = crapass.nrdconta AND
                                    crapttl.idseqttl = 1 
                                    NO-LOCK NO-ERROR.

                            END.
                         ELSE
                         IF crapass.inpessoa = 2 THEN
                            DO:
                               FIND crapjur WHERE
                                    crapjur.cdcooper = crapass.cdcooper AND
                                    crapjur.nrdconta = crapass.nrdconta 
                                    NO-LOCK NO-ERROR.

                            END.
                     
                         CREATE tt-cartao.

                         ASSIGN aux_flenccrd       = TRUE
                                tt-cartao.nmrescop = crapcop.nmrescop
                                tt-cartao.nrdconta = crawcrd.nrdconta
                                tt-cartao.nrcrcard = crawcrd.nrcrcard
                                tt-cartao.nmtitcrd = crawcrd.nmtitcrd
                                tt-cartao.cdadmcrd = crawcrd.cdadmcrd
                                tt-cartao.nmextttl = IF crapass.inpessoa = 1 THEN
                                                         crapttl.nmextttl
                                                     ELSE
                                                         crapjur.nmextttl
                                tt-cartao.nmplastc = crawcrd.nmtitcrd
                                tt-cartao.cdagenci = crapass.cdagenci
                                tt-cartao.nrdctitg = crapass.nrdctitg  
                                tt-cartao.insitcrd = retorna-situacao (INPUT crawcrd.insitcrd,
                                                                       INPUT crawcrd.dtsol2vi,
                                                                       INPUT crawcrd.cdadmcrd).
                                                  
                      END.

                   IF par_flgpagin  THEN
                      ASSIGN aux_nrregist = aux_nrregist - 1.

               END.  /* FIM FOR EACH crawcrd */     

            END.  /* FIM par_tipopesq = 3 */

            IF par_tipopesq = 4 THEN
            DO:

                aux_nrdctitg = par_dscartao + "0".

               /* Calcula digito verificador Conta ITG*/
               RUN fontes/digbbx.p (INPUT DEC(aux_nrdctitg),
                                    OUTPUT aux_dsdctitg,
                                    OUTPUT aux_stsnrcal).

               FOR EACH crapass WHERE crapass.cdcooper = crapcop.cdcooper  AND
                                      crapass.nrdctitg = aux_dsdctitg,
                   EACH crawcrd WHERE crawcrd.cdcooper = crapass.cdcooper  AND
                                      crawcrd.nrdconta = crapass.nrdconta
                                      NO-LOCK BY crawcrd.nrcctitg:

                   ASSIGN par_qtregist = par_qtregist + 1.

                   /* controles da paginação */
                   IF  par_flgpagin                                   AND
                      (par_qtregist < par_nriniseq                    OR
                       par_qtregist > (par_nriniseq + par_nrregist))  THEN
                       NEXT.

                   IF NOT par_flgpagin OR aux_nrregist > 0 THEN
                      DO:
                         IF crapass.inpessoa = 1 THEN
                            DO:
                               FIND crapttl WHERE
                                    crapttl.cdcooper = crapass.cdcooper AND
                                    crapttl.nrdconta = crapass.nrdconta AND
                                    crapttl.idseqttl = 1 
                                    NO-LOCK NO-ERROR.

                            END.
                         ELSE
                         IF crapass.inpessoa = 2 THEN
                            DO:
                               FIND crapjur WHERE 
                                    crapjur.cdcooper = crapass.cdcooper AND
                                    crapjur.nrdconta = crapass.nrdconta
                                    NO-LOCK NO-ERROR.

                            END.

                         CREATE tt-cartao.

                         ASSIGN aux_flenccrd       = TRUE
                                tt-cartao.nmrescop = crapcop.nmrescop
                                tt-cartao.nrdconta = crawcrd.nrdconta
                                tt-cartao.nrcrcard = crawcrd.nrcrcard
                                tt-cartao.nmtitcrd = crawcrd.nmtitcrd
                                tt-cartao.cdadmcrd = crawcrd.cdadmcrd
                                tt-cartao.nmextttl = IF crapass.inpessoa = 1 THEN
                                                        crapttl.nmextttl
                                                     ELSE
                                                         crapjur.nmextttl
                                tt-cartao.nmplastc = crawcrd.nmtitcrd
                                tt-cartao.cdagenci = crapass.cdagenci
                                tt-cartao.nrdctitg = crapass.nrdctitg  
                                tt-cartao.insitcrd = retorna-situacao (INPUT crawcrd.insitcrd,
                                                                       INPUT crawcrd.dtsol2vi,
                                                                       INPUT crawcrd.cdadmcrd).
                                                  
                      END. 
                    
                   IF par_flgpagin  THEN
                      ASSIGN aux_nrregist = aux_nrregist - 1.

               END. /* FIM FOR EACH crawcrd */

            END. /* FIM par_tipopesq = 4 */

      END. /* FIM IF cdcooper <> 3 */
   ELSE
     DO:
        IF par_tipopesq = 1 THEN
           DO:
              FOR EACH crapcop WHERE crapcop.cdcooper <> 3 NO-LOCK,
                  
                  EACH crawcrd WHERE 
                       crawcrd.cdcooper = crapcop.cdcooper  AND
                       crawcrd.nrcrcard = aux_nrcrcard      NO-LOCK,

                      EACH crapass WHERE 
                           crapass.cdcooper = crapcop.cdcooper AND
                           crapass.nrdconta = crawcrd.nrdconta  
                           NO-LOCK BY crawcrd.nmtitcrd:
                  
                  ASSIGN par_qtregist = par_qtregist + 1.

                  /* controles da paginação */
                  IF  par_flgpagin  AND
                     (par_qtregist < par_nriniseq  OR
                      par_qtregist > (par_nriniseq + par_nrregist))  THEN
                      NEXT.

                  IF NOT par_flgpagin OR aux_nrregist > 0 THEN
                     DO:
                        CREATE tt-cartao.

                        ASSIGN aux_flenccrd       = TRUE
                               tt-cartao.nmrescop = crapcop.nmrescop
                               tt-cartao.nrdconta = crawcrd.nrdconta
                               tt-cartao.nrcrcard = crawcrd.nrcrcard
                               tt-cartao.nmtitcrd = crawcrd.nmtitcrd
                               tt-cartao.cdadmcrd = crawcrd.cdadmcrd
                               tt-cartao.nmextttl = crapass.nmprimtl
                               tt-cartao.nmplastc = crawcrd.nmtitcrd
                               tt-cartao.cdagenci = crapass.cdagenci
                               tt-cartao.nrdctitg = crapass.nrdctitg  
                               tt-cartao.insitcrd = retorna-situacao (INPUT crawcrd.insitcrd,
                                                                      INPUT crawcrd.dtsol2vi,
                                                                      INPUT crawcrd.cdadmcrd).
                     END.

                  IF par_flgpagin  THEN
                     ASSIGN aux_nrregist = aux_nrregist - 1.

              END.

           END. /* FIM par_tipopesq = 1 */
        ELSE
        IF par_tipopesq = 2 THEN
           DO:
              FOR EACH crapcop WHERE crapcop.cdcooper <> 3 NO-LOCK,

                  EACH crawcrd WHERE 
                       crawcrd.cdcooper = crapcop.cdcooper NO-LOCK,

                      EACH crapass WHERE  
                           crapass.cdcooper = crawcrd.cdcooper  AND
                           crapass.nrdconta = crawcrd.nrdconta  AND
                           (crapass.nmprimtl MATCHES "*" +
                                          par_dscartao + "*")
                           NO-LOCK BY crawcrd.nmtitcrd:

                  ASSIGN par_qtregist = par_qtregist + 1.

                  /* controles da paginação */
                  IF  par_flgpagin                                   AND
                     (par_qtregist < par_nriniseq                    OR
                      par_qtregist > (par_nriniseq + par_nrregist))  THEN
                      NEXT.

                  IF NOT par_flgpagin OR aux_nrregist > 0 THEN
                     DO:
                        IF crapass.inpessoa = 1 THEN
                           DO:
                              FIND crapttl WHERE
                                   crapttl.cdcooper = crapass.cdcooper AND
                                   crapttl.nrdconta = crapass.nrdconta AND
                                   crapttl.idseqttl = 1 
                                   NO-LOCK NO-ERROR.

                           END.
                        ELSE
                        IF crapass.inpessoa = 2 THEN
                           DO:
                              FIND crapjur WHERE
                                   crapjur.cdcooper = crapass.cdcooper AND
                                   crapjur.nrdconta = crapass.nrdconta
                                   NO-LOCK NO-ERROR.

                           END.

                        CREATE tt-cartao.

                        ASSIGN aux_flenccrd       = TRUE
                               tt-cartao.nmrescop = crapcop.nmrescop
                               tt-cartao.nrdconta = crawcrd.nrdconta
                               tt-cartao.nrcrcard = crawcrd.nrcrcard
                               tt-cartao.nmtitcrd = crawcrd.nmtitcrd
                               tt-cartao.cdadmcrd = crawcrd.cdadmcrd
                               tt-cartao.nmextttl = 
                                              IF crapass.inpessoa = 1 THEN
                                                 crapttl.nmextttl
                                              ELSE
                                                 crapjur.nmextttl
                               tt-cartao.nmplastc = crawcrd.nmtitcrd
                               tt-cartao.cdagenci = crapass.cdagenci
                               tt-cartao.nrdctitg = crapass.nrdctitg  
                               tt-cartao.insitcrd = retorna-situacao (INPUT crawcrd.insitcrd,
                                                                      INPUT crawcrd.dtsol2vi,
                                                                      INPUT crawcrd.cdadmcrd).
                     END.
     
                  IF par_flgpagin  THEN
                     ASSIGN aux_nrregist = aux_nrregist - 1.
                  
              END. 

           END. /* FIM par_tipopesq = 2 */     
        ELSE
        IF par_tipopesq = 3 THEN
           DO:
              FOR EACH crapcop WHERE crapcop.cdcooper <> 3 NO-LOCK,
                  
                  EACH crawcrd WHERE  
                       crawcrd.cdcooper = crapcop.cdcooper AND
                      (crawcrd.nmtitcrd MATCHES "*" + par_dscartao + "*")
                       NO-LOCK,

                      EACH crapass WHERE 
                           crapass.cdcooper = crawcrd.cdcooper AND
                           crapass.nrdconta = crawcrd.nrdconta 
                           NO-LOCK BY crawcrd.nmtitcrd:

                  ASSIGN par_qtregist = par_qtregist + 1.

                  /* controles da paginação */
                  IF  par_flgpagin                                   AND
                     (par_qtregist < par_nriniseq                    OR
                      par_qtregist > (par_nriniseq + par_nrregist))  THEN
                      NEXT.

                  IF NOT par_flgpagin OR aux_nrregist > 0 THEN
                     DO:
                        IF crapass.inpessoa = 1 THEN
                           DO: 
                              FIND crapttl WHERE
                                   crapttl.cdcooper = crapass.cdcooper AND
                                   crapttl.nrdconta = crapass.nrdconta AND
                                   crapttl.idseqttl = 1 
                                   NO-LOCK NO-ERROR.

                           END.
                        ELSE
                        IF crapass.inpessoa = 2 THEN
                           DO:
                              FIND crapjur WHERE 
                                   crapjur.cdcooper = crapass.cdcooper AND
                                   crapjur.nrdconta = crapass.nrdconta
                                   NO-LOCK NO-ERROR.

                           END.
                        
                        CREATE tt-cartao.

                        ASSIGN aux_flenccrd       = TRUE
                               tt-cartao.nmrescop = crapcop.nmrescop
                               tt-cartao.nrdconta = crawcrd.nrdconta
                               tt-cartao.nrcrcard = crawcrd.nrcrcard
                               tt-cartao.nmtitcrd = crawcrd.nmtitcrd
                               tt-cartao.cdadmcrd = crawcrd.cdadmcrd
                               tt-cartao.nmextttl = 
                                                IF crapass.inpessoa = 1 THEN
                                                   crapttl.nmextttl
                                                ELSE
                                                   crapjur.nmextttl
                               tt-cartao.nmplastc = crawcrd.nmtitcrd
                               tt-cartao.cdagenci = crapass.cdagenci
                               tt-cartao.nrdctitg = crapass.nrdctitg  
                               tt-cartao.insitcrd = retorna-situacao (INPUT crawcrd.insitcrd,
                                                                      INPUT crawcrd.dtsol2vi,
                                                                      INPUT crawcrd.cdadmcrd).
                      END.

                  IF par_flgpagin  THEN
                     ASSIGN aux_nrregist = aux_nrregist - 1.
                  
              END.

           END.  /* FIM par_tipopesq = 3 */ 
           ELSE
           IF par_tipopesq = 4 THEN
           DO:

              aux_nrdctitg = par_dscartao + "0".

              /* Calcula digito verificador Conta ITG*/
              RUN fontes/digbbx.p (INPUT DEC(aux_nrdctitg),
                                   OUTPUT aux_dsdctitg,
                                   OUTPUT aux_stsnrcal).

              FOR EACH crapcop WHERE crapcop.cdcooper <> 3 NO-LOCK,
                  EACH crapass WHERE crapass.cdcooper = crapcop.cdcooper  AND
                                     crapass.nrdctitg = aux_dsdctitg,
                  EACH crawcrd WHERE crawcrd.cdcooper = crapcop.cdcooper  AND
                                     crawcrd.nrdconta = crapass.nrdconta
                                     NO-LOCK BY crawcrd.nrcctitg:
    
                   
                  ASSIGN par_qtregist = par_qtregist + 1.

                  /* controles da paginação */
                  IF  par_flgpagin                                   AND
                     (par_qtregist < par_nriniseq                    OR
                      par_qtregist > (par_nriniseq + par_nrregist))  THEN
                      NEXT.

                  IF NOT par_flgpagin OR aux_nrregist > 0 THEN
                     DO:
                        IF crapass.inpessoa = 1 THEN
                           DO:
                              FIND crapttl WHERE
                                   crapttl.cdcooper = crapass.cdcooper AND
                                   crapttl.nrdconta = crapass.nrdconta AND
                                   crapttl.idseqttl = 1 
                                   NO-LOCK NO-ERROR.

                           END.
                        ELSE
                        IF crapass.inpessoa = 2 THEN
                           DO:
                              FIND crapjur WHERE
                                   crapjur.cdcooper = crapass.cdcooper AND
                                   crapjur.nrdconta = crapass.nrdconta
                                   NO-LOCK NO-ERROR.

                           END.

                        CREATE tt-cartao.

                        ASSIGN aux_flenccrd       = TRUE
                               tt-cartao.nmrescop = crapcop.nmrescop
                               tt-cartao.nrdconta = crawcrd.nrdconta
                               tt-cartao.nrcrcard = crawcrd.nrcrcard
                               tt-cartao.nmtitcrd = crawcrd.nmtitcrd
                               tt-cartao.cdadmcrd = crawcrd.cdadmcrd
                               tt-cartao.nmextttl = 
                                              IF crapass.inpessoa = 1 THEN
                                                 crapttl.nmextttl
                                              ELSE
                                                 crapjur.nmextttl
                               tt-cartao.nmplastc = crawcrd.nmtitcrd
                               tt-cartao.cdagenci = crapass.cdagenci
                               tt-cartao.nrdctitg = crapass.nrdctitg 
                               tt-cartao.insitcrd = retorna-situacao (INPUT crawcrd.insitcrd,
                                                                      INPUT crawcrd.dtsol2vi,
                                                                      INPUT crawcrd.cdadmcrd).
                     END.

                  IF par_flgpagin  THEN
                     ASSIGN aux_nrregist = aux_nrregist - 1.
                  
              END. 

           END. /* FIM par_tipopesq = 4 */

     END. /* FIM IF cdcooper = 3 */
           
     IF  NOT aux_flenccrd THEN
     DO:
        ASSIGN aux_cdcritic = 0.
               aux_dscritic = "Nenhum cartao foi encontrado.".

        RUN gera_erro (INPUT par_cdcooper,
                       INPUT 0, /* cdagenci */
                       INPUT 0, /* nrdcaixa */
                       INPUT 1,            /** Sequencia **/
                       INPUT aux_cdcritic,
                       INPUT-OUTPUT aux_dscritic).
                                                  
        RETURN "NOK".

     END.
                               
     RETURN "OK".

END PROCEDURE. /* FIM busca-cartao */



/* Procedure para decodificar o nrdcrcard */
PROCEDURE identifica-cartao:

   DEF INPUT PARAM par_cdcooper AS INTE                    NO-UNDO.
   DEF INPUT PARAM par_nrdconta AS INTE                    NO-UNDO.
   DEF INPUT-OUTPUT PARAM par_nrcrcard AS DECI             NO-UNDO.    
   DEF OUTPUT PARAM TABLE FOR tt-erro.
                               
   DEF VAR aux_digitpri AS CHAR                            NO-UNDO.
   DEF VAR aux_digitsec AS CHAR                            NO-UNDO.

   EMPTY TEMP-TABLE tt-erro.

   ASSIGN aux_digitpri = SUBSTR(STRING(par_nrcrcard),1,4)
          aux_digitsec = SUBSTR(STRING(par_nrcrcard),5,4).
   
   FOR EACH crapcrd WHERE crapcrd.cdcooper = par_cdcooper AND
                           crapcrd.nrdconta = par_nrdconta AND
                           STRING(crapcrd.nrcrcard) 
                                MATCHES STRING(aux_digitpri) + "*" and
                           STRING(crapcrd.nrcrcard) 
                                MATCHES "*" + STRING(aux_digitsec) 
                            NO-LOCK BREAK BY nrcrcard.

        IF  FIRST-OF (crapcrd.nrcrcard) THEN
        DO:  
            ASSIGN par_nrcrcard = crapcrd.nrcrcard.
        END.

   END.
   RETURN "OK".

END PROCEDURE.

/* Procedure para decodificar o nrdcrcard */
PROCEDURE valida_dados_cartao:

   DEF  INPUT PARAM par_cdcooper AS INTE NO-UNDO.
   DEF  INPUT PARAM par_cdagenci AS INTE NO-UNDO.
   DEF  INPUT PARAM par_nrdcaixa AS INTE NO-UNDO.
   DEF  INPUT PARAM par_cdoperad AS CHAR NO-UNDO.
   DEF  INPUT PARAM par_nrdconta AS INTE NO-UNDO. 
   DEF  INPUT PARAM par_dtmvtolt AS DATE NO-UNDO.
   DEF  INPUT PARAM par_idorigem AS INTE NO-UNDO.
   DEF  INPUT PARAM par_nmdatela AS CHAR NO-UNDO.
   DEF  INPUT PARAM par_cdadmcrt AS INTE NO-UNDO.
   DEF  INPUT PARAM par_nmtitcrd AS CHAR NO-UNDO.
   DEF  INPUT PARAM par_nrcpfcgc AS DECI NO-UNDO.
   DEF  INPUT PARAM par_inpessoa AS INTE NO-UNDO.

   DEF OUTPUT PARAM TABLE FOR tt-dados-cartao.                                   
   DEF OUTPUT PARAM TABLE FOR tt-erro.      

   EMPTY TEMP-TABLE tt-erro.
   EMPTY TEMP-TABLE tt-dados-cartao.

   FOR FIRST crawcrd FIELDS(dddebito vllimcrd tpenvcrd tpdpagto nmempcrd
                            flgdebit)
       WHERE crawcrd.cdcooper = par_cdcooper AND
             crawcrd.nrdconta = par_nrdconta AND
             crawcrd.cdadmcrd = par_cdadmcrt AND
             crawcrd.insitcrd <> 5           AND /* Bloqueado */
             crawcrd.insitcrd <> 6           AND /* Cancelado */
             crawcrd.flgprcrd = 1
             NO-LOCK: END.
            
   IF AVAIL crawcrd THEN
       DO:
            CREATE tt-dados-cartao.
            ASSIGN tt-dados-cartao.dddebito = crawcrd.dddebito
                   tt-dados-cartao.vllimcrd = crawcrd.vllimcrd
                   tt-dados-cartao.tpenvcrd = crawcrd.tpenvcrd
                   tt-dados-cartao.tpdpagto = crawcrd.tpdpagto
                   tt-dados-cartao.nmempcrd = crawcrd.nmempcrd
                   tt-dados-cartao.flgdebit = crawcrd.flgdebit.

       END.
   ELSE
       DO: 
          IF (par_inpessoa = 1) THEN
          DO:
              ASSIGN aux_cdcritic = 0
                 aux_dscritic = "Atencao! Nao e possivel solicitar o adicional, " +
                                "nao existe cartao ativo para o titular.".

              RUN gera_erro (INPUT par_cdcooper,
                             INPUT par_cdagenci,
                             INPUT par_nrdcaixa,
                             INPUT 1,            /** Sequencia **/
                             INPUT aux_cdcritic,
                             INPUT-OUTPUT aux_dscritic).
                                     
              RETURN "NOK". 
          END.      
       END.

   RETURN "OK".

END PROCEDURE.

PROCEDURE carrega_dados_administradoras:

   DEF  INPUT PARAM par_cdcooper AS INTE NO-UNDO.
   DEF  INPUT PARAM par_cdagenci AS INTE NO-UNDO.
   DEF  INPUT PARAM par_nrdcaixa AS INTE NO-UNDO.
   DEF  INPUT PARAM par_cdoperad AS CHAR NO-UNDO.
   DEF  INPUT PARAM par_nrdconta AS INTE NO-UNDO. 
   DEF  INPUT PARAM par_dtmvtolt AS DATE NO-UNDO.
   DEF  INPUT PARAM par_idorigem AS INTE NO-UNDO.
   DEF  INPUT PARAM par_nmdatela AS CHAR NO-UNDO.
   DEF  INPUT PARAM par_nrcrcard AS DECI NO-UNDO.
   
   DEF OUTPUT PARAM TABLE FOR tt-dados-admin.                                   
   DEF OUTPUT PARAM TABLE FOR tt-erro.      

   DEF VAR aux_contador AS INT NO-UNDO INIT 0.
   DEF VAR aux_bandeira AS CHAR NO-UNDO.
   DEF VAR aux_tppessoa AS CHAR NO-UNDO.
   
   EMPTY TEMP-TABLE tt-erro.
   EMPTY TEMP-TABLE tt-dados-admin.
   
   DEF BUFFER crabcrd FOR crawcrd.
    
   FIND crawcrd WHERE crawcrd.cdcooper = par_cdcooper AND
                      crawcrd.nrdconta = par_nrdconta AND
                      crawcrd.nrcrcard = par_nrcrcard NO-LOCK NO-ERROR NO-WAIT.

   IF AVAIL crawcrd THEN
     DO:
       /* Buscar cartoes que nao estejam em uso */
       FIND FIRST crabcrd WHERE crabcrd.cdcooper  = par_cdcooper     AND
                                crabcrd.nrdconta  = par_nrdconta     AND
                                crabcrd.cdadmcrd  = crawcrd.cdadmcrd AND  
                                crabcrd.nrcrcard <> par_nrcrcard     AND   
                                crabcrd.insitcrd <> 4                AND
                                crabcrd.insitcrd <> 6                NO-LOCK NO-ERROR NO-WAIT.
     
       IF AVAIL crabcrd THEN
         DO:
            ASSIGN aux_cdcritic = 0
                   aux_dscritic = "Todos os cartoes devem estar em uso para realizar Upgrade ou Downgrade.".
               
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                   
            RETURN "NOK".
         END.
         
         RELEASE crawcrd.
     END.
   
   FIND crapass WHERE crapass.cdcooper = par_cdcooper AND
                      crapass.nrdconta = par_nrdconta NO-LOCK NO-ERROR NO-WAIT.
  
   IF AVAIL crapass THEN
       ASSIGN aux_tppessoa = string(crapass.inpessoa).
   ELSE
       DO:
            ASSIGN aux_cdcritic = 0
                   aux_dscritic = "Problemas ao consultar conta do cooperado.".
               
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                   
            RETURN "NOK".
       END.
   
   FIND crawcrd WHERE crawcrd.cdcooper = par_cdcooper AND
                      crawcrd.nrdconta = par_nrdconta AND
                      crawcrd.nrcrcard = par_nrcrcard NO-LOCK NO-ERROR NO-WAIT.

   IF AVAIL crawcrd THEN
       DO:
        
            FIND crapadc WHERE crapadc.cdcooper = crawcrd.cdcooper AND
                               crapadc.cdadmcrd = crawcrd.cdadmcrd NO-LOCK NO-ERROR NO-WAIT.

            IF AVAIL crapadc THEN
                DO:
                    CREATE tt-dados-admin.
                    ASSIGN tt-dados-admin.dsaadmin = STRING(crapadc.cdadmcrd) + "," + crapadc.nmadmcrd
                           aux_bandeira = crapadc.nmbandei.
                END.
            ELSE
                DO:
                    ASSIGN aux_cdcritic = 0
                           aux_dscritic = "Erro ao consultar administradora.".
                           
                    RUN gera_erro (INPUT par_cdcooper,
                                   INPUT par_cdagenci,
                                   INPUT par_nrdcaixa,
                                   INPUT 1,            /** Sequencia **/
                                   INPUT aux_cdcritic,
                                   INPUT-OUTPUT aux_dscritic).
                                           
                    RETURN "NOK".
                END.

            IF aux_tppessoa = "1" THEN
                ASSIGN aux_tppessoa = "0,1".
            ELSE
                ASSIGN aux_tppessoa = "0,2".

            FOR EACH crapadc WHERE crapadc.cdcooper = par_cdcooper AND
                                   crapadc.cdadmcrd >= 10 AND
                                   crapadc.cdadmcrd <= 80 AND
                                   crapadc.nmbandei = aux_bandeira AND
                                   CAN-DO(aux_tppessoa,STRING(crapadc.tpctahab)) NO-LOCK
                                   BREAK BY crapadc.cdadmcrd:
                
                IF aux_contador = 0 THEN
                    ASSIGN tt-dados-admin.dsnadmin = STRING(crapadc.cdadmcrd) + "," + crapadc.nmadmcrd
                           aux_contador = aux_contador + 1.
                ELSE
                    ASSIGN tt-dados-admin.dsnadmin = tt-dados-admin.dsnadmin + ";" + STRING(crapadc.cdadmcrd) + "," + crapadc.nmadmcrd
                           aux_contador = aux_contador + 1.
            END.
           
       END.
   ELSE
        DO:
            ASSIGN aux_cdcritic = 0
                   aux_dscritic = "Erro ao consultar administradora.".
                   
            RUN gera_erro (INPUT par_cdcooper,
                           INPUT par_cdagenci,
                           INPUT par_nrdcaixa,
                           INPUT 1,            /** Sequencia **/
                           INPUT aux_cdcritic,
                           INPUT-OUTPUT aux_dscritic).
                                   
            RETURN "NOK".
        END.

   RETURN "OK".

END PROCEDURE.


PROCEDURE altera_administradora:

   DEF  INPUT PARAM par_cdcooper AS INTE NO-UNDO.
   DEF  INPUT PARAM par_cdagenci AS INTE NO-UNDO.
   DEF  INPUT PARAM par_nrdcaixa AS INTE NO-UNDO.
   DEF  INPUT PARAM par_cdoperad AS CHAR NO-UNDO.
   DEF  INPUT PARAM par_nrdconta AS INTE NO-UNDO. 
   DEF  INPUT PARAM par_dtmvtolt AS DATE NO-UNDO.
   DEF  INPUT PARAM par_idorigem AS INTE NO-UNDO.
   DEF  INPUT PARAM par_nmdatela AS CHAR NO-UNDO.
   DEF  INPUT PARAM par_nrcrcard AS DECI NO-UNDO.
   DEF  INPUT PARAM par_codaadmi AS INTE NO-UNDO.
   DEF  INPUT PARAM par_codnadmi AS INTE NO-UNDO.
                    
   DEF OUTPUT PARAM TABLE FOR tt-erro.      
   
   DEF VAR aux_flgexist AS INTE INIT 0 NO-UNDO.
   DEF VAR aux_contador AS INTE INIT 0 NO-UNDO.
   DEF VAR aux_ponteiro AS INTE NO-UNDO.
   DEF VAR aux_nrctrcrd AS INTE NO-UNDO.
   DEF VAR aux_nmbandei AS CHAR NO-UNDO.
   DEF VAR aux_enctrban AS INT INIT 0 NO-UNDO.

   DEF BUFFER crabcrd FOR crawcrd.
   DEF BUFFER crabavt FOR crapavt.
   EMPTY TEMP-TABLE tt-erro.

   DEF VAR aux_nrcpfcgc AS DEC NO-UNDO.
   
   ASSIGN aux_dsorigem = TRIM(ENTRY(par_idorigem,des_dorigens,","))
          aux_dstransa = "Upgrade ou Downgrade de cartao.".
  
   IF par_codaadmi = par_codnadmi THEN
    DO:
        ASSIGN aux_cdcritic = 0
               aux_dscritic = "Operacao permitida apenas para outra administradora da mesma bandeira.".
                   
        RUN gera_erro (INPUT par_cdcooper,
                       INPUT par_cdagenci,
                       INPUT par_nrdcaixa,
                       INPUT 1,            /** Sequencia **/
                       INPUT aux_cdcritic,
                       INPUT-OUTPUT aux_dscritic).
                                   
         RETURN "NOK".
    END.

   FIND crapadc WHERE crapadc.cdcooper = par_cdcooper AND
                      crapadc.cdadmcrd = par_codnadmi 
                      NO-LOCK NO-ERROR NO-WAIT.
                   
   IF AVAIL crapadc THEN
     ASSIGN aux_nmbandei = crapadc.nmbandei. 

   FOR FIRST crawcrd FIELDS(nrcpftit)
                     WHERE crawcrd.cdcooper = par_cdcooper AND
                           crawcrd.nrdconta = par_nrdconta AND
                           crawcrd.nrcrcard = par_nrcrcard 
                           NO-LOCK: END.

   IF AVAIL crawcrd THEN
      ASSIGN aux_nrcpfcgc = crawcrd.nrcpftit.

   FOR EACH crawcrd WHERE crawcrd.cdcooper = par_cdcooper AND
                          crawcrd.nrdconta = par_nrdconta AND
                          crawcrd.nrcpftit = aux_nrcpfcgc AND
                          crawcrd.insitcrd = 1 NO-LOCK:

     FIND crapadc WHERE crapadc.cdcooper = par_cdcooper AND
                        crapadc.cdadmcrd = crawcrd.cdadmcrd NO-LOCK NO-ERROR NO-WAIT.

     IF crapadc.nmbandei = aux_nmbandei THEN
        ASSIGN aux_enctrban = 1.

   END.

   IF aux_enctrban = 1 THEN
    DO:
        ASSIGN aux_cdcritic = 0
               aux_dscritic = "Upgrade/Downgrade ja realizado para este cartao.".
                   
        RUN gera_erro (INPUT par_cdcooper,
                       INPUT par_cdagenci,
                       INPUT par_nrdcaixa,
                       INPUT 1,            /** Sequencia **/
                       INPUT aux_cdcritic,
                       INPUT-OUTPUT aux_dscritic).
                                   
         RETURN "NOK".
    END.
    
   FOR crapass FIELDS(inpessoa) 
               WHERE crapass.cdcooper = par_cdcooper AND
                     crapass.nrdconta = par_nrdconta
                     NO-LOCK: END.
                     
   IF NOT AVAILABLE crapass THEN
      DO:
          ASSIGN aux_cdcritic = 9
                 aux_dscritic = "".

          RUN gera_erro (INPUT par_cdcooper,
                         INPUT par_cdagenci,
                         INPUT par_nrdcaixa,
                         INPUT 1,            /** Sequencia **/
                         INPUT aux_cdcritic,
                         INPUT-OUTPUT aux_dscritic).                
              
          RETURN "NOK".      
      END.
   
   TRANS_1:
   DO TRANSACTION ON ERROR UNDO TRANS_1, LEAVE TRANS_1:
   
      FOR EACH crawcrd WHERE crawcrd.cdcooper = par_cdcooper AND
                             crawcrd.nrdconta = par_nrdconta AND
                             crawcrd.cdadmcrd = par_codaadmi AND
                             crawcrd.insitcrd = 4 
                             EXCLUSIVE-LOCK:          
          
          IF aux_nmbandei = "MAESTRO" THEN
             DO:
                 /* Para o Tipo Outros nao sera possivel fazer o Upgrade/Downgrade */
                 IF crawcrd.cdgraupr = 9 THEN
                    DO:
                        ASSIGN aux_dscritic = "Nao e permitido um cartao com funcao debito para o cartao tipo outros.".
                        RUN gera_erro (INPUT par_cdcooper,
                                       INPUT par_cdagenci,
                                       INPUT par_nrdcaixa,
                                       INPUT 1,
                                       INPUT aux_cdcritic,
                                       INPUT-OUTPUT aux_dscritic).
                             
                        RETURN "NOK".
                    END.
                   
             END. /* END IF aux_nmbandei = "MAESTRO" THEN */
          ELSE
             DO:
                 FIND craptlc WHERE craptlc.cdcooper = crawcrd.cdcooper AND
                                    craptlc.cdadmcrd = par_codnadmi     AND
                                    craptlc.insittab = 0                AND
                                    craptlc.dddebito = 0                AND
                                    craptlc.vllimcrd = crawcrd.vllimcrd
                                    NO-LOCK NO-ERROR.
                                    
                 IF NOT AVAILABLE craptlc THEN
                    DO:
                        ASSIGN aux_dscritic = "Linha de limite de credito nao habilitada, verificar tela Limcrd".
                        RUN gera_erro (INPUT par_cdcooper,
                                       INPUT par_cdagenci,
                                       INPUT par_nrdcaixa,
                                       INPUT 1,
                                       INPUT aux_cdcritic,
                                       INPUT-OUTPUT aux_dscritic).
                        RETURN "NOK".                  
                    
                    END. /* END IF NOT AVAILABLE craptlc THEN */
             END.

          CREATE crabcrd.
          BUFFER-COPY crawcrd EXCEPT nrcrcard cdadmcrd insitcrd nrctrcrd TO crabcrd.
          
           { includes/PLSQL_altera_session_antes_st.i &dboraayl={&scd_dboraayl} }

           /* Busca a proxima sequencia do campo crapldt.nrsequen */
           RUN STORED-PROCEDURE pc_sequence_progress
           aux_handproc = PROC-HANDLE NO-ERROR (INPUT "CRAPMAT"
                                               ,INPUT "NRCTRCRD"
                                               ,INPUT STRING(par_cdcooper)
                                               ,INPUT "N"
                                               ,"").

           CLOSE STORED-PROC pc_sequence_progress
           aux_statproc = PROC-STATUS WHERE PROC-HANDLE = aux_handproc.

           { includes/PLSQL_altera_session_depois_st.i &dboraayl={&scd_dboraayl} }

           ASSIGN aux_nrctrcrd = INTE(pc_sequence_progress.pr_sequence)
                                 WHEN pc_sequence_progress.pr_sequence <> ?.

          ASSIGN crabcrd.cdadmcrd = par_codnadmi
                 crabcrd.insitcrd = 1
                 crabcrd.dtpropos = par_dtmvtolt   /* Inclusao Renato - Supero - 07/11/2014 */
                 crabcrd.dtentreg = ?              /* Inclusao Renato - Supero - 07/11/2014 */
                 aux_flgexist = 1
                 nrctrcrd = aux_nrctrcrd.
                 
          /* Buscar o codigo do limite de credito da nova administradora */       
          IF AVAILABLE craptlc THEN
             DO:
                 ASSIGN crabcrd.cdlimcrd = craptlc.cdlimcrd.

             END.
          
          /* Outros */
          IF crawcrd.cdgraupr = 9 THEN
             DO:
                 FOR EACH crabavt WHERE crabavt.cdcooper = crawcrd.cdcooper AND
                                        crabavt.nrdconta = crawcrd.nrdconta AND
                                        crabavt.nrctremp = crawcrd.nrctrcrd AND
                                        crabavt.tpctrato = 10
                                        NO-LOCK:
                                          
                     CREATE crapavt.
                     BUFFER-COPY crabavt TO crapavt.
                     ASSIGN crapavt.nrctremp = crabcrd.nrctrcrd.
                     VALIDATE crapavt.
                     
                 END. /* FOR EACH crabavt  */
                        
             END. /* END IF crawcrd.cdgraupr = 9 THEN */
          
      END. /* END  FOR EACH crawcrd */
	
	 END.  /*  Fim da transacao  */
  
   IF aux_flgexist = 0 THEN
      DO:
          ASSIGN aux_cdcritic = 0
                 aux_dscritic = "Erro ao atualizar administradora.".
                     
          RUN gera_erro (INPUT par_cdcooper,
                         INPUT par_cdagenci,
                         INPUT par_nrdcaixa,
                         INPUT 1,            /** Sequencia **/
                         INPUT aux_cdcritic,
                         INPUT-OUTPUT aux_dscritic).
                                     
           RETURN "NOK".
      END.
  
   RUN proc_gerar_log (INPUT par_cdcooper,
                       INPUT par_cdoperad,
                       INPUT "",
                       INPUT aux_dsorigem,
                       INPUT aux_dstransa,
                       INPUT TRUE,
                       INPUT 1,
                       INPUT par_nmdatela,
                       INPUT par_nrdconta,
                       OUTPUT aux_nrdrowid).
                         
   RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                           INPUT "nrcrcard",
                           INPUT "",
                           INPUT par_nrcrcard).

   RETURN "OK".

END PROCEDURE.

PROCEDURE retorna_tipo_cartao:

    DEF INPUT  PARAM par_cdcooper AS INTE                              NO-UNDO.
    DEF INPUT  PARAM par_cdagenci AS INTE                              NO-UNDO.
    DEF INPUT  PARAM par_nrdcaixa AS INTE                              NO-UNDO.
    DEF INPUT  PARAM par_cdadmcrd AS INTE                              NO-UNDO.
    DEF OUTPUT PARAM par_cdtpcart AS INTE                              NO-UNDO.
    DEF OUTPUT PARAM TABLE FOR tt-erro.

    DEF VAR aux_tipocart AS INTE                                       NO-UNDO.

    FIND crapadc WHERE crapadc.cdcooper = par_cdcooper AND
                       crapadc.cdadmcrd = par_cdadmcrd
                       NO-LOCK NO-ERROR.
    
    IF NOT AVAIL crapadc THEN
       DO:
           ASSIGN aux_cdcritic = 605
                  aux_dscritic = "". 
                                   
           RUN gera_erro (INPUT par_cdcooper,
                          INPUT par_cdagenci,
                          INPUT par_nrdcaixa,
                          INPUT 1,     /** Sequencia **/
                          INPUT aux_cdcritic,
                          INPUT-OUTPUT aux_dscritic).
                                
           RETURN "NOK".
       END.

    ASSIGN aux_tipocart = 0.

    /* Verificar se o cartao eh da CABAL */
    IF f_verifica_adm(crapadc.cdadmcrd) = 2 THEN
       DO:
           /* Verificar se o cartao eh com Chip */
           IF crapadc.flgcchip THEN
              ASSIGN aux_tipocart = 1.
           ELSE /* Cartao da CABAL sem chip */
              ASSIGN aux_tipocart = 2.
       END.
      
    RETURN "OK".

END. /* END PROCEDURE verifica_tipo_carta o*/


PROCEDURE verifica_acesso_tela_taa:

   DEF  INPUT PARAM par_cdcooper AS INTE                              NO-UNDO.
   DEF  INPUT PARAM par_cdagenci AS INTE                              NO-UNDO.
   DEF  INPUT PARAM par_nrdcaixa AS INTE                              NO-UNDO.
   DEF  INPUT PARAM par_cdoperad AS CHAR                              NO-UNDO.
   DEF  INPUT PARAM par_nrdconta AS INTE                              NO-UNDO. 
   DEF  INPUT PARAM par_dtmvtolt AS DATE                              NO-UNDO.
   DEF  INPUT PARAM par_idorigem AS INTE                              NO-UNDO.
   DEF  INPUT PARAM par_nmdatela AS CHAR                              NO-UNDO.   
   DEF  INPUT PARAM par_nrcrcard AS DECI                              NO-UNDO.
   DEF  INPUT PARAM par_nrctrcrd AS INTE                              NO-UNDO.

   DEF OUTPUT PARAM par_inacetaa AS INTE                              NO-UNDO.
   DEF OUTPUT PARAM TABLE FOR tt-erro.

   EMPTY TEMP-TABLE tt-erro.
   
   FOR crawcrd FIELDS(cdadmcrd insitcrd nrcrcard flgdebit cdgraupr)
               WHERE crawcrd.cdcooper = par_cdcooper AND
                     crawcrd.nrdconta = par_nrdconta AND
                     crawcrd.nrctrcrd = par_nrctrcrd
                     NO-LOCK: END.
   
   IF NOT AVAILABLE crawcrd THEN
      DO:
          ASSIGN aux_cdcritic = 546
                 aux_dscritic = "". 
                                   
          RUN gera_erro (INPUT par_cdcooper,
                         INPUT par_cdagenci,
                         INPUT par_nrdcaixa,
                         INPUT 1,     /** Sequencia **/
                         INPUT aux_cdcritic,
                         INPUT-OUTPUT aux_dscritic).
                                             
          RETURN "NOK".
      END.
      
   IF crawcrd.cdadmcrd < 10 OR crawcrd.cdadmcrd > 80 THEN
      DO: 
          ASSIGN aux_cdcritic = 0
                 aux_dscritic = "Opcao disponivel somente para Cartoes Bancoob".
                                   
          RUN gera_erro (INPUT par_cdcooper,
                         INPUT par_cdagenci,
                         INPUT par_nrdcaixa,
                         INPUT 1,     /** Sequencia **/
                         INPUT aux_cdcritic,
                         INPUT-OUTPUT aux_dscritic).
                                             
          RETURN "NOK".
      END.
      
   /* Verifica se a situacao do cartao estah em Uso */   
   IF crawcrd.insitcrd <> 4 THEN
      DO:
          ASSIGN aux_cdcritic = 0
                 aux_dscritic = "Cartao ainda nao foi entregue".
                                   
          RUN gera_erro (INPUT par_cdcooper,
                         INPUT par_cdagenci,
                         INPUT par_nrdcaixa,
                         INPUT 1,     /** Sequencia **/
                         INPUT aux_cdcritic,
                         INPUT-OUTPUT aux_dscritic).
                                             
          RETURN "NOK".
      END.  
   
   /* Verifica se estah habilitado a funcao de debito no cartao */
   IF crawcrd.flgdebit = FALSE OR crawcrd.cdgraupr = 9 THEN
      DO:
          ASSIGN aux_cdcritic = 36.
          
          RUN gera_erro(INPUT par_cdcooper,
                        INPUT par_cdagenci,
                        INPUT par_nrdcaixa,
                        INPUT 1,
                        INPUT aux_cdcritic,
                        INPUT-OUTPUT aux_dscritic).
          RETURN "NOK".
      END.   
   
   FOR crapcrd FIELDS(inacetaa)
               WHERE crapcrd.cdcooper = par_cdcooper AND
                     crapcrd.nrdconta = par_nrdconta AND
                     crapcrd.nrcrcard = par_nrcrcard
                     NO-LOCK: END.
   
   IF NOT AVAILABLE crapcrd THEN
      DO:
          ASSIGN aux_cdcritic = 546
                 aux_dscritic = "". 
                                   
          RUN gera_erro (INPUT par_cdcooper,
                         INPUT par_cdagenci,
                         INPUT par_nrdcaixa,
                         INPUT 1,     /** Sequencia **/
                         INPUT aux_cdcritic,
                         INPUT-OUTPUT aux_dscritic).
                                             
          RETURN "NOK".
      END.      
      
   ASSIGN par_inacetaa = crapcrd.inacetaa.
   
   RETURN "OK".
   
END.

PROCEDURE valida_dados_liberacao_taa:

   DEF  INPUT PARAM par_cdcooper AS INTE                              NO-UNDO.
   DEF  INPUT PARAM par_cdagenci AS INTE                              NO-UNDO.
   DEF  INPUT PARAM par_nrdcaixa AS INTE                              NO-UNDO.
   DEF  INPUT PARAM par_cdoperad AS CHAR                              NO-UNDO.
   DEF  INPUT PARAM par_nrdconta AS INTE                              NO-UNDO. 
   DEF  INPUT PARAM par_dtmvtolt AS DATE                              NO-UNDO.
   DEF  INPUT PARAM par_idorigem AS INTE                              NO-UNDO.
   DEF  INPUT PARAM par_nmdatela AS CHAR                              NO-UNDO.
   DEF  INPUT PARAM par_nrcrcard AS DECI                              NO-UNDO.
   DEF  INPUT PARAM par_nrctrcrd AS INTE                              NO-UNDO.   

   DEF OUTPUT PARAM TABLE FOR tt-erro.
   
   DEF VAR aux_inacetaa AS INTE                                       NO-UNDO.

   EMPTY TEMP-TABLE tt-erro.
   
   RUN verifica_acesso_tela_taa(INPUT par_cdcooper,
                                INPUT par_cdagenci,
                                INPUT par_nrdcaixa,
                                INPUT par_cdoperad,
                                INPUT par_nrdconta,
                                INPUT par_dtmvtolt,
                                INPUT par_idorigem,
                                INPUT par_nmdatela,
                                INPUT par_nrcrcard,
                                INPUT par_nrctrcrd,
                                OUTPUT aux_inacetaa,
                                OUTPUT TABLE tt-erro).
                                
   IF RETURN-VALUE <> "OK" THEN
      RETURN "NOK".

   RETURN "OK".
   
END.

PROCEDURE liberar_cartao_credito_taa:

   DEF  INPUT PARAM par_cdcooper AS INTE                              NO-UNDO.
   DEF  INPUT PARAM par_cdagenci AS INTE                              NO-UNDO.
   DEF  INPUT PARAM par_nrdcaixa AS INTE                              NO-UNDO.
   DEF  INPUT PARAM par_cdoperad AS CHAR                              NO-UNDO.
   DEF  INPUT PARAM par_nrdconta AS INTE                              NO-UNDO. 
   DEF  INPUT PARAM par_dtmvtolt AS DATE                              NO-UNDO.
   DEF  INPUT PARAM par_idorigem AS INTE                              NO-UNDO.
   DEF  INPUT PARAM par_nmdatela AS CHAR                              NO-UNDO.   
   DEF  INPUT PARAM par_nrcrcard AS DECI                              NO-UNDO.
   DEF  INPUT PARAM par_dssentaa AS CHAR                              NO-UNDO.
   DEF  INPUT PARAM par_dssencfm AS CHAR                              NO-UNDO.
   
   DEF OUTPUT PARAM par_flgcadas AS LOGI                              NO-UNDO.
   DEF OUTPUT PARAM TABLE FOR tt-erro.
   
   DEF  VAR aux_contador AS INTE                                      NO-UNDO.
   DEF  VAR aux_idseqttl AS INTEGER                                   NO-UNDO.
   DEF  VAR h-b1wgen0032 AS HANDLE                                    NO-UNDO.

   EMPTY TEMP-TABLE tt-erro.
   
   ASSIGN aux_dsorigem = TRIM(ENTRY(par_idorigem,des_dorigens,","))
          aux_dstransa = "Liberado Cartao de Credito TAA.".

   DO TRANSACTION ON ERROR UNDO, LEAVE:
   
      RUN grava_dados_senha_numerica_taa(INPUT par_cdcooper,
                                         INPUT par_cdagenci,
                                         INPUT par_nrdcaixa,
                                         INPUT par_cdoperad,
                                         INPUT par_nrdconta,
                                         INPUT par_dtmvtolt,
                                         INPUT par_idorigem,
                                         INPUT par_nmdatela,
                                         INPUT par_nrcrcard,
                                         INPUT par_dssentaa,
                                         INPUT par_dssencfm,
                                         INPUT FALSE,
                                         OUTPUT TABLE tt-erro).
   
      IF RETURN-VALUE <> "OK" THEN
         UNDO, RETURN "NOK".
      
      DO aux_contador = 1 TO 10:

         FIND crapcrd WHERE crapcrd.cdcooper = par_cdcooper AND
                            crapcrd.nrdconta = par_nrdconta AND
                            crapcrd.nrcrcard = par_nrcrcard
                            EXCLUSIVE-LOCK NO-ERROR NO-WAIT.
                                    
         IF NOT AVAIL crapcrd THEN
            DO:
                IF LOCKED crapcrd THEN
                   DO:
                       ASSIGN aux_dscritic = "Registro de cartao de credito " +
                                             "esta sendo alterado. Tente "    +
                                             "Novamente.".
                       PAUSE 1 NO-MESSAGE.
                       NEXT.
                   END.
                ELSE
                   DO:
                       ASSIGN aux_dscritic = "Registro de cartao de credito " +
                                             "nao encontrado.".
                       LEAVE.
                   END.
            END.

         LEAVE.
            
      END. /** Fim do DO ... TO **/
       
      IF aux_dscritic <> "" THEN
         DO:
             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                                     
             UNDO, RETURN "NOK".
         END. 
    
      /* Obtem administradora do cartão para verificar o tipo de conta */
      FOR FIRST crapadc FIELDS(tpctahab)
                        WHERE crapadc.cdcooper = crapcrd.cdcooper AND
                              crapadc.cdadmcrd = crapcrd.cdadmcrd
                              NO-LOCK: END.
                           
      IF NOT AVAILABLE crapadc THEN                         
         DO:          
             ASSIGN aux_cdcritic = 605
                    aux_dscritic = "".

             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1, /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).                
                
             RETURN "NOK".
         END.
            
      /* Conta Física */                     
      IF crapadc.tpctahab = 1 THEN 
         DO:
             /* Obtem titular do cartão através do CPF */
             FOR FIRST crapttl FIELDS(idseqttl)
                               WHERE crapttl.cdcooper = crapcrd.cdcooper AND
                                     crapttl.nrdconta = crapcrd.nrdconta AND
                                     crapttl.nrcpfcgc = crapcrd.nrcpftit 
                                     NO-LOCK: END.
                                     
             IF NOT AVAIL crapttl THEN                         
                DO:
                    ASSIGN aux_cdcritic = 0
                           aux_dscritic = 
                               "Titular nao cadastrado para a conta. CPF: " +
                               STRING(STRING(crapcrd.nrcpftit,"99999999999"),
                                      "xxx.xxx.xxx-xx").
                                            
                    RUN gera_erro (INPUT par_cdcooper,
                                   INPUT par_cdagenci,
                                   INPUT par_nrdcaixa,
                                   INPUT 1, /** Sequencia **/
                                   INPUT aux_cdcritic,
                                   INPUT-OUTPUT aux_dscritic).                
                        
                    RETURN "NOK".          
                END.
                
             ASSIGN aux_idseqttl = crapttl.idseqttl.
         END.
      ELSE /* Conta Jurídica */
         ASSIGN aux_idseqttl = 1.
      
      IF NOT VALID-HANDLE(h-b1wgen0032) THEN
         RUN sistema/generico/procedures/b1wgen0032.p PERSISTENT SET h-b1wgen0032.
         
      /* Verifica se jah possui cadastrado as letras de seguranca */   
      RUN verifica-letras-seguranca IN h-b1wgen0032 (INPUT crapcrd.cdcooper,
                                                     INPUT crapcrd.nrdconta,
                                                     INPUT aux_idseqttl,
                                                    OUTPUT par_flgcadas).
      IF VALID-HANDLE(h-b1wgen0032) THEN
         DELETE PROCEDURE(h-b1wgen0032).
      
      /* Situacao Liberado */
      ASSIGN crapcrd.inacetaa = 1
             crapcrd.cdopetaa = par_cdoperad
             crapcrd.dtacetaa = par_dtmvtolt.
   
      RUN proc_gerar_log (INPUT par_cdcooper,
                          INPUT par_cdoperad,
                          INPUT "",
                          INPUT aux_dsorigem,
                          INPUT aux_dstransa,
                          INPUT TRUE,
                          INPUT 1,
                          INPUT par_nmdatela,
                          INPUT par_nrdconta,
                         OUTPUT aux_nrdrowid).
                         
      RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                              INPUT "nrcrcard",
                              INPUT "",
                              INPUT par_nrcrcard).
   
   END. /* END DO TRANSACTION ON ERROR UNDO, LEAVE: */
   
   RETURN "OK".
   
END.

PROCEDURE valida_dados_bloqueio_taa:

   DEF  INPUT PARAM par_cdcooper AS INTE                              NO-UNDO.
   DEF  INPUT PARAM par_cdagenci AS INTE                              NO-UNDO.
   DEF  INPUT PARAM par_nrdcaixa AS INTE                              NO-UNDO.
   DEF  INPUT PARAM par_cdoperad AS CHAR                              NO-UNDO.
   DEF  INPUT PARAM par_nrdconta AS INTE                              NO-UNDO. 
   DEF  INPUT PARAM par_dtmvtolt AS DATE                              NO-UNDO.
   DEF  INPUT PARAM par_idorigem AS INTE                              NO-UNDO.
   DEF  INPUT PARAM par_nmdatela AS CHAR                              NO-UNDO.
   DEF  INPUT PARAM par_nrcrcard AS DECI                              NO-UNDO.
   DEF  INPUT PARAM par_nrctrcrd AS INTE                              NO-UNDO.

   DEF OUTPUT PARAM TABLE FOR tt-erro.
   
   DEF VAR aux_inacetaa AS INTE                                       NO-UNDO.

   EMPTY TEMP-TABLE tt-erro.
   
   RUN verifica_acesso_tela_taa(INPUT par_cdcooper,
                                INPUT par_cdagenci,
                                INPUT par_nrdcaixa,
                                INPUT par_cdoperad,
                                INPUT par_nrdconta,
                                INPUT par_dtmvtolt,
                                INPUT par_idorigem,
                                INPUT par_nmdatela,
                                INPUT par_nrcrcard,
                                INPUT par_nrctrcrd,
                                OUTPUT aux_inacetaa,
                                OUTPUT TABLE tt-erro).
                                
   IF RETURN-VALUE <> "OK" THEN
      RETURN "NOK".

   IF aux_inacetaa <> 1 THEN
      DO:
          ASSIGN aux_cdcritic = 0
                 aux_dscritic = "Acesso ao TAA nao esta liberado.".
                                   
          RUN gera_erro (INPUT par_cdcooper,
                         INPUT par_cdagenci,
                         INPUT par_nrdcaixa,
                         INPUT 1,     /** Sequencia **/
                         INPUT aux_cdcritic,
                         INPUT-OUTPUT aux_dscritic).
          RETURN "NOK".
      END.    
      
   RETURN "OK".
   
END.

PROCEDURE bloquear_cartao_credito_taa:

   DEF  INPUT PARAM par_cdcooper AS INTE                              NO-UNDO.
   DEF  INPUT PARAM par_cdagenci AS INTE                              NO-UNDO.
   DEF  INPUT PARAM par_nrdcaixa AS INTE                              NO-UNDO.
   DEF  INPUT PARAM par_cdoperad AS CHAR                              NO-UNDO.
   DEF  INPUT PARAM par_nrdconta AS INTE                              NO-UNDO. 
   DEF  INPUT PARAM par_dtmvtolt AS DATE                              NO-UNDO.
   DEF  INPUT PARAM par_idorigem AS INTE                              NO-UNDO.
   DEF  INPUT PARAM par_nmdatela AS CHAR                              NO-UNDO.
   DEF  INPUT PARAM par_nrctrcrd AS INTE                              NO-UNDO.   
   DEF  INPUT PARAM par_nrcrcard AS DECI                              NO-UNDO.

   DEF OUTPUT PARAM TABLE FOR tt-erro.
   
   DEF  VAR aux_contador AS INTE                                      NO-UNDO.

   EMPTY TEMP-TABLE tt-erro.
   
   ASSIGN aux_dsorigem = TRIM(ENTRY(par_idorigem,des_dorigens,","))
          aux_dstransa = "Bloqueado Cartao de Credito TAA.".

   DO TRANSACTION ON ERROR UNDO, LEAVE:
   
      DO aux_contador = 1 TO 10:

         FIND crapcrd WHERE crapcrd.cdcooper = par_cdcooper AND
                            crapcrd.nrdconta = par_nrdconta AND
                            crapcrd.nrcrcard = par_nrcrcard
                            EXCLUSIVE-LOCK NO-ERROR NO-WAIT.
                                    
         IF NOT AVAIL crapcrd THEN
            DO:
                IF LOCKED crapcrd THEN
                   DO:
                       ASSIGN aux_dscritic = "Registro de cartao de credito " +
                                             "esta sendo alterado. Tente "    +
                                             "Novamente.".
                       PAUSE 1 NO-MESSAGE.
                       NEXT.
                   END.
                ELSE
                   DO:
                       ASSIGN aux_dscritic = "Registro de cartao de credito " +
                                             "nao encontrado.".
                       LEAVE.
                   END.
            END.

         LEAVE.
            
      END. /** Fim do DO ... TO **/
       
      IF aux_dscritic <> "" THEN
         DO:
             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                                     
             UNDO, RETURN "NOK".
         END. 
    
      /* Situacao Bloqueado */
      ASSIGN crapcrd.inacetaa = 0
             crapcrd.cdopetaa = par_cdoperad
             crapcrd.dtacetaa = par_dtmvtolt.
      
   END.
   
   RUN proc_gerar_log (INPUT par_cdcooper,
                       INPUT par_cdoperad,
                       INPUT "",
                       INPUT aux_dsorigem,
                       INPUT aux_dstransa,
                       INPUT TRUE,
                       INPUT 1,
                       INPUT par_nmdatela,
                       INPUT par_nrdconta,
                      OUTPUT aux_nrdrowid).
                       
   RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                           INPUT "nrcrcard",
                           INPUT "",
                           INPUT par_nrcrcard).
      
   RETURN "OK".
   
END.

PROCEDURE valida_dados_senha_numerica_taa:

   DEF  INPUT PARAM par_cdcooper AS INTE                              NO-UNDO.
   DEF  INPUT PARAM par_cdagenci AS INTE                              NO-UNDO.
   DEF  INPUT PARAM par_nrdcaixa AS INTE                              NO-UNDO.
   DEF  INPUT PARAM par_cdoperad AS CHAR                              NO-UNDO.
   DEF  INPUT PARAM par_nrdconta AS INTE                              NO-UNDO. 
   DEF  INPUT PARAM par_dtmvtolt AS DATE                              NO-UNDO.
   DEF  INPUT PARAM par_idorigem AS INTE                              NO-UNDO.
   DEF  INPUT PARAM par_nmdatela AS CHAR                              NO-UNDO.
   DEF  INPUT PARAM par_nrcrcard AS DECI                              NO-UNDO.
   DEF  INPUT PARAM par_nrctrcrd AS INTE                              NO-UNDO.

   DEF OUTPUT PARAM TABLE FOR tt-erro.
   
   DEF VAR aux_inacetaa AS INTE                                       NO-UNDO.

   EMPTY TEMP-TABLE tt-erro.
   
   RUN verifica_acesso_tela_taa(INPUT par_cdcooper,
                                INPUT par_cdagenci,
                                INPUT par_nrdcaixa,
                                INPUT par_cdoperad,
                                INPUT par_nrdconta,
                                INPUT par_dtmvtolt,
                                INPUT par_idorigem,
                                INPUT par_nmdatela,
                                INPUT par_nrcrcard,
                                INPUT par_nrctrcrd,
                                OUTPUT aux_inacetaa,
                                OUTPUT TABLE tt-erro).
                                
   IF RETURN-VALUE <> "OK" THEN
      RETURN "NOK".

   IF aux_inacetaa <> 1 THEN
      DO:
          ASSIGN aux_cdcritic = 0
                 aux_dscritic = "Acesso ao TAA nao esta liberado.".
                                   
          RUN gera_erro (INPUT par_cdcooper,
                         INPUT par_cdagenci,
                         INPUT par_nrdcaixa,
                         INPUT 1,     /** Sequencia **/
                         INPUT aux_cdcritic,
                         INPUT-OUTPUT aux_dscritic).
          RETURN "NOK".
      END.    
      
   RETURN "OK".
   
END.

PROCEDURE grava_dados_senha_numerica_taa:
  
   /*** OBSERVACAO ***
        Devido a comunicacao do TAA com o Servidor nao ser criptografada,
        quando a chamada desta procedure for feita pelo TAA, a senha ja
        vira validada e criptografada, entao as validacoes somente sao feitas
        para o Ayllos, no caso do TAA esta direto no sistema do TAA. */ 

   DEF  INPUT PARAM par_cdcooper AS INTE                              NO-UNDO.
   DEF  INPUT PARAM par_cdagenci AS INTE                              NO-UNDO.
   DEF  INPUT PARAM par_nrdcaixa AS INTE                              NO-UNDO.
   DEF  INPUT PARAM par_cdoperad AS CHAR                              NO-UNDO.
   DEF  INPUT PARAM par_nrdconta AS INTE                              NO-UNDO.
   DEF  INPUT PARAM par_dtmvtolt AS DATE                              NO-UNDO.
   DEF  INPUT PARAM par_idorigem AS INTE                              NO-UNDO.
   DEF  INPUT PARAM par_nmdatela AS CHAR                              NO-UNDO.   
   DEF  INPUT PARAM par_nrcrcard AS DECI                              NO-UNDO.
   DEF  INPUT PARAM par_dssentaa AS CHAR                              NO-UNDO.
   DEF  INPUT PARAM par_dssencfm AS CHAR                              NO-UNDO.
   DEF  INPUT PARAM par_flgerlog AS LOGI                              NO-UNDO.

   DEF OUTPUT PARAM TABLE FOR tt-erro.
   
   DEF  VAR h-b1wgenprwd AS HANDLE                                    NO-UNDO.
   
   DEF  VAR aux_contador AS INTE                                      NO-UNDO.
   DEF  VAR aux_insentaa AS INTEGER                                   NO-UNDO.
   DEF  VAR aux_qtsenerr LIKE crapcrd.qtsenerr                        NO-UNDO.
   DEF  VAR aux_dssentaa LIKE crapcrd.dssentaa                        NO-UNDO.
   DEF  VAR aux_dsdpsrwd AS INTE                                      NO-UNDO.
   DEF  VAR aux_ponteiro AS INTE                                      NO-UNDO.
   DEF  VAR aux_nrsequen AS CHAR                                      NO-UNDO.

   EMPTY TEMP-TABLE tt-erro.
   
   IF par_flgerlog THEN
      DO:
          ASSIGN aux_dsorigem = TRIM(ENTRY(par_idorigem,des_dorigens,","))
                 aux_dstransa = "Alterar senha numerica cartao de credito TAA".
      END.

   IF par_idorigem = 4 THEN
      ASSIGN aux_dssentaa = par_dssentaa.
   ELSE
      ASSIGN aux_dssentaa = ENCODE(par_dssentaa)
             aux_dsdpsrwd = INTE(par_dssentaa).

   DO TRANSACTION ON ERROR UNDO, LEAVE:
   
      DO aux_contador = 1 TO 10:

         FIND crapcrd WHERE crapcrd.cdcooper = par_cdcooper AND
                            crapcrd.nrdconta = par_nrdconta AND
                            crapcrd.nrcrcard = par_nrcrcard
                            EXCLUSIVE-LOCK NO-ERROR NO-WAIT.
                                    
         IF NOT AVAIL crapcrd THEN
            DO:
                IF LOCKED crapcrd THEN
                   DO:
                       ASSIGN aux_dscritic = "Registro de cartao de credito " +
                                             "esta sendo alterado. Tente "    +
                                             "Novamente.".
                       PAUSE 1 NO-MESSAGE.
                       NEXT.
                   END.
                ELSE
                   DO:
                       ASSIGN aux_dscritic = "Registro de cartao de credito " +
                                             "nao encontrado.".
                       LEAVE.
                   END.
            END.

         LEAVE.
            
      END. /** Fim do DO ... TO **/
       
      IF aux_dscritic <> "" THEN
         DO:
             RUN gera_erro (INPUT par_cdcooper,
                            INPUT par_cdagenci,
                            INPUT par_nrdcaixa,
                            INPUT 1,            /** Sequencia **/
                            INPUT aux_cdcritic,
                            INPUT-OUTPUT aux_dscritic).
                                                     
             UNDO, RETURN "NOK".
         END. 
   
      /* Quando a origem for TAA, nao precisamos validar, pois jah eh validado no TAA */
      IF par_idorigem <> 4 THEN
         DO:
             /* Verificacao se as 2 senhas informadas no formulario sao iguais */
             IF par_dssentaa <> par_dssencfm  THEN
                DO:
                    ASSIGN aux_cdcritic = 0
                           aux_dscritic = "Senha informada nao confere com a senha de confirmacao.".
           
                    RUN gera_erro (INPUT par_cdcooper,
                                   INPUT par_cdagenci,
                                   INPUT par_nrdcaixa,
                                   INPUT 1,     /** Sequencia **/
                                   INPUT aux_cdcritic,
                                   INPUT-OUTPUT aux_dscritic).
                    RETURN "NOK".
                END.
             ELSE      
             /* Verifica se a nova senha é igual a senha atual */
             IF aux_dssentaa = crapcrd.dssentaa THEN
                DO:
                    ASSIGN aux_cdcritic = 6
                           aux_dscritic = "".
             
                    RUN gera_erro (INPUT par_cdcooper,
                                   INPUT par_cdagenci,
                                   INPUT par_nrdcaixa,
                                   INPUT 1,     /** Sequencia **/
                                   INPUT aux_cdcritic,
                                   INPUT-OUTPUT aux_dscritic).
                    RETURN "NOK".
                END.
             ELSE
             DO:
                 ASSIGN aux_insentaa = INTEGER(par_dssentaa) NO-ERROR.
                 /* Verifica se a senha numerica possui somente numeros informados */
                 IF ERROR-STATUS:ERROR THEN
                    DO:
                        ASSIGN aux_cdcritic = 0
                               aux_dscritic = "Senha informada com caracteres invalidos. Informe somente numeros".
                               
                        RUN gera_erro (INPUT par_cdcooper,
                                       INPUT par_cdagenci,
                                       INPUT par_nrdcaixa,
                                       INPUT 1,     /** Sequencia **/
                                       INPUT aux_cdcritic,
                                       INPUT-OUTPUT aux_dscritic).
                        RETURN "NOK".
                    END.

                 /* Verifica se a senha informada possui 6 dígitos e se são todos numéricos. */
                 IF LENGTH(STRING(aux_insentaa)) <> 6 THEN
                    DO:
                        ASSIGN aux_cdcritic = 623
                               aux_dscritic = "".
               
                        RUN gera_erro (INPUT par_cdcooper,
                                       INPUT par_cdagenci,
                                       INPUT par_nrdcaixa,
                                       INPUT 1,     /** Sequencia **/
                                       INPUT aux_cdcritic,
                                       INPUT-OUTPUT aux_dscritic).
                        RETURN "NOK".
                    END.  
             END.
        
         END. /* END IF par_idorigem <> 4 THEN */
      
      ASSIGN aux_qtsenerr     = crapcrd.qtsenerr
             crapcrd.dssentaa = aux_dssentaa
             crapcrd.qtsenerr = 0.
 
      IF  par_idorigem = 4 THEN
          DO:
             RUN sistema/generico/procedures/b1wgenpwrd.p 
                    PERSISTENT SET h-b1wgenprwd ( INPUT crapcrd.dssentaa,
                                                 OUTPUT aux_dsdpsrwd).
        
             DELETE PROCEDURE h-b1wgenprwd.
          END.

      IF  aux_dsdpsrwd > 0 THEN
          DO:
              { includes/PLSQL_altera_session_antes_st.i &dboraayl={&scd_dboraayl} }
              
              RUN STORED-PROCEDURE pc_getPinBlockCripto
              aux_handproc = PROC-HANDLE NO-ERROR (INPUT STRING(crapcrd.nrcrcard)
                                                  ,INPUT STRING(aux_dsdpsrwd)
                                                  ,"").
                                                  
              CLOSE STORED-PROC pc_getPinBlockCripto aux_statproc = PROC-STATUS WHERE PROC-HANDLE = aux_handproc.
              
              { includes/PLSQL_altera_session_depois_st.i &dboraayl={&scd_dboraayl} }
   
              ASSIGN aux_nrsequen = pc_getPinBlockCripto.pSenhaCrypto
                                    WHEN pc_getPinBlockCripto.pSenhaCrypto <> ?.
                                    
              IF  TRIM(aux_nrsequen) <> "" THEN
                  ASSIGN crapcrd.dssenpin = TRIM(aux_nrsequen).
          END.
 
      IF par_flgerlog THEN
         DO:
             /* Gravacao dos logs de alteracao */
             RUN proc_gerar_log (INPUT par_cdcooper,
                                 INPUT par_cdoperad,
                                 INPUT "",
                                 INPUT aux_dsorigem,
                                 INPUT aux_dstransa,
                                 INPUT TRUE,
                                 INPUT 1,
                                 INPUT par_nmdatela,
                                 INPUT par_nrdconta,
                                OUTPUT aux_nrdrowid).
                                
             RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                                     INPUT "nrcrcard",
                                     INPUT "",
                                     INPUT par_nrcrcard).
                                    
             IF aux_qtsenerr <> crapcrd.qtsenerr THEN
                RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                                        INPUT "qtsenerr",
                                        INPUT aux_qtsenerr,
                                        INPUT 0).
         
         END. /* END IF par_flgerlog THEN */
         
   END. /* DO TRANSACTION ON ERROR UNDO, LEAVE: */
   
   RETURN "OK".
   
END.

PROCEDURE valida_dados_senha_letras_taa:

   DEF  INPUT PARAM par_cdcooper AS INTE                              NO-UNDO.
   DEF  INPUT PARAM par_cdagenci AS INTE                              NO-UNDO.
   DEF  INPUT PARAM par_nrdcaixa AS INTE                              NO-UNDO.
   DEF  INPUT PARAM par_cdoperad AS CHAR                              NO-UNDO.
   DEF  INPUT PARAM par_nrdconta AS INTE                              NO-UNDO. 
   DEF  INPUT PARAM par_dtmvtolt AS DATE                              NO-UNDO.
   DEF  INPUT PARAM par_idorigem AS INTE                              NO-UNDO.
   DEF  INPUT PARAM par_nmdatela AS CHAR                              NO-UNDO.
   DEF  INPUT PARAM par_nrcrcard AS DECI                              NO-UNDO.
   DEF  INPUT PARAM par_nrctrcrd AS INTE                              NO-UNDO.

   DEF OUTPUT PARAM TABLE FOR tt-erro.
   
   DEF VAR aux_inacetaa AS INTE                                       NO-UNDO.

   EMPTY TEMP-TABLE tt-erro.
   
   RUN verifica_acesso_tela_taa(INPUT par_cdcooper,
                                INPUT par_cdagenci,
                                INPUT par_nrdcaixa,
                                INPUT par_cdoperad,
                                INPUT par_nrdconta,
                                INPUT par_dtmvtolt,
                                INPUT par_idorigem,
                                INPUT par_nmdatela,
                                INPUT par_nrcrcard,
                                INPUT par_nrctrcrd,
                                OUTPUT aux_inacetaa,
                                OUTPUT TABLE tt-erro).
                                
   IF RETURN-VALUE <> "OK" THEN
      RETURN "NOK".

   IF aux_inacetaa <> 1 THEN
      DO:
          ASSIGN aux_cdcritic = 0
                 aux_dscritic = "Acesso ao TAA nao esta liberado.".
                                   
          RUN gera_erro (INPUT par_cdcooper,
                         INPUT par_cdagenci,
                         INPUT par_nrdcaixa,
                         INPUT 1,     /** Sequencia **/
                         INPUT aux_cdcritic,
                         INPUT-OUTPUT aux_dscritic).
          RETURN "NOK".
      END.    
      
   RETURN "OK".
   
END.

PROCEDURE grava_dados_senha_letras_taa:

   DEF  INPUT PARAM par_cdcooper AS INTE                              NO-UNDO.
   DEF  INPUT PARAM par_cdagenci AS INTE                              NO-UNDO.
   DEF  INPUT PARAM par_nrdcaixa AS INTE                              NO-UNDO.
   DEF  INPUT PARAM par_cdoperad AS CHAR                              NO-UNDO.
   DEF  INPUT PARAM par_nrdconta AS INTE                              NO-UNDO.
   DEF  INPUT PARAM par_dtmvtolt AS DATE                              NO-UNDO.
   DEF  INPUT PARAM par_idorigem AS INTE                              NO-UNDO.
   DEF  INPUT PARAM par_nmdatela AS CHAR                              NO-UNDO.
   DEF  INPUT PARAM par_nrctrcrd AS INTE                              NO-UNDO.
   DEF  INPUT PARAM par_nrcrcard AS DECI                              NO-UNDO.   
   DEF  INPUT PARAM par_dssennov AS CHAR                              NO-UNDO.
   DEF  INPUT PARAM par_dssencon AS CHAR                              NO-UNDO.
    
   DEF OUTPUT PARAM TABLE FOR tt-erro.
   
   DEF VAR h-b1wgen0032 AS HANDLE                                     NO-UNDO.
   DEF VAR aux_idseqttl AS INTEGER                                    NO-UNDO.
   DEF VAR aux_flgcadas AS CHAR                                       NO-UNDO.
   
   EMPTY TEMP-TABLE tt-erro.
   
   ASSIGN aux_dsorigem = TRIM(ENTRY(par_idorigem,des_dorigens,","))
          aux_dstransa = "Alterar senha letras cartao de credito TAA".

   FOR crapcrd FIELDS(cdcooper nrdconta cdadmcrd nrcpftit)
               WHERE crapcrd.cdcooper = par_cdcooper AND
                     crapcrd.nrdconta = par_nrdconta AND
                     crapcrd.nrcrcard = par_nrcrcard
                     NO-LOCK: END.
   
   IF NOT AVAILABLE crapcrd THEN
      DO:
          ASSIGN aux_cdcritic = 546
                 aux_dscritic = "". 
                                   
          RUN gera_erro (INPUT par_cdcooper,
                         INPUT par_cdagenci,
                         INPUT par_nrdcaixa,
                         INPUT 1, /** Sequencia **/
                         INPUT aux_cdcritic,
                         INPUT-OUTPUT aux_dscritic).
                                             
          RETURN "NOK".
      END.
  
   /* Obtem administradora do cartão para verificar o tipo de conta */
   FOR FIRST crapadc FIELDS(tpctahab)
                     WHERE crapadc.cdcooper = crapcrd.cdcooper AND
                           crapadc.cdadmcrd = crapcrd.cdadmcrd
                           NO-LOCK: END.
                        
   IF NOT AVAILABLE crapadc THEN                         
      DO:          
          ASSIGN aux_cdcritic = 605
                 aux_dscritic = "".

          RUN gera_erro (INPUT par_cdcooper,
                         INPUT par_cdagenci,
                         INPUT par_nrdcaixa,
                         INPUT 1, /** Sequencia **/
                         INPUT aux_cdcritic,
                         INPUT-OUTPUT aux_dscritic).
             
          RETURN "NOK".
      END.
         
   /* Conta Física */                     
   IF crapadc.tpctahab = 1 THEN 
      DO:
          /* Obtem titular do cartão através do CPF */
          FOR FIRST crapttl FIELDS(idseqttl)
                            WHERE crapttl.cdcooper = crapcrd.cdcooper AND
                                  crapttl.nrdconta = crapcrd.nrdconta AND
                                  crapttl.nrcpfcgc = crapcrd.nrcpftit 
                                  NO-LOCK: END.
                                  
          IF NOT AVAIL crapttl THEN                         
             DO:
                 ASSIGN aux_cdcritic = 0
                        aux_dscritic = 
                            "Titular nao cadastrado para a conta. CPF: " +
                            STRING(STRING(crapcrd.nrcpftit,"99999999999"),
                                   "xxx.xxx.xxx-xx").
                                         
                 RUN gera_erro (INPUT par_cdcooper,
                                INPUT par_cdagenci,
                                INPUT par_nrdcaixa,
                                INPUT 1, /** Sequencia **/
                                INPUT aux_cdcritic,
                                INPUT-OUTPUT aux_dscritic).                
                     
                 RETURN "NOK".          
             END.
             
          ASSIGN aux_idseqttl = crapttl.idseqttl.
      END.
   ELSE /* Conta Jurídica */
      ASSIGN aux_idseqttl = 1.
   
   IF NOT VALID-HANDLE(h-b1wgen0032) THEN
      RUN sistema/generico/procedures/b1wgen0032.p PERSISTENT SET h-b1wgen0032.
      
   RUN grava-senha-letras IN h-b1wgen0032(INPUT par_cdcooper,
                                          INPUT par_cdagenci,
                                          INPUT par_nrdcaixa,
                                          INPUT par_cdoperad,
                                          INPUT par_nmdatela,
                                          INPUT par_idorigem,
                                          INPUT par_nrdconta,
                                          INPUT aux_idseqttl,
                                          INPUT par_dtmvtolt,
                                          INPUT par_dssennov,
                                          INPUT par_dssencon,
                                          INPUT FALSE,
                                         OUTPUT aux_flgcadas,
                                         OUTPUT TABLE tt-erro).

   IF VALID-HANDLE(h-b1wgen0032) THEN
      DELETE PROCEDURE(h-b1wgen0032).
      
   IF RETURN-VALUE <> "OK" THEN
      RETURN "NOK".  
   
   /* Gravacao dos logs de alteracao */
   RUN proc_gerar_log (INPUT par_cdcooper,
                       INPUT par_cdoperad,
                       INPUT "",
                       INPUT aux_dsorigem,
                       INPUT aux_dstransa,
                       INPUT TRUE,
                       INPUT 1,
                       INPUT par_nmdatela,
                       INPUT par_nrdconta,
                      OUTPUT aux_nrdrowid).
                       
   RUN proc_gerar_log_item(INPUT aux_nrdrowid,
                           INPUT "nrcrcard",
                           INPUT "",
                           INPUT par_nrcrcard).
                           
   RETURN "OK".
   
END.


