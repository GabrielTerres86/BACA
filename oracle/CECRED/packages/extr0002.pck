CREATE OR REPLACE PACKAGE CECRED.EXTR0002 AS

  /* -------------------------------------------------------------------------------------------------------------

    Programa : EXTR0002 (Antigo b1wgen0112.p )
    Sistema  : Rotinas genéricas para geracao de extratos
    Sigla    : GENE
    Autor    : Alisson.
    Data     : Setembro/2014.                   Ultima atualizacao: 26/04/2017

	Alterações: 26/04/2017 - Ajuste para retirar o uso de campos removidos da tabela
			                 crapass, crapttl, crapjur 
							 (Adriano - P339).

			   18/12/2017 - Projeto 410 - inclusao IOF atraso - (Jean - Mout´S)

..............................................................................*/

    ---------------------------- ESTRUTURAS DE REGISTRO ---------------------
      
    --Tipo de Registro para Cabecalho (b1wgen9999tt.i/tt-cabrel) 
    TYPE typ_reg_cabrel IS RECORD
      (nmrescop crapcop.nmrescop%TYPE
      ,nmrelato VARCHAR2(20)
      ,dtmvtref DATE
      ,nmmodulo VARCHAR2(15)
      ,cdrelato INTEGER
      ,progerad VARCHAR2(10)
      ,dtmvtolt DATE
      ,dshoraat VARCHAR2(20)
      ,nmdestin VARCHAR2(40));
    TYPE typ_tab_cabrel IS TABLE OF typ_reg_cabrel INDEX BY PLS_INTEGER;
          
    --Tipo de Registro para dados do Cooperado (b1wgen0001tt.i/tt-dados_cooperado) 
    TYPE typ_reg_dados_cooperado IS RECORD 
      (nmextcop crapcop.nmextcop%TYPE
      ,inpessoa crapass.inpessoa%TYPE
      ,nmprimtl crapass.nmprimtl%TYPE
      ,nrcpfcgc crapass.nrcpfcgc%TYPE
      ,nrdconta crapass.nrdconta%TYPE
      ,cdagenci crapass.cdagenci%TYPE
      ,nmresage crapage.nmresage%TYPE
      ,vllimcre crapass.vllimcre%TYPE);
    TYPE typ_tab_dados_cooperado IS TABLE OF typ_reg_dados_cooperado INDEX BY PLS_INTEGER;
    
    
    
          
    --Tipo de Registro para Taxas de Juros  (b1wgen0001tt.i/tt-taxajuros) 
    TYPE typ_reg_taxa_juros IS RECORD
      (dslcremp craptax.dslcremp%TYPE
      ,txmensal craptax.txmensal%TYPE);  
    TYPE typ_tab_taxa_juros IS TABLE OF typ_reg_taxa_juros INDEX BY PLS_INTEGER;
    
        
    --Tipo de Registro para Totais Futuros  (b1wgen0003tt.i/tt-totais-futuros) 
    TYPE typ_reg_totais_futuros IS RECORD    
      (vllautom NUMBER
      ,vllaudeb NUMBER
      ,vllaucre NUMBER);
    TYPE typ_tab_totais_futuros IS TABLE OF typ_reg_totais_futuros INDEX BY PLS_INTEGER;
    
        
    --Tipo de Registro para Lancamentos Futuros  (b1wgen0003tt.i/tt-lancamento_futuro) 
    TYPE typ_reg_lancamento_futuro IS RECORD   
      (dtmvtolt DATE
      ,dshistor VARCHAR2(50)
      ,nrdocmto VARCHAR2(25)
      ,indebcre VARCHAR2(1)
      ,vllanmto NUMBER(25,2)
      ,dsmvtolt VARCHAR2(10)
      ,dstabela VARCHAR2(50)
      ,cdhistor craphis.cdhistor%TYPE
      ,genrecid craplau.progress_recid%TYPE
      ,fldebito INTEGER
      ,cdagenci craplau.cdagenci%TYPE
      ,cdbccxlt craplau.cdbccxlt%TYPE
      ,nrdolote craplau.nrdolote%TYPE
      ,nrseqdig craplau.nrseqdig%TYPE
      ,dtrefere craplau.dtmvtolt%TYPE
      ,cdtiptra craplau.cdtiptra%TYPE
      ,idlancto craplau.idlancto%TYPE
      ,idlstdom NUMBER
      ,incancel INTEGER);
      
    TYPE typ_tab_lancamento_futuro IS TABLE OF typ_reg_lancamento_futuro INDEX BY PLS_INTEGER;


    --Tipo de Registro para Extrato de investimento  (b1wgen0020tt.i/tt-extrato_inv) 
    TYPE typ_reg_extrato_inv IS RECORD   
      (dtmvtolt craplci.dtmvtolt%type
      ,dshistor craphis.dshistor%type
      ,nrdocmto craplci.nrdocmto%type
      ,indebcre craphis.indebcre%type
      ,vllanmto craplci.vllanmto%type
      ,vlsldtot NUMBER
      ,cdbloque VARCHAR2(1000)
      ,dsextrat craphis.dsextrat%type);
    TYPE typ_tab_extrato_inv IS TABLE OF typ_reg_extrato_inv INDEX BY PLS_INTEGER;

    
    --Tipo de Registro para Data da parcela do Emprestimo (b1wgen0084tt.i/tt-datas-parcelas) 
    TYPE typ_tab_datas_parcelas IS TABLE OF DATE INDEX BY PLS_INTEGER;
    
    --Tipo de Registro para Extrato de Emprestimo (b1wgen0002tt.i/tt-extrato_epr) 
    TYPE typ_reg_extrato_epr IS RECORD
      (nrdconta crapass.nrdconta%TYPE
      ,dtmvtolt craplem.dtmvtolt%TYPE
      ,cdagenci craplem.cdagenci%TYPE
      ,cdbccxlt craplem.cdbccxlt%TYPE
      ,nrdolote craplem.nrdolote%TYPE
      ,dshistor VARCHAR2(4000)
      ,dshistoi VARCHAR2(4000)
      ,nrdocmto craplem.nrdocmto%TYPE
      ,indebcre VARCHAR2(1)
      ,vllanmto craplem.vllanmto%TYPE 
      ,txjurepr craplem.txjurepr%TYPE 
      ,qtpresta NUMBER
      ,tpemprst crapepr.tpemprst%TYPE
      ,nrparepr crappep.nrparepr%TYPE 
      ,cdhistor craphis.cdhistor%TYPE
      ,nrseqdig craplem.nrseqdig%TYPE
      ,flgsaldo BOOLEAN DEFAULT TRUE
      ,dsextrat VARCHAR2(4000)
      ,flglista BOOLEAN DEFAULT TRUE
      ,nranomes INTEGER
      ,cdorigem VARCHAR2(100)
      ,qtdiacal craplem.qtdiacal%TYPE
      ,vltaxprd craplem.vltaxprd%TYPE
      ,dthrtran craplem.dthrtran%TYPE);
    TYPE typ_tab_extrato_epr IS TABLE OF typ_reg_extrato_epr INDEX BY PLS_INTEGER;
    
    --Tipo de Registro para Extrato de Emprestimo Auxiliar (b1wgen0112tt.i/tt-extrato_epr_aux) 
    TYPE typ_reg_extrato_epr_aux IS RECORD
      (nrdconta crapass.nrdconta%TYPE
      ,dtmvtolt craplem.dtmvtolt%TYPE
      ,cdagenci craplem.cdagenci%TYPE
      ,cdbccxlt craplem.cdbccxlt%TYPE
      ,nrdolote craplem.nrdolote%TYPE
      ,cdhistor craphis.cdhistor%TYPE
      ,dshistor VARCHAR2(4000)
      ,nrdocmto craplem.nrdocmto%TYPE
      ,indebcre VARCHAR2(1)
      ,vllanmto craplem.vllanmto%TYPE 
      ,txjurepr craplem.txjurepr%TYPE 
      ,qtpresta NUMBER
      ,nrparepr VARCHAR2(100)
      ,vldebito craplem.vllanmto%type 
      ,vlcredit craplem.vllanmto%type 
      ,vlsaldo  craplem.vllanmto%type 
      ,dsextrat VARCHAR2(4000)
      ,flglista BOOLEAN DEFAULT TRUE
      ,cdorigem VARCHAR2(100)
      ,qtdiacal craplem.qtdiacal%TYPE
      ,vltaxprd craplem.vltaxprd%TYPE);  
    TYPE typ_tab_extrato_epr_aux IS TABLE OF typ_reg_extrato_epr_aux INDEX BY PLS_INTEGER;

    --Tipo de Tabela para armazenar decimais  
    TYPE typ_tab_number IS TABLE OF NUMBER INDEX BY PLS_INTEGER;
    
    --Tipo de Tabela para armazenar totais do mes (b1wgen0001tt.i/tt-tarifas) 
    TYPE typ_reg_tarifas IS RECORD
       (cdhistor craphis.cdhistor%TYPE
       ,dsexthst craphis.dsexthst%TYPE
       ,vlrdomes typ_tab_number);
    TYPE typ_tab_tarifas IS TABLE OF typ_reg_tarifas INDEX BY VARCHAR(100);
        
    --Tipo de Tabela para armazenar extrato da poupanca (b1wgen0006tt.i/tt-extr-rpp) 
    TYPE typ_reg_extrato_rpp IS RECORD
       (dtmvtolt DATE
       ,cdhistor craphis.cdhistor%TYPE
       ,dshistor VARCHAR2(100)
       ,aghistor PLS_INTEGER -- Deve acumular o valor no histórico
       ,nrdocmto INTEGER
       ,indebcre VARCHAR2(1)
       ,vllanmto NUMBER
       ,vlsldppr NUMBER
       ,txaplica NUMBER
       ,txaplmes NUMBER
       ,cdagenci INTEGER
       ,cdbccxlt INTEGER
       ,nrdolote INTEGER
       ,dsextrat VARCHAR2(100));    
    TYPE typ_tab_extrato_rpp IS TABLE OF typ_reg_extrato_rpp INDEX BY PLS_INTEGER;
    
    --Tipo de Tabela para armazenar extrato cotas (b1wgen0021tt.i/tt-extrato_cotas) 
    TYPE typ_reg_extrato_cotas IS RECORD
      (dtmvtolt DATE
      ,dshistor VARCHAR2(100)
      ,nrdocmto NUMBER
      ,nrctrpla NUMBER
      ,indebcre VARCHAR2(1)
      ,vllanmto NUMBER
      ,vlsldtot NUMBER
      ,cdagenci INTEGER
      ,cdbccxlt INTEGER
      ,nrdolote INTEGER
      ,dsextrat VARCHAR2(1000)
      ,incancel VARCHAR2(1)
      ,lctrowid NUMBER);
    TYPE typ_tab_extrato_cotas IS TABLE OF typ_reg_extrato_cotas INDEX BY PLS_INTEGER;
    
    --Tipo de Tabela para armazenar extrato IR (b1wgen0112tt.i/tt-extrato_ir) 
    TYPE typ_reg_extrato_ir IS RECORD
      (nrcpfcgc VARCHAR2(100)
      ,nrdconta crapass.nrdconta%type
      ,nmprimtl crapass.nmprimtl%type
      ,cdagenci crapass.cdagenci%type
      ,nmsegntl crapttl.nmextttl%type
      ,dsanoant VARCHAR2(10)

      ,dtrefer1 DATE
      ,dtrefer2 DATE

      ,dsdomes1 VARCHAR2(10)
      ,dsdomes2 VARCHAR2(10)
      ,dsdomes3 VARCHAR2(10)

      ,vlsdccd1 NUMBER
      ,vlsdccd2 NUMBER
      ,vlsdccd3 NUMBER
      ,vlttcca1 NUMBER
      ,vlttcca2 NUMBER
      ,vlttcca3 NUMBER
      ,vlsddve1 NUMBER
      ,vlsddve2 NUMBER
      ,vlsddve3 NUMBER
      ,vlsdapl1 NUMBER
      ,vlsdapl2 NUMBER
      ,vlsdapl3 NUMBER
      ,vlrendim NUMBER
      ,vlsobras NUMBER

      ,nmextcop crapcop.nmextcop%type
      ,nrdocnpj VARCHAR2(100)
      ,dsendcop VARCHAR2(100)
      ,dsendcop##1 VARCHAR2(100)
      ,dsendcop##2 VARCHAR2(100)
      ,dscpmfpg VARCHAR2(100)
      ,vlcpmfpg NUMBER
      ,vldoirrf NUMBER
      ,cdagectl crapcop.cdagectl%type
      ,nmcidade VARCHAR2(100)
      ,regexis1 BOOLEAN
      ,dsagenci VARCHAR2(100)
      ,dtmvtolt DATE
      ,dtmvtol1 DATE
      ,vlsddvem NUMBER
      ,vlsdccdp NUMBER
      ,vlsdapli NUMBER
      ,vlttccap NUMBER
      ,qtjaicmf NUMBER
      ,qtjaicm1 NUMBER
      ,vlrenap1 NUMBER
      ,vlmoefix NUMBER(35,8)
      ,vlmoefi1 NUMBER(35,8)
      ,dscooper VARCHAR2(100)
      ,dstelcop VARCHAR2(100)
      ,vlrenapl NUMBER
      ,flganter BOOLEAN
      ,vlrencot NUMBER
      ,vlirfcot NUMBER
      ,anirfcot NUMBER
      ,vlprepag NUMBER
      ,anprepag NUMBER);

    TYPE typ_tab_extrato_ir IS TABLE OF typ_reg_extrato_ir INDEX BY PLS_INTEGER;
    
    --Tipo de Tabela para armazenar retençao de IR (b1wgen0112tt.i/tt-retencao_ir) 
    TYPE typ_reg_retencao_ir IS RECORD
      (nrcpfbnf VARCHAR2(18)
      ,nmmesref VARCHAR2(3)
      ,cdretenc VARCHAR2(100)
      ,dsretenc VARCHAR2(100)
      ,vlrentot NUMBER
      ,vlirfont NUMBER);   
    TYPE typ_tab_retencao_ir IS TABLE OF typ_reg_retencao_ir INDEX BY PLS_INTEGER;

    --Tipo de Registro para Extrato de Cheques do Associado  (b1wgen0001tt.i/tt-extrato_cheque) 
    TYPE typ_reg_extrato_cheque IS RECORD 
      (dtmvtolt VARCHAR2(10)
      ,nrdocmto crapchd.nrdocmto%TYPE
      ,cdbanchq crapchd.cdbanchq%TYPE
      ,cdagechq crapchd.cdagechq%TYPE
      ,nrctachq crapchd.nrctachq%TYPE
      ,nrcheque crapchd.nrcheque%TYPE
      ,nrddigc3 crapchd.nrddigc3%TYPE
      ,vlcheque crapchd.vlcheque%TYPE
      ,vltotchq NUMBER);
    TYPE typ_tab_extrato_cheque IS TABLE OF typ_reg_extrato_cheque INDEX BY PLS_INTEGER;

    /* Tabela utilizada para rotina de geracao de extrato de operacoes de credito*/
    TYPE typ_reg_extrato_ope_credito IS RECORD
        (dscricao VARCHAR2(100)
        ,juroremu NUMBER
        ,juronorm NUMBER
        ,juromora NUMBER
        ,vlrmulta NUMBER
        ,demadesp NUMBER);
      
    TYPE typ_tab_extrato_ope_credito IS 
      TABLE OF typ_reg_extrato_ope_credito 
      INDEX BY VARCHAR2(4); -- mes
      
    -- Subrotina para gerar impressao
    PROCEDURE pc_gera_impressao (pr_cdcooper IN crapcop.cdcooper%TYPE  --Codigo Cooperativa
                                ,pr_cdagenci IN crapass.cdagenci%TYPE  --Codigo Agencia
                                ,pr_nrdcaixa IN INTEGER                --Numero do Caixa
                                ,pr_idorigem IN INTEGER                --Origem dos Dados
                                ,pr_nmdatela IN VARCHAR2               --Nome da Tela
                                ,pr_dtmvtolt IN crapdat.dtmvtolt%TYPE  --Data Movimento
                                ,pr_dtmvtopr IN crapdat.dtmvtopr%TYPE  --Data Proximo Movimento
                                ,pr_cdprogra IN crapprg.cdprogra%TYPE  --Codigo Programa
                                ,pr_inproces IN INTEGER                --Indicador Processo
                                ,pr_cdoperad IN VARCHAR2               --Codigo Operador
                                ,pr_dsiduser IN VARCHAR2               --Identificador Usuario
                                ,pr_flgrodar IN BOOLEAN                --Flag Executar
                                ,pr_nrdconta IN crapass.nrdconta%TYPE  --Numero da Conta do Associado
                                ,pr_idseqttl IN crapttl.idseqttl%TYPE  --Sequencial do Titular
                                ,pr_tpextrat IN INTEGER                --Tipo de Extrato
                                ,pr_dtrefere IN DATE                   --Data de Referencia
                                ,pr_dtreffim IN DATE                   --Data Referencia Final
                                ,pr_flgtarif IN BOOLEAN                --Indicador Cobra tarifa
                                ,pr_inrelext IN INTEGER                --Indicador Relatorio Extrato
                                ,pr_inselext IN INTEGER                --Indicador Selecao Extrato
                                ,pr_nrctremp IN crapepr.nrctremp%TYPE  --Numero Contrato Emprestimo
                                ,pr_nraplica IN craplap.nraplica%TYPE  --Numero Aplicacao
                                ,pr_nranoref IN INTEGER                --Ano de Referencia
                                ,pr_flgerlog IN BOOLEAN                --Escreve erro Log
                                ,pr_clobxml1 IN OUT NOCOPY CLOB        --Clob arquivo de dados crrl040
                                ,pr_dstexto1 IN OUT NOCOPY VARCHAR2    --Texto para Clob 1
                                ,pr_clobxml2 IN OUT NOCOPY CLOB        --Clob arquivo de dados crrl044
                                ,pr_dstexto2 IN OUT NOCOPY VARCHAR2    --Texto para Clob 2
                                ,pr_clobxml3 IN OUT NOCOPY CLOB        --Clob arquivo de dados crrl073
                                ,pr_dstexto3 IN OUT NOCOPY VARCHAR2    --Texto para Clob 3
                                ,pr_clobxml4 IN OUT NOCOPY CLOB        --Clob arquivo de dados crrl088
                                ,pr_dstexto4 IN OUT NOCOPY VARCHAR2    --Texto para Clob 4
                                ,pr_clobxml5 IN OUT NOCOPY CLOB        --Clob arquivo de dados crrl209
                                ,pr_dstexto5 IN OUT NOCOPY VARCHAR2    --Texto para Clob 5
                                ,pr_clobxml6 IN OUT NOCOPY CLOB        --Clob arquivo de dados crrl370
                                ,pr_dstexto6 IN OUT NOCOPY VARCHAR2    --Texto para Clob 6
                                ,pr_clobxml7 IN OUT NOCOPY CLOB        --Clob arquivo de dados crrl499
                                ,pr_dstexto7 IN OUT NOCOPY VARCHAR2    --Texto para Clob 7
                                ,pr_clobxml8 IN OUT NOCOPY CLOB        --Clob arquivo de dados crrl143
                                ,pr_dstexto8 IN OUT NOCOPY VARCHAR2    --Texto para Clob 8
                                ,pr_clobxml9 IN OUT NOCOPY CLOB        --Clob arquivo de dados crrl143b
                                ,pr_dstexto9 IN OUT NOCOPY VARCHAR2    --Texto para Clob 9
                                ,pr_tab_craptab IN apli0001.typ_tab_ctablq   --> Tipo de tabela de Conta Bloqueada
                                ,pr_tab_craplpp IN apli0001.typ_tab_craplpp  --> Tipo de tabela com lancamento poupanca
                                ,pr_tab_craplrg IN apli0001.typ_tab_craplpp  --> Tipo de tabela com resgates
                                ,pr_tab_resgate IN apli0001.typ_tab_resgate  --> Tabela com valores dos resgates das contas por aplicacao
                                ,pr_intpextr IN INTEGER                      --> Tipo de extrato (1=Simplificado, 2=Detalhado)                                
                                ,pr_tpinform IN INTEGER DEFAULT 0      -- Tipo do Informe PJ 1-Anual / 2-Trimestral
                                ,pr_nrperiod IN INTEGER DEFAULT 1      -- Trimestre PJ 1-Jan-Mar / 2-Abr-Jun / 3-Jul-Set / 4-Out-Dez
                                ,pr_nmarqimp OUT VARCHAR2              --Nome Arquivo Impressao
                                ,pr_nmarqpdf OUT VARCHAR2              --Nome Arquivo PDF
                                ,pr_tab_erro OUT GENE0001.typ_tab_erro -- Tabela de Erros
                                ,pr_des_reto OUT VARCHAR2 );           --Descricao OK/NOK

  -- Subrotina para gerar impressao do extrato aplicações programadas
    PROCEDURE pc_gera_impressao_car( pr_cdcooper IN crapcop.cdcooper%TYPE  --Codigo Cooperativa
                                    ,pr_cdagenci IN crapass.cdagenci%TYPE  --Codigo Agencia
                                    ,pr_nrdcaixa IN INTEGER                --Numero do Caixa
                                    ,pr_idorigem IN INTEGER                --Origem dos Dados
                                    ,pr_nmdatela IN VARCHAR2               --Nome da Tela
                                    ,pr_dtmvtolt IN crapdat.dtmvtolt%TYPE  --Data Movimento
                                    ,pr_dtmvtopr IN crapdat.dtmvtopr%TYPE  --Data Proximo Movimento
                                    ,pr_cdprogra IN crapprg.cdprogra%TYPE  --Codigo Programa
                                    ,pr_inproces IN INTEGER                --Indicador Processo
                                    ,pr_cdoperad IN VARCHAR2               --Codigo Operador
                                    ,pr_dsiduser IN VARCHAR2               --Identificador Usuario
                                    ,pr_flgrodar IN INTEGER                --Flag Executar
                                    ,pr_nrdconta IN crapass.nrdconta%TYPE  --Numero da Conta do Associado
                                    ,pr_idseqttl IN crapttl.idseqttl%TYPE  --Sequencial do Titular
                                    ,pr_tpextrat IN INTEGER                --Tipo de Extrato
                                    ,pr_dtrefere IN DATE                   --Data de Referencia
                                    ,pr_dtreffim IN DATE                   --Data Referencia Final
                                    ,pr_flgtarif IN INTEGER                --Indicador Cobra tarifa
                                    ,pr_inrelext IN INTEGER                --Indicador Relatorio Extrato
                                    ,pr_inselext IN INTEGER                --Indicador Selecao Extrato
                                    ,pr_nrctremp IN crapepr.nrctremp%TYPE  --Numero Contrato Emprestimo
                                    ,pr_nraplica IN craplap.nraplica%TYPE  --Numero Aplicacao
                                    ,pr_nranoref IN INTEGER                --Ano de Referencia
                                    ,pr_flgerlog IN INTEGER                --Escreve erro Log
                                    ,pr_intpextr IN INTEGER                --Tipo de extrato (1=Simplificado, 2=Detalhado)                                    
                                    ,pr_tpinform IN INTEGER DEFAULT 0      -- Tipo do Informe PJ 1-Anual / 2-Trimestral
                                    ,pr_nrperiod IN INTEGER DEFAULT 1      -- Trimestre PJ 1-Jan-Mar / 2-Abr-Jun / 3-Jul-Set / 4-Out-Dez
                                    ,pr_nmarqimp OUT VARCHAR2              --Nome Arquivo Impressao
                                    ,pr_nmarqpdf OUT VARCHAR2              --Nome Arquivo PDF
                                    ,pr_des_reto OUT VARCHAR2 );           --Descricao OK/NOK                                    
    
    PROCEDURE pc_gera_impressao_portab(pr_nrdconta IN crapass.nrdconta%TYPE --Numero da Conta do Associado
                                      ,pr_nrctremp IN crapepr.nrctremp%TYPE --Numero Contrato Emprestimo
                                      ,pr_xmllog   IN VARCHAR2              --XML com informações de LOG
                                      ,pr_cdcritic OUT PLS_INTEGER          --Código da crítica
                                      ,pr_dscritic OUT VARCHAR2             --Descrição da crítica
                                      ,pr_retxml   IN OUT NOCOPY XMLType    --Arquivo de retorno do XML
                                      ,pr_nmdcampo OUT VARCHAR2             --Nome do campo com erro
                                      ,pr_des_erro OUT VARCHAR2);           --Erros do processo
    
  --Subrotina para excluir lancamentos futuros 
  PROCEDURE pc_exclui_lautom_gen(pr_cdcooper IN crapcop.cdcooper%TYPE
                                ,pr_cdoperad IN crapope.cdoperad%TYPE
                                ,pr_nmdatela IN craptel.nmdatela%TYPE
                                ,pr_cdagenci IN crapage.cdagenci%TYPE
                                ,pr_nrdcaixa IN craplot.nrdcaixa%TYPE
                                ,pr_idorigem IN INTEGER
                                ,pr_dstabela IN VARCHAR2
                                ,pr_genrecid IN craplau.progress_recid%TYPE
                                ,pr_cdhistor IN craphis.cdhistor%TYPE
                                ,pr_cdcritic OUT crapcri.cdcritic%TYPE
                                ,pr_dscritic OUT crapcri.dscritic%TYPE);    
                                
  PROCEDURE pc_exclui_lautom_web(pr_dstabela IN  VARCHAR2                    --Tabela
                                ,pr_cdhistor IN  craphis.cdhistor%TYPE       --Historico
                                ,pr_genrecid IN  craplau.progress_recid%TYPE -- RECID
                                ,pr_xmllog   IN  VARCHAR2                    -- XML com informações de LOG
                                ,pr_cdcritic OUT PLS_INTEGER                 -- Código da crítica
                                ,pr_dscritic OUT VARCHAR2                    -- Descrição da crítica
                                ,pr_retxml   IN  OUT NOCOPY XMLType          -- Arquivo de retorno do XML
                                ,pr_nmdcampo OUT VARCHAR2                    -- Nome do campo com erro
                                ,pr_des_erro OUT VARCHAR2);
  
  --Subrotina para consultar lancamentos futuros 
  PROCEDURE pc_consulta_lancamento (pr_cdcooper IN crapcop.cdcooper%TYPE              --Codigo Cooperativa
                                   ,pr_cdagenci IN crapass.cdagenci%TYPE              --Codigo Agencia
                                   ,pr_nrdcaixa IN INTEGER                            --Numero do Caixa
                                   ,pr_cdoperad IN VARCHAR2                           --Codigo Operador
                                   ,pr_nrdconta IN crapass.nrdconta%TYPE              --Numero da Conta do Associado
                                   ,pr_idorigem IN INTEGER                            --Origem dos Dados
                                   ,pr_idseqttl IN INTEGER                            --Sequencial do Titular
                                   ,pr_nmdatela IN VARCHAR2                           --Nome da Tela
                                   ,pr_flgerlog IN BOOLEAN                            --Imprimir log
                                   ,pr_dtiniper IN DATE                               -- Data inicio
                                   ,pr_dtfimper IN DATE                               -- Data final
                                   ,pr_indebcre IN craphis.indebcre%TYPE              -- Debito/Credito
                                   ,pr_des_reto OUT VARCHAR2                          --Retorno OK ou NOK
                                   ,pr_tab_erro OUT GENE0001.typ_tab_erro             --Tabela Retorno Erro
                                   ,pr_tab_totais_futuros OUT typ_tab_totais_futuros  --Vetor para o retorno das informações
                                   ,pr_tab_lancamento_futuro OUT typ_tab_lancamento_futuro);  --Vetor para o retorno das informações                                
                                   
  -- Subrotina para gerar extrato de operacoes de credito
  PROCEDURE pc_gera_extrato_op_credito(pr_cdcooper IN crapcop.cdcooper%TYPE  --Codigo Cooperativa
                                      ,pr_cdagenci IN crapass.cdagenci%TYPE  --Codigo Agencia
                                      ,pr_nrdcaixa IN INTEGER                --Numero do Caixa
                                      ,pr_idorigem IN INTEGER                --Origem dos Dados
                                      ,pr_nmdatela IN VARCHAR2               --Nome da Tela                                
                                      ,pr_dtmvtolt IN VARCHAR2               --Data Movimento
                                      ,pr_cdprogra IN crapprg.cdprogra%TYPE  --Codigo Programa
                                      ,pr_cdoperad IN VARCHAR2               --Codigo Operador                                  
                                      ,pr_dsiduser IN VARCHAR2               --Identificador Usuario
                                      ,pr_nrdconta IN crapass.nrdconta%TYPE  --Numero da Conta do Associado
                                      ,pr_dtrefere IN VARCHAR2               --Data de Referencia
                                      ,pr_flgrodar IN INTEGER                --Flag Executar
                                      ,pr_flgerlog IN INTEGER                --Escreve erro Log                                                                                           
                                      ,pr_nmarqimp OUT VARCHAR2              --Nome Arquivo Impressao
                                      ,pr_nmarqpdf OUT VARCHAR2              --Nome Arquivo PDF
                                      ,pr_des_reto OUT VARCHAR2              --Saida OK/NOK
                                      ,pr_clobxml  OUT CLOB                  --Clob arquivo de dados
                                      ,pr_cdcritic OUT PLS_INTEGER           --Codigo Erro
                                      ,pr_dscritic OUT VARCHAR2);            --Descricao Erro                                                              
                                      
  --Subrotina para consultar extrato do capital retorno informacoes em XML
  PROCEDURE pc_extrato_cotas_xml(pr_cdcooper    IN crapcop.cdcooper%TYPE       --Codigo Cooperativa
                                ,pr_cdagenci    IN crapass.cdagenci%TYPE       --Codigo Agencia
                                ,pr_nrdcaixa    IN INTEGER                     --Numero do Caixa
                                ,pr_cdoperad    IN VARCHAR2                    --Codigo Operador
                                ,pr_nmdatela    IN VARCHAR2                    --Nome da Tela
                                ,pr_idorigem    IN INTEGER                     --Origem da Chamada
                                ,pr_nrdconta    IN crapass.nrdconta%TYPE       --Numero da Conta do Associado
                                ,pr_idseqttl    IN INTEGER                     --Sequencial do Titular
                                ,pr_dtmvtolt    IN DATE                        --Data Movimento
                                ,pr_dtiniper    IN DATE                        --Periodo inicial
                                ,pr_dtfimper    IN DATE                        --Periodo Final
                                ,pr_flgerlog    IN INTEGER                     --Imprimir log (1-Sim/0-Não)
                                ,pr_vlsldant    OUT NUMBER                     --Valor Saldo Anterior
                                ,pr_xml_extrato_cotas OUT CLOB                 --Tabela Extrato Cotas em XML
                                ,pr_des_reto    OUT VARCHAR2                   --Retorno OK ou NOK
                                ,pr_dscritic    OUT VARCHAR2);                 --Descricao do Erro

  --Rotina referente a consulta de lancamentos.
PROCEDURE pc_consulta_lancto_car (pr_cdcooper IN crapcop.cdcooper%TYPE              --Codigo Cooperativa
                                 ,pr_cdagenci IN crapass.cdagenci%TYPE              --Codigo Agencia
                                 ,pr_nrdcaixa IN INTEGER                            --Numero do Caixa
                                 ,pr_cdoperad IN VARCHAR2                           --Codigo Operador
                                 ,pr_nrdconta IN crapass.nrdconta%TYPE              --Numero da Conta do Associado
                                 ,pr_idorigem IN INTEGER                            --Origem dos Dados
                                 ,pr_idseqttl IN INTEGER                            --Sequencial do Titular
                                 ,pr_nmdatela IN VARCHAR2                           --Nome da Tela
                                 ,pr_flgerlog IN PLS_INTEGER                        --Imprimir log
                                 ,pr_dtiniper IN DATE                               -- Data inicio
                                 ,pr_dtfimper IN DATE                               -- Data final
                                 ,pr_indebcre IN craphis.indebcre%TYPE              -- Debito/Credito
                                 ,pr_dscritic OUT VARCHAR2                          --Retorno OK ou NOK
                                 ,pr_cdcritic OUT INTEGER                           --Retorno OK ou NOK
                                 ,pr_clobxmlc_totais OUT CLOB                       -- XML com informações de LOG
                                 ,pr_clobxmlc OUT CLOB);                                      
                                   
 PROCEDURE pc_saldo_pp_mensal (pr_cdcooper IN crapcop.cdcooper%TYPE  --Codigo Cooperativa
                              ,pr_nrdconta IN crapass.nrdconta%TYPE  --Numero da Conta do Associado
                              ,pr_anorefer IN INTEGER                --Ano de Referencia
                              ,pr_mesrefer IN INTEGER                --Tipo de Extrato
                              ,pr_vlrsldpp OUT NUMBER                -- Saldo do Mes de Poupanca Programada
                              ,pr_dsperiod OUT VARCHAR2);            -- Retorna a descrição do Periodo


  PROCEDURE pc_gera_impextir_pj_trim_car
                    (pr_cdcooper IN crapcop.cdcooper%TYPE  --Codigo Cooperativa
                    ,pr_cdagenci IN crapass.cdagenci%TYPE  --Codigo Agencia
                    ,pr_nrdcaixa IN INTEGER                --Numero do Caixa
                    ,pr_idorigem IN INTEGER                --Origem dos Dados
                    ,pr_nmdatela IN VARCHAR2               --Nome da Tela
                    ,pr_dtmvtolt IN crapdat.dtmvtolt%TYPE  --Data Movimento
                    ,pr_inproces IN INTEGER                --Indicador Processo
                    ,pr_cdprogra IN crapprg.cdprogra%TYPE  --Codigo Programa
                    ,pr_cdoperad IN VARCHAR2               --Codigo Operador
                    ,pr_dsiduser IN VARCHAR2               --Identificador Usuario
                    ,pr_nrdconta IN crapass.nrdconta%TYPE  --Numero da Conta do Associado
                    ,pr_anorefer IN INTEGER                --Ano de Referencia
                    ,pr_tpextrat IN INTEGER                --Tipo de Extrato
                    ,pr_nrperiod IN INTEGER                -- Trimestre de Referencia
                    ,pr_flgrodar IN NUMBER                --Flag Executar
                    ,pr_flgerlog IN NUMBER                --Escreve erro Log
                    ,pr_dstexto  OUT VARCHAR2              --Texto Clob
                    ,pr_dsmsgerr OUT VARCHAR2              -- Mensagem de erro (Progress)
                    ,pr_nmarqimp OUT VARCHAR2              --Nome Arquivo Impressao
                    ,pr_nmarqpdf OUT VARCHAR2              --Nome Arquivo PDF
                    ,pr_des_reto OUT VARCHAR2 );
                    
END EXTR0002;
/
CREATE OR REPLACE PACKAGE BODY CECRED.EXTR0002 AS

  /* -------------------------------------------------------------------------------------------------------------

    Programa: EXTR0002                           Antigo: sistema/generico/procedures/b1wgen0112.p
    Autor   : Gabriel Capoia dos Santos (DB1)
    Data    : Agosto/2011                        Ultima atualizacao: 14/11/2018

    Objetivo  : Tranformacao BO tela IMPRES

    Alteracoes: 
                04/10/2011 - Adicionado o parametro par_flgerlog na chamada da  
                            procedure extrato_cotas (Rogerius Militão - DB1)
               
                21/10/2011 - Adicionado a include b1cabrelvar.i 
                            (Rogerius Militão - DB1)

                06/02/2012 - Ajsutes em layout e informações adicionais em
                            Informativos de Rendimento. (Jorge) 

                21/03/2012 - Modificado o titulo do item 3 do extrato de  
                            tarifas (Tiago).

                23/03/2012 - Tratamento para composicao do saldo do extrato
                             tt-extrato_epr.flgsaldo (Tiago)

                03/04/2012 - Inserido procedure imprime extrato (Tiago).

                17/04/2012 - Alteracoes na procedure imprime extrato (Tiago).

                19/04/2012 - Alteracoes na procedure gera-impextepr (Tiago).

                02/05/2012 - Modificacoes nahora de compor o saldo
                             do emprestimo tipo 1 (Tiago).

                28/08/2012 - Novo param. par_tprelato na gera-impextrda
                           - Alter. FOR EACH tt-saldo-rdca na gera-impextrda
                           - Novo param tpmodelo na Valida_Opcao
                           - TT-IMPRES incluida validacao do tpmodelo
                           - Procedure Gera_Impressao_Aplicacao
                           - Novos parametros DATA na chamada da procedure
                             obtem-dados-aplicacoes (Guilherme/Supero).
                             
                01/10/2012 - Ajustes format dos frames f_lanctos_rdc e
                             f_lanctos da procedure gera-impextrda . (Jorge)
                             
                02/10/2012 - Ajustes no layout de impressao da procedure
                             gera-impextcap (Lucas R.).
                            
                03/10/2012 - Trocado parametro dshistor pelo dsextrat em 
                             procedure gera-impextppr. (Jorge)           
                             
                04/10/2012 - Alterações no frame 'f_lanctos' para exibição do
                             campo de Descr. do Extrato (Lucas) [Projeto Tarifas] 
                             
                08/10/2012 - Ajustes no layout de impressao da procedure
                             gera-impextepr e imprime_extrato, removido opcao
                             de tpemprst = 1 da gera-impextepr (Lucas R.)
                             
                17/10/2012 - Nova chamada da procedure valida_operador_migrado
                             da b1wgen9998 para controle de contas e operadores
                             migrados (David Kruger).
                             
                11/12/2012 - Incluir historicos de migracao (Ze).
                
                30/01/2013 - Incluir tratamento para nao aparecer juros na
                             listagem quando cdhistor = 1040,1041,1042,1043
                             (Lucas R.).
                             
                13/02/2013 - Adicionado em "Rendimentos Isentos" e "Informacoes 
                             Complementares" o item "CREDITO RETORNO DAS SOBRAS"
                             (Jorge).
                             
                14/02/2013 - Nova chamada da procedure valida_restricao_operador
                             Projeto Acesso a contas Restritas (Lucas R.)
                             
                26/03/2013 - Incluido dshistor na ordenação do emprestimo 
                             price pre-fixado. (Irlan)
                
                29/05/2013 - Chamada da procedure verifica-tarifacao-extrato
                             na procedure grava_dados para pegar o campo
                             aux_inisenta (Tiago).
                                 
                04/06/2013 - Ajuste no Demonstrativo Financeiro 
                             (Guilherme/Supero).
                             
                11/06/2013 - Incluir etorna-valor-blqjud e listado vlblqjud
                             como rodape dos relatorios nas procedures:
                             gera-impextrda, gera-impextppr, gera-impextcap,
                             gera_impressao_demonstrativo, gera-impextapl, 
                             gera_impressao_sintetico,gera-impextdpv (Lucas R).
                             
                18/06/2013 - Segunda fase do Projeto Credito (Gabriel).
                
                01/07/2013 - Retirado o USE-INDEX da crapext (Evandro).
                
                08/08/2013 - Ajuste na ordenacao do extrato do emprestimo 
                            (Gabriel).
                  
                30/09/2013 - Nova forma de chamar as agências, de PAC agora 
                            a escrita será PA (André Euzébio - Supero).  
                            
                27/11/2013 - Ajuste na procedure imprime_extrato para
                             alimentar a aux_txinmens com craplcr.perjurmo
                             (Adriano).
                             
                11/12/2013 - Adicionado VALIDATE para CREATE. (Jorge)
                
                07/01/2014 - Ajuste de format de documento e valor no frame 
                             f_lanctos_rdc, procedure gera-impextrda (Carlos)
                             
                31/01/2014 - Ajustes no format do frame f_lanctos0, "nrdocmto"
                             (Lucas R.)
                             
                05/02/2014 - Ajustes no format da procedure gera-impextcap
                             frame f_lanctos_n "nrdocmto" (Lucas R.)
                             
                24/02/2014 - Adicionado param. de paginacao em procedure
                             obtem-dados-emprestimos em BO 0002.(Jorge)
                                          
                14/04/2014 - Ajuste para mostrar Aplicacao de Renda Fixa em
                             Inf. Rend. de PJ e bloquear impressao de Inf. Rend.
                             de PF quando for PJ.(Jorge)

                10/09/2014 - Conversao Progress -> Oracle (Alisson - AMcom) 

                30/10/2014 - Alterado a procedure pc_consulta_lancamento para incluir 
                             o histórico 530 na lista de históricos verificados em 
                             finais de semana e feriados. Verificar se o lançamento de
                             histórico 530 foi proveniente de agendamento.
                             (Douglas - Projeto Captação Internet 2014/2)
                                                         
                03/11/2014 - Adicionado tratamento para ignorar os lançamentos futuros 
                             do histórico 15 e da tabela 'de-para' da Cabal na procedure 
                             pc_consulta_lancamento (Douglas - Solicitação Oscar)
                             
                18/11/2014 - Alteracao das procedures (pc_gera_impextepr, pc_gera_impextrda,
                             pc_gera_impextppr, pc_gera_impextcap, pc_gera_impexttar,
                             pc_gera_impextapl, pc_gera_impextir, pc_gera_impextcti,
                             pc_gera_impextdpv) e criacao da procedure pc_gera_impressao_car
                             Ambas alteracoes feitas para geracao de extrados atraves do
                             PROGRESS chamando rotinas ORACLE. Na pc_gera_impressao foi 
                             feito tratamento para a carga das PLTABLE necessarias aos tipos
                             5 e 10 de relatorios gerados por esta PACKAGE.
                             (Carlos Rafael Tanholi - Projeto Novos Produtos de Captacao)
														 
                26/12/2014 - Alterada procedure pc_gera_impextrda para tratar novos
								             produtos de captacao. (Reinert)  

                06/01/2015 - Alterada procedure pc_gera_impextepr.  Ajuste na chamada do cursor 
                             cr_craplem pra usar o numero do contrato corrente. ( Jean - RKAM )  

                27/01/2015 - Alterado o formato do campo nrctremp para 8 
                             caracters (Kelvin - 233714)
														 
								30/01/2015 - Alterada procedure pc_extrato_investimento para capturar
								             lançamentos bloqueados dos novos produtos de captação. (Reinert)
                             
                09/06/2015 - Ajuste para retirar aspas que causava quebra de xml, e erro impresssao.
                             (Jorge/Gielow) - Emergencial

                13/08/2015 - Adicionado tratamento para os historicos 1711 e 1720
	                         nas procedures pc_obtem_extrato_emprest e pc_imprime_extrato.(Reinert)  
                 
                25/08/2015 - Incluido procedure para exclusao generica de lancamentos (Tiago/Rodrigo),
                              vr_terminal aumentado o tamanho para 125 pos (Carlos #288099) .
                              
                13/11/2015 - Ajustado leitura na CRAPOPE incluindo upper (Odirlei-AMcom)             
				  
				        09/12/2015 - Ajustes na leitura das tarifas na procedure pc_gera_extrato_tarifas (Dionathan)
                
                21/12/2015 - Ajuste na informacao gravado no campo de historico, estava concatenando a descricao
                             com o cedente e em alguns casos, estourando o campo, sera cortado em 50 posicoes.
                             Chamado 376432 (Heitor RKAM)
                
                04/01/2015 - Ajuste na pc_consulta_lancamento para exibir apenas 50 caracteres no dshistor 
                             SD381109 (Odirlei-AMcom) 
                             
                15/12/2015 - Criado rotina para geração do relatório "Tarifa Op. Créditos" 
                             (Jonathan - RKAM > M273).
                             
                17/02/2016 - Ajustes na pc_consulta_lancamento referentes ao projeto melhoria 157
                             (Lucas Ranghetti #330322)
				        
                26/02/2016 - Mostrar titulos vencidos na lautom (craptdb)
                            (Tiago/Rodrigo melhoria 116).

                23/03/2016 - Adicionado origem 4(TAA) para armazenar a variavel
                             vr_dtddlslf na procedure pc_consulta_lancamento (Lucas Ranghetti #411852)

                17/02/2016 - Ajuste na rotina pc_gera_impextir ao compor o saldo de retorno para pessoa juridica
                             conforme solicitado no chamado 396382. (Kelvin) 

                 06/04/2016 - Ajustes feito para correção do chamado 426937. (Kelvin)             
                             
                20/04/2016 - Remover comando rm e incluir direto na tela impres 
                             (Lucas Ranghetti/Rodrigo #399412)
                             
                27/04/2016 - Incluir campo genrecid na consulta-lancto-car(Lucas Ranghetti/Fabricio)
                
                06/05/2016 - Incluir Raise de OK no if do idorigem = 4 conforme faz a bo3 e
                             na craptdb alterado a somana para subtracao na pc_consulta_lancamento
                             (Lucas Ranghetti #446796,#447729)
                             
                16/05/2016 - Ajustar cursor cr_craptab_ctabloq que estava filtrando o numero
                             da conta na crapcop e para que seja utilizado o indice da craptab
                             na pc_gera_impressao_car (Douglas - Chamado 452281)

                06/04/2016 - Incluido novo tratamento para Prj. Tarifas na procedure pc_gera_tarifa_extrato (Jean Michel)   
                             
                15/06/2016 - Tramaneto feito para ajustar a data de lançamentos futuros conforme solicitado
                             no chamado 469078. (Kelvin)

                04/07/2016 - Ajuste para melhora de performance (Adriano - SD 480339).

                02/08/2016 - Nao tratar parametro de isencao de extrato na cooperativa
                             quando cooperado possuir servico "extrato" no pacote de
                             tarifas (Diego).

                11/07/2016 - M325 - Informe de Rendimentos (Guilherme/SUPERO)
                           - Alteração nos parametros da pc_gera_impressao_car / pc_gera_impressao
                           - Tratamento para emissão Informe PJ Trimestral

				07/09/2016 - Incluido historico 863 no extrato de poupanca programada da ATENDA
                           - Andrey (RKAM) - Chamado 507087

                05/10/2016 - #484925 Correção da forma de como era montado o extrato de cotas para evitar
                             cálculos errados na composição do extrato das contas migradas, procedure
                             pc_extrato_cotas (Carlos)

				08/11/2016 - Alteracoes referentes a melhoria 165 - Lancamentos Futuros. Lenilson (Mouts)

				08/11/2016 - Ajuste das Rotina de Extrato de Integralização.
                            M169 (Ricardo Linhares)
				
				23/11/2016 - Ajuste nos lancamentos futuros de emprestimos (Lenilson - Mouts)

        29/11/2016 - P341 - Automatização BACENJUD - Alterado para validar o departamento à partir
                     do código e não mais pela descrição (Renato Darosci - Supero)

        17/01/2017 - Ajuste na pc_consulta_lancamento que nao estava passando a critica
                     para frente. SD 594506 (Kelvin).

        01/03/2017 - Adicionar origem ADIOFJUROS para podermos debitar estes agendamentos
                     na procedure pc_consulta_lancamento (Lucas Ranghetti M338.1) 
					 
		22/03/2017 - Adicionado tratamento na pc_consulta_lancamento para listar
				     reacarga de celular. (PRJ321 Reinert)                   

        05/04/2017 - #455742 Melhorias de performance. Ajuste de passagem dos parâmetros inpessoa
                     e nrcpfcgc para não consultar novamente o associado nos packages 
                     apli0001 e imut0001 (Carlos)

        26/04/2017 - Ajuste para retirar o uso de campos removidos da tabela
			         crapass, crapttl, crapjur 
					(Adriano - P339).
                     
        11/09/2017 - Ajuste para retirar caracteres especiais ao gerar a tag dssubmod (Jonta - RKAM / 739433).
      
        28/09/2017 - Ajustado format da tag <vldiario> do relatorio crrl40 pois estava estourando (Tiago #724513).      
                   
        17/01/2018 - Ajustar chamada da rotina TARI0001.pc_carrega_dados_tar_vigente
                     pois haviam casos em que não estavamos entrando na rotina
                     na procedure pc_gera_tarifa_extrato (Lucas Ranghetti #787894)
        
        21/05/2018 - Alterações relacionadas a SM4 - PRJ364 - Paulo Martins - Mout´s
        
        30/05/2018 - Adicionado dscomple xml na pc_gera_impextdpv (Alcemir Mout's - Prj. 467).                     
        
        03/08/2018 - Inclusao de aplicacoes programadas - PRJ 411.2 - CIS Corporate

        17/08/2018 - sctask0012764 Inclusão de module e action nas subrotinas da rotina
                     pc_gera_impressao_car para fracionar as execuções no log do BD (Carlos)
        
				14/11/2018 - Alteração na procedure "pc_consulta_lancamento" para incluir o valor provisionado
				             de juros remuneratórios do prejuízo de conta corrente na tela LAUTOM.
										 (Reginaldo/AMcom/P450)
        
  ---------------------------------------------------------------------------------------------------------------
..............................................................................*/


    --Subrotina para verificar tarifacao do extrato
    PROCEDURE pc_verifica_tarif_extrato     (pr_cdcooper IN crapcop.cdcooper%TYPE       --Codigo Cooperativa
                                            ,pr_nrdconta IN crapass.nrdconta%TYPE       --Numero da Conta do Associado
                                            ,pr_dtmvtolt IN crapdat.dtmvtolt%TYPE       --Data Movimento
                                            ,pr_dtiniper IN DATE                        --Data Inicio periodo
                                            ,pr_inisenta OUT INTEGER                    --Origem dos Dados
                                            ,pr_des_reto OUT VARCHAR2                   --OK ou NOK
                                            ,pr_tab_erro OUT gene0001.typ_tab_erro) IS  --Tabela de Erros
    BEGIN
  ---------------------------------------------------------------------------------------------------------------
  --
  --  Programa : pc_verifica_tarif_extrato            Antigo: procedures/b1wgen0001.p/verifica-tarifacao-extrato
  --  Sistema  : 
  --  Sigla    : CRED
  --  Autor    : Alisson C. Berrido - Amcom
  --  Data     : Julho/2014                           Ultima atualizacao: 03/07/2014
  --
  -- Dados referentes ao programa:
  --
  -- Frequencia: -----
  -- Objetivo   : Procedure para verificar tarifacao relativa ao extrato
  --
  -- Alterações : 03/07/2014 - Conversão Progress -> Oracle (Alisson - AMcom)
  --              
  ---------------------------------------------------------------------------------------------------------------
      DECLARE
      --Cursores Locais
      
      /* Verifica quantidade de extratos emitidos sem tarifacao */
      CURSOR cr_craptex (pr_cdcooper IN craptex.cdcooper%TYPE
                        ,pr_nrdconta IN craptex.nrdconta%TYPE
                        ,pr_dtemiext IN craptex.dtemiext%TYPE) IS
        SELECT count(1) qtdemit
        FROM craptex 
        WHERE craptex.cdcooper = pr_cdcooper  
        AND   craptex.nrdconta = pr_nrdconta  
        AND   craptex.inisenta = 1             
        AND   craptex.tpextrat = 51            
        AND   craptex.dtemiext >= pr_dtemiext;
      rw_craptex cr_craptex%ROWTYPE;
                        
      --Variaveis Locais
      vr_dsconteu VARCHAR2(100);
      vr_qtdisent INTEGER;
      vr_dtemiext DATE;
      --Variaveis Erro
      vr_cdcritic  INTEGER;
      vr_dscritic  VARCHAR2(4000);  
      vr_des_reto  VARCHAR2(3);     
      --Variaveis de Excecoes
      vr_exc_erro EXCEPTION;
      vr_exc_sair EXCEPTION;
    BEGIN
      --Limpar tabela memoria
      pr_tab_erro.DELETE;
      --Indicador Isencao
      pr_inisenta:= 0;
      /* Verifico se extrato periodo, o mesmo eh tarifado e nao tem isencao*/
      IF pr_dtiniper < ( pr_dtmvtolt - 30 )  THEN /* Periodo */
        pr_des_reto:= 'OK';
        RETURN;
      END IF;  
      /*  Busca quantidade limite de extratos por mes livres de tarifacao*/
      tari0001.pc_carrega_par_tarifa_vigente(pr_cdcooper => pr_cdcooper
                                            ,pr_cdbattar => 'EXTMESISEN'
                                            ,pr_dsconteu => vr_dsconteu
                                            ,pr_cdcritic => vr_cdcritic
                                            ,pr_dscritic => vr_dscritic
                                            ,pr_des_erro => vr_des_reto
                                            ,pr_tab_erro => pr_tab_erro);
      -- verifica se houve erro no retorno
      IF vr_des_reto = 'NOK' THEN
        pr_des_reto:= 'NOK';
        RETURN;
      END IF;
     
      --Quantidade dias isencao
      vr_qtdisent:= to_number(vr_dsconteu);
      /* Monta data inicial do mes e ano corrente */
      vr_dtemiext:= TRUNC(pr_dtmvtolt,'MM');
      /* Verifica quantidade de extratos emitidos sem tarifacao */
      OPEN cr_craptex (pr_cdcooper => pr_cdcooper
                      ,pr_nrdconta => pr_nrdconta
                      ,pr_dtemiext => vr_dtemiext);
      FETCH cr_craptex INTO rw_craptex;
      --Fechar Cursor
      CLOSE cr_craptex;
     
      --Diminuir a quantidade de extratos já emitidos
      vr_qtdisent:= vr_qtdisent - rw_craptex.qtdemit;
      
      /* Enquanto a quantidade for positiva nao deve gerar tarifar. */
      IF vr_qtdisent > 0 THEN
        pr_inisenta:= 1; /* Nao Tarifa */
      END IF;  
      -- Retorno OK
      pr_des_reto:= 'OK';
      
    EXCEPTION
      WHEN vr_exc_erro THEN
        -- Retorno não OK
        pr_des_reto := 'NOK';
      WHEN OTHERS THEN
        
        -- Retorno não OK
        pr_des_reto := 'NOK';
        -- Chamar rotina de gravação de erro
        vr_dscritic := 'Erro na pc_verifica_tarif_extrato --> '|| sqlerrm;
        gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                             ,pr_cdagenci => 0
                             ,pr_nrdcaixa => 0
                             ,pr_nrsequen => 1 --> Fixo
                             ,pr_cdcritic => 0 --> Critica 0
                             ,pr_dscritic => vr_dscritic
                             ,pr_tab_erro => pr_tab_erro);
      END;
    END pc_verifica_tarif_extrato; 

    --Subrotina para gerar tarifa relativa ao extrato
    PROCEDURE pc_gera_tarifa_extrato (pr_cdcooper IN crapcop.cdcooper%TYPE   --Codigo Cooperativa
                                     ,pr_cdagenci IN crapass.cdagenci%TYPE   --Codigo Agencia
                                     ,pr_nrdcaixa IN INTEGER                 --Numero do Caixa
                                     ,pr_cdoperad IN VARCHAR2                --Codigo Operador
                                     ,pr_nmdatela IN VARCHAR2                --Nome da Tela
                                     ,pr_idorigem IN INTEGER                 --Origem dos Dados
                                     ,pr_nrdconta IN crapass.nrdconta%TYPE   --Numero da Conta do Associado
                                     ,pr_idseqttl IN INTEGER                 --Sequencial do Titular
                                     ,pr_dtrefere IN DATE                    --Data Referencia
                                     ,pr_inproces IN crapdat.inproces%TYPE   --Indicador Processo
                                     ,pr_flgtarif IN BOOLEAN                 --Cobrar tarifa                      
                                     ,pr_flgerlog IN BOOLEAN                 --Sem log
                                     ,pr_cdcoptfn IN INTEGER                 --Cooperativa Transferencia
                                     ,pr_cdagetfn IN INTEGER                 --Agencia Transferencia
                                     ,pr_nrterfin IN INTEGER                 --Terminal Financeiro
                                     ,pr_des_reto OUT VARCHAR2               --OK ou NOK
                                     ,pr_tab_erro OUT gene0001.typ_tab_erro  --Tabela de Erros
                                     ,pr_tab_msg_confirma OUT empr0001.typ_tab_msg_confirma) IS  --> Vetor para o retorno das informações
  BEGIN
  ---------------------------------------------------------------------------------------------------------------
  --
  --  Programa : pc_gera_tarifa_extrato            Antigo: procedures/b1wgen0001.p/gera-tarifa-extrato
  --  Sistema  : 
  --  Sigla    : CRED
  --  Autor    : Alisson C. Berrido - Amcom
  --  Data     : Julho/2014                           Ultima atualizacao: 17/01/2018
  --
  -- Dados referentes ao programa:
  --
  -- Frequencia: -----
  -- Objetivo   : Procedure para gerar tarifa relativa ao extrato
  --
  -- Alterações : 02/07/2014 - Conversão Progress -> Oracle (Alisson - AMcom)
  --              
  --              06/04/2016 - Inclusao de tratamento para Prj. 218/2 Pct. Tarifas (Jean Michel)
  --
  --              02/08/2016 - Nao tratar parametro de isencao de extrato na cooperativa
  --                           quando cooperado possuir servico "extrato" no pacote de
  --                           tarifas (Diego).
  --
  --              17/01/2018 - Ajustar chamada da rotina TARI0001.pc_carrega_dados_tar_vigente
  --                           pois haviam casos em que não estavamos entrando na rotina
  --                           (Lucas Ranghetti #787894)
  ---------------------------------------------------------------------------------------------------------------
  DECLARE
      --Cursores Locais
      
      -- Busca dos dados do associado
      CURSOR cr_crapass(pr_cdcooper IN crapcop.cdcooper%TYPE
                       ,pr_nrdconta IN crapass.nrdconta%TYPE) IS
        SELECT crapass.nrdconta
              ,crapass.nmprimtl
              ,crapass.vllimcre
              ,crapass.nrcpfcgc
              ,crapass.inpessoa
              ,crapass.cdcooper
              ,crapass.cdagenci
        FROM crapass crapass
        WHERE crapass.cdcooper = pr_cdcooper
        AND   crapass.nrdconta = pr_nrdconta;
      rw_crapass cr_crapass%ROWTYPE;      
      --Variaveis Locais
      vr_flgtrans BOOLEAN;
      vr_inisenta INTEGER;
      vr_cdbattar VARCHAR2(100);
      vr_dsorigem VARCHAR2(100);
      vr_cdhisest INTEGER;
      vr_dtdivulg DATE;
      vr_dtvigenc DATE;
      vr_vllanaut NUMBER;
      vr_cdhistor INTEGER;
      vr_cdfvlcop INTEGER;
      vr_tpextrat INTEGER;
      vr_dstransa VARCHAR2(100);
      vr_nrdrowid ROWID;
      -- cursor genérico de calendário
      rw_crapdat btch0001.cr_crapdat%ROWTYPE;
      --Variaveis Erro
      vr_cdcritic  INTEGER;
      vr_dscritic  VARCHAR2(4000);  
      vr_des_reto  VARCHAR2(3);
      --Variaveis de Excecoes
      vr_exc_erro EXCEPTION;
      vr_exc_sair EXCEPTION;
      vr_exc_null EXCEPTION;

      vr_qtacobra INTEGER;
      vr_tipotari INTEGER;      
      vr_fliseope INTEGER;

    BEGIN
      --Limpar tabela memoria
      pr_tab_erro.DELETE;
      pr_tab_msg_confirma.DELETE;
      /** Gerar tarifa apenas para IMPRES e ATENDA, exceto CRPS029 **/
      IF pr_inproces > 2 THEN
        pr_des_reto:= 'OK';
        --Retornar 
        RETURN;
      END IF; 
      
      --Inicializar Variaveis
      vr_cdcritic:= 0;
      vr_dscritic:= NULL;
      vr_flgtrans:= FALSE;
      vr_dsorigem:= gene0001.vr_vet_des_origens(pr_idorigem);
      vr_dstransa:= 'Gerar tarifa para impressao de extrato.';
      
      --Buscar Data do Sistema para a cooperativa 
      OPEN btch0001.cr_crapdat(pr_cdcooper => pr_cdcooper);
      FETCH btch0001.cr_crapdat INTO rw_crapdat;
      --Se nao encontrou
      IF btch0001.cr_crapdat%NOTFOUND THEN
        -- Fechar Cursor
        CLOSE btch0001.cr_crapdat;
        -- montar mensagem de critica
        vr_cdcritic:= 1;
        vr_dscritic:= NULL;
        -- Levantar Excecao
        RAISE vr_exc_erro;
      ELSE
        -- apenas fechar o cursor
        CLOSE btch0001.cr_crapdat;
      END IF;
      
      /* Verifica se isento da tarifacao do extrato */
      pc_verifica_tarif_extrato     (pr_cdcooper => pr_cdcooper          --Codigo Cooperativa
                                    ,pr_nrdconta => pr_nrdconta          --Numero da Conta do Associado
                                    ,pr_dtmvtolt => rw_crapdat.dtmvtocd  --Data Movimento
                                    ,pr_dtiniper => pr_dtrefere          --Data Inicio periodo
                                    ,pr_inisenta => vr_inisenta          --Origem dos Dados
                                    ,pr_des_reto => vr_des_reto          --OK ou NOK
                                    ,pr_tab_erro => pr_tab_erro);        --Tabela de Erros
      --Se ocorreu erro
      IF vr_des_reto = 'NOK' THEN
        --Se possui erro na tabela 
        IF pr_tab_erro.COUNT > 0 THEN
          vr_cdcritic:= 0;
          vr_dscritic:= pr_tab_erro(pr_tab_erro.FIRST).dscritic;
        END IF;  
        -- Se foi solicitado geração de LOG
        IF pr_flgerlog THEN
          -- Chamar geração de LOG
          gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                              ,pr_cdoperad => pr_cdoperad
                              ,pr_dscritic => vr_dscritic
                              ,pr_dsorigem => vr_dsorigem
                              ,pr_dstransa => vr_dstransa
                              ,pr_dttransa => TRUNC(SYSDATE)
                              ,pr_flgtrans => 0 --> FALSE
                              ,pr_hrtransa => gene0002.fn_busca_time
                              ,pr_idseqttl => pr_idseqttl
                              ,pr_nmdatela => pr_nmdatela
                              ,pr_nrdconta => pr_nrdconta
                              ,pr_nrdrowid => vr_nrdrowid);
        END IF; 
        --Levantar Excecao
        RAISE vr_exc_sair;
      END IF;   
      
      --Selecionar associado
      OPEN cr_crapass (pr_cdcooper => pr_cdcooper
                      ,pr_nrdconta =>pr_nrdconta);
      --Posicionar no proximo registro
      FETCH cr_crapass INTO rw_crapass;
      --Se nao encontrou
      IF cr_crapass%NOTFOUND THEN
        --Fechar Cursor
        CLOSE cr_crapass;
        --mensagem erro
        vr_cdcritic:= 9;
        vr_dscritic:= NULL;
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;  
      --Fechar Cursor
      CLOSE cr_crapass;
      
      /** Lista apenas para impres.p atenda/extrato exceto crps029.p **/
      
        --Data referencia anterior 30 dias
        IF pr_dtrefere < ( rw_crapdat.dtmvtocd - 30 ) THEN /* Periodo */
          --Se terminal for TAA
          IF pr_nrterfin <> 0 THEN /* TAA */ 
            vr_tipotari := 9;
            --Se for pessoa fisica
            IF rw_crapass.inpessoa = 1 THEN /* Fisica */
              vr_cdbattar:= 'EXTPETAAPF';
            ELSE
              vr_cdbattar:= 'EXTPETAAPJ';
            END IF;
          ELSE
            vr_tipotari := 8;
            --Se for pessoa fisica
            IF rw_crapass.inpessoa = 1 THEN /* Fisica */
              vr_cdbattar:= 'EXTPEPREPF';
            ELSE
              vr_cdbattar:= 'EXTPEPREPJ';
            END IF;
          END IF;
        ELSE
          --Se terminal for TAA
          IF pr_nrterfin <> 0 THEN /* TAA */ 
            vr_tipotari := 7;
            --Se for pessoa fisica
            IF rw_crapass.inpessoa = 1 THEN /* Fisica */
              vr_cdbattar:= 'EXTMETAAPF';
            ELSE
              vr_cdbattar:= 'EXTMETAAPJ';
            END IF;
          ELSE
            vr_tipotari := 6;
            --Se for pessoa fisica
            IF rw_crapass.inpessoa = 1 THEN /* Fisica */
              vr_cdbattar:= 'EXTMEPREPF';
            ELSE
              vr_cdbattar:= 'EXTMEPREPJ';
            END IF;
          END IF;
        END IF;
        /*  Busca valor da tarifa do extrato*/
        TARI0001.pc_carrega_dados_tar_vigente (pr_cdcooper  => pr_cdcooper  --Codigo Cooperativa
                                              ,pr_cdbattar  => vr_cdbattar  --Codigo Tarifa
                                              ,pr_vllanmto  => 1            --Valor Lancamento
                                              ,pr_cdprogra  => NULL         --Codigo Programa
                                              ,pr_cdhistor  => vr_cdhistor  --Codigo Historico
                                              ,pr_cdhisest  => vr_cdhisest  --Historico Estorno
                                              ,pr_vltarifa  => vr_vllanaut  --Valor tarifa
                                              ,pr_dtdivulg  => vr_dtdivulg  --Data Divulgacao
                                              ,pr_dtvigenc  => vr_dtvigenc  --Data Vigencia
                                              ,pr_cdfvlcop  => vr_cdfvlcop  --Codigo faixa valor cooperativa
                                              ,pr_cdcritic  => vr_cdcritic  --Codigo Critica
                                              ,pr_dscritic  => vr_dscritic  --Descricao Critica
                                              ,pr_tab_erro  => pr_tab_erro); --Tabela erros
        --Se ocorreu erro
        IF vr_cdcritic IS NOT NULL OR vr_dscritic IS NOT NULL THEN
          --Criar mensagem Confirmacao
          pr_tab_msg_confirma(1).inconfir:= 2;
          pr_tab_msg_confirma(1).dsmensag:= 'Nao ha tabela cadastrada  CRED-USUARI-11-'||vr_cdbattar||
                                            '. Informe o Suporte Operacional';
          --Levantar Excecao
          RAISE vr_exc_sair;
        ELSE
          --Criar mensagem Confirmacao
          pr_tab_msg_confirma(1).inconfir:= 1;
          pr_tab_msg_confirma(1).dsmensag:= '******** AVISO: ESTE EXTRATO SERA TARIFADO EM R$ '||
                                            to_char(vr_vllanaut,'fm999g999g990d00')||' NESTA DATA. ********';
        END IF;    
      
        --Data referencia anterior 30 dias
        IF pr_dtrefere < ( rw_crapdat.dtmvtocd - 30 ) THEN /* Periodo */
          --Se terminal for TAA
          IF pr_nrterfin <> 0 THEN /* TAA */ 
            vr_tipotari := 9;
            --Se for pessoa fisica
            IF rw_crapass.inpessoa = 1 THEN /* Fisica */
              vr_cdbattar:= 'EXTPETAAPF';
            ELSE
              vr_cdbattar:= 'EXTPETAAPJ';
            END IF;
          ELSE
            vr_tipotari := 8;
            --Se for pessoa fisica
            IF rw_crapass.inpessoa = 1 THEN /* Fisica */
              vr_cdbattar:= 'EXTPEPREPF';
            ELSE
              vr_cdbattar:= 'EXTPEPREPJ';
            END IF;
          END IF;
        ELSE
          --Se terminal for TAA
          IF pr_nrterfin <> 0 THEN /* TAA */ 
            vr_tipotari := 7;
            --Se for pessoa fisica
            IF rw_crapass.inpessoa = 1 THEN /* Fisica */
              vr_cdbattar:= 'EXTMETAAPF';
            ELSE
              vr_cdbattar:= 'EXTMETAAPJ';
            END IF;
          ELSE
            vr_tipotari := 6;
            --Se for pessoa fisica
            IF rw_crapass.inpessoa = 1 THEN /* Fisica */
              vr_cdbattar:= 'EXTMEPREPF';
            ELSE
              vr_cdbattar:= 'EXTMEPREPJ';
            END IF;
          END IF;
        END IF;
      --END IF; --vr_inisenta = 0 AND pr_inproces < 3
       
      --Cobrar Tarifa
      IF pr_flgtarif THEN
        
        TARI0001.pc_verifica_tarifa_operacao(pr_cdcooper => pr_cdcooper
                                            ,pr_cdoperad => pr_cdoperad
                                            ,pr_cdagenci => pr_cdagenci
                                            ,pr_cdbccxlt => pr_cdcooper
                                            ,pr_dtmvtolt => rw_crapdat.dtmvtocd
                                            ,pr_cdprogra => pr_nmdatela
                                            ,pr_idorigem => pr_idorigem
                                            ,pr_nrdconta => pr_nrdconta
                                            ,pr_tipotari => vr_tipotari
                                            ,pr_tipostaa => 0
                                            ,pr_qtoperac => 0
                                            ,pr_qtacobra => vr_qtacobra
                                            ,pr_fliseope => vr_fliseope
                                            ,pr_cdcritic => vr_cdcritic
                                            ,pr_dscritic => vr_dscritic);

        IF nvl(vr_cdcritic,0) > 0 OR vr_dscritic IS NOT NULL THEN
          --Levantar Excecao
          RAISE vr_exc_erro;
        END IF;

        /* Possui pacote de tarifas, e utilizou operacao isenta disponivel*/
        IF   vr_fliseope = 1 THEN
          vr_inisenta := 1;
              /*Possui pacote de tarifas, e excedeu qtd.isenta do servico "extrato"*/
        ELSIF  vr_qtacobra > 0 THEN
               /* Essa atribuicao eh necessaria devido a chamada da procedure
                  'verifica-tarifacao-extrato' anteriormente, que retorna na
                  variavel 'vr_inisenta' se o cooperado possui extrato isento
                  oferecido pela cooperativa, pois quando o cooperado possuir
                  o servico "extrato" no pacote de tarifas, nao devera receber
                  mais isencao pela cooperativa.*/
               vr_inisenta := 0;
        END IF;

        IF vr_inisenta = 0 THEN
          /*  Busca valor da tarifa do extrato*/
          TARI0001.pc_carrega_dados_tar_vigente (pr_cdcooper  => pr_cdcooper  --Codigo Cooperativa
                                                ,pr_cdbattar  => vr_cdbattar  --Codigo Tarifa
                                                ,pr_vllanmto  => 1            --Valor Lancamento
                                                ,pr_cdprogra  => NULL         --Codigo Programa
                                                ,pr_cdhistor  => vr_cdhistor  --Codigo Historico
                                                ,pr_cdhisest  => vr_cdhisest  --Historico Estorno
                                                ,pr_vltarifa  => vr_vllanaut  --Valor tarifa
                                                ,pr_dtdivulg  => vr_dtdivulg  --Data Divulgacao
                                                ,pr_dtvigenc  => vr_dtvigenc  --Data Vigencia
                                                ,pr_cdfvlcop  => vr_cdfvlcop  --Codigo faixa valor cooperativa
                                                ,pr_cdcritic  => vr_cdcritic  --Codigo Critica
                                                ,pr_dscritic  => vr_dscritic  --Descricao Critica
                                                ,pr_tab_erro  => pr_tab_erro); --Tabela erros
          --Se ocorreu erro
          IF vr_cdcritic IS NOT NULL OR vr_dscritic IS NOT NULL THEN
            --Criar mensagem Confirmacao
            pr_tab_msg_confirma(1).inconfir:= 2;
            pr_tab_msg_confirma(1).dsmensag:= 'Nao ha tabela cadastrada  CRED-USUARI-11-'||vr_cdbattar||
                                              '. Informe o Suporte Operacional';
            --Levantar Excecao
            RAISE vr_exc_sair;
          ELSE
            --Criar mensagem Confirmacao
            pr_tab_msg_confirma(1).inconfir:= 1;
            pr_tab_msg_confirma(1).dsmensag:= '******** AVISO: ESTE EXTRATO SERA TARIFADO EM R$ '||
                                              to_char(vr_vllanaut,'fm999g999g990d00')||' NESTA DATA. ********';
          END IF;
        END IF;

        --Inserir Extrato
        BEGIN
          INSERT INTO crapext
            (crapext.cdcooper
            ,crapext.cdagenci
            ,crapext.nrdconta
            ,crapext.dtrefere
            ,crapext.nranoref
            ,crapext.nrctremp
            ,crapext.nraplica
            ,crapext.inselext
            ,crapext.tpextrat
            ,crapext.inisenta
            ,crapext.insitext
            ,crapext.dtreffim
            ,crapext.cdcoptfn
            ,crapext.cdagetfn
            ,crapext.nrterfin)
          VALUES
            (pr_cdcooper
            ,rw_crapass.cdagenci
            ,pr_nrdconta
            ,pr_dtrefere
            ,0
            ,0
            ,0
            ,0
            ,1
            ,vr_inisenta 
            ,1
            ,rw_crapdat.dtmvtocd
            ,pr_cdcoptfn
            ,pr_cdagetfn
            ,pr_nrterfin);             
          --transacao OK
          vr_flgtrans:= TRUE;
        EXCEPTION
          WHEN OTHERS THEN            
            
            vr_cdcritic:= 0;
            vr_dscritic:= 'Erro na transacao (crapext). Nao foi possivel gerar a tarifa. ';
            --Levantar Excecao
            RAISE vr_exc_erro;                              
        END; 
        
        IF vr_fliseope = 1 THEN
          RAISE vr_exc_null;
        END IF;

        --Tipo Extrato
        vr_tpextrat:= 51;
        --Data Referencia anterior 30 dias
        IF pr_dtrefere < ( rw_crapdat.dtmvtocd - 30 ) THEN /* Periodo */
           vr_tpextrat:= 52;
        END IF;
        
        --Inserir tarifa extrato
        BEGIN
          INSERT INTO craptex
            (craptex.cdcooper
            ,craptex.nrdconta
            ,craptex.tpextrat
            ,craptex.inisenta
            ,craptex.dtemiext
            ,craptex.vltarifa
            ,craptex.cdhistor
            ,craptex.cdfvlcop)
          VALUES
            (pr_cdcooper
            ,pr_nrdconta
            ,vr_tpextrat
            ,vr_inisenta
            ,rw_crapdat.dtmvtocd
            ,vr_vllanaut
            ,vr_cdhistor
            ,vr_cdfvlcop);  
        EXCEPTION
          WHEN OTHERS THEN

            vr_cdcritic:= 0;
            vr_dscritic:= 'Erro na transacao (craptex). Nao foi possivel gerar a tarifa. ';
            --Levantar Excecao
            RAISE vr_exc_erro;                              
        END; 
        --Se nao ocorreu transacao
        IF NOT vr_flgtrans THEN
          --Mensagem de erro
          vr_cdcritic:= 0;
          vr_dscritic:= 'Erro na transacao. Nao foi possivel gerar a tarifa.';
          --Levantar Excecao
          RAISE vr_exc_erro;
        END IF;  
      END IF;  --pr_flgtarif   
      
      --Gerar LOG                        
      IF pr_flgerlog THEN 
        -- Chamar geração de LOG
        gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                            ,pr_cdoperad => pr_cdoperad
                            ,pr_dscritic => NULL
                            ,pr_dsorigem => GENE0001.vr_vet_des_origens(pr_idorigem)
                            ,pr_dstransa => vr_dstransa
                            ,pr_dttransa => TRUNC(SYSDATE)
                            ,pr_flgtrans => 1 --> TRUE
                            ,pr_hrtransa => gene0002.fn_busca_time
                            ,pr_idseqttl => pr_idseqttl
                            ,pr_nmdatela => pr_nmdatela
                            ,pr_nrdconta => pr_nrdconta
                            ,pr_nrdrowid => vr_nrdrowid);
        --Gerar Log Item                    
        gene0001.pc_gera_log_item(pr_nrdrowid => vr_nrdrowid
                                 ,pr_nmdcampo => 'inisenta' 
                                 ,pr_dsdadant => NULL
                                 ,pr_dsdadatu => vr_inisenta);

      END IF;
      -- Retorno OK
      pr_des_reto := 'OK'; 
       
    EXCEPTION
      WHEN vr_exc_null THEN
        -- Retorno OK
        pr_des_reto := 'OK';
      WHEN vr_exc_sair THEN
        -- Retorno não OK
        pr_des_reto := 'NOK';
      WHEN vr_exc_erro THEN
        -- Retorno não OK
        pr_des_reto := 'NOK';
        -- Chamar rotina de gravação de erro
        gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                             ,pr_cdagenci => pr_cdagenci
                             ,pr_nrdcaixa => pr_nrdcaixa
                             ,pr_nrsequen => 1 --> Fixo
                             ,pr_cdcritic => vr_cdcritic --> Critica 0
                             ,pr_dscritic => vr_dscritic
                             ,pr_tab_erro => pr_tab_erro);
        -- Se foi solicitado geração de LOG
        IF pr_flgerlog THEN
          -- Chamar geração de LOG
          gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                              ,pr_cdoperad => pr_cdoperad
                              ,pr_dscritic => vr_dscritic
                              ,pr_dsorigem => GENE0001.vr_vet_des_origens(pr_idorigem)
                              ,pr_dstransa => vr_dstransa
                              ,pr_dttransa => TRUNC(SYSDATE)
                              ,pr_flgtrans => 0 --> FALSE
                              ,pr_hrtransa => gene0002.fn_busca_time
                              ,pr_idseqttl => pr_idseqttl
                              ,pr_nmdatela => pr_nmdatela
                              ,pr_nrdconta => pr_nrdconta
                              ,pr_nrdrowid => vr_nrdrowid);
        END IF;  
      WHEN OTHERS THEN
      
        -- Retorno não OK
        pr_des_reto := 'NOK';
        -- Chamar rotina de gravação de erro
        vr_dscritic := 'Erro na pc_gera_tarifa_extrato --> '|| sqlerrm;
        gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                             ,pr_cdagenci => pr_cdagenci
                             ,pr_nrdcaixa => pr_nrdcaixa
                             ,pr_nrsequen => 1 --> Fixo
                             ,pr_cdcritic => 0 --> Critica 0
                             ,pr_dscritic => vr_dscritic
                             ,pr_tab_erro => pr_tab_erro);
        -- Se foi solicitado geração de LOG
        IF pr_flgerlog THEN
          -- Chamar geração de LOG
          gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                              ,pr_cdoperad => pr_cdoperad
                              ,pr_dscritic => vr_dscritic
                              ,pr_dsorigem => GENE0001.vr_vet_des_origens(pr_idorigem)
                              ,pr_dstransa => vr_dstransa
                              ,pr_dttransa => TRUNC(SYSDATE)
                              ,pr_flgtrans => 0 --> FALSE
                              ,pr_hrtransa => gene0002.fn_busca_time
                              ,pr_idseqttl => pr_idseqttl
                              ,pr_nmdatela => pr_nmdatela
                              ,pr_nrdconta => pr_nrdconta
                              ,pr_nrdrowid => vr_nrdrowid);
        END IF;
      END;
    END pc_gera_tarifa_extrato; 

    --Subrotina para consultar extrato do capital 
    PROCEDURE pc_extrato_cotas  (pr_cdcooper    IN crapcop.cdcooper%TYPE       --Codigo Cooperativa
                                ,pr_cdagenci    IN crapass.cdagenci%TYPE       --Codigo Agencia
                                ,pr_nrdcaixa    IN INTEGER                     --Numero do Caixa
                                ,pr_cdoperad    IN VARCHAR2                    --Codigo Operador
                                ,pr_nmdatela    IN VARCHAR2                    --Nome da Tela
                                ,pr_idorigem    IN INTEGER                     --Origem da Chamada
                                ,pr_nrdconta    IN crapass.nrdconta%TYPE       --Numero da Conta do Associado
                                ,pr_idseqttl    IN INTEGER                     --Sequencial do Titular
                                ,pr_dtmvtolt    IN DATE                        --Data Movimento
                                ,pr_dtiniper    IN DATE                        --Periodo inicial
                                ,pr_dtfimper    IN DATE                        --Periodo Final
                                ,pr_flgerlog    IN BOOLEAN                     --Imprimir log
                                ,pr_vlsldant    OUT NUMBER                     --Valor Saldo Anterior
                                ,pr_tab_extrato_cotas OUT typ_tab_extrato_cotas  --Tabela Extrato Cotas
                                ,pr_des_reto    OUT VARCHAR2                 --Retorno OK ou NOK
                                ,pr_dscritic    OUT VARCHAR2) IS             --Descricao do Erro
  BEGIN
  ---------------------------------------------------------------------------------------------------------------
  --
  --  Programa : pc_extrato_cotas            Antigo: procedures/b1wgen0021.p/extrato_cotas
  --  Sistema  : 
  --  Sigla    : CRED
  --  Autor    : Alisson C. Berrido - Amcom
  --  Data     : Julho/2014                           Ultima atualizacao: 01/08/2018
  --
  -- Dados referentes ao programa:
  --
  -- Frequencia: -----
  -- Objetivo   : Procedure para consultar extrato do capital 
  --
  -- Alterações : 16/07/2014 - Conversão Progress -> Oracle (Alisson - AMcom)  
  --
  --              01/08/2018 - Ajuste do tamanho nrdocmto devido a tela limitar em 9 posicoes - AMcom Fabiano B. Dias
  ---------------------------------------------------------------------------------------------------------------
  DECLARE
      --Selecionar Dados para Geracao Extrato Imposto Renda      
      CURSOR cr_crapdir (pr_cdcooper IN crapdir.cdcooper%type 
                        ,pr_nrdconta IN crapdir.nrdconta%type) IS
        SELECT crapdir.dtmvtolt
              ,crapdir.vlttccap
        FROM crapdir crapdir
        WHERE crapdir.cdcooper = pr_cdcooper 
           AND crapdir.nrdconta = pr_nrdconta
           AND crapdir.dtmvtolt = to_date('31/12/2004','dd/mm/RRRR'); -- ultimo registro de dir criado antes do uso da tab craplct

      --Selecionar Lancamento Cota Capital
      CURSOR cr_craplct (pr_cdcooper IN craplct.cdcooper%type
                        ,pr_nrdconta IN craplct.nrdconta%type) IS
        SELECT craplct.dtmvtolt
        FROM craplct craplct
        WHERE craplct.cdcooper = pr_cdcooper 
        AND   craplct.nrdconta = pr_nrdconta
        ORDER BY craplct.progress_recid ASC;
      rw_craplct cr_craplct%ROWTYPE;                                     
      --Selecionar Lancamento Cota Capital
      CURSOR cr_craplct2 (pr_cdcooper IN craplct.cdcooper%type
                         ,pr_nrdconta IN craplct.nrdconta%type) IS
        SELECT  craplct.cdcooper
               ,craplct.cdhistor
               ,craplct.dtmvtolt
               ,craplct.vllanmto
               ,craplct.cdagenci
               ,craplct.cdbccxlt
               ,craplct.nrdolote
               ,substr(craplct.nrdocmto,1,9) nrdocmto -- Debitador Unico 08/2018
               ,craplct.nrctrpla
               ,craplct.progress_recid
        FROM craplct craplct
        WHERE craplct.cdcooper = pr_cdcooper 
        AND   craplct.nrdconta = pr_nrdconta
        AND   craplct.dtmvtolt >= pr_dtiniper
        AND   craplct.dtmvtolt <= pr_dtfimper
        ORDER BY cdcooper,nrdconta,dtmvtolt,cdhistor,nrdocmto;
      --Selecionar Historicos de Tarifas
      CURSOR cr_craphis (pr_cdcooper IN crapcop.cdcooper%TYPE
                        ,pr_cdhistor IN craphis.cdhistor%TYPE) IS
        SELECT craphis.cdhistor
              ,craphis.dshistor
              ,craphis.indebcre
              ,craphis.dsextrat
              ,craphis.inhistor
        FROM craphis craphis
        WHERE craphis.cdcooper = pr_cdcooper
        AND   craphis.cdhistor = pr_cdhistor;
      rw_craphis cr_craphis%ROWTYPE;   

      CURSOR cr_craptco (pr_cdcooper IN crapcop.cdcooper%TYPE
                        ,pr_nrdconta IN crapass.nrdconta%TYPE) IS
        SELECT t.cdcopant, t.nrctaant
          FROM craptco t
         WHERE t.cdcooper = pr_cdcooper
           AND t.nrdconta = pr_nrdconta;
      rw_craptco cr_craptco%ROWTYPE;

	  -- CURSOR GENÉRICO DE CALENDÁRIO
      rw_crapdat btch0001.cr_crapdat%ROWTYPE;

      --Variaveis Locais
      vr_index    PLS_INTEGER;
      vr_vlsldtot NUMBER:= 0;
      vr_dtprmsld DATE;
      vr_flgusdir BOOLEAN:= FALSE;
      vr_dstransa VARCHAR2(100);
      vr_dsorigem VARCHAR2(100);
      vr_incancel VARCHAR2(1);
      vr_nrdrowid ROWID;      

      vr_cdcooper crapcop.cdcooper%TYPE;
      vr_nrdconta crapass.nrdconta%TYPE;
      vr_saldo NUMBER:= 0;


      CURSOR cr_craplctsaldo (pr_cdcooper IN crapcop.cdcooper%TYPE
                             ,pr_nrdconta IN crapass.nrdconta%TYPE
                             ,pr_dtiniper IN craplct.dtmvtolt%TYPE) IS
        SELECT (NVL((SELECT SUM(l.vllanmto)
                      FROM craplct l
                          ,craphis h
                     WHERE l.cdcooper = pr_cdcooper
                       AND l.nrdconta = pr_nrdconta
                       AND l.dtmvtolt < pr_dtiniper
                       AND l.cdcooper = h.cdcooper
                       AND l.cdhistor = h.cdhistor
                       AND h.indebcre = 'C')
                   ,0) -
                NVL((SELECT SUM(l.vllanmto)
                      FROM craplct l
                          ,craphis h
                     WHERE l.cdcooper = pr_cdcooper
                       AND l.nrdconta = pr_nrdconta
                       AND l.dtmvtolt < pr_dtiniper
                       AND l.cdcooper = h.cdcooper
                       AND l.cdhistor = h.cdhistor
                       AND h.indebcre = 'D')
                   ,0)) saldo
          FROM dual;

    BEGIN

	  -- busca a data atual da cooperativa
      OPEN btch0001.cr_crapdat(pr_cdcooper => pr_cdcooper);
      FETCH btch0001.cr_crapdat INTO rw_crapdat;
      CLOSE btch0001.cr_crapdat;

      --Limpar Mensagem Saida
      pr_dscritic:= NULL; 
      --Limpar tabela memoria
      pr_tab_extrato_cotas.DELETE; 
      --Inicializar transacao
      vr_dsorigem:= gene0001.vr_vet_des_origens(pr_idorigem);
      vr_dstransa:= 'Busca Extrato de Capital.';

      OPEN cr_craptco (pr_cdcooper => pr_cdcooper
                        ,pr_nrdconta => pr_nrdconta);
      FETCH cr_craptco INTO rw_craptco;

      vr_cdcooper := pr_cdcooper;
      vr_nrdconta := pr_nrdconta;

      IF cr_craptco%FOUND THEN
        vr_cdcooper := rw_craptco.cdcopant;
        vr_nrdconta := rw_craptco.nrctaant;
        END IF;

      CLOSE cr_craptco;

      --Selecionar Dados para Geracao Extrato Imposto Renda
      FOR rw_crapdir IN cr_crapdir (pr_cdcooper => vr_cdcooper
                                   ,pr_nrdconta => vr_nrdconta) LOOP
        vr_vlsldtot := rw_crapdir.vlttccap;
      END LOOP;

      -- Pegar lançamentos inferiores a data informada para compor saldo inicial
      OPEN cr_craplctsaldo (pr_cdcooper => pr_cdcooper
                           ,pr_nrdconta => pr_nrdconta
                           ,pr_dtiniper => pr_dtiniper);
      FETCH cr_craplctsaldo INTO vr_saldo;

      vr_vlsldtot := vr_vlsldtot + NVL(vr_saldo,0);

      /* Saldo inicial */  
      pr_vlsldant:= NVL(vr_vlsldtot,0);

      --Selecionar Lancamentos Cota de Capital
      FOR rw_craplct IN cr_craplct2 (pr_cdcooper => pr_cdcooper
                                    ,pr_nrdconta => pr_nrdconta) LOOP
        --Se foi no dia da abertura da conta e na mesma data                            
        IF vr_flgusdir AND rw_craplct.dtmvtolt = vr_dtprmsld THEN 
          --Proximo registro
          CONTINUE;                            
        END IF;  
        --Selecionar Historicos de Tarifas
        OPEN cr_craphis (pr_cdcooper => rw_craplct.cdcooper
                        ,pr_cdhistor => rw_craplct.cdhistor);
        FETCH cr_craphis INTO rw_craphis;
        --Se nao encontrou
        IF cr_craphis%NOTFOUND THEN
          -- Fechar o cursor
          CLOSE cr_craphis;
          --Proximo registro
          CONTINUE; 
        END IF;                  
        --Fechar Cursor
        CLOSE cr_craphis;

        /* Se for histórico de lançamento de integralização e for do mesmo dia, é permitido cancelar */
        IF rw_craphis.cdhistor = 2138 AND rw_craplct.dtmvtolt = rw_crapdat.dtmvtolt  THEN
          vr_incancel := 'S';
        ELSE
          vr_incancel := 'N';
        END IF;

        --Indicador do Historico
        IF rw_craphis.inhistor IN (6,7,8) THEN
          --Acumular Saldo total
          vr_vlsldtot:= nvl(vr_vlsldtot,0) + rw_craplct.vllanmto;
        ELSIF rw_craphis.inhistor IN (16,17,18,19) THEN
          --Diminuir Saldo total
          vr_vlsldtot:= nvl(vr_vlsldtot,0) - rw_craplct.vllanmto;
        END IF; 
        --Buscar proximo indice para extrato
        vr_index:= pr_tab_extrato_cotas.count + 1;
        --Popular tabela memoria
        pr_tab_extrato_cotas(vr_index).dtmvtolt:= rw_craplct.dtmvtolt;
        pr_tab_extrato_cotas(vr_index).cdagenci:= rw_craplct.cdagenci;
        pr_tab_extrato_cotas(vr_index).cdbccxlt:= rw_craplct.cdbccxlt;
        pr_tab_extrato_cotas(vr_index).nrdolote:= rw_craplct.nrdolote;
        pr_tab_extrato_cotas(vr_index).dshistor:= rw_craphis.dshistor;
        pr_tab_extrato_cotas(vr_index).indebcre:= rw_craphis.indebcre;
        pr_tab_extrato_cotas(vr_index).nrdocmto:= rw_craplct.nrdocmto;
        pr_tab_extrato_cotas(vr_index).nrctrpla:= rw_craplct.nrctrpla;
        pr_tab_extrato_cotas(vr_index).vllanmto:= rw_craplct.vllanmto;
        pr_tab_extrato_cotas(vr_index).vlsldtot:= vr_vlsldtot;
        pr_tab_extrato_cotas(vr_index).dsextrat:= rw_craphis.dsextrat;   
        pr_tab_extrato_cotas(vr_index).incancel:= vr_incancel;
        pr_tab_extrato_cotas(vr_index).lctrowid:= rw_craplct.progress_recid;


      END LOOP;  
      -- Se foi solicitado geração de LOG
      IF pr_flgerlog THEN
        -- Chamar geração de LOG
        gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                            ,pr_cdoperad => pr_cdoperad
                            ,pr_dscritic => NULL
                            ,pr_dsorigem => vr_dsorigem
                            ,pr_dstransa => vr_dstransa
                            ,pr_dttransa => TRUNC(SYSDATE)
                            ,pr_flgtrans => 1 --> TRUE
                            ,pr_hrtransa => gene0002.fn_busca_time
                            ,pr_idseqttl => pr_idseqttl
                            ,pr_nmdatela => pr_nmdatela
                            ,pr_nrdconta => pr_nrdconta
                            ,pr_nrdrowid => vr_nrdrowid);
      END IF;                   
      --Retorno OK
      pr_des_reto:= 'OK';
    EXCEPTION
      WHEN OTHERS THEN
      
        btch0001.pc_log_internal_exception(pr_cdcooper);

        -- Retorno não OK
        pr_des_reto:= 'NOK';
        -- Chamar rotina de gravação de erro
        pr_dscritic:= 'Erro na pc_extrato_cotas --> '|| sqlerrm;
      END;
    END pc_extrato_cotas; 
    
    --Subrotina para consultar extrato do capital retorno informacoes em XML
    PROCEDURE pc_extrato_cotas_xml(pr_cdcooper    IN crapcop.cdcooper%TYPE       --Codigo Cooperativa
                                  ,pr_cdagenci    IN crapass.cdagenci%TYPE       --Codigo Agencia
                                  ,pr_nrdcaixa    IN INTEGER                     --Numero do Caixa
                                  ,pr_cdoperad    IN VARCHAR2                    --Codigo Operador
                                  ,pr_nmdatela    IN VARCHAR2                    --Nome da Tela
                                  ,pr_idorigem    IN INTEGER                     --Origem da Chamada
                                  ,pr_nrdconta    IN crapass.nrdconta%TYPE       --Numero da Conta do Associado
                                  ,pr_idseqttl    IN INTEGER                     --Sequencial do Titular
                                  ,pr_dtmvtolt    IN DATE                        --Data Movimento
                                  ,pr_dtiniper    IN DATE                        --Periodo inicial
                                  ,pr_dtfimper    IN DATE                        --Periodo Final
                                  ,pr_flgerlog    IN INTEGER                     --Imprimir log (1-Sim/0-Não)
                                  ,pr_vlsldant    OUT NUMBER                     --Valor Saldo Anterior
                                  ,pr_xml_extrato_cotas OUT CLOB                 --Tabela Extrato Cotas em XML
                                  ,pr_des_reto    OUT VARCHAR2                   --Retorno OK ou NOK
                                  ,pr_dscritic    OUT VARCHAR2) IS               --Descricao do Erro
  BEGIN
  ---------------------------------------------------------------------------------------------------------------
  --
  --  Programa : pc_extrato_cotas_xml
  --  Sistema  :
  --  Sigla    : CRED
  --  Autor    : Marcos Martini - Supero
  --  Data     : Agosto/2016                           Ultima atualizacao:
  --
  -- Dados referentes ao programa:
  --
  -- Frequencia: -----
  -- Objetivo   : Procedure para consultar extrato do capital
  --              Aciona a extrato cotas desta e retorna as informacoes em XML
  --
  -- Alterações :
  --
  ---------------------------------------------------------------------------------------------------------------
    DECLARE
      -- Variaveis necessaria a execução
      vr_tab_extrato_cotas typ_tab_extrato_cotas;
      vr_txt_extrato_cotas VARCHAR2(32767);
      -- Variaveis de Erro
      vr_cdcritic INTEGER;
      vr_dscritic VARCHAR2(4000);
    BEGIN
      -- Redireciona a chamada para a rotina comum
      pc_extrato_cotas(pr_cdcooper    => pr_cdcooper                 --Codigo Cooperativa
                      ,pr_cdagenci    => pr_cdagenci                 --Codigo Agencia
                      ,pr_nrdcaixa    => pr_nrdcaixa                 --Numero do Caixa
                      ,pr_cdoperad    => pr_cdoperad                 --Codigo Operador
                      ,pr_nmdatela    => pr_nmdatela                 --Nome da Tela
                      ,pr_idorigem    => pr_idorigem                 --Origem da Chamada
                      ,pr_nrdconta    => pr_nrdconta                 --Numero da Conta do Associado
                      ,pr_idseqttl    => pr_idseqttl                 --Sequencial do Titular
                      ,pr_dtmvtolt    => pr_dtmvtolt                 --Data Movimento
                      ,pr_dtiniper    => pr_dtiniper                 --Periodo inicial
                      ,pr_dtfimper    => pr_dtfimper                 --Periodo Final
                      ,pr_flgerlog    => pr_flgerlog = 1             --Imprimir log
                      ,pr_vlsldant    => pr_vlsldant                 --Valor Saldo Anterior
                      ,pr_tab_extrato_cotas => vr_tab_extrato_cotas  --Tabela Extrato Cotas
                      ,pr_des_reto    => pr_des_reto                 --Retorno OK ou NOK
                      ,pr_dscritic    => pr_dscritic);               --Descricao do Erro
      /* Não continuar em caso de erro*/
      IF pr_des_reto <> 'OK' THEN
        RETURN;
      END IF;
      -- Efetuar varredura da tabela de memoria e retorna-la em XML
      IF vr_tab_extrato_cotas.count() > 0 THEN

        -- Montar xml referente as informacoes
        dbms_lob.createtemporary(pr_xml_extrato_cotas, TRUE);
        dbms_lob.open(pr_xml_extrato_cotas, dbms_lob.lob_readwrite);

        -- Insere o cabeçalho do XML
        gene0002.pc_escreve_xml(pr_xml            => pr_xml_extrato_cotas
                               ,pr_texto_completo => vr_txt_extrato_cotas
                               ,pr_texto_novo     => '<?xml version="1.0" encoding="ISO-8859-1"?><root>');

        FOR vr_contador IN vr_tab_extrato_cotas.FIRST..vr_tab_extrato_cotas.LAST LOOP

          -- Montar XML com registros de carencia
          gene0002.pc_escreve_xml(pr_xml            => pr_xml_extrato_cotas
                                 ,pr_texto_completo => vr_txt_extrato_cotas
                                 ,pr_texto_novo     => '<registro>'
													                            ||   '<dtmvtolt>'||to_char(vr_tab_extrato_cotas(vr_contador).dtmvtolt, 'DD/MM/RRRR') ||'</dtmvtolt>'
                                                      ||   '<cdagenci>'||vr_tab_extrato_cotas(vr_contador).cdagenci ||'</cdagenci>'
                                                      ||   '<cdbccxlt>'||vr_tab_extrato_cotas(vr_contador).cdbccxlt ||'</cdbccxlt>'
                                                      ||   '<nrdolote>'||vr_tab_extrato_cotas(vr_contador).nrdolote ||'</nrdolote>'
                                                      ||   '<dshistor>'||vr_tab_extrato_cotas(vr_contador).dshistor ||'</dshistor>'
                                                      ||   '<indebcre>'||vr_tab_extrato_cotas(vr_contador).indebcre ||'</indebcre>'
                                                      ||   '<nrdocmto>'||vr_tab_extrato_cotas(vr_contador).nrdocmto ||'</nrdocmto>'
                                                      ||   '<nrctrpla>'||vr_tab_extrato_cotas(vr_contador).nrctrpla ||'</nrctrpla>'
    		      		                              ||   '<vllanmto>'||to_char(vr_tab_extrato_cotas(vr_contador).vllanmto,'fm999g999g9990d00') ||'</vllanmto>'
                                                      ||   '<vlsldtot>'||to_char(vr_tab_extrato_cotas(vr_contador).vlsldtot,'fm999g999g9990d00') ||'</vlsldtot>'
                                                      ||   '<dsextrat>'||vr_tab_extrato_cotas(vr_contador).dsextrat ||'</dsextrat>'
                                                      ||   '<incancel>'||vr_tab_extrato_cotas(vr_contador).incancel ||'</incancel>'
                                                      ||   '<lctrowid>'||vr_tab_extrato_cotas(vr_contador).lctrowid ||'</lctrowid>'
                                                      || '</registro>');
        END LOOP;

        -- Encerrar a tag raiz
        gene0002.pc_escreve_xml(pr_xml            => pr_xml_extrato_cotas
                               ,pr_texto_completo => vr_txt_extrato_cotas
                               ,pr_texto_novo     => '</root>'
                               ,pr_fecha_xml      => TRUE);
      END IF;

      --Retorno OK
      pr_des_reto:= 'OK';
    EXCEPTION
      WHEN OTHERS THEN
        -- Retorno não OK
        pr_des_reto:= 'NOK';
        -- Chamar rotina de gravação de erro
        pr_dscritic:= 'EXTR0002.pc_extrato_cotas --> Erro --> '|| sqlerrm;
      END;
    END pc_extrato_cotas_xml;

    --Subrotina para gerar saldo anterior da poupanca
    PROCEDURE pc_gera_saldo_anterior (pr_cdcooper  IN crapcop.cdcooper%TYPE   --Codigo Cooperativa
                                     ,pr_nrdconta  IN crapass.nrdconta%TYPE   --Numero da Conta do Associado
                                     ,pr_nrctrrpp  IN craprpp.nrctrrpp%TYPE   --Numero Contrato Poupanca
                                     ,pr_dtiniper  IN DATE                    --Periodo inicial
                                     ,pr_dtrefere  OUT DATE                   --Periodo Referencia
                                     ,pr_vlsldrpp  OUT NUMBER                 --Saldo Poupanca
                                     ,pr_des_reto  OUT VARCHAR2               --Retorno OK ou NOK
                                     ,pr_dscritic  OUT VARCHAR2) IS           --Descricao do Erro
  BEGIN
  ---------------------------------------------------------------------------------------------------------------
  --
  --  Programa : pc_gera_saldo_anterior            Antigo: procedures/b1wgen0006.p/gera-saldo-anterior
  --  Sistema  : 
  --  Sigla    : CRED
  --  Autor    : Alisson C. Berrido - Amcom
  --  Data     : Julho/2014                           Ultima atualizacao: 16/07/2014
  --
  -- Dados referentes ao programa:
  --
  -- Frequencia: -----
  -- Objetivo   : Procedure para gerar saldo anterior da poupanca
  --
  -- Alterações : 16/07/2014 - Conversão Progress -> Oracle (Alisson - AMcom)
  --              
  ---------------------------------------------------------------------------------------------------------------
  DECLARE
      --Seleiconar Saldo Poupanca Programada
      CURSOR cr_crapspp (pr_cdcooper IN crapspp.cdcooper%type
                        ,pr_nrdconta IN crapspp.nrdconta%type
                        ,pr_nrctrrpp IN crapspp.nrctrrpp%type
                        ,pr_dtsldrpp IN crapspp.dtsldrpp%type) IS
        SELECT crapspp.dtsldrpp
              ,crapspp.vlsldrpp
        FROM crapspp crapspp
        WHERE crapspp.cdcooper = pr_cdcooper 
        AND   crapspp.nrdconta = pr_nrdconta 
        AND   crapspp.nrctrrpp = pr_nrctrrpp 
        AND   crapspp.dtsldrpp <= pr_dtsldrpp
        ORDER BY crapspp.progress_recid DESC;                       
      rw_crapspp cr_crapspp%ROWTYPE;                  
      --Seleiconar Saldo Poupanca Programada
      CURSOR cr_crapspp2 (pr_cdcooper IN crapspp.cdcooper%type
                         ,pr_nrdconta IN crapspp.nrdconta%type
                         ,pr_nrctrrpp IN crapspp.nrctrrpp%type
                         ,pr_dtsldrpp IN crapspp.dtsldrpp%type) IS
        SELECT crapspp.dtsldrpp
              ,crapspp.vlsldrpp
        FROM crapspp crapspp
        WHERE crapspp.cdcooper = pr_cdcooper 
        AND   crapspp.nrdconta = pr_nrdconta 
        AND   crapspp.nrctrrpp = pr_nrctrrpp 
        AND   crapspp.dtsldrpp > pr_dtsldrpp
        ORDER BY crapspp.progress_recid ASC;
      --Variaveis de Erro
      vr_cdcritic INTEGER;
      vr_dscritic VARCHAR2(4000);
    BEGIN
      --Limpar Mensagem Saida
      pr_dscritic:= NULL;
      --Seleiconar Saldo Poupanca Programada
      OPEN cr_crapspp (pr_cdcooper => pr_cdcooper
                      ,pr_nrdconta => pr_nrdconta
                      ,pr_nrctrrpp => pr_nrctrrpp
                      ,pr_dtsldrpp => pr_dtiniper);
      FETCH cr_crapspp INTO rw_crapspp;
      --Se Encontrou
      IF cr_crapspp%FOUND THEN
        --Fechar Cursor
        CLOSE cr_crapspp;                
        --Data Referencia
        pr_dtrefere:= rw_crapspp.dtsldrpp;
        --Valor Saldo Popupanca
        pr_vlsldrpp:= rw_crapspp.vlsldrpp;
      ELSE
        --Fechar Cursor
        CLOSE cr_crapspp;
        --Seleiconar Saldo Poupanca Programada
        OPEN cr_crapspp2 (pr_cdcooper => pr_cdcooper
                         ,pr_nrdconta => pr_nrdconta
                         ,pr_nrctrrpp => pr_nrctrrpp
                         ,pr_dtsldrpp => pr_dtiniper);
        FETCH cr_crapspp2 INTO rw_crapspp;
        --Se Encontrou
        IF cr_crapspp2%FOUND THEN
          --Data Referencia
          pr_dtrefere:= rw_crapspp.dtsldrpp;
          --Valor Saldo Popupanca
          pr_vlsldrpp:= rw_crapspp.vlsldrpp;
        END IF;  
        --Fechar Cursor
        CLOSE cr_crapspp2;
      END IF;                    
      --Retorno OK
      pr_des_reto:= 'OK';  
    EXCEPTION
      WHEN OTHERS THEN
        
        -- Retorno não OK
        pr_des_reto:= 'NOK';
        -- Chamar rotina de gravação de erro
        pr_dscritic:= 'Erro na pc_gera_saldo_anterior --> '|| sqlerrm;
      END;
    END pc_gera_saldo_anterior; 

    --Subrotina para consultar extrato da Poupanca e aplicacoes Programadas
    PROCEDURE pc_consulta_extrato_poup (pr_cdcooper    IN crapcop.cdcooper%TYPE       --Codigo Cooperativa
                                       ,pr_cdagenci    IN crapass.cdagenci%TYPE       --Codigo Agencia
                                       ,pr_nrdcaixa    IN INTEGER                     --Numero do Caixa
                                       ,pr_cdoperad    IN VARCHAR2                    --Codigo Operador
                                       ,pr_nmdatela    IN VARCHAR2                    --Nome da Tela
                                       ,pr_idorigem    IN INTEGER                     --Origem da Chamada
                                       ,pr_nrdconta    IN crapass.nrdconta%TYPE       --Numero da Conta do Associado
                                       ,pr_idseqttl    IN INTEGER                     --Sequencial do Titular
                                       ,pr_nrctrrpp    IN craprpp.nrctrrpp%TYPE       --Numero Contrato Poupanca
                                       ,pr_dtiniper    IN DATE                        --Periodo inicial
                                       ,pr_dtfimper    IN DATE                        --Periodo Final
                                       ,pr_flgerlog    IN BOOLEAN                     --Imprimir log
                                       ,pr_tab_extrato_rpp OUT typ_tab_extrato_rpp  --Tabela Extrato Poupanca
                                       ,pr_des_reto     OUT VARCHAR2                  --Retorno OK ou NOK
                                       ,pr_tab_erro     OUT gene0001.typ_tab_erro) IS --Tabela de Erros
  BEGIN
  ---------------------------------------------------------------------------------------------------------------
  --
  --  Programa : pc_consulta_extrato_poup            Antigo: procedures/b1wgen0006.p/consulta-extrato-poupanca
  --  Sistema  : 
  --  Sigla    : CRED
  --  Autor    : Alisson C. Berrido - Amcom
  --  Data     : Julho/2014                           Ultima atualizacao: 03/08/2018
  --
  -- Dados referentes ao programa:
  --
  -- Frequencia: -----
  -- Objetivo   : Procedure para consultar extrato da poupanca
  --
  -- Alterações : 16/07/2014 - Conversão Progress -> Oracle (Alisson - AMcom)
  --              
  --              03/08/2018 - Inclusão Apl. Programadas - Proj. 411.2 (CIS Corporate)
  --              
  ---------------------------------------------------------------------------------------------------------------
  DECLARE
      -- Selecionar informacoes dos rendimentos das aplicacoes
      CURSOR cr_craprpp IS
        SELECT craprpp.nrctrrpp
              ,crapass.inpessoa
              ,crapass.nrcpfcgc
              ,craprpp.cdprodut
          FROM craprpp
              ,crapass
         WHERE craprpp.cdcooper = pr_cdcooper
           AND craprpp.nrdconta = pr_nrdconta
           AND craprpp.nrctrrpp = pr_nrctrrpp
           AND craprpp.cdcooper = crapass.cdcooper
           AND craprpp.nrdconta = crapass.nrdconta;
      rw_craprpp cr_craprpp%ROWTYPE;
      -- Cursor Operador
      CURSOR cr_crapope(pr_cdcooper IN crapope.cdcooper%TYPE
                       ,pr_cdoperad IN crapope.cdoperad%TYPE) IS
        SELECT crapope.cdagenci
              ,crapope.cddepart
        FROM crapope crapope
        WHERE crapope.cdcooper = pr_cdcooper
        AND   UPPER(crapope.cdoperad) = UPPER(pr_cdoperad);
      rw_crapope cr_crapope%ROWTYPE; 
      --Selecionar Historicos de Tarifas
      CURSOR cr_craphis (pr_cdcooper IN crapcop.cdcooper%TYPE
                        ,pr_cdhistor IN craphis.cdhistor%TYPE) IS
        SELECT craphis.cdhistor
              ,craphis.dshistor
              ,craphis.indebcre
              ,craphis.dsextrat
        FROM craphis craphis
        WHERE craphis.cdcooper = pr_cdcooper
        AND   craphis.cdhistor = pr_cdhistor;
      rw_craphis cr_craphis%ROWTYPE;                      

      --Selecionar Lancamentos da Aplicacao (Poupança)
      CURSOR cr_craplpp (pr_cdcooper IN craplpp.cdcooper%type
                        ,pr_nrdconta IN craplpp.nrdconta%type
                        ,pr_nrctrrpp IN craplpp.nrctrrpp%type
                        ,pr_dtiniper IN craplpp.dtmvtolt%type
                        ,pr_dtfimper IN craplpp.dtmvtolt%type
                        ,pr_listahis IN VARCHAR2) IS
        SELECT craplpp.cdhistor
              ,-100 cdhsprap            -- Utilizado apenas na nova apl
              ,-100 cdhsrgap            -- Utilizado apenas na nova apl
              ,-100 cdhsrvap            -- Utilizado apenas na nova apl
              ,-100 cdhsrdap            -- Utilizado apenas na nova apl
              ,-100 cdhsirap            -- Utilizado apenas na nova apl
              ,craplpp.vllanmto
              ,craplpp.dtmvtolt
              ,craplpp.dtrefere
              ,craplpp.cdagenci
              ,craplpp.cdbccxlt
              ,craplpp.nrdolote
              ,craplpp.nrdocmto
              ,craplpp.txaplmes
              ,craplpp.txaplica
        FROM craplpp craplpp
        WHERE craplpp.cdcooper = pr_cdcooper 
        AND   craplpp.nrdconta = pr_nrdconta 
        AND   craplpp.nrctrrpp = pr_nrctrrpp 
        AND   craplpp.dtrefere >= pr_dtiniper
        AND   craplpp.dtmvtolt >= pr_dtiniper
        AND   craplpp.dtmvtolt <= pr_dtfimper 
        AND   gene0002.fn_existe_valor(pr_listahis,craplpp.cdhistor,',') = 'S'
        ORDER BY cdcooper,nrdconta,dtmvtolt,cdhistor,nrdocmto,progress_recid;

      --Selecionar Lancamentos da Aplicacao Programada
      CURSOR cr_craplac (pr_cdcooper IN craplpp.cdcooper%type
                        ,pr_nrdconta IN craplpp.nrdconta%type
                        ,pr_nrctrrpp IN craplpp.nrctrrpp%type
                        ,pr_dtiniper IN craplpp.dtmvtolt%type
                        ,pr_dtfimper IN craplpp.dtmvtolt%type
                        ,pr_listahis IN VARCHAR2) IS
        SELECT lac.cdhistor
              ,cpc.cdhsprap
              ,cpc.cdhsrgap
			  ,cpc.cdhsrvap
		      ,cpc.cdhsrdap
			  ,cpc.cdhsirap
              ,lac.vllanmto
              ,lac.dtmvtolt
              ,NULL dtrefere
              ,lac.cdagenci
              ,lac.cdbccxlt
              ,lac.nrdolote
              ,lac.nrdocmto
              ,0 txaplmes
              ,rac.txaplica
        FROM craplac lac,craprac rac,crapcpc cpc
        WHERE rac.cdcooper = pr_cdcooper 
          AND rac.nrdconta = pr_nrdconta
          AND rac.nrctrrpp = pr_nrctrrpp
          AND rac.cdcooper = lac.cdcooper
          AND rac.nrdconta = lac.nrdconta
          AND rac.nraplica = lac.nraplica
          AND rac.cdprodut = cpc.cdprodut
          AND lac.dtmvtolt >= pr_dtiniper
          AND lac.dtmvtolt <= pr_dtfimper
          AND gene0002.fn_existe_valor(pr_listahis,lac.cdhistor,',') = 'S'
        ORDER BY lac.cdcooper,lac.nrdconta,lac.dtmvtolt,lac.cdhistor,nrdocmto,lac.progress_recid;

      rw_lancam cr_craplpp%ROWTYPE;
      -- Históricos do Produto
      
      CURSOR cr_crapcpc (pr_cdprodut IN crapcpc.cdprodut%type) IS
             SELECT cdhscacc
                   ,cdhsvrcc
                   ,cdhsraap
                   ,cdhsnrap
                   ,cdhsprap
                   ,cdhsrvap
                   ,cdhsrdap
                   ,cdhsirap
                   ,cdhsrgap
                   ,cdhsvtap 
              FROM CRAPCPC 
             WHERE cdprodut=pr_cdprodut;
             
       rw_crapcpc cr_crapcpc%ROWTYPE;     
      
      --Variaveis Locais
      vr_flgfirst BOOLEAN;
      vr_flgimune BOOLEAN;
      vr_vlstotal NUMBER;
      vr_vlsldant NUMBER;
      vr_vlresgat NUMBER;
      vr_vlrendim NUMBER;
      vr_vldoirrf NUMBER;
      vr_dtiniimu DATE;
      vr_dtfimimu DATE; 
      vr_dtiniper DATE;
      vr_dsextrat VARCHAR2(1000);      
      vr_dshistor VARCHAR2(1000);
      vr_listahis VARCHAR2(1000);
      vr_dstransa VARCHAR2(100);
      vr_dsorigem VARCHAR2(100);
      vr_nrdrowid ROWID;
      --Variaveis de indices
      vr_index PLS_INTEGER;
      --Variaveis de Erro
      vr_des_reto VARCHAR2(3);
      vr_cdcritic INTEGER;
      vr_dscritic VARCHAR2(4000);
      --Variaveis de Excecoes
      vr_exc_erro EXCEPTION;
      
      vr_apl_prog PLS_INTEGER; -- Aplicação Programada?
      
      vr_tab_extrato_rpp typ_tab_extrato_rpp;
    BEGIN
      --Limpar tabelas memoria
      pr_tab_erro.DELETE;
      pr_tab_extrato_rpp.DELETE;
      --Inicializar transacao
      vr_dsorigem:= gene0001.vr_vet_des_origens(pr_idorigem);
      vr_dstransa:= 'Carregar extrato da aplicacao programada';
     
      -- Buscar os dados da Poupanca
      OPEN cr_craprpp;
      FETCH cr_craprpp INTO rw_craprpp;
      --Se nao encontrou
      IF cr_craprpp%NOTFOUND THEN
        --Fechar Cursor
        CLOSE cr_craprpp;
        --Mensagem Critica
        vr_cdcritic:= 495;
        vr_dscritic:= NULL;
        RAISE vr_exc_erro;
      END IF;  
      --Fechar Cursor
      CLOSE cr_craprpp;
      -- Buscar Dados do Operador
      OPEN cr_crapope (pr_cdcooper => pr_cdcooper
                      ,pr_cdoperad => pr_cdoperad);
      FETCH cr_crapope INTO rw_crapope;
      -- Verifica se a retornou registro
      IF cr_crapope%NOTFOUND THEN
        --Fechar Cursor
        CLOSE cr_crapope;
        vr_cdcritic:= 67;
        vr_dscritic:= NULL;
        RAISE vr_exc_erro;
      ELSE
        -- Apenas Fecha o Cursor
        CLOSE cr_crapope;
      END IF;  
      IF rw_craprpp.cdprodut < 1 THEN -- RPP 
         vr_apl_prog := 0;
      ELSE
         vr_apl_prog := 1;
      END IF; 
      
      IF vr_apl_prog = 0 THEN -- RPP
        --Gerar Saldo Anterior - RPP
      pc_gera_saldo_anterior (pr_cdcooper  => pr_cdcooper     --Codigo Cooperativa
                             ,pr_nrdconta  => pr_nrdconta     --Numero da Conta do Associado
                             ,pr_nrctrrpp  => pr_nrctrrpp     --Numero Contrato Poupanca
                             ,pr_dtiniper  => pr_dtiniper     --Periodo inicial
                             ,pr_dtrefere  => vr_dtiniper     --Periodo Final
                             ,pr_vlsldrpp  => vr_vlsldant     --Saldo Poupanca
                             ,pr_des_reto  => vr_des_reto     --Retorno OK ou NOK
                             ,pr_dscritic  => vr_dscritic);   --Descricao do Erro
      ELSE
        --Gerar Saldo Anterior - Apl Programada
        vr_des_reto := 'OK';
        vr_vlsldant := 0;
        apli0008.pc_calc_saldo_ini_apl_prog (pr_cdcooper => pr_cdcooper
                                            ,pr_nmdatela => pr_nmdatela
                                            ,pr_cdoperad => pr_cdoperad
                                            ,pr_nrdconta => pr_nrdconta
                                            ,pr_idseqttl => pr_idseqttl
                                            ,pr_idorigem => pr_idorigem
                                            ,pr_nrctrrpp => pr_nrctrrpp
                                            ,pr_dtmvtolt => pr_dtiniper
                                            ,pr_idgerlog => 0
                                            ,pr_vlsdrdpp => vr_vlsldant
                                            ,pr_vlresgat => vr_vlresgat
                                            ,pr_vlrendim => vr_vlrendim
                                            ,pr_vldoirrf => vr_vldoirrf
                                            ,pr_cdcritic => vr_cdcritic
                                            ,pr_dscritic => vr_dscritic);                                       

                                        
        IF vr_dscritic is not null THEN
           vr_des_reto := 'NOK';
        END IF;
      END IF;
      --Se ocorreu erro
      IF vr_des_reto = 'NOK' THEN
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;  
      --Primeira Ocorrencia
      vr_flgfirst:= TRUE;
      --Valor Total recebe o Saldo Anterior
      vr_vlstotal:= vr_vlsldant;
      
      /* Procedure para verificar periodo de imunidade tributaria */
      IMUT0001.pc_verifica_periodo_imune(pr_cdcooper => pr_cdcooper  --> Codigo Cooperativa
                                        ,pr_nrdconta => pr_nrdconta  --> Numero da Conta
                                        ,pr_inpessoa => rw_craprpp.inpessoa
                                        ,pr_nrcpfcgc => rw_craprpp.nrcpfcgc
                                        ,pr_flgimune => vr_flgimune  --> Identificador se é imune
                                        ,pr_dtinicio => vr_dtiniimu  --> Data de inicio da imunidade
                                        ,pr_dttermin => vr_dtfimimu  --> Data termino da imunidadeValor insento
                                        ,pr_dsreturn => vr_des_reto  --> Descricao retorno(NOK/OK)
                                        ,pr_tab_erro => pr_tab_erro);--> Tabela erros
      --Se ocorreu erro
      IF vr_des_reto = 'NOK' THEN
        --Se tem erro na tabela 
        IF pr_tab_erro.count > 0 THEN
          vr_cdcritic:= pr_tab_erro(pr_tab_erro.FIRST).cdcritic;
          vr_dscritic:= pr_tab_erro(pr_tab_erro.FIRST).dscritic;
        ELSE
          vr_cdcritic:= 0;
          vr_dscritic:= 'Erro ao executar IMUT0001.pc_verifica_periodo_imune. Cooperativa: '||pr_cdcooper||' Conta: '||pr_nrdconta;  
        END IF;  
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF; 
      --Selecionar Lancamentos da Poupanca
      IF vr_apl_prog = 0 THEN
      --Tela for ATENDA
      IF pr_nmdatela = 'ATENDA' THEN
        --Usuario TI
        IF rw_crapope.cddepart = 20  THEN  /** SUPER-USUARIO **/
          vr_listahis:= '150,151,152,154,155,158,496,863,925,1115';
        ELSE
          vr_listahis:= '150,151,158,496,863,925,1115';
        END IF; 
      ELSE
        --Usuario TI
        IF rw_crapope.cddepart = 20  THEN  /** SUPER-USUARIO **/
          vr_listahis:= '150,151,152,154,155,158,496,863,869,870,925,1115';
        ELSE
          vr_listahis:= '150,151,158,496,863,870,925,1115';
        END IF;        
      END IF;  
        -- RPP 
        OPEN cr_craplpp (pr_cdcooper => pr_cdcooper
                                   ,pr_nrdconta => pr_nrdconta
                                   ,pr_nrctrrpp => pr_nrctrrpp
                                   ,pr_dtiniper => vr_dtiniper
                                   ,pr_dtfimper => pr_dtfimper
                        ,pr_listahis => vr_listahis); 
      ELSE
          -- Aplicacao Programada
        OPEN cr_crapcpc (pr_cdprodut => rw_craprpp.cdprodut);
        FETCH cr_crapcpc INTO rw_crapcpc;
        CLOSE cr_crapcpc;  -- Se não existisse o produto, um erro já teria estourado antes. 

        IF pr_nmdatela = 'ATENDA' THEN
          --Usuario TI
          IF rw_crapope.cddepart = 20  THEN  /** SUPER-USUARIO **/
            vr_listahis:= '150,151,152,154,155,158,496,863,925,1115';
          ELSE
              vr_listahis:= '150,151,158,496,863,925,1115'; 
          END IF; 
        ELSE
          --Usuario TI
          IF rw_crapope.cddepart = 20  THEN  /** SUPER-USUARIO **/
            vr_listahis:= '150,151,152,154,155,158,496,863,869,870,925,1115';
          ELSE
            vr_listahis:= '150,151,158,496,863,870,925,1115'; 
          END IF;        
        END IF;
        vr_listahis:= vr_listahis || ','|| rw_crapcpc.cdhsnrap || ','|| rw_crapcpc.cdhsrgap || ','|| rw_crapcpc.cdhsirap;      
          vr_listahis:= vr_listahis || ',' || rw_crapcpc.cdhsprap || ',' || rw_crapcpc.cdhsrvap || ','|| rw_crapcpc.cdhsrdap;  
											     
        vr_dtiniper := pr_dtiniper;
        OPEN cr_craplac (pr_cdcooper => pr_cdcooper
                        ,pr_nrdconta => pr_nrdconta
                        ,pr_nrctrrpp => pr_nrctrrpp
                        ,pr_dtiniper => vr_dtiniper
                        ,pr_dtfimper => pr_dtfimper
                        ,pr_listahis => vr_listahis); 
                        
      END IF;                                     
      LOOP
        IF cr_craplpp%ISOPEN THEN -- RPP
           FETCH cr_craplpp INTO rw_lancam;
           EXIT WHEN cr_craplpp%NOTFOUND;
        /** Faz parte da composicao do saldo anterior **/
           IF rw_lancam.dtrefere = vr_dtiniper 
              AND rw_lancam.cdhistor IN (150,151,152,154,155,863,869,870) THEN  
          --Pular Registro
          CONTINUE; 
        END IF;   
        ELSE -- APL. PROGR
            FETCH cr_craplac INTO rw_lancam;
            EXIT WHEN cr_craplac%NOTFOUND;
           /** Faz parte da composicao do saldo anterior **/
           IF rw_lancam.dtrefere = vr_dtiniper
              -- Fix me - Rever os históricos 
              AND rw_lancam.cdhistor IN (150,151,152,154,155,863,869,870, rw_crapcpc.cdhsnrap, rw_crapcpc.cdhsprap,2746, rw_crapcpc.cdhsrvap, rw_crapcpc.cdhsirap) THEN 
             --Pular Registro
             CONTINUE; 
           END IF;   
        END IF;   
        --Selecionar Historicos de Tarifas
        OPEN cr_craphis (pr_cdcooper => pr_cdcooper
                        ,pr_cdhistor => rw_lancam.cdhistor);
        FETCH cr_craphis INTO rw_craphis;
        --Se nao encontrou
        IF cr_craphis%NOTFOUND THEN
          -- Fechar o cursor pois haverá raise
          CLOSE cr_craphis;
          -- Montar mensagem de critica
          vr_cdcritic:= 80;
          vr_dscritic:= NULL;
          --Levantar Excecao
          RAISE vr_exc_erro; 
        END IF;                  
        --Fechar Cursor
        CLOSE cr_craphis;
        --Credito
        IF rw_craphis.indebcre = 'C' THEN
          --Somar valor lancamento
          vr_vlstotal:= nvl(vr_vlstotal,0) + rw_lancam.vllanmto;
        ELSIF rw_craphis.indebcre = 'D' THEN  
          --Diminuir valor lancamento
          vr_vlstotal:= nvl(vr_vlstotal,0) - rw_lancam.vllanmto;            
        ELSE  
          -- Montar mensagem de critica
          vr_cdcritic:= 83;
          vr_dscritic:= NULL;
          --Levantar Excecao
          RAISE vr_exc_erro;   
        END IF;  
        --Se For o primeiro registro
        IF vr_flgfirst THEN
          --Marcar que nao é mais primeiro
          vr_flgfirst:= FALSE;
          --Buscar proximo indice na tabela
          vr_index:= vr_tab_extrato_rpp.COUNT + 1;
          --Inserir dados na tabela memoria
          vr_tab_extrato_rpp(vr_index).dtmvtolt:= vr_dtiniper;
          vr_tab_extrato_rpp(vr_index).cdhistor := 0;
          vr_tab_extrato_rpp(vr_index).dshistor:= 'SALDO ANTERIOR';
          vr_tab_extrato_rpp(vr_index).aghistor := 0; -- Acumula
          vr_tab_extrato_rpp(vr_index).nrdocmto:= 0;
          vr_tab_extrato_rpp(vr_index).indebcre:= NULL;
          vr_tab_extrato_rpp(vr_index).vllanmto:= 0;
          vr_tab_extrato_rpp(vr_index).vlsldppr:= vr_vlsldant;
          vr_tab_extrato_rpp(vr_index).txaplica:= 0;
          vr_tab_extrato_rpp(vr_index).txaplmes:= 0;
          vr_tab_extrato_rpp(vr_index).dsextrat:= 'SALDO ANTERIOR';
          --Se nao for InternetBank
          IF pr_nmdatela <> 'INTERNETBANK' THEN
            vr_tab_extrato_rpp(vr_index).vllanmto:= vr_vlsldant;
          END IF;          
        END IF;  --vr_flgfirst
        --Se for Imunidade tributária
        IF vr_flgimune THEN
          --Historico de Rendimento da Aplicacao
          IF rw_lancam.cdhistor = 151 AND
             rw_lancam.dtmvtolt >= vr_dtiniimu AND
             (vr_dtfimimu IS NULL OR (vr_dtfimimu IS NOT NULL AND rw_lancam.dtmvtolt <= vr_dtfimimu)) THEN
            --Descricao Extrato
            vr_dshistor:= rw_craphis.dshistor ||'*';
            vr_dsextrat:= rw_craphis.dsextrat ||'*';           
          ELSE
            --Descricao Extrato
            vr_dshistor:= rw_craphis.dshistor;
            vr_dsextrat:= rw_craphis.dsextrat;
          END IF;  --vr_flgimune             
        ELSE
          --Descricao Extrato
          vr_dshistor:= rw_craphis.dshistor;
          vr_dsextrat:= rw_craphis.dsextrat;
        END IF;   
        --Buscar Proximo indice para o Extrato RDCA
        vr_index:= vr_tab_extrato_rpp.COUNT + 1;
        --Criar Extrato RDCA (temporário)
        vr_tab_extrato_rpp(vr_index).dtmvtolt:= rw_lancam.dtmvtolt;
        vr_tab_extrato_rpp(vr_index).cdagenci:= rw_lancam.cdagenci;
        vr_tab_extrato_rpp(vr_index).cdbccxlt:= rw_lancam.cdbccxlt;
        vr_tab_extrato_rpp(vr_index).nrdolote:= rw_lancam.nrdolote;
        vr_tab_extrato_rpp(vr_index).cdhistor:= rw_lancam.cdhistor;
        -- Agrupar no extrato (apenas novas)
        IF rw_craphis.cdhistor IN 
                (rw_lancam.cdhsprap,rw_lancam.cdhsrgap
                ,rw_lancam.cdhsrvap,rw_lancam.cdhsrdap
          ,rw_lancam.cdhsirap) 
          AND vr_apl_prog = 1 THEN
           vr_tab_extrato_rpp(vr_index).aghistor := 1; -- Acumula
        ELSE
           vr_tab_extrato_rpp(vr_index).aghistor := 0; -- Nao Acumula
        END IF;
        vr_tab_extrato_rpp(vr_index).dshistor:= vr_dshistor;
        vr_tab_extrato_rpp(vr_index).nrdocmto:= rw_lancam.nrdocmto;
        vr_tab_extrato_rpp(vr_index).indebcre:= rw_craphis.indebcre;
        vr_tab_extrato_rpp(vr_index).vllanmto:= rw_lancam.vllanmto;
        vr_tab_extrato_rpp(vr_index).vlsldppr:= vr_vlstotal;
        vr_tab_extrato_rpp(vr_index).dsextrat:= vr_dsextrat;
        --Taxa aplicada no Mes
        IF rw_lancam.txaplmes > 0  THEN
          vr_tab_extrato_rpp(vr_index).txaplmes:= rw_lancam.txaplmes;
        ELSE 
          vr_tab_extrato_rpp(vr_index).txaplmes:= 0;
        END IF;  
        --Taxa aplicacao
        IF rw_lancam.txaplica > 0  THEN
          vr_tab_extrato_rpp(vr_index).txaplica:= rw_lancam.txaplica;
        ELSE 
          vr_tab_extrato_rpp(vr_index).txaplica:= 0;
        END IF; 
      END LOOP; --rw_lancam
      -- Fecha o cursor correspondente
      IF cr_craplpp%ISOPEN THEN -- RPP
         CLOSE cr_craplpp;
      ELSE -- APL. PROGR
         CLOSE cr_craplac;
      END IF;
      -- Gerar extrato final agrupando RESGATES e PROVISOES
      IF vr_tab_extrato_rpp.COUNT >0 THEN
        vr_index:=0;
        FOR vr_index_temp in vr_tab_extrato_rpp.First .. vr_tab_extrato_rpp.Last LOOP
            IF vr_tab_extrato_rpp(vr_index_temp).aghistor = 1 THEN
               vr_index := vr_index;
            END IF    ;
            IF vr_tab_extrato_rpp(vr_index_temp).aghistor = 1  
            AND (vr_tab_extrato_rpp(vr_index_temp).dtmvtolt = pr_tab_extrato_rpp(vr_index).dtmvtolt)
            AND (vr_tab_extrato_rpp(vr_index_temp).cdagenci = pr_tab_extrato_rpp(vr_index).cdagenci)
            AND (vr_tab_extrato_rpp(vr_index_temp).cdhistor = pr_tab_extrato_rpp(vr_index).cdhistor) THEN -- Acumular
                pr_tab_extrato_rpp(vr_index).nrdocmto := null;
                pr_tab_extrato_rpp(vr_index).vllanmto := pr_tab_extrato_rpp(vr_index).vllanmto + vr_tab_extrato_rpp(vr_index_temp).vllanmto;
                IF vr_tab_extrato_rpp(vr_index_temp).indebcre = 'C' THEN
                pr_tab_extrato_rpp(vr_index).vlsldppr := pr_tab_extrato_rpp(vr_index).vlsldppr + vr_tab_extrato_rpp(vr_index_temp).vllanmto;
            ELSE
                   pr_tab_extrato_rpp(vr_index).vlsldppr := pr_tab_extrato_rpp(vr_index).vlsldppr - vr_tab_extrato_rpp(vr_index_temp).vllanmto;
                END IF;
            ELSE
                vr_index:= pr_tab_extrato_rpp.COUNT + 1;
                pr_tab_extrato_rpp(vr_index).dtmvtolt:= vr_tab_extrato_rpp(vr_index_temp).dtmvtolt;
                pr_tab_extrato_rpp(vr_index).cdagenci:= vr_tab_extrato_rpp(vr_index_temp).cdagenci;
                pr_tab_extrato_rpp(vr_index).cdbccxlt:= vr_tab_extrato_rpp(vr_index_temp).cdbccxlt;
                pr_tab_extrato_rpp(vr_index).nrdolote:= vr_tab_extrato_rpp(vr_index_temp).nrdolote;  
                pr_tab_extrato_rpp(vr_index).cdhistor:= vr_tab_extrato_rpp(vr_index_temp).cdhistor;
                pr_tab_extrato_rpp(vr_index).dshistor:= vr_tab_extrato_rpp(vr_index_temp).dshistor;
                pr_tab_extrato_rpp(vr_index).nrdocmto:= vr_tab_extrato_rpp(vr_index_temp).nrdocmto;
                pr_tab_extrato_rpp(vr_index).indebcre:= vr_tab_extrato_rpp(vr_index_temp).indebcre;
                pr_tab_extrato_rpp(vr_index).vllanmto:= vr_tab_extrato_rpp(vr_index_temp).vllanmto;
                pr_tab_extrato_rpp(vr_index).vlsldppr:= vr_tab_extrato_rpp(vr_index_temp).vlsldppr;
                pr_tab_extrato_rpp(vr_index).txaplmes:= vr_tab_extrato_rpp(vr_index_temp).txaplmes;
                pr_tab_extrato_rpp(vr_index).txaplica:= vr_tab_extrato_rpp(vr_index_temp).txaplica;
                pr_tab_extrato_rpp(vr_index).dsextrat:= vr_tab_extrato_rpp(vr_index_temp).dsextrat;
             END IF;
        END LOOP;
        ELSE 
        pr_tab_extrato_rpp := vr_tab_extrato_rpp;
        END IF; 
      -- Se foi solicitado geração de LOG
      IF pr_flgerlog THEN
        -- Chamar geração de LOG
        gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                            ,pr_cdoperad => pr_cdoperad
                            ,pr_dscritic => NULL
                            ,pr_dsorigem => vr_dsorigem
                            ,pr_dstransa => vr_dstransa
                            ,pr_dttransa => TRUNC(SYSDATE)
                            ,pr_flgtrans => 1 --> TRUE
                            ,pr_hrtransa => gene0002.fn_busca_time
                            ,pr_idseqttl => pr_idseqttl
                            ,pr_nmdatela => pr_nmdatela
                            ,pr_nrdconta => pr_nrdconta
                            ,pr_nrdrowid => vr_nrdrowid);
      END IF;         
      --Retorno OK
      pr_des_reto:= 'OK';  
    EXCEPTION
      WHEN vr_exc_erro THEN
        -- Retorno não OK
        pr_des_reto := 'NOK';
        -- Fecha o cursor que possa estar aberto
        IF cr_craplpp%ISOPEN THEN -- RPP
           CLOSE cr_craplpp;
        ELSE -- APL. PROGR
           CLOSE cr_craplac;
        END IF;
        -- Chamar rotina de gravação de erro
        gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                             ,pr_cdagenci => pr_cdagenci
                             ,pr_nrdcaixa => pr_nrdcaixa
                             ,pr_nrsequen => 1 --> Fixo
                             ,pr_cdcritic => vr_cdcritic --> Critica 0
                             ,pr_dscritic => vr_dscritic
                             ,pr_tab_erro => pr_tab_erro);
        -- Se foi solicitado geração de LOG
        IF pr_flgerlog THEN
          -- Chamar geração de LOG
          gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                              ,pr_cdoperad => pr_cdoperad
                              ,pr_dscritic => vr_dscritic
                              ,pr_dsorigem => vr_dsorigem
                              ,pr_dstransa => vr_dstransa
                              ,pr_dttransa => TRUNC(SYSDATE)
                              ,pr_flgtrans => 0 --> FALSE
                              ,pr_hrtransa => gene0002.fn_busca_time
                              ,pr_idseqttl => pr_idseqttl
                              ,pr_nmdatela => pr_nmdatela
                              ,pr_nrdconta => pr_nrdconta
                              ,pr_nrdrowid => vr_nrdrowid);
        END IF;  
      WHEN OTHERS THEN
        -- Retorno não OK
        pr_des_reto := 'NOK';
        -- Fecha o cursor que possa estar aberto
        IF cr_craplpp%ISOPEN THEN -- RPP
           CLOSE cr_craplpp;
        ELSE -- APL. PROGR
           CLOSE cr_craplac;
        END IF;
        -- Chamar rotina de gravação de erro
        vr_dscritic := 'Erro na pc_consulta_extrato_poup --> '|| sqlerrm;
        gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                             ,pr_cdagenci => pr_cdagenci
                             ,pr_nrdcaixa => pr_nrdcaixa
                             ,pr_nrsequen => 1 --> Fixo
                             ,pr_cdcritic => 0 --> Critica 0
                             ,pr_dscritic => vr_dscritic
                             ,pr_tab_erro => pr_tab_erro);
        -- Se foi solicitado geração de LOG
        IF pr_flgerlog THEN
          -- Chamar geração de LOG
          gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                              ,pr_cdoperad => pr_cdoperad
                              ,pr_dscritic => vr_dscritic
                              ,pr_dsorigem => vr_dsorigem
                              ,pr_dstransa => vr_dstransa
                              ,pr_dttransa => TRUNC(SYSDATE)
                              ,pr_flgtrans => 0 --> FALSE
                              ,pr_hrtransa => gene0002.fn_busca_time
                              ,pr_idseqttl => pr_idseqttl
                              ,pr_nmdatela => pr_nmdatela
                              ,pr_nrdconta => pr_nrdconta
                              ,pr_nrdrowid => vr_nrdrowid);
        END IF;    
      END;
    END pc_consulta_extrato_poup; 

    --Subrotina para consultar extrato analítico das Aplicacoes Programadas (por titulo)
    PROCEDURE pc_consulta_extrato_ap_tit (pr_cdcooper    IN crapcop.cdcooper%TYPE       --Codigo Cooperativa
                                         ,pr_cdagenci    IN crapass.cdagenci%TYPE       --Codigo Agencia
                                         ,pr_nrdcaixa    IN INTEGER                     --Numero do Caixa
                                         ,pr_cdoperad    IN VARCHAR2                    --Codigo Operador
                                         ,pr_nmdatela    IN VARCHAR2                    --Nome da Tela
                                         ,pr_idorigem    IN INTEGER                     --Origem da Chamada
                                         ,pr_nrdconta    IN crapass.nrdconta%TYPE       --Numero da Conta do Associado
                                         ,pr_idseqttl    IN INTEGER                     --Sequencial do Titular
                                         ,pr_nrctrrpp    IN craprpp.nrctrrpp%TYPE       --Numero Contrato Poupanca
                                         ,pr_dtiniper    IN DATE                        --Periodo inicial
                                         ,pr_dtfimper    IN DATE                        --Periodo Final
                                         ,pr_flgerlog    IN BOOLEAN                     --Imprimir log
                                         ,pr_tab_extrato_rpp OUT typ_tab_extrato_rpp    --Tabela Extrato Poupanca
                                         ,pr_des_reto     OUT VARCHAR2                  --Retorno OK ou NOK
                                         ,pr_tab_erro     OUT gene0001.typ_tab_erro) IS --Tabela de Erros
  BEGIN
  /*---------------------------------------------------------------------------------------------------------------

     Programa : pc_consulta_extrato_ap_tit
     Sistema : Novos Produtos de Captação
     Sigla   : APLI
     Autor   : CIS Corporate
     Data    : Agosto/2018.                    Ultima atualizacao: --/--/----

     Dados referentes ao programa:

     Frequencia: Sempre que for chamado

     Objetivo  : Rotina referente a busca de extratos das aplicações programadas por

     Observacao: -----

     Alteracoes: 
    ..............................................................................*/                

  DECLARE
      -- Selecionar informacoes dos rendimentos das aplicacoes
      CURSOR cr_craprpp IS
        SELECT craprpp.nrctrrpp
              ,crapass.inpessoa
              ,crapass.nrcpfcgc
              ,craprpp.cdprodut
          FROM craprpp
              ,crapass
         WHERE craprpp.cdcooper = pr_cdcooper
           AND craprpp.nrdconta = pr_nrdconta
           AND craprpp.nrctrrpp = pr_nrctrrpp
           AND craprpp.cdcooper = crapass.cdcooper
           AND craprpp.nrdconta = crapass.nrdconta;
      rw_craprpp cr_craprpp%ROWTYPE;
      -- Cursor Operador
      CURSOR cr_crapope(pr_cdcooper IN crapope.cdcooper%TYPE
                       ,pr_cdoperad IN crapope.cdoperad%TYPE) IS
        SELECT crapope.cdagenci
              ,crapope.cddepart
        FROM crapope crapope
        WHERE crapope.cdcooper = pr_cdcooper
        AND   UPPER(crapope.cdoperad) = UPPER(pr_cdoperad);
      rw_crapope cr_crapope%ROWTYPE; 
      --Selecionar Historicos de Tarifas
      CURSOR cr_craphis (pr_cdcooper IN crapcop.cdcooper%TYPE
                        ,pr_cdhistor IN craphis.cdhistor%TYPE) IS
        SELECT craphis.cdhistor
              ,craphis.dshistor
              ,craphis.indebcre
              ,craphis.dsextrat
        FROM craphis craphis
        WHERE craphis.cdcooper = pr_cdcooper
        AND   craphis.cdhistor = pr_cdhistor;
      rw_craphis cr_craphis%ROWTYPE;                      

      --Selecionar Lancamentos da Aplicacao (Poupança)
      CURSOR cr_craplpp (pr_cdcooper IN craplpp.cdcooper%type
                        ,pr_nrdconta IN craplpp.nrdconta%type
                        ,pr_nrctrrpp IN craplpp.nrctrrpp%type
                        ,pr_dtiniper IN craplpp.dtmvtolt%type
                        ,pr_dtfimper IN craplpp.dtmvtolt%type
                        ,pr_listahis IN VARCHAR2) IS
        SELECT craplpp.cdhistor
              ,-100 cdhsprap            -- Utilizado apenas na nova apl
              ,-100 cdhsrgap            -- Utilizado apenas na nova apl
              ,craplpp.vllanmto
              ,craplpp.dtmvtolt
              ,craplpp.dtrefere
              ,craplpp.cdagenci
              ,craplpp.cdbccxlt
              ,craplpp.nrdolote
              ,craplpp.nrdocmto
              ,craplpp.txaplmes
              ,craplpp.txaplica
        FROM craplpp craplpp
        WHERE craplpp.cdcooper = pr_cdcooper 
        AND   craplpp.nrdconta = pr_nrdconta 
        AND   craplpp.nrctrrpp = pr_nrctrrpp 
        AND   craplpp.dtrefere >= pr_dtiniper
        AND   craplpp.dtmvtolt >= pr_dtiniper
        AND   craplpp.dtmvtolt <= pr_dtfimper 
        AND   gene0002.fn_existe_valor(pr_listahis,craplpp.cdhistor,',') = 'S'
        ORDER BY cdcooper,nrdconta,dtmvtolt,cdhistor,nrdocmto,progress_recid;

      --Selecionar Lancamentos da Aplicacao Programada
      CURSOR cr_craplac (pr_cdcooper IN craplpp.cdcooper%type
                        ,pr_nrdconta IN craplpp.nrdconta%type
                        ,pr_nrctrrpp IN craplpp.nrctrrpp%type
                        ,pr_dtiniper IN craplpp.dtmvtolt%type
                        ,pr_dtfimper IN craplpp.dtmvtolt%type
                        ,pr_listahis IN VARCHAR2) IS
        SELECT lac.cdhistor
              ,cpc.cdhsprap
              ,cpc.cdhsrgap
              ,lac.vllanmto
              ,lac.dtmvtolt
              ,NULL dtrefere
              ,lac.cdagenci
              ,lac.cdbccxlt
              ,lac.nrdolote
              ,lac.nrdocmto
              ,0 txaplmes
              ,rac.txaplica
        FROM craplac lac,craprac rac,crapcpc cpc
        WHERE rac.cdcooper = pr_cdcooper 
          AND rac.nrdconta = pr_nrdconta
          AND rac.nrctrrpp = pr_nrctrrpp
          AND rac.cdcooper = lac.cdcooper
          AND rac.nrdconta = lac.nrdconta
          AND rac.nraplica = lac.nraplica
          AND rac.cdprodut = cpc.cdprodut
          AND lac.dtmvtolt >= pr_dtiniper
          AND lac.dtmvtolt <= pr_dtfimper
          AND gene0002.fn_existe_valor(pr_listahis,lac.cdhistor,',') = 'S'
        ORDER BY lac.cdcooper,lac.nrdconta,lac.dtmvtolt,lac.cdhistor,nrdocmto,lac.progress_recid;

      rw_lancam cr_craplpp%ROWTYPE;
      -- Históricos do Produto
      
      CURSOR cr_crapcpc (pr_cdprodut IN crapcpc.cdprodut%type) IS
             SELECT cdhscacc
                   ,cdhsvrcc
                   ,cdhsraap
                   ,cdhsnrap
                   ,cdhsprap
                   ,cdhsrvap
                   ,cdhsrdap
                   ,cdhsirap
                   ,cdhsrgap
                   ,cdhsvtap 
              FROM CRAPCPC 
             WHERE cdprodut=pr_cdprodut;
             
       rw_crapcpc cr_crapcpc%ROWTYPE;     

      --Variaveis Locais
      vr_flgfirst BOOLEAN;
      vr_flgimune BOOLEAN;
      vr_vlstotal NUMBER;
      vr_vlsldant NUMBER;
      vr_vlresgat NUMBER;
      vr_vlrendim NUMBER;
      vr_vldoirrf NUMBER;
      vr_dtiniimu DATE;
      vr_dtfimimu DATE; 
      vr_dtiniper DATE;
      vr_dsextrat VARCHAR2(1000);      
      vr_dshistor VARCHAR2(1000);
      vr_listahis VARCHAR2(1000);
      vr_dstransa VARCHAR2(100);
      vr_dsorigem VARCHAR2(100);
      vr_nrdrowid ROWID;
      --Variaveis de indices
      vr_index PLS_INTEGER;
      --Variaveis de Erro
      vr_des_reto VARCHAR2(3);
      vr_cdcritic INTEGER;
      vr_dscritic VARCHAR2(4000);
      --Variaveis de Excecoes
      vr_exc_erro EXCEPTION;
      
      vr_apl_prog PLS_INTEGER; -- Aplicação Programada?
      
      vr_tab_extrato_rpp typ_tab_extrato_rpp;
    BEGIN
      --Limpar tabelas memoria
      pr_tab_erro.DELETE;
      pr_tab_extrato_rpp.DELETE;
      --Inicializar transacao
      vr_dsorigem:= gene0001.vr_vet_des_origens(pr_idorigem);
      vr_dstransa:= 'Carregar extrato da aplicacao programada';
     
      -- Buscar os dados da Poupanca
      OPEN cr_craprpp;
      FETCH cr_craprpp INTO rw_craprpp;
      --Se nao encontrou
      IF cr_craprpp%NOTFOUND THEN
        --Fechar Cursor
        CLOSE cr_craprpp;
        --Mensagem Critica
        vr_cdcritic:= 495;
        vr_dscritic:= NULL;
        RAISE vr_exc_erro;
      END IF;  
      --Fechar Cursor
      CLOSE cr_craprpp;
      -- Buscar Dados do Operador
      OPEN cr_crapope (pr_cdcooper => pr_cdcooper
                      ,pr_cdoperad => pr_cdoperad);
      FETCH cr_crapope INTO rw_crapope;
      -- Verifica se a retornou registro
      IF cr_crapope%NOTFOUND THEN
        --Fechar Cursor
        CLOSE cr_crapope;
        vr_cdcritic:= 67;
        vr_dscritic:= NULL;
        RAISE vr_exc_erro;
      ELSE
        -- Apenas Fecha o Cursor
        CLOSE cr_crapope;
      END IF;
      IF rw_craprpp.cdprodut < 1 THEN -- RPP 
         vr_apl_prog := 0;
      ELSE
         vr_apl_prog := 1;
      END IF; 
      
      IF vr_apl_prog = 0 THEN -- RPP
        --Gerar Saldo Anterior - RPP
        pc_gera_saldo_anterior (pr_cdcooper  => pr_cdcooper     --Codigo Cooperativa
                               ,pr_nrdconta  => pr_nrdconta     --Numero da Conta do Associado
                               ,pr_nrctrrpp  => pr_nrctrrpp     --Numero Contrato Poupanca
                               ,pr_dtiniper  => pr_dtiniper     --Periodo inicial
                               ,pr_dtrefere  => vr_dtiniper     --Periodo Final
                               ,pr_vlsldrpp  => vr_vlsldant     --Saldo Poupanca
                               ,pr_des_reto  => vr_des_reto     --Retorno OK ou NOK
                               ,pr_dscritic  => vr_dscritic);   --Descricao do Erro
      ELSE
        --Gerar Saldo Anterior - Apl Programada
        vr_des_reto := 'OK';
        vr_vlsldant := 0;
        apli0008.pc_calc_saldo_ini_apl_prog (pr_cdcooper => pr_cdcooper
                                            ,pr_nmdatela => pr_nmdatela
                                            ,pr_cdoperad => pr_cdoperad
                                            ,pr_nrdconta => pr_nrdconta
                                            ,pr_idseqttl => pr_idseqttl
                                            ,pr_idorigem => pr_idorigem
                                            ,pr_nrctrrpp => pr_nrctrrpp
                                            ,pr_dtmvtolt => pr_dtiniper
                                            ,pr_idgerlog => 0
                                            ,pr_vlsdrdpp => vr_vlsldant
                                            ,pr_vlresgat => vr_vlresgat
                                            ,pr_vlrendim => vr_vlrendim
                                            ,pr_vldoirrf => vr_vldoirrf
                                            ,pr_cdcritic => vr_cdcritic
                                            ,pr_dscritic => vr_dscritic);                                       

                                        
        IF vr_dscritic is not null THEN
           vr_des_reto := 'NOK';
        END IF;
      END IF;
      --Se ocorreu erro
      IF vr_des_reto = 'NOK' THEN
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;  
      --Primeira Ocorrencia
      vr_flgfirst:= TRUE;
      --Valor Total recebe o Saldo Anterior
      vr_vlstotal:= vr_vlsldant;
      
      /* Procedure para verificar periodo de imunidade tributaria */
      IMUT0001.pc_verifica_periodo_imune(pr_cdcooper => pr_cdcooper  --> Codigo Cooperativa
                                        ,pr_nrdconta => pr_nrdconta  --> Numero da Conta
                                        ,pr_inpessoa => rw_craprpp.inpessoa
                                        ,pr_nrcpfcgc => rw_craprpp.nrcpfcgc
                                        ,pr_flgimune => vr_flgimune  --> Identificador se é imune
                                        ,pr_dtinicio => vr_dtiniimu  --> Data de inicio da imunidade
                                        ,pr_dttermin => vr_dtfimimu  --> Data termino da imunidadeValor insento
                                        ,pr_dsreturn => vr_des_reto  --> Descricao retorno(NOK/OK)
                                        ,pr_tab_erro => pr_tab_erro);--> Tabela erros
      --Se ocorreu erro
      IF vr_des_reto = 'NOK' THEN
        --Se tem erro na tabela 
        IF pr_tab_erro.count > 0 THEN
          vr_cdcritic:= pr_tab_erro(pr_tab_erro.FIRST).cdcritic;
          vr_dscritic:= pr_tab_erro(pr_tab_erro.FIRST).dscritic;
        ELSE
          vr_cdcritic:= 0;
          vr_dscritic:= 'Erro ao executar IMUT0001.pc_verifica_periodo_imune. Cooperativa: '||pr_cdcooper||' Conta: '||pr_nrdconta;  
        END IF;  
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF; 
      --Selecionar Lancamentos da Poupanca
      IF vr_apl_prog = 0 THEN
        --Tela for ATENDA
        IF pr_nmdatela = 'ATENDA' THEN
          --Usuario TI
          IF rw_crapope.cddepart = 20  THEN  /** SUPER-USUARIO **/
            vr_listahis:= '150,151,152,154,155,158,496,863,925,1115';
          ELSE
            vr_listahis:= '150,151,158,496,863,925,1115';
          END IF; 
        ELSE
          --Usuario TI
          IF rw_crapope.cddepart = 20  THEN  /** SUPER-USUARIO **/
            vr_listahis:= '150,151,152,154,155,158,496,863,869,870,925,1115';
          ELSE
            vr_listahis:= '150,151,158,496,863,870,925,1115'; 
          END IF;        
        END IF;  

        -- RPP 
        OPEN cr_craplpp (pr_cdcooper => pr_cdcooper
                        ,pr_nrdconta => pr_nrdconta
                        ,pr_nrctrrpp => pr_nrctrrpp
                        ,pr_dtiniper => vr_dtiniper
                        ,pr_dtfimper => pr_dtfimper
                        ,pr_listahis => vr_listahis); 
      ELSE
        -- Aplicacao Programada -- Fix Me - Remover o que não precisa da lista de histórico
        OPEN cr_crapcpc (pr_cdprodut => rw_craprpp.cdprodut);
        FETCH cr_crapcpc INTO rw_crapcpc;
        CLOSE cr_crapcpc;  -- Se não existisse o produto, um erro já teria estourado antes. 

        IF pr_nmdatela = 'ATENDA' THEN
          --Usuario TI
          IF rw_crapope.cddepart = 20  THEN  /** SUPER-USUARIO **/
            vr_listahis:= '150,151,152,154,155,158,496,863,925,1115';
          ELSE
            vr_listahis:= '150,151,158,496,863,925,1115'; --CDHSNRAP,?,?,CDHSRGAP,CDHSIRAP,?,?
          END IF; 
        ELSE
          --Usuario TI
          IF rw_crapope.cddepart = 20  THEN  /** SUPER-USUARIO **/
            vr_listahis:= '150,151,152,154,155,158,496,863,869,870,925,1115';
          ELSE
            vr_listahis:= '150,151,158,496,863,870,925,1115'; 
          END IF;        
        END IF;
        vr_listahis:= vr_listahis || ','|| rw_crapcpc.cdhsnrap || ','|| rw_crapcpc.cdhsrgap || ','|| rw_crapcpc.cdhsirap;      
        vr_listahis:= vr_listahis || ',' || rw_crapcpc.cdhsprap || ',' || rw_crapcpc.cdhsrvap || ','|| rw_crapcpc.cdhsrdap;  
        vr_dtiniper := pr_dtiniper;
        OPEN cr_craplac (pr_cdcooper => pr_cdcooper
                        ,pr_nrdconta => pr_nrdconta
                        ,pr_nrctrrpp => pr_nrctrrpp
                        ,pr_dtiniper => vr_dtiniper
                        ,pr_dtfimper => pr_dtfimper
                        ,pr_listahis => vr_listahis); 
                        
      END IF;                                     
      LOOP
        IF cr_craplpp%ISOPEN THEN -- RPP
           FETCH cr_craplpp INTO rw_lancam;
           EXIT WHEN cr_craplpp%NOTFOUND;
           /** Faz parte da composicao do saldo anterior **/
           IF rw_lancam.dtrefere = vr_dtiniper 
              AND rw_lancam.cdhistor IN (150,151,152,154,155,863,869,870) THEN  
             --Pular Registro
             CONTINUE; 
           END IF;   
        ELSE -- APL. PROGR
            FETCH cr_craplac INTO rw_lancam;
            EXIT WHEN cr_craplac%NOTFOUND;
           /** Faz parte da composicao do saldo anterior **/
           IF rw_lancam.dtrefere = vr_dtiniper
              -- Fix me - Rever os históricos 
              AND rw_lancam.cdhistor IN (150,151,152,154,155,863,869,870, rw_crapcpc.cdhsnrap, rw_crapcpc.cdhsprap,2746, rw_crapcpc.cdhsrvap, rw_crapcpc.cdhsirap) THEN 
             --Pular Registro
             CONTINUE; 
           END IF;   
        END IF;
        --Selecionar Historicos de Tarifas
        OPEN cr_craphis (pr_cdcooper => pr_cdcooper
                        ,pr_cdhistor => rw_lancam.cdhistor);
        FETCH cr_craphis INTO rw_craphis;
        --Se nao encontrou
        IF cr_craphis%NOTFOUND THEN
          -- Fechar o cursor pois haverá raise
          CLOSE cr_craphis;
          -- Montar mensagem de critica
          vr_cdcritic:= 80;
          vr_dscritic:= NULL;
          --Levantar Excecao
          RAISE vr_exc_erro; 
        END IF;                  
        --Fechar Cursor
        CLOSE cr_craphis;
        --Credito
        IF rw_craphis.indebcre = 'C' THEN
          --Somar valor lancamento
          vr_vlstotal:= nvl(vr_vlstotal,0) + rw_lancam.vllanmto;
        ELSIF rw_craphis.indebcre = 'D' THEN  
          --Diminuir valor lancamento
          vr_vlstotal:= nvl(vr_vlstotal,0) - rw_lancam.vllanmto;            
        ELSE  
          -- Montar mensagem de critica
          vr_cdcritic:= 83;
          vr_dscritic:= NULL;
          --Levantar Excecao
          RAISE vr_exc_erro;   
        END IF;  
        --Se For o primeiro registro
        IF vr_flgfirst THEN
          --Marcar que nao é mais primeiro
          vr_flgfirst:= FALSE;
          --Buscar proximo indice na tabela
          vr_index:= vr_tab_extrato_rpp.COUNT + 1;
          --Inserir dados na tabela memoria
          vr_tab_extrato_rpp(vr_index).dtmvtolt:= vr_dtiniper;
          vr_tab_extrato_rpp(vr_index).cdhistor := 0;
          vr_tab_extrato_rpp(vr_index).dshistor:= 'SALDO ANTERIOR';
          vr_tab_extrato_rpp(vr_index).aghistor := 0; -- Acumula
          vr_tab_extrato_rpp(vr_index).nrdocmto:= 0;
          vr_tab_extrato_rpp(vr_index).indebcre:= NULL;
          vr_tab_extrato_rpp(vr_index).vllanmto:= 0;
          vr_tab_extrato_rpp(vr_index).vlsldppr:= vr_vlsldant;
          vr_tab_extrato_rpp(vr_index).txaplica:= 0;
          vr_tab_extrato_rpp(vr_index).txaplmes:= 0;
          vr_tab_extrato_rpp(vr_index).dsextrat:= 'SALDO ANTERIOR';
          --Se nao for InternetBank
          IF pr_nmdatela <> 'INTERNETBANK' THEN
            vr_tab_extrato_rpp(vr_index).vllanmto:= vr_vlsldant;
          END IF;          
        END IF;  --vr_flgfirst
        --Se for Imunidade tributária
        IF vr_flgimune THEN
          --Historico de Rendimento da Aplicacao
          IF rw_lancam.cdhistor = 151 AND
             rw_lancam.dtmvtolt >= vr_dtiniimu AND
             (vr_dtfimimu IS NULL OR (vr_dtfimimu IS NOT NULL AND rw_lancam.dtmvtolt <= vr_dtfimimu)) THEN
            --Descricao Extrato
            vr_dshistor:= rw_craphis.dshistor ||'*';
            vr_dsextrat:= rw_craphis.dsextrat ||'*';           
          ELSE
            --Descricao Extrato
            vr_dshistor:= rw_craphis.dshistor;
            vr_dsextrat:= rw_craphis.dsextrat;
          END IF;  --vr_flgimune             
        ELSE
          --Descricao Extrato
          vr_dshistor:= rw_craphis.dshistor;
          vr_dsextrat:= rw_craphis.dsextrat;
        END IF;   
        --Buscar Proximo indice para o Extrato RDCA
        vr_index:= vr_tab_extrato_rpp.COUNT + 1;
        --Criar Extrato RDCA (temporário)
        vr_tab_extrato_rpp(vr_index).dtmvtolt:= rw_lancam.dtmvtolt;
        vr_tab_extrato_rpp(vr_index).cdagenci:= rw_lancam.cdagenci;
        vr_tab_extrato_rpp(vr_index).cdbccxlt:= rw_lancam.cdbccxlt;
        vr_tab_extrato_rpp(vr_index).nrdolote:= rw_lancam.nrdolote;
        vr_tab_extrato_rpp(vr_index).cdhistor:= rw_lancam.cdhistor;
        IF rw_craphis.cdhistor IN (rw_lancam.cdhsprap,rw_lancam.cdhsrgap) THEN
           vr_tab_extrato_rpp(vr_index).aghistor := 1; -- Acumula
        ELSE
           vr_tab_extrato_rpp(vr_index).aghistor := 0; -- Nao Acumula
        END IF;
        vr_tab_extrato_rpp(vr_index).dshistor:= vr_dshistor;
        vr_tab_extrato_rpp(vr_index).nrdocmto:= rw_lancam.nrdocmto;
        vr_tab_extrato_rpp(vr_index).indebcre:= rw_craphis.indebcre;
        vr_tab_extrato_rpp(vr_index).vllanmto:= rw_lancam.vllanmto;
        vr_tab_extrato_rpp(vr_index).vlsldppr:= vr_vlstotal;
        vr_tab_extrato_rpp(vr_index).dsextrat:= vr_dsextrat;
        --Taxa aplicada no Mes
        IF rw_lancam.txaplmes > 0  THEN
          vr_tab_extrato_rpp(vr_index).txaplmes:= rw_lancam.txaplmes;
        ELSE 
          vr_tab_extrato_rpp(vr_index).txaplmes:= 0;
        END IF;  
        --Taxa aplicacao
        IF rw_lancam.txaplica > 0  THEN
          vr_tab_extrato_rpp(vr_index).txaplica:= rw_lancam.txaplica;
        ELSE 
          vr_tab_extrato_rpp(vr_index).txaplica:= 0;
        END IF; 
      END LOOP; --rw_lancam
      -- Fecha o cursor correspondente
      IF cr_craplpp%ISOPEN THEN -- RPP
         CLOSE cr_craplpp;
      ELSE -- APL. PROGR
         CLOSE cr_craplac;
      END IF;
      -- Gerar extrato final agrupando RESGATES e PROVISOES
      IF vr_tab_extrato_rpp.COUNT >0 THEN
        vr_index:=0;
        FOR vr_index_temp in vr_tab_extrato_rpp.First .. vr_tab_extrato_rpp.Last LOOP
            IF vr_tab_extrato_rpp(vr_index_temp).aghistor = 1 THEN
               vr_index := vr_index;
            END IF    ;
            IF vr_tab_extrato_rpp(vr_index_temp).aghistor = 1  
            AND (vr_tab_extrato_rpp(vr_index_temp).dtmvtolt = pr_tab_extrato_rpp(vr_index).dtmvtolt)
            AND (vr_tab_extrato_rpp(vr_index_temp).cdagenci = pr_tab_extrato_rpp(vr_index).cdagenci)
            AND (vr_tab_extrato_rpp(vr_index_temp).cdhistor = pr_tab_extrato_rpp(vr_index).cdhistor) THEN -- Acumular
                pr_tab_extrato_rpp(vr_index).nrdocmto := null;
                pr_tab_extrato_rpp(vr_index).vllanmto := pr_tab_extrato_rpp(vr_index).vllanmto + vr_tab_extrato_rpp(vr_index_temp).vllanmto;
                IF vr_tab_extrato_rpp(vr_index_temp).indebcre = 'C' THEN
                pr_tab_extrato_rpp(vr_index).vlsldppr := pr_tab_extrato_rpp(vr_index).vlsldppr + vr_tab_extrato_rpp(vr_index_temp).vllanmto;
            ELSE
                   pr_tab_extrato_rpp(vr_index).vlsldppr := pr_tab_extrato_rpp(vr_index).vlsldppr - vr_tab_extrato_rpp(vr_index_temp).vllanmto;
                END IF;
            ELSE
                vr_index:= pr_tab_extrato_rpp.COUNT + 1;
                pr_tab_extrato_rpp(vr_index).dtmvtolt:= vr_tab_extrato_rpp(vr_index_temp).dtmvtolt;
                pr_tab_extrato_rpp(vr_index).cdagenci:= vr_tab_extrato_rpp(vr_index_temp).cdagenci;
                pr_tab_extrato_rpp(vr_index).cdbccxlt:= vr_tab_extrato_rpp(vr_index_temp).cdbccxlt;
                pr_tab_extrato_rpp(vr_index).nrdolote:= vr_tab_extrato_rpp(vr_index_temp).nrdolote;  
                pr_tab_extrato_rpp(vr_index).cdhistor:= vr_tab_extrato_rpp(vr_index_temp).cdhistor;
                pr_tab_extrato_rpp(vr_index).dshistor:= vr_tab_extrato_rpp(vr_index_temp).dshistor;
                pr_tab_extrato_rpp(vr_index).nrdocmto:= vr_tab_extrato_rpp(vr_index_temp).nrdocmto;
                pr_tab_extrato_rpp(vr_index).indebcre:= vr_tab_extrato_rpp(vr_index_temp).indebcre;
                pr_tab_extrato_rpp(vr_index).vllanmto:= vr_tab_extrato_rpp(vr_index_temp).vllanmto;
                pr_tab_extrato_rpp(vr_index).vlsldppr:= vr_tab_extrato_rpp(vr_index_temp).vlsldppr;
                pr_tab_extrato_rpp(vr_index).dsextrat:= vr_tab_extrato_rpp(vr_index_temp).dsextrat;
             END IF;
        END LOOP;
      ELSE 
        pr_tab_extrato_rpp := vr_tab_extrato_rpp;
      END IF;
      -- Se foi solicitado geração de LOG
      IF pr_flgerlog THEN
        -- Chamar geração de LOG
        gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                            ,pr_cdoperad => pr_cdoperad
                            ,pr_dscritic => NULL
                            ,pr_dsorigem => vr_dsorigem
                            ,pr_dstransa => vr_dstransa
                            ,pr_dttransa => TRUNC(SYSDATE)
                            ,pr_flgtrans => 1 --> TRUE
                            ,pr_hrtransa => gene0002.fn_busca_time
                            ,pr_idseqttl => pr_idseqttl
                            ,pr_nmdatela => pr_nmdatela
                            ,pr_nrdconta => pr_nrdconta
                            ,pr_nrdrowid => vr_nrdrowid);
      END IF;         
      --Retorno OK
      pr_des_reto:= 'OK';
    EXCEPTION
      WHEN vr_exc_erro THEN
        -- Retorno não OK
        pr_des_reto := 'NOK';
        -- Fecha o cursor que possa estar aberto
        IF cr_craplpp%ISOPEN THEN -- RPP
           CLOSE cr_craplpp;
        ELSE -- APL. PROGR
           CLOSE cr_craplac;
        END IF;
        -- Chamar rotina de gravação de erro
        gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                             ,pr_cdagenci => pr_cdagenci
                             ,pr_nrdcaixa => pr_nrdcaixa
                             ,pr_nrsequen => 1 --> Fixo
                             ,pr_cdcritic => vr_cdcritic --> Critica 0
                             ,pr_dscritic => vr_dscritic
                             ,pr_tab_erro => pr_tab_erro);
        -- Se foi solicitado geração de LOG
        IF pr_flgerlog THEN
          -- Chamar geração de LOG
          gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                              ,pr_cdoperad => pr_cdoperad
                              ,pr_dscritic => vr_dscritic
                              ,pr_dsorigem => vr_dsorigem
                              ,pr_dstransa => vr_dstransa
                              ,pr_dttransa => TRUNC(SYSDATE)
                              ,pr_flgtrans => 0 --> FALSE
                              ,pr_hrtransa => gene0002.fn_busca_time
                              ,pr_idseqttl => pr_idseqttl
                              ,pr_nmdatela => pr_nmdatela
                              ,pr_nrdconta => pr_nrdconta
                              ,pr_nrdrowid => vr_nrdrowid);
        END IF;  
      WHEN OTHERS THEN
        -- Retorno não OK
        pr_des_reto := 'NOK';
        -- Fecha o cursor que possa estar aberto
        IF cr_craplpp%ISOPEN THEN -- RPP
           CLOSE cr_craplpp;
        ELSE -- APL. PROGR
           CLOSE cr_craplac;
        END IF;
        -- Chamar rotina de gravação de erro
        vr_dscritic := 'Erro na pc_consulta_extrato_poup --> '|| sqlerrm;
        gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                             ,pr_cdagenci => pr_cdagenci
                             ,pr_nrdcaixa => pr_nrdcaixa
                             ,pr_nrsequen => 1 --> Fixo
                             ,pr_cdcritic => 0 --> Critica 0
                             ,pr_dscritic => vr_dscritic
                             ,pr_tab_erro => pr_tab_erro);
        -- Se foi solicitado geração de LOG
        IF pr_flgerlog THEN
          -- Chamar geração de LOG
          gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                              ,pr_cdoperad => pr_cdoperad
                              ,pr_dscritic => vr_dscritic
                              ,pr_dsorigem => vr_dsorigem
                              ,pr_dstransa => vr_dstransa
                              ,pr_dttransa => TRUNC(SYSDATE)
                              ,pr_flgtrans => 0 --> FALSE
                              ,pr_hrtransa => gene0002.fn_busca_time
                              ,pr_idseqttl => pr_idseqttl
                              ,pr_nmdatela => pr_nmdatela
                              ,pr_nrdconta => pr_nrdconta
                              ,pr_nrdrowid => vr_nrdrowid);
        END IF;    
      END;
    END pc_consulta_extrato_ap_tit; 

    --Subrotina para listar extrato da conta investimento
    PROCEDURE pc_extrato_investimento (pr_cdcooper    IN crapcop.cdcooper%TYPE       --Codigo Cooperativa
                                      ,pr_cdagenci    IN crapass.cdagenci%TYPE       --Codigo Agencia
                                      ,pr_nrdcaixa    IN INTEGER                     --Numero do Caixa
                                      ,pr_cdoperad    IN VARCHAR2                    --Codigo Operador
                                      ,pr_nmdatela    IN VARCHAR2                    --Nome da Tela
                                      ,pr_idorigem    IN INTEGER                     --Origem dos Dados
                                      ,pr_nrdconta    IN crapass.nrdconta%TYPE       --Numero da Conta do Associado
                                      ,pr_idseqttl    IN INTEGER                     --Sequencial do Titular
                                      ,pr_dtiniper    IN DATE                        --Periodo inicial
                                      ,pr_dtfimper    IN DATE                        --Periodo Final
                                      ,pr_flgerlog    IN BOOLEAN                     --Imprimir log
                                      ,pr_tab_craptab IN apli0001.typ_tab_ctablq     --Tipo de tabela de Conta Bloqueada
                                      ,pr_vlsldant    OUT NUMBER                     --Valor Saldo
                                      ,pr_tab_extrato_inv OUT typ_tab_extrato_inv    --Tabela Extrato Investimento
                                      ,pr_des_reto     OUT VARCHAR2                  --Retorno OK ou NOK
                                      ,pr_tab_erro     OUT gene0001.typ_tab_erro) IS --Tabela de Erros
  BEGIN
  ---------------------------------------------------------------------------------------------------------------
  --
  --  Programa : pc_extrato_investimento            Antigo: procedures/b1wgen0020.p/extrato_investimento
  --  Sistema  : 
  --  Sigla    : CRED
  --  Autor    : Alisson C. Berrido - Amcom
  --  Data     : Julho/2014                           Ultima atualizacao: 04/07/2016
  --
  -- Dados referentes ao programa:
  --
  -- Frequencia: -----
  -- Objetivo   : Procedure para listar extrato da conta investimento
  --
  -- Alterações : 15/07/2014 - Conversão Progress -> Oracle (Alisson - AMcom)
  --              
  --              04/07/2016 - Ajuste para melhora de performance
  --                          (Adriano - SD 480339).
  --
  --
  ---------------------------------------------------------------------------------------------------------------
  DECLARE
      -- Tipo para armazenar as situações das aplicações e evitar muitas leituras na craptab
      TYPE typ_tab_blqrgt IS TABLE OF INTEGER INDEX BY VARCHAR2(16); --> Chave composta [Conta(10) + Aplica(6)]
      -- Vetor para armazenar os dados de detalhe
      vr_tab_blqrgt typ_tab_blqrgt;
      --Selecionar Lancamentos
      CURSOR cr_craplci (pr_cdcooper IN crapcop.cdcooper%TYPE
                        ,pr_nrdconta IN crapcop.nrdconta%TYPE
                        ,pr_dtiniper IN craplci.dtmvtolt%TYPE) IS
        SELECT craphis.indebcre
              ,craplci.vllanmto
              ,craplci.cdhistor
        FROM  craplci craplci
             ,craphis craphis
        WHERE craplci.cdcooper = pr_cdcooper
        AND   craplci.nrdconta = pr_nrdconta             
        AND   craplci.dtmvtolt < pr_dtiniper
        AND   craphis.cdcooper = craplci.cdcooper
        AND   craphis.cdhistor = craplci.cdhistor;               
                                    
      --Selecionar Lancamentos Conta investimento
      CURSOR cr_craplci2 (pr_cdcooper IN crapcop.cdcooper%TYPE
                         ,pr_nrdconta IN crapcop.nrdconta%TYPE
                         ,pr_dtiniper IN craplci.dtmvtolt%TYPE
                         ,pr_dtfimper IN craplci.dtmvtolt%TYPE) IS
        SELECT craphis.indebcre
              ,craphis.dshistor
              ,craphis.dsextrat
              ,craplci.vllanmto
              ,craplci.dtmvtolt
              ,craplci.nrdconta 
              ,craplci.cdhistor
              ,craplci.nrdocmto
        FROM  craplci craplci
             ,craphis craphis
        WHERE craplci.cdcooper = pr_cdcooper
        AND   craplci.nrdconta = pr_nrdconta             
        AND   craplci.dtmvtolt BETWEEN pr_dtiniper AND pr_dtfimper
        AND   craphis.cdcooper = craplci.cdcooper
        AND   craphis.cdhistor = craplci.cdhistor
        ORDER BY craplci.dtmvtolt,craplci.nrdocmto,craphis.indebcre;               
      
      --Selecionar Lancamentos da Aplicacao
      CURSOR cr_craplap (pr_cdcooper IN craplap.cdcooper%type
                        ,pr_dtmvtolt IN craplap.dtmvtolt%type
                        ,pr_nrdconta IN craplap.nrdconta%type
                        ,pr_vllanmto IN craplap.vllanmto%type) IS
        SELECT craplap.nrdconta
              ,craplap.nraplica
        FROM craplap craplap
            ,craphis craphis 
        WHERE craplap.cdcooper = pr_cdcooper     
        AND   craplap.dtmvtolt = pr_dtmvtolt 
        AND   craplap.nrdconta = pr_nrdconta 
        AND   craplap.vllanmto = pr_vllanmto
        AND   craphis.cdcooper = craplap.cdcooper
        AND   craphis.cdhistor = craplap.cdhistor
        AND   craphis.indebcre = 'D';    
				
			CURSOR cr_craplac (pr_cdcooper IN craplac.cdcooper%TYPE
			                  ,pr_dtmvtolt IN craplac.dtmvtolt%TYPE
												,pr_nrdconta IN craplac.nrdconta%TYPE
												,pr_vllanmto IN craplac.vllanmto%TYPE) IS
			  SELECT 1
				FROM craplac lac,
				     craphis his,
						 craprac rac
				WHERE lac.cdcooper = pr_cdcooper
				AND   lac.dtmvtolt = pr_dtmvtolt
				AND   lac.cdagenci = 1
				AND   lac.cdbccxlt = 100
				AND   lac.nrdolote = 8504
				AND   lac.nrdconta = pr_nrdconta
				AND   lac.vllanmto = pr_vllanmto
				AND   his.cdcooper = lac.cdcooper
				AND   his.cdhistor = lac.cdhistor
				AND   his.indebcre = 'D'
				AND   rac.cdcooper = lac.cdcooper
				AND   rac.nrdconta = lac.nrdconta
				AND   rac.nraplica = lac.nraplica
				AND   rac.idblqrgt > 0;
			rw_craplac cr_craplac%ROWTYPE;
												
      --Variaveis Locais
      vr_vlsldtot NUMBER:= 0;
			vr_flgavlap BOOLEAN;
      vr_cdbloque VARCHAR2(1000);
      vr_dstransa VARCHAR2(100);
      vr_dsorigem VARCHAR2(100);
      vr_nrdrowid ROWID;
      --Variaveis de indices
      vr_index PLS_INTEGER;
      --Variaveis de Erro
      vr_cdcritic INTEGER;
      vr_dscritic VARCHAR2(4000);
      --Variaveis de Excecoes
      vr_exc_erro EXCEPTION;
    BEGIN
      --Limpar tabelas memoria
      pr_tab_erro.DELETE;
      pr_tab_extrato_inv.DELETE;
      
      --Inicializar transacao
      vr_dsorigem:= gene0001.vr_vet_des_origens(pr_idorigem);
      vr_dstransa:= 'Listar extrato da conta investimento';
      
      /** Calcula o valor do saldo ate o periodo solicitado **/ 
      FOR rw_craplci IN cr_craplci (pr_cdcooper => pr_cdcooper
                                   ,pr_nrdconta => pr_nrdconta
                                   ,pr_dtiniper => pr_dtiniper) LOOP
        --Indicador debito/credito                
        CASE rw_craplci.indebcre
          WHEN 'C' THEN  --Credito   
            vr_vlsldtot:= nvl(vr_vlsldtot,0) + rw_craplci.vllanmto;
          WHEN 'D' THEN  --Debito
            vr_vlsldtot:= nvl(vr_vlsldtot,0) - rw_craplci.vllanmto;
          ELSE NULL;
        END CASE;     
      END LOOP; --rw_craplci 
      --Retornar o Saldo
      pr_vlsldant:= vr_vlsldtot;
      /** Leitura dos lancamentos **/
      FOR rw_craplci IN cr_craplci2 (pr_cdcooper => pr_cdcooper
                                    ,pr_nrdconta => pr_nrdconta
                                    ,pr_dtiniper => pr_dtiniper
                                    ,pr_dtfimper => pr_dtfimper) LOOP
        --Limpar Bloqueio
        vr_cdbloque:= NULL;
				vr_flgavlap := FALSE;
        --Buscar Lancamentos Aplicacao
        FOR rw_craplap IN cr_craplap (pr_cdcooper => pr_cdcooper
                                     ,pr_dtmvtolt => rw_craplci.dtmvtolt
                                     ,pr_nrdconta => rw_craplci.nrdconta
                                     ,pr_vllanmto => rw_craplci.vllanmto) LOOP
          -- Verificar se a aplicação possui bloqueio de resgate
          IF pr_tab_craptab.EXISTS(LPAD(rw_craplap.nrdconta,10,'0')||LPAD(rw_craplap.nraplica,6,'0')) THEN
            -- Situação bloqueada
            vr_cdbloque:= 'B';   
						vr_flgavlap:= TRUE;                                  
          END IF;  
        END LOOP; --rw_craplap
          
				-- Se não encontrou nenhum lancamento bloqueado na lap        
				IF NOT vr_flgavlap THEN
					-- Procura lancamento bloqueado na lac
				  OPEN cr_craplac(pr_cdcooper => pr_cdcooper
					               ,pr_dtmvtolt => rw_craplci.dtmvtolt
												 ,pr_nrdconta => rw_craplci.nrdconta
												 ,pr_vllanmto => rw_craplci.vllanmto);
					FETCH cr_craplac INTO rw_craplac; 
					-- Se encontrou, alimenta variavel como bloqueado
					IF cr_craplac%FOUND THEN
						vr_cdbloque:= 'B';   
					END IF;
					CLOSE cr_craplac;
				
				END IF;
        --Indicador debito/credito                
        CASE rw_craplci.indebcre
          WHEN 'C' THEN  --Credito   
            vr_vlsldtot:= nvl(vr_vlsldtot,0) + rw_craplci.vllanmto;
          WHEN 'D' THEN  --Debito
            vr_vlsldtot:= nvl(vr_vlsldtot,0) - rw_craplci.vllanmto;
          ELSE NULL;
        END CASE;
        --Buscar Proximo registro na tabela
        vr_index:= pr_tab_extrato_inv.COUNT + 1; 
        /** Criacao da tabela **/
        pr_tab_extrato_inv(vr_index).dtmvtolt:= rw_craplci.dtmvtolt;
        --Nome da tela
        IF pr_nmdatela <> 'IMPRES' THEN
          pr_tab_extrato_inv(vr_index).dshistor:= to_char(rw_craplci.cdhistor,'fm0000')|| '-'||rw_craplci.dshistor;
        ELSE
          --Descricao do Historico
          pr_tab_extrato_inv(vr_index).dshistor:= rw_craplci.dshistor;
        END IF;                                             
        pr_tab_extrato_inv(vr_index).nrdocmto:= rw_craplci.nrdocmto;
        pr_tab_extrato_inv(vr_index).indebcre:= rw_craplci.indebcre;
        pr_tab_extrato_inv(vr_index).vllanmto:= rw_craplci.vllanmto;
        pr_tab_extrato_inv(vr_index).vlsldtot:= vr_vlsldtot;
        pr_tab_extrato_inv(vr_index).cdbloque:= vr_cdbloque;
        pr_tab_extrato_inv(vr_index).dsextrat:= rw_craplci.dsextrat;
      END LOOP; --rw_craplci  
      -- Se foi solicitado geração de LOG
      IF pr_flgerlog THEN
        -- Chamar geração de LOG
        gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                            ,pr_cdoperad => pr_cdoperad
                            ,pr_dscritic => NULL
                            ,pr_dsorigem => vr_dsorigem
                            ,pr_dstransa => vr_dstransa
                            ,pr_dttransa => TRUNC(SYSDATE)
                            ,pr_flgtrans => 1 --> TRUE
                            ,pr_hrtransa => gene0002.fn_busca_time
                            ,pr_idseqttl => pr_idseqttl
                            ,pr_nmdatela => pr_nmdatela
                            ,pr_nrdconta => pr_nrdconta
                            ,pr_nrdrowid => vr_nrdrowid);
      END IF;         
      --Retorno OK
      pr_des_reto:= 'OK';  
    EXCEPTION
      WHEN vr_exc_erro THEN
        -- Retorno não OK
        pr_des_reto := 'NOK';
        -- Chamar rotina de gravação de erro
        gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                             ,pr_cdagenci => pr_cdagenci
                             ,pr_nrdcaixa => pr_nrdcaixa
                             ,pr_nrsequen => 1 --> Fixo
                             ,pr_cdcritic => vr_cdcritic --> Critica 0
                             ,pr_dscritic => vr_dscritic
                             ,pr_tab_erro => pr_tab_erro);
        -- Se foi solicitado geração de LOG
        IF pr_flgerlog THEN
          -- Chamar geração de LOG
          gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                              ,pr_cdoperad => pr_cdoperad
                              ,pr_dscritic => vr_dscritic
                              ,pr_dsorigem => vr_dsorigem
                              ,pr_dstransa => vr_dstransa
                              ,pr_dttransa => TRUNC(SYSDATE)
                              ,pr_flgtrans => 0 --> FALSE
                              ,pr_hrtransa => gene0002.fn_busca_time
                              ,pr_idseqttl => pr_idseqttl
                              ,pr_nmdatela => pr_nmdatela
                              ,pr_nrdconta => pr_nrdconta
                              ,pr_nrdrowid => vr_nrdrowid);
        END IF;  
      WHEN OTHERS THEN
        
        -- Retorno não OK
        pr_des_reto := 'NOK';
        -- Chamar rotina de gravação de erro
        vr_dscritic := 'Erro na pc_extrato_investimento --> '|| sqlerrm;
        gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                             ,pr_cdagenci => pr_cdagenci
                             ,pr_nrdcaixa => pr_nrdcaixa
                             ,pr_nrsequen => 1 --> Fixo
                             ,pr_cdcritic => 0 --> Critica 0
                             ,pr_dscritic => vr_dscritic
                             ,pr_tab_erro => pr_tab_erro);
        -- Se foi solicitado geração de LOG
        IF pr_flgerlog THEN
          -- Chamar geração de LOG
          gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                              ,pr_cdoperad => pr_cdoperad
                              ,pr_dscritic => vr_dscritic
                              ,pr_dsorigem => vr_dsorigem
                              ,pr_dstransa => vr_dstransa
                              ,pr_dttransa => TRUNC(SYSDATE)
                              ,pr_flgtrans => 0 --> FALSE
                              ,pr_hrtransa => gene0002.fn_busca_time
                              ,pr_idseqttl => pr_idseqttl
                              ,pr_nmdatela => pr_nmdatela
                              ,pr_nrdconta => pr_nrdconta
                              ,pr_nrdrowid => vr_nrdrowid);
        END IF;    
      END;
    END pc_extrato_investimento; 
    
    --Subrotina para obter extrato do emprestimo
    PROCEDURE pc_gera_extrato_tarifas (pr_cdcooper    IN crapcop.cdcooper%TYPE       --Codigo Cooperativa
                                      ,pr_cdagenci    IN crapass.cdagenci%TYPE       --Codigo Agencia
                                      ,pr_nrdcaixa    IN INTEGER                     --Numero do Caixa
                                      ,pr_cdoperad    IN VARCHAR2                    --Codigo Operador
                                      ,pr_nrdconta    IN crapass.nrdconta%TYPE       --Numero da Conta do Associado
                                      ,pr_anorefer    IN INTEGER                     --Ano Referencia
                                      ,pr_idorigem    IN INTEGER                     --Origem dos Dados
                                      ,pr_idseqttl    IN INTEGER                     --Sequencial do Titular
                                      ,pr_nmdatela    IN VARCHAR2                    --Nome da Tela
                                      ,pr_flgerlog    IN BOOLEAN                     --Imprimir log
                                      ,pr_dados_cooperado OUT typ_tab_dados_cooperado  --Tipo de tabela com dados do cooperado
                                      ,pr_tab_tarifas  OUT typ_tab_tarifas            --Tabela com as tarifas
                                      ,pr_tab_totdomes OUT typ_tab_number             --Tabela com totais
                                      ,pr_des_reto     OUT VARCHAR2                   --Retorno OK ou NOK
                                      ,pr_tab_erro     OUT gene0001.typ_tab_erro) IS  --Tabela de Erros
  BEGIN
  ---------------------------------------------------------------------------------------------------------------
  --
  --  Programa : pc_gera_extrato_tarifas            Antigo: procedures/b1wgen0001.p/gera_extrato_tarifas
  --  Sistema  : 
  --  Sigla    : CRED
  --  Autor    : Alisson C. Berrido - Amcom
  --  Data     : Julho/2014                           Ultima atualizacao: 14/07/2014
  --
  -- Dados referentes ao programa:
  --
  -- Frequencia: -----
  -- Objetivo   : Procedure para obter extrato do emprestimo
  --
  -- Alterações : 14/07/2014 - Conversão Progress -> Oracle (Alisson - AMcom)
  --              
  ---------------------------------------------------------------------------------------------------------------
  DECLARE
      -- Busca dos dados da cooperativa
      CURSOR cr_crapcop (pr_cdcooper IN crapcop.cdcooper%TYPE) IS
        SELECT crapcop.nmrescop
              ,crapcop.nmextcop
        FROM crapcop crapcop
        WHERE crapcop.cdcooper = pr_cdcooper;
      rw_crapcop cr_crapcop%ROWTYPE;  
      -- Busca dos dados do associado
      CURSOR cr_crapass(pr_cdcooper IN crapcop.cdcooper%TYPE
                       ,pr_nrdconta IN crapass.nrdconta%TYPE) IS
        SELECT crapass.nrdconta
              ,crapass.nmprimtl
              ,crapass.vllimcre
              ,crapass.nrcpfcgc
              ,crapass.inpessoa
              ,crapass.cdcooper
              ,crapass.cdagenci
        FROM crapass crapass
        WHERE crapass.cdcooper = pr_cdcooper
        AND   crapass.nrdconta = pr_nrdconta;
      rw_crapass cr_crapass%ROWTYPE;
      --Selecionar Lancamentos
      CURSOR cr_craplcm (pr_cdcooper IN crapcop.cdcooper%TYPE
                        ,pr_nrdconta IN crapcop.nrdconta%TYPE
                        ,pr_anorefer IN NUMBER) IS
      SELECT craphis.cdhistor
            ,lpad(DENSE_RANK() OVER(ORDER BY craphis.indebcre DESC, dsexthst),4,0) idordhst -- ordenação (primeiro tarifas, depois extornos)
            ,craphis.dsexthst
            ,craphis.indebcre
            ,EXTRACT(MONTH FROM craplcm.dtmvtolt) mesref
            ,SUM(craplcm.vllanmto * DECODE(craphis.indebcre, 'C', -1, 'D', 1)) vllanmto -- O valor de D/C está invertido pois o relatório é de tarifas pagas, ou seja soma débitos e subtrai créditos
        FROM craplcm craplcm
            ,craphis craphis
       WHERE craplcm.cdcooper = pr_cdcooper
         AND craplcm.nrdconta = pr_nrdconta
         AND TRUNC(craplcm.dtmvtolt, 'YY') = to_date('0101' || pr_anorefer, 'DDMMYYYY')
         AND craphis.cdcooper = craplcm.cdcooper
         AND craphis.cdhistor = craplcm.cdhistor
         AND craphis.cdhistor IN (SELECT crapfvl.cdhistor
                                    FROM crapfvl
                                  UNION
                                  SELECT crapfvl.cdhisest
                                    FROM crapfvl)
       GROUP BY craphis.cdhistor
               ,craphis.dsexthst
               ,craphis.indebcre
               ,EXTRACT(MONTH FROM craplcm.dtmvtolt)
       ORDER BY idordhst
               ,mesref;
                                    
      --Variaveis Locais
      vr_listahis VARCHAR2(1000);
      vr_dstransa VARCHAR2(100);
      vr_dsorigem VARCHAR2(100);
      vr_nrdrowid ROWID;
      --Variaveis de indices
      pr_tab_tarifas_index VARCHAR(100);
      vr_index PLS_INTEGER;
      --Variaveis de Erro
      vr_cdcritic INTEGER;
      vr_dscritic VARCHAR2(4000);
      --Variaveis de Excecoes
      vr_exc_erro EXCEPTION;
    BEGIN
      --Limpar tabelas memoria
      pr_tab_erro.DELETE;
      pr_tab_totdomes.DELETE;
      pr_tab_tarifas.DELETE;
      --Inicializar transacao
      vr_dsorigem:= gene0001.vr_vet_des_origens(pr_idorigem);
      vr_dstransa:= 'Gerar extrato de tarifas';
      -- Verifica se a cooperativa esta cadastrada
      OPEN cr_crapcop (pr_cdcooper => pr_cdcooper);
      FETCH cr_crapcop INTO rw_crapcop;
      -- Se não encontrar
      IF cr_crapcop%NOTFOUND THEN
        -- Fechar o cursor pois haverá raise
        CLOSE cr_crapcop;
        -- Montar mensagem de critica
        vr_cdcritic:= 651;
        vr_dscritic:= NULL;
        --Levantar Excecao
        RAISE vr_exc_erro; 
      ELSE
        -- Apenas fechar o cursor
        CLOSE cr_crapcop;
      END IF;
      --Selecionar associado
      OPEN cr_crapass (pr_cdcooper => pr_cdcooper
                      ,pr_nrdconta => pr_nrdconta);
      --Posicionar no proximo registro
      FETCH cr_crapass INTO rw_crapass;
      --Se nao encontrou
      IF cr_crapass%NOTFOUND THEN
        --Fechar Cursor
        CLOSE cr_crapass;
        --mensagem erro
        vr_cdcritic:= 9;
        vr_dscritic:= NULL;
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;  
      --Fechar Cursor
      CLOSE cr_crapass;
      --Incrementar indice
      vr_index:= pr_dados_cooperado.count + 1;
      --Popular tabela Cooperado
      pr_dados_cooperado(vr_index).nmextcop:= rw_crapcop.nmextcop;
      pr_dados_cooperado(vr_index).nrdconta:= rw_crapass.nrdconta;
      pr_dados_cooperado(vr_index).inpessoa:= rw_crapass.inpessoa;
      pr_dados_cooperado(vr_index).nmprimtl:= rw_crapass.nmprimtl;
      pr_dados_cooperado(vr_index).nrcpfcgc:= rw_crapass.nrcpfcgc;
      pr_dados_cooperado(vr_index).cdagenci:= rw_crapass.cdagenci;
      --Zerar totais do mes
      FOR idx IN 1..13 LOOP
        pr_tab_totdomes(idx):= 0;
      END LOOP; 
      --Selecionar lancamentos 
      FOR rw_craplcm IN cr_craplcm (pr_cdcooper => pr_cdcooper
                                   ,pr_nrdconta => pr_nrdconta
                                   ,pr_anorefer => pr_anorefer) LOOP  

        --Índice para a temptable, para ordenar por tarifas por primeiro e extornos por último
        pr_tab_tarifas_index := rw_craplcm.idordhst || rw_craplcm.dsexthst;

        --Verificar descricao do historico
        IF NOT pr_tab_tarifas.EXISTS(pr_tab_tarifas_index) THEN
          --Criar tarifa e zerar valores do mes
          pr_tab_tarifas(pr_tab_tarifas_index).cdhistor := rw_craplcm.cdhistor;
          pr_tab_tarifas(pr_tab_tarifas_index).dsexthst := rw_craplcm.dsexthst;
          FOR idx IN 1..13 LOOP
            pr_tab_tarifas(pr_tab_tarifas_index).vlrdomes(idx):= 0;
          END LOOP;
        END IF;
        
        --Popula o valor do mês atual para o histórico
        pr_tab_tarifas(pr_tab_tarifas_index).vlrdomes(rw_craplcm.mesref) := rw_craplcm.vllanmto;
        
        --Acumula o total do mês atual
        pr_tab_totdomes(rw_craplcm.mesref):= pr_tab_totdomes(rw_craplcm.mesref) + rw_craplcm.vllanmto;
        
        --Acumula na posicao 13 o somatorio dos 12 meses
        pr_tab_tarifas(pr_tab_tarifas_index).vlrdomes(13):= pr_tab_tarifas(pr_tab_tarifas_index).vlrdomes(13) + 
                                                            rw_craplcm.vllanmto;
        --Acumula total geral
        pr_tab_totdomes(13) := pr_tab_totdomes(13) + rw_craplcm.vllanmto;
        
      END LOOP; --rw_craplcm 
      
      -- Se foi solicitado geração de LOG
      IF pr_flgerlog THEN
        -- Chamar geração de LOG
        gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                            ,pr_cdoperad => pr_cdoperad
                            ,pr_dscritic => NULL
                            ,pr_dsorigem => vr_dsorigem
                            ,pr_dstransa => vr_dstransa
                            ,pr_dttransa => TRUNC(SYSDATE)
                            ,pr_flgtrans => 1 --> TRUE
                            ,pr_hrtransa => gene0002.fn_busca_time
                            ,pr_idseqttl => pr_idseqttl
                            ,pr_nmdatela => pr_nmdatela
                            ,pr_nrdconta => pr_nrdconta
                            ,pr_nrdrowid => vr_nrdrowid);
      END IF;         
      --Retorno OK
      pr_des_reto:= 'OK';  
    EXCEPTION
      WHEN vr_exc_erro THEN
        -- Retorno não OK
        pr_des_reto := 'NOK';
        -- Chamar rotina de gravação de erro
        gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                             ,pr_cdagenci => pr_cdagenci
                             ,pr_nrdcaixa => pr_nrdcaixa
                             ,pr_nrsequen => 1 --> Fixo
                             ,pr_cdcritic => vr_cdcritic --> Critica 0
                             ,pr_dscritic => vr_dscritic
                             ,pr_tab_erro => pr_tab_erro);
        -- Se foi solicitado geração de LOG
        IF pr_flgerlog THEN
          -- Chamar geração de LOG
          gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                              ,pr_cdoperad => pr_cdoperad
                              ,pr_dscritic => vr_dscritic
                              ,pr_dsorigem => vr_dsorigem
                              ,pr_dstransa => vr_dstransa
                              ,pr_dttransa => TRUNC(SYSDATE)
                              ,pr_flgtrans => 0 --> FALSE
                              ,pr_hrtransa => gene0002.fn_busca_time
                              ,pr_idseqttl => pr_idseqttl
                              ,pr_nmdatela => pr_nmdatela
                              ,pr_nrdconta => pr_nrdconta
                              ,pr_nrdrowid => vr_nrdrowid);
        END IF;  
      WHEN OTHERS THEN
      
        -- Retorno não OK
        pr_des_reto := 'NOK';
        -- Chamar rotina de gravação de erro
        vr_dscritic := 'Erro na pc_gera_extrato_tarifas --> '|| sqlerrm;
        gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                             ,pr_cdagenci => pr_cdagenci
                             ,pr_nrdcaixa => pr_nrdcaixa
                             ,pr_nrsequen => 1 --> Fixo
                             ,pr_cdcritic => 0 --> Critica 0
                             ,pr_dscritic => vr_dscritic
                             ,pr_tab_erro => pr_tab_erro);
        -- Se foi solicitado geração de LOG
        IF pr_flgerlog THEN
          -- Chamar geração de LOG
          gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                              ,pr_cdoperad => pr_cdoperad
                              ,pr_dscritic => vr_dscritic
                              ,pr_dsorigem => vr_dsorigem
                              ,pr_dstransa => vr_dstransa
                              ,pr_dttransa => TRUNC(SYSDATE)
                              ,pr_flgtrans => 0 --> FALSE
                              ,pr_hrtransa => gene0002.fn_busca_time
                              ,pr_idseqttl => pr_idseqttl
                              ,pr_nmdatela => pr_nmdatela
                              ,pr_nrdconta => pr_nrdconta
                              ,pr_nrdrowid => vr_nrdrowid);
        END IF;    
      END;
    END pc_gera_extrato_tarifas; 

    --Subrotina para obter extrato do emprestimo
    PROCEDURE pc_obtem_extrato_emprest    (pr_cdcooper    IN crapcop.cdcooper%TYPE       --Codigo Cooperativa
                                          ,pr_cdagenci    IN crapass.cdagenci%TYPE       --Codigo Agencia
                                          ,pr_nrdcaixa    IN INTEGER                     --Numero do Caixa
                                          ,pr_cdoperad    IN VARCHAR2                    --Codigo Operador
                                          ,pr_nmdatela    IN VARCHAR2                    --Nome da Tela
                                          ,pr_idorigem    IN INTEGER                     --Origem dos Dados
                                          ,pr_nrdconta    IN crapass.nrdconta%TYPE       --Numero da Conta do Associado
                                          ,pr_idseqttl    IN INTEGER                     --Sequencial do Titular
                                          ,pr_nrctremp    IN crapepr.nrctremp%TYPE       --Contrato Emprestimo
                                          ,pr_dtiniper    IN DATE                        --Inicio periodo
                                          ,pr_dtfimper    IN DATE                        --Final periodo
                                          ,pr_flgerlog    IN BOOLEAN                     --Imprimir log
                                          ,pr_extrato_epr OUT typ_tab_extrato_epr        --Tipo de tabela com extrato emprestimo
                                          ,pr_des_reto    OUT VARCHAR2                   --Retorno OK ou NOK
                                          ,pr_tab_erro    OUT gene0001.typ_tab_erro) IS  --Tabela de Erros
  BEGIN
  ---------------------------------------------------------------------------------------------------------------
  --
  --  Programa : pc_obtem_extrato_emprest             Antigo: procedures/b1wgen0002.p/obtem-extrato-emprestimo
  --  Sistema  : 
  --  Sigla    : CRED
  --  Autor    : Alisson C. Berrido - Amcom
  --  Data     : Julho/2014                           Ultima atualizacao: 31/07/2018
  --
  -- Dados referentes ao programa:
  --
  -- Frequencia: -----
  -- Objetivo   : Procedure para obter extrato do emprestimo
  --
  -- Alterações : 14/07/2014 - Conversão Progress -> Oracle (Alisson - AMcom)
  --              
  --              09/02/2015 - Ajuste no calculo do prejuizo para o emprestimo PP.
  --                           (James/Oscar)
  -- 
  --              08/10/2015 - Tratar os históricos de estorno do produto PP. (Oscar)                   
  --              14/10/2015 - Incluir o tratamento de pagamento de avalista 
  --                           que foi esquecido na migração para o Oracle. (Oscar)
  --
  --              15/08/2017 - Inclusao do campo qtdiacal e historicos do Pos-Fixado. (Jaison/James - PRJ298) 
  --
  --              03/04/2018 - M324 ajuste na configuração de extrato para emprestimo (Rafael Monteiro - Mouts)
  --
  --              31/07/2018 - P410 - Inclusao de Histórico para não compor Saldo no IOF do Prejuizo (Marcos-Envolti)
  --
  --              25/09/2018 - Incluir novos historicos de estorno de financiamento 2784,2785,2786,2787.
  --                           PRJ450 - Regulatorio(Odirlei - AMcom)     
  --
  ---------------------------------------------------------------------------------------------------------------
  DECLARE
      --Tabela de Memoria primeira parcela
      TYPE typ_tab_flgpripa IS TABLE OF BOOLEAN INDEX BY PLS_INTEGER;
      vr_tab_flgpripa typ_tab_flgpripa;
      
      -- Buscar cadastro auxiliar de emprestimo
      CURSOR cr_crapepr (pr_cdcooper IN crapepr.cdcooper%type,
                         pr_nrdconta IN crapepr.nrdconta%type,
                         pr_nrctremp IN crapepr.nrctremp%type) is
        SELECT crapepr.tpemprst
              ,crapepr.inprejuz
              ,crapepr.dtprejuz
              ,crapepr.rowid
        FROM crapepr crapepr
        WHERE crapepr.cdcooper = pr_cdcooper
        AND   crapepr.nrdconta = pr_nrdconta
        AND   crapepr.nrctremp = pr_nrctremp;
      rw_crapepr cr_crapepr%rowtype;
      
      -- Buscar informações de pagamentos do empréstimos
      CURSOR cr_craplem (pr_cdcooper IN craplem.cdcooper%type
                        ,pr_nrdconta IN craplem.nrdconta%type
                        ,pr_nrctremp IN craplem.nrctremp%type
                        ,pr_dtiniper IN DATE
                        ,pr_dtfimper IN DATE) IS
        SELECT /*+ INDEX (craplem CRAPLEM##CRAPLEM6) */
               to_char(craplem.dtmvtolt,'dd') ddlanmto
              ,craplem.dtmvtolt
              ,craplem.cdhistor
              ,craplem.vlpreemp
              ,craplem.vllanmto
              ,craplem.nrparepr
              ,craplem.cdcooper
              ,craplem.nrdconta
              ,craplem.nrctremp
              ,craplem.nrseqdig
              ,craplem.cdagenci
              ,craplem.cdbccxlt
              ,craplem.nrdolote
              ,craplem.nrdocmto
              ,craplem.txjurepr
              ,craplem.nrseqava
              ,craplem.qtdiacal
              ,craplem.vltaxprd
              ,craplem.dthrtran
            --  ,DECODE(craplem.cdorigem,1,'Ayllos',2,'Caixa',3,'Internet',4,'Cash',5,'Ayllos WEB',6,'URA',7,'Batch',8,'Mensageria',' ') cdorigem
              ,DECODE(craplem.cdorigem,1,'Debito CC',2,'Caixa',3,'Internet',4,'Cash',5,'Debito CC',6,'URA',7,'Debito CC',8,'Mensageria',' ') cdorigem
              ,count(*) over (partition by  craplem.cdcooper,craplem.nrdconta,craplem.dtmvtolt) nrtotdat
              ,row_number() over (partition by craplem.dtmvtolt ORDER BY craplem.cdcooper
                                                                        ,craplem.nrdconta
                                                                        ,craplem.dtmvtolt
                                                                        ,craplem.cdhistor
                                                                        ,craplem.nrdocmto
                                                                        ,craplem.progress_recid) nrseqdat
          FROM craplem craplem
         WHERE craplem.cdcooper = pr_cdcooper
           AND craplem.nrdconta = pr_nrdconta
           AND craplem.nrctremp = pr_nrctremp
           AND ((craplem.dtmvtolt >= pr_dtiniper AND pr_dtiniper IS NOT NULL) OR pr_dtiniper IS NULL)          
           AND ((craplem.dtmvtolt <= pr_dtfimper AND pr_dtfimper IS NOT NULL) OR pr_dtfimper IS NULL)
         ORDER BY craplem.dtmvtolt, craplem.cdhistor;
      rw_craplem cr_craplem%ROWTYPE;
      -- Buscar informações de pagamentos do empréstimos
      CURSOR cr_craplem_his (pr_cdcooper IN crapepr.cdcooper%type
                            ,pr_nrdconta IN crapepr.nrdconta%type
                            ,pr_nrctremp IN crapepr.nrctremp%type
                            ,pr_nrparepr IN craplem.nrparepr%type
                            ,pr_dtmvtolt IN craplem.dtmvtolt%type
                            ,pr_cdhistor IN craplem.cdhistor%TYPE) IS
        SELECT craplem.vllanmto
        FROM craplem craplem
        WHERE craplem.cdcooper = pr_cdcooper
        AND   craplem.nrdconta = pr_nrdconta
        AND   craplem.nrctremp = pr_nrctremp
        AND   craplem.nrparepr = pr_nrparepr
        AND   craplem.dtmvtolt = pr_dtmvtolt  
        AND   craplem.cdhistor = pr_cdhistor
        ORDER BY cdcooper,dtmvtolt,cdagenci,cdbccxlt,nrdolote,nrdconta,nrdocmto;
      rw_craplem_his cr_craplem_his%ROWTYPE; 
      --Selecionar Historicos
      CURSOR cr_craphis (pr_cdcooper IN craphis.cdcooper%TYPE
                       ,pr_cdhistor IN craphis.cdhistor%TYPE) IS        
        SELECT craphis.indebfol
              ,craphis.inhistor
              ,craphis.dshistor
              ,craphis.indebcre
              ,craphis.cdhistor
              ,craphis.dsextrat
        FROM craphis craphis
        WHERE craphis.cdcooper = pr_cdcooper       
        AND   craphis.cdhistor = pr_cdhistor;                      
      rw_craphis cr_craphis%ROWTYPE;  
      --Variaveis Locais
      vr_cdhistor INTEGER;
      vr_vllantmo NUMBER;
      vr_dstransa VARCHAR2(100);
      vr_dsorigem VARCHAR2(100);
      vr_nrdrowid ROWID;
      --Variaveis de indices
      vr_index PLS_INTEGER;
      --Variaveis de Erro
      vr_cdcritic INTEGER;
      vr_dscritic VARCHAR2(4000);
      --Variaveis de Excecoes
      vr_exc_erro EXCEPTION;
    BEGIN
      --Limpar tabelas memoria
      pr_tab_erro.DELETE;
      pr_extrato_epr.DELETE;
      
      --Inicializar transacao
      vr_dsorigem:= gene0001.vr_vet_des_origens(pr_idorigem);
      vr_dstransa:= 'Obter extrato do emprestimo.';

      --Consultar Emprestimo
      OPEN cr_crapepr (pr_cdcooper => pr_cdcooper
                      ,pr_nrdconta => pr_nrdconta
                      ,pr_nrctremp => pr_nrctremp);
      FETCH cr_crapepr INTO rw_crapepr;
      --Se Encontrou
      IF cr_crapepr%NOTFOUND THEN
        --Fechar Cursor
        CLOSE cr_crapepr;  
        --mensagem Critica
        vr_cdcritic:= 356;
        vr_dscritic:= NULL;
        -- Retorno não OK
        pr_des_reto := 'NOK';
        -- Chamar rotina de gravação de erro
        gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                             ,pr_cdagenci => pr_cdagenci
                             ,pr_nrdcaixa => pr_nrdcaixa
                             ,pr_nrsequen => 1 --> Fixo
                             ,pr_cdcritic => vr_cdcritic
                             ,pr_dscritic => vr_dscritic
                             ,pr_tab_erro => pr_tab_erro);
        --Sair Programa
        RETURN;                     
      END IF;
      --Fechar Cursor
      CLOSE cr_crapepr; 
      
      --Percorrer Lancamentos Emprestimo
      FOR rw_craplem IN cr_craplem (pr_cdcooper  => pr_cdcooper
                                   ,pr_nrdconta  => pr_nrdconta
                                   ,pr_nrctremp  => pr_nrctremp
                                   ,pr_dtiniper  => pr_dtiniper 
                                   ,pr_dtfimper  => pr_dtfimper) LOOP
        --Se for a primeira ocorrencia da data
        IF rw_craplem.nrseqdat = 1 THEN 
          --Marcar tabela primeira parcela como false
          FOR idx IN 1..999 LOOP
            vr_tab_flgpripa(idx):= FALSE;
          END LOOP;  
        END IF;                             
        /* Desprezando historicos de concessao de credito com juros a apropriar e lancamendo para desconto */               
        IF rw_craplem.cdhistor IN (1032,1033,1034,1035,1048,1049,2566,2567,2388,2473,2389,2390,2475,2392,2474,2393,2394,2476) THEN
          --Proximo registro
          CONTINUE;
        END IF;
        /* Desprezando historicos de concessao de credito com juros a apropriar e lancamendo para desconto */
        -- rmm desconsiderar pagamentos prejuizo (2390,2392,2388,2475)        
        IF rw_crapepr.tpemprst = 1 AND rw_craplem.cdhistor IN --(2390,2392,2388,2475,2391,2395) 
          (2386,2388,2473,2389,2390,2475,2391,2387,2392,2474,2393,2394,2476,2395,2701,2702) THEN
          CONTINUE;          
        END IF;
        --
        /* Verifica se o contrato estah em prejuizo */
        IF rw_crapepr.tpemprst = 1 AND
           rw_crapepr.inprejuz = 1 AND 
           rw_craplem.dtmvtolt >= rw_crapepr.dtprejuz THEN
           
           /* Lote do novo emprestimo */
           IF rw_craplem.nrdolote <= 600000 OR rw_craplem.nrdolote >= 650000 THEN
             CONTINUE;
           END IF;

        END IF;
        
        --Criar Extrato
        vr_index:= pr_extrato_epr.count + 1;
        --
        pr_extrato_epr(vr_index).dthrtran := rw_craplem.dthrtran;
        --Se existe valor emprestimo 
        IF rw_craplem.vlpreemp > 0 THEN
          pr_extrato_epr(vr_index).qtpresta:= apli0001.fn_round(rw_craplem.vllanmto / rw_craplem.vlpreemp,4);
        ELSE
          pr_extrato_epr(vr_index).qtpresta:= 0;
        END IF;    
        /*Historicos que nao vao compor o saldo, mas vao aparecer no relatorio*/
        IF rw_craplem.cdhistor IN (1048,1049,1050,1051,1717,1720,1708,1711,2566,2567, /*2382,*/ 2411, 2415, 2423,2416,2390,2475,2394,2476,2735,
                                   --> Novos historicos de estorno de financiamento
                                   2784,2785,2786,2787) THEN 
          --marcar para nao mostrar saldo
          pr_extrato_epr(vr_index).flgsaldo:= FALSE;                           
        END IF;
        /*Historicos que nao vao aparecer no relatorio, mas vao compor saldo */
        IF rw_craplem.cdhistor IN (1040,1041,1042,1043 /* PP */
                                  ,2471,2472,2358,2359 /* POS */) THEN
          --marcar com false para nao listar
          pr_extrato_epr(vr_index).flglista:= FALSE;  
        END IF;        
        /* Verifica se o contrato estah em prejuizo */
        IF rw_crapepr.tpemprst = 1 AND
           rw_crapepr.inprejuz = 1 AND 
           rw_craplem.dtmvtolt >= rw_crapepr.dtprejuz THEN
           
           /* Multa e Juros de Mora de Prejuizo */
           /* M324 - inclusao dos novos historicos de multas e juros */
           IF rw_craplem.cdhistor IN (1733,1734,1735,1736, 2382, 2411, 2415, 2423,2416,2390,2475,2394,2476,2735) THEN
             pr_extrato_epr(vr_index).flgsaldo := FALSE;
           END IF;  
             
        END IF;
              
        --Valor Lancamento
        vr_vllantmo:= rw_craplem.vllanmto;
        /* Se lancamento de pagamento*/
        IF rw_craplem.cdhistor IN (1044,1039,1057,1045 /* PP */) THEN 
          --Se nao for primeira parcela
          IF vr_tab_flgpripa.EXISTS(rw_craplem.nrparepr) AND
             vr_tab_flgpripa(rw_craplem.nrparepr) = FALSE THEN

            /* Historico de juros de mora */
            CASE WHEN rw_craplem.cdhistor = 1044 THEN
                 vr_cdhistor := 1077; /* Devedor */ 
                 WHEN rw_craplem.cdhistor = 1045 THEN
                 vr_cdhistor := 1619; /* Aval */
                 WHEN rw_craplem.cdhistor = 1057 THEN
                 vr_cdhistor := 1620; /* Aval */                 
            ELSE     
                 vr_cdhistor := 1078; /* Devedor */
            END CASE;
               
            /* Achar juros de inadimplencia desta parcela */
            OPEN cr_craplem_his (pr_cdcooper => rw_craplem.cdcooper
                                ,pr_nrdconta => rw_craplem.nrdconta
                                ,pr_nrctremp => rw_craplem.nrctremp
                                ,pr_nrparepr => rw_craplem.nrparepr
                                ,pr_dtmvtolt => rw_craplem.dtmvtolt
                                ,pr_cdhistor => vr_cdhistor);
            FETCH cr_craplem_his INTO rw_craplem_his;
            --Se encontrou
            IF cr_craplem_his%FOUND THEN
              --Acumular valor lancamento
              vr_vllantmo:= nvl(vr_vllantmo,0) + nvl(rw_craplem_his.vllanmto,0);
            END IF;  
            --Fechar Cursor
	          CLOSE cr_craplem_his;                

            /* Historico de juros de multa */
            CASE WHEN rw_craplem.cdhistor = 1044 THEN
                 vr_cdhistor := 1047; /* Devedor */ 
                 WHEN rw_craplem.cdhistor = 1045 THEN
                 vr_cdhistor := 1540; /* Aval */
                 WHEN rw_craplem.cdhistor = 1057 THEN
                 vr_cdhistor := 1618; /* Aval */                 
            ELSE     
                 vr_cdhistor := 1076; /* Devedor */
            END CASE;

            /* Achar juros de inadimplencia desta parcela */
            OPEN cr_craplem_his (pr_cdcooper => rw_craplem.cdcooper
                                ,pr_nrdconta => rw_craplem.nrdconta
                                ,pr_nrctremp => rw_craplem.nrctremp
                                ,pr_nrparepr => rw_craplem.nrparepr
                                ,pr_dtmvtolt => rw_craplem.dtmvtolt
                                ,pr_cdhistor => vr_cdhistor);
            FETCH cr_craplem_his INTO rw_craplem_his;
            --Se encontrou
            IF cr_craplem_his%FOUND THEN
              --Acumular valor lancamento
              vr_vllantmo:= nvl(vr_vllantmo,0) + nvl(rw_craplem_his.vllanmto,0);
            END IF;  
            --Fechar Cursor
            CLOSE cr_craplem_his; 
            
            /* Historico de IOF  */
            CASE WHEN rw_craplem.cdhistor = 1044 THEN
                 vr_cdhistor := 2311; /* Devedor */                 
            ELSE     
                 vr_cdhistor := 2312; /* Devedor */
            END CASE;

            /* Achar juros de inadimplencia desta parcela */
            OPEN cr_craplem_his (pr_cdcooper => rw_craplem.cdcooper
                                ,pr_nrdconta => rw_craplem.nrdconta
                                ,pr_nrctremp => rw_craplem.nrctremp
                                ,pr_nrparepr => rw_craplem.nrparepr
                                ,pr_dtmvtolt => rw_craplem.dtmvtolt
                                ,pr_cdhistor => vr_cdhistor);
            FETCH cr_craplem_his INTO rw_craplem_his;
            --Se encontrou
            IF cr_craplem_his%FOUND THEN
              --Acumular valor lancamento
              vr_vllantmo:= nvl(vr_vllantmo,0) + nvl(rw_craplem_his.vllanmto,0);
            END IF;  
            --Fechar Cursor
            CLOSE cr_craplem_his;
            --Atualizar tabela primeira parcela
            vr_tab_flgpripa(rw_craplem.nrparepr):= TRUE;  
          END IF;  
        END IF; --rw_craplem.cdhistor IN (1044,1039)
        --Selecionar Historicos
        OPEN cr_craphis (pr_cdcooper => pr_cdcooper
                        ,pr_cdhistor => rw_craplem.cdhistor);
        FETCH cr_craphis INTO rw_craphis;
        --Se nao encontrou
        IF cr_craphis%NOTFOUND THEN
          pr_extrato_epr(vr_index).dshistor:= rw_craplem.cdhistor;
          pr_extrato_epr(vr_index).dshistoi:= rw_craplem.cdhistor;
          pr_extrato_epr(vr_index).indebcre:= '*';
        ELSE 
          pr_extrato_epr(vr_index).dshistor:= to_char(rw_craphis.cdhistor,'fm0000')||' - '|| rw_craphis.dshistor;
          pr_extrato_epr(vr_index).dshistoi:= rw_craphis.dshistor;
          pr_extrato_epr(vr_index).indebcre:= rw_craphis.indebcre;
          pr_extrato_epr(vr_index).dsextrat:= rw_craphis.dsextrat;
        END IF;
        --Fechar Cursor
        CLOSE cr_craphis; 
        
        /* Pagamento de avalista */
        IF rw_craphis.cdhistor IN (1057,1045,1620,1619,1618,1540 /* PP */
                                  ,2335,2336,2377,2375,2369,2367 /* POS */) 
          AND rw_craplem.nrseqava > 0 THEN
           
           pr_extrato_epr(vr_index).dshistor := pr_extrato_epr(vr_index).dshistor || ' ' ||
                                                TO_CHAR(rw_craplem.nrseqava);
           pr_extrato_epr(vr_index).dsextrat := rw_craphis.dsextrat || ' ' || 
                                                TO_CHAR(rw_craplem.nrseqava);
        END IF;
        
        --Historico de Debito
        IF rw_craphis.cdhistor IN (1077,1078,1619,1620) THEN
           pr_extrato_epr(vr_index).indebcre:= 'D'; 
        END IF;
        
        --Popular informacoes no Extrato
        pr_extrato_epr(vr_index).dtmvtolt:= rw_craplem.dtmvtolt;
        pr_extrato_epr(vr_index).nranomes:= to_number(to_char(rw_craplem.dtmvtolt,'YYYYMM'));
        pr_extrato_epr(vr_index).cdhistor:= rw_craplem.cdhistor;
        pr_extrato_epr(vr_index).nrseqdig:= rw_craplem.nrseqdig;
        pr_extrato_epr(vr_index).cdagenci:= rw_craplem.cdagenci;
        pr_extrato_epr(vr_index).cdbccxlt:= rw_craplem.cdbccxlt;
        pr_extrato_epr(vr_index).nrdolote:= rw_craplem.nrdolote;
        pr_extrato_epr(vr_index).nrdocmto:= rw_craplem.nrdocmto;
        pr_extrato_epr(vr_index).vllanmto:= vr_vllantmo;
        pr_extrato_epr(vr_index).txjurepr:= rw_craplem.txjurepr;
        pr_extrato_epr(vr_index).tpemprst:= rw_crapepr.tpemprst;
        pr_extrato_epr(vr_index).qtdiacal:= rw_craplem.qtdiacal;
        pr_extrato_epr(vr_index).vltaxprd:= rw_craplem.vltaxprd;        
        
        IF rw_craplem.cdhistor IN(1039,1044,1045,1057 /* PP */
                                 ,2331,2330,2336,2335 /* POS */) THEN
          pr_extrato_epr(vr_index).cdorigem:= rw_craplem.cdorigem;
        ELSE
          pr_extrato_epr(vr_index).cdorigem:= ' ';
        END IF;
        
        --Numero parcelas diferente zero
        IF NVL(rw_craplem.nrparepr,0) <> 0 THEN
          pr_extrato_epr(vr_index).nrparepr:= rw_craplem.nrparepr;
        ELSIF rw_craplem.cdhistor IN (1040,1041,1042,1043 /* PP */
                                     ,2471,2472,2358,2359 /* POS */) THEN
          /* Se ajuste, parcela = 99 para aparecer por ultimo no extrato*/
          pr_extrato_epr(vr_index).nrparepr:= NULL;
        END IF;  
      END LOOP;
        
      -- Se foi solicitado geração de LOG
      IF pr_flgerlog THEN
        -- Chamar geração de LOG
        gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                            ,pr_cdoperad => pr_cdoperad
                            ,pr_dscritic => NULL
                            ,pr_dsorigem => vr_dsorigem
                            ,pr_dstransa => vr_dstransa
                            ,pr_dttransa => TRUNC(SYSDATE)
                            ,pr_flgtrans => 1 --> TRUE
                            ,pr_hrtransa => gene0002.fn_busca_time
                            ,pr_idseqttl => pr_idseqttl
                            ,pr_nmdatela => pr_nmdatela
                            ,pr_nrdconta => pr_nrdconta
                            ,pr_nrdrowid => vr_nrdrowid);
      END IF;    
      --Retorno OK
      pr_des_reto:= 'OK';  
    EXCEPTION
      WHEN vr_exc_erro THEN
        -- Retorno não OK
        pr_des_reto := 'NOK';
        -- Chamar rotina de gravação de erro
        gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                             ,pr_cdagenci => pr_cdagenci
                             ,pr_nrdcaixa => pr_nrdcaixa
                             ,pr_nrsequen => 1 --> Fixo
                             ,pr_cdcritic => 0 --> Critica 0
                             ,pr_dscritic => vr_dscritic
                             ,pr_tab_erro => pr_tab_erro);
        -- Se foi solicitado geração de LOG
        IF pr_flgerlog THEN
          -- Chamar geração de LOG
          gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                              ,pr_cdoperad => pr_cdoperad
                              ,pr_dscritic => vr_dscritic
                              ,pr_dsorigem => vr_dsorigem
                              ,pr_dstransa => vr_dstransa
                              ,pr_dttransa => TRUNC(SYSDATE)
                              ,pr_flgtrans => 0 --> FALSE
                              ,pr_hrtransa => gene0002.fn_busca_time
                              ,pr_idseqttl => pr_idseqttl
                              ,pr_nmdatela => pr_nmdatela
                              ,pr_nrdconta => pr_nrdconta
                              ,pr_nrdrowid => vr_nrdrowid);
        END IF;  
      WHEN OTHERS THEN
        
        -- Retorno não OK
        pr_des_reto := 'NOK';
        -- Chamar rotina de gravação de erro
        vr_dscritic := 'Erro na pc_obtem_extrato_emprestimo --> '|| sqlerrm;
        gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                             ,pr_cdagenci => pr_cdagenci
                             ,pr_nrdcaixa => pr_nrdcaixa
                             ,pr_nrsequen => 1 --> Fixo
                             ,pr_cdcritic => 0 --> Critica 0
                             ,pr_dscritic => vr_dscritic
                             ,pr_tab_erro => pr_tab_erro);
        -- Se foi solicitado geração de LOG
        IF pr_flgerlog THEN
          -- Chamar geração de LOG
          gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                              ,pr_cdoperad => pr_cdoperad
                              ,pr_dscritic => vr_dscritic
                              ,pr_dsorigem => vr_dsorigem
                              ,pr_dstransa => vr_dstransa
                              ,pr_dttransa => TRUNC(SYSDATE)
                              ,pr_flgtrans => 0 --> FALSE
                              ,pr_hrtransa => gene0002.fn_busca_time
                              ,pr_idseqttl => pr_idseqttl
                              ,pr_nmdatela => pr_nmdatela
                              ,pr_nrdconta => pr_nrdconta
                              ,pr_nrdrowid => vr_nrdrowid);
        END IF;    
      END;
    END pc_obtem_extrato_emprest; 

    


    -- Subrotina para obter  impressao do extrato
    PROCEDURE pc_busca_cabrel (pr_cdcooper   IN crapcop.cdcooper%TYPE  --Codigo Cooperativa
                              ,pr_cdagenci   IN crapass.cdagenci%TYPE  --Codigo Agencia
                              ,pr_nrdcaixa   IN INTEGER                --Numero do Caixa
                              ,pr_cdoperad   IN VARCHAR2               --Codigo Operador
                              ,pr_cdprogra   IN VARCHAR2               --Nome da Tela
                              ,pr_idorigem   IN INTEGER                --Origem dos Dados
                              ,pr_cdrelato   IN INTEGER                --Codigo Relatorio
                              ,pr_nrdconta   IN crapass.nrdconta%TYPE  --Numero da Conta do Associado
                              ,pr_dtmvtolt   IN DATE                   --Data Movimento
                              ,pr_tab_erro   OUT GENE0001.typ_tab_erro --Tabela de Erros
                              ,pr_tab_cabrel OUT typ_tab_cabrel        --Tabela cabecalho 
                              ,pr_des_reto   OUT VARCHAR2) IS          --Retorno OK/NOK
  BEGIN                              
  ---------------------------------------------------------------------------------------------------------------
  --
  --  Programa : pc_busca_cabrel                      Antigo: procedures/b1wgen9999.p/busca_cabrel
  --  Sistema  : 
  --  Sigla    : CRED
  --  Autor    : Alisson C. Berrido - Amcom
  --  Data     : Julho/2014                           Ultima atualizacao: 02/07/2014
  --
  -- Dados referentes ao programa:
  --
  -- Frequencia: -----
  -- Objetivo   : Procedure para buscar informacoes cabecalho relatorio
  --
  -- Alterações : 02/07/2014 - Conversão Progress -> Oracle (Alisson - AMcom)
  --              
  ---------------------------------------------------------------------------------------------------------------
  DECLARE
      -- Busca dos dados da cooperativa
      CURSOR cr_crapcop (pr_cdcooper IN crapcop.cdcooper%TYPE) IS
        SELECT crapcop.nmrescop
              ,crapcop.nmextcop
              ,crapcop.dsdircop
        FROM crapcop crapcop
        WHERE crapcop.cdcooper = pr_cdcooper;
      rw_crapcop cr_crapcop%ROWTYPE;
      --Buscar dados do relatorio
      CURSOR cr_craprel (pr_cdcooper IN craprel.cdcooper%TYPE
                        ,pr_cdrelato IN craprel.cdrelato%TYPE) IS
        SELECT craprel.nmrelato
              ,craprel.nmdestin
              ,craprel.nrmodulo
        FROM craprel craprel
        WHERE craprel.cdcooper = pr_cdcooper
        AND   craprel.cdrelato = pr_cdrelato;                    
      rw_craprel cr_craprel%ROWTYPE;
      --Buscar Informacoes do programa
      CURSOR cr_crapprg (pr_cdcooper IN crapprg.cdcooper%TYPE
                        ,pr_cdprogra IN crapprg.cdprogra%TYPE) IS
        SELECT crapprg.nrsolici
        FROM crapprg crapprg 
        WHERE crapprg.cdcooper = pr_cdcooper 
        AND   crapprg.cdprogra = pr_cdprogra;
      rw_crapprg cr_crapprg%ROWTYPE;                  
      --Variaveis Locais
      vr_nrmodulo INTEGER; 
      --Variaveis Erro
      vr_cdcritic  INTEGER;
      vr_dscritic  VARCHAR2(4000);  
      vr_des_reto  VARCHAR2(3);               
      --Variaveis de Excecoes
      vr_exc_erro EXCEPTION;
    BEGIN

      -- Verifica se a cooperativa esta cadastrada
      OPEN cr_crapcop (pr_cdcooper => pr_cdcooper);
      FETCH cr_crapcop INTO rw_crapcop;
      -- Se não encontrar
      IF cr_crapcop%NOTFOUND THEN
        -- Fechar o cursor pois haverá raise
        CLOSE cr_crapcop;
        -- Montar mensagem de critica
        vr_cdcritic := 651;
        vr_dscritic:= NULL;
        RAISE vr_exc_erro;
      ELSE
        -- Apenas fechar o cursor
        CLOSE cr_crapcop;
      END IF;
      
      --Popular Nome Cooperativa na tabela memoria
      pr_tab_cabrel(1).nmrescop:= rw_crapcop.nmrescop;
      
      --Selecionar Informacoes do relatorio
      OPEN cr_craprel (pr_cdcooper => pr_cdcooper
                      ,pr_cdrelato => pr_cdrelato);
      FETCH cr_craprel INTO rw_craprel;
      --Se Nao Encontrou
      IF cr_craprel%NOTFOUND THEN
        --Nome Relatorio
        pr_tab_cabrel(1).nmrelato:= LPAD(' ',40,' ');
        --Nome Destino
        pr_tab_cabrel(1).nmdestin:= NULL;
        --Nome do Modulo
        vr_nrmodulo:= 5;
      ELSE
        --Nome Relatorio
        pr_tab_cabrel(1).nmrelato:= rw_craprel.nmrelato;
        --Nome Destino
        pr_tab_cabrel(1).nmdestin:= 'DESTINO: '|| UPPER(rw_craprel.nmdestin);
        --Nome do Modulo
        vr_nrmodulo:= rw_craprel.nrmodulo;
      END IF;    
      --Fechar Cursor
      CLOSE cr_craprel;
      
      --Selecionar Informacoes do programa
      OPEN cr_crapprg (pr_cdcooper => pr_cdcooper
                      ,pr_cdprogra => pr_cdprogra);
      FETCH cr_crapprg INTO rw_crapprg;
      --Se Nao Encontrou
      IF cr_crapprg%NOTFOUND THEN
        --Fechar Cursor
        CLOSE cr_crapprg;
        vr_cdcritic:= 145;
        vr_dscritic:= NULL;
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;   
      --Fechar Cursor
      CLOSE cr_crapprg; 
      
      IF rw_crapprg.nrsolici = 50 THEN /* TELAS */
        --Programa gerador
        pr_tab_cabrel(1).progerad:= 'TEL';
      ELSE
        --Programa gerador        
        pr_tab_cabrel(1).progerad:= SUBSTR(RPAD(pr_cdprogra,7,' '),5,3);    
      END IF; 
      --Demais Informacoes do Cabecalho
      pr_tab_cabrel(1).dtmvtref:= pr_dtmvtolt;
      pr_tab_cabrel(1).nmmodulo:= gene0001.vr_vet_nmmodulo(vr_nrmodulo);
      pr_tab_cabrel(1).cdrelato:= pr_cdrelato;
      pr_tab_cabrel(1).dtmvtolt:= PAGA0001.fn_busca_datdodia (pr_cdcooper => pr_cdcooper);
      pr_tab_cabrel(1).dshoraat:= TO_CHAR(SYSDATE,'HH24:MI');             
      --Retornar OK
      pr_des_reto := 'OK';  
      
    EXCEPTION
      WHEN vr_exc_erro THEN
        -- Retorno não OK
        pr_des_reto:= 'NOK';
        -- Chamar rotina de gravação de erro
        gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                             ,pr_cdagenci => pr_cdagenci
                             ,pr_nrdcaixa => pr_nrdcaixa
                             ,pr_nrsequen => 1 --> Fixo
                             ,pr_cdcritic => vr_cdcritic 
                             ,pr_dscritic => vr_dscritic
                             ,pr_tab_erro => pr_tab_erro);
      WHEN OTHERS THEN
        
        -- Retorno não OK
        pr_des_reto := 'NOK';
        -- Chamar rotina de gravação de erro
        vr_dscritic := 'Erro na pc_busca_cabrel --> '|| sqlerrm;
        gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                             ,pr_cdagenci => pr_cdagenci
                             ,pr_nrdcaixa => pr_nrdcaixa
                             ,pr_nrsequen => 1 --> Fixo
                             ,pr_cdcritic => 0 --> Critica 0
                             ,pr_dscritic => vr_dscritic
                             ,pr_tab_erro => pr_tab_erro);
      END;
    END pc_busca_cabrel; 
                                                       
    /* Funcão para validar o ultimo dia util anterior */
    FUNCTION fn_dia_util_anterior(pr_cdcooper in crapcop.cdcooper%type,--> Cooperativa conectada
                                 pr_dtvencto in crapdat.dtmvtolt%type, --> Data do Vencimento
                                 pr_qtdddias in INTEGER,               --> Dias Float
                                 pr_feriado IN BOOLEAN DEFAULT TRUE,   --> Considerar feriados
                                 pr_excultdia IN BOOLEAN DEFAULT FALSE --> Desconsiderar Feriado 31/12
                               ) RETURN DATE IS
    BEGIN
      -- ..........................................................................
      --
      --  Programa : fn_dia_util_anterior
      --   Sistema : Conta-Corrente - Cooperativa de Credito
      --   Sigla   : CRED
      --   Autor   : Renato (Supero)
      --   Data    : Agosto/2014                          Ultima Atualizacao: 12/08/2014
      --
      --   Dados referentes ao programa:
      --   Frequencia: Sempre que chamado por outros programas.
      --
      --   Objetivo  : Calcular se a data passada e util, e se não for
      --               retornar a proxima data util anterior respeitando o qtdfloat.
      --
      --
      --   Alteracoes  : 12/08/2014 - Conversão Progress -> Oracle (Renato - Supero)
      -- .............................................................................
      DECLARE
        -- Variaveis Locais
        vr_dtvencto  crapdat.dtmvtolt%TYPE;
        vr_qtdddias  INTEGER;
        vr_excultdia INTEGER;
        vr_feriado   BOOLEAN;
        -- Buscar informacoes dos feriados
        CURSOR cr_crapfer (pr_cdcooper  IN crapfer.cdcooper%type
                          ,pr_dtferiad  IN crapfer.dtferiad%type
                          ,pr_excultdia IN INTEGER) IS
          SELECT fer.dtferiad
            FROM crapfer fer
           WHERE fer.cdcooper = pr_cdcooper
           AND   fer.dtferiad = pr_dtferiad
           AND (pr_excultdia = 0 OR (pr_excultdia = 1 AND
                                     to_char(fer.dtferiad,'DDMM') <> '3112'));
        rw_crapfer cr_crapfer%ROWTYPE;                                     
      BEGIN
        -- Iniciar com a data passada removendo as horas
        vr_dtvencto:= TRUNC(pr_dtvencto);
        vr_qtdddias:= pr_qtdddias;
        --Verificar se Exclui ultimo dia ano dos feriados cadastrados
        IF pr_excultdia THEN
          vr_excultdia:= 1;
        ELSE
          vr_excultdia:= 0;
        END IF;

        -- Testes para garantir que seja util
        WHILE vr_qtdddias > 0 LOOP
          --Dia anterior
          vr_dtvencto:= vr_dtvencto - 1;
          -- Sair se o dia não for sabado ou domingo e nem feriado
          IF to_char(vr_dtvencto,'d') IN (1,7) THEN
            --Proximo Dia
            CONTINUE;
          ELSIF pr_feriado THEN
            --Selecionar feriado
            OPEN cr_crapfer(pr_cdcooper  => pr_cdcooper
                           ,pr_dtferiad  => vr_dtvencto
                           ,pr_excultdia => vr_excultdia);
            FETCH cr_crapfer INTO rw_crapfer;
            vr_feriado:= cr_crapfer%FOUND;
            --Fechar Cursor
            CLOSE cr_crapfer;  
            --Se for feriado pula
            IF vr_feriado THEN
              CONTINUE;
            END IF;  
          END IF;
          -- Diminuir quantidade dias
          vr_qtdddias:= vr_qtdddias - 1;
        END LOOP;
        -- Retornar a data calculada
        RETURN vr_dtvencto;
      EXCEPTION
        WHEN OTHERS THEN
          
          -- Iniciar LOG de execucão
          BTCH0001.pc_gera_log_batch(pr_cdcooper     => pr_cdcooper
                                    ,pr_ind_tipo_log => 1 -- Processo normal
                                    ,pr_des_log      => to_char(sysdate,'hh24:mi:ss')||' --> Coop. --> '||pr_cdcooper||' --> Não foi possivel verificar data util para o dia --> '||vr_dtvencto);
          RETURN null;
      END;
    END fn_dia_util_anterior;
    
    --Subrotina para consultar lancamentos futuros 
    PROCEDURE pc_consulta_lancamento (pr_cdcooper IN crapcop.cdcooper%TYPE              --Codigo Cooperativa
                                     ,pr_cdagenci IN crapass.cdagenci%TYPE              --Codigo Agencia
                                     ,pr_nrdcaixa IN INTEGER                            --Numero do Caixa
                                     ,pr_cdoperad IN VARCHAR2                           --Codigo Operador
                                     ,pr_nrdconta IN crapass.nrdconta%TYPE              --Numero da Conta do Associado
                                     ,pr_idorigem IN INTEGER                            --Origem dos Dados
                                     ,pr_idseqttl IN INTEGER                            --Sequencial do Titular
                                     ,pr_nmdatela IN VARCHAR2                           --Nome da Tela
                                     ,pr_flgerlog IN BOOLEAN                            --Imprimir log
                                     ,pr_dtiniper IN DATE                               -- Data inicio
                                     ,pr_dtfimper IN DATE                               -- Data final
                                     ,pr_indebcre IN craphis.indebcre%TYPE              -- Debito/Credito
                                     ,pr_des_reto OUT VARCHAR2                          --Retorno OK ou NOK
                                     ,pr_tab_erro OUT GENE0001.typ_tab_erro             --Tabela Retorno Erro
                                     ,pr_tab_totais_futuros OUT typ_tab_totais_futuros  --Vetor para o retorno das informações
                                     ,pr_tab_lancamento_futuro OUT typ_tab_lancamento_futuro) IS  --Vetor para o retorno das informações
  BEGIN
  ---------------------------------------------------------------------------------------------------------------
  --
  --  Programa : pc_consulta_lancamento            Antigo: procedures/b1wgen0003.p/consulta-lancamento
  --  Sistema  : 
  --  Sigla    : CRED
  --  Autor    : Alisson C. Berrido - Amcom
  --  Data     : Julho/2014                           Ultima atualizacao: 14/11/2018
  --
  -- Dados referentes ao programa:
  --
  -- Frequencia: -----
  -- Objetivo   : Procedure para consultar lancamentos futuros do associado
  --
  -- Alterações : 02/07/2014 - Conversão Progress -> Oracle (Alisson - AMcom)
  --              
  --              30/10/2014 - Incluir o histórico 530 na lista de históricos verificados 
  --                           em finais de semana e feriados. Verificar se o lançamento 
  --                           de histórico 530 foi proveniente de agendamento.
  --                           (Douglas - Projeto Captação Internet 2014/2)
  --
  --              03/11/2014 - Adicionado tratamento para ignorar os lançamentos futuros 
  --                           do histórico 15 e da tabela 'de-para' da Cabal
  --                           (Douglas - Solicitação Oscar)
  --
  --              04/11/2014 - Ajuste no extrato de lançamentos futuros,
  --                           SD 218912 (Jean Michel).
  --
  --              28/10/2015 - Ajustes no loop de leitura da vr_tab_dados_epr, para seguir para o proximo
  --                           registro no final do loop, para que nao fique em loop infinito (Odirlei-Amcom)             
  --
  --              05/11/2015 - Replicar ajustes feitos no progres:
  --                           -- Alteracoes referentes a exclusao de lautom de faturas  (Tiago/Rodrigo Melhoria 126)
  --                           (Odirlei/Amcom)
  --                            
  --              26/11/2015 - Ajustando a consulta dos lancto futuros para mostrar
  --                           os lacto de folha de pagamento (Andre Santos - SUPERO)
  --
  --              04/01/2016 - Ajuste para exibir apenas 50 caracteres no dshistor SD381109 (Odirlei-AMcom)               
  --
  --              27/01/2016 - Remover lançamentos de salário com valor zerado dos lançamentos
  --                           futuros (Marcos-Supero)
  --
  --              24/02/2015 - Alterado para buscar o campo qtdfloat da tabela crapcco 
  --                           para a tabela crapceb. Projeto 213 - Reciprocidade (Lombardi)
  --
  --              17/02/2016 - Ajustes referentes ao projeto melhoria 157 (Lucas Ranghetti #330322)
  --
  --              26/02/2016 - Mostrar titulos vencidos na lautom (craptdb)
  --                           (Tiago/Rodrigo melhoria 116).
  --
  --              23/03/2016 - Adicionado origem 4(TAA) para armazenar a variavel
  --                           vr_dtddlslf (Lucas Ranghetti #411852)
  --
  --              29/04/2016 - Ajuste nas queries de Folha para se adequar as correções efetuadas
  --                           somente na Bo03 (Marcos-Supero)
  --
  --              06/05/2016 - Incluir Raise de OK no if do idorigem = 4 conforme faz a bo3 e
  --                           na craptdb alterado a somana para subtracao
  --                           (Lucas Ranghetti #446796,#447729)
  --              
  --              27/05/2016 - Identificar se origem for TRMULTAJUROS. Inclusao: fldebito,
  --                           cdagenci, cdbccxlt, nrdolote, nrseqdig. (Jaison/James)
  --
  --              
  --              28/06/2016 - Incluir conta na busca do maximo Float (Marcos-Supero #477843)
  -- 
  --              
  --              08/08/2016 - Incluído tratamento para pagamento de DARF/DAS (Dionathan)
  -- 
  --              21/02/2017 - Ajuste na listagem de titulos em bordero de desconto, para considerar
  --                           a data de vencimento util do titulo. (Douglas - Chamado 587261)
  --
  --              01/03/2017 - Adicionar origem ADIOFJUROS para podermos debitar estes agendamentos
  --                           (Lucas Ranghetti M338.1)
  --
  --              21/06/2017 - Mostrar lancamento futuro de cred de cobranca NPC pagos fora do sistema
  --                           Cecred por baixa operacional (Projeto 340 - Rafael)
  --
  --              12/07/2017 - Ajuste na busca do limite de credito do associado para permitir
  --                           acessar a tela ATENDA mesmo quando o limite estiver Em Estudo (Mateus - MoutS)
  --
  --              09/08/2017 - Inclusao do produto Pos-Fixado. (Jaison/James - PRJ298)
  --
  --              09/08/2017 - Ajuste ao mostrar lançamento futuro de cred de cobranca NPC (Rafael)
  -- 
  --              29/09/2017 - Ajuste na hora de montar a campo dscedent qdo for pagamento de GPS (Tiago/Adriano)
  --
  --              05/10/2017 - Ajuste para desconsiderar a situacao da folha de pagamento quando 
  --                           esta em Transacao Pendente (Rafael Monteiro - Mouts)
  -- 
  --              17/11/2017 - No cursor cr_cred_npc, se já existir crepret com ocorrencia 6 ou 17 então
  --                           registro deve ser igonardo. Será exibido somente no cursor cr_crapret
  --                           (SD793999 e SD795994 - AJFink)
  -- 
  --              23/01/2017 - Ajustes para arrecadacao de FGTS/DAE. PRJ406 - FGTS
  --                           (Odirlei-AMcom)
  --
  --              20/02/2018 - Alterada validação cdtipcta IN (1,2,...) para verificacao se permite
  --                           o produto 38 (Folhas de Cheque). PRJ366 (Lombardi).
  -- 
  --              07/05/2018 - Verificacao de impedimento de talionario atraves da proc 
  --                           pc_ind_impede_talonario. PRJ366 (Lombardi)
  --
  --              20/04/2018 - Remover a validação de CASH - FOTON (Douglas - PRJ363 Novo Caixa Eletrônico)
  --
  --              09/08/2018 - Alterado forma para da busca de lançamentos futuros para emprestimos e 
  --                           Fatura de cartão de crédito : (Alcemir - Mout's / PRB0040071).  
  -- 
  --
  --              14/11/2018 - Inclusão do juros remuneratórios de prejuízo provisionados na tela LAUTOM
  --                           (Reginaldo/AMcom/P450)
  ---------------------------------------------------------------------------------------------------------------
  DECLARE
      -- Busca dos dados do associado
      CURSOR cr_crapass(pr_cdcooper IN crapcop.cdcooper%TYPE
                       ,pr_nrdconta IN crapass.nrdconta%TYPE) IS
        SELECT crapass.nrdconta
              ,crapass.nmprimtl
              ,crapass.vllimcre
              ,crapass.nrcpfcgc
              ,crapass.inpessoa
              ,crapass.cdcooper
              ,crapass.cdagenci
              ,crapass.cdtipcta
              ,crapass.cdsitdct
        FROM crapass crapass
        WHERE crapass.cdcooper = pr_cdcooper
        AND   crapass.nrdconta = pr_nrdconta;
      rw_crapass cr_crapass%ROWTYPE;  
      --Selecionar Saldos da Conta
      CURSOR cr_crapsld (pr_cdcooper IN crapsld.cdcooper%TYPE
                        ,pr_nrdconta IN crapsld.nrdconta%TYPE) IS
        SELECT crapsld.vltsallq
              ,crapsld.vlsmnmes
              ,crapsld.vlsmnesp
              ,crapsld.nrdconta
              ,crapsld.vlsmnblq
              ,crapsld.vliofmes
              ,crapsld.vljuresp
        FROM crapsld crapsld
        WHERE crapsld.cdcooper = pr_cdcooper
        AND   crapsld.nrdconta = pr_nrdconta;
      rw_crapsld cr_crapsld%ROWTYPE;
      --Selecionar Lancamentos
      CURSOR cr_craplcm (pr_cdcooper IN craplcm.cdcooper%TYPE
                        ,pr_nrdconta IN craplcm.nrdconta%TYPE
                        ,pr_dtmvtolt IN craplcm.dtmvtolt%TYPE) IS
        SELECT craplcm.cdcooper
        FROM craplcm craplcm
        WHERE craplcm.cdcooper = pr_cdcooper       
        AND   craplcm.nrdconta = pr_nrdconta      
        AND   craplcm.dtmvtolt = pr_dtmvtolt 
        AND   craplcm.cdhistor IN (7,8);                
      rw_craplcm cr_craplcm%ROWTYPE;
      --Selecionar Lancamentos 
      CURSOR cr_craplcm2 (pr_cdcooper IN craplcm.cdcooper%TYPE
                         ,pr_nrdconta IN craplcm.nrdconta%TYPE
                         ,pr_dtmvtolt IN craplcm.dtmvtolt%TYPE) IS
        SELECT craplcm.cdcooper
              ,craplcm.cdhistor
              ,craplcm.cdpesqbb
              ,craplcm.dtmvtolt
              ,craplcm.vllanmto
              ,craplcm.dscedent
              ,craplcm.nrdocmto
              ,craplcm.nrdctabb
        FROM craplcm craplcm
        WHERE craplcm.cdcooper = pr_cdcooper       
        AND   craplcm.nrdconta = pr_nrdconta      
        AND   craplcm.dtmvtolt > pr_dtmvtolt;                         
      --Selecionar Seguros
      CURSOR cr_crapseg (pr_cdcooper IN crapseg.cdcooper%TYPE
                        ,pr_nrdconta IN crapseg.nrdconta%TYPE
                        ,pr_dtdebito IN crapseg.dtdebito%TYPE) IS
        SELECT nvl(sum(nvl(crapseg.vlpreseg,0)),0) vlpreseg
        FROM crapseg crapseg
        WHERE crapseg.cdcooper = pr_cdcooper       
        AND   crapseg.nrdconta = pr_nrdconta
        AND   crapseg.indebito = 0
        AND   (crapseg.cdsitseg = 1 OR (crapseg.cdsitseg = 3 AND crapseg.tpseguro = 11))      
        AND   trunc(crapseg.dtdebito,'MM') = trunc(pr_dtdebito,'MM');
      rw_crapseg cr_crapseg%ROWTYPE;
      --Selecionar Seguros
      CURSOR cr_crapseg2 (pr_cdcooper IN crapseg.cdcooper%TYPE
                         ,pr_nrdconta IN crapseg.nrdconta%TYPE
                         ,pr_dtdebito IN crapseg.dtdebito%TYPE) IS
        SELECT crapseg.dtdebito
              ,crapseg.tpseguro
              ,crapseg.nrctrseg
              ,crapseg.vlpreseg
        FROM crapseg crapseg 
        WHERE crapseg.cdcooper = pr_cdcooper       
        AND   crapseg.nrdconta = pr_nrdconta
        AND  ((crapseg.tpseguro <> 4 AND crapseg.cdsitseg = 1) OR (crapseg.tpseguro = 11 AND crapseg.cdsitseg = 3))       
        AND   crapseg.indebito  = 0                       
        AND   crapseg.flgconve  = 0
        AND   trunc(crapseg.dtdebito,'MM') = trunc(pr_dtdebito,'MM');
      --Selecionar poupancas programadas
      CURSOR cr_craprpp (pr_cdcooper IN craprpp.cdcooper%TYPE
                        ,pr_nrdconta IN craprpp.nrdconta%TYPE
                        ,pr_dtdebito IN craprpp.dtdebito%TYPE) IS
        SELECT nvl(sum(nvl(craprpp.vlprerpp,0)),0) vlprerpp
        FROM craprpp craprpp 
        WHERE craprpp.cdcooper = pr_cdcooper       
        AND   craprpp.nrdconta = pr_nrdconta
        AND   (craprpp.cdsitrpp = 1 OR (craprpp.cdsitrpp = 2 AND craprpp.dtrnirpp = craprpp.dtdebito))       
        AND   trunc(craprpp.dtdebito,'MM') = trunc(pr_dtdebito,'MM');
      rw_craprpp cr_craprpp%ROWTYPE;
      --Selecionar poupancas programadas
      CURSOR cr_craprpp2 (pr_cdcooper IN craprpp.cdcooper%TYPE
                         ,pr_nrdconta IN craprpp.nrdconta%TYPE
                         ,pr_dtdebito IN craprpp.dtdebito%TYPE) IS
        SELECT craprpp.vlprerpp
              ,craprpp.dtdebito
              ,craprpp.nrctrrpp
        FROM craprpp craprpp
        WHERE craprpp.cdcooper = pr_cdcooper       
        AND   craprpp.nrdconta = pr_nrdconta
        AND   (craprpp.cdsitrpp = 1 OR (craprpp.cdsitrpp = 2 AND craprpp.dtrnirpp = craprpp.dtdebito))       
        AND   trunc(craprpp.dtdebito,'MM') = trunc(pr_dtdebito,'MM');

      --Selecionar planos capital
      CURSOR cr_crappla (pr_cdcooper IN craprpp.cdcooper%TYPE
                        ,pr_nrdconta IN craprpp.nrdconta%TYPE) IS
        SELECT crappla.vlpenden
              ,crappla.vlprepla
              ,crappla.dtdpagto
        FROM crappla crappla 
        WHERE crappla.cdcooper = pr_cdcooper       
        AND   crappla.nrdconta = pr_nrdconta
        AND   crappla.tpdplano = 1            
        AND   crappla.cdsitpla = 1            
        AND   crappla.flgpagto = 0 /*FALSE*/        
        AND   crappla.indpagto = 0; 
      --Selecionar planos capital
      CURSOR cr_crappla2 (pr_cdcooper IN craprpp.cdcooper%TYPE
                         ,pr_nrdconta IN craprpp.nrdconta%TYPE) IS
        SELECT crappla.vlpenden
              ,crappla.vlprepla
              ,crappla.dtdpagto
              ,crappla.nrctrpla
              ,crappla.flgpagto
        FROM crappla crappla 
        WHERE crappla.cdcooper = pr_cdcooper       
        AND   crappla.nrdconta = pr_nrdconta
        AND   crappla.tpdplano = 1            
        AND   crappla.cdsitpla = 1            
        AND   crappla.indpagto = 0;           
      -- Cursor para busca a agencia
      CURSOR cr_crapage(pr_cdcooper IN crapage.cdcooper%TYPE
                       ,pr_cdagenci IN crapage.cdagenci%TYPE) IS
        SELECT crapage.nmcidade
              ,crapage.cdagenci
              ,crapage.nmresage
              ,crapage.qtddlslf
        FROM crapage crapage
        WHERE crapage.cdcooper = pr_cdcooper 
        AND   crapage.cdagenci = pr_cdagenci;
      rw_crapage cr_crapage%ROWTYPE;   
      --Selecionar Lancamentos Automáticos
      CURSOR cr_craplau (pr_cdcooper IN craplau.cdcooper%TYPE
                        ,pr_nrdconta IN craplau.nrdconta%TYPE
                        ,pr_dtiniper IN DATE
                        ,pr_dtfimper IN DATE) IS                   
        SELECT craplau.cdhistor
              ,craplau.dtmvtopg
              ,craplau.vllanaut
              ,craplau.nrdocmto
              ,craplau.dscedent
              ,craplau.nrctadst
              ,craplau.dsorigem
              ,craplau.cdagenci
              ,craplau.cdbccxlt
              ,craplau.nrdolote
              ,craplau.nrseqdig
              ,craplau.dtmvtolt
              ,craplau.cdtiptra
              ,craplau.idlancto
              ,craplau.nrseqagp
              ,craplau.dslindig
              ,craplau.progress_recid
        FROM craplau craplau
        WHERE craplau.cdcooper = pr_cdcooper   
        AND   craplau.nrdconta = pr_nrdconta  
        AND   craplau.dtmvtopg > to_date('04/30/1997','MM/DD/YYYY')     
        AND ((craplau.dtmvtopg >= pr_dtiniper        
        AND   craplau.dtmvtopg <= pr_dtfimper)       
         OR   pr_dtiniper IS NULL 
        AND   pr_dtfimper IS NULL)  
        AND   craplau.dtdebito IS NULL
        and   craplau.vllanaut > 0
        UNION
                SELECT craplau.cdhistor
              ,craplau.dtmvtopg
              ,craplau.vllanaut
              ,craplau.nrdocmto
              ,craplau.dscedent
              ,craplau.nrctadst
              ,craplau.dsorigem
              ,craplau.cdagenci
              ,craplau.cdbccxlt
              ,craplau.nrdolote
              ,craplau.nrseqdig
              ,craplau.dtmvtolt
              ,craplau.cdtiptra
              ,craplau.idlancto			  
              ,craplau.nrseqagp		
              ,craplau.dslindig              	  
              ,craplau.progress_recid
        FROM craplau craplau
        WHERE craplau.cdcooper = pr_cdcooper
        AND   craplau.nrdconta = pr_nrdconta
        AND   craplau.dtmvtopg > to_date('04/30/1997','MM/DD/YYYY')
        AND craplau.dtmvtopg <= (SELECT crapdat.dtmvtolt from crapdat
                                  where crapdat.cdcooper = pr_cdcooper )
        and   craplau.vllanaut > 0
        AND   craplau.dtdebito IS NULL;

      --Busca dados de agendamento de DARF/DAS
      CURSOR cr_darf_das(pr_idlancto craplau.idlancto%TYPE) IS
      SELECT darf_das.tppagamento
            ,NVL(darf_das.dsidentif_pagto
                ,DECODE(darf_das.tppagamento,1,'DARF',2,'DAS')) dsidentif_pagto
        FROM tbpagto_agend_darf_das darf_das
       WHERE darf_das.idlancto = pr_idlancto;
      rw_darf_das cr_darf_das%ROWTYPE;

      --Selecionar avisos
      CURSOR cr_crapavs (pr_cdcooper IN crapavs.cdcooper%type
                        ,pr_nrdconta IN crapavs.nrdconta%type
                        ,pr_dtrefere IN crapavs.dtrefere%type) IS
      SELECT crapavs.cdhistor
            ,crapavs.tpdaviso
            ,crapavs.dtdebito
            ,crapavs.nrdocmto
            ,crapavs.progress_recid
            ,(crapavs.vllanmto - crapavs.vldebito) vllanmto
      FROM crapavs crapavs
      WHERE crapavs.cdcooper = pr_cdcooper          
      AND   crapavs.nrdconta = pr_nrdconta         
      AND   crapavs.tpdaviso IN (1,3) 
      AND   crapavs.insitavs = 0                   
      AND   (crapavs.flgproce = 0 OR (crapavs.cdhistor = 108 AND crapavs.dtrefere = pr_dtrefere));
      rw_crapavs cr_crapavs%ROWTYPE;
      --Selecionar Subscricao de Capital
      CURSOR cr_crapsdc (pr_cdcooper IN crapsdc.cdcooper%type
                        ,pr_nrdconta IN crapsdc.nrdconta%type
                        ,pr_dtrefere IN crapsdc.dtrefere%type) IS
        SELECT crapsdc.dtrefere
              ,crapsdc.tplanmto
              ,crapsdc.nrseqdig
              ,crapsdc.vllanmto
        FROM crapsdc crapsdc
        WHERE crapsdc.cdcooper = pr_cdcooper    
        AND   crapsdc.nrdconta = pr_nrdconta   
        AND   crapsdc.indebito = 0             
        AND   crapsdc.dtrefere <= pr_dtrefere       
        ORDER BY cdcooper, dtrefere, nrdconta, tplanmto;                                 
      
      --> Buscar faturas de cartoes 
      CURSOR cr_fatura  (pr_cdcooper IN crapsdc.cdcooper%type
                        ,pr_nrdconta IN crapsdc.nrdconta%TYPE
                        ,pr_dtiniper IN tbcrd_fatura.dtvencimento%TYPE
						            ,pr_dtfimper IN tbcrd_fatura.dtvencimento%TYPE) IS
        SELECT fatura.dtvencimento
              ,fatura.dsdocumento
              ,fatura.vlpendente
              ,fatura.progress_recid
          FROM  tbcrd_fatura fatura
       WHERE fatura.cdcooper = pr_cdcooper
         AND fatura.nrdconta = pr_nrdconta
         AND fatura.insituacao = 1
         AND fatura.vlpendente > 0
         AND ((fatura.dtvencimento > pr_dtiniper
         AND fatura.dtvencimento <= pr_dtfimper) 
          OR pr_dtiniper IS NULL 
         AND pr_dtfimper IS NULL); 
      
      --Selecionar Cadastro de linhas de credito rotativos
      CURSOR cr_craplrt (pr_cdcooper IN craplrt.cdcooper%TYPE
                        ,pr_cddlinha IN craplrt.cddlinha%TYPE) IS
        SELECT craplrt.ROWID
               ,craplrt.cddlinha
               ,craplrt.qtdiavig
               ,craplrt.txmensal
        FROM craplrt craplrt
        WHERE  craplrt.cdcooper = pr_cdcooper
        AND    craplrt.cddlinha = pr_cddlinha;
      rw_craplrt cr_craplrt%ROWTYPE; 
      --Selecionar contratos de limites de creditos
      CURSOR cr_craplim (pr_cdcooper IN craplim.cdcooper%TYPE
                        ,pr_nrdconta IN craplim.nrdconta%TYPE
                        ,pr_tpctrlim IN craplim.tpctrlim%TYPE
                        ,pr_insitlim IN craplim.insitlim%TYPE) IS
         SELECT *
           FROM (SELECT craplim.nrdconta
                       ,craplim.cddlinha
                       ,craplim.dtinivig
                       ,craplim.vllimite
                       ,rownum nrlinha
                 FROM craplim craplim
                 WHERE  craplim.cdcooper = pr_cdcooper
                 AND    craplim.nrdconta = pr_nrdconta
                 AND    craplim.tpctrlim = pr_tpctrlim
                 AND    craplim.insitlim = pr_insitlim
                 ORDER BY craplim.cdcooper 
                        , craplim.nrdconta
                        , craplim.dtinivig
                        , craplim.tpctrlim
                        , craplim.nrctrlim)
          ORDER BY nrlinha DESC;  -- Order by realizado para simular o FIND LAST do progress
      rw_craplim cr_craplim%ROWTYPE;
      --Selecionar Historicos
      CURSOR cr_craphis (pr_cdcooper IN craphis.cdcooper%TYPE
                       ,pr_cdhistor IN craphis.cdhistor%TYPE) IS        
        SELECT craphis.indebfol
              ,craphis.inhistor
              ,craphis.dshistor
              ,craphis.indebcre
              ,craphis.cdhistor
              ,craphis.inperdes
        FROM craphis craphis
        WHERE craphis.cdcooper = pr_cdcooper       
        AND   craphis.cdhistor = pr_cdhistor;                      
      rw_craphis cr_craphis%ROWTYPE; 
      --Selecionar Lancamento Agendado Tarifa
      CURSOR cr_craplat (pr_cdcooper IN craplat.cdcooper%type
                        ,pr_nrdconta IN craplat.nrdconta%type) IS
        SELECT craplat.cdhistor
              ,craplat.dtmvtolt
              ,craplat.nrdocmto
              ,craplat.idseqlat
              ,craplat.vltarifa
        FROM craplat craplat
        WHERE craplat.cdcooper = pr_cdcooper  
        AND   craplat.nrdconta = pr_nrdconta 
        AND   craplat.insitlat = 1; /* Pendente */ 
      --Selecionar Cadastro Coopera
      CURSOR cr_crapcco_float(pr_cdcooper IN crapcco.cdcooper%type) IS                                                         
        SELECT NVL(MAX(crapceb.qtdfloat),0)
        FROM crapcco crapcco
            ,crapceb crapceb
        WHERE crapceb.cdcooper = crapcco.cdcooper
        AND   crapceb.nrconven = crapcco.nrconven
        AND   crapcco.cdcooper = pr_cdcooper
		AND   crapceb.nrdconta = pr_nrdconta 
        AND   crapcco.cddbanco = 085;
      --Selecionar Controles 
      CURSOR cr_crapret (pr_cdcooper IN crapcco.cdcooper%type
                        ,pr_nrdconta IN crapass.nrdconta%type
                        ,pr_dtmvtolt IN crapdat.dtmvtolt%type
                        ,pr_dtrefere IN crapdat.dtmvtolt%type) IS  
        SELECT crapcco.nrconven
              ,crapret.dtcredit
              ,crapret.vlrpagto
              ,count(1)     over (PARTITION BY crapcco.nrconven,crapceb.qtdfloat,crapret.dtcredit) nrtotreg 
              ,row_number() over (PARTITION BY crapcco.nrconven,crapceb.qtdfloat,crapret.dtcredit
                                  ORDER BY crapcco.nrconven,crapceb.qtdfloat,crapret.dtcredit) nrseqreg
        FROM crapcco,crapceb,crapret 
        WHERE crapcco.cdcooper = pr_cdcooper
        AND   crapcco.cddbanco = 085 
        AND   crapceb.cdcooper = crapcco.cdcooper
        AND   crapceb.nrdconta = pr_nrdconta
        AND   crapceb.nrconven = crapcco.nrconven 
        AND   crapret.cdcooper = crapceb.cdcooper
        AND   crapret.nrdconta = crapceb.nrdconta
        AND   crapret.nrcnvcob = crapceb.nrconven
        AND   crapret.dtocorre >= pr_dtrefere
        AND   crapret.dtcredit >= pr_dtmvtolt
        AND   crapret.flcredit = 0  /* FALSE */
        AND   crapret.cdocorre IN (6,17)
        AND   crapret.vlrpagto > 0;  

      -- Selecionar os codigos de historico 'de-para' Cabal
      CURSOR cr_craphcb IS
        SELECT tbcrd.cdhistor
          FROM craphcb hcb,
               tbcrd_his_vinculo_bancoob tbcrd
         WHERE tbcrd.cdtrnbcb = hcb.cdtrnbcb;
    
      -- Busca empresa utilizando novo produto de folha
      CURSOR cr_empresa_folha(pr_cdcooper crapcop.cdcooper%TYPE
                             ,pr_nrdconta crapass.nrdconta%TYPE) IS
          SELECT emp.cdempres
                ,emp.idtpempr
                ,emp.cdcontar
            FROM crapemp emp
           WHERE emp.cdcooper = pr_cdcooper
             AND emp.nrdconta = pr_nrdconta;
      rw_empresa_folha cr_empresa_folha%ROWTYPE;

      -- Lançamentos de Debito de Folha
      CURSOR cr_lancto_deb_folha(p_cdcooper crapcop.cdcooper%TYPE
                                ,p_cdempres crapemp.cdempres%TYPE
                                ,p_idtpempr crapemp.idtpempr%TYPE) IS
          SELECT pfp.nrseqpag
                ,pfp.dtdebito
                ,pfp.dtmvtolt
                ,pfp.PROGRESS_RECID
                ,his.cdhistor
                ,his.dshistor
                ,his.indebcre
                ,his.inhistor
                ,SUM(lfp.vllancto) vllctpag
            FROM crappfp pfp
                ,crapofp ofp
                ,craplfp lfp
                ,craphis his
           WHERE pfp.cdcooper = p_cdcooper
             AND pfp.cdempres = p_cdempres
             AND pfp.idsitapr > 3 --> Aprovados
             AND pfp.idsitapr <> 6 --> Transacao Pendente
             AND pfp.flsitdeb = 0 --> Ainda nao debitado
             AND lfp.cdcooper = pfp.cdcooper
             AND lfp.cdempres = pfp.cdempres
             AND lfp.nrseqpag = pfp.nrseqpag
             AND ofp.cdcooper = pfp.cdcooper
             AND ofp.cdorigem = lfp.cdorigem
             AND his.cdcooper = pfp.cdcooper
             AND his.cdhistor = decode(p_idtpempr, 'C', ofp.cdhsdbcp, ofp.cdhisdeb)
           GROUP BY pfp.nrseqpag
                   ,pfp.dtdebito
                   ,pfp.dtmvtolt
                   ,pfp.PROGRESS_RECID
                   ,his.cdhistor
                   ,his.dshistor
                   ,his.indebcre
                   ,his.inhistor
           ORDER BY pfp.nrseqpag;

      -- Lançamentos de Débito de Tarifa
      CURSOR cr_lancto_deb_tarifa(p_cdcooper crapcop.cdcooper%TYPE
                                 ,p_cdempres crapemp.cdempres%TYPE
                                 ,p_cdcontar crapemp.cdcontar%TYPE) IS
         SELECT pfp.nrseqpag
              ,pfp.PROGRESS_RECID
              ,pfp.qtlctpag * pfp.vltarapr vltottar
              ,pfp.dtcredit
              ,pfp.dtmvtolt
              ,folh0001.fn_histor_tarifa_folha(pfp.cdcooper
                                              ,p_cdcontar
                                              ,pfp.idopdebi
                                              ,pfp.vllctpag) cdhistor
          FROM crappfp pfp
         WHERE pfp.cdcooper = p_cdcooper
           AND pfp.cdempres = p_cdempres
           AND pfp.idsitapr > 3 /* Aprovado */
           AND pfp.idsitapr <> 6 --> Transacao Pendente
           AND pfp.flsittar = 0 --> Ainda não debitado a tarifa
           AND pfp.vltarapr > 0 --> Com tarifa a cobrar
         ORDER BY pfp.nrseqpag;
         
      -- Lançamentos de Crédito de Folha
      CURSOR cr_lancto_cred_folha(p_cdcooper crapcop.cdcooper%TYPE
                                 ,p_nrdconta craplfp.nrdconta%TYPE) IS         
         SELECT pfp.nrseqpag
              ,lfp.nrseqlfp
              ,lfp.PROGRESS_RECID
              ,pfp.dtcredit
              ,pfp.dtmvtolt
              ,his.cdhistor
              ,his.dshistor
              ,his.indebcre
              ,his.inhistor
              ,lfp.vllancto
          FROM crappfp pfp
              ,crapemp emp
              ,crapofp ofp
              ,craplfp lfp
              ,craphis his
         WHERE pfp.cdcooper = p_cdcooper
           AND lfp.nrdconta = p_nrdconta
           AND pfp.idsitapr > 3 /* Aprovado */
           AND pfp.idsitapr <> 6 --> Transacao pendente
           AND pfp.flsitcre = 0 --> Pagamento ainda não creditado
           AND lfp.idsitlct = 'L' --> Somente os lançados
           AND lfp.idtpcont = 'C' --> Somente associados Cecred
           AND lfp.vllancto > 0   --> Remover lançamentos zerados
           AND pfp.cdcooper = lfp.cdcooper
           AND pfp.cdempres = lfp.cdempres
           AND pfp.nrseqpag = lfp.nrseqpag
           AND pfp.cdcooper = emp.cdcooper
           AND pfp.cdempres = emp.cdempres
           AND lfp.cdcooper = ofp.cdcooper
           AND lfp.cdorigem = ofp.cdorigem
           AND his.cdcooper = ofp.cdcooper
           AND his.cdhistor = DECODE(emp.idtpempr,'C',ofp.cdhscrcp,ofp.cdhiscre)
           AND ((pfp.dtcredit >= pr_dtiniper
           AND   pfp.dtcredit <= pr_dtfimper)
           OR   pr_dtiniper IS NULL
           AND  pr_dtfimper IS NULL)
         ORDER BY pfp.nrseqpag,lfp.nrseqlfp;
  
      /* busca lancamentos de tarifas agendados e pendentes para listar */
      CURSOR cr_craptdb(pr_cdcooper crapcop.cdcooper%TYPE,
                        pr_nrdconta crapass.nrdconta%TYPE,
                        pr_dtmvtolt crapdat.dtmvtolt%TYPE) IS
      SELECT tdb.dtvencto,
             tdb.vltitulo,
             tdb.cdcooper,
             tdb.cdbandoc,
             tdb.nrdctabb,
             tdb.nrcnvcob,
             tdb.nrdconta,
             tdb.nrdocmto
        FROM craptdb tdb
       WHERE tdb.cdcooper = pr_cdcooper
         AND tdb.nrdconta = pr_nrdconta
         AND tdb.insittit = 4
         AND tdb.dtvencto < pr_dtmvtolt
         AND tdb.dtdpagto IS NULL;

		 -- Buscar recargas pendentes
		 CURSOR cr_recargas(pr_cdcooper IN crapcop.cdcooper%TYPE
		                   ,pr_nrdconta IN crapass.nrdconta%TYPE
											 ,pr_dtinirec IN tbrecarga_operacao.dtrecarga%TYPE
											 ,pr_dtfimrec IN tbrecarga_operacao.dtrecarga%TYPE) IS
		   SELECT topr.idoperacao
			       ,topr.dtrecarga
						 ,topr.vlrecarga
						 ,tope.cdhisdeb_cooperado
			   FROM tbrecarga_operacao topr
				     ,tbrecarga_operadora tope
        WHERE topr.cdcooper = pr_cdcooper
				  AND topr.nrdconta = pr_nrdconta
					AND topr.insit_operacao = 1
					AND (topr.dtrecarga BETWEEN pr_dtinirec AND pr_dtfimrec
					 OR pr_dtinirec IS NULL AND pr_dtfimrec IS NULL)
					AND tope.cdoperadora = topr.cdoperadora;
		 rw_recargas cr_recargas%ROWTYPE;
					
     CURSOR cr_crapcob(pr_cdcooper crapcop.cdcooper%TYPE,
                       pr_cdbandoc crapcob.cdbandoc%TYPE,
                       pr_nrdctabb crapcob.nrdctabb%TYPE,
                       pr_nrcnvcob crapcob.nrcnvcob%TYPE,
                       pr_nrdconta crapcob.nrdconta%TYPE,
                       pr_nrdocmto crapcob.nrdocmto%TYPE) IS
     SELECT crapcob.nrnosnum
       FROM crapcob
      WHERE crapcob.cdcooper = pr_cdcooper
        AND crapcob.cdbandoc = pr_cdbandoc
        AND crapcob.nrdctabb = pr_nrdctabb
        AND crapcob.nrcnvcob = pr_nrcnvcob
        AND crapcob.nrdconta = pr_nrdconta
        AND crapcob.nrdocmto = pr_nrdocmto;
     rw_crapcob cr_crapcob%ROWTYPE;
     Cursor cr_valoresTAA(pr_cdcooper crapcop.cdcooper%TYPE,
                          pr_nrdconta crapcob.nrdconta%TYPE) is
     select crapass.cdcooper,
            crapass.nrdconta,
            nvl(cre.credito,0) Credito,
            nvl(deb.debito,0)  Debito
       from crapass,
            (SELECT craplau.cdcooper ,
                    craplau.nrdconta ,
                    sum(craplau.vllanaut) Credito
               FROM craplau
             WHERE craplau.dtmvtopg > to_date('04/30/1997','MM/DD/YYYY')
               AND trunc(craplau.dtmvtopg,'MM') <= (select trunc(crapdat.dtmvtolt,'MM')  from crapdat
                                         where cdcooper = pr_cdcooper)
               AND   craplau.dtdebito IS NULL
               and   nvl(craplau.vllanaut,0) > 0
               and exists ( select 1 from craphis
                              where  craphis.indebcre = 'C'
                                and craphis.cdhistor = craplau.cdhistor)
             group by
             craplau.cdcooper ,
             craplau.nrdconta ) cre ,
            (SELECT craplau.cdcooper ,
                    craplau.nrdconta ,
                    sum(craplau.vllanaut) debito
               FROM craplau craplau
             WHERE craplau.dtmvtopg > to_date('04/30/1997','MM/DD/YYYY')
               AND trunc(craplau.dtmvtopg,'MM') <= (select trunc(crapdat.dtmvtolt,'MM')  from crapdat
                                         where cdcooper = pr_cdcooper)
               AND   craplau.dtdebito IS NULL
               and   nvl(craplau.vllanaut,0) > 0
               and exists ( select 1 from craphis
                            where  craphis.indebcre = 'D'
                              and craphis.cdhistor = craplau.cdhistor)
             group by
             craplau.cdcooper ,
             craplau.nrdconta ) deb
          where crapass.cdcooper = pr_cdcooper
            and crapass.nrdconta = pr_nrdconta
            and crapass.cdcooper = cre.cdcooper(+)
            and crapass.nrdconta = cre.nrdconta(+)
            and crapass.cdcooper =  deb.cdcooper(+)
            and crapass.nrdconta = deb.nrdconta(+);

           rw_valoresTAA cr_valoresTAA%ROWTYPE;

      -- buscar credito futuro de pagto de boletos NPC
      -- pagos fora do sistema CECRED (Projeto 340)
      -- Registros alimentados pelo pc_crps711;
      CURSOR cr_cred_npc (pr_cdcooper IN crapass.cdcooper%TYPE,
                          pr_nrdconta IN crapass.nrdconta%TYPE,
                          pr_dtmvtolt IN crapdat.dtmvtolt%TYPE) IS     
        SELECT t.dtcredito
              ,t.dtmvtolt
              ,SUM(decode(t.tpoperac_jd,'BO',t.vlbaixa,-t.vlbaixa)) vlcredito
              ,COUNT(*) qtcredito
              ,nvl(t.flgbaixa_efetiva,0) flgefetv
          FROM tbcobran_baixa_operac t
        WHERE t.cdcooper = pr_cdcooper
          AND t.nrdconta = pr_nrdconta
          AND t.dtcredito >= pr_dtmvtolt
          AND t.tpoperac_jd IN ('BO','CB') -- BO=é um crédito futuro, CB=é um débito futuro
          AND not exists (
                          --se já existir crepret com ocorrencia 6 ou 17 então
                          --será exibido somente no cursor cr_crapret (SD793999 e SD795994)
                          select 1
                          from crapret ret
                          where ret.cdcooper = t.cdcooper
                            and ret.nrcnvcob = t.nrcnvcob
                            and ret.nrdconta = t.nrdconta
                            and ret.nrdocmto = t.nrdocmto
                            AND ret.cdocorre IN (6,17)
                         )
        GROUP BY
               t.dtcredito
              ,t.dtmvtolt
              ,t.flgbaixa_efetiva;
      rw_cred_npc cr_cred_npc%ROWTYPE;          
           
      --Busca dados de agendamento de tributos
      CURSOR cr_agen_trib(pr_idlancto craplau.idlancto%TYPE) IS
      SELECT trib.tppagamento
            ,NVL(trib.dsidenti_pagto, 
                          DECODE(trib.tppagamento,3,'FGTS',4,'DAE','')) dsidentif_pagto
        FROM cecred.tbpagto_agend_tributos trib
       WHERE trib.idlancto = pr_idlancto;
      rw_agen_trib cr_agen_trib%ROWTYPE;
      
      --Variaveis Locais
      vr_cdhistaa INTEGER;
      vr_cdhsetaa INTEGER;
      vr_cdhisint INTEGER;
      vr_cdhseint INTEGER;
      vr_contadct INTEGER;
      vr_vltarpro NUMBER;
      vr_vllautom NUMBER;
      vr_vllaudeb NUMBER;
      vr_vllaucre NUMBER;
      vr_vllandeb NUMBER;
      vr_vlpresta crapepr.vlsdeved%TYPE;
      vr_dtdivulg DATE;
      vr_dtvigenc DATE;
      vr_cdfvlcop INTEGER;
      vr_index    INTEGER;
      vr_cdbattaa VARCHAR2(100);
      vr_cdbatint VARCHAR2(100);
      vr_dtrefere DATE;
      vr_dtddlslf DATE;
      vr_txjurneg NUMBER(35,10);
      vr_txjursaq NUMBER(35,10);
      vr_flgimune BOOLEAN;
      vr_qtregist INTEGER;
      vr_dtdpagto DATE;
      vr_dsorigem VARCHAR2(100);
      vr_dstransa VARCHAR2(100);
      vr_nrdrowid ROWID;
      vr_qtdfloat INTEGER;
      vr_vldpagto NUMBER;
      vr_qtdpagto INTEGER;
      vr_dtfatura DATE;
      vr_dtiniper DATE;
      vr_dtiniper01 DATE;
      vr_dtfimper01 DATE;
      vr_dscedent VARCHAR(300);
      vr_idlstdom NUMBER;
      vr_incancel INTEGER;
      vr_possuipr VARCHAR2(1);				  
      vr_inimpede_talionario INTEGER;
      --Variaveis para uso na craptab
      vr_dstextab    craptab.dstextab%TYPE;
      vr_lshistor    craptab.dstextab%TYPE;
      vr_tab_cpmf    craptab.dstextab%TYPE;
      vr_juros_negat craptab.dstextab%TYPE;
      vr_juros_saque craptab.dstextab%TYPE;
      vr_digitaliza  craptab.dstextab%TYPE;
      vr_parempctl   craptab.dstextab%TYPE;
      vr_tab_txcpmfcc NUMBER;
      vr_tab_txrdcpmf NUMBER;
      vr_tab_indabono INTEGER;
      vr_tab_dtinipmf DATE;
      vr_tab_dtfimpmf DATE;
      vr_tab_dtiniabo DATE;
      vr_inusatab     BOOLEAN;
      --Variaveis para uso nos Indices
      vr_index_epr VARCHAR2(100);
      --Tabela de Memoria de Resultados
      TYPE typ_tab_resulta IS VARRAY(4) OF NUMBER;
      vr_tab_resulta typ_tab_resulta := typ_tab_resulta(0,0,0,0);
      --Tabela de Memoria de dados emprestimo
      vr_tab_dados_epr empr0001.typ_tab_dados_epr; 
      -- cursor genérico de calendário
      rw_crapdat btch0001.cr_crapdat%ROWTYPE;
      --Variaveis Erro
      vr_cdcritic  INTEGER;
      vr_dscritic  VARCHAR2(4000);  
      vr_des_reto  VARCHAR2(3);      
      --Variaveis de Excecoes
      vr_exc_erro EXCEPTION;
      vr_exc_sair EXCEPTION;
      vr_next_reg EXCEPTION;
      vr_exc_sucesso EXCEPTION;
      
      -- Historicos 'de-para' Cabal
      vr_cdhishcb VARCHAR2(4000);
      
      -- data de vencimento do titulo em dia util
      vr_dtvencto_titulo DATE;
      vr_dt_ultimo_dia   DATE;
    BEGIN
      --Inicializar tabelas memoria
      pr_tab_erro.DELETE;
      pr_tab_totais_futuros.DELETE;
      pr_tab_lancamento_futuro.DELETE;

      --Inicializar Variaveis
      vr_cdcritic:= 0;
      vr_dscritic:= NULL;

      --Zerar Valores
      vr_vllautom:= 0;
      vr_vllaudeb:= 0;
      vr_vllaucre:= 0;
      
      /** Atribui descricao da origem e da transacao **/
      vr_dsorigem:= gene0001.vr_vet_des_origens(pr_idorigem);
      vr_dstransa:= 'Consulta lancamentos futuros.';
      
      --Buscar Data do Sistema para a cooperativa 
      OPEN btch0001.cr_crapdat(pr_cdcooper => pr_cdcooper);
      FETCH btch0001.cr_crapdat INTO rw_crapdat;
      --Se nao encontrou
      IF btch0001.cr_crapdat%NOTFOUND THEN
        -- Fechar Cursor
        CLOSE btch0001.cr_crapdat;
        -- montar mensagem de critica
        vr_cdcritic:= 1;
        vr_dscritic:= NULL;
        -- Levantar Excecao
        RAISE vr_exc_erro;
      ELSE
        -- apenas fechar o cursor
        CLOSE btch0001.cr_crapdat;
      END IF;

      --Selecionar associado
      OPEN cr_crapass (pr_cdcooper => pr_cdcooper
                      ,pr_nrdconta => pr_nrdconta);
      --Posicionar no proximo registro
      FETCH cr_crapass INTO rw_crapass;
      --Se nao encontrou
      IF cr_crapass%NOTFOUND THEN
        --Fechar Cursor
        CLOSE cr_crapass;
        --mensagem erro
        vr_cdcritic:= 3;
        vr_dscritic:= NULL;
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;  
      --Fechar Cursor
      CLOSE cr_crapass;
      
      --Internet/TAA e nao for cecred
      IF (pr_idorigem = 3  OR
          pr_idorigem = 4) AND
          pr_cdcooper <> 3 THEN
        --Selecionar Dados Agencia
        OPEN cr_crapage(pr_cdcooper => pr_cdcooper
                       ,pr_cdagenci => pr_cdagenci);
        FETCH cr_crapage INTO rw_crapage;
        --Se nao Encontrou            
        IF cr_crapage%NOTFOUND THEN
          --Fechar Cursor
          CLOSE cr_crapage;
          --Codigo Critica    
          vr_cdcritic:= 962;
          vr_dscritic:= NULL;
          --Sair
          RAISE vr_exc_erro;
        END IF;  
        -- Fechar o cursor
        CLOSE cr_crapage;
        --Quantidade de dias para listar lancamentos futuros.
        vr_dtddlslf:= PAGA0001.fn_busca_datdodia (pr_cdcooper) + rw_crapage.qtddlslf;
      END IF;  
      /*  Busca tabela com a taxa do CPMF */
      vr_tab_cpmf:= TABE0001.fn_busca_dstextab(pr_cdcooper => pr_cdcooper
                                              ,pr_nmsistem => 'CRED'
                                              ,pr_tptabela => 'USUARI'
                                              ,pr_cdempres => 11
                                              ,pr_cdacesso => 'CTRCPMFCCR'
                                              ,pr_tpregist => 1);
      --Se nao encontrou                                              
      IF vr_tab_cpmf IS NULL THEN
        --Codigo Critica    
        vr_cdcritic:= 641;
        vr_dscritic:= NULL;
        --Sair
        RAISE vr_exc_erro;
      ELSE
        --Data Inicio cpmf
        vr_tab_dtinipmf:= TO_DATE(SUBSTR(vr_tab_cpmf,1,10),'DD/MM/YYYY');
        --Data Final cpmf
        vr_tab_dtfimpmf:= TO_DATE(SUBSTR(vr_tab_cpmf,12,10),'DD/MM/YYYY');
        --Data Movimento estiver no periodo da cpmf
        IF rw_crapdat.dtmvtolt BETWEEN vr_tab_dtinipmf AND vr_tab_dtfimpmf THEN 
          vr_tab_txcpmfcc:= gene0002.fn_char_para_number(SUBSTR(vr_tab_cpmf,23,13));
          vr_tab_txrdcpmf:= gene0002.fn_char_para_number(SUBSTR(vr_tab_cpmf,38,13));
        ELSE 
         vr_tab_txcpmfcc:= 0;
          vr_tab_txrdcpmf:= 1;
        END IF;
        --Abono  
        vr_tab_indabono:= gene0002.fn_char_para_number(SUBSTR(vr_tab_cpmf,51,1));  /* 0 = abona 1 = nao abona */
        --Data Inicio Abono
        vr_tab_dtiniabo:= TO_DATE(SUBSTR(vr_tab_cpmf,53,10),'DD/MM/YYYY');           
      END IF;  

      --Valor Lancamento Debito
      vr_vllandeb:= vr_vllautom;
      
      /*Carrega taxa de juros do cheque especial, da multa c/c, multa s/saque bloq. */
      vr_juros_negat:= TABE0001.fn_busca_dstextab(pr_cdcooper => pr_cdcooper
                                                 ,pr_nmsistem => 'CRED'
                                                 ,pr_tptabela => 'USUARI'
                                                 ,pr_cdempres => 11
                                                 ,pr_cdacesso => 'JUROSNEGAT'
                                                 ,pr_tpregist => 1);
      --Se nao encontrou                                              
      IF vr_juros_negat IS NULL THEN
        --Codigo Critica    
        vr_cdcritic:= 162;
        vr_dscritic:= NULL;
        --Sair
        RAISE vr_exc_erro;
      ELSE
        --taxa Juros negativo
        vr_txjurneg:= gene0002.fn_char_para_number(SUBSTR(vr_juros_negat,1,10)) / 100;  
      END IF;  
      
      /*Carrega taxa de juros de saque */
      vr_juros_saque:= TABE0001.fn_busca_dstextab(pr_cdcooper => pr_cdcooper
                                                 ,pr_nmsistem => 'CRED'
                                                 ,pr_tptabela => 'USUARI'
                                                 ,pr_cdempres => 11
                                                 ,pr_cdacesso => 'JUROSSAQUE'
                                                 ,pr_tpregist => 1);
      --Se nao encontrou                                              
      IF vr_juros_saque IS NULL THEN
        --Codigo Critica    
        vr_cdcritic:= 162;
        vr_dscritic:= NULL;
        --Sair
        RAISE vr_exc_erro;
      ELSE
        --taxa Juros negativo
        vr_txjursaq:= gene0002.fn_char_para_number(SUBSTR(vr_juros_saque,1,10)) / 100;  
      END IF;  
      
      /*Carrega Historico de Cheques */
      vr_lshistor:= TABE0001.fn_busca_dstextab(pr_cdcooper => pr_cdcooper
                                              ,pr_nmsistem => 'CRED'
                                              ,pr_tptabela => 'GENERI'
                                              ,pr_cdempres => 0
                                              ,pr_cdacesso => 'HSTCHEQUES'
                                              ,pr_tpregist => 0);
      --Se nao encontrou                                              
      IF vr_lshistor IS NULL THEN
        vr_lshistor:= '999';  
      END IF;  

      --Selecionar Lancamentos Automaticos
      FOR rw_craplau IN cr_craplau (pr_cdcooper => pr_cdcooper
                                   ,pr_nrdconta => pr_nrdconta
                                   ,pr_dtiniper => pr_dtiniper
                                   ,pr_dtfimper => pr_dtfimper) LOOP
        --Se nao for cecred e for Internet ou TAA
        IF pr_cdcooper <> 3 AND pr_cdagenci IN (90,91) AND rw_craplau.dtmvtopg > vr_dtddlslf THEN
          --Proximo Registro
          CONTINUE;
        END IF; 
        /* Tratar cheques da Consumo */
        IF  rw_craplau.cdhistor IN (21,26) AND 
            to_number(to_char(rw_crapdat.dtmvtolt,'DD')) < 16 AND
            to_number(to_char(rw_craplau.dtmvtopg,'MM')) <> to_number(to_char(rw_crapdat.dtmvtolt,'MM')) THEN
          --Proximo Registro
          CONTINUE;
        END IF;
        --Selecionar Historicos
        OPEN cr_craphis (pr_cdcooper => pr_cdcooper
                        ,pr_cdhistor => rw_craplau.cdhistor);
        FETCH cr_craphis INTO rw_craphis;
        --Se nao encontrou
        IF cr_craphis%NOTFOUND THEN
          --Fechar Cursor
          CLOSE cr_craphis;
          --Codigo Erro
          vr_cdcritic:= 80;
          vr_dscritic:= NULL;
          --Levantar Excecao
          RAISE vr_exc_erro;
        END IF;
        --Fechar Cursor
        CLOSE cr_craphis;  
        --Debito em Folha
        IF rw_craphis.indebfol > 0 THEN
          --Proximo Registro
          CONTINUE;
        END IF; 

        IF rw_craphis.inperdes = 1 AND (pr_nmdatela LIKE 'MATRIC' OR pr_nmdatela LIKE 'CONTAS') THEN
          CONTINUE;
        END IF;        
        --Tipo Historico
        IF rw_craphis.inhistor IN (1,2,3,4,5) THEN 
          --Valor Lancamento Automatico
          vr_vllautom:= nvl(vr_vllautom,0) + rw_craplau.vllanaut;
          --Valor lancamento Automatico Credito
          vr_vllaucre:= nvl(vr_vllaucre,0) + rw_craplau.vllanaut;
        ELSIF rw_craphis.inhistor IN (11,12,13,14,15) THEN   
          --Valor Lancamento Automatico
          vr_vllautom:= nvl(vr_vllautom,0) - rw_craplau.vllanaut;
          --Valor lancamento Automatico Debito
          vr_vllaudeb:= nvl(vr_vllaudeb,0) + rw_craplau.vllanaut;
        ELSE
          --mensagem erro
          vr_cdcritic:= 83;
          vr_dscritic:= NULL;
          --Levantar Excecao
          RAISE vr_exc_erro;  
        END IF;
        
        IF (rw_craphis.indebcre = pr_indebcre OR nvl(trim(pr_indebcre),'') IS NULL) THEN
        --Inscrementar contador lancamentos na tabela
        vr_index:= pr_tab_lancamento_futuro.COUNT+1;
        --Criar Lancamento Futuro na tabela
        pr_tab_lancamento_futuro(vr_index).dtmvtolt:= rw_craplau.dtmvtopg;
        pr_tab_lancamento_futuro(vr_index).dsmvtolt:= to_char(rw_craplau.dtmvtopg,'DD/MM/YYYY');
        pr_tab_lancamento_futuro(vr_index).dshistor:= rw_craphis.dshistor;
        pr_tab_lancamento_futuro(vr_index).indebcre:= rw_craphis.indebcre;
        pr_tab_lancamento_futuro(vr_index).vllanmto:= rw_craplau.vllanaut;
        --Tamanho String do documento
        IF LENGTH(rw_craplau.nrdocmto) < 10 THEN
          pr_tab_lancamento_futuro(vr_index).nrdocmto:= to_char(rw_craplau.nrdocmto,'fm9999999g990'); 
        ELSE
          pr_tab_lancamento_futuro(vr_index).nrdocmto:= substr(gene0002.fn_mask(rw_craplau.nrdocmto,'fm9999999999999999999999999'),15,11); 
        END IF; 
        pr_tab_lancamento_futuro(vr_index).dstabela := 'craplau';
        pr_tab_lancamento_futuro(vr_index).cdhistor := rw_craplau.cdhistor;
        
        -- Se for origem TRMULTAJUROS e ADIOFJUROS
        IF rw_craplau.dsorigem IN('TRMULTAJUROS','ADIOFJUROS') THEN
          pr_tab_lancamento_futuro(vr_index).genrecid := 0;
          pr_tab_lancamento_futuro(vr_index).fldebito := 1;
        ELSE
        pr_tab_lancamento_futuro(vr_index).genrecid := rw_craplau.progress_recid;
          pr_tab_lancamento_futuro(vr_index).fldebito := 0;
        END IF;

        pr_tab_lancamento_futuro(vr_index).cdagenci := rw_craplau.cdagenci;
        pr_tab_lancamento_futuro(vr_index).cdbccxlt := rw_craplau.cdbccxlt;
        pr_tab_lancamento_futuro(vr_index).nrdolote := rw_craplau.nrdolote;
        pr_tab_lancamento_futuro(vr_index).nrseqdig := rw_craplau.nrseqdig;
        pr_tab_lancamento_futuro(vr_index).dtrefere := rw_craplau.dtmvtolt;
        pr_tab_lancamento_futuro(vr_index).cdtiptra := rw_craplau.cdtiptra;
        pr_tab_lancamento_futuro(vr_index).idlancto := rw_craplau.idlancto;
        
        IF rw_craplau.cdtiptra <> 0 THEN
          IF rw_craplau.cdtiptra = 1 THEN 
            vr_idlstdom := 5; -- Transf. Intracooperativa
          ELSIF rw_craplau.cdtiptra = 3 THEN
            vr_idlstdom := 3; -- Crédito Salário
          ELSIF rw_craplau.cdtiptra = 4 THEN
            vr_idlstdom := 4; -- TED
          ELSIF rw_craplau.cdtiptra = 5 THEN
            vr_idlstdom := 6; -- Transf. Intercooperativa
          ELSIF rw_craplau.cdtiptra = 2 THEN
            IF NVL(rw_craplau.nrseqagp,0) <> 0 THEN 
              vr_idlstdom := 9; -- GPS
            ELSIF LENGTH(NVL(rw_craplau.dslindig,'')) = 55 THEN
              vr_idlstdom := 2; -- Convênio
            ELSE
              vr_idlstdom := 1; -- Título
            END IF;
          ELSIF rw_craplau.cdtiptra = 10 THEN
            IF rw_darf_das.tppagamento = 1 THEN 
              vr_idlstdom := 7; -- DARF
            ELSE 
              vr_idlstdom := 8; -- DAS
            END IF;
          ELSE
            vr_idlstdom := 0;
          END IF;
        END IF;
        
        pr_tab_lancamento_futuro(vr_index).idlstdom := vr_idlstdom;
        pr_tab_lancamento_futuro(vr_index).incancel := 0;
        
        /* Pagtos INTERNET */  
        IF rw_craplau.cdhistor = 508 THEN
          --Descricao do Historico

          vr_dscedent := rw_craplau.dscedent;
          
          -- Se for pagamento de DARF/DAS
          IF rw_craplau.cdtiptra = 10 THEN
            
            OPEN cr_darf_das(pr_idlancto => rw_craplau.idlancto);
            FETCH cr_darf_das INTO rw_darf_das;
            CLOSE cr_darf_das;
            
            vr_dscedent := rw_darf_das.dsidentif_pagto;
            
          ELSIF rw_craplau.cdtiptra IN (12,13) THEN --FGTS, DAE
            OPEN cr_agen_trib(pr_idlancto => rw_craplau.idlancto);
            FETCH cr_agen_trib INTO rw_agen_trib;
            CLOSE cr_agen_trib;

            vr_dscedent := rw_agen_trib.dsidentif_pagto;          
          END IF;
          
          --Chamado 376432
          pr_tab_lancamento_futuro(vr_index).dshistor:= substr(pr_tab_lancamento_futuro(vr_index).dshistor ||' - '||
                                                               vr_dscedent,1,50);
                                                          
        --Historico Conta Destino
        ELSIF rw_craplau.cdhistor IN (375,376,377,537,538,539,771,772,1009) THEN
          --Documento recebe conta destino
          pr_tab_lancamento_futuro(vr_index).nrdocmto:= to_char(rw_craplau.nrctadst,'fm99999g999g9');
        END IF;  
        END IF;
      END LOOP; --rw_craplau
      
      IF rw_crapass.inpessoa <> 1 THEN

      -- Lançamentos de Debito de Folha
        OPEN cr_empresa_folha (pr_cdcooper => pr_cdcooper
                              ,pr_nrdconta => pr_nrdconta);
        FETCH cr_empresa_folha INTO rw_empresa_folha;
        --Se nao encontrou
        IF cr_empresa_folha%FOUND THEN
          --Fechar Cursor
          CLOSE cr_empresa_folha;

      FOR rw_lancto_deb_folha IN cr_lancto_deb_folha(pr_cdcooper                                    
                                                        ,rw_empresa_folha.cdempres
                                                        ,rw_empresa_folha.idtpempr) LOOP
         --Tipo Historico
         IF rw_lancto_deb_folha.inhistor IN (1,2,3,4,5) THEN
           --Valor Lancamento Automatico
           vr_vllautom:= nvl(vr_vllautom,0) + rw_lancto_deb_folha.vllctpag;
           --Valor lancamento Automatico Credito
           vr_vllaucre:= nvl(vr_vllaucre,0) + rw_lancto_deb_folha.vllctpag;
         ELSIF rw_lancto_deb_folha.inhistor IN (11,12,13,14,15) THEN
           --Valor Lancamento Automatico
           vr_vllautom:= nvl(vr_vllautom,0) - rw_lancto_deb_folha.vllctpag;
           --Valor lancamento Automatico Debito
           vr_vllaudeb:= nvl(vr_vllaudeb,0) + rw_lancto_deb_folha.vllctpag;
         ELSE
           --mensagem erro
           vr_cdcritic:= 83;
           vr_dscritic:= NULL;
           --Levantar Excecao
           RAISE vr_exc_erro;
         END IF;
         --Inscrementar contador lancamentos na tabela
         vr_index:= pr_tab_lancamento_futuro.COUNT+1;
         --Criar Lancamento Futuro na tabela
         pr_tab_lancamento_futuro(vr_index).dtmvtolt:= rw_lancto_deb_folha.dtdebito;
         pr_tab_lancamento_futuro(vr_index).dshistor:= rw_lancto_deb_folha.dshistor;
         pr_tab_lancamento_futuro(vr_index).nrdocmto:= to_char(rw_lancto_deb_folha.nrseqpag,'fm9999999g990');          
         pr_tab_lancamento_futuro(vr_index).indebcre:= rw_lancto_deb_folha.indebcre;
         pr_tab_lancamento_futuro(vr_index).vllanmto:= rw_lancto_deb_folha.vllctpag;
         pr_tab_lancamento_futuro(vr_index).dstabela := 'CRAPPFP-DEBITO';
         pr_tab_lancamento_futuro(vr_index).genrecid := rw_lancto_deb_folha.progress_recid;
         pr_tab_lancamento_futuro(vr_index).fldebito := 0;
         pr_tab_lancamento_futuro(vr_index).cdhistor := rw_lancto_deb_folha.cdhistor;
         pr_tab_lancamento_futuro(vr_index).dsmvtolt:= to_char(rw_lancto_deb_folha.dtdebito,'DD/MM/YYYY');                  
      END LOOP;
      
      -- Lançamentos de Débito de Tarifa
      FOR rw_lancto_deb_tarifa IN cr_lancto_deb_tarifa(pr_cdcooper                                    
                                                          ,rw_empresa_folha.cdempres
                                                          ,rw_empresa_folha.cdcontar) LOOP
         --Selecionar Historicos
         OPEN cr_craphis (pr_cdcooper => pr_cdcooper
                         ,pr_cdhistor => rw_lancto_deb_tarifa.cdhistor);
         FETCH cr_craphis INTO rw_craphis;
         --Se nao encontrou
         IF cr_craphis%NOTFOUND THEN
           --Fechar Cursor
           CLOSE cr_craphis;
           --Codigo Erro
           vr_cdcritic:= 80;
           vr_dscritic:= NULL;
           --Levantar Excecao
           RAISE vr_exc_erro;
         END IF;
         --Fechar Cursor
         CLOSE cr_craphis;
         --Tipo Historico
         IF rw_craphis.inhistor IN (1,2,3,4,5) THEN
           --Valor Lancamento Automatico
           vr_vllautom:= nvl(vr_vllautom,0) + rw_lancto_deb_tarifa.vltottar;
           --Valor lancamento Automatico Credito
           vr_vllaucre:= nvl(vr_vllaucre,0) + rw_lancto_deb_tarifa.vltottar;
         ELSIF rw_craphis.inhistor IN (11,12,13,14,15) THEN
           --Valor Lancamento Automatico
           vr_vllautom:= nvl(vr_vllautom,0) - rw_lancto_deb_tarifa.vltottar;
           --Valor lancamento Automatico Debito
           vr_vllaudeb:= nvl(vr_vllaudeb,0) + rw_lancto_deb_tarifa.vltottar;
         ELSE
           --mensagem erro
           vr_cdcritic:= 83;
           vr_dscritic:= NULL;
           --Levantar Excecao
           RAISE vr_exc_erro;
         END IF;
         --Inscrementar contador lancamentos na tabela
         vr_index:= pr_tab_lancamento_futuro.COUNT+1;
         --Criar Lancamento Futuro na tabela
         pr_tab_lancamento_futuro(vr_index).dtmvtolt:= rw_lancto_deb_tarifa.dtcredit;
         pr_tab_lancamento_futuro(vr_index).dshistor:= rw_craphis.dshistor;
         pr_tab_lancamento_futuro(vr_index).nrdocmto:= to_char(rw_lancto_deb_tarifa.nrseqpag,'fm9999999g990');          
         pr_tab_lancamento_futuro(vr_index).indebcre:= rw_craphis.indebcre;
         pr_tab_lancamento_futuro(vr_index).vllanmto:= rw_lancto_deb_tarifa.vltottar;
         pr_tab_lancamento_futuro(vr_index).dstabela := 'CRAPPFP-TARIFA';
         pr_tab_lancamento_futuro(vr_index).genrecid := rw_lancto_deb_tarifa.progress_recid;
         pr_tab_lancamento_futuro(vr_index).fldebito := 0;
         pr_tab_lancamento_futuro(vr_index).cdhistor := rw_lancto_deb_tarifa.cdhistor;
         pr_tab_lancamento_futuro(vr_index).dsmvtolt:= to_char(rw_lancto_deb_tarifa.dtcredit,'DD/MM/YYYY');                  
      END LOOP;
        END IF;
      ELSE
      -- Lançamentos de Crédito de Folha
      FOR rw_lancto_cred_folha IN cr_lancto_cred_folha(pr_cdcooper                                    
                                                      ,pr_nrdconta) LOOP
         --Tipo Historico
         IF rw_lancto_cred_folha.inhistor IN (1,2,3,4,5) THEN
           --Valor Lancamento Automatico
           vr_vllautom:= nvl(vr_vllautom,0) + rw_lancto_cred_folha.vllancto;
           --Valor lancamento Automatico Credito
           vr_vllaucre:= nvl(vr_vllaucre,0) + rw_lancto_cred_folha.vllancto;
         ELSIF rw_lancto_cred_folha.inhistor IN (11,12,13,14,15) THEN
           --Valor Lancamento Automatico
           vr_vllautom:= nvl(vr_vllautom,0) - rw_lancto_cred_folha.vllancto;
           --Valor lancamento Automatico Debito
           vr_vllaudeb:= nvl(vr_vllaudeb,0) + rw_lancto_cred_folha.vllancto;
         ELSE
           --mensagem erro
           vr_cdcritic:= 83;
           vr_dscritic:= NULL;
           --Levantar Excecao
           RAISE vr_exc_erro;
         END IF;
         --Inscrementar contador lancamentos na tabela
         vr_index:= pr_tab_lancamento_futuro.COUNT+1;
         --Criar Lancamento Futuro na tabela
         pr_tab_lancamento_futuro(vr_index).dtmvtolt:= rw_lancto_cred_folha.dtcredit;
         pr_tab_lancamento_futuro(vr_index).dshistor:= rw_lancto_cred_folha.dshistor;
         pr_tab_lancamento_futuro(vr_index).nrdocmto:= TO_CHAR(rw_lancto_cred_folha.nrseqpag,'fm00000')||TO_CHAR(rw_lancto_cred_folha.nrseqlfp,'fm00000');
         pr_tab_lancamento_futuro(vr_index).indebcre:= rw_lancto_cred_folha.indebcre;
         pr_tab_lancamento_futuro(vr_index).vllanmto:= rw_lancto_cred_folha.vllancto;
         pr_tab_lancamento_futuro(vr_index).dstabela := 'CRAPLFP';
         pr_tab_lancamento_futuro(vr_index).genrecid := rw_lancto_cred_folha.progress_recid;
         pr_tab_lancamento_futuro(vr_index).fldebito := 0;
         pr_tab_lancamento_futuro(vr_index).cdhistor := rw_lancto_cred_folha.cdhistor;
         pr_tab_lancamento_futuro(vr_index).dsmvtolt:= to_char(rw_lancto_cred_folha.dtcredit,'DD/MM/YYYY');                  
      END LOOP;
      END IF;
      
      --Data Referencia igual ultimo dia mes anterior
      vr_dtrefere:= last_day(add_months(rw_crapdat.dtmvtolt,-1));
      --Avisos
      FOR rw_crapavs IN cr_crapavs (pr_cdcooper => pr_cdcooper
                                   ,pr_nrdconta => pr_nrdconta
                                   ,pr_dtrefere => vr_dtrefere) LOOP
                                   
        
        -- Se os periodos foram informados, filtrar por eles 
        IF pr_dtiniper IS NOT NULL            AND
           pr_dtfimper IS NOT NULL            AND
           rw_crapavs.dtdebito IS NOT NULL    AND
          (rw_crapavs.dtdebito < pr_dtiniper  OR
           rw_crapavs.dtdebito > pr_dtfimper) THEN
           continue;
         END IF;
                                         
        --Selecionar Historicos
        OPEN cr_craphis (pr_cdcooper => pr_cdcooper
                        ,pr_cdhistor => rw_crapavs.cdhistor);
        FETCH cr_craphis INTO rw_craphis;
        --Se nao encontrou
        IF cr_craphis%NOTFOUND THEN
          --Fechar Cursor
          CLOSE cr_craphis;
          --Codigo Erro
          vr_cdcritic:= 80;
          vr_dscritic:= NULL;
          --Levantar Excecao
          RAISE vr_exc_erro;
        END IF;
        --Fechar Cursor
        CLOSE cr_craphis;
        
        /* Se foi informado credito ou debito, filtrar */
        IF   nvl(trim(pr_indebcre),'') IS NOT NULL AND
             NOT pr_indebcre = rw_craphis.indebcre THEN
            continue;
        END IF;
        
        --Tipo Historico
        IF rw_craphis.inhistor IN (1,2,3,4,5) THEN 
          --Valor Lancamento Automatico
          vr_vllautom:= nvl(vr_vllautom,0) + rw_crapavs.vllanmto;
          --Valor lancamento Automatico Credito
          vr_vllaucre:= nvl(vr_vllaucre,0) + rw_crapavs.vllanmto;
        ELSIF rw_craphis.inhistor IN (11,12,13,14,15) THEN   
          --Valor Lancamento Automatico
          vr_vllautom:= nvl(vr_vllautom,0) - rw_crapavs.vllanmto;
          --Valor lancamento Automatico Debito
          vr_vllaudeb:= nvl(vr_vllaudeb,0) + rw_crapavs.vllanmto;
        ELSE
          --mensagem erro
          vr_cdcritic:= 83;
          vr_dscritic:= NULL;
          --Levantar Excecao
          RAISE vr_exc_erro;  
        END IF;
        --Incrementar contador lancamentos na tabela
        vr_index:= pr_tab_lancamento_futuro.COUNT+1;
        --Criar Lancamento Futuro na tabela
        IF rw_crapavs.tpdaviso = 1 THEN
          pr_tab_lancamento_futuro(vr_index).dtmvtolt:= to_date('01/01/1099','DD/MM/YYYY');
        ELSE
          pr_tab_lancamento_futuro(vr_index).dtmvtolt:= rw_crapavs.dtdebito;
        END IF;    
        pr_tab_lancamento_futuro(vr_index).dshistor:= rw_craphis.dshistor;
        pr_tab_lancamento_futuro(vr_index).nrdocmto:= to_char(rw_crapavs.nrdocmto,'fm999g999g990');
        pr_tab_lancamento_futuro(vr_index).indebcre:= rw_craphis.indebcre;
        pr_tab_lancamento_futuro(vr_index).vllanmto:= rw_crapavs.vllanmto;
        pr_tab_lancamento_futuro(vr_index).dstabela := 'crapavs';
        pr_tab_lancamento_futuro(vr_index).genrecid := rw_crapavs.progress_recid;
        pr_tab_lancamento_futuro(vr_index).fldebito := 0;
        pr_tab_lancamento_futuro(vr_index).cdhistor := rw_crapavs.cdhistor;
        
        --Aviso em Folha
        IF rw_crapavs.tpdaviso = 1 THEN 
          pr_tab_lancamento_futuro(vr_index).dsmvtolt:= 'FOLHA';                                  
        ELSE
          pr_tab_lancamento_futuro(vr_index).dsmvtolt:= to_char(rw_crapavs.dtdebito,'DD/MM/YYYY');
        END IF;    
      END LOOP;
      --Seguros
      FOR rw_crapseg IN cr_crapseg2 (pr_cdcooper => pr_cdcooper
                                    ,pr_nrdconta => pr_nrdconta
                                    ,pr_dtdebito => rw_crapdat.dtmvtolt) LOOP
                                    
        /* Se os periodos foram informados, filtrar por eles */
        IF pr_dtiniper IS NOT NULL  AND
           pr_dtfimper IS NOT NULL  AND
          (rw_crapseg.dtdebito < pr_dtiniper   OR
           rw_crapseg.dtdebito > pr_dtfimper)  THEN
           continue; 
        END IF;                   
                 
        /* Se for somente credito, desconsiderar */
        IF pr_indebcre = 'C' THEN
           continue;
        END IF;
        
        --Incrementar contador lancamentos na tabela
        vr_index:= pr_tab_lancamento_futuro.COUNT+1;
        --Criar Lancamento Futuro na tabela
        pr_tab_lancamento_futuro(vr_index).dtmvtolt:= rw_crapseg.dtdebito;
        pr_tab_lancamento_futuro(vr_index).dsmvtolt:= to_char(rw_crapseg.dtdebito,'DD/MM/YYYY');
        IF rw_crapseg.tpseguro IN (1,11) THEN
          pr_tab_lancamento_futuro(vr_index).dshistor:= 'SEGURO CASA';
        ELSIF rw_crapseg.tpseguro = 2 THEN
          pr_tab_lancamento_futuro(vr_index).dshistor:= 'SEGURO AUTO';
        ELSE
          pr_tab_lancamento_futuro(vr_index).dshistor:= 'SEGURO VIDA';
        END IF;    
        pr_tab_lancamento_futuro(vr_index).nrdocmto:= to_char(rw_crapseg.nrctrseg,'fm999g999g990');
        pr_tab_lancamento_futuro(vr_index).indebcre:= 'D';
        pr_tab_lancamento_futuro(vr_index).vllanmto:= rw_crapseg.vlpreseg;
        --Valor Lancamento Automatico
        vr_vllautom:= nvl(vr_vllautom,0) - rw_crapseg.vlpreseg;
        --Valor Lancamento Debito
        vr_vllaudeb:= nvl(vr_vllaudeb,0) + rw_crapseg.vlpreseg;
      END LOOP;
          
      --Seguros
      FOR rw_craprpp IN cr_craprpp2 (pr_cdcooper => pr_cdcooper
                                    ,pr_nrdconta => pr_nrdconta
                                    ,pr_dtdebito => rw_crapdat.dtmvtolt) LOOP
                                    
        /* Se os periodos foram informados, filtrar por eles */
        IF pr_dtiniper IS NOT NULL  AND
           pr_dtfimper IS NOT NULL  AND
          (rw_craprpp.dtdebito < pr_dtiniper   OR
           rw_craprpp.dtdebito > pr_dtfimper)  THEN
           continue; 
        END IF;                   
                 
        /* Se for somente credito, desconsiderar */
        IF pr_indebcre = 'C' THEN
           continue;
        END IF;
        
        --Incrementar contador lancamentos na tabela
        vr_index:= pr_tab_lancamento_futuro.COUNT+1;
        --Criar Lancamento Futuro na tabela
        pr_tab_lancamento_futuro(vr_index).dtmvtolt:= rw_craprpp.dtdebito;
        pr_tab_lancamento_futuro(vr_index).dsmvtolt:= to_char(rw_craprpp.dtdebito,'DD/MM/YYYY');
        pr_tab_lancamento_futuro(vr_index).dshistor:= 'DB.POUP.PROGR';
        pr_tab_lancamento_futuro(vr_index).nrdocmto:= to_char(rw_craprpp.nrctrrpp,'fm999g999g990');
        pr_tab_lancamento_futuro(vr_index).indebcre:= 'D';
        pr_tab_lancamento_futuro(vr_index).vllanmto:= rw_craprpp.vlprerpp;
        --Valor Lancamento Automatico
        vr_vllautom:= nvl(vr_vllautom,0) - rw_craprpp.vlprerpp;
        --Valor Lancamento Debito
        vr_vllaudeb:= nvl(vr_vllaudeb,0) + rw_craprpp.vlprerpp;
      END LOOP;
      
      --Buscar Indicador Uso Taxa da tabela
      vr_dstextab:= TABE0001.fn_busca_dstextab(pr_cdcooper => pr_cdcooper
                                              ,pr_nmsistem => 'CRED'
                                              ,pr_tptabela => 'USUARI'
                                              ,pr_cdempres => 11
                                              ,pr_cdacesso => 'TAXATABELA'
                                              ,pr_tpregist => 0);
      --Se nao encontrou
      IF vr_dstextab IS NULL THEN
        --Nao usa tabela
        vr_inusatab:= FALSE;
      ELSE
        IF  SUBSTR(vr_dstextab,1,1) = '0' THEN
          --Nao usa tabela
          vr_inusatab:= FALSE;
        ELSE
          --Nao usa tabela
          vr_inusatab:= TRUE;
        END IF;    
      END IF; 
      -- busca o tipo de documento GED    
      vr_digitaliza:= tabe0001.fn_busca_dstextab(pr_cdcooper => pr_cdcooper
                                                ,pr_nmsistem => 'CRED'
                                                ,pr_tptabela => 'GENERI'
                                                ,pr_cdempres => 0
                                                ,pr_cdacesso => 'DIGITALIZA'
                                                ,pr_tpregist => 5);
       
      -- Leitura do indicador de uso da tabela de taxa de juros                                                    
      vr_parempctl:= tabe0001.fn_busca_dstextab(pr_cdcooper => 3 /*Fixo Cecred*/
                                               ,pr_nmsistem => 'CRED'
                                               ,pr_tptabela => 'USUARI'
                                               ,pr_cdempres => 11
                                               ,pr_cdacesso => 'PAREMPCTL'
                                               ,pr_tpregist => 1); 
      
      /* Busca saldo total de emprestimos */
      EMPR0001.pc_obtem_dados_empresti(pr_cdcooper => pr_cdcooper         --> Cooperativa conectada
                                      ,pr_cdagenci => pr_cdagenci         --> Código da agência
                                      ,pr_nrdcaixa => pr_nrdcaixa         --> Número do caixa
                                      ,pr_cdoperad => pr_cdoperad         --> Código do operador
                                      ,pr_nmdatela => pr_nmdatela         --> Nome datela conectada
                                      ,pr_idorigem => pr_idorigem         --> Indicador da origem da chamada
                                      ,pr_nrdconta => pr_nrdconta         --> Conta do associado
                                      ,pr_idseqttl => pr_idseqttl         --> Sequencia de titularidade da conta
                                      ,pr_rw_crapdat => rw_crapdat        --> Vetor com dados de parâmetro (CRAPDAT)
                                      ,pr_dtcalcul => NULL                --> Data solicitada do calculo
                                      ,pr_nrctremp => 0                   --> Número contrato empréstimo
                                      ,pr_cdprogra => 'B1WGEN0003'        --> Programa conectado
                                      ,pr_inusatab => vr_inusatab         --> Indicador de utilização da tabela
                                      ,pr_flgerlog => 'N'                 --> Gerar log S/N
                                      ,pr_flgcondc => FALSE               --> Mostrar emprestimos liquidados sem prejuizo
                                      ,pr_nmprimtl => rw_crapass.nmprimtl --> Nome Primeiro Titular
                                      ,pr_tab_parempctl => vr_parempctl   --> Dados tabela parametro
                                      ,pr_tab_digitaliza => vr_digitaliza --> Dados tabela parametro
                                      ,pr_nriniseq => 0                   --> Numero inicial paginacao
                                      ,pr_nrregist => 0                   --> Qtd registro por pagina
                                      ,pr_qtregist => vr_qtregist         --> Qtd total de registros
                                      ,pr_tab_dados_epr => vr_tab_dados_epr  --> Saida com os dados do empréstimo
                                      ,pr_des_reto => vr_des_reto         --> Retorno OK / NOK
                                      ,pr_tab_erro => pr_tab_erro);       --> Tabela com possíves erros
         
      --Se ocorreu erro
      IF vr_des_reto = 'NOK' THEN
        --Se tem erro na tabela 
        IF pr_tab_erro.COUNT > 0 THEN
          vr_dscritic:= pr_tab_erro(pr_tab_erro.FIRST).dscritic;
        ELSE
          vr_dscritic:= 'Nao foi possivel concluir a requisicao';
        END IF;    
        --Sair com erro
        RAISE vr_exc_erro;
      END IF;  
      
      
      IF pr_dtiniper IS NOT NULL THEN 
         vr_dtiniper := gene0005.fn_valida_dia_util(pr_cdcooper => pr_cdcooper ,pr_dtmvtolt => (pr_dtiniper - 1),pr_tipo => 'A');    
      END IF;
           
      --Buscar primeiro registro da tabela de emprestimos
      vr_index_epr:= vr_tab_dados_epr.FIRST;
      --Se Retornou Dados
      WHILE vr_index_epr IS NOT NULL LOOP
        BEGIN
          IF vr_tab_dados_epr(vr_index_epr).vlsdeved <= 0 OR 
             vr_tab_dados_epr(vr_index_epr).flgpagto = 1 THEN
            --Proximo registro
            RAISE vr_next_reg; 
          END IF;
          
          IF pr_indebcre = 'C' THEN
            --Proximo registro
            RAISE vr_next_reg; 
          END IF;
          
          /* Emprestimo PP ou POS */
          IF vr_tab_dados_epr(vr_index_epr).tpemprst IN (1,2) THEN 
            /* Valor da parcela vencida */
            IF vr_tab_dados_epr(vr_index_epr).vlprvenc > 0 THEN
              -- Se os periodos foram informados, filtrar por eles
              IF (vr_dtiniper IS NULL   AND
                  pr_dtfimper IS NULL)  OR
                 (vr_tab_dados_epr(vr_index_epr).dtdpagto >  vr_dtiniper   AND
                  vr_tab_dados_epr(vr_index_epr).dtdpagto <= pr_dtfimper)  THEN  
                            
              --Incrementar contador lancamentos na tabela
              vr_index:= pr_tab_lancamento_futuro.COUNT+1;
              --Criar Lancamento Futuro na tabela
              pr_tab_lancamento_futuro(vr_index).dtmvtolt:= vr_tab_dados_epr(vr_index_epr).dtdpagto;
              pr_tab_lancamento_futuro(vr_index).dsmvtolt:= to_char(vr_tab_dados_epr(vr_index_epr).dtdpagto,'DD/MM/YYYY');
              pr_tab_lancamento_futuro(vr_index).dshistor:= 'DB.EMPRESTIMO';
              pr_tab_lancamento_futuro(vr_index).nrdocmto:= to_char(vr_tab_dados_epr(vr_index_epr).nrctremp,'fm999g999g990');
              pr_tab_lancamento_futuro(vr_index).indebcre:= 'D';
              pr_tab_lancamento_futuro(vr_index).vllanmto:= vr_tab_dados_epr(vr_index_epr).vlprvenc;
              --Valor Lancamento Automatico
              vr_vllautom:= nvl(vr_vllautom,0) - vr_tab_dados_epr(vr_index_epr).vlprvenc;
              --Valor Lancamento Debito
              vr_vllaudeb:= nvl(vr_vllaudeb,0) + vr_tab_dados_epr(vr_index_epr).vlprvenc; 
            END IF;
            END IF;
            /* Valor da parcela a vencer */
            IF vr_tab_dados_epr(vr_index_epr).vlpraven > 0 THEN
              --Dia do Pagamento
              vr_dtdpagto:= TO_DATE(TO_CHAR(vr_tab_dados_epr(vr_index_epr).dtdpagto,'DD')||
                                    TO_CHAR(rw_crapdat.dtmvtolt,'MMYYYY'),'DDMMYYYY');
              
              -- Se os periodos foram informados, filtrar por eles
              IF (vr_dtiniper IS NULL   AND
                  pr_dtfimper IS NULL)  OR
                  (vr_dtdpagto >  vr_dtiniper   AND
                   vr_dtdpagto <= pr_dtfimper)  THEN
  
              --Incrementar contador lancamentos na tabela
              vr_index:= pr_tab_lancamento_futuro.COUNT+1;
              --Criar Lancamento Futuro na tabela
              pr_tab_lancamento_futuro(vr_index).dtmvtolt:= vr_dtdpagto;
              pr_tab_lancamento_futuro(vr_index).dsmvtolt:= to_char(vr_dtdpagto,'DD/MM/YYYY');
              pr_tab_lancamento_futuro(vr_index).dshistor:= 'DB.EMPRESTIMO';
              pr_tab_lancamento_futuro(vr_index).nrdocmto:= to_char(vr_tab_dados_epr(vr_index_epr).nrctremp,'fm999g999g990');
              pr_tab_lancamento_futuro(vr_index).indebcre:= 'D';
              pr_tab_lancamento_futuro(vr_index).vllanmto:= vr_tab_dados_epr(vr_index_epr).vlpraven;
              --Valor Lancamento Automatico
              vr_vllautom:= nvl(vr_vllautom,0) - vr_tab_dados_epr(vr_index_epr).vlpraven;
              --Valor Lancamento Debito
              vr_vllaudeb:= nvl(vr_vllaudeb,0) + vr_tab_dados_epr(vr_index_epr).vlpraven; 
            END IF;
            END IF;
          ELSE
            /**  Magui quando a pessoa estava em atraso nao mostrava tudo */
            vr_vlpresta:= 0;
            --Data pagamento Inferior Data Movimento
            IF vr_tab_dados_epr(vr_index_epr).dtdpagto <= rw_crapdat.dtmvtolt THEN 
              --Valor prestacao recebe valor a pagar
              vr_vlpresta:= vr_tab_dados_epr(vr_index_epr).vlpreapg;
            ELSE
              --Mesmo mes do processamento
              IF trunc(vr_tab_dados_epr(vr_index_epr).dtdpagto,'MM') = TRUNC(rw_crapdat.dtmvtolt,'MM') THEN
                --Data Pagamento > Data Movimento
                IF vr_tab_dados_epr(vr_index_epr).dtdpagto > rw_crapdat.dtmvtolt THEN
                  --Saldo Devedor menor valor prestacao emprestimo
                  IF vr_tab_dados_epr(vr_index_epr).vlsdeved < vr_tab_dados_epr(vr_index_epr).vlpreemp AND 
                     (vr_tab_dados_epr(vr_index_epr).qtmesdec >= vr_tab_dados_epr(vr_index_epr).qtpreemp  OR
                      vr_tab_dados_epr(vr_index_epr).qtprecal >= vr_tab_dados_epr(vr_index_epr).qtmesdec) THEN
                    --Valor prestacao recebe valor saldo devedor
                    vr_vlpresta:= vr_tab_dados_epr(vr_index_epr).vlsdeved;  
                  ELSE
                    --Valor prestacao recebe valor parcela emprestimo
                    vr_vlpresta:= vr_tab_dados_epr(vr_index_epr).vlpreemp;
                  END IF;               
                ELSE
                  --Valor prestacao recebe valor a pagar
                  vr_vlpresta:= vr_tab_dados_epr(vr_index_epr).vlpreapg;
                END IF;    
              END IF;
            END IF;
            --Valor Prestacao menor ou igual a zero
            IF vr_vlpresta <= 0 THEN
              --Proximo registro
              RAISE vr_next_reg;   
            END IF; 
            
            /* Se os periodos foram informados, filtrar por eles */
            IF vr_dtiniper IS NOT NULL   AND
               pr_dtfimper IS NOT NULL   AND
              (vr_tab_dados_epr(vr_index_epr).dtdpagto < vr_dtiniper   OR
               vr_tab_dados_epr(vr_index_epr).dtdpagto > pr_dtfimper)  THEN
              --Proximo registro
              RAISE vr_next_reg;
            END IF;
            --Incrementar contador lancamentos na tabela
            vr_index:= pr_tab_lancamento_futuro.COUNT+1;
            --Criar Lancamento Futuro na tabela
            pr_tab_lancamento_futuro(vr_index).dtmvtolt:= vr_tab_dados_epr(vr_index_epr).dtdpagto;
            pr_tab_lancamento_futuro(vr_index).dsmvtolt:= to_char(vr_tab_dados_epr(vr_index_epr).dtdpagto,'DD/MM/YYYY');
            pr_tab_lancamento_futuro(vr_index).dshistor:= 'DB.EMPRESTIMO';
            pr_tab_lancamento_futuro(vr_index).nrdocmto:= to_char(vr_tab_dados_epr(vr_index_epr).nrctremp,'fm999g999g990');
            pr_tab_lancamento_futuro(vr_index).indebcre:= 'D';
            pr_tab_lancamento_futuro(vr_index).vllanmto:= vr_vlpresta;
            --Valor Lancamento Automatico
            vr_vllautom:= nvl(vr_vllautom,0) - vr_vlpresta;
            --Valor Lancamento Debito
            vr_vllaudeb:= nvl(vr_vllaudeb,0) + vr_vlpresta;  
          END IF; -- tpemprst IN (1,2)
          /* Vamos verificar se existe Juros de Mora para pagar */
          IF vr_tab_dados_epr(vr_index_epr).vlmrapar > 0 THEN
            /* Se os periodos foram informados, filtrar por eles */
           /* IF (pr_dtiniper IS NULL   AND
                pr_dtfimper IS NULL)  OR
               (vr_tab_dados_epr(vr_index_epr).dtdpagto >= pr_dtiniper   AND
                vr_tab_dados_epr(vr_index_epr).dtdpagto <= pr_dtfimper)  THEN*/
            --Incrementar contador lancamentos na tabela
            vr_index:= pr_tab_lancamento_futuro.COUNT+1;
            --Criar Lancamento Futuro na tabela
            pr_tab_lancamento_futuro(vr_index).dtmvtolt:= vr_tab_dados_epr(vr_index_epr).dtdpagto;
            pr_tab_lancamento_futuro(vr_index).dsmvtolt:= to_char(vr_tab_dados_epr(vr_index_epr).dtdpagto,'DD/MM/YYYY');
            pr_tab_lancamento_futuro(vr_index).dshistor:= 'JUROS DE MORA';
            pr_tab_lancamento_futuro(vr_index).nrdocmto:= to_char(vr_tab_dados_epr(vr_index_epr).nrctremp,'fm999g999g990');
            pr_tab_lancamento_futuro(vr_index).indebcre:= 'D';
            pr_tab_lancamento_futuro(vr_index).vllanmto:= vr_tab_dados_epr(vr_index_epr).vlmrapar;
            --Valor Lancamento Automatico
            vr_vllautom:= nvl(vr_vllautom,0) - vr_tab_dados_epr(vr_index_epr).vlmrapar;
            --Valor Lancamento Debito
            vr_vllaudeb:= nvl(vr_vllaudeb,0) + vr_tab_dados_epr(vr_index_epr).vlmrapar;  
         -- END IF;
          END IF; 
          
           /* Vamos verificar se existe IOF complementra de atraso*/
          IF vr_tab_dados_epr(vr_index_epr).vliofcpl > 0 THEN
            /* Se os periodos foram informados, filtrar por eles */
           /* IF (pr_dtiniper IS NULL   AND
                pr_dtfimper IS NULL)  OR
               (vr_tab_dados_epr(vr_index_epr).dtdpagto >= pr_dtiniper   AND
                vr_tab_dados_epr(vr_index_epr).dtdpagto <= pr_dtfimper)  THEN*/
            --Incrementar contador lancamentos na tabela
            vr_index:= pr_tab_lancamento_futuro.COUNT+1;
            --Criar Lancamento Futuro na tabela
            pr_tab_lancamento_futuro(vr_index).dtmvtolt:= vr_tab_dados_epr(vr_index_epr).dtdpagto;
            pr_tab_lancamento_futuro(vr_index).dsmvtolt:= to_char(vr_tab_dados_epr(vr_index_epr).dtdpagto,'DD/MM/YYYY');
            pr_tab_lancamento_futuro(vr_index).dshistor:= 'IOF ATRASO';
            pr_tab_lancamento_futuro(vr_index).nrdocmto:= to_char(vr_tab_dados_epr(vr_index_epr).nrctremp,'fm999g999g990');
            pr_tab_lancamento_futuro(vr_index).indebcre:= 'D';
            pr_tab_lancamento_futuro(vr_index).vllanmto:= vr_tab_dados_epr(vr_index_epr).vliofcpl;
            --Valor Lancamento Automatico
            vr_vllautom:= nvl(vr_vllautom,0) - vr_tab_dados_epr(vr_index_epr).vliofcpl;
            --Valor Lancamento Debito
            vr_vllaudeb:= nvl(vr_vllaudeb,0) + vr_tab_dados_epr(vr_index_epr).vliofcpl;  
         -- END IF;
          END IF; 
          /* Vamos verificar se existe Multa para pagar */ 
          IF vr_tab_dados_epr(vr_index_epr).vlmtapar > 0 THEN
          
            /* Se os periodos foram informados, filtrar por eles */
            /*IF (pr_dtiniper IS NULL   AND
                pr_dtfimper IS NULL)  OR
               (vr_tab_dados_epr(vr_index_epr).dtdpagto >= pr_dtiniper   AND
                vr_tab_dados_epr(vr_index_epr).dtdpagto <= pr_dtfimper)  THEN*/
            --Incrementar contador lancamentos na tabela
            vr_index:= pr_tab_lancamento_futuro.COUNT+1;
            --Criar Lancamento Futuro na tabela
            pr_tab_lancamento_futuro(vr_index).dtmvtolt:= vr_tab_dados_epr(vr_index_epr).dtdpagto;
            pr_tab_lancamento_futuro(vr_index).dsmvtolt:= to_char(vr_tab_dados_epr(vr_index_epr).dtdpagto,'DD/MM/YYYY');
            pr_tab_lancamento_futuro(vr_index).dshistor:= 'MULTA';
            pr_tab_lancamento_futuro(vr_index).nrdocmto:= to_char(vr_tab_dados_epr(vr_index_epr).nrctremp,'fm999g999g990');
            pr_tab_lancamento_futuro(vr_index).indebcre:= 'D';
            pr_tab_lancamento_futuro(vr_index).vllanmto:= vr_tab_dados_epr(vr_index_epr).vlmtapar;
            --Valor Lancamento Automatico
            vr_vllautom:= nvl(vr_vllautom,0) - vr_tab_dados_epr(vr_index_epr).vlmtapar;
            --Valor Lancamento Debito
            vr_vllaudeb:= nvl(vr_vllaudeb,0) + vr_tab_dados_epr(vr_index_epr).vlmtapar;  
          --END IF;
          END IF; 
          
          --Proximo registro
          RAISE vr_next_reg; 
          
        EXCEPTION
          WHEN vr_next_reg THEN
            --Proximo Registro
            vr_index_epr:= vr_tab_dados_epr.NEXT(vr_index_epr);
          WHEN vr_exc_erro THEN
            RAISE vr_exc_erro;  
        END;     
      END LOOP;
      
      --Zerar resultados
      FOR idx IN 1..4 LOOP
        vr_tab_resulta(idx):= 0;
      END LOOP;
      --Inicializar Contaas Descontadas  
      vr_contadct:= 0;
      --Selecionar Saldos da Conta
      OPEN cr_crapsld (pr_cdcooper => pr_cdcooper
                      ,pr_nrdconta => pr_nrdconta);
      --Posicionar no proximo registro
      FETCH cr_crapsld INTO rw_crapsld;
      --Se nao encontrou
      IF cr_crapsld%FOUND /*AND
        (rw_crapdat.dtmvtolt >= pr_dtiniper  AND 
         rw_crapdat.dtmvtolt <= pr_dtfimper) OR 
        (pr_dtiniper IS NULL                AND
         pr_dtfimper IS NULL) */ THEN
        --Fechar Cursor
        CLOSE cr_crapsld;
        --Saldo Negativo mes
        IF nvl(rw_crapsld.vlsmnmes,0) <> 0 THEN
          IF (pr_indebcre = 'D' OR nvl(trim(pr_indebcre),'') IS NULL ) AND 
            (PREJ0003.fn_verifica_preju_conta(pr_cdcooper => pr_cdcooper 
                                                            ,pr_nrdconta => pr_nrdconta) = false) THEN
          --Resultado 1
          vr_tab_resulta(1):= (rw_crapsld.vlsmnmes * vr_txjurneg) * -1;
          --Incrementar Contador conta
          vr_contadct:= vr_contadct + 1;
          --Incrementar contador lancamentos na tabela
          vr_index:= pr_tab_lancamento_futuro.COUNT+1;
          --Criar Lancamento Futuro na tabela
          pr_tab_lancamento_futuro(vr_index).dtmvtolt:= rw_crapdat.dtmvtolt;
          pr_tab_lancamento_futuro(vr_index).dsmvtolt:= to_char(rw_crapdat.dtmvtolt,'DD/MM/YYYY');
          pr_tab_lancamento_futuro(vr_index).dshistor:= 'PRV. TAXA C/C NEG.';
          pr_tab_lancamento_futuro(vr_index).nrdocmto:= to_char(vr_contadct,'fm999g999g990');
          pr_tab_lancamento_futuro(vr_index).indebcre:= 'D';
          pr_tab_lancamento_futuro(vr_index).vllanmto:= vr_tab_resulta(1);
          -- SM4 - Paulo Martins - Mout´s
          pr_tab_lancamento_futuro(vr_index).cdhistor:= 37;
          if rw_crapass.cdsitdct  = 7 then
            pr_tab_lancamento_futuro(vr_index).fldebito := 1;
          else
            pr_tab_lancamento_futuro(vr_index).fldebito := 0;
          end if;		  
        END IF;
        END IF;
				
		-- Se a conta está em prejuízo e se possui juros remuneratórios provisionado
		-- Reginaldo/AMcom/P450 - 14/11/2018
		IF PREJ0003.fn_verifica_preju_conta(pr_cdcooper => pr_cdcooper 
                                   ,pr_nrdconta => pr_nrdconta) AND
			 PREJ0003.fn_juros_remun_prov(pr_cdcooper => pr_cdcooper 
                                   ,pr_nrdconta => pr_nrdconta) > 0 THEN

				--Incrementar Contador conta
				vr_contadct:= vr_contadct + 1;
				--Incrementar contador lancamentos na tabela
				vr_index:= pr_tab_lancamento_futuro.COUNT+1;
				--Criar Lancamento Futuro na tabela
				pr_tab_lancamento_futuro(vr_index).dtmvtolt:= rw_crapdat.dtmvtolt;
				pr_tab_lancamento_futuro(vr_index).dsmvtolt:= to_char(rw_crapdat.dtmvtolt,'DD/MM/YYYY');
				pr_tab_lancamento_futuro(vr_index).dshistor:= 'JUROS REMUNER';
				pr_tab_lancamento_futuro(vr_index).nrdocmto:= to_char(vr_contadct,'fm999g999g990');
				pr_tab_lancamento_futuro(vr_index).indebcre:= 'D';
				pr_tab_lancamento_futuro(vr_index).vllanmto:= PREJ0003.fn_juros_remun_prov(pr_cdcooper => pr_cdcooper 
                                                                              ,pr_nrdconta => pr_nrdconta);
				pr_tab_lancamento_futuro(vr_index).cdhistor:= 2718;
			pr_tab_lancamento_futuro(vr_index).fldebito := 0;  
        END IF;
				
        --Saldo
        IF rw_crapsld.vlsmnesp <> 0 OR
           (TO_CHAR(rw_crapdat.dtmvtolt,'mm') <> TO_CHAR(rw_crapdat.dtmvtoan,'mm') AND 
           rw_crapsld.vljuresp <> 0) THEN
          --Selecionar informacoes dos limites de credito do associado
          OPEN cr_craplim (pr_cdcooper => pr_cdcooper
                          ,pr_nrdconta => rw_crapsld.nrdconta
                          ,pr_tpctrlim => 1
                          ,pr_insitlim => 2);
          --Posicionar no proximo registro
          FETCH cr_craplim INTO rw_craplim;
          --Se nao encontrar
          IF cr_craplim%NOTFOUND THEN
            --Fechar cursor
            CLOSE cr_craplim;
            --Selecionar informacoes dos limites de credito do associado
            OPEN cr_craplim (pr_cdcooper => pr_cdcooper
                            ,pr_nrdconta => rw_crapsld.nrdconta
                            ,pr_tpctrlim => 1
                            ,pr_insitlim => 3);
            --Posicionar no proximo registro
            FETCH cr_craplim INTO rw_craplim;
            --Se nao encontrou
            IF cr_craplim%NOTFOUND THEN
              --Fechar cursor
              CLOSE cr_craplim;
              --Selecionar informacoes dos limites de credito do associado
              OPEN cr_craplim (pr_cdcooper => pr_cdcooper
                            ,pr_nrdconta => rw_crapsld.nrdconta
                            ,pr_tpctrlim => 1
                            ,pr_insitlim => 1);
              --Posicionar no proximo registro
              FETCH cr_craplim INTO rw_craplim;
              --Se nao encontrou
              IF cr_craplim%NOTFOUND THEN
                --Fechar cursor
                CLOSE cr_craplim;
              --Montar mensagem de erro com base na critica
              vr_cdcritic:= 105;
              --Sair do programa
              RAISE vr_exc_erro;
            END IF;
            END IF;
          END IF; 
          --Fechar Cursor
          IF cr_craplim%ISOPEN THEN
            CLOSE cr_craplim;
          END IF;  
          --Selecionar informacoes das linhas de credito do associado 
          OPEN cr_craplrt (pr_cdcooper => pr_cdcooper
                          ,pr_cddlinha => rw_craplim.cddlinha);
          FETCH cr_craplrt INTO rw_craplrt;
          --Se nao encontrou
          IF cr_craplrt%NOTFOUND THEN               
            --Fechar Cursor
            CLOSE cr_craplrt;
            --Buscar mensagem de erro da critica
            vr_cdcritic := 363;
            --Sair do programa
            RAISE vr_exc_erro;
          END IF;  
          --Fechar Cursor
          CLOSE cr_craplrt; 
          --Resultado 2
          IF TO_CHAR(rw_crapdat.dtmvtolt,'mm') <> TO_CHAR(rw_crapdat.dtmvtoan,'mm') THEN -- Primeiro Útil
            vr_tab_resulta(2):= rw_crapsld.vljuresp;
          ELSE
            vr_tab_resulta(2):= (rw_crapsld.vlsmnesp * (rw_craplrt.txmensal / 100)) * -1;
          END IF;        
          
          IF (pr_indebcre = 'D' OR nvl(trim(pr_indebcre),'') IS NULL ) AND 
            (PREJ0003.fn_verifica_preju_conta(pr_cdcooper => pr_cdcooper
                                                            ,pr_nrdconta => pr_nrdconta) = false) THEN
          --Incrementar Conta          
          vr_contadct:= vr_contadct + 1;
          --Incrementar contador lancamentos na tabela
          vr_index:= pr_tab_lancamento_futuro.COUNT+1;
          --Criar Lancamento Futuro na tabela
          pr_tab_lancamento_futuro(vr_index).dtmvtolt:= rw_crapdat.dtmvtolt;
          pr_tab_lancamento_futuro(vr_index).dsmvtolt:= to_char(rw_crapdat.dtmvtolt,'DD/MM/YYYY');
          pr_tab_lancamento_futuro(vr_index).dshistor:= 'PRV. JUROS CH.ESP.';
          pr_tab_lancamento_futuro(vr_index).nrdocmto:= to_char(vr_contadct,'fm999g999g990');
          pr_tab_lancamento_futuro(vr_index).indebcre:= 'D';
          pr_tab_lancamento_futuro(vr_index).vllanmto:= vr_tab_resulta(2);
          -- SM4 - Paulo Martins - Mout´s
          pr_tab_lancamento_futuro(vr_index).cdhistor:= 38;
          if rw_crapass.cdsitdct  = 7 then
            pr_tab_lancamento_futuro(vr_index).fldebito := 1;
          else
            pr_tab_lancamento_futuro(vr_index).fldebito := 0;
          end if;     		  
          END IF;
        END IF; --crapsld.vlsmnesp <> 0
        --Valor Bloqueado
        IF rw_crapsld.vlsmnblq <> 0 AND  
          (pr_indebcre = 'D' OR nvl(trim(pr_indebcre),'') IS NULL ) AND 
            (PREJ0003.fn_verifica_preju_conta(pr_cdcooper => pr_cdcooper 
                                             ,pr_nrdconta => pr_nrdconta) = false) THEN 
          --Resultado 3
          vr_tab_resulta(3):= (rw_crapsld.vlsmnblq * (vr_txjursaq)) * -1;
          --Incrementar Conta          
          vr_contadct:= vr_contadct + 1;
          --Incrementar contador lancamentos na tabela
          vr_index:= pr_tab_lancamento_futuro.COUNT+1;
          --Criar Lancamento Futuro na tabela
          pr_tab_lancamento_futuro(vr_index).dtmvtolt:= rw_crapdat.dtmvtolt;
          pr_tab_lancamento_futuro(vr_index).dsmvtolt:= to_char(rw_crapdat.dtmvtolt,'DD/MM/YYYY');
          pr_tab_lancamento_futuro(vr_index).dshistor:= 'PRV. JR.SAQ.DEP.BL';
          pr_tab_lancamento_futuro(vr_index).nrdocmto:= to_char(vr_contadct,'fm999g999g990');
          pr_tab_lancamento_futuro(vr_index).indebcre:= 'D';
          pr_tab_lancamento_futuro(vr_index).vllanmto:= vr_tab_resulta(3);          
        END IF;  
        /* caso exista valor iof sera criado registro para debito */
        IF rw_crapsld.vliofmes > 0 AND
          (pr_indebcre = 'D' OR nvl(trim(pr_indebcre),'') IS NULL ) THEN
          --Verificar Imunidade Tributaria
          IMUT0001.pc_verifica_imunidade_trib(pr_cdcooper  => pr_cdcooper          --> Codigo Cooperativa
                                             ,pr_nrdconta  => pr_nrdconta          --> Numero da Conta
                                             ,pr_dtmvtolt  => rw_crapdat.dtmvtolt  --> Data movimento
                                             ,pr_flgrvvlr  => FALSE                --> Identificador se deve gravar valor
                                             ,pr_cdinsenc  => 0                    --> Codigo da isenção
                                             ,pr_vlinsenc  => 0                    --> Valor insento
                                             ,pr_inpessoa  => rw_crapass.inpessoa  --> Tipo de pessoa
                                             ,pr_nrcpfcgc  => rw_crapass.nrcpfcgc  --> CPF/CNPJ
                                             ,pr_flgimune  => vr_flgimune          --> Identificador se é imune
                                             ,pr_dsreturn  => vr_des_reto          --> Descricao Critica
                                             ,pr_tab_erro  => pr_tab_erro);        --> Tabela erros
          -- Caso retornou com erro, levantar exceção
          IF vr_des_reto = 'NOK' THEN
            -- Tenta buscar o erro no vetor de erro
            IF pr_tab_erro.COUNT > 0 THEN
              vr_cdcritic:= pr_tab_erro(pr_tab_erro.FIRST).cdcritic;
              vr_dscritic:= pr_tab_erro(pr_tab_erro.FIRST).dscritic||' '||gene0002.fn_mask_conta(pr_nrdconta);
            ELSE
              vr_cdcritic:= 0;
              vr_dscritic:= 'Retorno "NOK" na IMUT0001.pc_verifica_imunidade_trib e sem informação na pr_tab_erro, Conta: '||gene0002.fn_mask_conta(pr_nrdconta);
            END IF;
            --Levantar Excecao
            RAISE vr_exc_erro;
          END IF; 
          IF NOT vr_flgimune THEN
            --Resultado 4
            vr_tab_resulta(4):= rw_crapsld.vliofmes;
            --Incrementar Conta          
            vr_contadct:= vr_contadct + 1;
            --Incrementar contador lancamentos na tabela
            vr_index:= pr_tab_lancamento_futuro.COUNT+1;
            --Criar Lancamento Futuro na tabela
            pr_tab_lancamento_futuro(vr_index).dtmvtolt:= rw_crapdat.dtmvtolt;
            pr_tab_lancamento_futuro(vr_index).dsmvtolt:= to_char(rw_crapdat.dtmvtolt,'DD/MM/YYYY');
            pr_tab_lancamento_futuro(vr_index).dshistor:= 'PRV. IOF S/EMPR.CC';
            pr_tab_lancamento_futuro(vr_index).nrdocmto:= to_char(vr_contadct,'fm999g999g990');
            pr_tab_lancamento_futuro(vr_index).indebcre:= 'D';
            pr_tab_lancamento_futuro(vr_index).vllanmto:= vr_tab_resulta(4);
            -- SM4 - Paulo Martins - Mout´s
            pr_tab_lancamento_futuro(vr_index).cdhistor:= 2323;
            if rw_crapass.cdsitdct  = 7 then
              pr_tab_lancamento_futuro(vr_index).fldebito := 1;
            else
              pr_tab_lancamento_futuro(vr_index).fldebito := 0;
            end if;     			
          END IF;   
        END IF; --rw_crapsld.vliofmes > 0
      END IF;  --cr_crapsld%FOUND 
      
      --Diminuir resultados dos valores de Lancamento Automatico
      FOR idx IN 1..4 LOOP
        --Valor Lancamento Automatico
        vr_vllautom:= vr_vllautom - vr_tab_resulta(idx);
        --Valor Lancamento Debito
        vr_vllaudeb:= vr_vllaudeb + vr_tab_resulta(idx);
      END LOOP;  
      --Planos de Cotas
      FOR rw_crappla IN cr_crappla2 (pr_cdcooper => pr_cdcooper
                                    ,pr_nrdconta => pr_nrdconta) LOOP
                                    
        /* Se for somente creditos, desconsiderar */
        IF pr_indebcre = 'C' THEN
          continue;
        END IF;                            
                                    
        IF rw_crappla.flgpagto = 1 THEN /* debito em folha */
          --Se existir valor Pendente
          IF rw_crappla.vlpenden > 0 /* AND
           ((rw_crapdat.dtmvtolt >= pr_dtiniper  AND 
             rw_crapdat.dtmvtolt <= pr_dtfimper) OR 
            (pr_dtiniper IS NULL                 AND
             pr_dtfimper IS NULL))*/ THEN
            --Incrementar contador lancamentos na tabela
            vr_index:= pr_tab_lancamento_futuro.COUNT+1;
            --Criar Lancamento Futuro na tabela
            pr_tab_lancamento_futuro(vr_index).dtmvtolt:= rw_crapdat.dtmvtolt;
            pr_tab_lancamento_futuro(vr_index).dsmvtolt:= to_char(rw_crapdat.dtmvtolt,'DD/MM/YYYY');
            pr_tab_lancamento_futuro(vr_index).dshistor:= 'DB.COTAS PENDENTE';
            pr_tab_lancamento_futuro(vr_index).nrdocmto:= to_char(rw_crappla.nrctrpla,'fm999g999g990');
            pr_tab_lancamento_futuro(vr_index).indebcre:= 'D';
            pr_tab_lancamento_futuro(vr_index).vllanmto:= rw_crappla.vlpenden; 
            --Valor Lancamento Automatico
            vr_vllautom:= nvl(vr_vllautom,0) - rw_crappla.vlpenden;
            --Valor Lancamento Debito
            vr_vllaudeb:= nvl(vr_vllaudeb,0) + rw_crappla.vlpenden;             
          ELSE
            /* O Valor da parcela mensal do plano ja esta sendo contabilizada
                   na leitura da tabela crapavs(tpdaviso = 1) */
            CONTINUE;                                   
          END IF;  
        ELSE /* debito em conta */
          --Se existir valor Pendente
          IF rw_crappla.vlpenden > 0 THEN
            /* No dia do debito da parcela do plano nao mostra valor pendente */
            IF rw_crappla.dtdpagto <> rw_crapdat.dtmvtolt/* AND
             ((rw_crapdat.dtmvtolt >= pr_dtiniper  AND 
               rw_crapdat.dtmvtolt <= pr_dtfimper) OR 
              (pr_dtiniper IS NULL                 AND
               pr_dtfimper IS NULL))*/ THEN
              --Incrementar contador lancamentos na tabela
              vr_index:= pr_tab_lancamento_futuro.COUNT+1;
              --Criar Lancamento Futuro na tabela
              pr_tab_lancamento_futuro(vr_index).dtmvtolt:= rw_crapdat.dtmvtolt;
              pr_tab_lancamento_futuro(vr_index).dsmvtolt:= to_char(rw_crapdat.dtmvtolt,'DD/MM/YYYY');
              pr_tab_lancamento_futuro(vr_index).dshistor:= 'DB.COTAS PENDENTE';
              pr_tab_lancamento_futuro(vr_index).nrdocmto:= to_char(rw_crappla.nrctrpla,'fm999g999g990');
              pr_tab_lancamento_futuro(vr_index).indebcre:= 'D';
              pr_tab_lancamento_futuro(vr_index).vllanmto:= rw_crappla.vlpenden; 
              --Valor Lancamento Automatico
              vr_vllautom:= nvl(vr_vllautom,0) - rw_crappla.vlpenden;
              --Valor Lancamento Debito
              vr_vllaudeb:= nvl(vr_vllaudeb,0) + rw_crappla.vlpenden;             
            END IF;
          END IF;
          --mes e ano do pagamento igual a data do movimento
          IF trunc(rw_crappla.dtdpagto,'MM') = trunc(rw_crapdat.dtmvtolt,'MM') AND 
             trunc(rw_crappla.dtdpagto,'YYYY') = trunc(rw_crapdat.dtmvtolt,'YYYY') THEN
          
         /* IF (rw_crappla.dtdpagto >= pr_dtiniper  AND
              rw_crappla.dtdpagto <= pr_dtfimper) OR 
             (pr_dtiniper IS NULL                 AND
              pr_dtfimper IS NULL) THEN*/
            --Incrementar contador lancamentos na tabela
            vr_index:= pr_tab_lancamento_futuro.COUNT+1;
            --Criar Lancamento Futuro na tabela
            pr_tab_lancamento_futuro(vr_index).dtmvtolt:= rw_crappla.dtdpagto;
            pr_tab_lancamento_futuro(vr_index).dsmvtolt:= to_char(rw_crappla.dtdpagto,'DD/MM/YYYY');
            pr_tab_lancamento_futuro(vr_index).dshistor:= 'DB.COTAS     ';
            pr_tab_lancamento_futuro(vr_index).nrdocmto:= to_char(rw_crappla.nrctrpla,'fm999g999g990');
            pr_tab_lancamento_futuro(vr_index).indebcre:= 'D';
            pr_tab_lancamento_futuro(vr_index).vllanmto:= rw_crappla.vlprepla; 
            --Valor Lancamento Automatico
            vr_vllautom:= nvl(vr_vllautom,0) - rw_crappla.vlprepla;
            --Valor Lancamento Debito
            vr_vllaudeb:= nvl(vr_vllaudeb,0) + rw_crappla.vlprepla;             
         -- END IF;
          END IF;     
        END IF;    
      END LOOP;
      
      IF pr_dtiniper IS NOT NULL THEN  
         --buscar dia ultil anterior
	       vr_dtiniper := gene0005.fn_valida_dia_util(pr_cdcooper => pr_cdcooper ,pr_dtmvtolt => (pr_dtiniper - 1),pr_tipo => 'A');
      END IF;
            
      /*FATURAS DE CARTAO DE CREDITO SICOOB*/
      FOR rw_fatura IN cr_fatura  (pr_cdcooper => pr_cdcooper
                                  ,pr_nrdconta => pr_nrdconta
                                  ,pr_dtiniper => vr_dtiniper
								                  ,pr_dtfimper => pr_dtfimper) LOOP
        
        --Selecionar Historicos
        OPEN cr_craphis (pr_cdcooper => pr_cdcooper
                        ,pr_cdhistor => 1545);
        FETCH cr_craphis INTO rw_craphis;
        --Se nao encontrou
        IF cr_craphis%NOTFOUND THEN
          CLOSE cr_craphis;
          --Codigo Erro
          vr_cdcritic:= 80;
          vr_dscritic:= NULL;
          RAISE vr_exc_erro;
        END IF;
        CLOSE cr_craphis;
        
        vr_dtfatura := gene0005.fn_valida_dia_util(pr_cdcooper => pr_cdcooper, 
                                                   pr_dtmvtolt => rw_fatura.dtvencimento + 1, 
                                                   pr_tipo     => 'P'); --proximo dia util
        -- se for maior usar a data de vencimento                                           
        IF vr_dtfatura > rw_crapdat.dtmvtolt THEN
          vr_dtfatura := rw_fatura.dtvencimento;
        ELSE 
          --se for menor usar a data atual
          vr_dtfatura := rw_crapdat.dtmvtolt;
        END IF;
        
        --Incrementar contador lancamentos na tabela
        vr_index:= pr_tab_lancamento_futuro.COUNT+1;
        --Criar Lancamento Futuro na tabela
        pr_tab_lancamento_futuro(vr_index).dstabela := 'tbcrd_fatura';
        pr_tab_lancamento_futuro(vr_index).cdhistor := 1545;
        pr_tab_lancamento_futuro(vr_index).dtmvtolt := vr_dtfatura;
        pr_tab_lancamento_futuro(vr_index).dshistor := rw_craphis.dshistor;
        pr_tab_lancamento_futuro(vr_index).nrdocmto := rw_fatura.dsdocumento;
        pr_tab_lancamento_futuro(vr_index).indebcre := rw_craphis.indebcre;
        pr_tab_lancamento_futuro(vr_index).vllanmto := rw_fatura.vlpendente;
        pr_tab_lancamento_futuro(vr_index).genrecid := rw_fatura.progress_recid;
        pr_tab_lancamento_futuro(vr_index).fldebito := 0;
        pr_tab_lancamento_futuro(vr_index).dsmvtolt := to_char(vr_dtfatura,'DD/MM/RRRR');

        vr_vllautom := nvl(vr_vllautom,0) - nvl(rw_fatura.vlpendente,0);
        vr_vllaudeb := nvl(vr_vllaudeb,0) + nvl(rw_fatura.vlpendente,0);
      /*FIM FATURAS CARTAO CREDITO SICOOB*/
      END LOOP;                  
      
      
      /*  Subscricao de capital do mes  */
      FOR rw_crapsdc IN cr_crapsdc (pr_cdcooper => pr_cdcooper
                                   ,pr_nrdconta => pr_nrdconta
                                   ,pr_dtrefere => rw_crapdat.dtultdia) LOOP
                
        /* Se for somente creditos, desconsiderar */
        IF pr_indebcre = 'C' THEN
          continue;
        END IF;      
                           
        -- Se os periodos foram informados, filtrar por eles 
        IF pr_dtiniper IS NOT NULL  AND
           pr_dtfimper IS NOT NULL  AND
          (rw_crapsdc.dtrefere < pr_dtiniper   OR
           rw_crapsdc.dtrefere > pr_dtfimper)  THEN
           continue;
        END IF;
                                        
        --Incrementar contador lancamentos na tabela
        vr_index:= pr_tab_lancamento_futuro.COUNT+1;
        --Criar Lancamento Futuro na tabela
        pr_tab_lancamento_futuro(vr_index).dtmvtolt:= rw_crapsdc.dtrefere;
        pr_tab_lancamento_futuro(vr_index).dsmvtolt:= to_char(rw_crapsdc.dtrefere,'DD/MM/YYYY');
        --Tipo de Lancamento
        IF rw_crapsdc.tplanmto = 1 THEN
          pr_tab_lancamento_futuro(vr_index).dshistor:= 'CAPITAL INICIAL';
        ELSE
          pr_tab_lancamento_futuro(vr_index).dshistor:= 'PLANO CAPITAL INICIAL';
        END IF;    
        pr_tab_lancamento_futuro(vr_index).nrdocmto:= to_char(rw_crapsdc.nrseqdig,'fm999g999g990');
        pr_tab_lancamento_futuro(vr_index).indebcre:= 'D';
        pr_tab_lancamento_futuro(vr_index).vllanmto:= rw_crapsdc.vllanmto; 
        --Valor Lancamento Automatico
        vr_vllautom:= nvl(vr_vllautom,0) - rw_crapsdc.vllanmto;
        --Valor Lancamento Debito
        vr_vllaudeb:= nvl(vr_vllaudeb,0) + rw_crapsdc.vllanmto;   
      END LOOP; 
      /* Obtem históricos de tarifas */
      
      --Determinar tipo pessoa e local transacao
      IF rw_crapass.inpessoa = 1 THEN
        vr_cdbattaa:= 'TROUTTAAPF';  /* Pessoa Física via TAA      */
        vr_cdbatint:= 'TROUTINTPF';  /* Pessoa Física via Internet */
      ELSE
        vr_cdbattaa:= 'TROUTTAAPJ';  /* Pessoa Jurídica via TAA      */
        vr_cdbatint:= 'TROUTINTPJ';  /* Pessoa Jurídica via Internet */         
      END IF;

      /*  Busca valor da tarifa do extrato*/
      TARI0001.pc_carrega_dados_tar_vigente (pr_cdcooper  => pr_cdcooper  --Codigo Cooperativa
                                            ,pr_cdbattar  => vr_cdbattaa  --Codigo Tarifa
                                            ,pr_vllanmto  => 1            --Valor Lancamento
                                            ,pr_cdprogra  => NULL         --Codigo Programa
                                            ,pr_cdhistor  => vr_cdhistaa  --Codigo Historico
                                            ,pr_cdhisest  => vr_cdhsetaa  --Historico Estorno
                                            ,pr_vltarifa  => vr_vltarpro  --Valor tarifa
                                            ,pr_dtdivulg  => vr_dtdivulg  --Data Divulgacao
                                            ,pr_dtvigenc  => vr_dtvigenc  --Data Vigencia
                                            ,pr_cdfvlcop  => vr_cdfvlcop  --Codigo faixa valor cooperativa
                                            ,pr_cdcritic  => vr_cdcritic  --Codigo Critica
                                            ,pr_dscritic  => vr_dscritic  --Descricao Critica
                                            ,pr_tab_erro  => pr_tab_erro); --Tabela erros
      --Se ocorreu erro
      IF vr_cdcritic IS NOT NULL OR vr_dscritic IS NOT NULL THEN  
        --Levantar Excecao
        RAISE vr_exc_erro;             
      END IF;
        
      /*  Busca valor da tarifa do extrato*/
      TARI0001.pc_carrega_dados_tar_vigente (pr_cdcooper  => pr_cdcooper  --Codigo Cooperativa
                                            ,pr_cdbattar  => vr_cdbatint  --Codigo Tarifa
                                            ,pr_vllanmto  => 1            --Valor Lancamento
                                            ,pr_cdprogra  => NULL         --Codigo Programa
                                            ,pr_cdhistor  => vr_cdhisint  --Codigo Historico
                                            ,pr_cdhisest  => vr_cdhseint  --Historico Estorno
                                            ,pr_vltarifa  => vr_vltarpro  --Valor tarifa
                                            ,pr_dtdivulg  => vr_dtdivulg  --Data Divulgacao
                                            ,pr_dtvigenc  => vr_dtvigenc  --Data Vigencia
                                            ,pr_cdfvlcop  => vr_cdfvlcop  --Codigo faixa valor cooperativa
                                            ,pr_cdcritic  => vr_cdcritic  --Codigo Critica
                                            ,pr_dscritic  => vr_dscritic  --Descricao Critica
                                            ,pr_tab_erro  => pr_tab_erro); --Tabela erros
      --Se ocorreu erro
      IF vr_cdcritic IS NOT NULL OR vr_dscritic IS NOT NULL THEN  
        --Levantar Excecao
        RAISE vr_exc_erro;             
      END IF;
      
      -- Tratamento para ignorar os lançamentos futuros do histórico 15
      -- e da busca dos historicos da tabela 'de-para' da Cabal
      vr_cdhishcb := 15;
      FOR rw_craphcb IN cr_craphcb LOOP
        vr_cdhishcb := vr_cdhishcb || ',' || rw_craphcb.cdhistor;
      END LOOP;
      
      /* Verifica lancamentos com historicos de internet para
       contabilizar no valor de lancamentos futuros */
      FOR rw_craplcm2 IN cr_craplcm2 (pr_cdcooper => pr_cdcooper
                                    ,pr_nrdconta => pr_nrdconta
                                    ,pr_dtmvtolt => PAGA0001.fn_busca_datdodia (pr_cdcooper)) LOOP
        --Se nao for cecred e internet ou taa
        IF pr_cdcooper <> 3 AND pr_cdagenci IN (90,91) AND rw_craplcm2.dtmvtolt > vr_dtddlslf THEN
          --Proximo registro
          CONTINUE;
        END IF; 
        --verificar Historicos
        IF rw_craplcm2.cdhistor IN (316,450,767,918,920) OR
          (rw_craplcm2.cdhistor IN (375,376,377,537,538,539,771,772,14,44) AND SUBSTR(rw_craplcm2.cdpesqbb,54,8) IS NULL) OR
          (rw_craplcm2.cdhistor IN (1009,1011,vr_cdhistaa,vr_cdhisint) AND SUBSTR(rw_craplcm2.cdpesqbb,54,8) IS NULL) OR
          -- Verificar o histórico 530 e se foi realizado ONLINE
          (rw_craplcm2.cdhistor = 530 AND rw_craplcm2.cdpesqbb = 'ONLINE') OR
          -- verificar se existe o histórico 'de-para' da Cabal
          (GENE0002.fn_existe_valor(pr_base  => vr_cdhishcb
                                   ,pr_busca => rw_craplcm2.cdhistor
                                   ,pr_delimite => ',') = 'S') THEN
          --Proximo registro
          CONTINUE;
        END IF;
        --Selecionar Historico
        OPEN cr_craphis (pr_cdcooper => pr_cdcooper
                        ,pr_cdhistor => rw_craplcm2.cdhistor);
        FETCH cr_craphis INTO rw_craphis;
        --Se nao encontrou
        IF cr_craphis%NOTFOUND THEN
          --Fechar Cursor
          CLOSE cr_craphis;
          --Codigo Erro
          vr_cdcritic:= 80;
          vr_dscritic:= NULL;
          --Levantar Excecao
          RAISE vr_exc_erro;
        END IF;
        --Fechar Cursor
        CLOSE cr_craphis; 
        
        /* Se foi informado credito ou debito, filtrar */
        IF nvl(trim(pr_indebcre),'') IS NOT NULL AND
           rw_craphis.indebcre <> pr_indebcre   THEN
           continue;
        END IF;    
        
        -- Se os periodos foram informados, filtrar por eles 
        IF pr_dtiniper IS NOT NULL   AND                            
           pr_dtfimper IS NOT NULL   AND                            
          (rw_craplcm2.dtmvtolt < pr_dtiniper   OR
           rw_craplcm2.dtmvtolt > pr_dtfimper)  THEN
           continue;
        END IF; 
             
        --Incrementar contador lancamentos na tabela
        vr_index:= pr_tab_lancamento_futuro.COUNT+1;
        --Criar Lancamento Futuro na tabela
        pr_tab_lancamento_futuro(vr_index).dtmvtolt:= rw_craplcm2.dtmvtolt;
        pr_tab_lancamento_futuro(vr_index).dsmvtolt:= to_char(rw_craplcm2.dtmvtolt,'DD/MM/YYYY');
        pr_tab_lancamento_futuro(vr_index).indebcre:= 'D';
        pr_tab_lancamento_futuro(vr_index).vllanmto:= rw_craplcm2.vllanmto;

        --Pagamentos Internet
        IF rw_craphis.cdhistor = 508 THEN                                                    --*Nao remover replace os traços sao diferentes
          pr_tab_lancamento_futuro(vr_index).dshistor:= substr(rw_craphis.dshistor ||' - '|| REPLACE(rw_craplcm2.dscedent,'', '-'),1,50);
        ELSE
          IF rw_craplcm2.cdhistor IN (24,27,47,78,156,191,338,351,399,573,657) THEN
            pr_tab_lancamento_futuro(vr_index).dshistor:= substr(rw_craphis.dshistor || rw_craplcm2.cdpesqbb,1,50);
          ELSE
            pr_tab_lancamento_futuro(vr_index).dshistor:= rw_craphis.dshistor;
          END IF;    
        END IF;  
        /* Para saque e saque compartilhado  pega o numero do documento e a hora*/
        IF rw_craplcm2.cdhistor IN (316,918) THEN
          pr_tab_lancamento_futuro(vr_index).nrdocmto:= to_char(rw_craplcm2.nrdocmto,'fm99990')||' '||gene0002.fn_converte_time_data(rw_craplcm2.nrdocmto);
        ELSIF rw_craplcm2.cdhistor IN (375,376,377,537,538,539,771,772) THEN
          pr_tab_lancamento_futuro(vr_index).nrdocmto:= TO_CHAR(SUBSTR(rw_craplcm2.cdpesqbb,45,8),'fm99999g999g0');
        ELSIF rw_craplcm2.cdhistor IN (104,302,303) THEN
          IF TO_NUMBER(rw_craplcm2.cdpesqbb) > 0  THEN
            pr_tab_lancamento_futuro(vr_index).nrdocmto:= TO_CHAR(rw_craplcm2.cdpesqbb,'fm99999g999g0');
          ELSE
            pr_tab_lancamento_futuro(vr_index).nrdocmto:= TO_CHAR(rw_craplcm2.nrdocmto,'fm99999g999g0');
          END IF; 
        ELSIF rw_craplcm2.cdhistor = 418 THEN
          pr_tab_lancamento_futuro(vr_index).nrdocmto:= '    '||SUBSTR(rw_craplcm2.cdpesqbb,60,7);
        ELSIF rw_craplcm2.cdhistor IN (567,568,569,773,774) THEN
          pr_tab_lancamento_futuro(vr_index).nrdocmto:= TO_CHAR(SUBSTR(rw_craplcm2.cdpesqbb,50,8),'fm99999g999g0');
        ELSIF rw_craplcm2.cdhistor IN (1009,1011,1163,1167,vr_cdhistaa,vr_cdhsetaa,vr_cdhisint,vr_cdhseint) THEN
          pr_tab_lancamento_futuro(vr_index).nrdocmto:= TO_CHAR(rw_craplcm2.nrdctabb,'fm99999g999g0');
        ELSE
          IF rw_craplcm2.cdhistor = 100  THEN
            --Tem codigo Pesquisa
            IF rw_craplcm2.cdpesqbb IS NOT NULL THEN
              --Codigo Pesquisa
              pr_tab_lancamento_futuro(vr_index).nrdocmto:= rw_craplcm2.cdpesqbb;
            ELSE
              --Numero Documento
              pr_tab_lancamento_futuro(vr_index).nrdocmto:= TO_CHAR(rw_craplcm2.nrdocmto,'fm99999g999g0');
            END IF;    
          ELSIF gene0002.fn_existe_valor(vr_lshistor,rw_craplcm2.cdhistor,',') = 'S' THEN
            --Numero Documento
            pr_tab_lancamento_futuro(vr_index).nrdocmto:= TO_CHAR(rw_craplcm2.nrdocmto,'fm99999g999g0');
          ELSIF LENGTH(rw_craplcm2.nrdocmto) < 10 THEN
            --Numero Documento
            pr_tab_lancamento_futuro(vr_index).nrdocmto:= TO_CHAR(rw_craplcm2.nrdocmto,'fm9999999g990');
          ELSE 
            --Numero Documento
            pr_tab_lancamento_futuro(vr_index).nrdocmto:= SUBSTR(TO_CHAR(rw_craplcm2.nrdocmto,'fm99999999999999999999'),10,11);
          END IF;     
        END IF;    
          
        IF rw_craphis.inhistor IN (1,2,3,4,5) THEN
          --Valor Lancamento Automatico
          vr_vllautom:= nvl(vr_vllautom,0) + rw_craplcm2.vllanmto;
          --Valor Lancamento Credito
          vr_vllaucre:= nvl(vr_vllaucre,0) + rw_craplcm2.vllanmto;
        ELSIF rw_craphis.inhistor IN (11,12,13,14,15) THEN
          --Valor Lancamento Automatico
          vr_vllautom:= nvl(vr_vllautom,0) - rw_craplcm2.vllanmto;
          --Valor Lancamento Debito
          vr_vllaudeb:= nvl(vr_vllaudeb,0) + rw_craplcm2.vllanmto;
        ELSE
          --Codigo Erro
          vr_cdcritic:= 83;
          vr_dscritic:= NULL;
          --Levantar Excecao
          RAISE vr_exc_erro;   
        END IF;    
      END LOOP;
      /* busca lancamentos de tarifas agendados e pendentes para listar */
      FOR rw_craplat IN cr_craplat (pr_cdcooper => pr_cdcooper 
                                   ,pr_nrdconta => pr_nrdconta) LOOP
        --Selecionar Historico
        OPEN cr_craphis (pr_cdcooper => pr_cdcooper
                        ,pr_cdhistor => rw_craplat.cdhistor);
        FETCH cr_craphis INTO rw_craphis;
        --Se nao encontrou
        IF cr_craphis%NOTFOUND THEN
          --Fechar Cursor
          CLOSE cr_craphis;
          --Codigo Erro
          vr_cdcritic:= 80;
          vr_dscritic:= NULL;
          --Levantar Excecao
          RAISE vr_exc_erro;
        END IF;
        --Fechar Cursor
        CLOSE cr_craphis;                           
        
        IF ((rw_craphis.indebcre = pr_indebcre OR 
             nvl(trim(pr_indebcre),'') IS NULL)/* AND
           ((rw_craplat.dtmvtolt >= pr_dtiniper AND 
             rw_craplat.dtmvtolt <= pr_dtfimper) OR
             pr_dtiniper IS NULL AND 
             pr_dtfimper IS NULL)*/) THEN
        --Incrementar contador lancamentos na tabela
        vr_index:= pr_tab_lancamento_futuro.COUNT+1;
        --Criar Lancamento Futuro na tabela
        pr_tab_lancamento_futuro(vr_index).dtmvtolt:= rw_craplat.dtmvtolt;
        pr_tab_lancamento_futuro(vr_index).dsmvtolt:= to_char(rw_craplat.dtmvtolt,'DD/MM/YYYY');
        pr_tab_lancamento_futuro(vr_index).dshistor:= rw_craphis.dshistor;
        --Se possui numero documento
        IF rw_craplat.nrdocmto > 0 THEN
          pr_tab_lancamento_futuro(vr_index).nrdocmto:= to_char(rw_craplat.nrdocmto,'fm999g999g990');
        ELSE
          pr_tab_lancamento_futuro(vr_index).nrdocmto:= to_char(rw_craplat.idseqlat,'fm999g999g990');
        END IF;    
        pr_tab_lancamento_futuro(vr_index).indebcre:= rw_craphis.indebcre;
        pr_tab_lancamento_futuro(vr_index).vllanmto:= rw_craplat.vltarifa; 
        --Valor Lancamento Automatico
        vr_vllautom:= nvl(vr_vllautom,0) - rw_craplat.vltarifa;
        --Valor Lancamento Debito
        vr_vllaudeb:= nvl(vr_vllaudeb,0) + rw_craplat.vltarifa;                                    
        END IF;                             
      END LOOP; --rw_craplat
      
      /* Renato(Supero) - 12/08/2014 - Buscar maior float de cobrança 085 */
      vr_qtdfloat:= 0;
      --Buscar maior float
      OPEN cr_crapcco_float(pr_cdcooper => pr_cdcooper);
      FETCH cr_crapcco_float INTO vr_qtdfloat;
      --Fechar Cursor
      CLOSE cr_crapcco_float;
      
      /* Buscar o ultimo dia útil baseado na quantidade de dias de Float */
      vr_dtrefere:= fn_dia_util_anterior (pr_cdcooper => pr_cdcooper
                                         ,pr_dtvencto => rw_crapdat.dtmvtolt
                                         ,pr_qtdddias => vr_qtdfloat);
                                           
      /* buscar os títulos pagos com data de crédito já gravada */
      FOR rw_crapret IN cr_crapret (pr_cdcooper => pr_cdcooper
                                   ,pr_nrdconta => pr_nrdconta
                                   ,pr_dtmvtolt => rw_crapdat.dtmvtolt
                                   ,pr_dtrefere => vr_dtrefere) LOOP
        --Primeiro registro da data
        IF rw_crapret.nrseqreg = 1 THEN
          --Zerar valor e quantidade
          vr_vldpagto:= 0;
          vr_qtdpagto:= 0;
        END IF;
        /* Se os periodos foram informados, filtrar por eles */   
        IF (pr_dtiniper IS NULL                 AND                              
            pr_dtfimper IS NULL)                 OR                               
           (rw_crapret.dtcredit >= pr_dtiniper   AND                 
            rw_crapret.dtcredit <= pr_dtfimper)  AND 
            NOT pr_indebcre = 'D' THEN
        --Somar valor e quantidade
        vr_vldpagto:= vr_vldpagto + nvl(rw_crapret.vlrpagto,0);
        vr_qtdpagto:= vr_qtdpagto + 1;
        END IF;
        --Ultimo Registro da Data
        IF rw_crapret.nrseqreg = rw_crapret.nrtotreg THEN
          /* Se os periodos foram informados, filtrar por eles */   
          IF (pr_dtiniper IS NULL                  AND                              
              pr_dtfimper IS NULL)                 OR                               
             (rw_crapret.dtcredit >= pr_dtiniper   AND                 
              rw_crapret.dtcredit <= pr_dtfimper)  AND 
              NOT pr_indebcre = 'D' THEN
          --Incrementar contador lancamentos na tabela
          vr_index:= pr_tab_lancamento_futuro.COUNT+1;
          --Criar Lancamento Futuro na tabela
          pr_tab_lancamento_futuro(vr_index).dtmvtolt:= rw_crapret.dtcredit;
          pr_tab_lancamento_futuro(vr_index).dsmvtolt:= to_char(rw_crapret.dtcredit,'DD/MM/YYYY');
          
          IF rw_crapret.dtcredit = rw_crapdat.dtmvtolt THEN
            pr_tab_lancamento_futuro(vr_index).dshistor:= 'CRED.COBRANCA - '||to_char(rw_crapret.nrconven,'fm999g999g990') || ' - PREVISAO';
          ELSE
          pr_tab_lancamento_futuro(vr_index).dshistor:= 'CRED.COBRANCA - '||to_char(rw_crapret.nrconven,'fm999g999g990');
          END IF;
          
          pr_tab_lancamento_futuro(vr_index).nrdocmto:= to_char(vr_qtdpagto,'fm999g999g990');
          pr_tab_lancamento_futuro(vr_index).indebcre:= 'C';
          pr_tab_lancamento_futuro(vr_index).vllanmto:= vr_vldpagto; 
          --Acumular valor automatico 
          vr_vllautom:= nvl(vr_vllautom,0) + vr_vldpagto;
          --Acumular valor Credito 
          vr_vllaucre:= nvl(vr_vllaucre,0) + vr_vldpagto;
        END IF;                                                 
        END IF;
      END LOOP;
                                                                                        
      -- mostrar lancto futuro de creditos de cobranca NPC
      -- pagos fora do sistema Cecred
      FOR rw_cred_npc IN cr_cred_npc (pr_cdcooper => pr_cdcooper
                                     ,pr_nrdconta => pr_nrdconta
                                     ,pr_dtmvtolt => rw_crapdat.dtmvtolt) LOOP

          -- se a data do credito for o dia atual e já foi efetivado
          -- é porque já foi creditado na conta
          IF rw_cred_npc.flgefetv = 1 AND 
             rw_cred_npc.dtcredito = rw_crapdat.dtmvtolt THEN
             CONTINUE;
          END IF;                                     

          --Incrementar contador lancamentos na tabela
          vr_index:= pr_tab_lancamento_futuro.COUNT+1;
          --Criar Lancamento Futuro na tabela
          pr_tab_lancamento_futuro(vr_index).dtmvtolt:= rw_cred_npc.dtcredito;
          pr_tab_lancamento_futuro(vr_index).dsmvtolt:= to_char(rw_cred_npc.dtcredito,'DD/MM/YYYY');
          
          IF rw_cred_npc.dtcredito > rw_crapdat.dtmvtolt THEN
            pr_tab_lancamento_futuro(vr_index).dshistor:= 'CRED.COBRANCA - PREVISAO';
          ELSE
            pr_tab_lancamento_futuro(vr_index).dshistor:= 'CRED.COBRANCA';
          END IF;
          
          pr_tab_lancamento_futuro(vr_index).nrdocmto:= to_char(rw_cred_npc.qtcredito,'fm999g999g990');
          pr_tab_lancamento_futuro(vr_index).indebcre:= 'C';
          pr_tab_lancamento_futuro(vr_index).vllanmto:= rw_cred_npc.vlcredito; 
          --Acumular valor automatico 
          vr_vllautom:= nvl(vr_vllautom,0) + rw_cred_npc.vlcredito;
          --Acumular valor Credito 
          vr_vllaucre:= nvl(vr_vllaucre,0) + rw_cred_npc.vlcredito;
                                               
      END LOOP;
                                                                                        
      --Selecionar Historico de débito de titulo vencido
      --Alterado de lugar para não buscar o mesmo histórico em cada registro do LOOP de titulos descontados
          OPEN cr_craphis (pr_cdcooper => pr_cdcooper
                          ,pr_cdhistor => 591); --DEB.TIT.VENC
          FETCH cr_craphis INTO rw_craphis;
          --Se nao encontrou
          IF cr_craphis%NOTFOUND THEN
            --Fechar Cursor
            CLOSE cr_craphis;
            --Codigo Erro
            vr_cdcritic:= 80;
            vr_dscritic:= NULL;
            --Levantar Excecao
            RAISE vr_exc_erro;
          END IF;
          --Fechar Cursor
          CLOSE cr_craphis;

      -- Borderos de desconto de titulos
      FOR rw_craptdb IN cr_craptdb(pr_cdcooper => pr_cdcooper,
                                   pr_nrdconta => pr_nrdconta,
                                   pr_dtmvtolt => rw_crapdat.dtmvtolt) LOOP

        -- Verificar a data de vencimento util do titulo
        vr_dtvencto_titulo := gene0005.fn_valida_dia_util(pr_cdcooper => rw_craptdb.cdcooper, 
                                                          pr_dtmvtolt => rw_craptdb.dtvencto, 
                                                          pr_tipo     => 'P'); --proximo dia util

        -- Se o titulo vencer em um feriado, ele ainda pode ser pago no proximo dia util
        -- dessa forma o titulo nao deve ser listado como lancamento futuro
        IF vr_dtvencto_titulo >= rw_crapdat.dtmvtolt THEN
          CONTINUE;
        END IF;
        
        -- Tratamento para nao listar no primeiro dia util do ano 
        -- os titulos vencidos no ultimo dia util do ano anterior 
        IF to_char(vr_dtvencto_titulo,'YYYY') <> to_char(rw_crapdat.dtmvtocd,'YYYY') THEN
          -- Se o ano de vencmento do titulo eh diferente do ano da data do sistema
          -- Ultimo dia do ano do vencimetno do titulo
          vr_dt_ultimo_dia:= TO_DATE('31/12/'||to_char(vr_dtvencto_titulo,'YYYY'),'DD/MM/YYYY');
          -- Buscar o ultimo dia util do ano
          vr_dt_ultimo_dia:= gene0005.fn_valida_dia_util(pr_cdcooper => pr_cdcooper
                                                        ,pr_dtmvtolt => vr_dt_ultimo_dia
                                                        ,pr_tipo     => 'A');

          -- Apenas se o vencimento for no ultimo dia util do ano
          IF vr_dtvencto_titulo = vr_dt_ultimo_dia THEN
            -- Ultimo dia do ano do vencimetno do titulo
            vr_dt_ultimo_dia:= TO_DATE('31/12/'||to_char(vr_dtvencto_titulo,'YYYY'),'DD/MM/YYYY');
            -- Buscar o primeiro dia util após o ultimo dia do ano
            vr_dtvencto_titulo:= gene0005.fn_valida_dia_util(pr_cdcooper => pr_cdcooper, 
                                                             pr_dtmvtolt => vr_dt_ultimo_dia,
                                                             pr_tipo     => 'P'); -- Proximo dia util
            -- Tambem deve ser ignorado o titulo que vencer no ultimo dia util do ano
            -- pois essa data nao possui movimentacao bancaria
            -- Ex.: Titulo vence em 30/12/2016 e pode ser pago em 02/01/2017
            --      portanto nao deve ser exibido como lancamento futuro
            IF vr_dtvencto_titulo >= rw_crapdat.dtmvtolt THEN
              CONTINUE;
            END IF;
          END IF;
        END IF;
        
        IF  (rw_craptdb.dtvencto >= pr_dtiniper AND
             rw_craptdb.dtvencto <= pr_dtfimper) OR
            (pr_dtiniper IS NULL AND pr_dtfimper IS NULL) THEN
            
          OPEN cr_crapcob( pr_cdcooper => rw_craptdb.cdcooper,
                           pr_cdbandoc => rw_craptdb.cdbandoc,
                           pr_nrdctabb => rw_craptdb.nrdctabb,
                           pr_nrcnvcob => rw_craptdb.nrcnvcob,
                           pr_nrdconta => rw_craptdb.nrdconta,
                           pr_nrdocmto => rw_craptdb.nrdocmto);
          FETCH cr_crapcob INTO rw_crapcob;

          IF cr_crapcob%NOTFOUND THEN
            CLOSE cr_crapcob;
            continue;
          END IF;
          CLOSE cr_crapcob;

          --Incrementar contador lancamentos na tabela
          vr_index:= pr_tab_lancamento_futuro.COUNT+1;
          --Criar Lancamento Futuro na tabela
          pr_tab_lancamento_futuro(vr_index).dtmvtolt:= rw_craptdb.dtvencto;
          pr_tab_lancamento_futuro(vr_index).dsmvtolt:= to_char(rw_craptdb.dtvencto,'DD/MM/YYYY');
          pr_tab_lancamento_futuro(vr_index).dshistor:= rw_craphis.dshistor;
          pr_tab_lancamento_futuro(vr_index).nrdocmto:= to_char( to_number( SUBSTR( rw_crapcob.nrnosnum , LENGTH(rw_crapcob.nrnosnum) - 8, 9 ) ), 'fm999g999g999g990');
          pr_tab_lancamento_futuro(vr_index).indebcre:= rw_craphis.indebcre;
          pr_tab_lancamento_futuro(vr_index).vllanmto:= rw_craptdb.vltitulo;
          --Acumular valor automatico
          vr_vllautom:= nvl(vr_vllautom,0) - rw_craptdb.vltitulo;
          --Acumular valor Credito
          vr_vllaudeb:= nvl(vr_vllaudeb,0) + rw_craptdb.vltitulo;

        END IF;                                                 

      END LOOP;

			-- Buscar recargas pendentes
			FOR rw_recarga IN cr_recargas(pr_cdcooper => pr_cdcooper
				                           ,pr_nrdconta => pr_nrdconta
																	 ,pr_dtinirec => pr_dtiniper
																	 ,pr_dtfimrec => pr_dtfimper) LOOP
				--Selecionar Historico de débito de recarga da operadora em c/c
        OPEN cr_craphis (pr_cdcooper => pr_cdcooper
                        ,pr_cdhistor => rw_recarga.cdhisdeb_cooperado); 
        FETCH cr_craphis INTO rw_craphis;
        --Se nao encontrou
        IF cr_craphis%NOTFOUND THEN
          --Fechar Cursor
          CLOSE cr_craphis;
          --Codigo Erro
          vr_cdcritic:= 80;
          vr_dscritic:= NULL;
					--Levantar Excecao
          RAISE vr_exc_erro;
        END IF;                                                 
				--Fechar Cursor
				CLOSE cr_craphis;

				--Incrementar contador lancamentos na tabela
        vr_index:= pr_tab_lancamento_futuro.COUNT+1;
        --Criar Lancamento Futuro na tabela
        pr_tab_lancamento_futuro(vr_index).dtmvtolt:= rw_recarga.dtrecarga;
        pr_tab_lancamento_futuro(vr_index).dsmvtolt:= to_char(rw_recarga.dtrecarga,'DD/MM/RRRR');
        pr_tab_lancamento_futuro(vr_index).dshistor:= rw_craphis.dshistor;
        pr_tab_lancamento_futuro(vr_index).nrdocmto:= to_char(rw_recarga.idoperacao, 
                                                              'fm9999999999999999999999999');
        pr_tab_lancamento_futuro(vr_index).indebcre:= rw_craphis.indebcre;
        pr_tab_lancamento_futuro(vr_index).vllanmto:= rw_recarga.vlrecarga;
        pr_tab_lancamento_futuro(vr_index).cdtiptra:= 20;
        pr_tab_lancamento_futuro(vr_index).idlancto:= rw_recarga.idoperacao;
        pr_tab_lancamento_futuro(vr_index).idlstdom:= 20;
        pr_tab_lancamento_futuro(vr_index).incancel:= 0;
        --Acumular valor automatico
        vr_vllautom:= nvl(vr_vllautom,0) - rw_recarga.vlrecarga;
        --Acumular valor Credito
        vr_vllaudeb:= nvl(vr_vllaudeb,0) + rw_recarga.vlrecarga;
				
      END LOOP;
                                                                                        
      --Diminuir valor lancamento automatico do debito
      vr_vllandeb:= vr_vllandeb - vr_vllautom;
      --Se valor debito eh positivo
      IF vr_vllandeb > 0 THEN                  
        vr_vllautom:= vr_vllautom - (TRUNC(vr_vllandeb * vr_tab_txcpmfcc,2));
      END IF;
      --Valor Lancamento automatico negativo
      IF vr_vllautom < 0 THEN
        vr_vllautom:= TRUNC(vr_vllautom * (1 + vr_tab_txcpmfcc),2);
      ELSE
        vr_vllautom:= TRUNC(vr_vllautom * vr_tab_txrdcpmf,2);
      END IF; 
      /* Totais Futuros */

      /*verificar totais TAA para telas de Saldos*/
      if pr_idorigem = 4 then

        OPEN cr_valoresTAA( pr_cdcooper => pr_cdcooper,
                            pr_nrdconta => pr_nrdconta);
        FETCH cr_valoresTAA INTO rw_valoresTAA;

        IF cr_valoresTAA%NOTFOUND THEN
          CLOSE cr_valoresTAA;
        END IF;
        vr_vllautom := rw_valoresTAA.Debito;
        vr_vllaucre := rw_valoresTAA.Credito;
        CLOSE cr_valoresTAA;
      end if;
      pr_tab_totais_futuros(1).vllautom:= vr_vllautom;
      pr_tab_totais_futuros(1).vllaudeb:= vr_vllaudeb;
      pr_tab_totais_futuros(1).vllaucre:= vr_vllaucre;
      -- Se foi solicitado geração de LOG
      IF pr_flgerlog THEN
        -- Chamar geração de LOG
        gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                            ,pr_cdoperad => pr_cdoperad
                            ,pr_dscritic => vr_dscritic
                            ,pr_dsorigem => GENE0001.vr_vet_des_origens(pr_idorigem)
                            ,pr_dstransa => vr_dstransa
                            ,pr_dttransa => TRUNC(SYSDATE)
                            ,pr_flgtrans => 1 --> TRUE
                            ,pr_hrtransa => gene0002.fn_busca_time
                            ,pr_idseqttl => pr_idseqttl
                            ,pr_nmdatela => pr_nmdatela
                            ,pr_nrdconta => pr_nrdconta
                            ,pr_nrdrowid => vr_nrdrowid);
      END IF; 
      --Retornar OK
      pr_des_reto:= 'OK';       
    EXCEPTION
      WHEN vr_exc_sucesso THEN
        pr_des_reto:= 'OK';
      WHEN vr_exc_erro THEN
        -- Retorno não OK
        pr_des_reto:= 'NOK';
        -- Chamar rotina de gravação de erro
        gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                             ,pr_cdagenci => pr_cdagenci
                             ,pr_nrdcaixa => pr_nrdcaixa
                             ,pr_nrsequen => 1 --> Fixo
                             ,pr_cdcritic => vr_cdcritic --> Critica 0
                             ,pr_dscritic => vr_dscritic
                             ,pr_tab_erro => pr_tab_erro);
        -- Se foi solicitado geração de LOG
        IF pr_flgerlog THEN
          -- Chamar geração de LOG
          gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                              ,pr_cdoperad => pr_cdoperad
                              ,pr_dscritic => vr_dscritic
                              ,pr_dsorigem => GENE0001.vr_vet_des_origens(pr_idorigem)
                              ,pr_dstransa => vr_dstransa
                              ,pr_dttransa => TRUNC(SYSDATE)
                              ,pr_flgtrans => 0 --> FALSE
                              ,pr_hrtransa => gene0002.fn_busca_time
                              ,pr_idseqttl => pr_idseqttl
                              ,pr_nmdatela => pr_nmdatela
                              ,pr_nrdconta => pr_nrdconta
                              ,pr_nrdrowid => vr_nrdrowid);
        END IF;  
      WHEN OTHERS THEN

        -- Retorno não OK
        pr_des_reto:= 'NOK';
        -- Chamar rotina de gravação de erro
        vr_dscritic := 'Erro na pc_consulta_lancamento --> '|| sqlerrm;
        gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                             ,pr_cdagenci => pr_cdagenci
                             ,pr_nrdcaixa => pr_nrdcaixa
                             ,pr_nrsequen => 1 --> Fixo
                             ,pr_cdcritic => 0 --> Critica 0
                             ,pr_dscritic => vr_dscritic
                             ,pr_tab_erro => pr_tab_erro);
        -- Se foi solicitado geração de LOG
        IF pr_flgerlog THEN
          -- Chamar geração de LOG
          gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                              ,pr_cdoperad => pr_cdoperad
                              ,pr_dscritic => vr_dscritic
                              ,pr_dsorigem => GENE0001.vr_vet_des_origens(pr_idorigem)
                              ,pr_dstransa => vr_dstransa
                              ,pr_dttransa => TRUNC(SYSDATE)
                              ,pr_flgtrans => 0 --> FALSE
                              ,pr_hrtransa => gene0002.fn_busca_time
                              ,pr_idseqttl => pr_idseqttl
                              ,pr_nmdatela => pr_nmdatela
                              ,pr_nrdconta => pr_nrdconta
                              ,pr_nrdrowid => vr_nrdrowid);
        END IF;  
      END;
    END pc_consulta_lancamento; 

    -- Subrotina para obter  impressao do extrato
    PROCEDURE pc_obtem_impressao_extrato (pr_cdcooper              IN crapcop.cdcooper%TYPE              --Codigo Cooperativa
                                         ,pr_cdagenci              IN crapass.cdagenci%TYPE              --Codigo Agencia
                                         ,pr_nrdcaixa              IN INTEGER                            --Numero do Caixa
                                         ,pr_cdoperad              IN VARCHAR2                           --Codigo Operador
                                         ,pr_nmdatela              IN VARCHAR2                           --Nome da Tela
                                         ,pr_idorigem              IN INTEGER                            --Origem dos Dados
                                         ,pr_nrdconta              IN crapass.nrdconta%TYPE              --Numero da Conta do Associado
                                         ,pr_idseqttl              IN INTEGER                            --Sequencial do Titular
                                         ,pr_dtmvtolt              IN DATE                               --Data Movimento
                                         ,pr_dtiniper              IN DATE                               --Data Inicio periodo   
                                         ,pr_dtfimper              IN DATE                               --Data Final periodo
                                         ,pr_inrelext              IN INTEGER                            --Indicador Relatorio Extrato
                                         ,pr_inisenta              IN INTEGER                            --Indicador isenta
                                         ,pr_inproces              IN INTEGER                            --Indicador Processo
                                         ,pr_flgtarif              IN BOOLEAN                            --Indicador Cobra tarifa
                                         ,pr_flgerlog              IN BOOLEAN                            --Escreve erro Log
                                         ,pr_tab_cabrel            OUT typ_tab_cabrel                    --Tabela cabecalho 
                                         ,pr_tab_dados_cooperado   OUT typ_tab_dados_cooperado           --Tabela Dados Cooperado
                                         ,pr_tab_extrato_conta     OUT EXTR0001.typ_tab_extrato_conta    --Tabela Extrato Conta
                                         ,pr_tab_extrato_cheque    OUT typ_tab_extrato_cheque            --Tabela Extrato Cheque
                                         ,pr_tab_dep_identific     OUT EXTR0001.typ_tab_dep_identificado --Tabela Depositos Identificados
                                         ,pr_tab_taxa_juros        OUT typ_tab_taxa_juros                --Tabela taxa juros
                                         ,pr_tab_totais_futuros    OUT typ_tab_totais_futuros            --Tabela Totais Futuros
                                         ,pr_tab_lancamento_futuro OUT typ_tab_lancamento_futuro         --Tabela lancamentos futuros
                                         ,pr_tab_msg_confirma      OUT empr0001.typ_tab_msg_confirma     --Tabela Mensagem Confirmada
                                         ,pr_tab_erro              OUT GENE0001.typ_tab_erro             --Tabela de Erros
                                         ,pr_des_reto              OUT VARCHAR2) IS                      --Descricao OK/NOK
  BEGIN
  ---------------------------------------------------------------------------------------------------------------
  --
  --  Programa : pc_obtem_impressao_extrato            Antigo: procedures/b1wgen0001.p/obtem-impressao-extrato
  --  Sistema  : 
  --  Sigla    : CRED
  --  Autor    : Alisson C. Berrido - Amcom
  --  Data     : Julho/2014                           Ultima atualizacao: 02/07/2014
  --
  -- Dados referentes ao programa:
  --
  -- Frequencia: -----
  -- Objetivo   : Procedure para obter impressao do extrato do associado
  --
  -- Alterações : 02/07/2014 - Conversão Progress -> Oracle (Alisson - AMcom)
  --
  ---------------------------------------------------------------------------------------------------------------
  DECLARE                                         
       -- Cursor para busca de associados
       CURSOR cr_crapass (pr_cdcooper crapcop.cdcooper%TYPE
                         ,pr_nrdconta crapass.nrdconta%TYPE) IS
         SELECT crapass.nrdconta
               ,crapass.inpessoa
               ,crapass.cdsitdtl
               ,crapass.dtelimin
               ,crapass.cdagenci
               ,crapass.cdsecext
               ,crapass.nmprimtl
               ,crapass.vllimcre
          FROM crapass crapass
          WHERE crapass.cdcooper = pr_cdcooper 
          AND   crapass.nrdconta = pr_nrdconta;
        rw_crapass cr_crapass%ROWTYPE;                                         
        -- Cursor para busca a agencia
        CURSOR cr_crapage(pr_cdcooper IN crapage.cdcooper%TYPE
                         ,pr_cdagenci IN crapage.cdagenci%TYPE) IS
          SELECT crapage.nmcidade
                ,crapage.cdagenci
                ,crapage.nmresage
          FROM crapage crapage
          WHERE crapage.cdcooper = pr_cdcooper 
          AND   crapage.cdagenci = pr_cdagenci;
        rw_crapage cr_crapage%ROWTYPE;
        -- Cursor Operador
        CURSOR cr_crapope(pr_cdcooper IN crapope.cdcooper%TYPE
                         ,pr_cdoperad IN crapope.cdoperad%TYPE) IS
          SELECT crapope.cdagenci
                ,crapope.nmoperad
                ,crapope.cddepart
          FROM crapope crapope
          WHERE crapope.cdcooper = pr_cdcooper
          AND   UPPER(crapope.cdoperad) = UPPER(pr_cdoperad);
        rw_crapope cr_crapope%ROWTYPE;   
        -- Cursor para busca de titular da conta pf
        CURSOR cr_crapttl (pr_cdcooper IN crapcop.cdcooper%TYPE
                          ,pr_nrdconta IN crapttl.nrdconta%TYPE) IS
          SELECT crapttl.cdempres
          FROM crapttl crapttl
          WHERE crapttl.cdcooper = pr_cdcooper 
          AND   crapttl.nrdconta = pr_nrdconta 
          AND   crapttl.idseqttl = 1;
        rw_crapttl cr_crapttl%ROWTYPE;
  
        -- Cursor para busca de titular da conta pj
        CURSOR cr_crapjur (pr_cdcooper IN crapcop.cdcooper%TYPE
                          ,pr_nrdconta IN crapjur.nrdconta%TYPE) IS
        SELECT crapjur.cdempres
        FROM crapjur crapjur
        WHERE crapjur.cdcooper = pr_cdcooper 
        AND   crapjur.nrdconta = pr_nrdconta;
        rw_crapjur cr_crapjur%ROWTYPE;
        -- cursor genérico de calendário
        rw_crapdat btch0001.cr_crapdat%ROWTYPE;
        --Variaveis Locais
        vr_cdempres INTEGER;
        vr_qtregist INTEGER;
        vr_nrdrowid ROWID;
        vr_flgtrans BOOLEAN;
        vr_typ_saida VARCHAR2(10);
        vr_dsorigem VARCHAR2(100);
        vr_dstransa VARCHAR2(100);
        vr_comando  VARCHAR2(200);
        vr_terminal VARCHAR2(125);
        vr_server   VARCHAR2(100);
        vr_nmdireto_arq VARCHAR2(100);
        vr_lshistor craptab.dstextab%TYPE;
        --Variaveis Erro
        vr_des_reto VARCHAR2(3);
        vr_cdcritic INTEGER;
        vr_dscritic VARCHAR2(4000);
        --Variaveis de Excecoes
        vr_exc_erro EXCEPTION;
        vr_exc_sair EXCEPTION;
      BEGIN
        --Limpar parametros erro
        pr_des_reto:= 'OK';
        --Limpar Tabelas Memoria
        pr_tab_cabrel.DELETE;
        pr_tab_dados_cooperado.DELETE;
        pr_tab_extrato_conta.DELETE;
        pr_tab_extrato_cheque.DELETE;
        pr_tab_dep_identific.DELETE;
        pr_tab_taxa_juros.DELETE;
        pr_tab_totais_futuros.DELETE;
        pr_tab_lancamento_futuro.DELETE;
        pr_tab_msg_confirma.DELETE;
        pr_tab_erro.DELETE;
        
        --Inicializar Variaveis
        vr_cdcritic:= 0;
        vr_dscritic:= NULL;
        vr_flgtrans:= FALSE;
        
        BEGIN
          
          --Buscar Data do Sistema para a cooperativa 
          OPEN btch0001.cr_crapdat(pr_cdcooper => pr_cdcooper);
          FETCH btch0001.cr_crapdat INTO rw_crapdat;
          --Se nao encontrou
          IF btch0001.cr_crapdat%NOTFOUND THEN
            -- Fechar Cursor
            CLOSE btch0001.cr_crapdat;
            -- montar mensagem de critica
            vr_cdcritic := 1;
            vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => 1);
            -- Levantar Excecao
            RAISE vr_exc_erro;
          ELSE
            -- apenas fechar o cursor
            CLOSE btch0001.cr_crapdat;
          END IF;
          --Selecionar Associado
          OPEN cr_crapass (pr_cdcooper => pr_cdcooper
                          ,pr_nrdconta => pr_nrdconta);
          FETCH cr_crapass INTO rw_crapass;
          --Se nao encontrou
          IF cr_crapass%NOTFOUND THEN
            --Fechar Cursor
            CLOSE cr_crapass; 
            --Codigo critica
            vr_cdcritic:= 9; 
            --Buscar Mensagem Critica
            vr_dscritic:= gene0001.fn_busca_critica(vr_cdcritic);
            --Sair
            RAISE vr_exc_sair;
          END IF;
          --Fechar Cursor
          CLOSE cr_crapass; 
          
          --Selecionar Dados Agencia
          OPEN cr_crapage(pr_cdcooper => pr_cdcooper
                         ,pr_cdagenci => rw_crapass.cdagenci);
          FETCH cr_crapage INTO rw_crapage;
          --Se nao Encontrou            
          IF cr_crapage%NOTFOUND THEN
            --Fechar Cursor
            CLOSE cr_crapage;
            --Codigo Critica    
            vr_cdcritic:= 962;
            --Buscar Mensagem Critica
            vr_dscritic:= gene0001.fn_busca_critica(vr_cdcritic);
            --Sair
            RAISE vr_exc_sair;
          END IF;  
          -- Fechar o cursor
          CLOSE cr_crapage;
          
          IF pr_idorigem IN (1,2,5) THEN
            -- Buscar Dados do Operador
            OPEN cr_crapope(pr_cdcooper => pr_cdcooper
                           ,pr_cdoperad => pr_cdoperad);
            FETCH cr_crapope INTO rw_crapope;
            -- Verifica se a retornou registro
            IF cr_crapope%NOTFOUND THEN
              CLOSE cr_crapope;
              vr_cdcritic := 67;
              RAISE vr_exc_sair;
            ELSE
              -- Apenas Fecha o Cursor
             CLOSE cr_crapope;
            END IF; 
            -- Se for pessoa física
            IF rw_crapass.inpessoa = 1 THEN
              -- Busca titular da conta
              OPEN cr_crapttl(pr_cdcooper => pr_cdcooper
                            ,pr_nrdconta => rw_crapass.nrdconta);
              FETCH cr_crapttl INTO rw_crapttl;
              -- Se encontrou titular
              IF cr_crapttl%FOUND THEN
                 -- Atribui código da empresa do titular
                vr_cdempres:= rw_crapttl.cdempres;
              ELSE
                vr_cdempres:= 0;  
              END IF;
              -- Fecha cursor
              CLOSE cr_crapttl;
            ELSE
              -- Abre cursor de pessoa jurídica
              OPEN cr_crapjur (pr_cdcooper => pr_cdcooper
                              ,pr_nrdconta => rw_crapass.nrdconta);
              FETCH cr_crapjur INTO rw_crapjur;
              -- Se encontrou PJ
              IF cr_crapjur%FOUND THEN
                -- Pega código da empresa da PJ
                vr_cdempres:= rw_crapjur.cdempres;
              ELSE
                vr_cdempres:= 0;  
              END IF;
              -- Fecha cursor
              CLOSE cr_crapjur;
            END IF;
            --Empresas 
            IF vr_cdempres IN (11,50)  AND 
               rw_crapope.nmoperad <> rw_crapass.nmprimtl  AND
               rw_crapope.cddepart <> 20 THEN
              --Ayllos
              IF pr_idorigem = 1 THEN 
                -- Comando para copiar o arquivo para a pasta salvar
                vr_comando:= '`tty`';

                --Executar o comando no unix
                GENE0001.pc_OScommand (pr_typ_comando => 'S'
                                      ,pr_des_comando => vr_comando
                                      ,pr_typ_saida   => vr_typ_saida
                                      ,pr_des_saida   => vr_terminal);
                --Se ocorreu erro dar RAISE
                IF vr_typ_saida = 'ERR' THEN
                  vr_dscritic:= 'Nao foi possivel executar comando unix. '||vr_comando;
                  -- retornando ao programa chamador
                  raise vr_exc_sair;
                END IF; 
                -- Comando para copiar o arquivo para a pasta salvar
                vr_comando:= '`hostname -s`';

                --Executar o comando no unix
                GENE0001.pc_OScommand (pr_typ_comando => 'S'
                                      ,pr_des_comando => vr_comando
                                      ,pr_typ_saida   => vr_typ_saida
                                      ,pr_des_saida   => vr_server);
                --Se ocorreu erro dar RAISE
                IF vr_typ_saida = 'ERR' THEN
                  vr_dscritic:= 'Nao foi possivel executar comando unix. '||vr_comando;
                  -- retornando ao programa chamador
                  raise vr_exc_sair;
                END IF; 
                --Descricao Terminal
                vr_terminal:= substr(vr_server,length(vr_server)-1)||vr_terminal;
              END IF; 
              
              --Buscar Diretorio Arq. da cooperativa
              vr_nmdireto_arq:= gene0001.fn_diretorio (pr_tpdireto => 'C'           --> /usr/coop
                                                       ,pr_cdcooper => pr_cdcooper   --> Cooperativa
                                                       ,pr_nmsubdir => 'arq');        --> Utilizaremos o rl
              --Montar Comando para logar acesso no arquivo
              vr_terminal:= to_char(pr_dtmvtolt,'YYYYMMDD')||' '||
                            rpad(pr_cdoperad,10,' ')||' '|| 
                            rpad(rw_crapope.nmoperad,15,' ')||' '||
                            gene0002.fn_mask(pr_nrdconta,'99999999')||'"'||
                            rpad(rw_crapass.nmprimtl,15,' ')|| '" '||
                            to_char(SYSDATE,'HH24:MI:SS')|| ' '||
                            rpad(vr_terminal,15,' ')|| ' '||
                            rpad(pr_nmdatela,30,' ');
                            
              --Escrever mensagem no arquivo de acessos
              vr_comando:= 'echo '||vr_terminal||' >> '||vr_nmdireto_arq||'/'||'.acessos.dat';
              
              --Executar o comando no unix
              GENE0001.pc_OScommand (pr_typ_comando => 'S'
                                    ,pr_des_comando => vr_comando
                                    ,pr_typ_saida   => vr_typ_saida
                                    ,pr_des_saida   => vr_dscritic);
              --Se ocorreu erro dar RAISE
              IF vr_typ_saida = 'ERR' THEN
                vr_dscritic:= 'Nao foi possivel executar comando unix. '||vr_comando;
                -- retornando ao programa chamador
                raise vr_exc_sair;
              END IF;                       
            END IF;   
          END IF;  

          --Buscar Informacoes Cabecalho
          pc_busca_cabrel (pr_cdcooper   => pr_cdcooper      --Codigo Cooperativa
                          ,pr_cdagenci   => pr_cdagenci      --Codigo Agencia
                          ,pr_nrdcaixa   => pr_nrdcaixa      --Numero do Caixa
                          ,pr_cdoperad   => pr_cdoperad      --Codigo Operador
                          ,pr_cdprogra   => pr_nmdatela      --Nome da Tela
                          ,pr_idorigem   => pr_idorigem      --Origem dos Dados
                          ,pr_cdrelato   => 40               --Codigo Relatorio
                          ,pr_nrdconta   => pr_nrdconta      --Numero da Conta do Associado
                          ,pr_dtmvtolt   => pr_dtmvtolt      --Data Movimento
                          ,pr_tab_erro   => pr_tab_erro      --Tabela de Erros
                          ,pr_tab_cabrel => pr_tab_cabrel    --Tabela cabecalho 
                          ,pr_des_reto   => vr_des_reto);    --Retorno OK/NOK
          --Se ocorreu erro
          IF vr_des_reto = 'NOK' THEN
            --Levantar Excecao
            RAISE vr_exc_sair;
          END IF;    
          
          --Criar dados cooperado na tabela
          pr_tab_dados_cooperado(rw_crapass.nrdconta).nrdconta:= rw_crapass.nrdconta;
          pr_tab_dados_cooperado(rw_crapass.nrdconta).nmprimtl:= rw_crapass.nmprimtl;
          pr_tab_dados_cooperado(rw_crapass.nrdconta).cdagenci:= rw_crapage.cdagenci;
          pr_tab_dados_cooperado(rw_crapass.nrdconta).nmresage:= rw_crapage.nmresage;
          pr_tab_dados_cooperado(rw_crapass.nrdconta).vllimcre:= rw_crapass.vllimcre;
          
          --Buscar Lista Historicos Cheques
          vr_lshistor:= tabe0001.fn_busca_dstextab(pr_cdcooper => pr_cdcooper
                                                  ,pr_nmsistem => 'CRED'
                                                  ,pr_tptabela => 'GENERI'
                                                  ,pr_cdempres => 0
                                                  ,pr_cdacesso => 'HSTCHEQUES'
                                                  ,pr_tpregist => 0);
          --Se nao encontrou
          IF vr_lshistor IS NULL THEN
            vr_lshistor:= '999';
          END IF;                                          
          
          -- Efetuar chamada a rotina que monta a tabela temporária de extrato da conta
          EXTR0001.pc_consulta_extrato(pr_cdcooper     => pr_cdcooper   --Codigo Cooperativa
                                      ,pr_rw_crapdat   => rw_crapdat    --Registro de Datas
                                      ,pr_cdagenci     => pr_cdagenci   --Codigo Agencia
                                      ,pr_nrdcaixa     => pr_nrdcaixa   --Numero do Caixa
                                      ,pr_cdoperad     => pr_cdoperad   --Codigo Operador
                                      ,pr_nrdconta     => pr_nrdconta   --Numero da Conta
                                      ,pr_vllimcre     => rw_crapass.vllimcre --Valor Limite Credito
                                      ,pr_dtiniper     => pr_dtiniper   --Data Inicial Periodo
                                      ,pr_dtfimper     => pr_dtfimper   --Data Final Periodo
                                      ,pr_lshistor     => vr_lshistor   --Lista Historicos
                                      ,pr_idorigem     => pr_idorigem   --Origem dos Dados
                                      ,pr_idseqttl     => pr_idseqttl   --Sequencial do Titular
                                      ,pr_nmdatela     => pr_nmdatela   --Nome da Tela
                                      ,pr_flgerlog     => FALSE         --Sem log
                                      ,pr_des_reto     => vr_des_reto   --OK ou NOK
                                      ,pr_tab_extrato  => pr_tab_extrato_conta  --Vetor para o retorno das informações
                                      ,pr_tab_erro     => pr_tab_erro);  --Tabela de Erros
          -- Se houve retorno não Ok
          IF vr_des_reto = 'NOK' THEN
            -- Tenta buscar o erro no vetor de erro
            IF pr_tab_erro.COUNT > 0 THEN
              vr_dscritic:= pr_tab_erro(pr_tab_erro.FIRST).dscritic || ' Conta: '||pr_nrdconta;
            ELSE
              vr_dscritic:= 'Retorno "NOK" na extr0001.pc_consulta_extrato e sem informação na pr_vet_erro, Conta: '||pr_nrdconta;
            END IF;
            -- Abandona o processo
            RAISE vr_exc_sair;
          END IF;
          
          /** Cheques recebidos em deposito **/
          IF pr_inrelext IN (2,4) THEN
            CHEQ0001.pc_obtem_cheques_deposito (pr_cdcooper    => pr_cdcooper   --Codigo Cooperativa
                                               ,pr_cdagenci    => pr_cdagenci   --Codigo Agencia
                                               ,pr_nrdcaixa    => pr_nrdcaixa   --Numero do Caixa
                                               ,pr_cdoperad    => pr_cdoperad   --Codigo Operador
                                               ,pr_nmdatela    => pr_nmdatela   --Nome da Tela
                                               ,pr_idorigem    => pr_idorigem   --Origem dos Dados
                                               ,pr_nrdconta    => pr_nrdconta   --Numero da Conta
                                               ,pr_idseqttl    => pr_idseqttl   --Sequencial do Titular
                                               ,pr_dtiniper    => pr_dtiniper   --Data Inicio Periodo
                                               ,pr_dtfimper    => pr_dtfimper   --Data Final Periodo
                                               ,pr_flgpagin    => FALSE         --Flag Pagina
                                               ,pr_iniregis    => 0             --Indicador Registros
                                               ,pr_qtregpag    => 0             --Quantidade registros pagos
                                               ,pr_flgerlog    => FALSE         --Sem log
                                               ,pr_qtregist    => vr_qtregist   --Quantidade Registros
                                               ,pr_des_reto    => vr_des_reto   --OK ou NOK
                                               ,pr_tab_erro    => pr_tab_erro   --Tabela de Erros
                                               ,pr_tab_extrato_cheque => pr_tab_extrato_cheque);  --> Vetor para o retorno das informações

            -- Se houve retorno não Ok
            IF vr_des_reto = 'NOK' THEN
              -- Abandona o processo
              RAISE vr_exc_sair;
            END IF;
          END IF;
          
          /** Depositos identificados **/
          IF pr_inrelext IN (3,4) THEN
            EXTR0001.pc_obtem_depos_identificad (pr_cdcooper => pr_cdcooper   --Codigo Cooperativa
                                                ,pr_cdagenci => pr_cdagenci   --Codigo Agencia
                                                ,pr_nrdcaixa => pr_nrdcaixa   --Numero do Caixa
                                                ,pr_cdoperad => pr_cdoperad   --Codigo Operador
                                                ,pr_nmdatela => pr_nmdatela   --Nome da Tela
                                                ,pr_idorigem => pr_idorigem   --Origem dos Dados
                                                ,pr_nrdconta => pr_nrdconta   --Numero da Conta
                                                ,pr_idseqttl => pr_idseqttl   --Sequencial do Titular
                                                ,pr_dtiniper => pr_dtiniper   --Data Inicio Periodo
                                                ,pr_dtfimper => pr_dtfimper   --Data Final Periodo
                                                ,pr_flgpagin => FALSE         --Flag Pagina
                                                ,pr_iniregis => 0             --Indicador Registros
                                                ,pr_qtregpag => 0             --Quantidade registros pagos
                                                ,pr_flgerlog => FALSE         --Sem log
                                                ,pr_qtregist => vr_qtregist   --Quantidade Registros
                                                ,pr_des_reto => vr_des_reto   --OK ou NOK
                                                ,pr_tab_erro => pr_tab_erro   --Tabela de Erros
                                                ,pr_tab_dep_identific  => pr_tab_dep_identific);  --> Vetor para o retorno das informações

            -- Se houve retorno não Ok
            IF vr_des_reto = 'NOK' THEN
              -- Abandona o processo
              RAISE vr_exc_sair;
            END IF;
          END IF;
          
          /** Lancamentos Futuros - Hoje somente utilizado no InternetBank **/
          IF pr_inrelext = 5 OR (pr_inrelext = 4 AND pr_idorigem = 3) THEN
            --Consultar os lancamentos futuros
            pc_consulta_lancamento (pr_cdcooper => pr_cdcooper   --Codigo Cooperativa
                                   ,pr_cdagenci => pr_cdagenci   --Codigo Agencia
                                   ,pr_nrdcaixa => pr_nrdcaixa   --Numero do Caixa
                                   ,pr_cdoperad => pr_cdoperad   --Codigo Operador
                                   ,pr_nrdconta => pr_nrdconta   --Numero da Conta
                                   ,pr_idorigem => pr_idorigem   --Origem dos Dados
                                   ,pr_idseqttl => pr_idseqttl   --Sequencial do Titular
                                   ,pr_nmdatela => pr_nmdatela   --Nome da Tela
                                   ,pr_flgerlog => FALSE         --Sem log
                                   ,pr_dtiniper => pr_dtiniper   -- data inicio
                                   ,pr_dtfimper => pr_dtfimper   -- data fim
                                   ,pr_indebcre => ''            -- Debito/ Credito
                                   ,pr_des_reto => vr_des_reto   --OK ou NOK
                                   ,pr_tab_erro => pr_tab_erro   --Tabela de Erros
                                   ,pr_tab_totais_futuros    => pr_tab_totais_futuros  --> Vetor para o retorno das informações
                                   ,pr_tab_lancamento_futuro => pr_tab_lancamento_futuro);  --> Vetor para o retorno das informações
            -- Se houve retorno não Ok
            IF vr_des_reto = 'NOK' THEN
              -- Abandona o processo
              RAISE vr_exc_sair;
            END IF;                                   
          END IF;
          
          --Gerar Tarifa do Extrato          
          pc_gera_tarifa_extrato (pr_cdcooper => pr_cdcooper   --Codigo Cooperativa
                                   ,pr_cdagenci => pr_cdagenci   --Codigo Agencia
                                   ,pr_nrdcaixa => pr_nrdcaixa   --Numero do Caixa
                                   ,pr_cdoperad => pr_cdoperad   --Codigo Operador
                                   ,pr_nmdatela => pr_nmdatela   --Nome da Tela
                                   ,pr_idorigem => pr_idorigem   --Origem dos Dados
                                   ,pr_nrdconta => pr_nrdconta   --Numero da Conta
                                   ,pr_idseqttl => pr_idseqttl   --Sequencial do Titular
                                   ,pr_dtrefere => pr_dtiniper   --Data Referencia
                                   ,pr_inproces => pr_inproces   --Indicador Processo
                                   ,pr_flgtarif => pr_flgtarif   --Cobrar tarifa                      
                                   ,pr_flgerlog => FALSE         --Sem log
                                   ,pr_cdcoptfn => 0             --Cooperativa Transferencia
                                   ,pr_cdagetfn => 0             --Agencia Transferencia
                                   ,pr_nrterfin => 0             --Terminal Financeiro
                                   ,pr_des_reto => vr_des_reto   --OK ou NOK
                                   ,pr_tab_erro => pr_tab_erro   --Tabela de Erros
                                   ,pr_tab_msg_confirma => pr_tab_msg_confirma);  --> Vetor para o retorno das informações
          -- Se houve retorno não Ok
          IF vr_des_reto = 'NOK' THEN
            -- Abandona o processo
            RAISE vr_exc_erro;
          END IF; 
          --Marcar Transacao OK
          vr_flgtrans:= TRUE;
        EXCEPTION
          WHEN vr_exc_sair THEN NULL;
        END;
        
        --Se nao processou corretamente 
        IF NOT vr_flgtrans THEN
          --Se possui mensagem erro
          IF vr_cdcritic <> 0 OR vr_dscritic IS NOT NULL THEN
            -- Chamar rotina de gravacao de erro
            gene0001.pc_gera_erro (pr_cdcooper => pr_cdcooper
                                  ,pr_cdagenci => pr_cdagenci
                                  ,pr_nrdcaixa => pr_nrdcaixa
                                  ,pr_nrsequen => 1  /** Sequencia **/
                                  ,pr_cdcritic => vr_cdcritic
                                  ,pr_dscritic => vr_dscritic
                                  ,pr_tab_erro => pr_tab_erro);
          ELSE
            --Se tem erro na tabela erros
            IF pr_tab_erro.COUNT > 0 THEN
              vr_dscritic:= pr_tab_erro(pr_tab_erro.FIRST).dscritic;
            ELSE
              vr_dscritic:= 'Nao foi possivel carregar o extrato.';
            END IF;                            
          END IF; 
          --Escrever erro no Log
          IF pr_flgerlog THEN  
            --Atribuir Descricao da Origem
            vr_dsorigem:= GENE0001.vr_vet_des_origens(pr_idorigem);
            --Atribuir Descricao da Transacao
            vr_dstransa:= 'Consultar dados para Extrato.';
            --Executar rotina geracao log
            gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                                ,pr_cdoperad => pr_cdoperad
                                ,pr_dscritic => NULL
                                ,pr_dsorigem => vr_dsorigem
                                ,pr_dstransa => vr_dstransa
                                ,pr_dttransa => TRUNC(SYSDATE)
                                ,pr_flgtrans => 1
                                ,pr_hrtransa => gene0002.fn_busca_time
                                ,pr_idseqttl => 1
                                ,pr_nmdatela => pr_nmdatela
                                ,pr_nrdconta => pr_nrdconta
                                ,pr_nrdrowid => vr_nrdrowid);
          END IF;  
        END IF;
        --Retornar OK
        pr_des_reto:= 'OK';      
      EXCEPTION
        WHEN vr_exc_erro THEN
          -- Retorno não OK
          pr_des_reto := 'NOK';
          -- Chamar rotina de gravação de erro
          gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                               ,pr_cdagenci => pr_cdagenci
                               ,pr_nrdcaixa => pr_nrdcaixa
                               ,pr_nrsequen => 1 --> Fixo
                               ,pr_cdcritic => 0 --> Critica 0
                               ,pr_dscritic => vr_dscritic
                               ,pr_tab_erro => pr_tab_erro);
          -- Se foi solicitado geração de LOG
          IF pr_flgerlog THEN
            -- Chamar geração de LOG
            gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                                ,pr_cdoperad => pr_cdoperad
                                ,pr_dscritic => vr_dscritic
                                ,pr_dsorigem => GENE0001.vr_vet_des_origens(pr_idorigem)
                                ,pr_dstransa => vr_dstransa
                                ,pr_dttransa => TRUNC(SYSDATE)
                                ,pr_flgtrans => 0 --> FALSE
                                ,pr_hrtransa => gene0002.fn_busca_time
                                ,pr_idseqttl => pr_idseqttl
                                ,pr_nmdatela => pr_nmdatela
                                ,pr_nrdconta => pr_nrdconta
                                ,pr_nrdrowid => vr_nrdrowid);
          END IF;  
        WHEN OTHERS THEN

          -- Retorno não OK
          pr_des_reto := 'NOK';
          -- Chamar rotina de gravação de erro
          vr_dscritic := 'Erro na pc_obtem_impressao_extrato --> '|| sqlerrm;
          gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                               ,pr_cdagenci => pr_cdagenci
                               ,pr_nrdcaixa => pr_nrdcaixa
                               ,pr_nrsequen => 1 --> Fixo
                               ,pr_cdcritic => 0 --> Critica 0
                               ,pr_dscritic => vr_dscritic
                               ,pr_tab_erro => pr_tab_erro);
          -- Se foi solicitado geração de LOG
          IF pr_flgerlog THEN
            -- Chamar geração de LOG
            gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                                ,pr_cdoperad => pr_cdoperad
                                ,pr_dscritic => vr_dscritic
                                ,pr_dsorigem => GENE0001.vr_vet_des_origens(pr_idorigem)
                                ,pr_dstransa => vr_dstransa
                                ,pr_dttransa => TRUNC(SYSDATE)
                                ,pr_flgtrans => 0 --> FALSE
                                ,pr_hrtransa => gene0002.fn_busca_time
                                ,pr_idseqttl => pr_idseqttl
                                ,pr_nmdatela => pr_nmdatela
                                ,pr_nrdconta => pr_nrdconta
                                ,pr_nrdrowid => vr_nrdrowid);
          END IF;  
        END;
      END pc_obtem_impressao_extrato;  

                                
                                   
                                
                                   
    -- Subrotina para gerar impressao extrato conta corrente
    PROCEDURE pc_gera_impextdpv (pr_cdcooper IN crapcop.cdcooper%TYPE  --Codigo Cooperativa
                                ,pr_cdagenci IN crapass.cdagenci%TYPE  --Codigo Agencia
                                ,pr_nrdcaixa IN INTEGER                --Numero do Caixa
                                ,pr_idorigem IN INTEGER                --Origem dos Dados
                                ,pr_dtmvtolt IN crapdat.dtmvtolt%TYPE  --Data Movimento
                                ,pr_cdprogra IN crapprg.cdprogra%TYPE  --Codigo Programa
                                ,pr_inproces IN INTEGER                --Indicador Processo
                                ,pr_cdoperad IN VARCHAR2               --Codigo Operador
                                ,pr_nmdatela IN VARCHAR2               --Nome da Tela
                                ,pr_dsiduser IN VARCHAR2               --Identificador Usuario
                                ,pr_flgrodar IN BOOLEAN                --Flag Executar
                                ,pr_nrdconta IN crapass.nrdconta%TYPE  --Numero da Conta do Associado
                                ,pr_dtrefere IN DATE                   --Data de Referencia
                                ,pr_dtreffim IN DATE                   --Data Referencia Final
                                ,pr_inrelext IN INTEGER                --Indicador Relatorio Extrato
                                ,pr_inselext IN INTEGER                --Indicador Selecao Extrato
                                ,pr_flgtarif IN BOOLEAN                --Indicador Cobra tarifa                                
                                ,pr_flgerlog IN BOOLEAN                --Escreve erro Log
                                ,pr_clobxml IN OUT NOCOPY CLOB        --Clob arquivo de dados
                                ,pr_dstexto IN OUT NOCOPY VARCHAR2     --Texto Completo para Clob 
                                ,pr_nmarqimp OUT VARCHAR2              --Nome Arquivo Impressao
                                ,pr_nmarqpdf OUT VARCHAR2              --Nome Arquivo PDF
                                ,pr_tab_erro OUT GENE0001.typ_tab_erro -- Tabela de Erros
                                ,pr_des_reto OUT VARCHAR2 ) IS         --Descricao Erro
  BEGIN
  ---------------------------------------------------------------------------------------------------------------
  --
  --  Programa : pc_gera_impextdpv                    Antigo: procedures/b1wgen0112.p/gera-impextdpv
  --  Sistema  : 
  --  Sigla    : CRED
  --  Autor    : Alisson C. Berrido - Amcom
  --  Data     : Julho/2014                           Ultima atualizacao: 28/09/2017
  --
  -- Dados referentes ao programa:
  --
  -- Frequencia: -----
  -- Objetivo   : Procedure para obter impressao do extrato da conta corrente do associado
  --
  -- Alterações : 02/07/2014 - Conversão Progress -> Oracle (Alisson - AMcom)
  --              
  --              21/01/2016 - Pre-Aprovado fase II. (Jaison/Anderson)
  --              
  --              20/04/2016 - Remover comando rm e incluir direto na tela impres 
  --                           (Lucas Ranghetti/Rodrigo #399412)
  --
  --              28/09/2017 - Ajustado format da tag <vldiario> do relatorio crrl40
  --                           pois estava estourando (Tiago #724513)
  --
  --              14/05/2018 - Aumentado o tamanho das variáveis de indice para 24 posicoes
  --                           para ordenacao dos extratos, projeto Debitador Unico (Elton-AMcom)
  --
  --
  --              30/05/2018 - Adicionado dscomple ao xml (Alcemir Mout's - Prj. 467).                              
  ---------------------------------------------------------------------------------------------------------------
  DECLARE                                
        /* Cursores Locais */
        
        -- Busca dos dados da cooperativa
        CURSOR cr_crapcop (pr_cdcooper IN crapcop.cdcooper%TYPE) IS
          SELECT cop.nmrescop, cop.nmextcop
          FROM crapcop cop
          WHERE cop.cdcooper = pr_cdcooper;
        rw_crapcop cr_crapcop%ROWTYPE;                        
        -- Cursor genérico de calendário
        rw_crapdat btch0001.cr_crapdat%ROWTYPE;
        --Tabela Cabecalho Relatorio
        vr_tab_cabrel typ_tab_cabrel;
        -- Trabalho com a rotina Obtem_saldo
        vr_tab_saldos EXTR0001.typ_tab_saldos;
        --Tabela Depositos identificados
        vr_tab_dep_identific EXTR0001.typ_tab_dep_identificado;
        --Tabela de Extrato de Conta
        vr_tab_extrato_conta EXTR0001.typ_tab_extrato_conta;
        --Tabela de Extrato de Cheques
        vr_tab_extrato_cheque typ_tab_extrato_cheque;
        --Tabela de Taxa de Juros
        vr_tab_taxa_juros typ_tab_taxa_juros;
        --Tabela de Totais Futuros
        vr_tab_totais_futuros typ_tab_totais_futuros;
        --Tabela de lancamentos Futuros
        vr_tab_lancamento_futuro typ_tab_lancamento_futuro;
        --Tabela Mensagens Confirmadas
        vr_tab_msg_confirma empr0001.typ_tab_msg_confirma;
        --Tabela de Dados do Cooperado
        vr_tab_dados_cooperado typ_tab_dados_cooperado;
        --Tabela de Dados do Credito Pre-Aprovado
        vr_tab_dados_cpa EMPR0002.typ_tab_dados_cpa;
        --Variaveis Locais
        vr_inisenta INTEGER;
        vr_dtliblan VARCHAR2(5);
        vr_nmdatela VARCHAR2(20);
        vr_cdoperad VARCHAR2(20);
        vr_dsorigem VARCHAR2(100);
        vr_dstransa VARCHAR2(100);
        vr_descmsge VARCHAR2(100);
        vr_dsconfir VARCHAR2(100);
        vr_dsblqjud VARCHAR2(100);
        vr_nrdrowid ROWID;
        vr_fltarweb BOOLEAN;
        vr_vlstotal NUMBER;
        vr_vldiscpa NUMBER;
        vr_vlblqjud NUMBER;
        vr_vldiario NUMBER;
        vr_idxcpa   PLS_INTEGER;
        vr_dsextrat VARCHAR2(100);
        --Variaveis Controle Dados XMl
        vr_flghistor BOOLEAN:= FALSE;
        vr_flgcheque BOOLEAN:= FALSE;
        vr_flgdeposi BOOLEAN:= FALSE;
        vr_flgconfir BOOLEAN:= FALSE;
        vr_flgblqjud BOOLEAN:= FALSE;
        vr_flgdiscpa BOOLEAN:= FALSE;
        --Variaveis dos Arquivos
        vr_typ_saida VARCHAR2(3);
        vr_comando   VARCHAR2(100);
        vr_nmdireto  VARCHAR2(100);
        vr_nmendter  VARCHAR2(100);
        vr_setlinha  VARCHAR2(100);
        --CLOB de Dados
        vr_clobxml40  CLOB;
        vr_dstexto    VARCHAR2(32600);
        vr_dstexto40  VARCHAR2(32600);
        --Variaveis para indices
        vr_index_extrato     VARCHAR2(24);
        vr_index_extrato_aux VARCHAR2(24);
        vr_index_cheque      PLS_INTEGER;
        vr_index_deposito    PLS_INTEGER;
        --Variaveis de Erro
        vr_cdcritic INTEGER;
        vr_dscritic VARCHAR2(4000);
        vr_des_reto VARCHAR2(3);
        --Variaveis de Excecoes
        vr_exc_sair EXCEPTION;
        vr_exc_erro EXCEPTION;
        
        vr_nmaction VARCHAR2(32) := 'pc_gera_impextdpv';

      BEGIN
        
        GENE0001.pc_set_modulo(pr_module => NULL, pr_action => vr_nmaction);

        --Limpar Tabela Erro
        pr_tab_erro.DELETE;
        
        --Atribuir Descricao da Origem
        vr_dsorigem:= GENE0001.vr_vet_des_origens(pr_idorigem);
        --Atribuir Descricao da Transacao
        vr_dstransa:= 'Consultar dados para extrato de conta corrente.';
        --Inicializar variaveis
        vr_cdcritic:= 0;
        vr_dscritic:= NULL;
        pr_des_reto:= 'NOK';
        
        --Definir Operador
        IF pr_inproces = 1  THEN
          vr_cdoperad:= pr_cdoperad;
          vr_nmdatela:= pr_nmdatela;
        ELSE  
          vr_cdoperad:= '1';
          vr_nmdatela:= UPPER(pr_cdprogra);
        END IF;
        
        BEGIN
          --Limpar tabela erro
          pr_tab_erro.DELETE;
          --Limpar tabela Saldos
          vr_tab_saldos.DELETE;
          -- Verifica se a cooperativa esta cadastrada
          OPEN cr_crapcop (pr_cdcooper => pr_cdcooper);
          FETCH cr_crapcop INTO rw_crapcop;
          -- Se não encontrar
          IF cr_crapcop%NOTFOUND THEN
            -- Fechar o cursor pois haverá raise
            CLOSE cr_crapcop;
            -- Montar mensagem de critica
            vr_cdcritic := 651;
            RAISE vr_exc_erro;
          ELSE
            -- Apenas fechar o cursor
            CLOSE cr_crapcop;
          END IF;
          
          -- Leitura do calendário da cooperativa
          OPEN btch0001.cr_crapdat(pr_cdcooper => pr_cdcooper);
          FETCH btch0001.cr_crapdat INTO rw_crapdat;
          -- Se não encontrar
          IF btch0001.cr_crapdat%NOTFOUND THEN
            -- Fechar o cursor pois efetuaremos raise
            CLOSE btch0001.cr_crapdat;
            -- Montar mensagem de critica
            vr_cdcritic:= 1;
            RAISE vr_exc_erro;
          ELSE
            -- Apenas fechar o cursor
            CLOSE btch0001.cr_crapdat;
          END IF;
    
          -- Busca do diretório base da cooperativa para a geração de relatórios
          vr_nmdireto:= gene0001.fn_diretorio(pr_tpdireto => 'C'           --> /usr/coop
                                             ,pr_cdcooper => pr_cdcooper   --> Cooperativa
                                             ,pr_nmsubdir => 'rl');       --> Utilizaremos o rl
          

          -- Inicializar as informações do XML de dados para o relatório
          dbms_lob.createtemporary(vr_clobxml40, TRUE, dbms_lob.CALL);
          dbms_lob.open(vr_clobxml40, dbms_lob.lob_readwrite);

          --Escrever no arquivo XML
          gene0002.pc_escreve_xml(vr_clobxml40, vr_dstexto40,'<?xml version="1.0" encoding="UTF-8"?><crrl040><contas>');

          --Se nao rodar
          IF NOT pr_flgrodar THEN 
            --Nome Arquivo Impressao
            pr_nmarqimp:= 'crrl040.lst';
          ELSE 
            --Nome Arquivo Impressao e PDF
            vr_nmendter:= pr_dsiduser || gene0002.fn_busca_time;
            pr_nmarqimp:= vr_nmendter || '.ex';
            pr_nmarqpdf:= vr_nmendter || '.pdf';
          END IF;  

          GENE0001.pc_set_modulo(pr_module => NULL, pr_action => vr_nmaction);

          -- Chamar rotina para busca do saldo
          extr0001.pc_obtem_saldo(pr_cdcooper   => pr_cdcooper
                                 ,pr_rw_crapdat => rw_crapdat
                                 ,pr_cdagenci   => 0
                                 ,pr_nrdcaixa   => 0
                                 ,pr_cdoperad   => vr_cdoperad
                                 ,pr_nrdconta   => pr_nrdconta
                                 ,pr_dtrefere   => pr_dtrefere
                                 ,pr_des_reto   => vr_des_reto
                                 ,pr_tab_sald   => vr_tab_saldos
                                 ,pr_tab_erro   => pr_tab_erro);
          --Se nao ocorreu erro
          IF vr_des_reto = 'OK' THEN
            --Determinar Isencao
            IF pr_flgtarif THEN
              vr_inisenta:= 0;
            ELSE
              vr_inisenta:= 1;
            END IF;  
            --Se For Web cobra tarifa
            vr_fltarweb:= pr_idorigem = 5;
            -- Chamar rotina para obter impressao do extrato
            pc_obtem_impressao_extrato (pr_cdcooper              => pr_cdcooper              --Codigo Cooperativa
                                       ,pr_cdagenci              => pr_cdagenci              --Codigo Agencia
                                       ,pr_nrdcaixa              => pr_nrdcaixa              --Numero do Caixa
                                       ,pr_cdoperad              => vr_cdoperad              --Codigo Operador
                                       ,pr_nmdatela              => vr_nmdatela              --Nome da Tela
                                       ,pr_idorigem              => pr_idorigem              --Origem dos Dados
                                       ,pr_nrdconta              => pr_nrdconta              --Numero da Conta do Associado
                                       ,pr_idseqttl              => 1  /* idseqttl */        --Sequencial do Titular
                                       ,pr_dtmvtolt              => pr_dtmvtolt              --Data Movimento
                                       ,pr_dtiniper              => pr_dtrefere              --Data Inicio periodo   
                                       ,pr_dtfimper              => pr_dtreffim              --Data Final periodo
                                       ,pr_inrelext              => pr_inrelext              --Indicador Relatorio Extrato
                                       ,pr_inisenta              => vr_inisenta              --Indicador isenta
                                       ,pr_inproces              => pr_inproces              --Indicador Processo
                                       ,pr_flgtarif              => vr_fltarweb              --Indicador Cobra tarifa
                                       ,pr_flgerlog              => FALSE                    --Escreve erro Log
                                       ,pr_tab_cabrel            => vr_tab_cabrel            --Tabela cabecalho 
                                       ,pr_tab_dados_cooperado   => vr_tab_dados_cooperado   --Tabela Dados Cooperado
                                       ,pr_tab_extrato_conta     => vr_tab_extrato_conta     --Tabela Extrato Conta
                                       ,pr_tab_extrato_cheque    => vr_tab_extrato_cheque    --Tabela Extrato Cheque
                                       ,pr_tab_dep_identific     => vr_tab_dep_identific     --Tabela Depositos Identificados
                                       ,pr_tab_taxa_juros        => vr_tab_taxa_juros        --Tabela taxa juros
                                       ,pr_tab_totais_futuros    => vr_tab_totais_futuros    --Tabela Totais Futuros
                                       ,pr_tab_lancamento_futuro => vr_tab_lancamento_futuro --Tabela lancamentos futuros
                                       ,pr_tab_msg_confirma      => vr_tab_msg_confirma      --Tabela Mensagem Confirmada
                                       ,pr_tab_erro              => pr_tab_erro              --Tabela de Erros
                                       ,pr_des_reto              => vr_des_reto);            --Descricao Erro
          END IF;                           
          
          --Se ocorreu erro
          IF vr_des_reto <> 'OK' THEN
            --Se possui erro na tabela
            IF pr_tab_erro.COUNT = 0 THEN
              --Montar Critica
              vr_dscritic:= 'Nao foi possivel carregar o extrato.';
            ELSE
              --Montar Critica
              vr_dscritic:= pr_tab_erro(pr_tab_erro.FIRST).dscritic;
            END IF; 
            --Se possui dados na tabela de cooperado
            IF vr_tab_dados_cooperado.COUNT > 0 THEN
              --Montar texto
              vr_dstexto:= '<conta cdagenci="'||vr_tab_dados_cooperado(vr_tab_dados_cooperado.FIRST).cdagenci||
                     '" nmresage="'||vr_tab_dados_cooperado(vr_tab_dados_cooperado.FIRST).nmresage||
                     '" nrdconta="'||to_char(pr_nrdconta,'fm9g999g999g0')||
                     '" nmprimtl="'||vr_tab_dados_cooperado(vr_tab_dados_cooperado.FIRST).nmprimtl||
                     '" vllimcre="'||to_char(vr_tab_dados_cooperado(vr_tab_dados_cooperado.FIRST).vllimcre,'fm9999g999g990d00')||
                     '" vlstotal="0" flghistor="N" flgcheque="N" flgdeposi="N" flgmensag="N" flgconfir="S"'||
                     ' flgblqjud="N" dscmensag="" dsconfirm="'||vr_dscritic||'" dscblqjud=""></conta>';
              --Escrever no Arquivo
              gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);

              --Popular Clob do relatorio interno
              gene0002.pc_escreve_xml(vr_clobxml40, vr_dstexto40,vr_dstexto);

            ELSE
              --Montar texto
              vr_dstexto:= '<conta cdagenci="" nmresage="" nrdconta="'||to_char(pr_nrdconta,'fm9g999g999g0')||
                     '" nmprimtl="" vllimcre="0" vlstotal="0" flghistor="N" flgcheque="N" flgdeposi="N"'|| 
                     ' flgmensag="N" flgconfir="S" flgblqjud="N" dscmensag="" dsconfirm="'||vr_dscritic||
                     '" dscblqjud=""></conta>';
              --Escrever no Arquivo
              gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);

              --Popular Clob do relatorio interno
              gene0002.pc_escreve_xml(vr_clobxml40, vr_dstexto40,vr_dstexto);

            END IF;                        
            --Sair 
            RAISE vr_exc_sair;   
          END IF;   
           
          GENE0001.pc_set_modulo(pr_module => NULL, pr_action => vr_nmaction);

          --Encontrar saldo
          IF vr_tab_saldos.COUNT > 0 THEN
            --Acumular Saldos no total (disponivel+cheq.salario+bloqueado+chq.praca+cheq.fora_praca)
            vr_vlstotal:= vr_tab_saldos(vr_tab_saldos.FIRST).vlsddisp + 
                          vr_tab_saldos(vr_tab_saldos.FIRST).vlsdchsl +
                          vr_tab_saldos(vr_tab_saldos.FIRST).vlsdbloq + 
                          vr_tab_saldos(vr_tab_saldos.FIRST).vlsdblpr +
                          vr_tab_saldos(vr_tab_saldos.FIRST).vlsdblfp;
            --Valor Bloqueado Judicialmente              
            vr_vlblqjud:= vr_tab_saldos(vr_tab_saldos.FIRST).vlblqjud;
          ELSE
            --Zerar total
            vr_vlstotal:= 0;
          END IF;  
          
          --Se possui dados do cooperado
          IF vr_tab_dados_cooperado.COUNT > 0 THEN
            
            /** Registro de saldo anterior nao deve aparecer como lancamento **/
            vr_index_extrato:= vr_tab_extrato_conta.FIRST;
            WHILE vr_index_extrato IS NOT NULL LOOP
              --Retirar Saldo Anterior do extrato
              IF vr_tab_extrato_conta(vr_index_extrato).nrsequen = 0 THEN
                --Guardar Proximo Registro
                vr_index_extrato_aux:= vr_tab_extrato_conta.NEXT(vr_index_extrato); 
                --Eliminar registro atual
                vr_tab_extrato_conta.DELETE(vr_index_extrato);
                --Reposicionar Ponteiro
                vr_index_extrato:= vr_index_extrato_aux;
              ELSE  
                --Proximo Registro
                vr_index_extrato:= vr_tab_extrato_conta.NEXT(vr_index_extrato); 
              END IF;  
            END LOOP;

            --Verificar quais tabelas possuem dados para mostrar no relatorio
            vr_flghistor:= vr_tab_extrato_conta.COUNT > 0;
            vr_flgcheque:= vr_tab_extrato_cheque.COUNT > 0;
            vr_flgdeposi:= vr_tab_dep_identific.COUNT > 0;

            --Se possui mensagem confirmacao
            IF vr_tab_msg_confirma.COUNT > 0 THEN
              IF vr_tab_msg_confirma(vr_tab_msg_confirma.FIRST).inconfir = 1 THEN
                vr_flgconfir:= TRUE;
                --Mensagem Confirmacao
                vr_dsconfir:= vr_tab_msg_confirma(vr_tab_msg_confirma.FIRST).dsmensag;
              END IF;
            END IF;
            
            --Montar Mensagem caso nao exista lancamento
            vr_descmsge:= '** Nao houve lancamentos no periodo de '||
                          to_char(pr_dtrefere,'DD/MM/YYYY') || ' ate '||
                          to_char(pr_dtreffim,'DD/MM/YYYY') || ' **';    

            --Se Possui Bloqueio Judicial
              vr_flgblqjud:= TRUE;
              --Escrever mensagem  
            vr_dsblqjud:= 'VALOR BLOQUEADO JUDICIALMENTE R$:        '||to_char(nvl(vr_vlblqjud,0),'fm999g999g999g990d00');    
                                      
            -- Procedimento para buscar dados do credito pre-aprovado (crapcpa)
            EMPR0002.pc_busca_dados_cpa (pr_cdcooper  => pr_cdcooper   --> Codigo da cooperativa
                                        ,pr_cdagenci  => pr_cdagenci   --> Código da agencia
                                        ,pr_nrdcaixa  => pr_nrdcaixa   --> Numero do caixa
                                        ,pr_cdoperad  => vr_cdoperad   --> Codigo do operador
                                        ,pr_nmdatela  => vr_nmdatela   --> Nome da tela
                                        ,pr_idorigem  => pr_idorigem   --> Id origem
                                        ,pr_nrdconta  => pr_nrdconta   --> Numero da conta do cooperado
                                        ,pr_idseqttl  => 1             --> Sequencial do titular
                                        ,pr_nrcpfope  => 0             --> CPF do operador juridico
                                        ------ OUT --------
                                        ,pr_tab_dados_cpa => vr_tab_dados_cpa  --> Retorna dados do credito pre aprovado
                                        ,pr_des_reto      => vr_des_reto       --> Retorno OK/NOK
                                        ,pr_tab_erro      => pr_tab_erro);     --> Retorna os erros
            vr_idxcpa := vr_tab_dados_cpa.first;
            IF vr_tab_dados_cpa.EXISTS(vr_idxcpa) AND 
               vr_tab_dados_cpa(vr_idxcpa).vldiscrd > 0 THEN
              vr_flgdiscpa := TRUE;
              vr_vldiscpa := vr_tab_dados_cpa(vr_idxcpa).vldiscrd;
            ELSE
              vr_flgdiscpa := FALSE;
              vr_vldiscpa := 0;
            END IF;

            --Montar texto
            vr_dstexto:= '<conta cdagenci="'||vr_tab_dados_cooperado(vr_tab_dados_cooperado.FIRST).cdagenci||
                   '" nmresage="'||vr_tab_dados_cooperado(vr_tab_dados_cooperado.FIRST).nmresage||
                   '" nrdconta="'||to_char(vr_tab_dados_cooperado(vr_tab_dados_cooperado.FIRST).nrdconta,'fm9g999g999g0')||
                   '" nmprimtl="'||vr_tab_dados_cooperado(vr_tab_dados_cooperado.FIRST).nmprimtl||
                   '" vllimcre="'||to_char(vr_tab_dados_cooperado(vr_tab_dados_cooperado.FIRST).vllimcre,'fm9999g999g990d00')||
                   '" vlstotal="'||to_char(vr_vlstotal,'fm9999g999g999g990d00mi')||
                   '" vldiscpa="'||to_char(vr_vldiscpa,'fm9999g999g990d00')||
                   '" flgdiscpa="'||(CASE vr_flgdiscpa WHEN TRUE THEN 'S' ELSE 'N' END)||
                   '" flghistor="'||(CASE vr_flghistor WHEN TRUE THEN 'S' ELSE 'N' END)||
                   '" flgcheque="'||(CASE vr_flgcheque WHEN TRUE THEN 'S' ELSE 'N' END)||
                   '" flgdeposi="'||(CASE vr_flgdeposi WHEN TRUE THEN 'S' ELSE 'N' END)||
                   '" flgmensag="'||(CASE vr_flghistor WHEN TRUE THEN 'N' ELSE 'S' END)||
                   '" flgconfir="'||(CASE vr_flgconfir WHEN TRUE THEN 'S' ELSE 'N' END)||
                   '" flgblqjud="'||(CASE vr_flgblqjud WHEN TRUE THEN 'S' ELSE 'N' END)||
                   '" dscmensag="'||vr_descmsge||
                   '" dsconfirm="'||vr_dsconfir||
                   '" dscblqjud="'||vr_dsblqjud||'"><lancamentos>';
            --Escrever Cabecalho no Arquivo
            gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);

            --Popular Clob do relatorio interno
            gene0002.pc_escreve_xml(vr_clobxml40, vr_dstexto40,vr_dstexto);
              
            --Posicionar Primeiro registro
            vr_index_extrato:= vr_tab_extrato_conta.FIRST;
            WHILE vr_index_extrato IS NOT NULL LOOP
              --Data Liberacao Lancamento
              vr_dtliblan:= SUBSTR(vr_tab_extrato_conta(vr_index_extrato).dtliblan,2,5);
              --Valor Diario
              vr_vldiario:= 0; 
              
              --Se for Ultimo Registro
              IF vr_index_extrato = vr_tab_extrato_conta.LAST OR 
                 vr_tab_extrato_conta(vr_index_extrato).dtmvtolt <> vr_tab_extrato_conta(vr_tab_extrato_conta.NEXT(vr_index_extrato)).dtmvtolt THEN
                --Valor Saldo Total
                vr_vlstotal:= vr_tab_extrato_conta(vr_index_extrato).vlsdtota;
                --Valor Diario
                vr_vldiario:= vr_vlstotal;
              END IF;
              
              --Deixar valor diario com nulo se for zero
              IF nvl(vr_vldiario,0) = 0 THEN
                vr_vldiario:= NULL;
              END IF;
              -- valida se o dscomple não esta vazio, caso não, concatena dscomple com dsextrat
              IF TRIM(vr_tab_extrato_conta(vr_index_extrato).dscomple) IS NOT NULL THEN 
                 vr_dsextrat := SUBSTR(TRIM(vr_tab_extrato_conta(vr_index_extrato).dsextrat) || ' - ' ||
                                       TRIM(vr_tab_extrato_conta(vr_index_extrato).dscomple),1,21);
              ELSE 
                 vr_dsextrat := SUBSTR(vr_tab_extrato_conta(vr_index_extrato).dsextrat,1,21);                                                                       
              END IF;    
              
                  
              --Montar texto
              vr_dstexto:= '<lancto>' ||
                 '<dtmvtolt>' || to_char(vr_tab_extrato_conta(vr_index_extrato).dtmvtolt,'DD/MM/YY') || '</dtmvtolt>' ||
                  '<dtliblan>' || SUBSTR(vr_dtliblan,1,5) || '</dtliblan>' ||
                  '<dsextrat>' || vr_dsextrat || '</dsextrat>' ||
                 '<nrdocmto>' || SUBSTR(vr_tab_extrato_conta(vr_index_extrato).nrdocmto,1,12) || '</nrdocmto>' ||
                  '<vllanmto>' || to_char(vr_tab_extrato_conta(vr_index_extrato).vllanmto,'fm999999g990d00') || '</vllanmto>' ||
                  '<indebcre>' || vr_tab_extrato_conta(vr_index_extrato).indebcre || '</indebcre>' ||
                  '<vldiario>' || to_char(vr_vldiario,'fm9999999g990d00mi') || '</vldiario>' ||
              '</lancto>';
              --Escrever lancamento no XML
              gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);

              --Popular Clob do relatorio interno
              gene0002.pc_escreve_xml(vr_clobxml40, vr_dstexto40,vr_dstexto);

              --Proximo Registro
              vr_index_extrato:= vr_tab_extrato_conta.NEXT(vr_index_extrato); 
            END LOOP;
              
            --Inicializar TAG cheques
            gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,'</lancamentos><cheques>'); 

            --Popular Clob do relatorio interno
            gene0002.pc_escreve_xml(vr_clobxml40, vr_dstexto40,'</lancamentos><cheques>'); 
            
            GENE0001.pc_set_modulo(pr_module => NULL, pr_action => vr_nmaction);

            /** Cheques recebidos em deposito **/
            IF pr_inrelext IN (2,4) THEN
              --Percorrer todos os Cheques
              vr_index_cheque:= vr_tab_extrato_cheque.FIRST;
              WHILE vr_index_cheque IS NOT NULL LOOP
                --Montar texto
                vr_dstexto:= '<cheque>' ||
                   '<dtmvtolt>' || vr_tab_extrato_cheque(vr_index_cheque).dtmvtolt || '</dtmvtolt>' ||
                   '<nrdocmto>' || to_char(vr_tab_extrato_cheque(vr_index_cheque).nrdocmto,'fm999g999g990') || '</nrdocmto>' ||
                    '<cdbanchq>' || to_char(vr_tab_extrato_cheque(vr_index_cheque).cdbanchq,'fm999') || '</cdbanchq>' ||
                   '<cdagechq>' || to_char(vr_tab_extrato_cheque(vr_index_cheque).cdagechq,'fm9999') || '</cdagechq>' ||
                    '<nrctachq>' || to_char(vr_tab_extrato_cheque(vr_index_cheque).nrctachq,'fm9999g999g999g9') || '</nrctachq>' ||
                    '<nrcheque>' || to_char(vr_tab_extrato_cheque(vr_index_cheque).nrcheque,'fm999g990') ||'.'|| 
                                   to_char(vr_tab_extrato_cheque(vr_index_cheque).nrddigc3,'fm9')||'</nrcheque>' ||
                    '<vlcheque>' || to_char(vr_tab_extrato_cheque(vr_index_cheque).vlcheque,'fm999999g990d00') || '</vlcheque>' ||
                '</cheque>';
                --Escrever lancamento no XML
                gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);

                --Popular Clob do relatorio interno
                gene0002.pc_escreve_xml(vr_clobxml40, vr_dstexto40,vr_dstexto);
                
                --Proximo Registro
                vr_index_cheque:= vr_tab_extrato_cheque.NEXT(vr_index_cheque); 
              END LOOP;
            END IF;
            
            --Finalizar TAG cheques
            gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,'</cheques><depositos>');

            --Popular Clob do relatorio interno
            gene0002.pc_escreve_xml(vr_clobxml40, vr_dstexto40,'</cheques><depositos>');
                    
            /** Depositos identificados **/
            IF pr_inrelext IN (3,4) THEN
              --Percorrer todos os Cheques
              vr_index_deposito:= vr_tab_dep_identific.FIRST;
              WHILE vr_index_deposito IS NOT NULL LOOP
                --Montar texto
                vr_dstexto:= '<deposito>' ||
                   '<dtmvtolt>' || to_char(vr_tab_dep_identific(vr_index_deposito).dtmvtolt,'DD/MM/YYYY') || '</dtmvtolt>' ||
                   '<dsextrat>' || SUBSTR(vr_tab_dep_identific(vr_index_deposito).dsextrat,1,15) || '</dsextrat>' ||
                   '<nrdocmto>' || SUBSTR(vr_tab_dep_identific(vr_index_deposito).nrdocmto,1,12) || '</nrdocmto>' ||
                    '<indebcre>' || ' '||vr_tab_dep_identific(vr_index_deposito).indebcre ||' '|| '</indebcre>' ||
                    '<vllanmto>' || to_char(vr_tab_dep_identific(vr_index_deposito).vllanmto,'fm999999g990d00') || '</vllanmto>' ||
                    '<dsidenti>' || UPPER(SUBSTR(vr_tab_dep_identific(vr_index_deposito).dsidenti,1,23)) || '</dsidenti>' ||
                '</deposito>';
                --Escrever lancamento no XML
                gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);

                --Popular Clob do relatorio interno
                gene0002.pc_escreve_xml(vr_clobxml40, vr_dstexto40,vr_dstexto);

                --Proximo Registro
                vr_index_deposito:= vr_tab_dep_identific.NEXT(vr_index_deposito); 
              END LOOP;
            END IF;
            
            --Finaliza TAG Conta
            gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,'</depositos></conta>'); 
            
            IF pr_flgrodar = TRUE THEN
              --Finaliza Clob Interno
              gene0002.pc_escreve_xml(vr_clobxml40, vr_dstexto40,'</depositos></conta></contas></crrl040>',TRUE);
              -- Gera relatório 040
              gene0002.pc_solicita_relato(pr_cdcooper  => pr_cdcooper                   --> Cooperativa conectada
                                         ,pr_cdprogra  => pr_cdprogra                   --> Programa chamador
                                         ,pr_dtmvtolt  => pr_dtmvtolt                   --> Data do movimento atual
                                         ,pr_dsxml     => vr_clobxml40                  --> Arquivo XML de dados
                                         ,pr_dsxmlnode => '/crrl040/contas/conta'       --> Nó base do XML para leitura dos dados
                                         ,pr_dsjasper  => 'crrl040.jasper'              --> Arquivo de layout do iReport
                                         ,pr_dsparams  => NULL                          --> Sem parâmetros                                         
                                         ,pr_cdrelato => 40                            --> Código fixo para o relatório (nao busca pelo sqcabrel)                                         
                                         ,pr_dsarqsaid => vr_nmdireto||'/'||pr_nmarqimp  --> Arquivo final com o path
                                         ,pr_qtcoluna  => 80                            --> Colunas do relatorio
                                         ,pr_flg_gerar => 'S'                           --> Geraçao na hora
                                         ,pr_flg_impri => 'N'                           --> Chamar a impressão (Imprim.p)
                                         ,pr_nmformul  => NULL                          --> Nome do formulário para impressão
                                         ,pr_nrcopias  => 1                             --> Número de cópias
                                         ,pr_sqcabrel  => 1                             --> Qual a seq do cabrel
                                         ,pr_flappend  => 'S'                           --> Fazer append do relatorio se ja existir
                                         ,pr_des_erro  => vr_dscritic);                 --> Saída com erro
              --Se ocorreu erro no relatorio
              IF vr_dscritic IS NOT NULL THEN
                --Levantar Excecao
                RAISE vr_exc_erro;
              END IF; 
              
              --Fechar Clob e Liberar Memoria  
              dbms_lob.close(vr_clobxml40);
              dbms_lob.freetemporary(vr_clobxml40);               
              
              IF pr_idorigem = 5  THEN            
                --Enviar arquivo para Web
                GENE0002.pc_envia_arquivo_web (pr_cdcooper => pr_cdcooper           --Codigo Cooperativa
                                     ,pr_cdagenci => pr_cdagenci           --Codigo Agencia
                                     ,pr_nrdcaixa => pr_nrdcaixa           --Numero do Caixa
                                     ,pr_nmarqimp => pr_nmarqimp           --Nome Arquivo Impressao
                                     ,pr_nmdireto => vr_nmdireto           --Nome Diretorio
                                     ,pr_nmarqpdf => pr_nmarqpdf           --Nome Arquivo PDF
                                     ,pr_des_reto => vr_des_reto           --Retorno OK/NOK
                                     ,pr_tab_erro => pr_tab_erro);         --tabela erro
                --Se ocorreu erro
                IF vr_des_reto <> 'OK' THEN
                  --Se tem erro na tabela 
                  IF pr_tab_erro.COUNT > 0 THEN
                    vr_dscritic:= pr_tab_erro(pr_tab_erro.FIRST).dscritic;
                  ELSE
                    vr_dscritic:= 'Erro ao enviar arquivo para web.';  
                  END IF; 
                  --Sair 
                  RAISE vr_exc_erro;
                END IF; 
              END IF;
              
              --Retorno com Sucesso
              pr_des_reto:= 'OK';                
            END IF;

          END IF; --Dados Cooperado                    

          GENE0001.pc_set_modulo(pr_module => NULL, pr_action => vr_nmaction);
        EXCEPTION
          WHEN vr_exc_sair THEN
            pr_des_reto:= 'OK';
            vr_cdcritic:= NULL;
            vr_dscritic:= NULL;
        END;
          
        --Se nao tem erro na temp-table 
        IF pr_tab_erro.COUNT = 0 AND (vr_dscritic IS NOT NULL OR nvl(vr_cdcritic,0) <> 0) THEN
          -- Chamar rotina de gravacao de erro
          gene0001.pc_gera_erro (pr_cdcooper => pr_cdcooper
                                ,pr_cdagenci => pr_cdagenci
                                ,pr_nrdcaixa => pr_nrdcaixa
                                ,pr_nrsequen => 1  /** Sequencia **/
                                ,pr_cdcritic => vr_cdcritic
                                ,pr_dscritic => vr_dscritic
                                ,pr_tab_erro => pr_tab_erro);
        END IF;
        --Escrever erro no Log
        IF pr_flgerlog THEN  
          --Executar rotina geracao log
          gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                              ,pr_cdoperad => vr_cdoperad
                              ,pr_dscritic => vr_dscritic
                              ,pr_dsorigem => vr_dsorigem
                              ,pr_dstransa => vr_dstransa
                              ,pr_dttransa => TRUNC(SYSDATE)
                              ,pr_flgtrans => (CASE pr_des_reto WHEN 'OK' THEN 1 ELSE 0 END)
                              ,pr_hrtransa => gene0002.fn_busca_time
                              ,pr_idseqttl => 1
                              ,pr_nmdatela => vr_nmdatela
                              ,pr_nrdconta => pr_nrdconta
                              ,pr_nrdrowid => vr_nrdrowid);
        END IF;  

        GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);
      EXCEPTION
        WHEN OTHERS THEN
          CECRED.pc_internal_exception;
        
          --Retorno com Erro
          pr_des_reto:= 'NOK';
          vr_dscritic:= 'Erro ao executar pc_gera_impextdpv. '||sqlerrm;
          -- Chamar rotina de gravacao de erro
          gene0001.pc_gera_erro (pr_cdcooper => pr_cdcooper
                                ,pr_cdagenci => pr_cdagenci
                                ,pr_nrdcaixa => pr_nrdcaixa
                                ,pr_nrsequen => 1  /** Sequencia **/
                                ,pr_cdcritic => vr_cdcritic
                                ,pr_dscritic => vr_dscritic
                                ,pr_tab_erro => pr_tab_erro);
          --Escrever erro no Log
        IF pr_flgerlog THEN  
          --Executar rotina geracao log
          gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                              ,pr_cdoperad => vr_cdoperad
                              ,pr_dscritic => vr_dscritic
                              ,pr_dsorigem => vr_dsorigem
                              ,pr_dstransa => vr_dstransa
                              ,pr_dttransa => TRUNC(SYSDATE)
                              ,pr_flgtrans => (CASE pr_des_reto WHEN 'OK' THEN 1 ELSE 0 END)
                              ,pr_hrtransa => gene0002.fn_busca_time
                              ,pr_idseqttl => 1
                              ,pr_nmdatela => vr_nmdatela
                              ,pr_nrdconta => pr_nrdconta
                              ,pr_nrdrowid => vr_nrdrowid);
        END IF;  
      END;
    END pc_gera_impextdpv;  

    -- Subrotina para gerar extrato Conta
    PROCEDURE pc_gera_impextcti (pr_cdcooper IN crapcop.cdcooper%TYPE  --Codigo Cooperativa
                                ,pr_cdagenci IN crapass.cdagenci%TYPE  --Codigo Agencia
                                ,pr_nrdcaixa IN INTEGER                --Numero do Caixa
                                ,pr_idorigem IN INTEGER                --Origem dos Dados
                                ,pr_nmdatela IN VARCHAR2               --Nome da Tela
                                ,pr_dtmvtolt IN crapdat.dtmvtolt%TYPE  --Data Movimento
                                ,pr_inproces IN INTEGER                --Indicador Processo
                                ,pr_cdprogra IN crapprg.cdprogra%TYPE  --Codigo Programa
                                ,pr_cdoperad IN VARCHAR2               --Codigo Operador
                                ,pr_dsiduser IN VARCHAR2               --Identificador Usuario
                                ,pr_nrdconta IN crapass.nrdconta%TYPE  --Numero da Conta do Associado
                                ,pr_idseqttl IN crapttl.idseqttl%TYPE  --Sequencial do Titular
                                ,pr_dtiniper IN DATE                   --Data de Referencia                                
                                ,pr_flgrodar IN BOOLEAN                --Flag Executar
                                ,pr_flgerlog IN BOOLEAN                --Escreve erro Log
                                ,pr_clobxml  IN OUT NOCOPY CLOB        --Clob arquivo de dados
                                ,pr_dstexto  IN OUT NOCOPY VARCHAR2    --Texto Clob 6
                                ,pr_tab_craptab IN apli0001.typ_tab_ctablq --> Tipo de tabela de Conta Bloqueada
                                ,pr_nmarqimp OUT VARCHAR2              --Nome Arquivo Impressao
                                ,pr_nmarqpdf OUT VARCHAR2              --Nome Arquivo PDF
                                ,pr_tab_erro OUT GENE0001.typ_tab_erro -- Tabela de Erros
                                ,pr_des_reto OUT VARCHAR2 ) IS         --Descricao Erro
  BEGIN
  ---------------------------------------------------------------------------------------------------------------
  --
  --  Programa : pc_gera_impextcti                    Antigo: procedures/b1wgen0112.p/gera-impextcti
  --  Sistema  : 
  --  Sigla    : CRED
  --  Autor    : Alisson C. Berrido - Amcom
  --  Data     : Julho/2014                           Ultima atualizacao: 04/07/2016
  --
  -- Dados referentes ao programa:
  --
  -- Frequencia: -----
  -- Objetivo   : Procedure para obter impressao do extrato conta investimento do associado
  --
  -- Alterações : 17/07/2014 - Conversão Progress -> Oracle (Alisson - AMcom)
  --              
  --              20/04/2016 - Remover comando rm e incluir direto na tela impres 
  --                           (Lucas Ranghetti/Rodrigo #399412)
  --
  --              04/07/2016 - Ajuste para melhora de performance
  --                          (Adriano - SD 480339).
  ---------------------------------------------------------------------------------------------------------------
  DECLARE
        -- Busca dos dados da cooperativa
        CURSOR cr_crapcop (pr_cdcooper IN crapcop.cdcooper%TYPE) IS
          SELECT crapcop.nmrescop
                ,crapcop.nmextcop
          FROM crapcop crapcop
          WHERE crapcop.cdcooper = pr_cdcooper;
        rw_crapcop cr_crapcop%ROWTYPE;  
        -- Busca dos dados do associado
        CURSOR cr_crapass(pr_cdcooper IN crapcop.cdcooper%TYPE
                         ,pr_nrdconta IN crapass.nrdconta%TYPE) IS
          SELECT crapass.nrdconta
                ,crapass.nmprimtl
                ,crapass.vllimcre
                ,crapass.nrcpfcgc
                ,crapass.inpessoa
                ,crapass.cdcooper
                ,crapass.cdagenci
                ,crapass.nrctainv
          FROM crapass crapass
          WHERE crapass.cdcooper = pr_cdcooper
          AND   crapass.nrdconta = pr_nrdconta;
        rw_crapass cr_crapass%ROWTYPE;
        --Variaveis Locais
        vr_vlsldant NUMBER;
        vr_flextinv VARCHAR2(1);
        vr_cdoperad VARCHAR2(100):= pr_cdoperad;
        vr_nmdatela VARCHAR2(100):= pr_nmdatela;
        vr_dsorigem VARCHAR2(100);
        vr_dstransa VARCHAR2(100);
        vr_nrdrowid ROWID;
        --Variaveis de indices
        vr_index PLS_INTEGER;
        --Variaveis dos Arquivos
        vr_typ_saida VARCHAR2(3);
        vr_comando   VARCHAR2(100);
        vr_nmdireto  VARCHAR2(100);
        vr_nmendter  VARCHAR2(100);
        vr_setlinha  VARCHAR2(100);  
        --CLOB de Dados
        vr_clobxml370  CLOB;
        vr_dstexto     VARCHAR2(32600);              
        vr_dstexto370  VARCHAR2(32600);              
        --Tabela Extrato Investimento
        vr_tab_extrato_inv typ_tab_extrato_inv;
        --Variaveis de Erro
        vr_cdcritic INTEGER;
        vr_dscritic VARCHAR2(4000);
        --Variaveis de Excecoes
        vr_exc_erro EXCEPTION;
        vr_exc_sair EXCEPTION;
        
        vr_nmaction VARCHAR2(32) := 'pc_gera_impextcti';

      BEGIN

        GENE0001.pc_set_modulo(pr_module => NULL, pr_action => vr_nmaction);

        --Inicializar transacao
        vr_dsorigem:= gene0001.vr_vet_des_origens(pr_idorigem);
        vr_dstransa:= 'Consultar dados para extrato da conta investimento.'; 
        --Inicializar Variaveis
        vr_cdcritic:= 0;
        vr_dscritic:= NULL;
        pr_des_reto:= 'NOK'; 
        --Verificar Operador e nome da tela
        IF pr_inproces = 1 THEN
          vr_cdoperad:= pr_cdoperad;
          vr_nmdatela:= pr_nmdatela;
        ELSE
          vr_cdoperad:= '1';  
          vr_nmdatela:= upper(pr_cdprogra);
        END IF;  
        /* Bloco Imprime */
        BEGIN
          --Limpar Tabela Erro
          pr_tab_erro.DELETE;
          -- Verifica se a cooperativa esta cadastrada
          OPEN cr_crapcop (pr_cdcooper => pr_cdcooper);
          FETCH cr_crapcop INTO rw_crapcop;
          -- Se não encontrar
          IF cr_crapcop%NOTFOUND THEN
            -- Fechar o cursor pois haverá raise
            CLOSE cr_crapcop;
            -- Montar mensagem de critica
            vr_cdcritic:= 651;
            RAISE vr_exc_erro;
          ELSE
            -- Apenas fechar o cursor
            CLOSE cr_crapcop;
          END IF;
          -- Busca do diretório base da cooperativa para a geração de relatórios
          vr_nmdireto:= gene0001.fn_diretorio(pr_tpdireto => 'C'           --> /usr/coop
                                             ,pr_cdcooper => pr_cdcooper   --> Cooperativa
                                             ,pr_nmsubdir => 'rl');       --> Utilizaremos o rl

          -- Inicializar as informações do XML de dados para o relatório
          dbms_lob.createtemporary(vr_clobxml370, TRUE, dbms_lob.CALL);
          dbms_lob.open(vr_clobxml370, dbms_lob.lob_readwrite);
          --Escrever no arquivo XML
          gene0002.pc_escreve_xml(vr_clobxml370, vr_dstexto370,'<?xml version="1.0" encoding="UTF-8"?><crrl370><contas>');
                                                    
          --Se nao rodar
          IF NOT pr_flgrodar THEN 
            --Nome Arquivo Impressao
            pr_nmarqimp:= 'crrl370.lst';
          ELSE 
            --Nome Arquivo Impressao e PDF
            vr_nmendter:= pr_dsiduser || gene0002.fn_busca_time;
            pr_nmarqimp:= vr_nmendter || '.ex';
            pr_nmarqpdf:= vr_nmendter || '.pdf';
          END IF;
          --Selecionar associado
          OPEN cr_crapass (pr_cdcooper => pr_cdcooper
                          ,pr_nrdconta => pr_nrdconta);
          --Posicionar no proximo registro
          FETCH cr_crapass INTO rw_crapass;
          --Se nao encontrou
          IF cr_crapass%NOTFOUND THEN
            --Fechar Cursor
            CLOSE cr_crapass;
            --mensagem erro
            vr_cdcritic:= 9;
            vr_dscritic:= NULL;
            --Montar texto
            vr_dstexto:= '<conta nrdconta="'||to_char(pr_nrdconta,'fm9g999g999g0')||
                   '" nrctainv="" nmprimtl="" vlsldant="0" flginvest="N" flgmensag="S" dscmensag="'||
                   vr_dscritic||'"></conta>';
            --Escrever no Arquivo
            gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);

            --Popular Clob do relatorio interno
            gene0002.pc_escreve_xml(vr_clobxml370, vr_dstexto370,vr_dstexto);

            --Levantar Excecao
            RAISE vr_exc_sair;
          END IF;  
          --Fechar Cursor
          CLOSE cr_crapass;
          --Buscar Extrato Investimento
          pc_extrato_investimento (pr_cdcooper   => pr_cdcooper               --Codigo Cooperativa
                                  ,pr_cdagenci   => pr_cdagenci               --Codigo Agencia
                                  ,pr_nrdcaixa   => pr_nrdcaixa               --Numero do Caixa
                                  ,pr_cdoperad   => pr_cdoperad               --Codigo Operador
                                  ,pr_nmdatela   => 'IMPRES'                  --Nome da Tela
                                  ,pr_idorigem   => pr_idorigem               --Origem dos Dados
                                  ,pr_nrdconta   => pr_nrdconta               --Numero da Conta do Associado
                                  ,pr_idseqttl   => pr_idseqttl               --Sequencial do Titular
                                  ,pr_dtiniper   => pr_dtiniper               --Periodo inicial
                                  ,pr_dtfimper   => pr_dtmvtolt               --Periodo Final
                                  ,pr_flgerlog   => FALSE                     --Imprimir log
                                  ,pr_vlsldant   => vr_vlsldant               --Valor Saldo
                                  ,pr_tab_craptab => pr_tab_craptab           --Tipo de tabela de Conta Bloqueada
                                  ,pr_tab_extrato_inv => vr_tab_extrato_inv   --Tabela Extrato Investimento
                                  ,pr_des_reto   => pr_des_reto               --Retorno OK ou NOK
                                  ,pr_tab_erro   => pr_tab_erro);             --Tabela de Erros  
          --Se ocorreu erro       
          IF pr_des_reto = 'NOK' THEN
            --se tem erro na tabela 
            IF pr_tab_erro.COUNT > 0 THEN
              vr_dscritic:= 'Conta/dv: '||to_char(pr_nrdconta,'fm9999g999g0')||' - '||
                            pr_tab_erro(pr_tab_erro.FIRST).dscritic;
            ELSE
              vr_dscritic:= 'Conta/dv: '||to_char(pr_nrdconta,'fm9999g999g0')||' - '||
                            'Nao foi possivel carregar o extrato.';
            END IF; 
            
            --Montar texto
            vr_dstexto:= '<conta nrdconta="'||to_char(pr_nrdconta,'fm9g999g999g0')||
                   '" nrctainv="'||to_char(rw_crapass.nrctainv,'fm999g999g999g0')||
                   '" nmprimtl="'||rw_crapass.nmprimtl|| 
                   '" vlsldant="'||to_char(vr_vlsldant,'fm9999g999g990d00')||
                   '" flginvest="N" flgmensag="S" dscmensag="'||vr_dscritic||'"></conta>';
            --Escrever no Arquivo
            gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);

            --Popular Clob do relatorio interno
            gene0002.pc_escreve_xml(vr_clobxml370, vr_dstexto370,vr_dstexto);

            --Levantar Excecao
            RAISE vr_exc_sair;
          END IF;
          
          --Se possuir dados
          IF vr_tab_extrato_inv.COUNT > 0 THEN
            /* Cdempres = 11 , Relatorio 370 em 80 colunas */
            --Montar texto
            vr_dstexto:= '<conta nrdconta="'||to_char(rw_crapass.nrdconta,'fm9g999g999g0')||
                   '" nrctainv="'||to_char(rw_crapass.nrctainv,'fm999g999g999g0')||
                   '" nmprimtl="'||rw_crapass.nmprimtl||
                   '" vlsldant="'||to_char(vr_vlsldant,'fm9999g999g990d00')||
                   '" flginvest="S" flgmensag="N" dscmensag=""><investimentos>';
            --Escrever no Arquivo
            gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);

            --Popular Clob do relatorio interno
            gene0002.pc_escreve_xml(vr_clobxml370, vr_dstexto370,vr_dstexto);

            --Percorrer Registros de Extrato Investimento
            vr_index:= vr_tab_extrato_inv.FIRST;
            WHILE vr_index IS NOT NULL LOOP
              --Montar texto
              vr_dstexto:= '<investimento>' ||
                   '<dtmvtolt>' || to_char(vr_tab_extrato_inv(vr_index).dtmvtolt,'DD/MM/YYYY') || '</dtmvtolt>' ||
                   '<dsextrat>' || SUBSTR(vr_tab_extrato_inv(vr_index).dsextrat,1,22) || '</dsextrat>' ||
                   '<nrdocmto>' || to_char(vr_tab_extrato_inv(vr_index).nrdocmto,'fm999g999g990') || '</nrdocmto>' ||
                    '<vllanmto>' || to_char(vr_tab_extrato_inv(vr_index).vllanmto,'fm9999g999g990d00') || '</vllanmto>' ||
                    '<indebcre>' || vr_tab_extrato_inv(vr_index).indebcre || '</indebcre>' ||
                     '<vlsldtot>' || to_char(vr_tab_extrato_inv(vr_index).vlsldtot,'fm9999g999g990d00mi') || '</vlsldtot>' ||
                '</investimento>';
              --Escrever lancamento no XML
              gene0002.pc_escreve_xml(pr_clobxml,pr_dstexto,vr_dstexto);

              --Popular Clob do relatorio interno
              gene0002.pc_escreve_xml(vr_clobxml370,vr_dstexto370,vr_dstexto);

              --Proximo registro
              vr_index:= vr_tab_extrato_inv.NEXT(vr_index);
            END LOOP;  
            --Escrever no Arquivo
            gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,'</investimentos></conta>');
            
            IF pr_flgrodar = TRUE THEN
              --Popular Clob do relatorio interno
              gene0002.pc_escreve_xml(vr_clobxml370, vr_dstexto370,'</investimentos></conta></contas></crrl370>',TRUE);
              -- Gera relatório crrl370
              gene0002.pc_solicita_relato(pr_cdcooper  => pr_cdcooper                   --> Cooperativa conectada
                                         ,pr_cdprogra  => pr_cdprogra                   --> Programa chamador
                                         ,pr_dtmvtolt  => pr_dtmvtolt                   --> Data do movimento atual
                                         ,pr_dsxml     => vr_clobxml370                 --> Arquivo XML de dados
                                         ,pr_dsxmlnode => '/crrl370/contas/conta'       --> Nó base do XML para leitura dos dados
                                         ,pr_dsjasper  => 'crrl370.jasper'              --> Arquivo de layout do iReport
                                         ,pr_dsparams  => NULL                          --> Sem parâmetros
                                         ,pr_cdrelato => 370                            --> Código fixo para o relatório (nao busca pelo sqcabrel)                                         
                                         ,pr_dsarqsaid => vr_nmdireto||'/'||pr_nmarqimp  --> Arquivo final com o path
                                         ,pr_qtcoluna  => 80                            --> Colunas do relatorio
                                         ,pr_flg_gerar => 'S'                           --> Geraçao na hora
                                         ,pr_flg_impri => 'N'                           --> Chamar a impressão (Imprim.p)
                                         ,pr_nmformul  => NULL                          --> Nome do formulário para impressão
                                         ,pr_nrcopias  => 1                             --> Número de cópias
                                         ,pr_sqcabrel  => 1                             --> Qual a seq do cabrel
                                         ,pr_flappend  => 'S'                           --> Fazer append do relatorio se ja existir
                                         ,pr_des_erro  => vr_dscritic);                 --> Saída com erro
              --Se ocorreu erro no relatorio
              IF vr_dscritic IS NOT NULL THEN
                --Levantar Excecao
                RAISE vr_exc_erro;
              END IF; 
              
              --Fechar Clob e Liberar Memoria  
              dbms_lob.close(vr_clobxml370);
              dbms_lob.freetemporary(vr_clobxml370);               
              
              IF pr_idorigem = 5 THEN              
                --Enviar arquivo para Web
                GENE0002.pc_envia_arquivo_web (pr_cdcooper => pr_cdcooper           --Codigo Cooperativa
                                     ,pr_cdagenci => pr_cdagenci           --Codigo Agencia
                                     ,pr_nrdcaixa => pr_nrdcaixa           --Numero do Caixa
                                     ,pr_nmarqimp => pr_nmarqimp           --Nome Arquivo Impressao
                                     ,pr_nmdireto => vr_nmdireto           --Nome Diretorio
                                     ,pr_nmarqpdf => pr_nmarqpdf           --Nome Arquivo PDF
                                     ,pr_des_reto => pr_des_reto           --Retorno OK/NOK
                                     ,pr_tab_erro => pr_tab_erro);         --tabela erro
                --Se ocorreu erro
                IF pr_des_reto <> 'OK' THEN
                  --Se tem erro na tabela 
                  IF pr_tab_erro.COUNT > 0 THEN
                    vr_dscritic:= pr_tab_erro(pr_tab_erro.FIRST).dscritic;
                  ELSE
                    vr_dscritic:= 'Erro ao enviar arquivo para web.';  
                  END IF;  
                  --Sair 
                  RAISE vr_exc_erro;
                END IF; 
                
	            END IF; --pr_idorigem = 5
            
	          pr_des_reto:= 'OK';                                                        
            
            END IF; 
        
        END IF;
            
        EXCEPTION
          WHEN vr_exc_sair THEN
            pr_des_reto:= 'OK';   
            vr_cdcritic:= NULL;
            vr_dscritic:= NULL;
        END; 
        
        --Se nao tem erro na temp-table 
        IF pr_tab_erro.COUNT = 0 AND (vr_dscritic IS NOT NULL OR nvl(vr_cdcritic,0) <> 0) THEN
          -- Chamar rotina de gravacao de erro
          gene0001.pc_gera_erro (pr_cdcooper => pr_cdcooper
                                ,pr_cdagenci => pr_cdagenci
                                ,pr_nrdcaixa => pr_nrdcaixa
                                ,pr_nrsequen => 1  /** Sequencia **/
                                ,pr_cdcritic => vr_cdcritic
                                ,pr_dscritic => vr_dscritic
                                ,pr_tab_erro => pr_tab_erro);
        END IF;
        --Escrever erro no Log
        IF pr_flgerlog THEN  
          --Executar rotina geracao log
          gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                              ,pr_cdoperad => vr_cdoperad
                              ,pr_dscritic => vr_dscritic
                              ,pr_dsorigem => vr_dsorigem
                              ,pr_dstransa => vr_dstransa
                              ,pr_dttransa => TRUNC(SYSDATE)
                              ,pr_flgtrans => (CASE pr_des_reto WHEN 'OK' THEN 1 ELSE 0 END)
                              ,pr_hrtransa => gene0002.fn_busca_time
                              ,pr_idseqttl => 1 /** idseqttl **/
                              ,pr_nmdatela => vr_nmdatela
                              ,pr_nrdconta => pr_nrdconta
                              ,pr_nrdrowid => vr_nrdrowid);
        END IF;  
        
        GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);
        
      EXCEPTION
        WHEN vr_exc_erro THEN
          -- Retorno não OK
          pr_des_reto := 'NOK';
          -- Chamar rotina de gravação de erro
          gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                               ,pr_cdagenci => pr_cdagenci
                               ,pr_nrdcaixa => pr_nrdcaixa
                               ,pr_nrsequen => 1 --> Fixo
                               ,pr_cdcritic => 0 --> Critica 0
                               ,pr_dscritic => vr_dscritic
                               ,pr_tab_erro => pr_tab_erro);
          -- Se foi solicitado geração de LOG
          IF pr_flgerlog THEN
            -- Chamar geração de LOG
            gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                                ,pr_cdoperad => pr_cdoperad
                                ,pr_dscritic => vr_dscritic
                                ,pr_dsorigem => vr_dsorigem
                                ,pr_dstransa => vr_dstransa
                                ,pr_dttransa => TRUNC(SYSDATE)
                                ,pr_flgtrans => 0 --> FALSE
                                ,pr_hrtransa => gene0002.fn_busca_time
                                ,pr_idseqttl => pr_idseqttl
                                ,pr_nmdatela => pr_nmdatela
                                ,pr_nrdconta => pr_nrdconta
                                ,pr_nrdrowid => vr_nrdrowid);
          END IF;  
        WHEN OTHERS THEN
          cecred.pc_internal_exception;
          -- Retorno não OK
          pr_des_reto := 'NOK';
          -- Chamar rotina de gravação de erro
          vr_dscritic := 'Erro na pc_gera_impextcti --> '|| sqlerrm;
          gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                               ,pr_cdagenci => pr_cdagenci
                               ,pr_nrdcaixa => pr_nrdcaixa
                               ,pr_nrsequen => 1 --> Fixo
                               ,pr_cdcritic => 0 --> Critica 0
                               ,pr_dscritic => vr_dscritic
                               ,pr_tab_erro => pr_tab_erro);
          -- Se foi solicitado geração de LOG
          IF pr_flgerlog THEN
            -- Chamar geração de LOG
            gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                                ,pr_cdoperad => pr_cdoperad
                                ,pr_dscritic => vr_dscritic
                                ,pr_dsorigem => vr_dsorigem
                                ,pr_dstransa => vr_dstransa
                                ,pr_dttransa => TRUNC(SYSDATE)
                                ,pr_flgtrans => 0 --> FALSE
                                ,pr_hrtransa => gene0002.fn_busca_time
                                ,pr_idseqttl => pr_idseqttl
                                ,pr_nmdatela => pr_nmdatela
                                ,pr_nrdconta => pr_nrdconta
                                ,pr_nrdrowid => vr_nrdrowid);
          END IF;
        END;   
      END pc_gera_impextcti;  
    
    -- Subrotina para Consultar Imposto de Renda
    PROCEDURE pc_consulta_imposto_renda (pr_cdcooper IN crapcop.cdcooper%TYPE       --Codigo Cooperativa
                                        ,pr_cdagenci IN crapass.cdagenci%TYPE       --Codigo Agencia
                                        ,pr_nrdcaixa IN INTEGER                     --Numero do Caixa
                                        ,pr_cdoperad IN VARCHAR2                    --Codigo Operador
                                        ,pr_nmdatela IN VARCHAR2                    --Nome da Tela
                                        ,pr_idorigem IN INTEGER                     --Origem dos Dados
                                        ,pr_dtmvtolt IN crapdat.dtmvtolt%TYPE       --Data Movimento
                                        ,pr_nrdconta IN crapass.nrdconta%TYPE       --Numero da Conta do Associado
                                        ,pr_nranoref IN INTEGER                     --Ano de Referencia                                
                                        ,pr_tpextrat IN INTEGER                     --Tipo de Extrato
                                        ,pr_tab_extrato_ir OUT typ_tab_extrato_ir   --Extrato IR
                                        ,pr_tab_retencao_ir OUT typ_tab_retencao_ir --Retencoes do IR
                                        ,pr_tab_erro OUT GENE0001.typ_tab_erro      --Tabela de Erros
                                        ,pr_des_reto OUT VARCHAR2 ) IS              --Descricao Erro
  BEGIN
  /*---------------------------------------------------------------------------------------------------------------
  
    Programa : pc_consulta_imposto_renda           Antigo: procedures/b1wgen0112.p/consulta-imposto-renda
    Sistema  : 
    Sigla    : CRED
    Autor    : Alisson C. Berrido - Amcom
    Data     : Julho/2014                           Ultima atualizacao: 26/04/2017
  
   Dados referentes ao programa:
  
   Frequencia: -----
   Objetivo   : Procedure para consultar informacoes do Imposto de Renda
  
   Alterações : 21/07/2014 - Conversão Progress -> Oracle (Alisson - AMcom)
                
                28/06/2016 - M325 - Tributação de Juros ao Capital
                             Removida geração Cod.Retenção 5706 (Guilherme/SUPERO)

				26/04/2017 - Ajuste para retirar o uso de campos removidos da tabela
			                 crapass, crapttl, crapjur 
							 (Adriano - P339).

  ---------------------------------------------------------------------------------------------------------------*/
  DECLARE
-- Busca dos dados da cooperativa
        CURSOR cr_crapcop (pr_cdcooper IN crapcop.cdcooper%TYPE) IS
          SELECT crapcop.nmrescop
                ,crapcop.nmextcop
                ,crapcop.nrdocnpj
                ,crapcop.dsendcop
                ,crapcop.nrendcop
                ,crapcop.nmbairro
                ,crapcop.nrcepend
                ,crapcop.nmcidade
                ,crapcop.cdufdcop 
                ,crapcop.nrtelvoz
                ,crapcop.cdcooper
                ,crapcop.cdagectl
                ,crapcop.nrtelfax
          FROM crapcop crapcop
          WHERE crapcop.cdcooper = pr_cdcooper;
        rw_crapcop cr_crapcop%ROWTYPE;  
        -- Busca dos dados do associado
        CURSOR cr_crapass(pr_cdcooper IN crapcop.cdcooper%TYPE
                         ,pr_nrdconta IN crapass.nrdconta%TYPE) IS
          SELECT crapass.nrdconta
                ,crapass.nmprimtl
                ,crapass.vllimcre
                ,crapass.nrcpfcgc
                ,crapass.inpessoa
                ,crapass.cdcooper
                ,crapass.cdagenci
                ,crapass.nrctainv
          FROM crapass crapass
          WHERE crapass.cdcooper = pr_cdcooper
          AND   crapass.nrdconta = pr_nrdconta;
        rw_crapass cr_crapass%ROWTYPE;  
        -- Cursor para busca a agencia
        CURSOR cr_crapage(pr_cdcooper IN crapage.cdcooper%TYPE
                         ,pr_cdagenci IN crapage.cdagenci%TYPE) IS
          SELECT crapage.nmcidade
              ,crapage.cdagenci
              ,crapage.nmresage
              ,crapage.qtddlslf
          FROM crapage crapage
          WHERE crapage.cdcooper = pr_cdcooper 
          AND   crapage.cdagenci = pr_cdagenci;
        rw_crapage cr_crapage%ROWTYPE;  
        --Selecionar Dados Imposto Renda
        CURSOR cr_crapdir (pr_cdcooper IN crapdir.cdcooper%type
                          ,pr_nrdconta IN crapdir.nrdconta%type
                          ,pr_nranoref IN INTEGER) IS 
          SELECT crapdir.* 
                ,nvl(vlirrdca##1,0) + nvl(vlrirrpp##1,0) + nvl(vlirabap##1,0) + nvl(vlirajus##1,0) + nvl(vlirfrdc##1,0) vlirfont##1
                ,nvl(vlirrdca##2,0) + nvl(vlrirrpp##2,0) + nvl(vlirabap##2,0) + nvl(vlirajus##2,0) + nvl(vlirfrdc##2,0) vlirfont##2
                ,nvl(vlirrdca##3,0) + nvl(vlrirrpp##3,0) + nvl(vlirabap##3,0) + nvl(vlirajus##3,0) + nvl(vlirfrdc##3,0) vlirfont##3
                ,nvl(vlirrdca##4,0) + nvl(vlrirrpp##4,0) + nvl(vlirabap##4,0) + nvl(vlirajus##4,0) + nvl(vlirfrdc##4,0) vlirfont##4
                ,nvl(vlirrdca##5,0) + nvl(vlrirrpp##5,0) + nvl(vlirabap##5,0) + nvl(vlirajus##5,0) + nvl(vlirfrdc##5,0) vlirfont##5
                ,nvl(vlirrdca##6,0) + nvl(vlrirrpp##6,0) + nvl(vlirabap##6,0) + nvl(vlirajus##6,0) + nvl(vlirfrdc##6,0) vlirfont##6
                ,nvl(vlirrdca##7,0) + nvl(vlrirrpp##7,0) + nvl(vlirabap##7,0) + nvl(vlirajus##7,0) + nvl(vlirfrdc##7,0) vlirfont##7
                ,nvl(vlirrdca##8,0) + nvl(vlrirrpp##8,0) + nvl(vlirabap##8,0) + nvl(vlirajus##8,0) + nvl(vlirfrdc##8,0) vlirfont##8
                ,nvl(vlirrdca##9,0) + nvl(vlrirrpp##9,0) + nvl(vlirabap##9,0) + nvl(vlirajus##9,0) + nvl(vlirfrdc##9,0) vlirfont##9
                ,nvl(vlirrdca##10,0) + nvl(vlrirrpp##10,0) + nvl(vlirabap##10,0) + nvl(vlirajus##10,0) + nvl(vlirfrdc##10,0) vlirfont##10
                ,nvl(vlirrdca##11,0) + nvl(vlrirrpp##11,0) + nvl(vlirabap##11,0) + nvl(vlirajus##11,0) + nvl(vlirfrdc##11,0) vlirfont##11
                ,nvl(vlirrdca##12,0) + nvl(vlrirrpp##12,0) + nvl(vlirabap##12,0) + nvl(vlirajus##12,0) + nvl(vlirfrdc##12,0) vlirfont##12
          FROM crapdir crapdir
          WHERE crapdir.cdcooper = pr_cdcooper       
          AND   crapdir.nrdconta = pr_nrdconta   
          AND   to_number(to_char(crapdir.dtmvtolt,'YYYY')) = pr_nranoref
          order by cdcooper,nrdconta,dtmvtolt,progress_recid;
        rw_crapdir cr_crapdir%ROWTYPE;
        --Selecionar Saldo Conta Investimento
        CURSOR cr_crapsli (pr_cdcooper IN crapsli.cdcooper%type
                          ,pr_nrdconta IN crapsli.nrdconta%type
                          ,pr_dtrefere IN crapsli.dtrefere%type) IS 
          SELECT crapsli.vlsddisp 
          FROM crapsli crapsli
          WHERE crapsli.cdcooper = pr_cdcooper       
          AND   crapsli.nrdconta = pr_nrdconta   
          AND   crapsli.dtrefere = pr_dtrefere
          order by cdcooper,nrdconta,dtrefere,progress_recid;
        rw_crapsli cr_crapsli%ROWTYPE;
        --Selecionar Lancamentos Cota Capital
        CURSOR cr_craplct (pr_cdcooper IN craplct.cdcooper%type
                          ,pr_nrdconta IN craplct.nrdconta%type
                          ,pr_cdhistor IN craplct.cdhistor%type) IS
          SELECT nvl(sum(nvl(craplct.qtlanmfx,0)),0) qtlanmfx
          FROM craplct craplct
          WHERE craplct.cdcooper = pr_cdcooper       
          AND   craplct.nrdconta = pr_nrdconta   
          AND   craplct.cdhistor = pr_cdhistor; 
        rw_craplct cr_craplct%ROWTYPE;
        --Selecionar Descricao da Retencao
        CURSOR cr_gnrdirf (pr_cdretenc IN gnrdirf.cdretenc%type) IS
          SELECT gnrdirf.cdretenc
                ,gnrdirf.dsretenc
          FROM  gnrdirf 
          WHERE gnrdirf.cdretenc = pr_cdretenc; 
        rw_gnrdirf cr_gnrdirf%ROWTYPE;
        --Selecionar Informacoes Referentes a Cotas e Recursos
        CURSOR cr_crapcot (pr_cdcooper IN crapcot.cdcooper%type
                          ,pr_nrdconta IN crapcot.nrdconta%type) IS
          SELECT crapcot.vlrentot##1
                ,crapcot.vlrentot##2
                ,crapcot.vlrentot##3
                ,crapcot.vlrentot##4
                ,crapcot.vlrentot##5
                ,crapcot.vlrentot##6
                ,crapcot.vlrentot##7
                ,crapcot.vlrentot##8
                ,crapcot.vlrentot##9
                ,crapcot.vlrentot##10
                ,crapcot.vlrentot##11
                ,crapcot.vlrentot##12
                ,nvl(vlirrdca##1,0) + nvl(vlrirrpp##1,0) + nvl(vlirabap##1,0) + nvl(vlirajus##1,0) + nvl(vlirfrdc##1,0) vlirfont##1
                ,nvl(vlirrdca##2,0) + nvl(vlrirrpp##2,0) + nvl(vlirabap##2,0) + nvl(vlirajus##2,0) + nvl(vlirfrdc##2,0) vlirfont##2
                ,nvl(vlirrdca##3,0) + nvl(vlrirrpp##3,0) + nvl(vlirabap##3,0) + nvl(vlirajus##3,0) + nvl(vlirfrdc##3,0) vlirfont##3
                ,nvl(vlirrdca##4,0) + nvl(vlrirrpp##4,0) + nvl(vlirabap##4,0) + nvl(vlirajus##4,0) + nvl(vlirfrdc##4,0) vlirfont##4
                ,nvl(vlirrdca##5,0) + nvl(vlrirrpp##5,0) + nvl(vlirabap##5,0) + nvl(vlirajus##5,0) + nvl(vlirfrdc##5,0) vlirfont##5
                ,nvl(vlirrdca##6,0) + nvl(vlrirrpp##6,0) + nvl(vlirabap##6,0) + nvl(vlirajus##6,0) + nvl(vlirfrdc##6,0) vlirfont##6
                ,nvl(vlirrdca##7,0) + nvl(vlrirrpp##7,0) + nvl(vlirabap##7,0) + nvl(vlirajus##7,0) + nvl(vlirfrdc##7,0) vlirfont##7
                ,nvl(vlirrdca##8,0) + nvl(vlrirrpp##8,0) + nvl(vlirabap##8,0) + nvl(vlirajus##8,0) + nvl(vlirfrdc##8,0) vlirfont##8
                ,nvl(vlirrdca##9,0) + nvl(vlrirrpp##9,0) + nvl(vlirabap##9,0) + nvl(vlirajus##9,0) + nvl(vlirfrdc##9,0) vlirfont##9
                ,nvl(vlirrdca##10,0) + nvl(vlrirrpp##10,0) + nvl(vlirabap##10,0) + nvl(vlirajus##10,0) + nvl(vlirfrdc##10,0) vlirfont##10
                ,nvl(vlirrdca##11,0) + nvl(vlrirrpp##11,0) + nvl(vlirabap##11,0) + nvl(vlirajus##11,0) + nvl(vlirfrdc##11,0) vlirfont##11
                ,nvl(vlirrdca##12,0) + nvl(vlrirrpp##12,0) + nvl(vlirabap##12,0) + nvl(vlirajus##12,0) + nvl(vlirfrdc##12,0) vlirfont##12
          FROM crapcot crapcot
          WHERE crapcot.cdcooper = pr_cdcooper 
          AND   crapcot.nrdconta = pr_nrdconta;
        rw_crapcot cr_crapcot%ROWTYPE;
        --Selecionar Lancamentos de Cota Capital
        CURSOR cr_craplct2 (pr_cdcooper IN craplct.cdcooper%type       
                           ,pr_nrdconta IN craplct.nrdconta%type   
                           ,pr_nranoref IN INTEGER
                           ,pr_nrmesref IN INTEGER) IS
          SELECT  craplct.cdhistor
                 ,craplct.vllanmto                
          FROM craplct craplct
          WHERE craplct.cdcooper = pr_cdcooper        
          AND   craplct.nrdconta = pr_nrdconta    
          AND   to_number(to_char(craplct.dtmvtolt,'YYYYMM')) = to_number(pr_nranoref||lpad(pr_nrmesref,2,'0')) 
          AND   craplct.cdhistor IN (sobr0001.vr_cdhisjur_cot,sobr0001.vr_cdhisirr_cot);

        CURSOR cr_crapttl(pr_cdcooper IN crapttl.cdcooper%TYPE
		                 ,pr_nrdconta IN crapttl.nrdconta%TYPE)IS
		SELECT crapttl.nmextttl
		  FROM crapttl
		 WHERE crapttl.cdcooper = pr_cdcooper
		  AND crapttl.nrdconta = pr_nrdconta
		  AND crapttl.idseqttl = 2;
                                      
        --Variaveis Locais
        vr_flgemiss     BOOLEAN;
        vr_inrelext     INTEGER;
        vr_dsextrat     VARCHAR2(100);
        vr_rel_dsagenci VARCHAR2(100);
        vr_rel_nmresemp VARCHAR2(100);
        vr_rel_qtjaicmf NUMBER;
        vr_rel_qtjaicm1 NUMBER;
        vr_rel_vlrenapl NUMBER;
        vr_rel_vlrenap1 NUMBER;
        vr_rel_vldjuros NUMBER;
        vr_rel_nmmesano VARCHAR2(100);
        vr_rel_ddmesano INTEGER;
        vr_rel_aamesano INTEGER;
        vr_rel_dscooper VARCHAR2(100);
        vr_rel_dsendcop VARCHAR2(100);
        vr_rel_dstelcop VARCHAR2(100);
        vr_mfx_vlsddvem NUMBER;
        vr_mfx_vlsdccdp NUMBER;
        vr_mfx_vlsdapli NUMBER;
        vr_mfx_vlttccap NUMBER;
        vr_mfx_dtmvtolt DATE;
        vr_mfx_vlsddve1 NUMBER;
        vr_mfx_vlsdccd1 NUMBER;
        vr_mfx_vlsdapl1 NUMBER;
        vr_mfx_vlttcca1 NUMBER;
        vr_mfx_dtmvtol1 DATE;
        vr_contador     INTEGER;
        vr_regexis1     BOOLEAN;
        vr_flgescra     BOOLEAN;
        vr_regexist     BOOLEAN;
        vr_cdacesso     VARCHAR2(100);
        vr_nmendter     VARCHAR2(100);
        vr_nmarqimp     VARCHAR2(100);
        vr_dscomand     VARCHAR2(100);
        vr_dtmvtolt     DATE;
        vr_vlmoefix     NUMBER(35,8);
        vr_vlmoefi1     NUMBER(35,8);
        vr_nmcidade     VARCHAR2(100);
        vr_rel_vlrencot NUMBER;
        vr_rel_vlirfcot NUMBER;
        vr_ant_vlirfcot NUMBER;
        vr_ant_vlprepag NUMBER;
        vr_rel_vlprepag NUMBER;
        vr_rel_vlrendim NUMBER;
        vr_rel_vlcpmfpg NUMBER;
        vr_rel_vldoirrf NUMBER;
        vr_rel_dscpmfpg VARCHAR2(100);
        vr_rel_nrcpfcgc VARCHAR2(100);
        vr_rel_aarefere INTEGER;
        vr_rel_nrdocnpj VARCHAR2(100);
        vr_rel_nmmesref VARCHAR2(100);
        vr_ant_dtrefere DATE;
        vr_sol_dtrefere DATE;
        vr_ant_vlsdapli NUMBER;
        vr_sol_vlsdapli NUMBER;
        vr_ant_vlpoupan NUMBER;
        vr_sol_vlpoupan NUMBER;
        vr_ant_vlfundos NUMBER;
        vr_sol_vlfundos NUMBER;
        vr_ant_vlrenfix NUMBER;
        vr_sol_vlrenfix NUMBER;
        vr_ant_vlsdccdp NUMBER;
        vr_sol_vlsdccdp NUMBER;
        vr_ant_vlsddvem NUMBER;
        vr_sol_vlsddvem NUMBER;
        vr_ant_vlttccap NUMBER;
        vr_sol_vlttccap NUMBER;
        vr_ren_vlpoupan NUMBER;
        vr_ren_vlfundos NUMBER;
        vr_tot_vlrendim NUMBER;
        vr_lit_dsanoant VARCHAR2(100);
        vr_flganter     BOOLEAN;
        vr_dtemissa     DATE;
        vr_vlrentot     NUMBER;
        vr_vlirfont     NUMBER;
        vr_nmmesref     VARCHAR2(100);
        vr_nrmesref     INTEGER;
        vr_cdretenc     INTEGER;
        vr_dsretenc     VARCHAR2(100);
        vr_vlrdrtrt     NUMBER;
        vr_vlrrtirf     NUMBER;
        vr_flghames     BOOLEAN;
        vr_nrdconta     VARCHAR2(100);
        vr_cdagectl     VARCHAR2(100);
        vr_dsre3426     VARCHAR2(100);
        vr_dsre5706     VARCHAR2(100);
        vr_dsre3277     VARCHAR2(100);
        vr_dsorigem     VARCHAR2(100);
        vr_dstransa     VARCHAR2(100);
        vr_nrdrowid     ROWID;
        vr_crapage      BOOLEAN;
        vr_dstextab     craptab.dstextab%type;
		vr_nmsegntl     crapttl.nmextttl%TYPE;
        --Variaveis de indices
        vr_index        PLS_INTEGER;
        vr_index_retenc PLS_INTEGER;
        --Variaveis dos Arquivos
        vr_typ_saida    VARCHAR2(3);
        vr_comando      VARCHAR2(100);
        vr_nmarqimp     VARCHAR2(100);
        vr_nmdireto     VARCHAR2(100);
        vr_nmarqpdf     VARCHAR2(100);
        vr_nmendter     VARCHAR2(100);
        vr_setlinha     VARCHAR2(100);  
        --Variaveis de Erro
        vr_cdcritic     INTEGER;
        vr_dscritic     VARCHAR2(4000);
        --Variaveis de Excecoes
        vr_exc_erro     EXCEPTION;
        vr_exc_saida    EXCEPTION;
      BEGIN
        gene0001.pc_set_modulo(pr_module => NULL, pr_action => 'pc_consulta_imposto_renda');

        --Inicializar transacao
        vr_dsorigem:= gene0001.vr_vet_des_origens(pr_idorigem);
        vr_dstransa:= 'Consultar dados para informe de rendimentos.'; 
        --Inicializar Variaveis
        vr_cdcritic:= 0;
        vr_dscritic:= NULL;
        pr_des_reto:= 'NOK'; 
        /* Bloco Imprime */
        BEGIN
          --Limpar Tabela Erro
          pr_tab_erro.DELETE;
          --Limpar tabelas de dados
          pr_tab_extrato_ir.DELETE;
          pr_tab_retencao_ir.DELETE;
          -- Verifica se a cooperativa esta cadastrada
          OPEN cr_crapcop (pr_cdcooper => pr_cdcooper);
          FETCH cr_crapcop INTO rw_crapcop;
          -- Se não encontrar
          IF cr_crapcop%NOTFOUND THEN
            -- Fechar o cursor pois haverá raise
            CLOSE cr_crapcop;
            -- Montar mensagem de critica
            vr_cdcritic:= 651;
            RAISE vr_exc_saida;
          ELSE
            -- Apenas fechar o cursor
            CLOSE cr_crapcop;
          END IF;
          --Selecionar associado
          OPEN cr_crapass (pr_cdcooper => pr_cdcooper
                          ,pr_nrdconta => pr_nrdconta);
          --Posicionar no proximo registro
          FETCH cr_crapass INTO rw_crapass;
          --Se nao encontrou
          IF cr_crapass%NOTFOUND THEN
            --Fechar Cursor
            CLOSE cr_crapass;
            -- Montar mensagem de critica
            vr_cdcritic:= 9;
            RAISE vr_exc_saida;
          ELSE
            --Fechar Cursor
            CLOSE cr_crapass;
          END IF; 

		  IF rw_crapass.inpessoa = 1 THEN

		    OPEN cr_crapttl(pr_cdcooper => rw_crapass.cdcooper
			               ,pr_nrdconta => rw_crapass.nrdconta);
						   
			FETCH cr_crapttl INTO vr_nmsegntl;
			
			CLOSE cr_crapttl;

		  END IF;

          --Selecionar Agencia
          OPEN cr_crapage (pr_cdcooper => pr_cdcooper
                          ,pr_cdagenci => rw_crapass.cdagenci);
          --Posicionar no proximo registro
          FETCH cr_crapage INTO rw_crapage;
          vr_crapage:= cr_crapage%FOUND;
          --Fechar Cursor
          CLOSE cr_crapage;

          --Ano referencia posterior a 1994 
          IF pr_nranoref > 1994 THEN 
            --Zerar variaveis
            vr_ant_vlsdapli:= 0;
            vr_ant_vlsdccdp:= 0;
            vr_ant_vlsddvem:= 0;
            vr_ant_vlprepag:= 0;
            vr_ant_vlttccap:= 0;
            vr_sol_vlsdapli:= 0;
            vr_sol_vlsdccdp:= 0;
            vr_sol_vlsddvem:= 0;
            vr_rel_vlprepag:= 0;
            vr_sol_vlttccap:= 0;
            vr_rel_vlrendim:= 0;
            vr_rel_vldjuros:= 0;
            vr_rel_aarefere:= pr_nranoref;
            vr_lit_dsanoant:= 'SALDO EM';
            vr_rel_dscpmfpg:= 'CPMF PAGO NO ANO';
            vr_regexis1:= FALSE; 
            --Formatar o cpf/cnpj
            vr_rel_nrcpfcgc:= gene0002.fn_mask_cpf_cnpj(rw_crapass.nrcpfcgc,rw_crapass.inpessoa);
            /* se for extrato para pessoa fisica */
            IF pr_tpextrat = 2 THEN
              --Selecionar Dados Imposto Renda
              OPEN cr_crapdir (pr_cdcooper => pr_cdcooper
                              ,pr_nrdconta => rw_crapass.nrdconta
                              ,pr_nranoref => pr_nranoref);
              FETCH cr_crapdir INTO rw_crapdir;
              --Se nao encontrou
              IF cr_crapdir%NOTFOUND THEN
                --Fechar Cursor
                CLOSE cr_crapdir;
                --Montar mensagem
                vr_dscritic:= 'Conta/dv: '||pr_nrdconta||' - Nao ha dados para imposto de renda de '||pr_nranoref||'.';
                --Sair 
                RAISE vr_exc_saida;
              END IF;                  
              --Fechar Cursor
              CLOSE cr_crapdir;
              --Associar valores nas variaveis
              vr_sol_dtrefere:= TO_DATE('1231'||to_char(rw_crapdir.dtmvtolt,'YYYY'),'MMDDYYYY');
              vr_sol_vlsdapli:= rw_crapdir.vlsdapli + rw_crapdir.vlsdrdpp;
              vr_sol_vlsdccdp:= rw_crapdir.vlsdccdp;
              vr_sol_vlsddvem:= rw_crapdir.vlsddvem;
              vr_sol_vlttccap:= rw_crapdir.vlttccap;
              vr_cdacesso:= 'IRENDA'||to_char(rw_crapdir.dtmvtolt,'YYYY');
              vr_rel_vlrencot:= rw_crapdir.vlrencot;
              vr_rel_vlirfcot:= rw_crapdir.vlirfcot;
              vr_rel_vlprepag:= rw_crapdir.vlprepag;
              --Selecionar Saldo Conta Investimento 
              OPEN cr_crapsli (pr_cdcooper => pr_cdcooper
                              ,pr_nrdconta => rw_crapass.nrdconta
                              ,pr_dtrefere => to_date('3112'||pr_nranoref,'DDMMYYYY'));
              FETCH cr_crapsli INTO rw_crapsli;
              --Se nao encontrou
              IF cr_crapsli%FOUND THEN
                --Acumular Saldo Investimento
                vr_sol_vlsdccdp:= nvl(vr_sol_vlsdccdp,0) + rw_crapsli.vlsddisp;
              END IF;                  
              --Fechar Cursor
              CLOSE cr_crapsli;
              --Encontrar dados acesso da tabela generica
              vr_dstextab:= TABE0001.fn_busca_dstextab(pr_cdcooper => pr_cdcooper
                                                      ,pr_nmsistem => 'CRED'
                                                      ,pr_tptabela => 'GENERI'
                                                      ,pr_cdempres => 0
                                                      ,pr_cdacesso => vr_cdacesso
                                                      ,pr_tpregist => 1);
              --Se nao encontrou parametro
              IF vr_dstextab IS NULL THEN
                 -- Montar mensagem de critica
                 vr_cdcritic:= 457;
                --Levantar Excecao
                RAISE vr_exc_saida;
              ELSE  
                --Valor da moeda
                vr_vlmoefix:= GENE0002.fn_char_para_number(SUBSTR(vr_dstextab,22,15));                     
              END IF; 
              --Calcular Valor Rendimento
              vr_rel_vlrendim:= nvl(rw_crapdir.vlrenrda##1,0) + nvl(rw_crapdir.vlrenrda##2,0) +
                               nvl(rw_crapdir.vlrenrda##3,0) + nvl(rw_crapdir.vlrenrda##4,0) +
                               nvl(rw_crapdir.vlrenrda##5,0) + nvl(rw_crapdir.vlrenrda##6,0) +
                               nvl(rw_crapdir.vlrenrda##7,0) + nvl(rw_crapdir.vlrenrda##8,0) +
                               nvl(rw_crapdir.vlrenrda##9,0) + nvl(rw_crapdir.vlrenrda##10,0) +
                               nvl(rw_crapdir.vlrenrda##11,0) + nvl(rw_crapdir.vlrenrda##12,0) +

                               nvl(rw_crapdir.vlrenrdc##1,0) + nvl(rw_crapdir.vlrenrdc##2,0) +
                               nvl(rw_crapdir.vlrenrdc##3,0) + nvl(rw_crapdir.vlrenrdc##4,0) +
                               nvl(rw_crapdir.vlrenrdc##5,0) + nvl(rw_crapdir.vlrenrdc##6,0) +
                               nvl(rw_crapdir.vlrenrdc##7,0) + nvl(rw_crapdir.vlrenrdc##8,0) +
                               nvl(rw_crapdir.vlrenrdc##9,0) + nvl(rw_crapdir.vlrenrdc##10,0) +
                               nvl(rw_crapdir.vlrenrdc##11,0) + nvl(rw_crapdir.vlrenrdc##12,0) +
                               nvl(rw_crapdir.vlrenrpp,0) +
                               nvl(rw_crapdir.vlabonpp,0) +
                               nvl(rw_crapdir.vlabonrd,0) +
                               nvl(rw_crapdir.vlabiopp,0) +
                               nvl(rw_crapdir.vlabiord,0)
                               -
                               nvl(rw_crapdir.vlirabap##1,0)  - nvl(rw_crapdir.vlirabap##2,0) -
                               nvl(rw_crapdir.vlirabap##3,0)  - nvl(rw_crapdir.vlirabap##4,0) -
                               nvl(rw_crapdir.vlirabap##5,0)  - nvl(rw_crapdir.vlirabap##6,0) -
                               nvl(rw_crapdir.vlirabap##7,0)  - nvl(rw_crapdir.vlirabap##8,0) -
                               nvl(rw_crapdir.vlirabap##9,0)  - nvl(rw_crapdir.vlirabap##10,0) -
                               nvl(rw_crapdir.vlirabap##11,0) - nvl(rw_crapdir.vlirabap##12,0) -
                               nvl(rw_crapdir.vlirrdca##1,0)  - nvl(rw_crapdir.vlirrdca##2,0) -
                               nvl(rw_crapdir.vlirrdca##3,0)  - nvl(rw_crapdir.vlirrdca##4,0) -
                               nvl(rw_crapdir.vlirrdca##5,0)  - nvl(rw_crapdir.vlirrdca##6,0) -
                               nvl(rw_crapdir.vlirrdca##7,0)  - nvl(rw_crapdir.vlirrdca##8,0) -
                               nvl(rw_crapdir.vlirrdca##9,0)  - nvl(rw_crapdir.vlirrdca##10,0) -
                               nvl(rw_crapdir.vlirrdca##11,0) - nvl(rw_crapdir.vlirrdca##12,0) -
                               nvl(rw_crapdir.vlirfrdc##1,0) - nvl(rw_crapdir.vlirfrdc##2,0) -
                               nvl(rw_crapdir.vlirfrdc##3,0) - nvl(rw_crapdir.vlirfrdc##4,0) -
                               nvl(rw_crapdir.vlirfrdc##5,0) - nvl(rw_crapdir.vlirfrdc##6,0) -
                               nvl(rw_crapdir.vlirfrdc##7,0) - nvl(rw_crapdir.vlirfrdc##8,0) -
                               nvl(rw_crapdir.vlirfrdc##9,0) - nvl(rw_crapdir.vlirfrdc##10,0) -
                               nvl(rw_crapdir.vlirfrdc##11,0) - nvl(rw_crapdir.vlirfrdc##12,0) -
                               nvl(rw_crapdir.vlrirrpp##1,0)  - nvl(rw_crapdir.vlrirrpp##2,0) -
                               nvl(rw_crapdir.vlrirrpp##3,0)  - nvl(rw_crapdir.vlrirrpp##4,0) -
                               nvl(rw_crapdir.vlrirrpp##5,0)  - nvl(rw_crapdir.vlrirrpp##6,0) -
                               nvl(rw_crapdir.vlrirrpp##7,0)  - nvl(rw_crapdir.vlrirrpp##8,0) -
                               nvl(rw_crapdir.vlrirrpp##9,0)  - nvl(rw_crapdir.vlrirrpp##10,0) -
                               nvl(rw_crapdir.vlrirrpp##11,0) - nvl(rw_crapdir.vlrirrpp##12,0) -
                               nvl(rw_crapdir.vlirajus##1,0)  - nvl(rw_crapdir.vlirajus##2,0) -
                               nvl(rw_crapdir.vlirajus##3,0)  - nvl(rw_crapdir.vlirajus##4,0) -
                               nvl(rw_crapdir.vlirajus##5,0)  - nvl(rw_crapdir.vlirajus##6,0) -
                               nvl(rw_crapdir.vlirajus##7,0)  - nvl(rw_crapdir.vlirajus##8,0) -
                               nvl(rw_crapdir.vlirajus##9,0)  - nvl(rw_crapdir.vlirajus##10,0) -
                               nvl(rw_crapdir.vlirajus##11,0) - nvl(rw_crapdir.vlirajus##12,0);
              --Valor Imposto Retido na Fonte
              vr_rel_vldoirrf:= nvl(rw_crapdir.vlirabap##1,0)  + nvl(rw_crapdir.vlirabap##2,0) +
                               nvl(rw_crapdir.vlirabap##3,0)  + nvl(rw_crapdir.vlirabap##4,0) +
                               nvl(rw_crapdir.vlirabap##5,0)  + nvl(rw_crapdir.vlirabap##6,0) +
                               nvl(rw_crapdir.vlirabap##7,0)  + nvl(rw_crapdir.vlirabap##8,0) +
                               nvl(rw_crapdir.vlirabap##9,0)  + nvl(rw_crapdir.vlirabap##10,0) +
                               nvl(rw_crapdir.vlirabap##11,0) + nvl(rw_crapdir.vlirabap##12,0) +                
                               nvl(rw_crapdir.vlirrdca##1,0)  + nvl(rw_crapdir.vlirrdca##2,0) +
                               nvl(rw_crapdir.vlirrdca##3,0)  + nvl(rw_crapdir.vlirrdca##4,0) +
                               nvl(rw_crapdir.vlirrdca##5,0)  + nvl(rw_crapdir.vlirrdca##6,0) +
                               nvl(rw_crapdir.vlirrdca##7,0)  + nvl(rw_crapdir.vlirrdca##8,0) +
                               nvl(rw_crapdir.vlirrdca##9,0)  + nvl(rw_crapdir.vlirrdca##10,0) +
                               nvl(rw_crapdir.vlirrdca##11,0) + nvl(rw_crapdir.vlirrdca##12,0) +
                               nvl(rw_crapdir.vlirfrdc##1,0) + nvl(rw_crapdir.vlirfrdc##2,0) +
                               nvl(rw_crapdir.vlirfrdc##3,0) + nvl(rw_crapdir.vlirfrdc##4,0) +
                               nvl(rw_crapdir.vlirfrdc##5,0) + nvl(rw_crapdir.vlirfrdc##6,0) +
                               nvl(rw_crapdir.vlirfrdc##7,0) + nvl(rw_crapdir.vlirfrdc##8,0) +
                               nvl(rw_crapdir.vlirfrdc##9,0) + nvl(rw_crapdir.vlirfrdc##10,0) +
                               nvl(rw_crapdir.vlirfrdc##11,0) + nvl(rw_crapdir.vlirfrdc##12,0) +
                               nvl(rw_crapdir.vlrirrpp##1,0)  + nvl(rw_crapdir.vlrirrpp##2,0) +
                               nvl(rw_crapdir.vlrirrpp##3,0)  + nvl(rw_crapdir.vlrirrpp##4,0) +
                               nvl(rw_crapdir.vlrirrpp##5,0)  + nvl(rw_crapdir.vlrirrpp##6,0) +
                               nvl(rw_crapdir.vlrirrpp##7,0)  + nvl(rw_crapdir.vlrirrpp##8,0) +
                               nvl(rw_crapdir.vlrirrpp##9,0)  + nvl(rw_crapdir.vlrirrpp##10,0) +
                               nvl(rw_crapdir.vlrirrpp##11,0) + nvl(rw_crapdir.vlrirrpp##12,0) +
                               nvl(rw_crapdir.vlirajus##1,0)  + nvl(rw_crapdir.vlirajus##2,0) +
                               nvl(rw_crapdir.vlirajus##3,0)  + nvl(rw_crapdir.vlirajus##4,0) +
                               nvl(rw_crapdir.vlirajus##5,0)  + nvl(rw_crapdir.vlirajus##6,0) +
                               nvl(rw_crapdir.vlirajus##7,0)  + nvl(rw_crapdir.vlirajus##8,0) +
                               nvl(rw_crapdir.vlirajus##9,0)  + nvl(rw_crapdir.vlirajus##10,0) +
                               nvl(rw_crapdir.vlirajus##11,0) + nvl(rw_crapdir.vlirajus##12,0);
              --Valor dos Juros
              vr_rel_vldjuros:= APLI0001.fn_round(rw_crapdir.qtjaicmf * vr_vlmoefix,2);
              --Valor Pago Cpmf
              vr_rel_vlcpmfpg:= rw_crapdir.vlcpmfpg;
              --Valor Total Rendimentos           
              vr_tot_vlrendim:= vr_rel_vlrendim;
              --Marcar Existe registro    
              vr_regexist:= TRUE;
              --CredFiesc
              IF rw_crapcop.cdcooper = 6 THEN
                --Zerar valor cpmf paga
                vr_rel_vlcpmfpg:= 0;
                vr_rel_dscpmfpg:= NULL;
              END IF;
              --Selecionar Lancamentos Cota Capital
              OPEN cr_craplct (pr_cdcooper => pr_cdcooper
                              ,pr_nrdconta => rw_crapdir.nrdconta
                              ,pr_cdhistor => 421);
              FETCH cr_craplct INTO rw_craplct;
              --Fechar Cursor
              CLOSE cr_craplct;                
              --Acumular Juros
              vr_rel_vldjuros:= nvl(vr_rel_vldjuros,0) - apli0001.fn_round(rw_craplct.qtlanmfx * vr_vlmoefix,2);                           
              --Valor Negativo de Juros
              IF vr_rel_vldjuros < 0 THEN
                vr_rel_vldjuros:= 0;
              END IF;
              --Se existe registro
              IF vr_regexist THEN 
                --Selecionar Dados Imposto Renda ano Anterior
                OPEN cr_crapdir (pr_cdcooper => pr_cdcooper
                                ,pr_nrdconta => rw_crapass.nrdconta
                                ,pr_nranoref => pr_nranoref-1);
                FETCH cr_crapdir INTO rw_crapdir;
                --Seencontrou
                IF cr_crapdir%FOUND THEN
                  --Popular Variaveis Ano Anterior
                  vr_ant_dtrefere:= rw_crapdir.dtmvtolt;
                  vr_ant_vlsdapli:= nvl(rw_crapdir.vlsdapli,0) + nvl(rw_crapdir.vlsdrdpp,0);
                  vr_ant_vlsdccdp:= rw_crapdir.vlsdccdp;
                  vr_ant_vlsddvem:= rw_crapdir.vlsddvem;
                  vr_ant_vlttccap:= rw_crapdir.vlttccap;
                  vr_ant_vlirfcot:= rw_crapdir.vlirfcot;
                  vr_ant_vlprepag:= rw_crapdir.vlprepag;
                  vr_flganter:= TRUE;
                ELSE
                  --nao tem dados ano anterior
                  vr_flganter:= FALSE;  
                END IF;                  
                --Fechar Cursor
                CLOSE cr_crapdir;
                --Selecionar Saldo Conta Investimento ano Anterior
                OPEN cr_crapsli (pr_cdcooper => pr_cdcooper
                                ,pr_nrdconta => rw_crapass.nrdconta
                                ,pr_dtrefere => to_date('3112'||pr_nranoref-1,'DDMMYYYY'));
                FETCH cr_crapsli INTO rw_crapsli;
                --Se encontrou
                IF cr_crapsli%FOUND THEN
                  --Acumular Saldo Investimento
                  vr_ant_vlsdccdp:= nvl(vr_ant_vlsdccdp,0) + rw_crapsli.vlsddisp;
                END IF;                  
                --Fechar Cursor
                CLOSE cr_crapsli;
              END IF; --vr_regexist  
              --Valor Rendimento Negativo
              IF vr_rel_vlrendim <= 0 THEN
                vr_rel_vlrendim:= 0;
                vr_rel_vldoirrf:= 0; 
              END IF;                    
              --Proximo Indice para tabela memoria
              vr_index:= pr_tab_extrato_ir.COUNT+1;
              --Popular Colunas da tabela memoria
              pr_tab_extrato_ir(vr_index).nrcpfcgc:= vr_rel_nrcpfcgc;
              pr_tab_extrato_ir(vr_index).nrdconta:= rw_crapass.nrdconta;
              pr_tab_extrato_ir(vr_index).nmprimtl:= rw_crapass.nmprimtl;
              pr_tab_extrato_ir(vr_index).cdagenci:= rw_crapass.cdagenci;
              pr_tab_extrato_ir(vr_index).nmsegntl:= vr_nmsegntl;
              pr_tab_extrato_ir(vr_index).dsanoant:= vr_lit_dsanoant;
              pr_tab_extrato_ir(vr_index).dtrefer1:= vr_ant_dtrefere;
              pr_tab_extrato_ir(vr_index).vlsdapl1:= vr_ant_vlsdapli;
              pr_tab_extrato_ir(vr_index).vlsdccd1:= vr_ant_vlsdccdp;
              pr_tab_extrato_ir(vr_index).vlsddve1:= vr_ant_vlsddvem;
              pr_tab_extrato_ir(vr_index).vlttcca1:= vr_ant_vlttccap;
              pr_tab_extrato_ir(vr_index).dtrefer2:= vr_sol_dtrefere;
              pr_tab_extrato_ir(vr_index).vlsdapl2:= vr_sol_vlsdapli;
              pr_tab_extrato_ir(vr_index).vlsdccd2:= vr_sol_vlsdccdp;
              pr_tab_extrato_ir(vr_index).vlsddve2:= vr_sol_vlsddvem;
              pr_tab_extrato_ir(vr_index).vlttcca2:= vr_sol_vlttccap;
              pr_tab_extrato_ir(vr_index).vlrendim:= vr_rel_vlrendim;
              pr_tab_extrato_ir(vr_index).nmextcop:= rw_crapcop.nmextcop;
              pr_tab_extrato_ir(vr_index).nrdocnpj:= vr_rel_nrdocnpj;
              pr_tab_extrato_ir(vr_index).dsendcop:= vr_rel_dsendcop;
              pr_tab_extrato_ir(vr_index).dscpmfpg:= vr_rel_dscpmfpg;
              pr_tab_extrato_ir(vr_index).vlcpmfpg:= vr_rel_vlcpmfpg;
              pr_tab_extrato_ir(vr_index).vldoirrf:= vr_rel_vldoirrf;
              pr_tab_extrato_ir(vr_index).cdagectl:= rw_crapcop.cdagectl;
              pr_tab_extrato_ir(vr_index).flganter:= vr_flganter;
              pr_tab_extrato_ir(vr_index).vlrencot:= vr_rel_vlrencot;
              pr_tab_extrato_ir(vr_index).vlirfcot:= vr_rel_vlirfcot;
              pr_tab_extrato_ir(vr_index).anirfcot:= vr_ant_vlirfcot; 
              pr_tab_extrato_ir(vr_index).vlprepag:= vr_rel_vlprepag;
              pr_tab_extrato_ir(vr_index).anprepag:= vr_ant_vlprepag;
            ELSE --pr_tpextrat = 2
              --Proximo Indice para tabela memoria
              vr_index:= pr_tab_extrato_ir.COUNT+1;
              --Popular Colunas da tabela memoria
              pr_tab_extrato_ir(vr_index).nmextcop:= rw_crapcop.nmextcop;
              pr_tab_extrato_ir(vr_index).nrdocnpj:= vr_rel_nrdocnpj;
              pr_tab_extrato_ir(vr_index).dsendcop:= vr_rel_dsendcop;
              pr_tab_extrato_ir(vr_index).nrcpfcgc:= vr_rel_nrcpfcgc;
              pr_tab_extrato_ir(vr_index).nmprimtl:= rw_crapass.nmprimtl;
              pr_tab_extrato_ir(vr_index).cdagenci:= rw_crapass.cdagenci;
              pr_tab_extrato_ir(vr_index).nrdconta:= rw_crapass.nrdconta;
              pr_tab_extrato_ir(vr_index).nmsegntl:= vr_nmsegntl;
              /* pegar descricao dos codigos de retencao 3426 / 5706 / 3277 */
              FOR idx IN 1..3 LOOP
                --Determinar o codigo de retencao
                CASE idx
                  WHEN 1 THEN rw_gnrdirf.cdretenc:= 3426;
                  WHEN 2 THEN rw_gnrdirf.cdretenc:= 5706;
                  WHEN 3 THEN rw_gnrdirf.cdretenc:= 3277;
                END CASE;
                --Selecionar Descricao da Retencao
                OPEN cr_gnrdirf (pr_cdretenc => rw_gnrdirf.cdretenc);
                FETCH cr_gnrdirf INTO rw_gnrdirf;
                --Se nao encontrou
                IF cr_gnrdirf%NOTFOUND THEN
                  --Fechar Cursor
                  CLOSE cr_gnrdirf;
                  --Montar Mensagem de Critica
                  vr_dscritic:= 'Problema na consulta da descricao de retencao. Comunique seu PA.';
                  --Levantar Excecao
                  RAISE vr_exc_saida;                                       
                ELSE
                  --Descricao da retencao
                  CASE idx
                    WHEN 1 THEN vr_dsre3426:= rw_gnrdirf.dsretenc;
                    WHEN 2 THEN vr_dsre5706:= rw_gnrdirf.dsretenc;
                    WHEN 3 THEN vr_dsre3277:= rw_gnrdirf.dsretenc;
                  END CASE;
                END IF;                  
                --Fechar Cursor
                CLOSE cr_gnrdirf;
              END LOOP;
              --Data de Referencia Atual e anterior
              vr_ant_dtrefere:= TO_DATE('1231'||(pr_nranoref-1),'MMDDYYYY');
              vr_sol_dtrefere:= TO_DATE('1231'||pr_nranoref,'MMDDYYYY'); 
              /* se for ano vigente */
              IF pr_nranoref = to_number(to_char(pr_dtmvtolt,'YYYY')) THEN
                --Mes Referencia
                vr_nrmesref:= to_number(to_char(last_day(add_months(pr_dtmvtolt,-1)),'MM')); 
                --Selecionar Informacoes Referentes a Cotas e Recursos
                OPEN cr_crapcot (pr_cdcooper => pr_cdcooper 
                                ,pr_nrdconta => rw_crapass.nrdconta);
                FETCH cr_crapcot INTO rw_crapcot;
                --Se nao encontrou
                IF cr_crapcot%NOTFOUND THEN
                  --Fechar Cursor
                  CLOSE cr_crapcot;
                  --Montar Mensagem de Critica
                  vr_dscritic:= 'Conta/dv: '||pr_nrdconta||'- Nao ha dados para imposto de renda de '||pr_nranoref;
                  --Levantar Excecao
                  RAISE vr_exc_saida;                                       
                END IF;                  
                --Fechar Cursor
                CLOSE cr_crapcot;
                --Popular os valores de cada Mes
                FOR idx IN 1..vr_nrmesref LOOP
                  --Nome Mes Referencia
                  vr_nmmesref:= cxon0000.vr_tab_mes(idx);
                  --Codigo Referencia
                  vr_cdretenc:= 3426;
                  --Descricao da Referencia
                  vr_dsretenc:= vr_dsre3426;
                  --Valores do Rendimento e IR
                  CASE idx 
                    WHEN 1 THEN
                      vr_vlrentot:= rw_crapcot.vlrentot##1;
                      vr_vlirfont:= rw_crapcot.vlirfont##1;
                    WHEN 2 THEN
                      vr_vlrentot:= rw_crapcot.vlrentot##2;
                      vr_vlirfont:= rw_crapcot.vlirfont##2;
                    WHEN 3 THEN
                      vr_vlrentot:= rw_crapcot.vlrentot##3;
                      vr_vlirfont:= rw_crapcot.vlirfont##3;
                    WHEN 4 THEN
                      vr_vlrentot:= rw_crapcot.vlrentot##4;
                      vr_vlirfont:= rw_crapcot.vlirfont##4;
                    WHEN 5 THEN
                      vr_vlrentot:= rw_crapcot.vlrentot##5;
                      vr_vlirfont:= rw_crapcot.vlirfont##5;
                    WHEN 6 THEN
                      vr_vlrentot:= rw_crapcot.vlrentot##6;
                      vr_vlirfont:= rw_crapcot.vlirfont##6;
                    WHEN 7 THEN
                      vr_vlrentot:= rw_crapcot.vlrentot##7;
                      vr_vlirfont:= rw_crapcot.vlirfont##7;
                    WHEN 8 THEN
                      vr_vlrentot:= rw_crapcot.vlrentot##8;
                      vr_vlirfont:= rw_crapcot.vlirfont##8;
                    WHEN 9 THEN
                      vr_vlrentot:= rw_crapcot.vlrentot##9;
                      vr_vlirfont:= rw_crapcot.vlirfont##9;
                    WHEN 10 THEN
                      vr_vlrentot:= rw_crapcot.vlrentot##10;
                      vr_vlirfont:= rw_crapcot.vlirfont##10;
                    WHEN 11 THEN
                      vr_vlrentot:= rw_crapcot.vlrentot##11;
                      vr_vlirfont:= rw_crapcot.vlirfont##11;
                    WHEN 12 THEN
                      vr_vlrentot:= rw_crapcot.vlrentot##12;
                      vr_vlirfont:= rw_crapcot.vlirfont##12;
                  END CASE;  
                  --Se possuir Valor retido fonte 
                  IF vr_vlirfont > 0 THEN 
                    --Buscar Proximo Indice Retencao
                    vr_index_retenc:= pr_tab_retencao_ir.COUNT + 1;
                    --Inserir Informacoes tabela retencao
                    pr_tab_retencao_ir(vr_index_retenc).nmmesref:= vr_nmmesref;
                    pr_tab_retencao_ir(vr_index_retenc).cdretenc:= vr_cdretenc;
                    pr_tab_retencao_ir(vr_index_retenc).dsretenc:= vr_dsretenc;
                    pr_tab_retencao_ir(vr_index_retenc).vlrentot:= vr_vlrentot;
                    --Ano referencia maior ou igual 2004
                    IF pr_nranoref >= 2004 THEN
                      pr_tab_retencao_ir(vr_index_retenc).vlirfont:= vr_vlirfont;
                    ELSE
                      pr_tab_retencao_ir(vr_index_retenc).vlirfont:= 0;                 
                    END IF;                                       
                  END IF;
                  
                  --Zerar Valor IR retido Fonte
                  vr_vlirfont:= 0; 
                  --Percorrer Lancamentos de Cota
                  FOR rw_craplct IN cr_craplct2 (pr_cdcooper => pr_cdcooper       
                                                ,pr_nrdconta => rw_crapass.nrdconta   
                                                ,pr_nranoref => pr_nranoref
                                                ,pr_nrmesref => idx) LOOP
                    --Historico Rendimento
                    IF rw_craplct.cdhistor = 926 THEN
                      vr_vlrentot:= rw_craplct.vllanmto;
                    ELSE
                      vr_vlirfont:= rw_craplct.vllanmto;
                    END IF;  
                  END LOOP; --cr_craplct 

                  --Se possuir Valor retido fonte
                  IF vr_vlirfont > 0 THEN
                    /* Passou a tratar 3277 ao inves de 5706 */
                    --Montar Código e Descricao da Retencao
                    vr_cdretenc:= 3277;
                    vr_dsretenc:= vr_dsre3277;
                    --Buscar Proximo Indice Retencao
                    vr_index_retenc:= pr_tab_retencao_ir.COUNT + 1;
                    --Inserir Informacoes tabela retencao
                    pr_tab_retencao_ir(vr_index_retenc).nmmesref:= vr_nmmesref;
                    pr_tab_retencao_ir(vr_index_retenc).cdretenc:= vr_cdretenc;
                    pr_tab_retencao_ir(vr_index_retenc).dsretenc:= vr_dsretenc;
                    pr_tab_retencao_ir(vr_index_retenc).vlrentot:= vr_vlrentot;
                    --Ano referencia maior ou igual 2004
                    IF pr_nranoref >= 2004 THEN
                      pr_tab_retencao_ir(vr_index_retenc).vlirfont:= vr_vlirfont;
                    ELSE
                      pr_tab_retencao_ir(vr_index_retenc).vlirfont:= 0;                 
                    END IF;     
                  END IF;  
                END LOOP; --FOR todos meses
              ELSE /* senao for ano vigente */
                --Mes de Referencia   
                vr_nrmesref:= 12;
                --Selecionar Dados Imposto Renda
                OPEN cr_crapdir (pr_cdcooper => pr_cdcooper
                                ,pr_nrdconta => rw_crapass.nrdconta
                                ,pr_nranoref => pr_nranoref);
                FETCH cr_crapdir INTO rw_crapdir;
                --Se nao encontrou
                IF cr_crapdir%NOTFOUND THEN
                  --Fechar Cursor
                  CLOSE cr_crapdir;
                  --Montar mensagem
                  vr_dscritic:= 'Conta/dv: '||pr_nrdconta||' - Nao ha dados para imposto de renda de '||pr_nranoref||'.';
                  --Sair 
                  RAISE vr_exc_saida;
                END IF;                  
                --Fechar Cursor
                CLOSE cr_crapdir;
                --Calcular Valor Rendimento
                vr_rel_vlrendim:= nvl(rw_crapdir.vlrenrda##1,0) + nvl(rw_crapdir.vlrenrda##2,0) +
                               nvl(rw_crapdir.vlrenrda##3,0) + nvl(rw_crapdir.vlrenrda##4,0) +
                               nvl(rw_crapdir.vlrenrda##5,0) + nvl(rw_crapdir.vlrenrda##6,0) +
                               nvl(rw_crapdir.vlrenrda##7,0) + nvl(rw_crapdir.vlrenrda##8,0) +
                               nvl(rw_crapdir.vlrenrda##9,0) + nvl(rw_crapdir.vlrenrda##10,0) +
                               nvl(rw_crapdir.vlrenrda##11,0) + nvl(rw_crapdir.vlrenrda##12,0) +
                               nvl(rw_crapdir.vlrenrdc##1,0) + nvl(rw_crapdir.vlrenrdc##2,0) +
                               nvl(rw_crapdir.vlrenrdc##3,0) + nvl(rw_crapdir.vlrenrdc##4,0) +
                               nvl(rw_crapdir.vlrenrdc##5,0) + nvl(rw_crapdir.vlrenrdc##6,0) +
                               nvl(rw_crapdir.vlrenrdc##7,0) + nvl(rw_crapdir.vlrenrdc##8,0) +
                               nvl(rw_crapdir.vlrenrdc##9,0) + nvl(rw_crapdir.vlrenrdc##10,0) +
                               nvl(rw_crapdir.vlrenrdc##11,0) + nvl(rw_crapdir.vlrenrdc##12,0) +
                               nvl(rw_crapdir.vlrenrpp,0) + nvl(rw_crapdir.vlabonpp,0) + nvl(rw_crapdir.vlabonrd,0) +
                               nvl(rw_crapdir.vlabiopp,0) + nvl(rw_crapdir.vlabiord,0) - 
                               nvl(rw_crapdir.vlirabap##1,0)  - nvl(rw_crapdir.vlirabap##2,0) -
                               nvl(rw_crapdir.vlirabap##3,0)  - nvl(rw_crapdir.vlirabap##4,0) -
                               nvl(rw_crapdir.vlirabap##5,0)  - nvl(rw_crapdir.vlirabap##6,0) -
                               nvl(rw_crapdir.vlirabap##7,0)  - nvl(rw_crapdir.vlirabap##8,0) -
                               nvl(rw_crapdir.vlirabap##9,0)  - nvl(rw_crapdir.vlirabap##10,0) -
                               nvl(rw_crapdir.vlirabap##11,0) - nvl(rw_crapdir.vlirabap##12,0) -
                               nvl(rw_crapdir.vlirrdca##1,0)  - nvl(rw_crapdir.vlirrdca##2,0) -
                               nvl(rw_crapdir.vlirrdca##3,0)  - nvl(rw_crapdir.vlirrdca##4,0) -
                               nvl(rw_crapdir.vlirrdca##5,0)  - nvl(rw_crapdir.vlirrdca##6,0) -
                               nvl(rw_crapdir.vlirrdca##7,0)  - nvl(rw_crapdir.vlirrdca##8,0) -
                               nvl(rw_crapdir.vlirrdca##9,0)  - nvl(rw_crapdir.vlirrdca##10,0) -
                               nvl(rw_crapdir.vlirrdca##11,0) - nvl(rw_crapdir.vlirrdca##12,0) -
                               nvl(rw_crapdir.vlirfrdc##1,0) - nvl(rw_crapdir.vlirfrdc##2,0) -
                               nvl(rw_crapdir.vlirfrdc##3,0) - nvl(rw_crapdir.vlirfrdc##4,0) -
                               nvl(rw_crapdir.vlirfrdc##5,0) - nvl(rw_crapdir.vlirfrdc##6,0) -
                               nvl(rw_crapdir.vlirfrdc##7,0) - nvl(rw_crapdir.vlirfrdc##8,0) -
                               nvl(rw_crapdir.vlirfrdc##9,0) - nvl(rw_crapdir.vlirfrdc##10,0) -
                               nvl(rw_crapdir.vlirfrdc##11,0) - nvl(rw_crapdir.vlirfrdc##12,0) -
                               nvl(rw_crapdir.vlrirrpp##1,0)  - nvl(rw_crapdir.vlrirrpp##2,0) -
                               nvl(rw_crapdir.vlrirrpp##3,0)  - nvl(rw_crapdir.vlrirrpp##4,0) -
                               nvl(rw_crapdir.vlrirrpp##5,0)  - nvl(rw_crapdir.vlrirrpp##6,0) -
                               nvl(rw_crapdir.vlrirrpp##7,0)  - nvl(rw_crapdir.vlrirrpp##8,0) -
                               nvl(rw_crapdir.vlrirrpp##9,0)  - nvl(rw_crapdir.vlrirrpp##10,0) -
                               nvl(rw_crapdir.vlrirrpp##11,0) - nvl(rw_crapdir.vlrirrpp##12,0) -
                               nvl(rw_crapdir.vlirajus##1,0)  - nvl(rw_crapdir.vlirajus##2,0) -
                               nvl(rw_crapdir.vlirajus##3,0)  - nvl(rw_crapdir.vlirajus##4,0) -
                               nvl(rw_crapdir.vlirajus##5,0)  - nvl(rw_crapdir.vlirajus##6,0) -
                               nvl(rw_crapdir.vlirajus##7,0)  - nvl(rw_crapdir.vlirajus##8,0) -
                               nvl(rw_crapdir.vlirajus##9,0)  - nvl(rw_crapdir.vlirajus##10,0) -
                               nvl(rw_crapdir.vlirajus##11,0) - nvl(rw_crapdir.vlirajus##12,0);
                --Popular os valores de cada Mes
                FOR idx IN 1..vr_nrmesref LOOP
                  --Nome Mes Referencia
                  vr_nmmesref:= cxon0000.vr_tab_mes(idx);
                  --Codigo Retencao
                  vr_cdretenc:= 3426;
                  --Descricao Retencao
                  vr_dsretenc:= vr_dsre3426;
                  --Valores do Rendimento e IR
                  CASE idx 
                    WHEN 1 THEN
                      vr_vlrentot:= rw_crapdir.vlrentot##1;
                      vr_vlirfont:= rw_crapdir.vlirfont##1;
                    WHEN 2 THEN
                      vr_vlrentot:= rw_crapdir.vlrentot##2;
                      vr_vlirfont:= rw_crapdir.vlirfont##2;
                    WHEN 3 THEN
                      vr_vlrentot:= rw_crapdir.vlrentot##3;
                      vr_vlirfont:= rw_crapdir.vlirfont##3;
                    WHEN 4 THEN
                      vr_vlrentot:= rw_crapdir.vlrentot##4;
                      vr_vlirfont:= rw_crapdir.vlirfont##4;
                    WHEN 5 THEN
                      vr_vlrentot:= rw_crapdir.vlrentot##5;
                      vr_vlirfont:= rw_crapdir.vlirfont##5;
                    WHEN 6 THEN
                      vr_vlrentot:= rw_crapdir.vlrentot##6;
                      vr_vlirfont:= rw_crapdir.vlirfont##6;
                    WHEN 7 THEN
                      vr_vlrentot:= rw_crapdir.vlrentot##7;
                      vr_vlirfont:= rw_crapdir.vlirfont##7;
                    WHEN 8 THEN
                      vr_vlrentot:= rw_crapdir.vlrentot##8;
                      vr_vlirfont:= rw_crapdir.vlirfont##8;
                    WHEN 9 THEN
                      vr_vlrentot:= rw_crapdir.vlrentot##9;
                      vr_vlirfont:= rw_crapdir.vlirfont##9;
                    WHEN 10 THEN
                      vr_vlrentot:= rw_crapdir.vlrentot##10;
                      vr_vlirfont:= rw_crapdir.vlirfont##10;
                    WHEN 11 THEN
                      vr_vlrentot:= rw_crapdir.vlrentot##11;
                      vr_vlirfont:= rw_crapdir.vlirfont##11;
                    WHEN 12 THEN
                      vr_vlrentot:= rw_crapdir.vlrentot##12;
                      vr_vlirfont:= rw_crapdir.vlirfont##12;
                  END CASE;  
                  --Se possuir Valor retido fonte 
                  IF vr_vlirfont > 0 THEN 
                    --Buscar Proximo Indice Retencao
                    vr_index_retenc:= pr_tab_retencao_ir.COUNT + 1;
                    --Inserir Informacoes tabela retencao
                    pr_tab_retencao_ir(vr_index_retenc).nmmesref:= vr_nmmesref;
                    pr_tab_retencao_ir(vr_index_retenc).cdretenc:= vr_cdretenc;
                    pr_tab_retencao_ir(vr_index_retenc).dsretenc:= vr_dsretenc;
                    pr_tab_retencao_ir(vr_index_retenc).vlrentot:= vr_vlrentot;
                    --Ano referencia maior ou igual 2004
                    IF pr_nranoref >= 2004 THEN
                      pr_tab_retencao_ir(vr_index_retenc).vlirfont:= vr_vlirfont;
                    ELSE
                      pr_tab_retencao_ir(vr_index_retenc).vlirfont:= 0;                 
                    END IF;                                       
                  END IF;

                  --Zerar Valor IR retido Fonte
                  vr_vlirfont:= 0; 
                  --Percorrer Lancamentos de Cota
                  FOR rw_craplct IN cr_craplct2 (pr_cdcooper => pr_cdcooper       
                                                ,pr_nrdconta => rw_crapass.nrdconta   
                                                ,pr_nranoref => pr_nranoref
                                                ,pr_nrmesref => idx) LOOP
                    --Historico Rendimento
                    IF rw_craplct.cdhistor = 926 THEN
                      vr_vlrentot:= rw_craplct.vllanmto;
                    ELSE
                      vr_vlirfont:= rw_craplct.vllanmto;
                    END IF;  
                  END LOOP; --cr_craplct 

                  --Se possuir Valor retido fonte
                  IF vr_vlirfont > 0 THEN

                    IF pr_nranoref >= 2016 THEN
                    --Montar Código e Descricao da Retencao
                      vr_cdretenc:= 3277;
                      vr_dsretenc:= vr_dsre3277;
                    ELSE
                    --Montar Código e Descricao da Retencao
                    vr_cdretenc:= 5706;
                    vr_dsretenc:= vr_dsre5706; 
                    END IF;

                    --Buscar Proximo Indice Retencao
                    vr_index_retenc:= pr_tab_retencao_ir.COUNT + 1;
                    --Inserir Informacoes tabela retencao
                    pr_tab_retencao_ir(vr_index_retenc).nmmesref:= vr_nmmesref;
                    pr_tab_retencao_ir(vr_index_retenc).cdretenc:= vr_cdretenc;
                    pr_tab_retencao_ir(vr_index_retenc).dsretenc:= vr_dsretenc;
                    pr_tab_retencao_ir(vr_index_retenc).vlrentot:= vr_vlrentot;

                    --Ano referencia maior ou igual 2004
                    IF pr_nranoref >= 2004 THEN
                      pr_tab_retencao_ir(vr_index_retenc).vlirfont:= vr_vlirfont;
                    ELSE
                      pr_tab_retencao_ir(vr_index_retenc).vlirfont:= 0;                 
                    END IF;     
                  END IF;  
                END LOOP; --FOR 

                --Carregar Demais variaveis
                vr_sol_dtrefere:= TO_DATE('1231'||to_char(rw_crapdir.dtmvtolt,'YYYY'));
                vr_sol_vlsdccdp:= rw_crapdir.vlsdccdp;
                vr_sol_vlsddvem:= rw_crapdir.vlsddvem;
                vr_sol_vlttccap:= rw_crapdir.vlttccap;
                vr_sol_vlsdapli:= rw_crapdir.vlsdapli + rw_crapdir.vlsdrdpp;
                vr_cdacesso:= 'IRENDA'||to_char(rw_crapdir.dtmvtolt,'YYYY');
                vr_rel_vlrencot:= rw_crapdir.vlrencot;
                vr_rel_vlirfcot:= rw_crapdir.vlirfcot;
                --Selecionar Saldo Conta Investimento
                OPEN cr_crapsli (pr_cdcooper => pr_cdcooper
                                ,pr_nrdconta => rw_crapass.nrdconta
                                ,pr_dtrefere => to_date('3112'||pr_nranoref,'DDMMYYYY'));
                FETCH cr_crapsli INTO rw_crapsli;
                --Se encontrou
                IF cr_crapsli%FOUND THEN
                  --Acumular Saldo Investimento
                  vr_sol_vlsdccdp:= nvl(vr_sol_vlsdccdp,0) + rw_crapsli.vlsddisp;
                END IF;                  
                --Fechar Cursor
                CLOSE cr_crapsli;
                pr_tab_extrato_ir(vr_index).vlsdccd2:= vr_sol_vlsdccdp;
                pr_tab_extrato_ir(vr_index).vlttcca2:= vr_sol_vlttccap;
                pr_tab_extrato_ir(vr_index).vlsddve2:= vr_sol_vlsddvem;
                pr_tab_extrato_ir(vr_index).vlsdapl2:= vr_sol_vlsdapli;
                pr_tab_extrato_ir(vr_index).vlrencot:= vr_rel_vlrencot;
                pr_tab_extrato_ir(vr_index).vlirfcot:= vr_rel_vlirfcot;               
              END IF;  /* se for ano vigente */ 
              --Popular demais informacoes no extrato 
              pr_tab_extrato_ir(vr_index).dtrefer2:= vr_sol_dtrefere;
              pr_tab_extrato_ir(vr_index).dtrefer1:= vr_ant_dtrefere;
              pr_tab_extrato_ir(vr_index).dsanoant:= vr_lit_dsanoant;
              pr_tab_extrato_ir(vr_index).vlrendim:= vr_rel_vlrendim;
              --Selecionar Dados Imposto Renda
              OPEN cr_crapdir (pr_cdcooper => pr_cdcooper
                              ,pr_nrdconta => rw_crapass.nrdconta
                              ,pr_nranoref => pr_nranoref-1);
              FETCH cr_crapdir INTO rw_crapdir;
              --Se encontrou
              IF cr_crapdir%FOUND THEN
                --Popular Valores Ano Anterior
                vr_ant_vlsdccdp:= rw_crapdir.vlsdccdp;
                vr_ant_vlsddvem:= rw_crapdir.vlsddvem;
                vr_ant_vlttccap:= rw_crapdir.vlttccap;
                vr_ant_vlsdapli:= rw_crapdir.vlsdapli + rw_crapdir.vlsdrdpp;
                vr_flganter:= TRUE;
              END IF;                  
              --Fechar Cursor
              CLOSE cr_crapdir;
              --Selecionar Saldo Conta Investimento
              OPEN cr_crapsli (pr_cdcooper => pr_cdcooper
                              ,pr_nrdconta => rw_crapass.nrdconta
                              ,pr_dtrefere => to_date('3112'||pr_nranoref-1,'DDMMYYYY'));
              FETCH cr_crapsli INTO rw_crapsli;
              --Se encontrou
              IF cr_crapsli%FOUND THEN
                --Acumular Saldo Investimento
                vr_ant_vlsdccdp:= nvl(vr_ant_vlsdccdp,0) + rw_crapsli.vlsddisp;
              END IF;                  
              --Fechar Cursor
              CLOSE cr_crapsli;
              --Se Possuir dados ano anterior
              IF vr_flganter THEN
                pr_tab_extrato_ir(vr_index).flganter:= vr_flganter;
                pr_tab_extrato_ir(vr_index).vlsdccd1:= vr_ant_vlsdccdp;
                pr_tab_extrato_ir(vr_index).vlsddve1:= vr_ant_vlsddvem;
                pr_tab_extrato_ir(vr_index).vlttcca1:= vr_ant_vlttccap;
                pr_tab_extrato_ir(vr_index).vlsdapl1:= vr_ant_vlsdapli;
              END IF;  
            END IF; --pr_tpextrat = 2   

          ELSE /* IF  par_nranoref > 1994  */

            vr_nmcidade:= rw_crapcop.nmcidade;
            vr_rel_dscooper:= rw_crapcop.nmextcop || ' - '|| gene0002.fn_mask_cpf_cnpj(rw_crapcop.nrdocnpj,2);
            vr_rel_dsendcop:= rw_crapcop.dsendcop || ', '||to_char(rw_crapcop.nrendcop,'fm99g990')|| 
                              ' - CEP '||gene0002.fn_mask_cep(rw_crapcop.nrcepend)||' - '|| 
                              vr_nmcidade || ' - '||rw_crapcop.cdufdcop;
            vr_rel_dstelcop:= 'TELEFONE: '|| rw_crapcop.nrtelvoz || ' - '||'FAX: '|| rw_crapcop.nrtelfax;
            --Agencia
            IF NOT vr_crapage THEN
              vr_rel_dsagenci:= rw_crapass.cdagenci||' - Nao cadastrada!';
            ELSE
              vr_rel_dsagenci:= rw_crapage.nmresage;
            END IF; 
            --Inicializar Variaveis
            vr_mfx_vlsddvem:= 0;
            vr_mfx_vlsdccdp:= 0;
            vr_mfx_vlsdapli:= 0;
            vr_mfx_vlttccap:= 0;
            vr_rel_qtjaicmf:= 0;
            vr_rel_vlrenapl:= 0;
            vr_regexis1:= FALSE;
            --Selecionar Dados Imposto Renda
            OPEN cr_crapdir (pr_cdcooper => pr_cdcooper
                            ,pr_nrdconta => rw_crapass.nrdconta
                            ,pr_nranoref => pr_nranoref);
            FETCH cr_crapdir INTO rw_crapdir;
            --Se nao encontrou
            IF cr_crapdir%NOTFOUND THEN
              --Fechar Cursor
              CLOSE cr_crapdir;
              --Montar mensagem
              vr_dscritic:= 'Conta/dv: '||pr_nrdconta||' - Nao ha dados para imposto de renda de '||pr_nranoref||'.';
              --Sair 
              RAISE vr_exc_saida;
            END IF;                  
            --Fechar Cursor
            CLOSE cr_crapdir;
            --Associar valores nas variaveis
            vr_cdacesso:= 'IRENDA'||to_char(rw_crapdir.dtmvtolt,'YYYY');
            --Encontrar dados acesso da tabela generica
            vr_dstextab:= TABE0001.fn_busca_dstextab(pr_cdcooper => pr_cdcooper
                                                    ,pr_nmsistem => 'CRED'
                                                    ,pr_tptabela => 'GENERI'
                                                    ,pr_cdempres => 0
                                                    ,pr_cdacesso => vr_cdacesso
                                                    ,pr_tpregist => 1);
            --Se nao encontrou parametro
            IF vr_dstextab IS NULL THEN
               -- Montar mensagem de critica
               vr_cdcritic:= 457;
              --Levantar Excecao
              RAISE vr_exc_saida;
            ELSE  
              --Valor da moeda
              vr_vlmoefi1:= GENE0002.fn_char_para_number(SUBSTR(vr_dstextab,22,15));
              --Valor dos Juros
              vr_rel_vldjuros:= GENE0002.fn_char_para_number(SUBSTR(vr_dstextab,38,15));                     
            END IF; 
            --Calcular demais campos
            vr_mfx_vlsddve1:= rw_crapdir.vlsddvem / vr_vlmoefi1;
            vr_mfx_vlsdccd1:= rw_crapdir.vlsdccdp / vr_vlmoefi1;
            vr_mfx_vlsdapl1:= rw_crapdir.vlsdapli / vr_vlmoefi1;
            vr_mfx_vlttcca1:= rw_crapdir.vlttccap / vr_vlmoefi1;
            vr_rel_vldjuros:= rw_crapdir.qtjaicmf * vr_rel_vldjuros;
            vr_rel_vlrenap1:= rw_crapdir.qtreamfx;
            vr_rel_qtjaicm1:= vr_rel_vldjuros / vr_vlmoefi1;
            vr_mfx_dtmvtol1:= rw_crapdir.dtmvtolt;
            vr_regexist:= TRUE;
            --Se existe registro
            IF vr_regexist THEN 
              --Selecionar Dados Imposto Renda ano Anterior
              OPEN cr_crapdir (pr_cdcooper => pr_cdcooper
                              ,pr_nrdconta => rw_crapass.nrdconta
                              ,pr_nranoref => pr_nranoref-1);
              FETCH cr_crapdir INTO rw_crapdir;
              --Se encontrou
              IF cr_crapdir%FOUND THEN
                --Fechar Cursor
                CLOSE cr_crapdir;
                --Codigo acesso
                vr_cdacesso:= 'IRENDA'||to_char(rw_crapdir.dtmvtolt,'YYYY');
                --Encontrar dados acesso da tabela generica
                vr_dstextab:= TABE0001.fn_busca_dstextab(pr_cdcooper => pr_cdcooper
                                                        ,pr_nmsistem => 'CRED'
                                                        ,pr_tptabela => 'GENERI'
                                                        ,pr_cdempres => 0
                                                        ,pr_cdacesso => vr_cdacesso
                                                        ,pr_tpregist => 1);
                --Se encontrou parametro
                IF vr_dstextab IS NOT NULL THEN
                  --Valor da moeda
                  vr_vlmoefix:= GENE0002.fn_char_para_number(SUBSTR(vr_dstextab,22,15));
                  --Valor dos Juros
                  vr_rel_vldjuros:= GENE0002.fn_char_para_number(SUBSTR(vr_dstextab,38,15));                     
                  --Calcular demais campos
                  vr_mfx_vlsddvem:= rw_crapdir.vlsddvem / vr_vlmoefix;
                  vr_mfx_vlsdccdp:= rw_crapdir.vlsdccdp / vr_vlmoefix;
                  vr_mfx_vlsdapli:= rw_crapdir.vlsdapli / vr_vlmoefix;
                  vr_mfx_vlttccap:= rw_crapdir.vlttccap / vr_vlmoefix;
                  vr_rel_vldjuros:= rw_crapdir.qtjaicmf * vr_rel_vldjuros;
                  vr_rel_vlrenapl:= rw_crapdir.qtreamfx;
                  vr_rel_qtjaicmf:= vr_rel_vldjuros / vr_vlmoefix;
                  vr_mfx_dtmvtolt:= rw_crapdir.dtmvtolt;
                  vr_regexis1:= TRUE; 
                END IF;
              ELSE  
                --Fechar Cursor
                CLOSE cr_crapdir;  
              END IF;
              --Proximo Indice para tabela memoria
              vr_index:= pr_tab_extrato_ir.COUNT+1;
              --Popular Colunas da tabela memoria
              pr_tab_extrato_ir(vr_index).nmcidade:= vr_nmcidade;
              pr_tab_extrato_ir(vr_index).nrdconta:= rw_crapass.nrdconta;
              pr_tab_extrato_ir(vr_index).nmprimtl:= rw_crapass.nmprimtl;
              pr_tab_extrato_ir(vr_index).regexis1:= vr_regexis1;
              pr_tab_extrato_ir(vr_index).dsagenci:= vr_rel_dsagenci;
              pr_tab_extrato_ir(vr_index).dtmvtolt:= vr_mfx_dtmvtolt;
              pr_tab_extrato_ir(vr_index).dtmvtol1:= vr_mfx_dtmvtol1;
              pr_tab_extrato_ir(vr_index).vlsddvem:= vr_mfx_vlsddvem;
              pr_tab_extrato_ir(vr_index).vlsddve1:= vr_mfx_vlsddve1;
              pr_tab_extrato_ir(vr_index).vlsdccdp:= vr_mfx_vlsdccdp;
              pr_tab_extrato_ir(vr_index).vlsdccd1:= vr_mfx_vlsdccd1;
              pr_tab_extrato_ir(vr_index).vlsdapli:= vr_mfx_vlsdapli;
              pr_tab_extrato_ir(vr_index).vlsdapl1:= vr_mfx_vlsdapl1;
              pr_tab_extrato_ir(vr_index).vlttccap:= vr_mfx_vlttccap;
              pr_tab_extrato_ir(vr_index).vlttcca1:= vr_mfx_vlttcca1;
              pr_tab_extrato_ir(vr_index).qtjaicmf:= vr_rel_qtjaicmf;
              pr_tab_extrato_ir(vr_index).qtjaicm1:= vr_rel_qtjaicm1;
              pr_tab_extrato_ir(vr_index).vlrenap1:= vr_rel_vlrenap1;
              pr_tab_extrato_ir(vr_index).vlmoefix:= vr_vlmoefix;
              pr_tab_extrato_ir(vr_index).vlmoefi1:= vr_vlmoefi1;
              pr_tab_extrato_ir(vr_index).dscooper:= vr_rel_dscooper;
              pr_tab_extrato_ir(vr_index).dsendcop:= vr_rel_dsendcop;
              pr_tab_extrato_ir(vr_index).dstelcop:= vr_rel_dstelcop;
              pr_tab_extrato_ir(vr_index).vlrenapl:= vr_rel_vlrenapl;
            END IF;--vr_regexist
          END IF; 
          --Retorno OK
          pr_des_reto:= 'OK'; 
        EXCEPTION
          WHEN vr_exc_saida THEN 
            NULL;  
        END;  
        --Se ocorreu erro        
        IF vr_dscritic IS NOT NULL OR nvl(vr_cdcritic,0) <> 0 THEN
          -- Chamar rotina de gravação de erro
          gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                               ,pr_cdagenci => pr_cdagenci
                               ,pr_nrdcaixa => pr_nrdcaixa
                               ,pr_nrsequen => 1 --> Fixo
                               ,pr_cdcritic => vr_cdcritic
                               ,pr_dscritic => vr_dscritic
                               ,pr_tab_erro => pr_tab_erro);
        END IF;  
        gene0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);   
      EXCEPTION
        WHEN vr_exc_erro THEN
          -- Retorno não OK
          pr_des_reto := 'NOK';
          -- Chamar rotina de gravação de erro
          gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                               ,pr_cdagenci => pr_cdagenci
                               ,pr_nrdcaixa => pr_nrdcaixa
                               ,pr_nrsequen => 1 --> Fixo
                               ,pr_cdcritic => 0 --> Critica 0
                               ,pr_dscritic => vr_dscritic
                               ,pr_tab_erro => pr_tab_erro);
        WHEN OTHERS THEN
          cecred.pc_internal_exception;
          -- Retorno não OK
          pr_des_reto := 'NOK';
          -- Chamar rotina de gravação de erro
          vr_dscritic := 'Erro na pc_consulta_imposto_renda --> '|| sqlerrm;
          gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                               ,pr_cdagenci => pr_cdagenci
                               ,pr_nrdcaixa => pr_nrdcaixa
                               ,pr_nrsequen => 1 --> Fixo
                               ,pr_cdcritic => 0 --> Critica 0
                               ,pr_dscritic => vr_dscritic
                               ,pr_tab_erro => pr_tab_erro);
      END;
    END pc_consulta_imposto_renda;  
      
 PROCEDURE pc_consulta_ir_pj_trim (pr_cdcooper IN crapcop.cdcooper%TYPE       --Codigo Cooperativa
                                  ,pr_cdagenci IN crapass.cdagenci%TYPE       --Codigo Agencia
                                  ,pr_nrdcaixa IN INTEGER                     --Numero do Caixa
                                  ,pr_cdoperad IN VARCHAR2                    --Codigo Operador
                                  ,pr_nmdatela IN VARCHAR2                    --Nome da Tela
                                  ,pr_idorigem IN INTEGER                     --Origem dos Dados
                                  ,pr_dtmvtolt IN crapdat.dtmvtolt%TYPE       --Data Movimento
                                  ,pr_nrdconta IN crapass.nrdconta%TYPE       --Numero da Conta do Associado
                                  ,pr_nranoref IN INTEGER                     --Ano de Referencia
                                  ,pr_tpextrat IN INTEGER                     --Tipo de Extrato
                                  ,pr_nrperiod IN INTEGER                     -- Trimestre de Referencia
                                  ,pr_tab_extrato_ir  OUT typ_tab_extrato_ir  --Extrato IR
                                  ,pr_tab_retencao_ir OUT typ_tab_retencao_ir --Retencoes do IR
                                  ,pr_tab_erro OUT GENE0001.typ_tab_erro      --Tabela de Erros
                                  ,pr_des_reto OUT VARCHAR2 ) IS              --Descricao Erro
  BEGIN
  /*---------------------------------------------------------------------------------------------------------------
  
    Programa : pc_consulta_ir_pj_trim                Antigo:
    Sistema  :
    Sigla    : CRED
    Autor    : Guilherme/SUPERO
    Data     : Julho/2016                           Ultima atualizacao: 26/04/2017
  
   Dados referentes ao programa:
  
   Frequencia: -----
   Objetivo   : Procedure para consultar informacoes do Imposto de Renda
                Baseada na pc_consulta_imposto_renda
   Alterações :
  
                17/08/2016 - M360 - Inclusão de novas buscas de Sobras ao Cooperado (Marcos-Supero)
                23/02/2017 - SD618188 - Inclusao do formato na conversao de data para aplicacoes (Marcos-Supero)

				26/04/2017 - Ajuste para retirar o uso de campos removidos da tabela
			                 crapass, crapttl, crapjur 
							 (Adriano - P339).

  ---------------------------------------------------------------------------------------------------------------*/
  DECLARE
    -- Busca dos dados da cooperativa
    CURSOR cr_crapcop (pr_cdcooper IN crapcop.cdcooper%TYPE) IS
      SELECT crapcop.nmrescop
            ,crapcop.nmextcop
            ,crapcop.nrdocnpj
            ,crapcop.dsendcop
            ,crapcop.nrendcop
            ,crapcop.nmbairro
            ,crapcop.nrcepend
            ,crapcop.nmcidade
            ,crapcop.cdufdcop
            ,crapcop.nrtelvoz
            ,crapcop.cdcooper
            ,crapcop.cdagectl
            ,crapcop.nrtelfax
      FROM crapcop crapcop
      WHERE crapcop.cdcooper = pr_cdcooper;
    rw_crapcop cr_crapcop%ROWTYPE;

    -- Busca dos dados do associado
    CURSOR cr_crapass(pr_cdcooper IN crapcop.cdcooper%TYPE
                     ,pr_nrdconta IN crapass.nrdconta%TYPE) IS
      SELECT crapass.nrdconta
            ,crapass.nmprimtl
            ,crapass.vllimcre
            ,crapass.nrcpfcgc
            ,crapass.inpessoa
            ,crapass.cdcooper
            ,crapass.cdagenci
            ,crapass.nrctainv
      FROM crapass crapass
      WHERE crapass.cdcooper = pr_cdcooper
      AND   crapass.nrdconta = pr_nrdconta;
    rw_crapass cr_crapass%ROWTYPE;

    -- Cursor para busca a agencia
    CURSOR cr_crapage(pr_cdcooper IN crapage.cdcooper%TYPE
                     ,pr_cdagenci IN crapage.cdagenci%TYPE) IS
      SELECT crapage.nmcidade
            ,crapage.cdagenci
            ,crapage.nmresage
            ,crapage.qtddlslf
       FROM crapage crapage
      WHERE crapage.cdcooper = pr_cdcooper
        AND crapage.cdagenci = pr_cdagenci;
    rw_crapage cr_crapage%ROWTYPE;

    --Selecionar Dados Imposto Renda
    CURSOR cr_crapdir (pr_cdcooper IN crapdir.cdcooper%type
                      ,pr_nrdconta IN crapdir.nrdconta%type
                      ,pr_nranoref IN INTEGER) IS
      SELECT crapdir.*
            ,nvl(vlirrdca##1,0) + nvl(vlrirrpp##1,0) + nvl(vlirabap##1,0) + nvl(vlirajus##1,0) + nvl(vlirfrdc##1,0) vlirfont##1
            ,nvl(vlirrdca##2,0) + nvl(vlrirrpp##2,0) + nvl(vlirabap##2,0) + nvl(vlirajus##2,0) + nvl(vlirfrdc##2,0) vlirfont##2
            ,nvl(vlirrdca##3,0) + nvl(vlrirrpp##3,0) + nvl(vlirabap##3,0) + nvl(vlirajus##3,0) + nvl(vlirfrdc##3,0) vlirfont##3
            ,nvl(vlirrdca##4,0) + nvl(vlrirrpp##4,0) + nvl(vlirabap##4,0) + nvl(vlirajus##4,0) + nvl(vlirfrdc##4,0) vlirfont##4
            ,nvl(vlirrdca##5,0) + nvl(vlrirrpp##5,0) + nvl(vlirabap##5,0) + nvl(vlirajus##5,0) + nvl(vlirfrdc##5,0) vlirfont##5
            ,nvl(vlirrdca##6,0) + nvl(vlrirrpp##6,0) + nvl(vlirabap##6,0) + nvl(vlirajus##6,0) + nvl(vlirfrdc##6,0) vlirfont##6
            ,nvl(vlirrdca##7,0) + nvl(vlrirrpp##7,0) + nvl(vlirabap##7,0) + nvl(vlirajus##7,0) + nvl(vlirfrdc##7,0) vlirfont##7
            ,nvl(vlirrdca##8,0) + nvl(vlrirrpp##8,0) + nvl(vlirabap##8,0) + nvl(vlirajus##8,0) + nvl(vlirfrdc##8,0) vlirfont##8
            ,nvl(vlirrdca##9,0) + nvl(vlrirrpp##9,0) + nvl(vlirabap##9,0) + nvl(vlirajus##9,0) + nvl(vlirfrdc##9,0) vlirfont##9
            ,nvl(vlirrdca##10,0) + nvl(vlrirrpp##10,0) + nvl(vlirabap##10,0) + nvl(vlirajus##10,0) + nvl(vlirfrdc##10,0) vlirfont##10
            ,nvl(vlirrdca##11,0) + nvl(vlrirrpp##11,0) + nvl(vlirabap##11,0) + nvl(vlirajus##11,0) + nvl(vlirfrdc##11,0) vlirfont##11
            ,nvl(vlirrdca##12,0) + nvl(vlrirrpp##12,0) + nvl(vlirabap##12,0) + nvl(vlirajus##12,0) + nvl(vlirfrdc##12,0) vlirfont##12
      FROM crapdir crapdir
      WHERE crapdir.cdcooper = pr_cdcooper
      AND   crapdir.nrdconta = pr_nrdconta
      AND   to_char(crapdir.dtmvtolt,'RRRR') = pr_nranoref
      order by cdcooper,nrdconta,dtmvtolt,progress_recid;
    rw_crapdir cr_crapdir%ROWTYPE;

    --Selecionar Saldo Conta Investimento
    CURSOR cr_crapsli (pr_cdcooper IN crapsli.cdcooper%type
                      ,pr_nrdconta IN crapsli.nrdconta%type
                      ,pr_dtrefere IN crapsli.dtrefere%type) IS
      SELECT x.*
        FROM (SELECT t.dtrefere
                   , t.vlsddisp
                   , MAX(dtrefere) OVER (PARTITION BY cdcooper, nrdconta, TRUNC(dtrefere, 'MM'))  MAX_mes
                FROM crapsli t
               WHERE t.cdcooper = pr_cdcooper
                 AND t.nrdconta = pr_nrdconta
                 AND t.dtrefere BETWEEN TRUNC(pr_dtrefere,'MM') AND LAST_DAY(pr_dtrefere)
                 AND pr_dtrefere <= SYSDATE
                ) x
       WHERE x.dtrefere = x.max_mes
       ORDER BY dtrefere;
    rw_crapsli cr_crapsli%ROWTYPE;

    --Selecionar Descricao da Retencao
    CURSOR cr_gnrdirf (pr_cdretenc IN gnrdirf.cdretenc%type) IS
      SELECT gnrdirf.cdretenc
            ,gnrdirf.dsretenc
      FROM  gnrdirf
      WHERE gnrdirf.cdretenc = pr_cdretenc;
    rw_gnrdirf cr_gnrdirf%ROWTYPE;

    -- Selecionar Credito Retorno de Sobras
    CURSOR cr_lct_sobras (pr_cdcooper IN craplct.cdcooper%type
                         ,pr_anorefer IN INTEGER
                         ,pr_mesrefer IN INTEGER
                         ,pr_cdagenci IN craplct.cdagenci%type
                         ,pr_cdbccxlt IN craplct.cdbccxlt%type
                         ,pr_nrdolote IN craplct.nrdolote%type
                         ,pr_nrdconta IN craplct.nrdconta%type) IS
      SELECT nvl(sum(lct.vllanmto),0) vllanmto
        FROM craplct lct
       WHERE lct.cdcooper = pr_cdcooper
         AND lct.dtmvtolt BETWEEN to_date('01/'||pr_mesrefer||'/'|| pr_anorefer,'dd/mm/rrrr')
         AND last_day(to_date('01/'||pr_mesrefer||'/'|| pr_anorefer,'dd/mm/rrrr'))
         AND lct.cdagenci = pr_cdagenci
         AND lct.cdbccxlt = pr_cdbccxlt
         AND lct.nrdolote = pr_nrdolote
         AND lct.nrdconta = pr_nrdconta
         AND lct.cdhistor IN (sobr0001.vr_cdhisopc_cot,sobr0001.vr_cdhisdpp_cot
                             ,sobr0001.vr_cdhisdpa_cot,sobr0001.vr_cdhistar_cot
                             ,sobr0001.vr_cdhisaut_cot,sobr0001.vr_cdhisdep_cot);
                             
    -- Selecionar Credito Retorno de Sobras em CC
    CURSOR cr_craplcm (pr_cdcooper IN craplcm.cdcooper%type
                      ,pr_anorefer IN INTEGER
                      ,pr_mesrefer IN INTEGER
                      ,pr_cdagenci IN craplcm.cdagenci%type
                      ,pr_cdbccxlt IN craplcm.cdbccxlt%type
                      ,pr_nrdolote IN craplcm.nrdolote%type
                      ,pr_nrdconta IN craplcm.nrdconta%type) IS
      SELECT nvl(sum(craplcm.vllanmto),0) vllanmto
      FROM craplcm craplcm
      WHERE craplcm.cdcooper = pr_cdcooper
      AND   craplcm.dtmvtolt BETWEEN to_date('01/'||pr_mesrefer||'/'|| pr_anorefer,'dd/mm/rrrr')
      AND   last_day(to_date('01/'||pr_mesrefer||'/'|| pr_anorefer,'dd/mm/rrrr'))
      AND   craplcm.cdagenci = pr_cdagenci
      AND   craplcm.cdbccxlt = pr_cdbccxlt
      AND   craplcm.nrdolote = pr_nrdolote
      AND   craplcm.nrdconta = pr_nrdconta
      AND   craplcm.cdhistor IN (sobr0001.vr_cdhisopc_cta,sobr0001.vr_cdhisdpp_cta
                                ,sobr0001.vr_cdhisdpa_cta,sobr0001.vr_cdhistar_cta
                                ,sobr0001.vr_cdhisaut_cta,sobr0001.vr_cdhisdep_cta);

    -- Buscar valores do Mês
    CURSOR cr_sda_mes (pr_cdcooper IN crapcot.cdcooper%type
                      ,pr_nrdconta IN crapcot.nrdconta%TYPE
                      ,pr_dtrefere IN DATE) IS
    SELECT x.*
      FROM (SELECT t.dtmvtolt
                 , t.vlsddisp
                 , t.vlsdcota
                 , t.vlsdrdca
                 , t.Vlsdeved
                 , t.vlsdrdpp
                 , MAX(dtmvtolt) OVER (PARTITION BY cdcooper, nrdconta, TRUNC(dtmvtolt, 'MM'))  max_mes
              FROM crapsda t
             WHERE t.cdcooper = pr_cdcooper
               AND t.nrdconta = pr_nrdconta
               AND t.dtmvtolt BETWEEN TRUNC(pr_dtrefere,'MM') AND last_day(pr_dtrefere)
               AND pr_dtrefere <= SYSDATE
              ) x
     WHERE x.dtmvtolt = x.max_mes
     ORDER BY dtmvtolt;
    rw_sda_mes cr_sda_mes%ROWTYPE;


   -- Selecionar informações referentes a APLICAÇÕES
   CURSOR cr_aplica (pr_cdcooper IN craplap.cdcooper%type
                    ,pr_nrdconta IN craplap.nrdconta%type
                    ,pr_nranoref IN INTEGER
                    ,pr_nrmesref IN INTEGER) IS
     SELECT lap.nrdconta
            ,nvl(SUM(decode(lap.cdhistor,
                            528, lap.vllanmto,                     -- 528  APLIC.RDCPOS  C
                            532, lap.vllanmto,                     -- 532  RENDIMENTO  C
                            533, lap.vllanmto * -1,                -- 533  IRRF  D
                            534, lap.vllanmto * -1)), 0) vllanmto  -- 534  RESG.RDC  D
        FROM craplap lap
       WHERE lap.cdcooper = pr_cdcooper
         AND lap.nrdconta = pr_nrdconta
         AND lap.dtmvtolt <= last_day(to_date('01/'|| pr_nrmesref ||'/' || pr_nranoref,'dd/mm/rrrr'))
       GROUP BY lap.nrdconta;
    rw_aplica  cr_aplica%ROWTYPE;


    --Selecionar Informacoes Referentes a Cotas e Recursos
    CURSOR cr_cot_mes (pr_cdcooper IN crapcot.cdcooper%type
                      ,pr_nrdconta IN crapcot.nrdconta%type) IS
      SELECT crapcot.vlrentot##1
            ,crapcot.vlrentot##2
            ,crapcot.vlrentot##3
            ,crapcot.vlrentot##4
            ,crapcot.vlrentot##5
            ,crapcot.vlrentot##6
            ,crapcot.vlrentot##7
            ,crapcot.vlrentot##8
            ,crapcot.vlrentot##9
            ,crapcot.vlrentot##10
            ,crapcot.vlrentot##11
            ,crapcot.vlrentot##12
            ,nvl(vlirrdca##1,0) + nvl(vlrirrpp##1,0) + nvl(vlirabap##1,0) + nvl(vlirajus##1,0) + nvl(vlirfrdc##1,0) vlirfont##1
            ,nvl(vlirrdca##2,0) + nvl(vlrirrpp##2,0) + nvl(vlirabap##2,0) + nvl(vlirajus##2,0) + nvl(vlirfrdc##2,0) vlirfont##2
            ,nvl(vlirrdca##3,0) + nvl(vlrirrpp##3,0) + nvl(vlirabap##3,0) + nvl(vlirajus##3,0) + nvl(vlirfrdc##3,0) vlirfont##3
            ,nvl(vlirrdca##4,0) + nvl(vlrirrpp##4,0) + nvl(vlirabap##4,0) + nvl(vlirajus##4,0) + nvl(vlirfrdc##4,0) vlirfont##4
            ,nvl(vlirrdca##5,0) + nvl(vlrirrpp##5,0) + nvl(vlirabap##5,0) + nvl(vlirajus##5,0) + nvl(vlirfrdc##5,0) vlirfont##5
            ,nvl(vlirrdca##6,0) + nvl(vlrirrpp##6,0) + nvl(vlirabap##6,0) + nvl(vlirajus##6,0) + nvl(vlirfrdc##6,0) vlirfont##6
            ,nvl(vlirrdca##7,0) + nvl(vlrirrpp##7,0) + nvl(vlirabap##7,0) + nvl(vlirajus##7,0) + nvl(vlirfrdc##7,0) vlirfont##7
            ,nvl(vlirrdca##8,0) + nvl(vlrirrpp##8,0) + nvl(vlirabap##8,0) + nvl(vlirajus##8,0) + nvl(vlirfrdc##8,0) vlirfont##8
            ,nvl(vlirrdca##9,0) + nvl(vlrirrpp##9,0) + nvl(vlirabap##9,0) + nvl(vlirajus##9,0) + nvl(vlirfrdc##9,0) vlirfont##9
            ,nvl(vlirrdca##10,0) + nvl(vlrirrpp##10,0) + nvl(vlirabap##10,0) + nvl(vlirajus##10,0) + nvl(vlirfrdc##10,0) vlirfont##10
            ,nvl(vlirrdca##11,0) + nvl(vlrirrpp##11,0) + nvl(vlirabap##11,0) + nvl(vlirajus##11,0) + nvl(vlirfrdc##11,0) vlirfont##11
            ,nvl(vlirrdca##12,0) + nvl(vlrirrpp##12,0) + nvl(vlirabap##12,0) + nvl(vlirajus##12,0) + nvl(vlirfrdc##12,0) vlirfont##12
      FROM crapcot crapcot
      WHERE crapcot.cdcooper = pr_cdcooper
      AND   crapcot.nrdconta = pr_nrdconta;
    rw_cot_mes cr_cot_mes%ROWTYPE;
    --Selecionar Lancamentos de Cota Capital
    CURSOR cr_craplct2 (pr_cdcooper IN craplct.cdcooper%type
                       ,pr_nrdconta IN craplct.nrdconta%type
                       ,pr_nranoref IN INTEGER
                       ,pr_nrmesref IN INTEGER) IS
      SELECT  craplct.cdhistor
             ,craplct.vllanmto
        FROM craplct craplct
       WHERE craplct.cdcooper = pr_cdcooper
         AND craplct.nrdconta = pr_nrdconta
         AND craplct.dtmvtolt BETWEEN to_date('01/'||pr_nrmesref||'/'|| pr_nranoref,'dd/mm/rrrr')
            AND last_day(to_date('01/'||pr_nrmesref||'/'|| pr_nranoref,'dd/mm/rrrr'))
         AND craplct.cdhistor IN (sobr0001.vr_cdhisjur_cot,sobr0001.vr_cdhisirr_cot);

    CURSOR cr_crapttl(pr_cdcooper IN crapttl.cdcooper%TYPE
		             ,pr_nrdconta IN crapttl.nrdconta%TYPE)IS
    SELECT crapttl.nmextttl
	  FROM crapttl
     WHERE crapttl.cdcooper = pr_cdcooper
	   AND crapttl.nrdconta = pr_nrdconta
	   AND crapttl.idseqttl = 2;

    --Tabelas de Memoria
    --vr_tab_saldo_rdc   APLI0001.typ_tab_saldo_rdca;
    TYPE typ_tab_saldo_rdca_088 IS TABLE OF APLI0001.typ_reg_saldo_rdca INDEX BY VARCHAR2(10);
    vr_tab_saldo_rdca_088  typ_tab_saldo_rdca_088;
    vr_tab_saldo_rdca      APLI0001.typ_tab_saldo_rdca;
    vr_tab_extrato_rdca    APLI0002.typ_tab_extrato_rdca;
    -- Declaração da tabela que conterá os dados da aplicação
    vr_tab_aplica apli0005.typ_tab_aplicacao;
    -- Declaração da tabela que conterá os extratos das aplicações
    vr_tab_extrato apli0005.typ_tab_extrato;
    --Indices das temp-tables
    vr_index_saldo_rdca PLS_INTEGER;
    vr_index_saldo_rdca_088 VARCHAR2(10);
    vr_index_extrato_rdca PLS_INTEGER;

    TYPE typ_tab_extr_rdca_mes IS TABLE OF NUMBER INDEX BY VARCHAR2(10);
    vr_tab_extr_mes  typ_tab_extr_rdca_mes;

    --Variaveis Locais
    vr_flgemiss     BOOLEAN;
    vr_inrelext     INTEGER;
    vr_dsextrat     VARCHAR2(100);
    vr_rel_dsagenci VARCHAR2(100);
    vr_rel_nmresemp VARCHAR2(100);
    vr_rel_qtjaicmf NUMBER;
    vr_rel_qtjaicm1 NUMBER;
    vr_rel_vlrenapl NUMBER;
    vr_rel_vlrenap1 NUMBER;
    vr_rel_vldjuros NUMBER;
    vr_rel_nmmesano VARCHAR2(100);
    vr_rel_ddmesano INTEGER;
    vr_rel_aamesano INTEGER;
    vr_rel_dscooper VARCHAR2(100);
    vr_rel_dsendcop VARCHAR2(100);
    vr_rel_dstelcop VARCHAR2(100);
    vr_contador     INTEGER;
    vr_regexis1     BOOLEAN;
    vr_flgescra     BOOLEAN;
    vr_regexist     BOOLEAN;
    vr_cdacesso     VARCHAR2(100);
    vr_nmendter     VARCHAR2(100);
    vr_nmarqimp     VARCHAR2(100);
    vr_dscomand     VARCHAR2(100);
    vr_dtmvtolt     DATE;
    vr_vlmoefix     NUMBER(35,8);
    vr_vlmoefi1     NUMBER(35,8);
    vr_nmcidade     VARCHAR2(100);
	vr_nmsegntl     crapttl.nmextttl%TYPE;

    vr_ant_vlirfcot NUMBER;
    vr_ant_vlprepag NUMBER;
    vr_rel_vlprepag NUMBER;

    vr_rel_vlcpmfpg NUMBER;
    vr_rel_vldoirrf NUMBER;
    vr_rel_dscpmfpg VARCHAR2(100);
    vr_rel_nrcpfcgc VARCHAR2(100);
    vr_rel_aarefere INTEGER;
    vr_rel_nrdocnpj VARCHAR2(100);
    vr_rel_nmmesref VARCHAR2(100);

    vr_vlsldapl     NUMBER;
    vr_vlsldppr     NUMBER;                  -- SALDO POUPANÇA PROGRAMADA
    vr_vlresgat     NUMBER;
    vr_vlrendim     NUMBER;
    vr_vldoirrf     NUMBER;
    vr_txacumul     NUMBER;                  -- Taxa acumulada durante o período total da aplicação
    vr_txacumes     NUMBER;                  -- Taxa acumulada durante o mês vigente
    vr_percirrf     NUMBER;

    vr_des_reto     VARCHAR2(1000);
    vr_found_dir    BOOLEAN:=FALSE;
    vr_nrmesatual   NUMBER;
    /* Dados Trimestre */
    vr_rf1_dtrefere DATE;
    vr_rf2_dtrefere DATE;
    vr_rf3_dtrefere DATE;

    vr_rf1_vlsdccdp NUMBER; -- Deposito em Conta
    vr_rf2_vlsdccdp NUMBER;
    vr_rf3_vlsdccdp NUMBER;
    vr_rf1_vlttccap NUMBER; -- Cotas Capital
    vr_rf2_vlttccap NUMBER;
    vr_rf3_vlttccap NUMBER;
    vr_rf1_vlsddvem NUMBER; -- Saldo Devedor Emprestimos
    vr_rf2_vlsddvem NUMBER;
    vr_rf3_vlsddvem NUMBER;
    vr_rf1_vlsdapli NUMBER; -- Saldo Aplicacoes
    vr_rf2_vlsdapli NUMBER;
    vr_rf3_vlsdapli NUMBER;

    vr_tot_vlrencot NUMBER:=0;
    vr_tot_vlsobras NUMBER:=0;
    vr_tot_vlrendim NUMBER:=0;
    vr_tot_vlsdrdca NUMBER:=0;
    vr_tot_vlsdapli NUMBER:=0;
    vr_tot_vlsddsli NUMBER:=0;

    vr_dtrefini     DATE;
    vr_dtreffim     DATE;
    vr_mesrefer     NUMBER;
    vr_flgzerar     BOOLEAN:=FALSE;

    ----
    vr_ant_vlpoupan NUMBER;
    vr_sol_vlpoupan NUMBER;
    vr_ant_vlfundos NUMBER;
    vr_sol_vlfundos NUMBER;
    vr_ant_vlrenfix NUMBER;
    vr_sol_vlrenfix NUMBER;
    vr_ren_vlfundos NUMBER;
    vr_lit_dsanoant VARCHAR2(100);
    vr_flganter     BOOLEAN;
    vr_dtemissa     DATE;
    vr_vlrentot     NUMBER;
    vr_vlirfont     NUMBER;
    vr_nmmesref     VARCHAR2(100);
    vr_nrmesref     INTEGER;
    vr_cdretenc     INTEGER;
    vr_dsretenc     VARCHAR2(100);
    vr_vlrdrtrt     NUMBER;
    vr_vlrrtirf     NUMBER;
    vr_flghames     BOOLEAN;
    vr_nrdconta     VARCHAR2(100);
    vr_cdagectl     VARCHAR2(100);
    vr_dsre3426     VARCHAR2(100);
    vr_dsre5706     VARCHAR2(100);
    vr_dsre3277     VARCHAR2(100);
    vr_dsorigem     VARCHAR2(100);
    vr_dstransa     VARCHAR2(100);
    vr_nrdrowid     ROWID;
    vr_crapage      BOOLEAN;
    vr_dstextab     craptab.dstextab%type;
    --Variaveis de indices
    vr_index        PLS_INTEGER;
    vr_index_retenc PLS_INTEGER;
    vr_idx_mes      PLS_INTEGER;
    --Variaveis dos Arquivos
    vr_typ_saida    VARCHAR2(3);
    vr_comando      VARCHAR2(100);
    vr_nmarqimp     VARCHAR2(100);
    vr_nmdireto     VARCHAR2(100);
    vr_nmarqpdf     VARCHAR2(100);
    vr_nmendter     VARCHAR2(100);
    vr_setlinha     VARCHAR2(100);
    --Variaveis de Erro
    vr_cdcritic     INTEGER;
    vr_dscritic     VARCHAR2(4000);
    --Variaveis de Excecoes
    vr_exc_erro     EXCEPTION;
    vr_exc_saida    EXCEPTION;
    
    vr_nmaction VARCHAR2(32) := 'pc_consulta_ir_pj_trim';
    
  BEGIN

    gene0001.pc_set_modulo(pr_module => NULL, pr_action => vr_nmaction);

    --Inicializar transacao
    vr_dsorigem:= gene0001.vr_vet_des_origens(pr_idorigem);
    vr_dstransa:= 'Consultar dados para informe de rendimentos trimestre.';
    --Inicializar Variaveis
    vr_cdcritic:= 0;
    vr_dscritic:= NULL;
    pr_des_reto:= 'NOK';
    /* Bloco Imprime */

    BEGIN
      --Limpar Tabela Erro
      pr_tab_erro.DELETE;
      --Limpar tabelas de dados
      pr_tab_extrato_ir.DELETE;
      pr_tab_retencao_ir.DELETE;

      -- Verifica se a cooperativa esta cadastrada
      OPEN cr_crapcop (pr_cdcooper => pr_cdcooper);
      FETCH cr_crapcop INTO rw_crapcop;
      -- Se não encontrar
      IF cr_crapcop%NOTFOUND THEN
        -- Fechar o cursor pois haverá raise
        CLOSE cr_crapcop;
        -- Montar mensagem de critica
        vr_cdcritic:= 651;
        RAISE vr_exc_saida;
      ELSE
        -- Apenas fechar o cursor
        CLOSE cr_crapcop;
      END IF;

      --Selecionar associado
      OPEN cr_crapass (pr_cdcooper => pr_cdcooper
                      ,pr_nrdconta => pr_nrdconta);
      --Posicionar no proximo registro
      FETCH cr_crapass INTO rw_crapass;
      --Se nao encontrou
      IF cr_crapass%NOTFOUND THEN
        --Fechar Cursor
        CLOSE cr_crapass;
        -- Montar mensagem de critica
        vr_cdcritic:= 9;
        RAISE vr_exc_saida;
      ELSE
        --Fechar Cursor
        CLOSE cr_crapass;
      END IF;

	  IF rw_crapass.inpessoa = 1 THEN

	    OPEN cr_crapttl(pr_cdcooper => rw_crapass.cdcooper
		               ,pr_nrdconta => rw_crapass.nrdconta);

		FETCH cr_crapttl INTO vr_nmsegntl;

		CLOSE cr_crapttl;

	  END IF;

      --Selecionar Agencia
      OPEN cr_crapage (pr_cdcooper => pr_cdcooper
                      ,pr_cdagenci => rw_crapass.cdagenci);
      --Posicionar no proximo registro
      FETCH cr_crapage INTO rw_crapage;
      vr_crapage:= cr_crapage%FOUND;
      --Fechar Cursor
      CLOSE cr_crapage;

      --Zerar variaveis
      vr_rf1_vlsdapli:= 0;
      vr_rf1_vlsdccdp:= 0;
      vr_rf1_vlsddvem:= 0;
      vr_rf1_vlttccap:= 0;
      vr_rf2_vlsdapli:= 0;
      vr_rf2_vlsdccdp:= 0;
      vr_rf2_vlsddvem:= 0;
      vr_rf2_vlttccap:= 0;
      vr_rf3_vlsdapli:= 0;
      vr_rf3_vlsdccdp:= 0;
      vr_rf3_vlsddvem:= 0;
      vr_rf3_vlttccap:= 0;

      vr_rel_vldjuros:= 0;
      vr_rel_aarefere:= pr_nranoref;
      vr_lit_dsanoant:= 'SALDO EM';
      vr_rel_dscpmfpg:= 'CPMF PAGO NO ANO';
      vr_regexis1    := FALSE;
      --Formatar o cpf/cnpj
      vr_rel_nrcpfcgc:= gene0002.fn_mask_cpf_cnpj(rw_crapass.nrcpfcgc,rw_crapass.inpessoa);
      /* se for extrato para pessoa fisica */


      --Proximo Indice para tabela memoria
      vr_index:= pr_tab_extrato_ir.COUNT+1;
      --Popular Colunas da tabela memoria
      pr_tab_extrato_ir(vr_index).nmextcop:= rw_crapcop.nmextcop;
      pr_tab_extrato_ir(vr_index).nrdocnpj:= vr_rel_nrdocnpj; /*Verificar*/
      pr_tab_extrato_ir(vr_index).dsendcop:= vr_rel_dsendcop; /*Verificar*/
      pr_tab_extrato_ir(vr_index).nrcpfcgc:= vr_rel_nrcpfcgc;
      pr_tab_extrato_ir(vr_index).nmprimtl:= rw_crapass.nmprimtl;
      pr_tab_extrato_ir(vr_index).cdagenci:= rw_crapass.cdagenci;
      pr_tab_extrato_ir(vr_index).nrdconta:= rw_crapass.nrdconta;
      pr_tab_extrato_ir(vr_index).nmsegntl:= vr_nmsegntl;


      /* pegar descricao dos codigos de retencao 3426 / 5706 / 3277 */
      FOR idx IN 1..2 LOOP
        --Determinar o codigo de retencao
        CASE idx
          WHEN 1 THEN rw_gnrdirf.cdretenc:= 3426;
          WHEN 2 THEN rw_gnrdirf.cdretenc:= 3277;
        END CASE;
        --Selecionar Descricao da Retencao
        OPEN cr_gnrdirf (pr_cdretenc => rw_gnrdirf.cdretenc);
        FETCH cr_gnrdirf INTO rw_gnrdirf;
        --Se nao encontrou
        IF cr_gnrdirf%NOTFOUND THEN
          --Fechar Cursor
          CLOSE cr_gnrdirf;
          --Montar Mensagem de Critica
          vr_dscritic:= 'Problema na consulta da descricao de retencao. Comunique seu PA.';
          --Levantar Excecao
          RAISE vr_exc_saida;
        ELSE
          --Descricao da retencao
          CASE idx
            WHEN 1 THEN vr_dsre3426:= rw_gnrdirf.dsretenc;
            WHEN 2 THEN vr_dsre3277:= rw_gnrdirf.dsretenc;
          END CASE;
        END IF;
        --Fechar Cursor
        CLOSE cr_gnrdirf;
      END LOOP;

      -- Definindo meses de inicio de cada periodo
      CASE pr_nrperiod
        WHEN 1 THEN   -- 1ºTrimestre Jan-Mar
           vr_dtrefini := to_date('01/01/' || pr_nranoref,'DD/MM/RRRR');
           vr_dtreffim := to_date('31/03/' || pr_nranoref,'DD/MM/RRRR');
           vr_mesrefer := 1; -- Janeiro
        WHEN 2 THEN   -- 2ºTrimestre Abr-Jun
           vr_dtrefini := to_date('01/04/' || pr_nranoref,'DD/MM/RRRR');
           vr_dtreffim := to_date('30/06/' || pr_nranoref,'DD/MM/RRRR');
           vr_mesrefer := 4; -- Abril
        WHEN 3 THEN   -- 3ºTrimestre Jul-Set
           vr_dtrefini := to_date('01/07/' || pr_nranoref,'DD/MM/RRRR');
           vr_dtreffim := to_date('30/09/' || pr_nranoref,'DD/MM/RRRR');
           vr_mesrefer := 7; -- Julho
        WHEN 4 THEN   -- 4ºTrimestre Out-Dez
           vr_dtrefini := to_date('01/10/' || pr_nranoref,'DD/MM/RRRR');
           vr_dtreffim := to_date('31/12/' || pr_nranoref,'DD/MM/RRRR');
           vr_mesrefer := 10; -- Outubro
        ELSE          -- Erro no periodo, seta pro 1ºTRI
           vr_dtrefini := to_date('01/01/' || pr_nranoref,'DD/MM/RRRR');
           vr_dtreffim := to_date('31/03/' || pr_nranoref,'DD/MM/RRRR');
           vr_mesrefer := 1; -- Janeiro
      END CASE;

      -- Percorrer cada mês do trimestre selecionado
      vr_contador     := 0;
      vr_nrmesatual   := to_number(to_char(pr_dtmvtolt,'MM')); -- Identifica o mes atual

      --Selecionar Dados Imposto Renda
      OPEN cr_crapdir (pr_cdcooper => pr_cdcooper
                      ,pr_nrdconta => rw_crapass.nrdconta
                      ,pr_nranoref => pr_nranoref);
      FETCH cr_crapdir INTO rw_crapdir;
      vr_found_dir := cr_crapdir%FOUND;
      CLOSE cr_crapdir;


      -- MES A MES NO TRIMESTRE INFORMADO
      FOR vr_mes IN vr_mesrefer..vr_mesrefer+2 LOOP

        vr_contador     := vr_contador + 1; -- Identificar qual periodo
        vr_vlsldppr     := 0;
        vr_vlsldapl     := 0;
        vr_tot_vlsdapli := 0; -- PP + APLICACAO


        vr_idx_mes      := to_number(gene0002.fn_mask(pr_nranoref,'9999') ||
                                     gene0002.fn_mask(vr_mes,'99'));

        -- Se o AnoMes do trimestre for superior ao AnoMes do dia,
        -- zerar colunas -> Mês atual ou superior ainda não fechado
        IF vr_idx_mes >= to_number(to_char(pr_dtmvtolt,'RRRRMM')) THEN
          vr_flgzerar := TRUE;
        ELSE
          vr_flgzerar := FALSE;
        END IF;

        IF NOT vr_flgzerar THEN -- Se não é pra zerar o valor do mes, soma
          /* CREDITO RETORNO DE SOBRAS */
          FOR rw_lct_sobras IN  cr_lct_sobras
                                        (pr_cdcooper => pr_cdcooper
                                        ,pr_anorefer => pr_nranoref
                                        ,pr_mesrefer => vr_mes
                                        ,pr_cdagenci => sobr0001.vr_cdagenci
                                        ,pr_cdbccxlt => sobr0001.vr_cdbccxlt
                                        ,pr_nrdolote => sobr0001.vr_nrdolote
                                        ,pr_nrdconta => pr_nrdconta) LOOP
            vr_tot_vlsobras := vr_tot_vlsobras + rw_lct_sobras.vllanmto;
          END LOOP;

          /* Credito Retorno de Sobras em CC */
          FOR rw_craplcm IN  cr_craplcm (pr_cdcooper => pr_cdcooper
                                        ,pr_anorefer => pr_nranoref
                                        ,pr_mesrefer => vr_mes
                                        ,pr_cdagenci => sobr0001.vr_cdagenci
                                        ,pr_cdbccxlt => sobr0001.vr_cdbccxlt
                                        ,pr_nrdolote => sobr0001.vr_nrdolote
                                        ,pr_nrdconta => pr_nrdconta) LOOP
            vr_tot_vlsobras := vr_tot_vlsobras + rw_craplcm.vllanmto;
          END LOOP;
        END IF;

        /* BUSCA O SALDO DA APLICACAO NO FIM DO MES INFORMADO */
        OPEN cr_aplica (pr_cdcooper => pr_cdcooper
                       ,pr_nrdconta => pr_nrdconta
                       ,pr_nranoref => pr_nranoref
                       ,pr_nrmesref => vr_mes);
        FETCH cr_aplica INTO rw_aplica;
        IF cr_aplica%NOTFOUND THEN
          CLOSE cr_aplica;
          vr_vlsldapl := 0;
        ELSE
          CLOSE cr_aplica;
          vr_vlsldapl := rw_aplica.vllanmto;
        END IF;

        /* VALORES DE POUPANÇA PROGRAMADA */
        pc_saldo_pp_mensal(pr_cdcooper => pr_cdcooper
                          ,pr_nrdconta => pr_nrdconta
                          ,pr_anorefer => pr_nranoref
                          ,pr_mesrefer => vr_mes
                          ,pr_vlrsldpp => vr_vlsldppr
                          ,pr_dsperiod => vr_nmmesref);
        IF vr_flgzerar THEN
          vr_tot_vlsdapli := 0;
        ELSE
          vr_tot_vlsdapli := vr_vlsldapl + vr_vlsldppr;
        END IF;


        /* se for ano vigente ou Nao encontrou a DIR do ANO informado
           -- Busca da COT */
        IF pr_nranoref = to_number(to_char(pr_dtmvtolt,'RRRR'))
        OR NOT vr_found_dir THEN

          --Selecionar Informacoes Referentes a Cotas e Recursos
          OPEN cr_cot_mes (pr_cdcooper => pr_cdcooper
                          ,pr_nrdconta => rw_crapass.nrdconta);
          FETCH cr_cot_mes INTO rw_cot_mes;
          --Se nao encontrou
          IF cr_cot_mes%NOTFOUND THEN
            --Fechar Cursor
            CLOSE cr_cot_mes;
            --Montar Mensagem de Critica
            vr_dscritic:= 'Conta/dv: '||pr_nrdconta||
                          '- Nao ha dados para imposto de renda de '
                          || pr_nrperiod || 'T/' || pr_nranoref;
            --Levantar Excecao
            RAISE vr_exc_saida;
          END IF;
          --Fechar Cursor
          CLOSE cr_cot_mes;

          --Popular os valores de cada Mes
          --Nome Mes Referencia
          vr_nmmesref:= cxon0000.vr_tab_mes(vr_mes);
          --Codigo Referencia
          vr_cdretenc:= 3426;
          --Descricao da Referencia
          vr_dsretenc:= vr_dsre3426;
          --Valores do Rendimento e IR
          CASE vr_mes -- É o mês
            WHEN 1 THEN
              vr_vlrentot:= NVL(rw_cot_mes.vlrentot##1,0);
              vr_vlirfont:= NVL(rw_cot_mes.vlirfont##1,0);
            WHEN 2 THEN
              vr_vlrentot:= NVL(rw_cot_mes.vlrentot##2,0);
              vr_vlirfont:= NVL(rw_cot_mes.vlirfont##2,0);
            WHEN 3 THEN
              vr_vlrentot:= NVL(rw_cot_mes.vlrentot##3,0);
              vr_vlirfont:= NVL(rw_cot_mes.vlirfont##3,0);
            WHEN 4 THEN
              vr_vlrentot:= NVL(rw_cot_mes.vlrentot##4,0);
              vr_vlirfont:= NVL(rw_cot_mes.vlirfont##4,0);
            WHEN 5 THEN
              vr_vlrentot:= NVL(rw_cot_mes.vlrentot##5,0);
              vr_vlirfont:= NVL(rw_cot_mes.vlirfont##5,0);
            WHEN 6 THEN
              vr_vlrentot:= NVL(rw_cot_mes.vlrentot##6,0);
              vr_vlirfont:= NVL(rw_cot_mes.vlirfont##6,0);
            WHEN 7 THEN
              vr_vlrentot:= NVL(rw_cot_mes.vlrentot##7,0);
              vr_vlirfont:= NVL(rw_cot_mes.vlirfont##7,0);
            WHEN 8 THEN
              vr_vlrentot:= NVL(rw_cot_mes.vlrentot##8,0);
              vr_vlirfont:= NVL(rw_cot_mes.vlirfont##8,0);
            WHEN 9 THEN
              vr_vlrentot:= NVL(rw_cot_mes.vlrentot##9,0);
              vr_vlirfont:= NVL(rw_cot_mes.vlirfont##9,0);
            WHEN 10 THEN
              vr_vlrentot:= NVL(rw_cot_mes.vlrentot##10,0);
              vr_vlirfont:= NVL(rw_cot_mes.vlirfont##10,0);
            WHEN 11 THEN
              vr_vlrentot:= NVL(rw_cot_mes.vlrentot##11,0);
              vr_vlirfont:= NVL(rw_cot_mes.vlirfont##11,0);
            WHEN 12 THEN
              vr_vlrentot:= NVL(rw_cot_mes.vlrentot##12,0);
              vr_vlirfont:= NVL(rw_cot_mes.vlirfont##12,0);
          END CASE;
          IF vr_flgzerar THEN
            vr_vlrentot := 0;
            vr_vlirfont := 0;
          END IF;
          --Se possuir Valor retido fonte
          IF vr_vlirfont > 0 THEN
            --Buscar Proximo Indice Retencao
            vr_index_retenc:= pr_tab_retencao_ir.COUNT + 1;
            --Inserir Informacoes tabela retencao
            pr_tab_retencao_ir(vr_index_retenc).nmmesref:= vr_nmmesref;
            pr_tab_retencao_ir(vr_index_retenc).cdretenc:= vr_cdretenc;
            pr_tab_retencao_ir(vr_index_retenc).dsretenc:= vr_dsretenc;
            pr_tab_retencao_ir(vr_index_retenc).vlrentot:= vr_vlrentot;
            --Ano referencia maior ou igual 2004
            IF pr_nranoref >= 2004 THEN
              pr_tab_retencao_ir(vr_index_retenc).vlirfont:= vr_vlirfont;
            ELSE
              pr_tab_retencao_ir(vr_index_retenc).vlirfont:= 0;
            END IF;
          END IF;

        ELSE /* SE NAO FOR ANO VIGENTE */

          --Mes de Referencia
          vr_nrmesref:= vr_mes;
          --Selecionar Dados Imposto Renda
          OPEN cr_crapdir (pr_cdcooper => pr_cdcooper
                          ,pr_nrdconta => rw_crapass.nrdconta
                          ,pr_nranoref => pr_nranoref);
          FETCH cr_crapdir INTO rw_crapdir;
          IF cr_crapdir%NOTFOUND THEN
            --Fechar Cursor
            CLOSE cr_crapdir;
            --Montar mensagem
            vr_dscritic:= 'Conta/dv: '||pr_nrdconta||
                          ' - Nao ha dados para imposto de renda de '||pr_nranoref||'.';
            --Sair
            RAISE vr_exc_saida;
          ELSE
            --Fechar Cursor
            CLOSE cr_crapdir;

            --Nome Mes Referencia
            vr_nmmesref:= cxon0000.vr_tab_mes(vr_mes);
            --Codigo Retencao
            vr_cdretenc:= 3426;
            --Descricao Retencao
            vr_dsretenc:= vr_dsre3426;
            --Valores do Rendimento e IR
            CASE vr_mes
              WHEN 1 THEN
                vr_vlrentot:= rw_crapdir.vlrentot##1;
                vr_vlirfont:= rw_crapdir.vlirfont##1;
              WHEN 2 THEN
                vr_vlrentot:= rw_crapdir.vlrentot##2;
                vr_vlirfont:= rw_crapdir.vlirfont##2;
              WHEN 3 THEN
                vr_vlrentot:= rw_crapdir.vlrentot##3;
                vr_vlirfont:= rw_crapdir.vlirfont##3;
              WHEN 4 THEN
                vr_vlrentot:= rw_crapdir.vlrentot##4;
                vr_vlirfont:= rw_crapdir.vlirfont##4;
              WHEN 5 THEN
                vr_vlrentot:= rw_crapdir.vlrentot##5;
                vr_vlirfont:= rw_crapdir.vlirfont##5;
              WHEN 6 THEN
                vr_vlrentot:= rw_crapdir.vlrentot##6;
                vr_vlirfont:= rw_crapdir.vlirfont##6;
              WHEN 7 THEN
                vr_vlrentot:= rw_crapdir.vlrentot##7;
                vr_vlirfont:= rw_crapdir.vlirfont##7;
              WHEN 8 THEN
                vr_vlrentot:= rw_crapdir.vlrentot##8;
                vr_vlirfont:= rw_crapdir.vlirfont##8;
              WHEN 9 THEN
                vr_vlrentot:= rw_crapdir.vlrentot##9;
                vr_vlirfont:= rw_crapdir.vlirfont##9;
              WHEN 10 THEN
                vr_vlrentot:= rw_crapdir.vlrentot##10;
                vr_vlirfont:= rw_crapdir.vlirfont##10;
              WHEN 11 THEN
                vr_vlrentot:= rw_crapdir.vlrentot##11;
                vr_vlirfont:= rw_crapdir.vlirfont##11;
              WHEN 12 THEN
                vr_vlrentot:= rw_crapdir.vlrentot##12;
                vr_vlirfont:= rw_crapdir.vlirfont##12;
            END CASE;
            --Se possuir Valor retido fonte
            IF vr_vlirfont > 0 THEN
              --Buscar Proximo Indice Retencao
              vr_index_retenc:= pr_tab_retencao_ir.COUNT + 1;
              --Inserir Informacoes tabela retencao
              pr_tab_retencao_ir(vr_index_retenc).nmmesref:= vr_nmmesref;
              pr_tab_retencao_ir(vr_index_retenc).cdretenc:= vr_cdretenc;
              pr_tab_retencao_ir(vr_index_retenc).dsretenc:= vr_dsretenc;
              pr_tab_retencao_ir(vr_index_retenc).vlrentot:= vr_vlrentot;
              --Ano referencia maior ou igual 2004
              IF pr_nranoref >= 2004 THEN
                pr_tab_retencao_ir(vr_index_retenc).vlirfont:= vr_vlirfont;
              ELSE
                pr_tab_retencao_ir(vr_index_retenc).vlirfont:= 0;
              END IF;
            END IF;

          END IF;

        END IF;  /* FIM se NAO for ano vigente */

        -- RENDIMENTOS DE APLICAÇÃO
        vr_tot_vlrendim := vr_tot_vlrendim + (vr_vlrentot - vr_vlirfont);

        --Zerar Valor IR retido Fonte
        vr_vlirfont:= 0;
        vr_vlrentot:= 0;
        --PERCORRER COTAS
        FOR rw_craplct IN cr_craplct2 (pr_cdcooper => pr_cdcooper
                                      ,pr_nrdconta => rw_crapass.nrdconta
                                      ,pr_nranoref => pr_nranoref
                                      ,pr_nrmesref => vr_mes) LOOP
          --Historico Rendimento
          IF rw_craplct.cdhistor = 926 THEN
            vr_vlrentot:= rw_craplct.vllanmto;
          ELSE
            vr_vlirfont:= rw_craplct.vllanmto;
          END IF;
        END LOOP; --cr_craplct
        IF vr_flgzerar THEN
          vr_vlrentot := 0;
          vr_vlirfont := 0;
        END IF;
        --Se possuir Valor retido fonte
        IF vr_vlirfont > 0 THEN
          /* Passou a tratar 3277 ao inves de 5706 */
          --Montar Código e Descricao da Retencao
          vr_cdretenc:= 3277;
          vr_dsretenc:= vr_dsre3277;
          --Buscar Proximo Indice Retencao
          vr_index_retenc:= pr_tab_retencao_ir.COUNT + 1;
          --Inserir Informacoes tabela retencao
          pr_tab_retencao_ir(vr_index_retenc).nmmesref:= vr_nmmesref;
          pr_tab_retencao_ir(vr_index_retenc).cdretenc:= vr_cdretenc;
          pr_tab_retencao_ir(vr_index_retenc).dsretenc:= vr_dsretenc;
          pr_tab_retencao_ir(vr_index_retenc).vlrentot:= vr_vlrentot;
          --Ano referencia maior ou igual 2004
          IF pr_nranoref >= 2004 THEN
            pr_tab_retencao_ir(vr_index_retenc).vlirfont:= vr_vlirfont;
          ELSE
            pr_tab_retencao_ir(vr_index_retenc).vlirfont:= 0;
          END IF;

        END IF;  -- FIM IF vr_vlirfont > 0

        -- RENDIMENTOS COTAS CAPITAL
        IF vr_flgzerar THEN
          vr_tot_vlrencot := vr_tot_vlrencot;
        ELSE  -- Se não é pra zerar, Soma o rendimento do mês no total geral
          vr_tot_vlrencot := vr_tot_vlrencot + (vr_vlrentot - vr_vlirfont);
        END IF;



        -- SELECIONAR SALDO CONTA INVESTIMENTO
        vr_tot_vlsddsli := 0;
        OPEN cr_crapsli (pr_cdcooper => pr_cdcooper
                        ,pr_nrdconta => rw_crapass.nrdconta
                        ,pr_dtrefere => to_date(('01/'|| vr_mes ||'/'|| pr_nranoref),'dd/mm/rrrr'));
        FETCH cr_crapsli INTO rw_crapsli;
        --Se encontrou
        IF cr_crapsli%FOUND THEN
          --Acumular Saldo Investimento
          vr_tot_vlsddsli:= rw_crapsli.vlsddisp;
        END IF;
        IF vr_flgzerar THEN
          vr_tot_vlsddsli := 0;
        END IF;
        --Fechar Cursor
        CLOSE cr_crapsli;

        -- OUTROS SALDOS
        OPEN cr_sda_mes (pr_cdcooper => pr_cdcooper
                        ,pr_nrdconta => rw_crapass.nrdconta
                        ,pr_dtrefere => to_date(('01/'|| vr_mes ||'/'|| pr_nranoref),'dd/mm/rrrr'));
        FETCH cr_sda_mes INTO rw_sda_mes;
        --Se nao encontrou
        IF cr_sda_mes%NOTFOUND THEN
          -- Atribui Zero as variaveis
          CASE vr_contador  -- Identifica qual dos periodos refere-se
            WHEN 1 THEN
                 vr_rf1_vlsdccdp := vr_tot_vlsddsli;
                 vr_rf1_vlttccap := 0;
                 vr_rf1_vlsddvem := 0;
                 vr_rf1_vlsdapli := vr_tot_vlsdapli;
            WHEN 2 THEN
                 vr_rf2_vlsdccdp := vr_tot_vlsddsli;
                 vr_rf2_vlttccap := 0;
                 vr_rf2_vlsddvem := 0;
                 vr_rf2_vlsdapli := vr_tot_vlsdapli;
            WHEN 3 THEN
                 vr_rf3_vlsdccdp := vr_tot_vlsddsli;
                 vr_rf3_vlttccap := 0;
                 vr_rf3_vlsddvem := 0;
                 vr_rf3_vlsdapli := vr_tot_vlsdapli;
            ELSE NULL;
          END CASE;

        ELSE -- ENCONTROU SALDO DO MES

          CASE vr_contador  -- Identifica qual dos periodos refere-se
            WHEN 1 THEN
              IF vr_flgzerar THEN
                vr_rf1_vlsdccdp := vr_tot_vlsddsli;
                vr_rf1_vlttccap := 0;
                vr_rf1_vlsddvem := 0;
                vr_rf1_vlsdapli := 0;
              ELSE
                vr_rf1_vlsdccdp := nvl(rw_sda_mes.vlsddisp,0) + vr_tot_vlsddsli;
                vr_rf1_vlttccap := nvl(rw_sda_mes.vlsdcota,0);
                vr_rf1_vlsddvem := nvl(rw_sda_mes.vlsdeved,0);
                vr_rf1_vlsdapli := vr_tot_vlsdapli; -- + nvl(rw_sda_mes.vlsdrdpp,0);
              END IF;
            WHEN 2 THEN
              IF vr_flgzerar THEN
                 vr_rf2_vlsdccdp := vr_tot_vlsddsli;
                 vr_rf2_vlttccap := 0;
                 vr_rf2_vlsddvem := 0;
                 vr_rf2_vlsdapli := 0;
              ELSE
                 vr_rf2_vlsdccdp := nvl(rw_sda_mes.vlsddisp,0) + vr_tot_vlsddsli;
                 vr_rf2_vlttccap := nvl(rw_sda_mes.vlsdcota,0);
                 vr_rf2_vlsddvem := nvl(rw_sda_mes.vlsdeved,0);
                 vr_rf2_vlsdapli := vr_tot_vlsdapli; -- + nvl(rw_sda_mes.vlsdrdpp,0);
              END IF;
            WHEN 3 THEN
              IF vr_flgzerar THEN
                 vr_rf3_vlsdccdp := vr_tot_vlsddsli;
                 vr_rf3_vlttccap := 0;
                 vr_rf3_vlsddvem := 0;
                 vr_rf3_vlsdapli := 0;
              ELSE
                 vr_rf3_vlsdccdp := nvl(rw_sda_mes.vlsddisp,0) + vr_tot_vlsddsli;
                 vr_rf3_vlttccap := nvl(rw_sda_mes.vlsdcota,0);
                 vr_rf3_vlsddvem := nvl(rw_sda_mes.vlsdeved,0);
                 vr_rf3_vlsdapli := vr_tot_vlsdapli; -- + nvl(rw_sda_mes.vlsdrdpp,0);
              END IF;
            ELSE NULL;
          END CASE;
        END IF;
        --Fechar Cursor
        CLOSE cr_sda_mes;

        -- Data de Referencia Atual e anterior
        CASE vr_contador  -- Identifica qual dos periodos refere-se
          WHEN 1 THEN
            pr_tab_extrato_ir(vr_index).dsdomes1:= vr_nmmesref || '/' || pr_nranoref ;
          WHEN 2 THEN
            pr_tab_extrato_ir(vr_index).dsdomes2:= vr_nmmesref || '/' || pr_nranoref ;
          WHEN 3 THEN
            pr_tab_extrato_ir(vr_index).dsdomes3:= vr_nmmesref || '/' || pr_nranoref ;
        END CASE;


      END LOOP;  -- FIM LOOP 3 MESES


      --Popular demais informacoes no extrato
      pr_tab_extrato_ir(vr_index).vlrendim:= vr_tot_vlrendim;
      pr_tab_extrato_ir(vr_index).vlrencot:= vr_tot_vlrencot;
--          pr_tab_extrato_ir(vr_index).vlirfcot:= vr_rel_vlirfcot;
      pr_tab_extrato_ir(vr_index).vlsobras:= vr_tot_vlsobras;

      -- Periodo 1
      pr_tab_extrato_ir(vr_index).vlsdccd1:= vr_rf1_vlsdccdp;
      pr_tab_extrato_ir(vr_index).vlsddve1:= vr_rf1_vlsddvem;
      pr_tab_extrato_ir(vr_index).vlttcca1:= vr_rf1_vlttccap;
      pr_tab_extrato_ir(vr_index).vlsdapl1:= vr_rf1_vlsdapli;
      -- Periodo 2
      pr_tab_extrato_ir(vr_index).vlsdccd2:= vr_rf2_vlsdccdp;
      pr_tab_extrato_ir(vr_index).vlttcca2:= vr_rf2_vlttccap;
      pr_tab_extrato_ir(vr_index).vlsddve2:= vr_rf2_vlsddvem;
      pr_tab_extrato_ir(vr_index).vlsdapl2:= vr_rf2_vlsdapli;
      -- Periodo 3
      pr_tab_extrato_ir(vr_index).vlsdccd3:= vr_rf3_vlsdccdp;
      pr_tab_extrato_ir(vr_index).vlttcca3:= vr_rf3_vlttccap;
      pr_tab_extrato_ir(vr_index).vlsddve3:= vr_rf3_vlsddvem;
      pr_tab_extrato_ir(vr_index).vlsdapl3:= vr_rf3_vlsdapli;

      --Retorno OK
      pr_des_reto:= 'OK';
    EXCEPTION
      WHEN vr_exc_saida THEN
        NULL;
    END;
      --Se ocorreu erro
      IF vr_dscritic IS NOT NULL OR nvl(vr_cdcritic,0) <> 0 THEN
        -- Chamar rotina de gravação de erro
        gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                             ,pr_cdagenci => pr_cdagenci
                             ,pr_nrdcaixa => pr_nrdcaixa
                             ,pr_nrsequen => 1 --> Fixo
                             ,pr_cdcritic => vr_cdcritic
                             ,pr_dscritic => vr_dscritic
                             ,pr_tab_erro => pr_tab_erro);
      END IF;

      gene0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);
  EXCEPTION
    WHEN vr_exc_erro THEN
      -- Retorno não OK
      pr_des_reto := 'NOK';
      -- Chamar rotina de gravação de erro
      gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                           ,pr_cdagenci => pr_cdagenci
                           ,pr_nrdcaixa => pr_nrdcaixa
                           ,pr_nrsequen => 1 --> Fixo
                           ,pr_cdcritic => 0 --> Critica 0
                           ,pr_dscritic => vr_dscritic
                           ,pr_tab_erro => pr_tab_erro);
    WHEN OTHERS THEN
      cecred.pc_internal_exception;
      -- Retorno não OK
      pr_des_reto := 'NOK';
      -- Chamar rotina de gravação de erro
      vr_dscritic := vr_dscritic || ' Erro na pc_consulta_ir_pj_trim --> '|| sqlerrm;
      gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                           ,pr_cdagenci => pr_cdagenci
                           ,pr_nrdcaixa => pr_nrdcaixa
                           ,pr_nrsequen => 1 --> Fixo
                           ,pr_cdcritic => 0 --> Critica 0
                           ,pr_dscritic => vr_dscritic
                           ,pr_tab_erro => pr_tab_erro);
  END;
END pc_consulta_ir_pj_trim;

 PROCEDURE pc_saldo_pp_mensal (pr_cdcooper IN crapcop.cdcooper%TYPE  -- Codigo Cooperativa
                              ,pr_nrdconta IN crapass.nrdconta%TYPE  -- Numero da Conta do Associado
                              ,pr_anorefer IN INTEGER                -- Ano de Referencia
                              ,pr_mesrefer IN INTEGER                -- Mes de Referencia
                              ,pr_vlrsldpp OUT NUMBER                -- Saldo do Mes de Poupanca Programada
                              ,pr_dsperiod OUT VARCHAR2) IS          -- Retorna a descrição do Periodo solicitado
  BEGIN
  ---------------------------------------------------------------------------------------------------------------
  --
  --  Programa : pc_saldo_pp_mensal                     Antigo: nao há
  --  Sistema  :
  --  Sigla    : CRED
  --  Autor    : Guilherme/SUPERO
  --  Data     : Agosto/2016                           Ultima atualizacao: 05/08/2018
  --
  -- Dados referentes ao programa:
  --
  -- Frequencia: -----
  -- Objetivo   : Procedure para obter o saldo de PP no mes/ano informado no parametro
  --
  -- Alterações : 03/08/2018 Inclusão do cáculao para aplicação programada - Proj. 411.2
  --              (CIS Corporate)
  --
  ---------------------------------------------------------------------------------------------------------------
  DECLARE


    vr_vlsdttpp NUMBER:=0;     -- Saldo Total da PP - Retorno da procedure
    vr_listahis VARCHAR2(200);
    vr_dtultsld DATE;          -- Data do Ultimo saldo de PP encontrado

    vr_vlsdrapr NUMBER:=0;     -- Total da Ap. Prog  
    vr_vlresgat NUMBER:=0;     -- Total resgate - Não utilizado, apenas retorno da proc
    vr_vlrendim NUMBER:=0;     -- Total rendimento - Não utilizado, apenas retorno da proc
    vr_vldoirrf NUMBER:=0;     -- Total irrf - Não utilizado, apenas retorno da proc
    vr_cdcritic  pls_integer;
    vr_dscritic VARCHAR2(200);

    vr_exc_erro EXCEPTION;

    -- Data do Parametro entrada
    vr_dtperiod DATE:= to_date('01/'||pr_mesrefer||'/'|| pr_anorefer,'DD/MM/RRRR');

    -- PARA O CALCULO CORRETO DO MES SOLICITADO, É PASSADO O MÊS SEGUINTE AO SOLICITADO
    vr_dtprmini DATE:=ADD_MONTHS(to_date('01/'||pr_mesrefer||'/'|| pr_anorefer,'DD/MM/RRRR'),1);
    vr_dtprmfim DATE:=ADD_MONTHS(last_day(to_date('01/'||pr_mesrefer||'/'|| pr_anorefer,'DD/MM/RRRR')),1);

    -- Fixos 
    vr_nmdatela VARCHAR2(8):='ATENDA';
    vr_idorigem pls_integer := 5;

    -- Selecionar informacoes dos rendimentos das aplicacoes
    CURSOR cr_craprpp (pr_cdcooper IN craprpp.cdcooper%TYPE
                      ,pr_nrdconta IN craprpp.nrdconta%TYPE) IS
      SELECT rpp.nrctrrpp
            ,rpp.cdcooper
            ,rpp.nrdconta
            ,rpp.vlsdrdpp
            ,rpp.dtiniext
        FROM craprpp rpp
       WHERE rpp.cdcooper  = pr_cdcooper
         AND rpp.nrdconta  = pr_nrdconta
         AND rpp.cdprodut < 1              -- Apenas Poupancas Antigas 
         AND rpp.dtcancel IS NULL;

    CURSOR cr_craprpp_ap IS
      SELECT rpp.nrctrrpp
            ,rpp.cdcooper
            ,rpp.nrdconta
            ,rpp.vlsdrdpp
            ,rpp.dtiniext
        FROM craprpp rpp
       WHERE rpp.cdcooper  = pr_cdcooper
         AND rpp.nrdconta  = pr_nrdconta
         AND rpp.cdprodut > 0              -- Apenas Poupancas Novas 
         AND rpp.dtcancel IS NULL;

    rw_craprpp cr_craprpp%ROWTYPE;

    --Seleiconar Saldo Poupanca Programada
    CURSOR cr_crapspp (pr_cdcooper IN crapspp.cdcooper%type
                      ,pr_nrdconta IN crapspp.nrdconta%type
                      ,pr_nrctrrpp IN crapspp.nrctrrpp%type
                      ,pr_dtsldrpp IN crapspp.dtsldrpp%type) IS
      SELECT crapspp.dtsldrpp
            ,crapspp.vlsldrpp
        FROM crapspp crapspp
       WHERE crapspp.cdcooper = pr_cdcooper
         AND crapspp.nrdconta = pr_nrdconta
         AND crapspp.nrctrrpp = pr_nrctrrpp
         AND crapspp.dtsldrpp < pr_dtsldrpp
       ORDER BY crapspp.progress_recid DESC;
    rw_crapspp cr_crapspp%ROWTYPE;
    --Seleiconar Saldo Poupanca Programada
    CURSOR cr_crapspp2 (pr_cdcooper IN crapspp.cdcooper%type
                       ,pr_nrdconta IN crapspp.nrdconta%type
                       ,pr_nrctrrpp IN crapspp.nrctrrpp%type
                       ,pr_dtsldrpp IN crapspp.dtsldrpp%type) IS
      SELECT crapspp.dtsldrpp
            ,crapspp.vlsldrpp
       FROM crapspp crapspp
      WHERE crapspp.cdcooper = pr_cdcooper
        AND crapspp.nrdconta = pr_nrdconta
        AND crapspp.nrctrrpp = pr_nrctrrpp
        AND crapspp.dtsldrpp > pr_dtsldrpp
      ORDER BY crapspp.progress_recid ASC;

      --Selecionar Historicos de Tarifas
      CURSOR cr_craphis (pr_cdcooper IN crapcop.cdcooper%TYPE
                        ,pr_cdhistor IN craphis.cdhistor%TYPE) IS
        SELECT craphis.cdhistor
              ,craphis.dshistor
              ,craphis.indebcre
              ,craphis.dsextrat
          FROM craphis craphis
         WHERE craphis.cdcooper = pr_cdcooper
           AND craphis.cdhistor = pr_cdhistor;
      rw_craphis cr_craphis%ROWTYPE;
      --Selecionar Lancamentos da Aplicacao
      CURSOR cr_craplpp (pr_cdcooper IN craplpp.cdcooper%type
                        ,pr_nrdconta IN craplpp.nrdconta%type
                        ,pr_nrctrrpp IN craplpp.nrctrrpp%type
                        ,pr_dtiniper IN craplpp.dtmvtolt%type
                        ,pr_dtfimper IN craplpp.dtmvtolt%TYPE) IS
        SELECT lpp.cdhistor
              ,lpp.vllanmto
              ,lpp.dtmvtolt
              ,lpp.dtrefere
              ,lpp.cdagenci
              ,lpp.cdbccxlt
              ,lpp.nrdolote
              ,lpp.nrdocmto
              ,lpp.txaplmes
              ,lpp.txaplica
        FROM craplpp lpp
       WHERE lpp.cdcooper = pr_cdcooper
         AND lpp.nrdconta = pr_nrdconta
         AND lpp.nrctrrpp = pr_nrctrrpp
         and lpp.cdhistor in (150, 158, 496)
         AND lpp.dtrefere >= pr_dtiniper  -- dtrefere Data para qual contempla os valores
         AND lpp.dtrefere <= pr_dtfimper
         AND lpp.dtmvtolt >= pr_dtiniper  -- dtmvtolt Data para a qual foram feitos os lançamentos (mes anterior)
         AND lpp.dtmvtolt <= add_months(pr_dtfimper,-1)
       ORDER BY cdcooper,nrdconta,dtmvtolt,cdhistor,nrdocmto,progress_recid;


  BEGIN

    -- Mes/Ano solicitado
    pr_dsperiod := cxon0000.vr_tab_mes(to_number(to_char(vr_dtperiod,'MM')))
                   ||'/' || to_char(vr_dtperiod,'RRRR');

    -- Buscar os dados da Poupanca - Antiga
    FOR rw_craprpp IN cr_craprpp (pr_cdcooper => pr_cdcooper
                                 ,pr_nrdconta => pr_nrdconta) LOOP

     --Seleiconar Saldo ANTERIOR Poupanca Programada
     OPEN cr_crapspp (pr_cdcooper => rw_craprpp.cdcooper
                     ,pr_nrdconta => rw_craprpp.nrdconta
                     ,pr_nrctrrpp => rw_craprpp.nrctrrpp
                     ,pr_dtsldrpp => vr_dtprmini);
     FETCH cr_crapspp INTO rw_crapspp;
     --Se Encontrou
     IF cr_crapspp%FOUND THEN
       --Fechar Cursor
       CLOSE cr_crapspp;
       --Valor Saldo Popupanca
       vr_vlsdttpp := vr_vlsdttpp + rw_crapspp.vlsldrpp;
       vr_dtultsld := rw_crapspp.dtsldrpp;
     ELSE -- NOT FOUND do cr_crapspp%FOUND
       --Fechar Cursor
       CLOSE cr_crapspp;
       --Seleiconar Saldo Poupanca Programada
       OPEN cr_crapspp2 (pr_cdcooper => rw_craprpp.cdcooper
                        ,pr_nrdconta => rw_craprpp.nrdconta
                        ,pr_nrctrrpp => rw_craprpp.nrctrrpp
                        ,pr_dtsldrpp => vr_dtprmini);
       FETCH cr_crapspp2 INTO rw_crapspp;
       --Se Encontrou
       IF cr_crapspp2%FOUND THEN
          vr_vlsdttpp := vr_vlsdttpp + rw_crapspp.vlsldrpp;
          vr_dtultsld := rw_crapspp.dtsldrpp;
       END IF;
       --Fechar Cursor
       CLOSE cr_crapspp2;
     END IF;
     -- FIM DO SALDO ANTERIOR

     -- Se data do ultimo saldo for nula (nao encontrado), assume a data ini do parametro
     vr_dtultsld := NVL(vr_dtultsld,vr_dtprmini);

      --Selecionar Lancamentos da Poupanca
      FOR rw_craplpp IN cr_craplpp (pr_cdcooper => rw_craprpp.cdcooper
                                   ,pr_nrdconta => rw_craprpp.nrdconta
                                   ,pr_nrctrrpp => rw_craprpp.nrctrrpp
                                   ,pr_dtiniper => vr_dtultsld
                                   ,pr_dtfimper => vr_dtprmfim) LOOP

        --Selecionar Historicos de Tarifas
        OPEN cr_craphis (pr_cdcooper => rw_craprpp.cdcooper
                        ,pr_cdhistor => rw_craplpp.cdhistor);
        FETCH cr_craphis INTO rw_craphis;
        --Se nao encontrou
        IF cr_craphis%NOTFOUND THEN
          -- Fechar o cursor pois haverá raise
          CLOSE cr_craphis;
        END IF;
        --Fechar Cursor
        CLOSE cr_craphis;
        --Credito
        IF rw_craphis.indebcre = 'C' THEN
          --Somar valor lancamento
          vr_vlsdttpp:= nvl(vr_vlsdttpp,0) + rw_craplpp.vllanmto;
        ELSIF rw_craphis.indebcre = 'D' THEN
          --Diminuir valor lancamento
          vr_vlsdttpp:= nvl(vr_vlsdttpp,0) - rw_craplpp.vllanmto;
        ELSE
          NULL;
        END IF;
      END LOOP;
    END LOOP; -- Poupança Antiga
    pr_vlrsldpp := nvl(vr_vlsdttpp,0);

    -- Buscar os dados da Poupanca - Nova
    vr_dtprmfim:=last_day(vr_dtperiod);
    FOR rw_craprpp IN cr_craprpp_ap LOOP
        apli0008.pc_calc_saldo_ini_apl_prog (pr_cdcooper => pr_cdcooper
                                            ,pr_cdoperad => '1'
                                            ,pr_nmdatela => vr_nmdatela 
                                            ,pr_idorigem => vr_idorigem
                                            ,pr_nrdconta => pr_nrdconta
                                            ,pr_idseqttl => 1
                                            ,pr_nrctrrpp => rw_craprpp.nrctrrpp
                                            ,pr_dtmvtolt => vr_dtprmfim
                                            ,pr_idgerlog => 0
                                            ,pr_vlsdrdpp => vr_vlsdrapr
                                            ,pr_vlresgat => vr_vlresgat
                                            ,pr_vlrendim => vr_vlrendim
                                            ,pr_vldoirrf => vr_vldoirrf
                                            ,pr_cdcritic => vr_cdcritic
                                            ,pr_dscritic => vr_dscritic);
        IF vr_dscritic IS NOT NULL THEN
          raise vr_exc_erro;
        END IF;
        pr_vlrsldpp := pr_vlrsldpp +  vr_vlsdrapr;                                       
    END LOOP; -- Poupança Nova
  EXCEPTION
    WHEN OTHERS THEN
      pr_vlrsldpp := 0;
    END;
  END pc_saldo_pp_mensal;

    -- Subrotina para gerar extrato IR
    PROCEDURE pc_gera_impextir  (pr_cdcooper IN crapcop.cdcooper%TYPE  --Codigo Cooperativa
                                ,pr_cdagenci IN crapass.cdagenci%TYPE  --Codigo Agencia
                                ,pr_nrdcaixa IN INTEGER                --Numero do Caixa
                                ,pr_idorigem IN INTEGER                --Origem dos Dados
                                ,pr_nmdatela IN VARCHAR2               --Nome da Tela
                                ,pr_dtmvtolt IN crapdat.dtmvtolt%TYPE  --Data Movimento
                                ,pr_inproces IN INTEGER                --Indicador Processo
                                ,pr_cdprogra IN crapprg.cdprogra%TYPE  --Codigo Programa
                                ,pr_cdoperad IN VARCHAR2               --Codigo Operador
                                ,pr_dsiduser IN VARCHAR2               --Identificador Usuario
                                ,pr_nrdconta IN crapass.nrdconta%TYPE  --Numero da Conta do Associado
                                ,pr_anorefer IN INTEGER                --Ano de Referencia                                
                                ,pr_tpextrat IN INTEGER                --Tipo de Extrato
                                ,pr_flgrodar IN BOOLEAN                --Flag Executar
                                ,pr_flgerlog IN BOOLEAN                --Escreve erro Log
                                ,pr_clobxml  IN OUT NOCOPY CLOB        --Clob arquivo de dados
                                ,pr_dstexto  IN OUT NOCOPY VARCHAR2    --Texto Clob
                                ,pr_nmarqimp OUT VARCHAR2              --Nome Arquivo Impressao
                                ,pr_nmarqpdf OUT VARCHAR2              --Nome Arquivo PDF
                                ,pr_tab_erro OUT GENE0001.typ_tab_erro --Tabela de Erros
                                ,pr_des_reto OUT VARCHAR2 ) IS         --Descricao Erro
  BEGIN
  /*---------------------------------------------------------------------------------------------------------------
  
    Programa : pc_gera_impextir                     Antigo: procedures/b1wgen0112.p/gera-impextir
    Sistema  : 
    Sigla    : CRED
    Autor    : Alisson C. Berrido - Amcom
    Data     : Julho/2014                           Ultima atualizacao: 26/04/2017
  
   Dados referentes ao programa:
  
   Frequencia: -----
   Objetivo   : Procedure para obter impressao do extrato de imposto de renda do associado
  
   Alterações : 02/07/2014 - Conversão Progress -> Oracle (Alisson - AMcom)
                
                20/04/2016 - Remover comando rm e incluir direto na tela impres 
                             (Lucas Ranghetti/Rodrigo #399412)
  
                03/08/2016 - M360 - Inclusão de novas buscas de Sobras ao Cooperado (Marcos-Supero)
  
                24/03/2017 - SD638033 - Envio dos Rendimentos de Cotas Capital sem desconto IR (Marcos-Supero)

				26/04/2017 - Ajuste para retirar o uso de campos removidos da tabela
			                 crapass, crapttl, crapjur 
							 (Adriano - P339).

  ---------------------------------------------------------------------------------------------------------------*/
  DECLARE
        -- Busca dos dados da cooperativa
        CURSOR cr_crapcop (pr_cdcooper IN crapcop.cdcooper%TYPE) IS
          SELECT crapcop.nmrescop
                ,crapcop.nmextcop
                ,crapcop.nrdocnpj
                ,crapcop.dsendcop
                ,crapcop.nrendcop
                ,crapcop.nmbairro
                ,crapcop.nrcepend
                ,crapcop.nmcidade
                ,crapcop.cdufdcop 
                ,crapcop.nrtelvoz
          FROM crapcop crapcop
          WHERE crapcop.cdcooper = pr_cdcooper;
        rw_crapcop cr_crapcop%ROWTYPE;  
        -- Busca dos dados do associado
        CURSOR cr_crapass(pr_cdcooper IN crapcop.cdcooper%TYPE
                         ,pr_nrdconta IN crapass.nrdconta%TYPE) IS
          SELECT crapass.nrdconta
                ,crapass.nmprimtl
                ,crapass.vllimcre
                ,crapass.nrcpfcgc
                ,crapass.inpessoa
                ,crapass.cdcooper
                ,crapass.cdagenci
                ,crapass.nrctainv
          FROM crapass crapass
          WHERE crapass.cdcooper = pr_cdcooper
          AND   crapass.nrdconta = pr_nrdconta;
        rw_crapass cr_crapass%ROWTYPE;
        -- Selecionar Credito Retorno de Sobras 
        CURSOR cr_craplct (pr_cdcooper IN craplct.cdcooper%type
                          ,pr_anorefer IN INTEGER
                          ,pr_cdagenci IN craplct.cdagenci%type
                          ,pr_cdbccxlt IN craplct.cdbccxlt%type
                          ,pr_nrdolote IN craplct.nrdolote%type
                          ,pr_nrdconta IN craplct.nrdconta%type) IS
          SELECT nvl(sum(craplct.vllanmto),0) vllanmto
          FROM craplct craplct
          WHERE craplct.cdcooper = pr_cdcooper       
          AND   to_number(to_char(craplct.dtmvtolt,'YYYY')) = pr_anorefer 
          AND   craplct.cdagenci = pr_cdagenci                  
          AND   craplct.cdbccxlt = pr_cdbccxlt               
          AND   craplct.nrdolote = pr_nrdolote              
          AND   craplct.nrdconta = pr_nrdconta       
          AND   craplct.cdhistor IN (sobr0001.vr_cdhisopc_cot,sobr0001.vr_cdhisdpp_cot
                                    ,sobr0001.vr_cdhisdpa_cot,sobr0001.vr_cdhistar_cot
                                    ,sobr0001.vr_cdhisaut_cot,sobr0001.vr_cdhisdep_cot);
        -- Selecionar Credito Retorno de Sobras em CC
        CURSOR cr_craplcm (pr_cdcooper IN craplcm.cdcooper%type
                          ,pr_anorefer IN INTEGER
                          ,pr_cdagenci IN craplcm.cdagenci%type
                          ,pr_cdbccxlt IN craplcm.cdbccxlt%type
                          ,pr_nrdolote IN craplcm.nrdolote%type
                          ,pr_nrdconta IN craplcm.nrdconta%type) IS
          SELECT nvl(sum(craplcm.vllanmto),0) vllanmto
          FROM craplcm craplcm
          WHERE craplcm.cdcooper = pr_cdcooper
          AND   to_number(to_char(craplcm.dtmvtolt,'YYYY')) = pr_anorefer
          AND   craplcm.cdagenci = pr_cdagenci
          AND   craplcm.cdbccxlt = pr_cdbccxlt
          AND   craplcm.nrdolote = pr_nrdolote
          AND   craplcm.nrdconta = pr_nrdconta
          AND   craplcm.cdhistor IN (sobr0001.vr_cdhisopc_cta,sobr0001.vr_cdhisdpp_cta
                                    ,sobr0001.vr_cdhisdpa_cta,sobr0001.vr_cdhistar_cta
                                    ,sobr0001.vr_cdhisaut_cta,sobr0001.vr_cdhisdep_cta);

		CURSOR cr_crapttl(pr_cdcooper IN crapttl.cdcooper%TYPE
		                 ,pr_nrdconta IN crapttl.nrdconta%TYPE)IS
		SELECT crapttl.nmextttl
		  FROM crapttl
		WHERE crapttl.cdcooper = pr_cdcooper
		  AND crapttl.nrdconta = pr_nrdconta
		  AND crapttl.idseqttl = 2;

        --Variaveis Locais
        vr_flgemiss BOOLEAN;
        vr_inrelext INTEGER;
        vr_dsextrat VARCHAR2(100);
        vr_rel_dsagenci VARCHAR2(100);
        vr_rel_nmresemp VARCHAR2(100);
        vr_rel_qtjaicmf NUMBER;
        vr_rel_qtjaicm1 NUMBER;
        vr_rel_vlrenapl NUMBER;
        vr_rel_vlrenap1 NUMBER;
        vr_rel_vldjuros NUMBER;
        vr_rel_vlsobras NUMBER;
        vr_rel_nmmesano VARCHAR2(100);
        vr_rel_ddmesano INTEGER;
        vr_rel_aamesano INTEGER;
        vr_rel_dscooper VARCHAR2(100);
        vr_rel_dsendcop VARCHAR2(100);
        vr_rel_dsendcop##1 VARCHAR2(100);
        vr_rel_dsendcop##2 VARCHAR2(100);
        vr_rel_dstelcop VARCHAR2(100);
        vr_mfx_vlsddvem NUMBER;
        vr_mfx_vlsdccdp NUMBER;
        vr_mfx_vlsdapli NUMBER;
        vr_mfx_vlttccap NUMBER;
        vr_mfx_dtmvtolt DATE;
        vr_mfx_vlsddve1 NUMBER;
        vr_mfx_vlsdccd1 NUMBER;
        vr_mfx_vlsdapl1 NUMBER;
        vr_mfx_vlttcca1 NUMBER;
        vr_mfx_dtmvtol1 DATE;
        vr_contador INTEGER;
        vr_regexis1 BOOLEAN;
        vr_flgescra BOOLEAN;
        vr_regexist BOOLEAN;
        vr_cdacesso VARCHAR2(100);
        vr_dscomand VARCHAR2(100);
        vr_dtmvtolt DATE;
        vr_vlmoefix NUMBER(35,8);
        vr_vlmoefi1 NUMBER(35,8);
        vr_nmcidade VARCHAR2(100);
        vr_rel_vlrencot NUMBER;
        vr_rel_vlirfcot NUMBER;
        vr_ant_vlirfcot NUMBER;
        vr_rel_vlprepag NUMBER;
        vr_ant_vlprepag NUMBER;
        vr_rel_vlrendim NUMBER;
        vr_rel_vlcpmfpg NUMBER;
        vr_rel_vldoirrf NUMBER;
        vr_rel_dscpmfpg VARCHAR2(100);
        vr_rel_nrcpfcgc VARCHAR2(100);
        vr_rel_aarefere VARCHAR2(100);
        vr_rel_nrdocnpj VARCHAR2(100);
        vr_ant_dtrefere DATE;
        vr_sol_dtrefere DATE;
        vr_ant_vlsdapli NUMBER;
        vr_sol_vlsdapli NUMBER;
        vr_ant_vlpoupan NUMBER;
        vr_sol_vlpoupan NUMBER;
        vr_ant_vlfundos NUMBER;
        vr_sol_vlfundos NUMBER;
        vr_ant_vlrenfix NUMBER;
        vr_sol_vlrenfix NUMBER;
        vr_ant_vlsdccdp NUMBER;
        vr_sol_vlsdccdp NUMBER;
        vr_ant_vlsddvem NUMBER;
        vr_sol_vlsddvem NUMBER;
        vr_ant_vlttccap NUMBER;
        vr_sol_vlttccap NUMBER;
        vr_ren_vlpoupan NUMBER;
        vr_ren_vlfundos NUMBER;
        vr_tot_vlrendim NUMBER;
        vr_lit_dsanoant VARCHAR2(100);
        vr_flganter BOOLEAN;
        vr_dtemissa DATE;
        vr_vlrentot NUMBER;
        vr_vlirfont NUMBER;
        vr_nmmesref VARCHAR2(100);
        vr_nrmesref INTEGER;
        vr_cdretenc VARCHAR2(100);
        vr_dsretenc VARCHAR2(100);
        vr_nrdconta VARCHAR2(100);
        vr_cdagectl VARCHAR2(100);
        vr_cdoperad VARCHAR2(100):= pr_cdoperad;
        vr_nmdatela VARCHAR2(100):= pr_nmdatela;
        vr_dsorigem VARCHAR2(100);
        vr_dstransa VARCHAR2(100);
        vr_flgano2009 VARCHAR2(1);
		vr_nmsegntl crapttl.nmextttl%TYPE;

        vr_nrdrowid ROWID;
        --Variaveis de indices
        vr_index PLS_INTEGER;
        vr_index_retenc PLS_INTEGER;
        --Variaveis dos Arquivos
        vr_typ_saida VARCHAR2(3);
        vr_comando   VARCHAR2(100);
        vr_nmdireto  VARCHAR2(100);
        vr_nmendter  VARCHAR2(100);
        vr_setlinha  VARCHAR2(100);  
        --Tabelas para Armazenar Informacoes do Extrato e Retencao
        vr_tab_extrato_ir  typ_tab_extrato_ir;
        vr_tab_retencao_ir typ_tab_retencao_ir;
        --CLOB de Dados
        vr_clobxml44    CLOB;
        vr_dstexto44    VARCHAR2(32600);
        vr_texto_retenc VARCHAR2(32600);
        vr_dstexto      VARCHAR2(4000);
        --Tabela Extrato Investimento
        vr_tab_extrato_inv typ_tab_extrato_inv;
        --Variaveis de Erro
        vr_cdcritic INTEGER;
        vr_dscritic VARCHAR2(4000);
        --Variaveis de Excecoes
        vr_exc_erro EXCEPTION;
        vr_exc_sair EXCEPTION;
        
        vr_nmaction VARCHAR2(32) := 'pc_gera_impextir';
        
      BEGIN
        gene0001.pc_set_modulo(pr_module => NULL, pr_action => vr_nmaction);
        --Inicializar transacao
        vr_dsorigem:= gene0001.vr_vet_des_origens(pr_idorigem);
        vr_dstransa:= 'Consultar dados para informe de rendimentos.'; 
        --Inicializar Variaveis
        vr_cdcritic:= 0;
        vr_dscritic:= NULL;
        pr_des_reto:= 'NOK'; 
        --Verificar Operador e nome da tela
        IF pr_inproces = 1 THEN
          vr_cdoperad:= pr_cdoperad;
          vr_nmdatela:= pr_nmdatela;
        ELSE
          vr_cdoperad:= '1';  
          vr_nmdatela:= upper(pr_cdprogra);
        END IF;  
        /* Bloco Imprime */
        BEGIN
          --Limpar Tabela Erro
          pr_tab_erro.DELETE;
          -- Verifica se a cooperativa esta cadastrada
          OPEN cr_crapcop (pr_cdcooper => pr_cdcooper);
          FETCH cr_crapcop INTO rw_crapcop;
          -- Se não encontrar
          IF cr_crapcop%NOTFOUND THEN
            -- Fechar o cursor pois haverá raise
            CLOSE cr_crapcop;
            -- Montar mensagem de critica
            vr_cdcritic:= 651;
            RAISE vr_exc_erro;
          ELSE
            -- Apenas fechar o cursor
            CLOSE cr_crapcop;
          END IF;
          -- Busca do diretório base da cooperativa para a geração de relatórios
          vr_nmdireto:= gene0001.fn_diretorio(pr_tpdireto => 'C'           --> /usr/coop
                                                 ,pr_cdcooper => pr_cdcooper   --> Cooperativa
                                               ,pr_nmsubdir => 'rl');       --> Utilizaremos o rl

          -- Inicializar as informações do XML de dados para o relatório
          dbms_lob.createtemporary(vr_clobxml44, TRUE, dbms_lob.CALL);
          dbms_lob.open(vr_clobxml44, dbms_lob.lob_readwrite);
          --Escrever no arquivo XML
          gene0002.pc_escreve_xml(vr_clobxml44, vr_dstexto44,'<?xml version="1.0" encoding="UTF-8"?><crrl044><contas>');
                                                    
          gene0001.pc_set_modulo(pr_module => NULL, pr_action => vr_nmaction);

          --Se nao deve rodar
          IF NOT pr_flgrodar THEN 
            --Nome Arquivo Impressao
            pr_nmarqimp:= 'crrl044.lst';
          ELSE 
            --Nome Arquivo Impressao e PDF
            vr_nmendter:= pr_dsiduser || gene0002.fn_busca_time;
            pr_nmarqimp:= vr_nmendter || '.ex';
            pr_nmarqpdf:= vr_nmendter || '.pdf';
          END IF;
          --Selecionar associado
          OPEN cr_crapass (pr_cdcooper => pr_cdcooper
                          ,pr_nrdconta => pr_nrdconta);
          --Posicionar no proximo registro
          FETCH cr_crapass INTO rw_crapass;
          --Se nao encontrou
          IF cr_crapass%NOTFOUND THEN
            --Fechar Cursor
            CLOSE cr_crapass;
            --mensagem erro
            vr_cdcritic:= 9;
            vr_dscritic:= NULL;
            --Colocar todo o texto na variavel auxiliar
            vr_dstexto:= '<conta nrdconta="'||to_char(pr_nrdconta,'fm9g999g999g0')||
                   '" flgmensag="S" dscmensag="'||vr_dscritic||'"></conta>';
            --Escrever no Arquivo
            gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);

            --Popular Clob do relatorio interno
            gene0002.pc_escreve_xml(vr_clobxml44, vr_dstexto44,vr_dstexto);

            --Levantar Excecao
            RAISE vr_exc_sair;
          END IF;  
          --Fechar Cursor
          CLOSE cr_crapass;

          gene0001.pc_set_modulo(pr_module => NULL, pr_action => vr_nmaction);

		  IF rw_crapass.inpessoa = 1 THEN

		    OPEN cr_crapttl(pr_cdcooper => rw_crapass.cdcooper
			               ,pr_nrdconta => rw_crapass.nrdconta);

		    FETCH cr_crapttl INTO vr_nmsegntl;

			CLOSE cr_crapttl;

		  END IF;

          --Consultar Imposto de Renda
          pc_consulta_imposto_renda (pr_cdcooper => pr_cdcooper               --Codigo Cooperativa
                                    ,pr_cdagenci => pr_cdagenci               --Codigo Agencia
                                    ,pr_nrdcaixa => pr_nrdcaixa               --Numero do Caixa
                                    ,pr_cdoperad => vr_cdoperad               --Codigo Operador
                                    ,pr_nmdatela => pr_cdprogra               --Nome da Tela
                                    ,pr_idorigem => pr_idorigem               --Origem dos Dados
                                    ,pr_dtmvtolt => pr_dtmvtolt               --Data Movimento
                                    ,pr_nrdconta => pr_nrdconta               --Numero da Conta do Associado
                                    ,pr_nranoref => pr_anorefer               --Ano de Referencia                                
                                    ,pr_tpextrat => pr_tpextrat               --Tipo de Extrato
                                    ,pr_tab_extrato_ir => vr_tab_extrato_ir   --Extrato IR
                                    ,pr_tab_retencao_ir => vr_tab_retencao_ir --Retencoes do IR
                                    ,pr_tab_erro => pr_tab_erro               --Tabela de Erros
                                    ,pr_des_reto => pr_des_reto);             --Descricao Erro
                                    
          gene0001.pc_set_modulo(pr_module => NULL, pr_action => vr_nmaction);
                                    
          --Se ocorreu erro
          IF pr_des_reto = 'NOK' OR vr_tab_extrato_ir.COUNT = 0 THEN 
            --Se nao deu erro e a tabela está vazia
            IF pr_des_reto = 'OK' AND vr_tab_extrato_ir.COUNT = 0 THEN
              vr_dscritic:= 'Nao foi possivel gerar o extratro IR.';
            ELSE  
              --se tem erro na tabela 
              IF pr_tab_erro.COUNT > 0 THEN
                vr_dscritic:= pr_tab_erro(pr_tab_erro.FIRST).dscritic;
              ELSE
                vr_dscritic:= 'Nao foi possivel carregar o extrato.';
              END IF;  
            END IF; 
            --Colocar todo o texto na variavel auxiliar
            vr_dstexto:= '<conta nrdconta="'||to_char(pr_nrdconta,'fm9g999g999g0')||
                   '" flgmensag="S" dscmensag="'||vr_dscritic||'"></conta>';
            --Escrever no Arquivo
            gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);

            --Popular Clob do relatorio interno
            gene0002.pc_escreve_xml(vr_clobxml44, vr_dstexto44,vr_dstexto);

            --Levantar Excecao
            RAISE vr_exc_sair;
          END IF;
          --Buscar a primeira ocorrencia do extrato
          vr_index:= vr_tab_extrato_ir.FIRST;
          --Ano Referencia
          IF pr_anorefer > 1994 THEN 
            --Popular Variaveis 
            vr_rel_aarefere:= pr_anorefer;
            vr_rel_nrcpfcgc:= vr_tab_extrato_ir(vr_index).nrcpfcgc;
            vr_lit_dsanoant:= vr_tab_extrato_ir(vr_index).dsanoant;
            vr_ant_dtrefere:= vr_tab_extrato_ir(vr_index).dtrefer1;
            vr_ant_vlsdapli:= vr_tab_extrato_ir(vr_index).vlsdapl1;
            vr_ant_vlsdccdp:= vr_tab_extrato_ir(vr_index).vlsdccd1;
            vr_ant_vlsddvem:= vr_tab_extrato_ir(vr_index).vlsddve1;
            vr_ant_vlttccap:= vr_tab_extrato_ir(vr_index).vlttcca1;
            vr_sol_dtrefere:= vr_tab_extrato_ir(vr_index).dtrefer2;
            vr_sol_vlsdapli:= vr_tab_extrato_ir(vr_index).vlsdapl2;
            vr_sol_vlsdccdp:= vr_tab_extrato_ir(vr_index).vlsdccd2;
            vr_sol_vlsddvem:= vr_tab_extrato_ir(vr_index).vlsddve2;
            vr_sol_vlttccap:= vr_tab_extrato_ir(vr_index).vlttcca2;
            vr_rel_vlrendim:= vr_tab_extrato_ir(vr_index).vlrendim;
            vr_rel_nrdocnpj:= 'CNPJ: '||gene0002.fn_mask_cpf_cnpj(rw_crapcop.nrdocnpj,2);
            vr_rel_dsendcop##1:= rw_crapcop.dsendcop ||', '||to_char(rw_crapcop.nrendcop,'fm99g990')|| 
                                 ' - '|| rw_crapcop.nmbairro;
            vr_rel_dsendcop##2:= gene0002.fn_mask_cep(rw_crapcop.nrcepend)||' - '|| rw_crapcop.nmcidade|| 
                                 ' - '||rw_crapcop.cdufdcop ||'  - TELEFONE: '||rw_crapcop.nrtelvoz;
            vr_rel_dscpmfpg:= vr_tab_extrato_ir(vr_index).dscpmfpg;
            vr_rel_vlcpmfpg:= vr_tab_extrato_ir(vr_index).vlcpmfpg;
            vr_rel_vldoirrf:= vr_tab_extrato_ir(vr_index).vldoirrf;
            vr_flganter:= vr_tab_extrato_ir(vr_index).flganter;
            vr_nrdconta:= to_char(vr_tab_extrato_ir(vr_index).nrdconta,'fm9999g999g0');
            vr_cdagectl:= to_char(vr_tab_extrato_ir(vr_index).cdagectl,'fm90000');
            vr_rel_vlrencot:= vr_tab_extrato_ir(vr_index).vlrencot;
            vr_rel_vlirfcot:= vr_tab_extrato_ir(vr_index).vlirfcot;
            vr_ant_vlirfcot:= vr_tab_extrato_ir(vr_index).anirfcot;
            vr_rel_vlprepag:= vr_tab_extrato_ir(vr_index).vlprepag;
            vr_ant_vlprepag:= vr_tab_extrato_ir(vr_index).anprepag;
            --Extrato de Pessoa Fisica
            IF pr_tpextrat = 2 THEN
              
              /* Credito Retorno de Sobras */
              vr_rel_vlsobras:= 0;  
              FOR rw_craplct IN  cr_craplct (pr_cdcooper => pr_cdcooper
                              ,pr_anorefer => pr_anorefer
                                            ,pr_cdagenci => sobr0001.vr_cdagenci
                                            ,pr_cdbccxlt => sobr0001.vr_cdbccxlt
                                            ,pr_nrdolote => sobr0001.vr_nrdolote
                              ,pr_nrdconta => pr_nrdconta) LOOP
                vr_rel_vlsobras := vr_rel_vlsobras + rw_craplct.vllanmto;                                
              END LOOP;

               /* Credito Retorno de Sobras em CC */
              FOR rw_craplcm IN  cr_craplcm (pr_cdcooper => pr_cdcooper
                                            ,pr_anorefer => pr_anorefer
                                            ,pr_cdagenci => sobr0001.vr_cdagenci
                                            ,pr_cdbccxlt => sobr0001.vr_cdbccxlt
                                            ,pr_nrdolote => sobr0001.vr_nrdolote
                                            ,pr_nrdconta => pr_nrdconta) LOOP
                vr_rel_vlsobras := vr_rel_vlsobras + rw_craplcm.vllanmto;
              END LOOP;

              --Se tem anterior
              IF NOT vr_flganter THEN
                --Deixar informacoes nulas
                vr_lit_dsanoant:= NULL;
                vr_ant_dtrefere:= NULL;
                vr_ant_vlsdapli:= NULL;
                vr_ant_vlsdccdp:= NULL;
                vr_ant_vlsddvem:= NULL;
                vr_ant_vlttccap:= NULL;
                vr_ant_vlirfcot:= NULL;
                vr_ant_vlprepag:= NULL;
              END IF;
              --Valor pago CPMF
              IF nvl(vr_rel_vlcpmfpg,0) <= 0 THEN
                vr_rel_vlcpmfpg:= NULL;
              END IF;  
              --Verificar qual Extrato Imprimir
              IF vr_rel_aarefere = 2009  THEN
                vr_flgano2009:= 'S';
              ELSIF vr_rel_aarefere > 2009 THEN
                vr_flgano2009:= 'N';
              END IF;  
              --Colocar todo o texto na variavel auxiliar
              vr_dstexto:= 
                '<conta tpextrat="F" flgmensag="N" dscmensag="" rel_aarefere="'||vr_rel_aarefere || 
                        '" rel_nrcpfcgc="' || vr_rel_nrcpfcgc                                 ||
                        '" nmprimtl="'     || RPAD(rw_crapass.nmprimtl,40,' ')                || 
                        '" cdagenci="'     || rw_crapass.cdagenci                             || 
                        '" nrdconta="'     || to_char(rw_crapass.nrdconta,'fm9999g999g0')     ||
                        '" nmsegntl="'     || RPAD(vr_nmsegntl,40,' ')                || 
                        '" rel_vlsobras="' || to_char(vr_rel_vlsobras,'fm999g999g990d00mi')   || 
                        '" lit_dsanoant="' || vr_lit_dsanoant                                 || 
                        '" ant_dtrefere="' || to_char(vr_ant_dtrefere,'DD/MM/YYYY')           || 
                        '" ant_vlsdapli="' || to_char(vr_ant_vlsdapli,'fm9g999g999g990d00mi') ||
                        '" ant_vlsdccdp="' || to_char(vr_ant_vlsdccdp,'fm99999g999g990d00mi') || 
                        '" ant_vlsddvem="' || to_char(vr_ant_vlsddvem,'fm99999g999g990d00mi') || 
                        '" ant_vlttccap="' || to_char(vr_ant_vlttccap,'fm99999g999g990d00mi') ||
                        '" ant_vlirfcot="' || to_char(vr_ant_vlirfcot,'fm99999g999g990d00mi') || 
                        '" sol_dtrefere="' || to_char(vr_sol_dtrefere,'DD/MM/YYYY')           || 
                        '" sol_vlsdapli="' || to_char(vr_sol_vlsdapli,'fm9g999g999g990d00mi') || 
                        '" sol_vlsdccdp="' || to_char(vr_sol_vlsdccdp,'fm99999g999g990d00mi') ||
                        '" sol_vlsddvem="' || to_char(vr_sol_vlsddvem,'fm99999g999g990d00mi') || 
                        '" sol_vlttccap="' || to_char(vr_sol_vlttccap,'fm99999g999g990d00mi') || 
                        '" rel_vlrendim="' || to_char(vr_rel_vlrendim,'fm999g999g990d00mi')   || 
                        '" rel_vlrencot="' || to_char(vr_rel_vlrencot,'fm999g999g990d00mi')   || 
                        '" rel_vlirfcot="' || to_char(vr_rel_vlirfcot,'fm99999g999g990d00mi') || 
                        '" rel_vlprepag="' || to_char(vr_rel_vlprepag,'fm99999g999g990d00mi') ||
                        '" ant_vlprepag="' || to_char(vr_ant_vlprepag,'fm99999g999g990d00mi') ||
                        '" nmextcop="'     || rw_crapcop.nmextcop                             || 
                        '" rel_nrdocnpj="' || vr_rel_nrdocnpj                                 || 
                        '" rel_dsendcop="' || vr_rel_dsendcop##1                              ||
                        '" rel_dsendcop2="'|| vr_rel_dsendcop##2                              || 
                        '" rel_dscpmfpg="' || vr_rel_dscpmfpg                                 || 
                        '" rel_vlcpmfpg="' || to_char(vr_rel_vlcpmfpg,'fm99999g999g990d00mi') || 
                        '" rel_vldoirrf="' || to_char(vr_rel_vldoirrf,'fm99999g999g990d00mi') || 
                        '" flgano2009="'   || vr_flgano2009                                   || 
                        '" cdagectl="'     || RPAD(vr_cdagectl,15,' ') || 
                        '" dtemissa="" flgant94="N"><retencoes></retencoes></conta>';
              --Escrever no XML
              gene0002.pc_escreve_xml(pr_clobxml,pr_dstexto,vr_dstexto);

              --Escrever no XML interno
              gene0002.pc_escreve_xml(vr_clobxml44,vr_dstexto44,vr_dstexto);

            ELSE /* Extrato de pessoa juridica */ 
              /* Credito Retorno de Sobras */
              vr_rel_vlsobras:= 0;  
              FOR rw_craplct IN  cr_craplct (pr_cdcooper => pr_cdcooper
                              ,pr_anorefer => pr_anorefer
                                            ,pr_cdagenci => sobr0001.vr_cdagenci
                                            ,pr_cdbccxlt => sobr0001.vr_cdbccxlt
                                            ,pr_nrdolote => sobr0001.vr_nrdolote
                              ,pr_nrdconta => pr_nrdconta) LOOP
                vr_rel_vlsobras := vr_rel_vlsobras + rw_craplct.vllanmto;                                
              END LOOP;

               /* Credito Retorno de Sobras em CC */
              FOR rw_craplcm IN  cr_craplcm (pr_cdcooper => pr_cdcooper
                                            ,pr_anorefer => pr_anorefer
                                            ,pr_cdagenci => sobr0001.vr_cdagenci
                                            ,pr_cdbccxlt => sobr0001.vr_cdbccxlt
                                            ,pr_nrdolote => sobr0001.vr_nrdolote
                                            ,pr_nrdconta => pr_nrdconta) LOOP
                vr_rel_vlsobras := vr_rel_vlsobras + rw_craplcm.vllanmto;
              END LOOP;

              --Se tem anterior
              IF pr_anorefer = to_number(to_char(pr_dtmvtolt,'YYYY')) THEN
                --Deixar informacoes nulas
                vr_sol_vlsdccdp:= NULL;
                vr_sol_vlttccap:= NULL;
                vr_sol_vlsddvem:= NULL;
                vr_rel_vlrencot:= NULL;
                vr_sol_vlsdapli:= NULL;
              END IF;
              --Colocar todo o texto na variavel auxiliar
              vr_dstexto:= 
                 '<conta tpextrat="J" flgmensag="N" dscmensag="" rel_aarefere="'||vr_rel_aarefere || 
                        '" nmextcop="'      || rw_crapcop.nmextcop                             ||
                        '" rel_nrdocnpj="'  || vr_rel_nrdocnpj                                 ||
                        '" rel_dsendcop="'  || vr_rel_dsendcop##1                              ||
                        '" rel_dsendcop2="' || vr_rel_dsendcop##2                              ||
                        '" rel_nrcpfcgc="'  || vr_rel_nrcpfcgc                                 ||
                        '" nmprimtl="'      || rw_crapass.nmprimtl                             ||
                        '" cdagenci="'      || rw_crapass.cdagenci                             ||
                        '" nrdconta="'      || to_char(rw_crapass.nrdconta,'fm9999g999g0')     ||
                        '" nmsegntl="'      || vr_nmsegntl                             ||
                        '" lit_dsanoant="'  || vr_lit_dsanoant                                 ||
                        '" ant_dtrefere="'  || to_char(vr_ant_dtrefere,'DD/MM/YYYY')           ||
                        '" ant_vlsdccdp="'  || to_char(vr_ant_vlsdccdp,'fm99999g999g990d00mi') ||
                        '" ant_vlsddvem="'  || to_char(vr_ant_vlsddvem,'fm99999g999g990d00mi') ||
                        '" ant_vlttccap="'  || to_char(vr_ant_vlttccap,'fm99999g999g990d00mi') ||
                        '" ant_vlsdapli="'  || to_char(vr_ant_vlsdapli,'fm9g999g999g990d00mi') ||
                        '" sol_dtrefere="'  || to_char(vr_sol_dtrefere,'DD/MM/YYYY')           ||
                        '" sol_vlsdccdp="'  || to_char(vr_sol_vlsdccdp,'fm99999g999g990d00mi') ||
                        '" sol_vlttccap="'  || to_char(vr_sol_vlttccap,'fm99999g999g990d00mi') ||
                        '" sol_vlsddvem="'  || to_char(vr_sol_vlsddvem,'fm99999g999g990d00mi') ||
                        '" rel_vlrencot="'  || to_char(vr_rel_vlrencot,'fm999g999g990d00mi')   ||
                        '" sol_vlsdapli="'  || to_char(vr_sol_vlsdapli,'fm9g999g999g990d00mi') ||
                        '" rel_vlsobras="'  || to_char(vr_rel_vlsobras,'fm999g999g990d00mi')   ||
                        '" rel_vlrendim="'  || to_char(vr_rel_vlrendim,'fm999g999g990d00mi')   ||
                        '" dtemissa="'      || to_char(SYSDATE,'DD/MM/YYYY')                   || 
                        '" ant_vlirfcot="" rel_vlirfcot="" rel_dscpmfpg="" rel_vlcpmfpg="" '   ||
                        '  ant_vlprepag="" rel_vlprepag="" '                                   ||
                        '  rel_vldoirrf="" flgano2009="N" flgant94="N" cdagectl=""><retencoes>';
              --Limpar String retencoes
              vr_texto_retenc:= NULL;
              --Selecionar Retencoes
              vr_index_retenc:= vr_tab_retencao_ir.FIRST;
              WHILE vr_index_retenc IS NOT NULL LOOP
                vr_texto_retenc:= vr_texto_retenc||
                '<retencao>' ||
                   '<nmmesref>' || SUBSTR(vr_tab_retencao_ir(vr_index_retenc).nmmesref,1,3)  || '</nmmesref>' ||
                   '<cdretenc>' || SUBSTR(vr_tab_retencao_ir(vr_index_retenc).cdretenc,1,4)  || '</cdretenc>' ||
                   '<dsretenc>' || SUBSTR(vr_tab_retencao_ir(vr_index_retenc).dsretenc,1,41) || '</dsretenc>' ||
                   '<vlrentot>' || to_char(vr_tab_retencao_ir(vr_index_retenc).vlrentot,'fm99g999g990d00mi') || '</vlrentot>' ||
                   '<vlirfont>' || to_char(vr_tab_retencao_ir(vr_index_retenc).vlirfont,'fm99g999g990d00mi') || '</vlirfont>' ||
                '</retencao>'; 
                --Proximo Registro
                 vr_index_retenc:= vr_tab_retencao_ir.NEXT(vr_index_retenc);  
              END LOOP;   
              --Junta todos os textos para colocar no XML    
               vr_dstexto:= vr_dstexto||vr_texto_retenc||'</retencoes></conta>';
              --Escrever no XML
              gene0002.pc_escreve_xml(pr_clobxml,pr_dstexto,vr_dstexto);

              --Escrever no XML interno
              gene0002.pc_escreve_xml(vr_clobxml44,vr_dstexto44,vr_dstexto);
            END IF;  
          ELSE /* Ano Referencia Anterior a 1994 */
            --Popular Variaveis para Extrato
            vr_nmcidade:= vr_tab_extrato_ir(vr_index).nmcidade;
            vr_rel_dsagenci:= vr_tab_extrato_ir(vr_index).dsagenci;
            vr_rel_ddmesano:= to_number(to_char(pr_dtmvtolt,'DD'));
            vr_rel_aamesano:= to_number(to_char(pr_dtmvtolt,'YYYY'));
            vr_rel_nmmesano:= gene0001.vr_vet_nmmesano(to_number(to_char(pr_dtmvtolt,'MM')));
            vr_mfx_dtmvtolt:= vr_tab_extrato_ir(vr_index).dtmvtolt;
            vr_mfx_dtmvtol1:= vr_tab_extrato_ir(vr_index).dtmvtol1;
            vr_mfx_vlsddvem:= vr_tab_extrato_ir(vr_index).vlsddvem;
            vr_mfx_vlsddve1:= vr_tab_extrato_ir(vr_index).vlsddve1;
            vr_mfx_vlsdccdp:= vr_tab_extrato_ir(vr_index).vlsdccdp;
            vr_mfx_vlsdccd1:= vr_tab_extrato_ir(vr_index).vlsdccd1;
            vr_mfx_vlsdapli:= vr_tab_extrato_ir(vr_index).vlsdapli;
            vr_mfx_vlsdapl1:= vr_tab_extrato_ir(vr_index).vlsdapl1;
            vr_mfx_vlttccap:= vr_tab_extrato_ir(vr_index).vlttccap;
            vr_mfx_vlttcca1:= vr_tab_extrato_ir(vr_index).vlttcca1;
            vr_rel_qtjaicmf:= vr_tab_extrato_ir(vr_index).qtjaicmf;
            vr_rel_qtjaicm1:= vr_tab_extrato_ir(vr_index).qtjaicm1;
            vr_rel_vlrenapl:= vr_tab_extrato_ir(vr_index).vlrenapl;
            vr_rel_vlrenap1:= vr_tab_extrato_ir(vr_index).vlrenap1;
            vr_vlmoefix:= vr_tab_extrato_ir(vr_index).vlmoefix;
            vr_vlmoefi1:= vr_tab_extrato_ir(vr_index).vlmoefi1;
            vr_rel_dscooper:= vr_tab_extrato_ir(vr_index).dscooper;
            vr_rel_dsendcop:= vr_tab_extrato_ir(vr_index).dsendcop##1;
            vr_rel_dstelcop:= vr_tab_extrato_ir(vr_index).dstelcop;
            vr_regexis1:= vr_tab_extrato_ir(vr_index).regexis1;
            --Se possui registro
            IF NOT vr_regexis1 THEN
              vr_mfx_dtmvtolt:= NULL;
              vr_mfx_vlsddvem:= NULL;
              vr_mfx_vlsdccdp:= NULL;
              vr_mfx_vlsdapli:= NULL;
              vr_mfx_vlttccap:= NULL;
              vr_rel_qtjaicmf:= NULL;
              vr_rel_vlrenapl:= NULL;
              vr_vlmoefix:= NULL;
            END IF; 
            --Colocar todo o texto na variavel auxiliar   
            vr_dstexto:= 
              '<conta nrdconta="'||to_char(vr_tab_extrato_ir(vr_index).nrdconta,'fm9999g999g0')    ||
                 '" tpextrat="9" flgmensag="N" dscmensag="" flgant94="S" nmcidade94="'||vr_nmcidade|| 
                 '" ddmesano94="' || vr_rel_ddmesano                                               || 
                 '" nmmesano94="' || vr_rel_nmmesano                                               || 
                 '" aamesano94="' || vr_rel_aamesano                                               ||
                 '" nrdconta94="' || to_char(vr_tab_extrato_ir(vr_index).nrdconta,'fm9999g999g0')  || 
                 '" nmprimtl94="' || RPAD(vr_tab_extrato_ir(vr_index).nmprimtl,40,' ')             || 
                 '" dsagenci94="' || RPAD(vr_rel_dsagenci,21,' ')                                  || 
                 '" dtmvtolt94="' || to_char(vr_mfx_dtmvtolt,'DD/MM/YYYY')                         || 
                 '" dtmvtol194="' || to_char(vr_mfx_dtmvtol1,'DD/MM/YYYY')                         || 
                 '" vlsddvem94="' || to_char(vr_mfx_vlsddvem,'fm99999g999g990d00mi')               || 
                 '" vlsddve194="' || to_char(vr_mfx_vlsddve1,'fm99999g999g990d00mi')               || 
                 '" vlsdccdp94="' || to_char(vr_mfx_vlsdccdp,'fm99999g999g990d00mi')               || 
                 '" vlsdccd194="' || to_char(vr_mfx_vlsdccd1,'fm99999g999g990d00mi')               || 
                 '" vlsdapli94="' || to_char(vr_mfx_vlsdapli,'fm9g999g999g990d00mi')               || 
                 '" vlsdapl194="' || to_char(vr_mfx_vlsdapl1,'fm9g999g999g990d00mi')               || 
                 '" vlttccap94="' || to_char(vr_mfx_vlttccap,'fm99999g999g990d00mi')               || 
                 '" vlttcca194="' || to_char(vr_mfx_vlttcca1,'fm99999g999g990d00mi')               || 
                 '" qtjaicmf94="' || to_char(vr_rel_qtjaicmf,'fm99999g999g990d00mi')               || 
                 '" qtjaicm194="' || to_char(vr_rel_qtjaicm1,'fm99999g999g990d00mi')               || 
                 '" vlrenapl94="' || to_char(vr_rel_vlrenapl,'fm9g999g999g990d00mi')               || 
                 '" vlrenap194="' || to_char(vr_rel_vlrenap1,'fm9g999g999g990d00mi')               || 
                 '" vlmoefix94="' || to_char(vr_vlmoefix,'fm999g999g990d0000')                     || 
                 '" vlmoefi194="' || to_char(vr_vlmoefi1,'fm9999g999g990d0000')                    || 
                 '" dscooper94="' || RPAD(vr_rel_dscooper,69,' ')                                  || 
                 '" dsendcop94="' || RPAD(vr_rel_dsendcop,69,' ')                                  || 
                 '" dstelcop94="' || RPAD(vr_rel_dstelcop,69,' ')||'><retencoes></retencoes></conta>';
            --Escrever no XML
            gene0002.pc_escreve_xml(pr_clobxml,pr_dstexto,vr_dstexto);

            --Escrever no XML interno
            gene0002.pc_escreve_xml(vr_clobxml44,vr_dstexto44,vr_dstexto);

          END IF;  

          gene0001.pc_set_modulo(pr_module => NULL, pr_action => vr_nmaction);

          IF pr_flgrodar = TRUE THEN
            --Popular Clob do relatorio interno
            gene0002.pc_escreve_xml(vr_clobxml44, vr_dstexto44,'</contas></crrl044>',TRUE);
            -- Gera relatório crrl044
            gene0002.pc_solicita_relato(pr_cdcooper  => pr_cdcooper                   --> Cooperativa conectada
                                       ,pr_cdprogra  => pr_cdprogra                   --> Programa chamador
                                       ,pr_dtmvtolt  => pr_dtmvtolt                   --> Data do movimento atual
                                       ,pr_dsxml     => vr_clobxml44                  --> Arquivo XML de dados
                                       ,pr_dsxmlnode => '/crrl044/contas/conta'       --> Nó base do XML para leitura dos dados
                                       ,pr_dsjasper  => 'crrl044.jasper'              --> Arquivo de layout do iReport
                                       ,pr_dsparams  => NULL                          --> Sem parâmetros
                                       ,pr_dsarqsaid => vr_nmdireto||'/'||pr_nmarqimp --> Arquivo final com o path
                                       ,pr_qtcoluna  => 80                            --> Colunas do relatorio
                                       ,pr_flg_gerar => 'S'                           --> Geraçao na hora
                                       ,pr_flg_impri => 'N'                           --> Chamar a impressão (Imprim.p)
                                       ,pr_nmformul  => NULL                          --> Nome do formulário para impressão
                                       ,pr_nrcopias  => 1                             --> Número de cópias
                                       ,pr_sqcabrel  => 1                             --> Qual a seq do cabrel
                                       ,pr_flappend  => 'S'                           --> Fazer append do relatorio se ja existir
                                       ,pr_des_erro  => vr_dscritic);                 --> Saída com erro
            --Se ocorreu erro no relatorio
            IF vr_dscritic IS NOT NULL THEN
              --Levantar Excecao
              RAISE vr_exc_erro;
            END IF; 
            
            --Fechar Clob e Liberar Memoria  
            dbms_lob.close(vr_clobxml44);
            dbms_lob.freetemporary(vr_clobxml44);             
            
            --Ayllos Web
            IF pr_idorigem = 5 THEN            
              --Enviar arquivo para Web
              GENE0002.pc_envia_arquivo_web (pr_cdcooper => pr_cdcooper           --Codigo Cooperativa
                                   ,pr_cdagenci => pr_cdagenci           --Codigo Agencia
                                   ,pr_nrdcaixa => pr_nrdcaixa           --Numero do Caixa
                                   ,pr_nmarqimp => pr_nmarqimp           --Nome Arquivo Impressao
                                   ,pr_nmdireto => vr_nmdireto           --Nome Diretorio
                                   ,pr_nmarqpdf => pr_nmarqpdf           --Nome Arquivo PDF
                                   ,pr_des_reto => pr_des_reto           --Retorno OK/NOK
                                   ,pr_tab_erro => pr_tab_erro);         --tabela erro
              --Se ocorreu erro
              IF pr_des_reto <> 'OK' THEN
                --Se tem erro na tabela 
                IF pr_tab_erro.COUNT > 0 THEN
                  vr_dscritic:= pr_tab_erro(pr_tab_erro.FIRST).dscritic;
                ELSE
                  vr_dscritic:= 'Erro ao enviar arquivo para web.';  
                END IF;  
                --Sair 
                RAISE vr_exc_erro;
              END IF; 
            END IF;  

            gene0001.pc_set_modulo(pr_module => NULL, pr_action => vr_nmaction);
            
            --Retornar Valor para parametro
            pr_des_reto:= 'OK';                        
            
          END IF; 
                                                      
        EXCEPTION
          WHEN vr_exc_sair THEN 
            pr_des_reto:= 'OK';
            vr_cdcritic:= NULL;
            vr_dscritic:= NULL;
        END; 
        
        --Se nao tem erro na temp-table 
        IF pr_tab_erro.COUNT = 0 AND (vr_dscritic IS NOT NULL OR nvl(vr_cdcritic,0) <> 0) THEN
          -- Chamar rotina de gravacao de erro
          gene0001.pc_gera_erro (pr_cdcooper => pr_cdcooper
                                ,pr_cdagenci => pr_cdagenci
                                ,pr_nrdcaixa => pr_nrdcaixa
                                ,pr_nrsequen => 1  /** Sequencia **/
                                ,pr_cdcritic => vr_cdcritic
                                ,pr_dscritic => vr_dscritic
                                ,pr_tab_erro => pr_tab_erro);
        END IF;
        --Escrever erro no Log
        IF pr_flgerlog THEN  
          --Executar rotina geracao log
          gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                              ,pr_cdoperad => vr_cdoperad
                              ,pr_dscritic => vr_dscritic
                              ,pr_dsorigem => vr_dsorigem
                              ,pr_dstransa => vr_dstransa
                              ,pr_dttransa => TRUNC(SYSDATE)
                              ,pr_flgtrans => (CASE pr_des_reto WHEN 'OK' THEN 1 ELSE 0 END)
                              ,pr_hrtransa => gene0002.fn_busca_time
                              ,pr_idseqttl => 1 /** idseqttl **/
                              ,pr_nmdatela => vr_nmdatela
                              ,pr_nrdconta => pr_nrdconta
                              ,pr_nrdrowid => vr_nrdrowid);
        END IF;  

        gene0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);

      EXCEPTION
        WHEN vr_exc_erro THEN
          -- Retorno não OK
          pr_des_reto := 'NOK';
          -- Chamar rotina de gravação de erro
          gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                               ,pr_cdagenci => pr_cdagenci
                               ,pr_nrdcaixa => pr_nrdcaixa
                               ,pr_nrsequen => 1 --> Fixo
                               ,pr_cdcritic => 0 --> Critica 0
                               ,pr_dscritic => vr_dscritic
                               ,pr_tab_erro => pr_tab_erro);
          -- Se foi solicitado geração de LOG
          IF pr_flgerlog THEN
            -- Chamar geração de LOG
            gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                                ,pr_cdoperad => pr_cdoperad
                                ,pr_dscritic => vr_dscritic
                                ,pr_dsorigem => vr_dsorigem
                                ,pr_dstransa => vr_dstransa
                                ,pr_dttransa => TRUNC(SYSDATE)
                                ,pr_flgtrans => 0 --> FALSE
                                ,pr_hrtransa => gene0002.fn_busca_time
                                ,pr_idseqttl => 1
                                ,pr_nmdatela => pr_nmdatela
                                ,pr_nrdconta => pr_nrdconta
                                ,pr_nrdrowid => vr_nrdrowid);
          END IF;  
        WHEN OTHERS THEN
          cecred.pc_internal_exception;
          -- Retorno não OK
          pr_des_reto := 'NOK';
          -- Chamar rotina de gravação de erro
          vr_dscritic := 'Erro na pc_gera_impextir --> '|| sqlerrm;
          gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                               ,pr_cdagenci => pr_cdagenci
                               ,pr_nrdcaixa => pr_nrdcaixa
                               ,pr_nrsequen => 1 --> Fixo
                               ,pr_cdcritic => 0 --> Critica 0
                               ,pr_dscritic => vr_dscritic
                               ,pr_tab_erro => pr_tab_erro);
          -- Se foi solicitado geração de LOG
          IF pr_flgerlog THEN
            -- Chamar geração de LOG
            gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                                ,pr_cdoperad => pr_cdoperad
                                ,pr_dscritic => vr_dscritic
                                ,pr_dsorigem => vr_dsorigem
                                ,pr_dstransa => vr_dstransa
                                ,pr_dttransa => TRUNC(SYSDATE)
                                ,pr_flgtrans => 0 --> FALSE
                                ,pr_hrtransa => gene0002.fn_busca_time
                                ,pr_idseqttl => 1
                                ,pr_nmdatela => pr_nmdatela
                                ,pr_nrdconta => pr_nrdconta
                                ,pr_nrdrowid => vr_nrdrowid);
          END IF;   
        END;
      END pc_gera_impextir;  

  PROCEDURE pc_gera_impextir_pj_trim
                    (pr_cdcooper IN crapcop.cdcooper%TYPE  --Codigo Cooperativa
                    ,pr_cdagenci IN crapass.cdagenci%TYPE  --Codigo Agencia
                    ,pr_nrdcaixa IN INTEGER                --Numero do Caixa
                    ,pr_idorigem IN INTEGER                --Origem dos Dados
                    ,pr_nmdatela IN VARCHAR2               --Nome da Tela
                    ,pr_dtmvtolt IN crapdat.dtmvtolt%TYPE  --Data Movimento
                    ,pr_inproces IN INTEGER                --Indicador Processo
                    ,pr_cdprogra IN crapprg.cdprogra%TYPE  --Codigo Programa
                    ,pr_cdoperad IN VARCHAR2               --Codigo Operador
                    ,pr_dsiduser IN VARCHAR2               --Identificador Usuario
                    ,pr_nrdconta IN crapass.nrdconta%TYPE  --Numero da Conta do Associado
                    ,pr_anorefer IN INTEGER                --Ano de Referencia
                    ,pr_tpextrat IN INTEGER                --Tipo de Extrato
                    ,pr_nrperiod IN INTEGER                -- Trimestre de Referencia
                    ,pr_flgrodar IN BOOLEAN                --Flag Executar
                    ,pr_flgerlog IN BOOLEAN                --Escreve erro Log
                    ,pr_clobxml  IN OUT NOCOPY CLOB        --Clob arquivo de dados
                    ,pr_dstexto  IN OUT NOCOPY VARCHAR2    --Texto Clob
                    ,pr_dsmsgerr OUT VARCHAR2              -- Mensagem de erro (Progress)
                    ,pr_nmarqimp OUT VARCHAR2              --Nome Arquivo Impressao
                    ,pr_nmarqpdf OUT VARCHAR2              --Nome Arquivo PDF
                    ,pr_tab_erro OUT GENE0001.typ_tab_erro --Tabela de Erros
                    ,pr_des_reto OUT VARCHAR2 ) IS         --Descricao Erro
  BEGIN
  /*---------------------------------------------------------------------------------------------------------------
  --
  --  Programa : pc_gera_impextir_pj_trim           Antigo: não há
  --  Sistema  :
  --  Sigla    : CRED
  --  Autor    : Guilherme/SUPERO
  --  Data     : Julho/2016                           Ultima atualizacao: 26/04/2017
  --
  -- Dados referentes ao programa:
  --
  -- Frequencia: -----
  -- Objetivo   : Procedure para obter impressao do extrato de imposto de renda trimestral
  --              do associado conta PJ
  --
  -- Alterações : 26/04/2017 - Ajuste para retirar o uso de campos removidos da tabela
			                   crapass, crapttl, crapjur 
							  (Adriano - P339).
  --
  ---------------------------------------------------------------------------------------------------------------*/
  DECLARE
      -- Busca dos dados da cooperativa
      CURSOR cr_crapcop (pr_cdcooper IN crapcop.cdcooper%TYPE) IS
        SELECT crapcop.nmrescop
              ,crapcop.nmextcop
              ,crapcop.nrdocnpj
              ,crapcop.dsendcop
              ,crapcop.nrendcop
              ,crapcop.nmbairro
              ,crapcop.nrcepend
              ,crapcop.nmcidade
              ,crapcop.cdufdcop
              ,crapcop.nrtelvoz
              ,crapcop.nrtelsac
              ,crapcop.nrtelouv
              ,crapcop.hrinisac
              ,crapcop.hrfimsac
              ,crapcop.hriniouv
              ,crapcop.hrfimouv              
        FROM crapcop crapcop
        WHERE crapcop.cdcooper = pr_cdcooper;
      rw_crapcop cr_crapcop%ROWTYPE;
      -- Busca dos dados do associado
      CURSOR cr_crapass(pr_cdcooper IN crapcop.cdcooper%TYPE
                       ,pr_nrdconta IN crapass.nrdconta%TYPE) IS
        SELECT ass.nrdconta
              ,ass.nmprimtl
              ,ass.vllimcre
              ,ass.nrcpfcgc
              ,ass.inpessoa
              ,ass.cdcooper
              ,ass.cdagenci
              ,ass.nrctainv
        FROM crapass ass
        WHERE ass.cdcooper = pr_cdcooper
        AND   ass.nrdconta = pr_nrdconta;
      rw_crapass cr_crapass%ROWTYPE;

	  CURSOR cr_crapttl(pr_cdcooper IN crapttl.cdcooper%TYPE
		               ,pr_nrdconta IN crapttl.nrdconta%TYPE)IS
	  SELECT crapttl.nmextttl
	    FROM crapttl
	   WHERE crapttl.cdcooper = pr_cdcooper
	     AND crapttl.nrdconta = pr_nrdconta
	     AND crapttl.idseqttl = 2;

      --Variaveis Locais
      vr_flgemiss BOOLEAN;
      vr_inrelext INTEGER;
      vr_dsextrat VARCHAR2(100);
      vr_rel_dsagenci VARCHAR2(100);
      vr_rel_nmresemp VARCHAR2(100);
      vr_rel_qtjaicmf NUMBER;
      vr_rel_qtjaicm1 NUMBER;
      vr_rel_vlrenapl NUMBER;
      vr_rel_vlrenap1 NUMBER;
      vr_rel_vldjuros NUMBER;
      vr_rel_vlsobras NUMBER;

      vr_rel_dsendcop VARCHAR2(100);
      vr_rel_dsendcop##1 VARCHAR2(100);
      vr_rel_dsendcop##2 VARCHAR2(100);

      vr_contador INTEGER;
      vr_regexis1 BOOLEAN;
      vr_flgescra BOOLEAN;
      vr_regexist BOOLEAN;
      vr_cdacesso VARCHAR2(100);
      vr_dscomand VARCHAR2(100);
      vr_dtmvtolt DATE;
      vr_vlmoefix NUMBER(35,8);
      vr_vlmoefi1 NUMBER(35,8);
      vr_nmcidade VARCHAR2(100);
      vr_rel_vlrencot NUMBER;
      vr_rel_vlirfcot NUMBER;
      vr_ant_vlirfcot NUMBER;
      vr_rel_vlprepag NUMBER;
      vr_ant_vlprepag NUMBER;
      vr_rel_vlrendim NUMBER;
      vr_rel_vlcpmfpg NUMBER;
      vr_rel_vldoirrf NUMBER;
      vr_rel_dscpmfpg VARCHAR2(100);
      vr_rel_nrcpfcgc VARCHAR2(100);
      vr_rel_aarefere VARCHAR2(100);
      vr_rel_nrdocnpj VARCHAR2(100);
      vr_rel_nrtelcop VARCHAR2(100);
      vr_ant_dtrefere DATE;
      vr_sol_dtrefere DATE;
	  vr_nmsegntl     crapttl.nmextttl%TYPE;


      vr_dsdomes1     VARCHAR(10);
      vr_dsdomes2     VARCHAR(10);
      vr_dsdomes3     VARCHAR(10);
      vr_rf1_vlsdccdp NUMBER; -- Saldo Deposito em Conta
      vr_rf2_vlsdccdp NUMBER;
      vr_rf3_vlsdccdp NUMBER;
      vr_rf1_vlsddvem NUMBER; -- Saldo Devedor Emprestimo
      vr_rf2_vlsddvem NUMBER;
      vr_rf3_vlsddvem NUMBER;
      vr_rf1_vlttccap NUMBER; -- Cotas Capital
      vr_rf2_vlttccap NUMBER;
      vr_rf3_vlttccap NUMBER;
      vr_rf1_vlsdapli NUMBER; -- Saldo Aplicacao
      vr_rf2_vlsdapli NUMBER;
      vr_rf3_vlsdapli NUMBER;


      vr_lit_dsanoant VARCHAR2(100);
      vr_vlrentot NUMBER;
      vr_vlirfont NUMBER;
      vr_nmmesref VARCHAR2(100);
      vr_nrmesref INTEGER;
      vr_cdretenc VARCHAR2(100);
      vr_dsretenc VARCHAR2(100);
      vr_nrdconta VARCHAR2(100);
      vr_cdagectl VARCHAR2(100);
      vr_cdoperad VARCHAR2(100):= pr_cdoperad;
      vr_nmdatela VARCHAR2(100):= pr_nmdatela;
      vr_dsorigem VARCHAR2(100);
      vr_dstransa VARCHAR2(100);
      vr_nrdrowid ROWID;
      --Variaveis de indices
      vr_index PLS_INTEGER;
      vr_index_retenc PLS_INTEGER;
      --Variaveis dos Arquivos
      vr_typ_saida VARCHAR2(3);
      vr_comando   VARCHAR2(100);
      vr_nmdireto  VARCHAR2(100);
      vr_nmendter  VARCHAR2(100);
      vr_setlinha  VARCHAR2(100);
      --Tabelas para Armazenar Informacoes do Extrato e Retencao
      vr_tab_extrato_ir  typ_tab_extrato_ir;
      vr_tab_retencao_ir typ_tab_retencao_ir;
      --CLOB de Dados
      vr_clobxml44    CLOB;
      vr_dstexto44    VARCHAR2(32600);
      vr_texto_retenc VARCHAR2(32600);
      vr_dstexto      VARCHAR2(4000);
      --Tabela Extrato Investimento
      vr_tab_extrato_inv typ_tab_extrato_inv;
      --Variaveis de Erro
      vr_cdcritic INTEGER;
      vr_dscritic VARCHAR2(4000);
      --Variaveis de Excecoes
      vr_exc_erro EXCEPTION;
      vr_exc_sair EXCEPTION;

      vr_nmaction VARCHAR2(32) := 'pc_gera_impextir_pj_trim';
    BEGIN
        gene0001.pc_set_modulo(pr_module => NULL, pr_action => vr_nmaction);
        --Inicializar transacao
        vr_dsorigem:= gene0001.vr_vet_des_origens(pr_idorigem);
        vr_dstransa:= 'Consultar dados para informe de rendimentos Trimestrais.';
        --Inicializar Variaveis
        vr_cdcritic:= 0;
        vr_dscritic:= NULL;
        pr_des_reto:= 'NOK';
        --Verificar Operador e nome da tela
        IF pr_inproces = 1 THEN
          vr_cdoperad:= pr_cdoperad;
          vr_nmdatela:= pr_nmdatela;
        ELSE
          vr_cdoperad:= '1';
          vr_nmdatela:= upper(pr_cdprogra);
        END IF;

        /* Bloco Imprime */
        BEGIN
          --Limpar Tabela Erro
          pr_tab_erro.DELETE;

          IF pr_tpextrat <> 6 THEN  -- Extrato IR PJ
             vr_dscritic := 'Tipo de Extrato invalido!';
             RAISE vr_exc_erro;
          END IF;

          IF pr_anorefer < 2016 THEN -- Ano de liberação do Trimestral
             vr_dscritic := 'Periodo invalido para Informe Trimestral';
             RAISE vr_exc_erro;
          END IF;

          -- Verifica se a cooperativa esta cadastrada
          OPEN cr_crapcop (pr_cdcooper => pr_cdcooper);
          FETCH cr_crapcop INTO rw_crapcop;
          -- Se não encontrar
          IF cr_crapcop%NOTFOUND THEN
            -- Fechar o cursor pois haverá raise
            CLOSE cr_crapcop;
            -- Montar mensagem de critica
            vr_cdcritic:= 651;
            RAISE vr_exc_erro;
          ELSE
            -- Apenas fechar o cursor
            CLOSE cr_crapcop;
          END IF;
          -- Busca do diretório base da cooperativa para a geração de relatórios
          vr_nmdireto:= gene0001.fn_diretorio(pr_tpdireto => 'C'           --> /usr/coop
                                             ,pr_cdcooper => pr_cdcooper   --> Cooperativa
                                             ,pr_nmsubdir => 'rl');       --> Utilizaremos o rl

          -- Inicializar as informações do XML de dados para o relatório
          dbms_lob.createtemporary(vr_clobxml44, TRUE, dbms_lob.CALL);
          dbms_lob.open(vr_clobxml44, dbms_lob.lob_readwrite);
          --Escrever no arquivo XML
          gene0002.pc_escreve_xml(vr_clobxml44, vr_dstexto44,'<?xml version="1.0" encoding="UTF-8"?><crrl044><contas>');

          --Se nao deve rodar
          IF NOT pr_flgrodar THEN
            --Nome Arquivo Impressao
            pr_nmarqimp:= 'crrl044_trim.lst';
          ELSE
            --Nome Arquivo Impressao e PDF
            vr_nmendter:= pr_dsiduser || gene0002.fn_busca_time;
            pr_nmarqimp:= vr_nmendter || '.ex';
            pr_nmarqpdf:= vr_nmendter || '.pdf';
          END IF;
          --Selecionar associado
          OPEN cr_crapass (pr_cdcooper => pr_cdcooper
                          ,pr_nrdconta => pr_nrdconta);
          --Posicionar no proximo registro
          FETCH cr_crapass INTO rw_crapass;
          --Se nao encontrou
          IF cr_crapass%NOTFOUND THEN
            --Fechar Cursor
            CLOSE cr_crapass;
            --mensagem erro
            vr_cdcritic:= 9;
            vr_dscritic:= NULL;
            --Colocar todo o texto na variavel auxiliar
            vr_dstexto:= '<conta nrdconta="'||to_char(pr_nrdconta,'fm9g999g999g0')||
                   '" flgmensag="S" dscmensag="'||vr_dscritic||'"></conta>';
            --Escrever no Arquivo
            gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);

            --Popular Clob do relatorio interno
            gene0002.pc_escreve_xml(vr_clobxml44, vr_dstexto44,vr_dstexto);

            --Levantar Excecao
            RAISE vr_exc_sair;
          END IF;
          --Fechar Cursor
          CLOSE cr_crapass;

      gene0001.pc_set_modulo(pr_module => NULL, pr_action => vr_nmaction);

		  IF rw_crapass.inpessoa = 1 THEN

		    OPEN cr_crapttl(pr_cdcooper => rw_crapass.cdcooper
			               ,pr_nrdconta => rw_crapass.nrdconta);

			FETCH cr_crapttl INTO vr_nmsegntl;

			CLOSE cr_crapttl;

		  END IF;

          --Consultar Imposto de Renda
          pc_consulta_ir_pj_trim (pr_cdcooper => pr_cdcooper               --Codigo Cooperativa
                                 ,pr_cdagenci => pr_cdagenci               --Codigo Agencia
                                 ,pr_nrdcaixa => pr_nrdcaixa               --Numero do Caixa
                                 ,pr_cdoperad => vr_cdoperad               --Codigo Operador
                                 ,pr_nmdatela => pr_cdprogra               --Nome da Tela
                                 ,pr_idorigem => pr_idorigem               --Origem dos Dados
                                 ,pr_dtmvtolt => pr_dtmvtolt               --Data Movimento
                                 ,pr_nrdconta => pr_nrdconta               --Numero da Conta do Associado
                                 ,pr_nranoref => pr_anorefer               --Ano de Referencia
                                 ,pr_tpextrat => pr_tpextrat               --Tipo de Extrato
                                 ,pr_nrperiod => pr_nrperiod               --Trimestre Referencia
                                 ,pr_tab_extrato_ir  => vr_tab_extrato_ir  --Extrato IR
                                 ,pr_tab_retencao_ir => vr_tab_retencao_ir --Retencoes do IR
                                 ,pr_tab_erro => pr_tab_erro               --Tabela de Erros
                                 ,pr_des_reto => pr_des_reto);             --Descricao Erro
          --Se ocorreu erro
          IF pr_des_reto = 'NOK' OR vr_tab_extrato_ir.COUNT = 0 THEN
            --Se nao deu erro e a tabela está vazia
            IF pr_des_reto = 'OK' AND vr_tab_extrato_ir.COUNT = 0 THEN
              vr_dscritic:= 'Nao foi possivel gerar o extratro IR.';
            ELSE
              --se tem erro na tabela
              IF pr_tab_erro.COUNT > 0 THEN
                vr_dscritic:= pr_tab_erro(pr_tab_erro.FIRST).dscritic;
              ELSE
                vr_dscritic:= 'Nao foi possivel carregar o extrato trimestral.';
              END IF;
            END IF;
            --Colocar todo o texto na variavel auxiliar
            vr_dstexto:= '<conta nrdconta="'||to_char(pr_nrdconta,'fm9g999g999g0')||
                   '" flgmensag="S" dscmensag="'||vr_dscritic||'"></conta>';
            --Escrever no Arquivo
            gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);

            --Popular Clob do relatorio interno
            gene0002.pc_escreve_xml(vr_clobxml44, vr_dstexto44,vr_dstexto);

            --Levantar Excecao
            RAISE vr_exc_sair;
          END IF;
          --Buscar a primeira ocorrencia do extrato
          vr_index:= vr_tab_extrato_ir.FIRST;

          gene0001.pc_set_modulo(pr_module => NULL, pr_action => vr_nmaction);

          --Popular Variaveis
          vr_rel_aarefere:= pr_anorefer;
          vr_rel_nrcpfcgc:= vr_tab_extrato_ir(vr_index).nrcpfcgc;
          vr_lit_dsanoant:= vr_tab_extrato_ir(vr_index).dsanoant;
          vr_ant_dtrefere:= vr_tab_extrato_ir(vr_index).dtrefer1;
          vr_sol_dtrefere:= vr_tab_extrato_ir(vr_index).dtrefer2;


          vr_dsdomes1    := vr_tab_extrato_ir(vr_index).dsdomes1;
          vr_dsdomes2    := vr_tab_extrato_ir(vr_index).dsdomes2;
          vr_dsdomes3    := vr_tab_extrato_ir(vr_index).dsdomes3;

          vr_rf1_vlsdapli:= vr_tab_extrato_ir(vr_index).vlsdapl1;
          vr_rf1_vlsdccdp:= vr_tab_extrato_ir(vr_index).vlsdccd1;
          vr_rf1_vlsddvem:= vr_tab_extrato_ir(vr_index).vlsddve1;
          vr_rf1_vlttccap:= vr_tab_extrato_ir(vr_index).vlttcca1;

          vr_rf2_vlsdapli:= vr_tab_extrato_ir(vr_index).vlsdapl2;
          vr_rf2_vlsdccdp:= vr_tab_extrato_ir(vr_index).vlsdccd2;
          vr_rf2_vlsddvem:= vr_tab_extrato_ir(vr_index).vlsddve2;
          vr_rf2_vlttccap:= vr_tab_extrato_ir(vr_index).vlttcca2;

          vr_rf3_vlsdapli:= vr_tab_extrato_ir(vr_index).vlsdapl3;
          vr_rf3_vlsdccdp:= vr_tab_extrato_ir(vr_index).vlsdccd3;
          vr_rf3_vlsddvem:= vr_tab_extrato_ir(vr_index).vlsddve3;
          vr_rf3_vlttccap:= vr_tab_extrato_ir(vr_index).vlttcca3;

          vr_rel_vlrendim:= vr_tab_extrato_ir(vr_index).vlrendim;
          vr_rel_vlsobras:= vr_tab_extrato_ir(vr_index).vlsobras;
          vr_rel_vlrencot:= vr_tab_extrato_ir(vr_index).vlrencot;

          vr_rel_nrdocnpj:= 'CNPJ: '||gene0002.fn_mask_cpf_cnpj(rw_crapcop.nrdocnpj,2);
          vr_rel_dsendcop##1:= rw_crapcop.dsendcop ||', '||to_char(rw_crapcop.nrendcop,'fm99g990')||
                               ' - '|| rw_crapcop.nmbairro;
          IF pr_idorigem = 3 THEN                     
             vr_rel_dsendcop##2:= gene0002.fn_mask_cep(rw_crapcop.nrcepend)||' - '|| rw_crapcop.nmcidade||
                                  ' - '||rw_crapcop.cdufdcop;
          ELSE
          vr_rel_dsendcop##2:= gene0002.fn_mask_cep(rw_crapcop.nrcepend)||' - '|| rw_crapcop.nmcidade||
                               ' - '||rw_crapcop.cdufdcop ||'  - TELEFONE: '||rw_crapcop.nrtelvoz;
          END IF;
          vr_rel_nrtelcop:= rw_crapcop.nrtelvoz;
          vr_rel_dscpmfpg:= vr_tab_extrato_ir(vr_index).dscpmfpg;
          vr_rel_vlcpmfpg:= vr_tab_extrato_ir(vr_index).vlcpmfpg;
          vr_rel_vldoirrf:= vr_tab_extrato_ir(vr_index).vldoirrf;

          vr_nrdconta    := to_char(vr_tab_extrato_ir(vr_index).nrdconta,'fm9999g999g0');
          vr_cdagectl    := to_char(vr_tab_extrato_ir(vr_index).cdagectl,'fm90000');

          --vr_rel_vlirfcot:= vr_tab_extrato_ir(vr_index).vlirfcot;
          --vr_ant_vlirfcot:= vr_tab_extrato_ir(vr_index).anirfcot;
          --vr_rel_vlprepag:= vr_tab_extrato_ir(vr_index).vlprepag;
          --vr_ant_vlprepag:= vr_tab_extrato_ir(vr_index).anprepag;


          /* Extrato de pessoa juridica */


          --Colocar todo o texto na variavel auxiliar
          vr_dstexto:=
             '<conta tpextrat="J" flgmensag="N" dscmensag="" rel_aarefere="'||
                    '" nmextcop="'      || rw_crapcop.nmextcop   ||
                    '" rel_nrdocnpj="'  || vr_rel_nrdocnpj                                 ||
                    '" rel_dsendcop="'  || vr_rel_dsendcop##1                              ||
                    '" rel_dsendcop2="' || vr_rel_dsendcop##2                              ||
                    '" rel_nrcpfcgc="'  || vr_rel_nrcpfcgc                                 ||
                    '" nmprimtl="'      || rw_crapass.nmprimtl                             ||
                    '" cdagenci="'      || rw_crapass.cdagenci                             ||
                    '" nrdconta="'      || to_char(rw_crapass.nrdconta,'fm9999g999g0')     ||
                    '" nmsegntl="'      || vr_nmsegntl                             ||

                    '" dsperiod="'      ||pr_nrperiod ||'T/' || pr_anorefer                ||
                    '" dsdomes1="'      ||vr_dsdomes1                                      ||
                    '" dsdomes2="'      ||vr_dsdomes2                                      ||
                    '" dsdomes3="'      ||vr_dsdomes3                                      ||

                    '" rel_vlrencot="'  || to_char(vr_rel_vlrencot,'fm999g999g990d00mi')   ||
                    '" rel_vlsobras="'  || to_char(vr_rel_vlsobras,'fm999g999g990d00mi')   ||
                    '" rel_vlrendim="'  || to_char(vr_rel_vlrendim,'fm999g999g990d00mi')   ||

                    '" rf1_vlsdccdp="'  || to_char(vr_rf1_vlsdccdp,'fm99999g999g990d00mi') ||
                    '" rf2_vlsdccdp="'  || to_char(vr_rf2_vlsdccdp,'fm99999g999g990d00mi') ||
                    '" rf3_vlsdccdp="'  || to_char(vr_rf3_vlsdccdp,'fm99999g999g990d00mi') ||

                    '" rf1_vlsddvem="'  || to_char(vr_rf1_vlsddvem,'fm99999g999g990d00mi') ||
                    '" rf2_vlsddvem="'  || to_char(vr_rf2_vlsddvem,'fm99999g999g990d00mi') ||
                    '" rf3_vlsddvem="'  || to_char(vr_rf3_vlsddvem,'fm99999g999g990d00mi') ||

                    '" rf1_vlttccap="'  || to_char(vr_rf1_vlttccap,'fm99999g999g990d00mi') ||
                    '" rf2_vlttccap="'  || to_char(vr_rf2_vlttccap,'fm99999g999g990d00mi') ||
                    '" rf3_vlttccap="'  || to_char(vr_rf3_vlttccap,'fm99999g999g990d00mi') ||

                    '" rf1_vlsdapli="'  || to_char(vr_rf1_vlsdapli,'fm9g999g999g990d00mi') ||
                    '" rf2_vlsdapli="'  || to_char(vr_rf2_vlsdapli,'fm9g999g999g990d00mi') ||
                    '" rf3_vlsdapli="'  || to_char(vr_rf3_vlsdapli,'fm9g999g999g990d00mi') ||

                    '" dtemissa="'      || to_char(SYSDATE,'DD/MM/YYYY')                   ||
                    '" rel_vldoirrf="" flgano2009="N" flgant94="N" cdagectl=""';
                    
          IF pr_idorigem = 3 THEN   
             vr_dstexto:= vr_dstexto || ' nrtelcop="' || vr_rel_nrtelcop || '"';
          END IF;
             
          vr_dstexto:= vr_dstexto || '><retencoes>';

          --Limpar String retencoes
          vr_texto_retenc:= NULL;
          --Selecionar Retencoes
          vr_index_retenc:= vr_tab_retencao_ir.FIRST;
          WHILE vr_index_retenc IS NOT NULL LOOP
            vr_texto_retenc:= vr_texto_retenc||
            '<retencao>' ||
               '<nmmesref>' || SUBSTR(vr_tab_retencao_ir(vr_index_retenc).nmmesref,1,3)  || '</nmmesref>' ||
               '<cdretenc>' || SUBSTR(vr_tab_retencao_ir(vr_index_retenc).cdretenc,1,4)  || '</cdretenc>' ||
               '<dsretenc>' || SUBSTR(vr_tab_retencao_ir(vr_index_retenc).dsretenc,1,41) || '</dsretenc>' ||
               '<vlrentot>' || to_char(vr_tab_retencao_ir(vr_index_retenc).vlrentot,'fm99g999g990d00mi') || '</vlrentot>' ||
               '<vlirfont>' || to_char(vr_tab_retencao_ir(vr_index_retenc).vlirfont,'fm99g999g990d00mi') || '</vlirfont>' ||
            '</retencao>';
            --Proximo Registro
             vr_index_retenc:= vr_tab_retencao_ir.NEXT(vr_index_retenc);
          END LOOP;
          --Junta todos os textos para colocar no XML
           vr_dstexto:= vr_dstexto||vr_texto_retenc||'</retencoes></conta>';
          
          --Escrever no XML
          gene0002.pc_escreve_xml(pr_clobxml,pr_dstexto,vr_dstexto);

          --Escrever no XML interno
          gene0002.pc_escreve_xml(vr_clobxml44,vr_dstexto44,vr_dstexto);

          gene0001.pc_set_modulo(pr_module => NULL, pr_action => vr_nmaction);

          IF pr_flgrodar = TRUE THEN
            --Popular Clob do relatorio interno
            gene0002.pc_escreve_xml(vr_clobxml44, vr_dstexto44,'</contas></crrl044>',TRUE);
            -- Gera relatório crrl044
            gene0002.pc_solicita_relato(pr_cdcooper  => pr_cdcooper                   --> Cooperativa conectada
                                       ,pr_cdprogra  => pr_cdprogra                   --> Programa chamador
                                       ,pr_dtmvtolt  => pr_dtmvtolt                   --> Data do movimento atual
                                       ,pr_dsxml     => vr_clobxml44                  --> Arquivo XML de dados
                                       ,pr_dsxmlnode => '/crrl044/contas/conta'  --> Nó base do XML para leitura dos dados
                                       ,pr_dsjasper  => 'crrl044_trim.jasper'         --> Arquivo de layout do iReport
                                       ,pr_dsparams  => NULL                          --> Sem parâmetros
                                       ,pr_dsarqsaid => vr_nmdireto||'/'||pr_nmarqimp --> Arquivo final com o path
                                       ,pr_qtcoluna  => 80                            --> Colunas do relatorio
                                       ,pr_flg_gerar => 'S'                           --> Geraçao na hora
                                       ,pr_flg_impri => 'N'                           --> Chamar a impressão (Imprim.p)
                                       ,pr_nmformul  => NULL                          --> Nome do formulário para impressão
                                       ,pr_nrcopias  => 1                             --> Número de cópias
                                       ,pr_sqcabrel  => 1                             --> Qual a seq do cabrel
                                       ,pr_flappend  => 'S'                           --> Fazer append do relatorio se ja existir
                                       ,pr_des_erro  => vr_dscritic);                 --> Saída com erro
            --Se ocorreu erro no relatorio
            IF vr_dscritic IS NOT NULL THEN
              --Levantar Excecao
              RAISE vr_exc_erro;
            END IF;

            --Fechar Clob e Liberar Memoria
            dbms_lob.close(vr_clobxml44);
            dbms_lob.freetemporary(vr_clobxml44);

            --Ayllos Web
            IF pr_idorigem = 5 THEN
              --Enviar arquivo para Web
              GENE0002.pc_envia_arquivo_web (pr_cdcooper => pr_cdcooper           --Codigo Cooperativa
                                   ,pr_cdagenci => pr_cdagenci           --Codigo Agencia
                                   ,pr_nrdcaixa => pr_nrdcaixa           --Numero do Caixa
                                   ,pr_nmarqimp => pr_nmarqimp           --Nome Arquivo Impressao
                                   ,pr_nmdireto => vr_nmdireto           --Nome Diretorio
                                   ,pr_nmarqpdf => pr_nmarqpdf           --Nome Arquivo PDF
                                   ,pr_des_reto => pr_des_reto           --Retorno OK/NOK
                                   ,pr_tab_erro => pr_tab_erro);         --tabela erro
              --Se ocorreu erro
              IF pr_des_reto <> 'OK' THEN
                --Se tem erro na tabela
                IF pr_tab_erro.COUNT > 0 THEN
                  vr_dscritic:= pr_tab_erro(pr_tab_erro.FIRST).dscritic;
                ELSE
                  vr_dscritic:= 'Erro ao enviar arquivo para web.';
                END IF;
                --Sair
                RAISE vr_exc_erro;
              END IF;
            END IF;


            --Retornar Valor para parametro
            pr_des_reto:= 'OK';

          END IF;

          gene0001.pc_set_modulo(pr_module => NULL, pr_action => vr_nmaction);

        EXCEPTION
          WHEN vr_exc_sair THEN
            pr_des_reto:= 'OK';
            vr_cdcritic:= NULL;
            vr_dscritic:= NULL;
        END;

        --Se nao tem erro na temp-table
        IF pr_tab_erro.COUNT = 0 AND (vr_dscritic IS NOT NULL OR nvl(vr_cdcritic,0) <> 0) THEN
          -- Chamar rotina de gravacao de erro
          gene0001.pc_gera_erro (pr_cdcooper => pr_cdcooper
                                ,pr_cdagenci => pr_cdagenci
                                ,pr_nrdcaixa => pr_nrdcaixa
                                ,pr_nrsequen => 1  /** Sequencia **/
                                ,pr_cdcritic => vr_cdcritic
                                ,pr_dscritic => vr_dscritic
                                ,pr_tab_erro => pr_tab_erro);
        END IF;
        --Escrever erro no Log
        IF pr_flgerlog THEN
          --Executar rotina geracao log
          gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                              ,pr_cdoperad => vr_cdoperad
                              ,pr_dscritic => vr_dscritic
                              ,pr_dsorigem => vr_dsorigem
                              ,pr_dstransa => vr_dstransa
                              ,pr_dttransa => TRUNC(SYSDATE)
                              ,pr_flgtrans => (CASE pr_des_reto WHEN 'OK' THEN 1 ELSE 0 END)
                              ,pr_hrtransa => gene0002.fn_busca_time
                              ,pr_idseqttl => 1 /** idseqttl **/
                              ,pr_nmdatela => vr_nmdatela
                              ,pr_nrdconta => pr_nrdconta
                              ,pr_nrdrowid => vr_nrdrowid);
        END IF;
        
        gene0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);
      EXCEPTION
        WHEN vr_exc_erro THEN
          -- Retorno não OK
          pr_des_reto := 'NOK';
          pr_dsmsgerr := vr_dscritic;
          -- Chamar rotina de gravação de erro
          gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                               ,pr_cdagenci => pr_cdagenci
                               ,pr_nrdcaixa => pr_nrdcaixa
                               ,pr_nrsequen => 1 --> Fixo
                               ,pr_cdcritic => 0 --> Critica 0
                               ,pr_dscritic => vr_dscritic
                               ,pr_tab_erro => pr_tab_erro);
          -- Se foi solicitado geração de LOG
          IF pr_flgerlog THEN
            -- Chamar geração de LOG
            gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                                ,pr_cdoperad => pr_cdoperad
                                ,pr_dscritic => vr_dscritic
                                ,pr_dsorigem => vr_dsorigem
                                ,pr_dstransa => vr_dstransa
                                ,pr_dttransa => TRUNC(SYSDATE)
                                ,pr_flgtrans => 0 --> FALSE
                                ,pr_hrtransa => gene0002.fn_busca_time
                                ,pr_idseqttl => 1
                                ,pr_nmdatela => pr_nmdatela
                                ,pr_nrdconta => pr_nrdconta
                                ,pr_nrdrowid => vr_nrdrowid);
          END IF;
        WHEN OTHERS THEN
          cecred.pc_internal_exception;
          -- Retorno não OK
          pr_des_reto := 'NOK';
          -- Chamar rotina de gravação de erro
          vr_dscritic := 'Erro na pc_gera_impextir --> '|| sqlerrm;
          gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                               ,pr_cdagenci => pr_cdagenci
                               ,pr_nrdcaixa => pr_nrdcaixa
                               ,pr_nrsequen => 1 --> Fixo
                               ,pr_cdcritic => 0 --> Critica 0
                               ,pr_dscritic => vr_dscritic
                               ,pr_tab_erro => pr_tab_erro);
          -- Se foi solicitado geração de LOG
          IF pr_flgerlog THEN
            -- Chamar geração de LOG
            gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                                ,pr_cdoperad => pr_cdoperad
                                ,pr_dscritic => vr_dscritic
                                ,pr_dsorigem => vr_dsorigem
                                ,pr_dstransa => vr_dstransa
                                ,pr_dttransa => TRUNC(SYSDATE)
                                ,pr_flgtrans => 0 --> FALSE
                                ,pr_hrtransa => gene0002.fn_busca_time
                                ,pr_idseqttl => 1
                                ,pr_nmdatela => pr_nmdatela
                                ,pr_nrdconta => pr_nrdconta
                                ,pr_nrdrowid => vr_nrdrowid);
          END IF;
        END;
  END pc_gera_impextir_pj_trim;


  PROCEDURE pc_gera_impextir_pj_trim_car(pr_cdcooper IN crapcop.cdcooper%TYPE  --Codigo Cooperativa
                                        ,pr_cdagenci IN crapass.cdagenci%TYPE  --Codigo Agencia
                                        ,pr_nrdcaixa IN INTEGER                --Numero do Caixa
                                        ,pr_idorigem IN INTEGER                --Origem dos Dados
                                        ,pr_nmdatela IN VARCHAR2               --Nome da Tela
                                        ,pr_dtmvtolt IN crapdat.dtmvtolt%TYPE  --Data Movimento
                                        ,pr_inproces IN INTEGER                --Indicador Processo
                                        ,pr_cdprogra IN crapprg.cdprogra%TYPE  --Codigo Programa
                                        ,pr_cdoperad IN VARCHAR2               --Codigo Operador
                                        ,pr_dsiduser IN VARCHAR2               --Identificador Usuario
                                        ,pr_nrdconta IN crapass.nrdconta%TYPE  --Numero da Conta do Associado
                                        ,pr_anorefer IN INTEGER                --Ano de Referencia
                                        ,pr_tpextrat IN INTEGER                --Tipo de Extrato
                                        ,pr_nrperiod IN INTEGER                -- Trimestre de Referencia
                                        ,pr_flgrodar IN NUMBER                --Flag Executar
                                        ,pr_flgerlog IN NUMBER                --Escreve erro Log
                                        ,pr_dstexto  OUT VARCHAR2              --Texto Clob
                                        ,pr_dsmsgerr OUT VARCHAR2              -- Mensagem de erro (Progress)
                                        ,pr_nmarqimp OUT VARCHAR2              --Nome Arquivo Impressao
                                        ,pr_nmarqpdf OUT VARCHAR2              --Nome Arquivo PDF
                                        ,pr_des_reto OUT VARCHAR2 ) IS         --Descricao OK/NOK
    BEGIN
    ---------------------------------------------------------------------------------------------------------------
    --
    --  Programa : pc_gera_impextir_pj_trim_car                   Antigo:
    --  Sistema  :
    --  Sigla    : CRED
    --  Autor    : Guilherme/SUPERO
    --  Data     : Agosto/2016                           Ultima atualizacao:
    --
    -- Dados referentes ao programa:
    --
    -- Frequencia: -----
    -- Objetivo   : Procedure para possibilitar a utilizacao da pc_gera_impextir_pj_trim_car
    --              através do Caracter
    --
    -- Alterações :
    --
    ---------------------------------------------------------------------------------------------------------------
    DECLARE

    -- Tratamento de erros
    vr_exc_saida EXCEPTION;
    -- Variaveis de XML
    vr_xml_temp VARCHAR2(32767);
    --variveis de retorno
    vr_nmarqimp VARCHAR2(200);
    vr_nmarqpdf VARCHAR2(200);
    vr_des_reto VARCHAR2(5);
    -- Temp Table
    vr_tab_erro GENE0001.typ_tab_erro;
    -- Campos CLOB
    vr_clobxml1 CLOB;
    vr_clobxml2 CLOB;
    vr_clobxml3 CLOB;
    vr_clobxml4 CLOB;
    vr_clobxml5 CLOB;
    vr_clobxml6 CLOB;
    vr_clobxml7 CLOB;
    vr_clobxml8 CLOB;
    vr_clobxml9 CLOB;
    -- Campos VARCHAR2
    vr_dstexto1 VARCHAR2(1);
    vr_dstexto2 VARCHAR2(1);
    vr_dstexto3 VARCHAR2(1);
    vr_dstexto4 VARCHAR2(1);
    vr_dstexto5 VARCHAR2(1);
    vr_dstexto6 VARCHAR2(1);
    vr_dstexto7 VARCHAR2(1);
    vr_dstexto8 VARCHAR2(1);
    vr_dstexto9 VARCHAR2(1);
    -- variavies booleanas
    vr_flgrodar BOOLEAN;
    vr_flgtarif BOOLEAN;
    vr_flgerlog BOOLEAN;

    vr_nmdireto  VARCHAR2(100);

    ------------------------ VARIAVEIS PARA INDICES --------------------------
    vr_index_craptab VARCHAR2(20);
    vr_index_craplpp VARCHAR2(20);
    vr_index_craplrg VARCHAR2(20);
    vr_index_resgate VARCHAR2(25);

    ---------------------------- ESTRUTURAS DE TABELA ---------------------
    vr_tab_craptab  APLI0001.typ_tab_ctablq;   --> Armazenar tabela de Conta Bloqueada
    vr_tab_craplpp  APLI0001.typ_tab_craplpp;  --> Armazenar tabela com lancamento poupanca
    vr_tab_craplrg  APLI0001.typ_tab_craplpp;  --> Armazenar tabela com resgates
    vr_tab_resgate  APLI0001.typ_tab_resgate;  --> Armazenar resgates das contas por aplicacao

    -- Cursor genérico de calendário
    rw_crapdat btch0001.cr_crapdat%ROWTYPE;


    --------------------------FIM ESTRUTURAS DE TABELA----------------------------------------

    BEGIN

      /*
      Tratamento necessario para variaveis do
      PROGRESS do tipo Booleano que devem ser
      passadas como Integer para o Oracle
      */

      IF pr_flgrodar > 0 THEN
        vr_flgrodar := TRUE;
      ELSE
        vr_flgrodar := FALSE;
      END IF;

      IF pr_flgerlog > 0 THEN
        vr_flgerlog := TRUE;
      ELSE
        vr_flgerlog := FALSE;
      END IF;

      --Buscar Data do Sistema para a cooperativa
      OPEN btch0001.cr_crapdat(pr_cdcooper => pr_cdcooper);
      FETCH btch0001.cr_crapdat INTO rw_crapdat;
      --Se nao encontrou
      IF btch0001.cr_crapdat%NOTFOUND THEN
        -- Fechar Cursor
        CLOSE btch0001.cr_crapdat;
        -- Levantar Excecao
        RAISE vr_exc_saida;
      ELSE
        -- apenas fechar o cursor
        CLOSE btch0001.cr_crapdat;
      END IF;


      pc_gera_impextir_pj_trim
                          (pr_cdcooper => pr_cdcooper      --Codigo Cooperativa
                          ,pr_cdagenci => pr_cdagenci      --Codigo Agencia
                          ,pr_nrdcaixa => pr_nrdcaixa      --Numero do Caixa
                          ,pr_idorigem => pr_idorigem      --Origem dos Dados
                          ,pr_nmdatela => pr_nmdatela      --Nome da Tela
                          ,pr_dtmvtolt => rw_crapdat.dtmvtocd      --Data Movimento
                          ,pr_inproces => pr_inproces      --Indicador Processo
                          ,pr_cdprogra => pr_cdprogra      --Codigo Programa
                          ,pr_cdoperad => pr_cdoperad      --Codigo Operador
                          ,pr_dsiduser => pr_dsiduser      --Identificador Usuario
                          ,pr_nrdconta => pr_nrdconta      --Numero da Conta do Associado
                          ,pr_anorefer => pr_anorefer      --Ano de Referencia
                          ,pr_tpextrat => pr_tpextrat      --Tipo de Extrato
                          ,pr_nrperiod => pr_nrperiod      -- Trimestre de Referencia
                          ,pr_flgrodar => vr_flgrodar      --Flag Executar
                          ,pr_flgerlog => vr_flgerlog      --Escreve erro Log
                          ,pr_clobxml  => vr_clobxml2      --Clob arquivo de dados
                          ,pr_dstexto  => pr_dstexto      --Texto Clob 2
                          ,pr_dsmsgerr => pr_dsmsgerr      -- Mensagem de erro (Progress)
                          ,pr_nmarqimp => pr_nmarqimp      --Nome Arquivo Impressao
                          ,pr_nmarqpdf => pr_nmarqpdf      --Nome Arquivo PDF
                          ,pr_tab_erro => vr_tab_erro      --Tabela de Erros
                          ,pr_des_reto => pr_des_reto);    --Descricao Erro

      IF pr_des_reto <> 'OK' THEN

         FOR vr_contador IN vr_tab_erro.FIRST..vr_tab_erro.LAST LOOP
          pr_des_reto := vr_tab_erro(vr_contador).dscritic;
         END LOOP;

      END IF;

      -- trata caminho do arquivo para acessos do tipo 5(WEB)
      IF pr_idorigem <> 5 THEN
        -- Busca do diretório base da cooperativa para a geração de relatórios
        vr_nmdireto:= gene0001.fn_diretorio(pr_tpdireto => 'C'         --> /usr/coop
                                           ,pr_cdcooper => pr_cdcooper --> Cooperativa
                                           ,pr_nmsubdir => 'rl');      --> Utilizaremos o rl
        vr_nmdireto := vr_nmdireto||'/';
      END IF;

      pr_nmarqpdf := REPLACE(pr_nmarqimp,'.ex','.pdf');

      -- valida o retorno OK e a existencia de 1 dos 2 tipos de arquivos gerados
      IF pr_des_reto = 'OK' THEN
        -- monta as variaveis de nome com o caminho correto
        pr_nmarqimp := vr_nmdireto||pr_nmarqimp;
        pr_nmarqpdf := vr_nmdireto||pr_nmarqpdf;

      END IF;

      EXCEPTION
        WHEN vr_exc_saida THEN
          pr_des_reto := 'NOK';

        WHEN OTHERS THEN
          pr_des_reto := 'NOK';
      END;
  END pc_gera_impextir_pj_trim_car;


      -- Subrotina para Imprimir Extrato Emprestimo
      PROCEDURE pc_imprime_extrato (pr_cdcooper IN crapcop.cdcooper%TYPE  --Codigo Cooperativa
                                   ,pr_cdagenci IN crapass.cdagenci%TYPE  --Codigo Agencia
                                   ,pr_nrdcaixa IN INTEGER                --Numero do Caixa
                                   ,pr_cdoperad IN VARCHAR2               --Codigo Operador
                                   ,pr_nmdatela IN VARCHAR2               --Nome da Tela
                                   ,pr_idorigem IN INTEGER                --Origem dos Dados
                                   ,pr_nrdconta IN crapass.nrdconta%TYPE  --Numero da Conta do Associado
                                   ,pr_idseqttl IN crapttl.idseqttl%TYPE  --Sequencial do Titular
                                   ,pr_dtmvtolt IN crapdat.dtmvtolt%TYPE  --Data Movimento
                                   ,pr_dtmvtopr IN crapdat.dtmvtopr%TYPE  --Data Proximo Movimento
                                   ,pr_dtcalcul IN crapdat.dtmvtopr%TYPE  --Data Calculo
                                   ,pr_nrctremp IN crapepr.nrctremp%TYPE  --Numero Contrato Emprestimo                                
                                   ,pr_flgerlog IN BOOLEAN                --Escreve erro Log
                                   ,pr_dtiniper IN crapdat.dtmvtolt%TYPE  --Data Inicio Periodo Extrato
                                   ,pr_dtfimper IN crapdat.dtmvtopr%TYPE  --Data Final Periodo Extrato
                                   ,pr_intpextr IN INTEGER                --Tipo Extrato
                                   ,pr_dsiduser IN VARCHAR2               --Identificador Usuario
                                   ,pr_flgimpri IN BOOLEAN                --Flag Imprimir
                                   ,pr_qtpreapg IN NUMBER DEFAULT 0       --Quantidade de parcelas a pagar
                                   ,pr_clobxml  IN OUT NOCOPY CLOB        --Clob do Relatorio Principal
                                   ,pr_dstexto  IN OUT NOCOPY VARCHAR2    --String do Relatorio Principal
                                   ,pr_clobxml73 IN OUT NOCOPY CLOB       --Clob do Relatorio Interno
                                   ,pr_dstexto73 IN OUT NOCOPY VARCHAR2   --String do Relatorio Interno
                                   ,pr_tab_erro OUT GENE0001.typ_tab_erro --Tabela de Erros
                                   ,pr_tab_extrato_epr_aux OUT typ_tab_extrato_epr_aux --Tabela de Extrato de Emprestimo Auxiliar
                                   ,pr_des_reto OUT VARCHAR2 ) IS         --Descricao Erro
  BEGIN
  ---------------------------------------------------------------------------------------------------------------
  --
  --  Programa : pc_imprime_extrato                    Antigo: procedures/b1wgen0112.p/imprime_extrato
  --  Sistema  : 
  --  Sigla    : CRED
  --  Autor    : Alisson C. Berrido - Amcom
  --  Data     : Julho/2014                           Ultima atualizacao: 10/05/2018
  --
  -- Dados referentes ao programa:
  --
  -- Frequencia: -----
  -- Objetivo   : Procedure para Imprimir Extrato Emprestimo
  --
  -- Alterações : 24/07/2014 - Conversão Progress -> Oracle (Alisson - AMcom)
  --
  --              10/02/2015 - Tratamento para zerar o saldo no ultimo lancamento
  --                           quando o contrato estiver em Prejuizo do tipo PP. (James/Oscar)
  --
  --              28/05/2015 - Ajuste para verificar se cobra Multa. (James)
  --
  --              12/06/2015 - Adicao de campos para geracao do extrato da portabilidade de credito. 
  --                           (Jaison/Diego - SD: 290027)
  --
  --              08/10/2015 - Tratar os históricos de estorno do produto PP (Oscar)                     
  --
  --              11/04/2016 - Exibir numero de conta cartão para o emprestimos de cessao de credito.
  --                           PRJ-343 - Cessao de Credito(Odirlei-AMcom)                   
  --
  --              26/04/2017 - Ajuste para retirar o uso de campos removidos da tabela
  -- 		                   crapass, crapttl, crapjur 
  -- 						  (Adriano - P339).
  --              25/05/2017 - Passagem do tpemprst. (Jaison/James - PRJ298)
  --
  --              11/09/2017 - Ajuste para retirar caracteres especiais ao gerar a tag dssubmod (Jonta - RKAM / 739433).             
  --
  --              10/05/2018 - P410 - Ajustes IOF (Marcos-Envolti)
  --
  --              25/09/2018 - Incluir novos historicos de estorno de financiamento 2784,2785,2786,2787.
  --                           PRJ450 - Regulatorio(Odirlei - AMcom)
  ---------------------------------------------------------------------------------------------------------------
  DECLARE
        -- Busca dos dados da cooperativa
        CURSOR cr_crapcop (pr_cdcooper IN crapcop.cdcooper%TYPE) IS
          SELECT crapcop.nmrescop
                 ,crapcop.nmextcop
                 ,crapcop.nrdocnpj
          FROM crapcop crapcop
          WHERE crapcop.cdcooper = pr_cdcooper;
        rw_crapcop cr_crapcop%ROWTYPE;
        -- Buscar cadastro auxiliar de emprestimo
        CURSOR cr_crapepr (pr_cdcooper IN crapepr.cdcooper%type,
                           pr_nrdconta IN crapepr.nrdconta%type,
                           pr_nrctremp IN crapepr.nrctremp%type) is
          SELECT crapepr.tpemprst
                ,crapepr.cdlcremp
                ,crapepr.vlemprst
                ,crapepr.txmensal
                ,crapepr.vlpreemp
                ,crapepr.nrdconta
                ,crapepr.nrctremp
                ,crapepr.cdagenci
                ,crapepr.dtmvtolt
                ,crapepr.dtdpagto
                ,crapepr.qtpreemp
                ,crapepr.inprejuz
                ,crapepr.vlaqiofc
                ,crapepr.cdfinemp
          FROM crapepr crapepr
          WHERE crapepr.cdcooper = pr_cdcooper
          AND   crapepr.nrdconta = pr_nrdconta
          AND   crapepr.nrctremp = pr_nrctremp;
        rw_crapepr cr_crapepr%rowtype;
        -- Buscar cadastro auxiliar de emprestimo
        CURSOR cr_crawepr (pr_cdcooper IN crawepr.cdcooper%type,
                           pr_nrdconta IN crawepr.nrdconta%type,
                           pr_nrctremp IN crawepr.nrctremp%type) is
          SELECT crawepr.tpemprst
                ,crawepr.dtdpagto
                ,crawepr.dtlibera
                ,crawepr.rowid
                ,crawepr.percetop
                ,DECODE(tpemprst,0,(txdiaria * 100),txdiaria) txdiaria
          FROM crawepr crawepr
          WHERE crawepr.cdcooper = pr_cdcooper
          AND   crawepr.nrdconta = pr_nrdconta
          AND   crawepr.nrctremp = pr_nrctremp;
        rw_crawepr cr_crawepr%rowtype;
        --Selecionar Linha Credito
        CURSOR cr_craplcr (pr_cdcooper IN craplcr.cdcooper%TYPE
                          ,pr_cdlcremp IN craplcr.cdlcremp%TYPE) IS
          SELECT craplcr.txmensal
                ,craplcr.perjurmo
                ,craplcr.dslcremp
                ,craplcr.flgcobmu
                ,craplcr.cdmodali
                ,craplcr.cdsubmod
          FROM craplcr craplcr
          WHERE craplcr.cdcooper = pr_cdcooper 
          AND   craplcr.cdlcremp = pr_cdlcremp;
        rw_craplcr cr_craplcr%ROWTYPE; 
        -- Busca dos dados do associado
        CURSOR cr_crapass(pr_cdcooper IN crapcop.cdcooper%TYPE
                         ,pr_nrdconta IN crapass.nrdconta%TYPE) IS
          SELECT crapass.nrdconta
                ,crapass.nmprimtl
                ,crapass.vllimcre
                ,crapass.nrcpfcgc
                ,crapass.inpessoa
                ,crapass.cdcooper
                ,crapass.cdagenci
                ,crapass.nrctainv
          FROM crapass crapass
          WHERE crapass.cdcooper = pr_cdcooper
          AND   crapass.nrdconta = pr_nrdconta;
        rw_crapass cr_crapass%ROWTYPE;        
        -- Cursor para busca a agencia
        CURSOR cr_crapage(pr_cdcooper IN crapage.cdcooper%TYPE
                         ,pr_cdagenci IN crapage.cdagenci%TYPE) IS
          SELECT crapage.nmcidade
                ,crapage.cdagenci
                ,crapage.nmresage
                ,crapage.qtddlslf
          FROM crapage crapage
          WHERE crapage.cdcooper = pr_cdcooper 
          AND   crapage.cdagenci = pr_cdagenci;
        rw_crapage cr_crapage%ROWTYPE;    
        -- cursor genérico de calendário
        rw_crapdat btch0001.cr_crapdat%ROWTYPE;
        -- Cursor para buscar a modalidade
        CURSOR cr_gnmodal(pr_cdmodali IN gnmodal.cdmodali%TYPE) IS
          SELECT gnmodal.cdmodali
                ,gnmodal.dsmodali
            FROM gnmodal
           WHERE gnmodal.cdmodali = pr_cdmodali;
        rw_gnmodal cr_gnmodal%ROWTYPE;
        -- Cursor para buscar a sub modalidade
        CURSOR cr_gnsbmod(pr_cdmodali IN gnsbmod.cdmodali%TYPE
                         ,pr_cdsubmod IN gnsbmod.cdsubmod%TYPE) IS
          SELECT gnsbmod.cdsubmod
                ,gnsbmod.dssubmod
            FROM gnsbmod
           WHERE gnsbmod.cdmodali = pr_cdmodali
             AND gnsbmod.cdsubmod = pr_cdsubmod;
        rw_gnsbmod cr_gnsbmod%ROWTYPE;
        
        --> Verificar se é emprestimo de cessao de credito
        CURSOR cr_tbcessao (pr_cdcooper IN craplem.cdcooper%type
                           ,pr_nrdconta IN craplem.nrdconta%type
                           ,pr_nrctremp IN craplem.nrctremp%type) IS
          SELECT ces.nrconta_cartao
            FROM tbcrd_cessao_credito ces
           WHERE ces.cdcooper = pr_cdcooper
             AND ces.nrdconta = pr_nrdconta
             AND ces.nrctremp = pr_nrctremp; 
        rw_tbcessao cr_tbcessao%ROWTYPE;
        
        
        --Tipo de Tabela para Break-by do emprestimo
        TYPE typ_tab_extrato_epr_novo IS TABLE OF typ_reg_extrato_epr INDEX BY VARCHAR2(100);
        vr_tab_extrato_epr_novo typ_tab_extrato_epr_novo;
        --Tabela de Memoria de Extrato Emprestimo
        vr_tab_extrato_epr typ_tab_extrato_epr; 
        vr_tab_parcela_epr empr0004.typ_tab_parcela_epr;
        --Tabelas de Memoria para Pagamentos das Parcelas Emprestimo
        vr_tab_pgto_parcel empr0001.typ_tab_pgto_parcel;
        vr_tab_calculado empr0001.typ_tab_calculado;
        --Tabela de Memoria pra guardar informacoes das parcelas
        TYPE typ_tab_linha_parcela IS TABLE OF VARCHAR2(200) INDEX BY PLS_INTEGER;
        vr_tab_linha_parcela typ_tab_linha_parcela;
        --Indices para as tabelas de memoria
        vr_index_extrato PLS_INTEGER;
        vr_index_parcela PLS_INTEGER;
        vr_index_epr_aux PLS_INTEGER;
        vr_index_novo    VARCHAR2(100);
        vr_index_linha_parcela PLS_INTEGER;
        --Variaveis Tabela generica
        vr_parempctl craptab.dstextab%type;
        vr_vlemprst VARCHAR2(100);
        vr_txmensal VARCHAR2(100);
        vr_txinmens VARCHAR2(100);
        vr_multatra VARCHAR2(100);
        vr_vlparepr VARCHAR2(100);
        vr_carencia VARCHAR2(100);
        /* campos f-parcelas    ESQ */                         
        vr_codigesq VARCHAR2(100);
        vr_datadesq DATE;
        vr_valoresq VARCHAR2(100);
        vr_indpgesq VARCHAR2(100);
        vr_indpgdir VARCHAR2(100);
        vr_contaesq INTEGER:= 0;
        vr_contalin INTEGER:= 0;
        /* campos f-parcelas    DIR */                         
        vr_codigdir VARCHAR2(100);
        vr_dataddir DATE;
        vr_valordir VARCHAR2(100);
        vr_contadir INTEGER;
        vr_carencia2 NUMBER;
        /*  relatorio */                                       
        vr_nmarquiv VARCHAR2(100);
        vr_contador INTEGER;
        vr_vlsaldo1 NUMBER;
        vr_vlsaldo2 NUMBER;
        vr_flginfor BOOLEAN:= FALSE;
				vr_flginfor2 BOOLEAN:= FALSE;
        vr_flginfor3 BOOLEAN:= FALSE;
        vr_diapagto INTEGER;
        vr_mespagto INTEGER;
        vr_anopagto INTEGER;
        vr_dsorigem VARCHAR2(100);
        vr_dstransa VARCHAR2(100);
        vr_nrdrowid ROWID; 
        vr_dstexinf VARCHAR2(200);
        vr_dstexinf2 VARCHAR2(200);
        vr_dstexinf3 VARCHAR2(200);
        vr_dslinpar VARCHAR2(200); 
        vr_dstexto  VARCHAR2(32600);
				vr_flgloop  BOOLEAN := FALSE;
        vr_txanual  crawepr.txmensal%TYPE;
        vr_txnomina crawepr.txmensal%TYPE;
        --Variaveis de Erro
        vr_cdcritic INTEGER;
        vr_dscritic VARCHAR2(4000);
        --Variaveis de Excecoes
        vr_exc_erro EXCEPTION;
        vr_exc_proximo EXCEPTION;
        --IOF
        vr_vltxiofadc NUMBER := 0;
        vr_vltxiofpri NUMBER := 0;
        vr_vltxiofcpl NUMBER := 0;
      BEGIN
        --Inicializar transacao
        vr_dsorigem:= gene0001.vr_vet_des_origens(pr_idorigem);
        vr_dstransa:= 'Consultar dados para extrato do emprestimo.'; 
        --Inicializar Variaveis
        vr_cdcritic:= 0;
        vr_dscritic:= NULL;
        pr_des_reto:= 'NOK';
        --Limpar tabela Memoria
        pr_tab_extrato_epr_aux.DELETE;
        -- Verifica se a cooperativa esta cadastrada
        OPEN cr_crapcop (pr_cdcooper => pr_cdcooper);
        FETCH cr_crapcop INTO rw_crapcop;
        -- Se nao encontrar
        IF cr_crapcop%NOTFOUND THEN
          -- Fechar o cursor pois haverá raise
          CLOSE cr_crapcop;
          -- Montar mensagem de critica
          vr_cdcritic:= 651;
          vr_dscritic:= NULL;
          --Levantar Excecao
          RAISE vr_exc_erro; 
        ELSE
          -- Apenas fechar o cursor
          CLOSE cr_crapcop;
        END IF;
        --Buscar Data do Sistema para a cooperativa 
        OPEN btch0001.cr_crapdat(pr_cdcooper => pr_cdcooper);
        FETCH btch0001.cr_crapdat INTO rw_crapdat;
        --Se nao encontrou
        IF btch0001.cr_crapdat%NOTFOUND THEN
          -- Fechar Cursor
          CLOSE btch0001.cr_crapdat;
          -- montar mensagem de critica
          vr_cdcritic:= 1;
          vr_dscritic:= NULL;
          -- Levantar Excecao
          RAISE vr_exc_erro;
        ELSE
          -- apenas fechar o cursor
          CLOSE btch0001.cr_crapdat;
        END IF;
        --Selecionar associado
        OPEN cr_crapass (pr_cdcooper => pr_cdcooper
                        ,pr_nrdconta => pr_nrdconta);
        --Posicionar no proximo registro
        FETCH cr_crapass INTO rw_crapass;
        --Se nao encontrou
        IF cr_crapass%NOTFOUND THEN
          --Fechar Cursor
          CLOSE cr_crapass;
          --mensagem erro
          vr_cdcritic:= 9;
          vr_dscritic:= NULL;
          -- Levantar Excecao
          RAISE vr_exc_erro;
        ELSE
          -- apenas fechar o cursor
          CLOSE cr_crapass;
        END IF;
        --Selecionar Dados Agencia
        OPEN cr_crapage(pr_cdcooper => pr_cdcooper
                       ,pr_cdagenci => rw_crapass.cdagenci);
        FETCH cr_crapage INTO rw_crapage;
        --Se nao Encontrou            
        IF cr_crapage%NOTFOUND THEN
          --Fechar Cursor
          CLOSE cr_crapage;
          --Codigo Critica    
          vr_cdcritic:= 962;
          vr_dscritic:= NULL;
          --Sair
          RAISE vr_exc_erro;
        END IF;  
        -- Fechar o cursor
        CLOSE cr_crapage;
        
        --Validar Emprestimo Tipo1
        EMPR0004.pc_valida_empr_tipo1 (pr_cdcooper => pr_cdcooper     --Codigo Cooperativa
                                      ,pr_cdagenci => pr_cdagenci     --Codigo Agencia
                                      ,pr_nrdcaixa => pr_nrdcaixa     --Numero do Caixa
                                      ,pr_nrdconta => pr_nrdconta     --Numero da Conta do Associado
                                      ,pr_nrctremp => pr_nrctremp     --Numero Contrato Emprestimo
                                      ,pr_des_reto => pr_des_reto     --Retorno OK ou NOK
                                      ,pr_tab_erro => pr_tab_erro);   --Tabela de Erros
        --Se ocorreu erro
        IF pr_des_reto = 'NOK' THEN
          RETURN;
        END IF; 
        --Limpar tabela Emprestimo
        vr_tab_extrato_epr.DELETE; 
        --Obter Extrato do Emprestimo
        pc_obtem_extrato_emprest (pr_cdcooper    => pr_cdcooper          --Codigo Cooperativa
                                 ,pr_cdagenci    => pr_cdagenci          --Codigo Agencia
                                 ,pr_nrdcaixa    => pr_nrdcaixa          --Numero do Caixa
                                 ,pr_cdoperad    => pr_cdoperad          --Codigo Operador
                                 ,pr_nmdatela    => pr_nmdatela          --Nome da Tela
                                 ,pr_idorigem    => pr_idorigem          --Origem dos Dados
                                 ,pr_nrdconta    => pr_nrdconta          --Numero da Conta do Associado
                                 ,pr_idseqttl    => pr_idseqttl          --Sequencial do Titular
                                 ,pr_nrctremp    => pr_nrctremp          --Numero Contrato Emprestimo           
                                 ,pr_dtiniper    => pr_dtiniper          --Inicio periodo Extrato
                                 ,pr_dtfimper    => pr_dtfimper          --Final periodo Extrato
                                 ,pr_flgerlog    => pr_flgerlog          --Imprimir log
                                 ,pr_extrato_epr => vr_tab_extrato_epr   --Tipo de tabela com extrato emprestimo
                                 ,pr_des_reto    => pr_des_reto          --Retorno OK ou NOK
                                 ,pr_tab_erro    => pr_tab_erro);        --Tabela de Erros
        --Se ocorreu erro
        IF pr_des_reto = 'NOK' THEN 
          RETURN;
         END IF; 
        
        --Consultar Emprestimo
        OPEN cr_crapepr (pr_cdcooper => pr_cdcooper
                        ,pr_nrdconta => pr_nrdconta
                        ,pr_nrctremp => pr_nrctremp);
        FETCH cr_crapepr INTO rw_crapepr;
        --Se Encontrou
        IF cr_crapepr%NOTFOUND THEN
          --Fechar Cursor
          CLOSE cr_crapepr;  
          --mensagem Critica
          vr_cdcritic:= 356;
          vr_dscritic:= NULL;
          --Levantar Excecao
          RAISE vr_exc_erro;            
        END IF;
        --Fechar Cursor
        CLOSE cr_crapepr; 
        --Selecionar Informacoes Adicionais do Emprestimo
        OPEN cr_crawepr (pr_cdcooper => pr_cdcooper
                        ,pr_nrdconta => pr_nrdconta
                        ,pr_nrctremp => pr_nrctremp);
        FETCH cr_crawepr INTO rw_crawepr;
        --Se nao Encontrou
        IF cr_crawepr%NOTFOUND THEN
          --Fechar Cursor
          CLOSE cr_crawepr;  
          --mensagem Critica
          vr_cdcritic:= 535;
          vr_dscritic:= NULL;
          --Levantar Excecao
          RAISE vr_exc_erro; 
        END IF;
        --Fechar Cursor
        CLOSE cr_crawepr;
        
        --Selecionar Linha Credito
        OPEN cr_craplcr (pr_cdcooper => pr_cdcooper
                        ,pr_cdlcremp => rw_crapepr.cdlcremp);
        FETCH cr_craplcr INTO rw_craplcr;
        --Se nao encontrou
        IF cr_craplcr%NOTFOUND THEN
          --mensagem Critica
          vr_cdcritic:= 363;
          vr_dscritic:= NULL;
          --Levantar Excecao
          RAISE vr_exc_erro;
        END IF;
        --Fechar Cursor
        CLOSE cr_craplcr;
        
        IF rw_craplcr.flgcobmu = 1 THEN
          -- Leitura do indicador de uso da tabela de taxa de juros                                                    
          vr_parempctl:= tabe0001.fn_busca_dstextab (pr_cdcooper => 3 /*Fixo Cecred*/
                                                    ,pr_nmsistem => 'CRED'
                                                    ,pr_tptabela => 'USUARI'
                                                    ,pr_cdempres => 11
                                                    ,pr_cdacesso => 'PAREMPCTL'
                                                    ,pr_tpregist => 1); 
          --Se estiver nulo
          IF vr_parempctl IS NULL THEN
            --mensagem Critica
            vr_cdcritic:= 55;
            vr_dscritic:= NULL;
            --Levantar Excecao
            RAISE vr_exc_erro; 
          END IF; 
        ELSE
          vr_parempctl := 0;
            
        END IF;  
          
        --Dia/mes/ano do pagamento
        vr_diapagto:= to_number(to_char(rw_crawepr.dtdpagto,'DD')); 
        vr_mespagto:= to_number(to_char(rw_crawepr.dtdpagto,'MM'));  
        vr_anopagto:= to_number(to_char(rw_crawepr.dtdpagto,'YYYY'));  
        
        -- Chamar rotina para calcular a diferença de dias
        -- entre a data que deveria ter sido paga e a data paga
        empr0001.pc_calc_dias360 (pr_ehmensal => FALSE                               -- Indica se juros esta rodando na mensal
                                 ,pr_dtdpagto => to_char(rw_crawepr.dtdpagto,'DD')   -- Dia do primeiro vencimento do emprestimo
                                 ,pr_diarefju => to_char(rw_crawepr.dtlibera,'DD')   -- Dia da data de referencia da última vez que rodou juros
                                 ,pr_mesrefju => to_char(rw_crawepr.dtlibera,'MM')   -- Mes da data de referencia da última vez que rodou juros
                                 ,pr_anorefju => to_char(rw_crawepr.dtlibera,'YYYY') -- Ano da data de referencia da última vez que rodou juros
                                 ,pr_diafinal => vr_diapagto                         -- Dia data final
                                 ,pr_mesfinal => vr_mespagto                         -- Mes data final
                                 ,pr_anofinal => vr_anopagto                         -- Ano data final
                                 ,pr_qtdedias => vr_carencia2);                      -- Quantidade de dias calculada 
        --Valor Emprestimo
        vr_vlemprst:= 'R$ '||trim(to_char(rw_crapepr.vlemprst,'fm999g999g990d00')); 
        --Taxa Mensal Juros
        vr_txmensal:= trim(to_char(rw_crapepr.txmensal,'fm990d00')||'%');  
        --Carencia do Emprestimo
        vr_carencia:= trim(to_char(vr_carencia2,'fm9990'))||' dias';    
        --Multa 
        IF vr_parempctl IS NOT NULL THEN
          vr_multatra:= to_char(gene0002.fn_char_para_number(SUBSTR(vr_parempctl,1,6)),'fm990d00')||'%';
        ELSE
          vr_multatra:= '0';
        END IF;    
        --Valor Parcela Emprestimo
        vr_vlparepr:= 'R$ '||trim(to_char(rw_crapepr.vlpreemp,'fm999g999g990d00')); 
        --Juros de Mora
        vr_txinmens:= trim(to_char(rw_craplcr.perjurmo,'fm990d00')||'%');
        
        --Se deve imprimir
        IF pr_flgimpri THEN
          -- A utilizacao da taxa diaria para conversao anual eh devido o 
          -- contrato antigo nao possuir taxa mensal
          vr_txanual  := TRUNC((POWER(1 + (rw_crawepr.txdiaria / 100), 360) - 1) * 100, 5);
          vr_txnomina := TRUNC(((POWER(1 + (vr_txanual / 100), 1/12) - 1) * 12) * 100, 5);

          --Selecionar Modalidade
          OPEN cr_gnmodal (pr_cdmodali => rw_craplcr.cdmodali);
          FETCH cr_gnmodal INTO rw_gnmodal;
          --Fechar Cursor
          CLOSE cr_gnmodal;

          --Selecionar Sub Modalidade
          OPEN cr_gnsbmod (pr_cdmodali => rw_craplcr.cdmodali
                          ,pr_cdsubmod => rw_craplcr.cdsubmod);
          FETCH cr_gnsbmod INTO rw_gnsbmod;
          --Fechar Cursor
          CLOSE cr_gnsbmod;

          --> Verificar se é emprestimo de cessao de credito
          rw_tbcessao := NULL;
          OPEN cr_tbcessao (pr_cdcooper => pr_cdcooper
                           ,pr_nrdconta => pr_nrdconta
                           ,pr_nrctremp => rw_crapepr.nrctremp);
          FETCH cr_tbcessao INTO rw_tbcessao;
          CLOSE cr_tbcessao;
          

          --Gravar Informacoes do cabecalho no XML
          vr_dstexto:= '<conta tpemprst="' || rw_crapepr.tpemprst || '" flgmensag="N" dscmensag=""' ||
                       '  nrdconta="' || to_char(pr_nrdconta,'fm9999g999g0')                        ||
                       '" nmprimtl="' || RPAD(rw_crapass.nmprimtl,30,' ')                           || 
                       '" cdagenci="' || rw_crapage.cdagenci                                        ||
                       '" cdagenci_emp="' || rw_crapepr.cdagenci                                    ||
                       '" nmresage="' || rw_crapage.nmresage                                        ||
                       '" dtmvtolt="' || to_char(rw_crapdat.dtmvtolt,'DD/MM/YYYY')                  ||
                       '" nmextcop="' || rw_crapcop.nmextcop                                        ||
                       '" nmrescop="' || rw_crapcop.nmrescop                                        ||
                       '" nrdocnpj="' || gene0002.fn_mask_cpf_cnpj(rw_crapcop.nrdocnpj,2)           ||
                       '" nrctremp="' || to_char(rw_crapepr.nrctremp,'fm999g999g990')               ||                
                       '" vlparcel="' || to_char(rw_crapepr.vlpreemp,'fm9999g999g990d00')           ||
                       '" percetop="' || to_char(rw_crawepr.percetop,'fm9999g999g990d00000')        ||
                       '" dtultpgt="' || to_char(ADD_MONTHS(rw_crawepr.dtdpagto, rw_crapepr.qtpreemp - 1),'DD/MM/YYYY') ||
                       '" cdmodali="' || rw_gnmodal.cdmodali                                        ||
                       '" dsmodali="' || rw_gnmodal.dsmodali                                        ||
                       '" cdsubmod="' || rw_gnsbmod.cdsubmod                                        ||
                       '" dssubmod="' || gene0007.fn_caract_acento(rw_gnsbmod.dssubmod,1,'#$&%¹²³ªº°*!?<>|','                  ') ||
                       '" nrconta_cartao="' || rw_tbcessao.nrconta_cartao                           ||
                       '" txanual="'  || to_char(vr_txanual,'fm9999g999g990d00000')                 ||
                       '" txnominal="'|| to_char(vr_txnomina,'fm9999g999g990d00000')                ||
                       '" qtpreapg="' || to_char(pr_qtpreapg,'fm990d0000')                          ||
                       '" qtpreemp="' || to_char(rw_crapepr.qtpreemp,'fm990')                       ||
                        '" dslcremp="" dsdaval1="" dsfinemp="" dsdaval2="" vlpreemp="" vljuracu="'  ||
                       '" vlsdeved="" inprejuz="" dtprejuz="" vlprejuz="" vljraprj="">';
          --Escrever no XML
          gene0002.pc_escreve_xml(pr_clobxml,pr_dstexto,vr_dstexto);

          --Escrever no XML interno
          gene0002.pc_escreve_xml(pr_clobxml73,pr_dstexto73,vr_dstexto);

          TIOF0001.pc_busca_taxa_iof(pr_cdcooper	=> pr_cdcooper     --> Codigo da Cooperativa 
                                    ,pr_nrdconta  => pr_nrdconta     --> Numero da Conta Corrente
                                    ,pr_nrctremp  => rw_crapepr.nrctremp   --> Numero do Contrato
                                    ,pr_dtmvtolt  => pr_dtmvtolt     --> Data do movimento para busca na tabela de IOF
                                    ,pr_cdlcremp => rw_crapepr.cdlcremp --> linha de credito emprestimo
                                    ,pr_cdfinemp => rw_crapepr.cdfinemp --> Finalidade do credito
                                    ,pr_vlemprst => rw_crapepr.vlemprst
                                    ,pr_vltxiofpri => vr_vltxiofpri  --> Taxa de IOF principal
                                    ,pr_vltxiofadc => vr_vltxiofadc  --> Taxa de IOF adiciona                                    ,pr_vltxiofad => vr_vltxiofcpl  --> Taxa de IOF adicional
                                    ,pr_vltxiofcpl => vr_vltxiofcpl  --> Taxa de IOF adiciona                                    ,pr_vltxiofad => vr_vltxiofcpl  --> Taxa de IOF adicional
                                    ,pr_cdcritic  => vr_cdcritic     --> Código da Crítica
                                    ,pr_dscritic  => vr_dscritic);   --> Descrição da Crítica
                                    
          IF NVL(vr_dscritic, ' ') <> ' ' THEN
            RETURN;
          END IF;

          --Montar Texto
          vr_dstexto:= '<parcelas' ||
                          '  p_nrdconta="'||to_char(rw_crapepr.nrdconta,'fm9999g999g0')||
                          '" p_nrctremp="'||to_char(rw_crapepr.nrctremp,'fm999g999g990')||
                          '" p_cdagenci="'||rw_crapepr.cdagenci||
                          '" p_dslcremp="'||rw_craplcr.dslcremp||
                          '" p_vlemprst="'||vr_vlemprst        ||
                          '" p_dtmvtolt="'||to_char(rw_crapepr.dtmvtolt,'DD/MM/YYYY')||
                          '" p_txmensal="'||vr_txmensal        ||
                          '" p_txinmens="'||vr_txinmens        ||
                          '" p_multatra="'||vr_multatra        ||
                          '" p_vlparepr="'||vr_vlparepr        || 
                          '" p_qtpreemp="'||rw_crapepr.qtpreemp||
                          '" p_carencia="'||vr_carencia ||                          
                          '" p_vltxiofadc="'||to_char((nvl(vr_vltxiofadc, 0) * 100), 'fm9999g999g990d00000')||'%'    ||
                          '" p_vltxiofpri="'||to_char((nvl(rw_crapepr.vlaqiofc, 0) * 100), 'fm9999g999g990d00000')||'%'    ||'">';
                          
          --Escrever no XML
          gene0002.pc_escreve_xml(pr_clobxml,pr_dstexto,vr_dstexto);

          --Escrever no XML interno
          gene0002.pc_escreve_xml(pr_clobxml73,pr_dstexto73,vr_dstexto);

        END IF;
        --Limpar tabela de memoria de parcelas
        vr_tab_parcela_epr.DELETE;
        --Buscar Parcelas da Proposta
        EMPR0004.pc_busca_parcelas_proposta (pr_cdcooper    => pr_cdcooper             --Codigo Cooperativa
                                            ,pr_cdagenci    => pr_cdagenci             --Codigo Agencia
                                            ,pr_nrdcaixa    => pr_nrdcaixa             --Numero do Caixa
                                            ,pr_cdoperad    => pr_cdoperad             --Codigo Operador
                                            ,pr_nmdatela    => pr_nmdatela             --Nome da Tela
                                            ,pr_idorigem    => pr_idorigem             --Origem dos Dados
                                            ,pr_nrdconta    => pr_nrdconta             --Numero da Conta do Associado
                                            ,pr_idseqttl    => pr_idseqttl             --Sequencial do Titular
                                            ,pr_dtmvtolt    => pr_dtmvtolt             --Data Movimento
                                            ,pr_flgerlog    => pr_flgerlog             --Imprimir log
                                            ,pr_nrctremp    => pr_nrctremp             --Contrato Emprestimo
                                            ,pr_cdlcremp    => rw_crapepr.cdlcremp     --Linha Credito
                                            ,pr_vlemprst    => rw_crapepr.vlemprst     --Valor Emprestimo
                                            ,pr_qtparepr    => rw_crapepr.qtpreemp     --Quantidade parcelas emprestimo
                                            ,pr_dtlibera    => rw_crapepr.dtmvtolt     --Data Liberacao
                                            ,pr_dtdpagto    => rw_crapepr.dtdpagto     --Data pagamento 
                                            ,pr_parcela_epr => vr_tab_parcela_epr      -->Tipo de tabela com parcelas emprestimo
                                            ,pr_des_reto    => pr_des_reto             --Retorno OK ou NOK
                                            ,pr_tab_erro    => pr_tab_erro);           --Tabela de Erros  
        --Se ocorreu erro
        IF pr_des_reto = 'NOK' THEN
          RETURN; 
        END IF; 
        --limpar tabela memoria
        vr_tab_linha_parcela.DELETE;
        --Verificar Quantidade de Parcelas para gerar linhas 
        vr_contalin:= TRUNC(rw_crapepr.qtpreemp / 2);
        --Se for numero impar de parcelas aumenta em 1
        IF MOD(rw_crapepr.qtpreemp,2) <> 0 THEN
          vr_contalin:= vr_contalin+1;
        END IF;
        --Percorrer todas as parcelas
        FOR vr_contaesq IN 1..vr_contalin LOOP
          --Verificar qual a parcela da direita
          vr_contadir:= vr_contalin+vr_contaesq;
          --Verificar se Existe posicao da esquerda antes de concatenar
          IF vr_tab_parcela_epr.EXISTS(vr_contaesq) THEN
            --Montar Situacao da Parcela da esquerda
            vr_indpgesq:= NULL;
            IF vr_tab_parcela_epr(vr_contaesq).indpagto = 0 THEN
              --Vencida
              IF vr_tab_parcela_epr(vr_contaesq).dtvencto < pr_dtmvtolt AND
                 vr_tab_parcela_epr(vr_contaesq).dtvencto <= rw_crapdat.dtmvtoan THEN 
                --Vencida
                vr_indpgesq:= 'Vencida';  
              ELSE
                --A Vencer
                vr_indpgesq:= 'A vencer';
                --Acumular Saldo a Vencer
                vr_vlsaldo1:= nvl(vr_vlsaldo1,0) + vr_tab_parcela_epr(vr_contaesq).vlparepr;  
              END IF;     
            ELSIF vr_tab_parcela_epr(vr_contaesq).indpagto = 1 THEN 
              --Liquidada
              vr_indpgesq:= 'Liquidada'; 
            END IF;  
            --Montar a String para gravar na tabela
            vr_dslinpar:= RPAD(to_char(vr_tab_parcela_epr(vr_contaesq).nrparepr,'fm990')||')',5,' ')||
                          to_char(vr_tab_parcela_epr(vr_contaesq).dtparepr,'DD/MM/YY')||' '||
                          RPAD(to_char(vr_tab_parcela_epr(vr_contaesq).vlparepr,'fm999g999g990d00'),13,' ')||
                          RPAD(vr_indpgesq,13,' ');
          END IF;   
          --Verificar de existe parcela para colocar na direita
          IF vr_tab_parcela_epr.EXISTS(vr_contadir) THEN
            --Montar Situacao da Parcela da direita
            vr_indpgdir:= NULL;
            IF vr_tab_parcela_epr(vr_contadir).indpagto = 0 THEN
              --Vencida
              IF vr_tab_parcela_epr(vr_contadir).dtvencto < pr_dtmvtolt AND
                 vr_tab_parcela_epr(vr_contadir).dtvencto <= rw_crapdat.dtmvtoan THEN 
                --Vencida
                vr_indpgdir:= 'Vencida';  
              ELSE
                --A Vencer
                vr_indpgdir:= 'A vencer';
                --Acumular Saldo a Vencer
                vr_vlsaldo1:= nvl(vr_vlsaldo1,0) + vr_tab_parcela_epr(vr_contadir).vlparepr;  
              END IF;     
            ELSIF vr_tab_parcela_epr(vr_contadir).indpagto = 1 THEN 
              --Liquidada
              vr_indpgdir:= 'Liquidada'; 
            END IF;  
            --Concatenar as 2 strings
            vr_dslinpar:= vr_dslinpar ||
                          RPAD(to_char(vr_tab_parcela_epr(vr_contadir).nrparepr,'fm990')||')',5,' ')||
                          to_char(vr_tab_parcela_epr(vr_contadir).dtparepr,'DD/MM/YY')||' '||
                          RPAD(to_char(vr_tab_parcela_epr(vr_contadir).vlparepr,'fm999g999g990d00'),13,' ')||
                          RPAD(vr_indpgdir,13,' ');
          END IF;                             
          --Proxima Linha
          vr_index_linha_parcela:= vr_tab_linha_parcela.COUNT +1;
          vr_tab_linha_parcela(vr_index_linha_parcela):= vr_dslinpar;
        END LOOP; 
        
        --Colocar as Linhas prontas no CLOB
        vr_index_linha_parcela:= vr_tab_linha_parcela.FIRST;
        WHILE vr_index_linha_parcela IS NOT NULL LOOP
          --Montar Texto
          vr_dstexto:= '<parcela>'||vr_tab_linha_parcela(vr_index_linha_parcela)||'</parcela>';
          --Escrever no XML
          gene0002.pc_escreve_xml(pr_clobxml,pr_dstexto,vr_dstexto);

          --Escrever no XML interno
          gene0002.pc_escreve_xml(pr_clobxml73,pr_dstexto73,vr_dstexto);

          --Proxima Parcela
          vr_index_linha_parcela:= vr_tab_linha_parcela.NEXT(vr_index_linha_parcela);
        END LOOP;  
        
        --Valor do Saldo
        vr_vlsaldo1:=  rw_crapepr.vlemprst;
        --Limpar tabelas de Memorias de Pagamentos de parcelas
        vr_tab_pgto_parcel.DELETE;
        vr_tab_calculado.DELETE;
        --Buscar Pagamentos das Parcelas
        EMPR0001.pc_busca_pgto_parcelas (pr_cdcooper => pr_cdcooper                --> Cooperativa conectada
                                        ,pr_cdagenci => pr_cdagenci                --> Código da agência
                                        ,pr_nrdcaixa => pr_nrdcaixa                --> Número do caixa
                                        ,pr_cdoperad => pr_cdoperad                --> Código do Operador
                                        ,pr_nmdatela => pr_nmdatela                --> Nome da tela
                                        ,pr_idorigem => pr_idorigem                --> Id do módulo de sistema
                                        ,pr_nrdconta => rw_crapepr.nrdconta        --> Número da conta
                                        ,pr_idseqttl => pr_idseqttl                --> Sequencia titular
                                        ,pr_dtmvtolt => rw_crapdat.dtmvtolt        --> Movimento atual
                                        ,pr_flgerlog => 'N'                        --> Indicador S/N para geração de log
                                        ,pr_nrctremp => rw_crapepr.nrctremp        --> Número do contrato de empréstimo
                                        ,pr_dtmvtoan => rw_crapdat.dtmvtoan        --> Data anterior
                                        ,pr_nrparepr => 0 /*Todas*/                --> Número parcelas empréstimo
                                        ,pr_des_reto => pr_des_reto                --> Retorno OK / NOK
                                        ,pr_tab_erro => pr_tab_erro                --> Tabela com possíves erros
                                        ,pr_tab_pgto_parcel => vr_tab_pgto_parcel  --> Tabela com registros de pagamentos
                                        ,pr_tab_calculado   => vr_tab_calculado);  --> Tabela com totais calculados 
        --Se ocorreu erro
        IF pr_des_reto = 'NOK' THEN                             
          RETURN;
        END IF; 
        --Se tem registros calculados
        IF vr_tab_calculado.COUNT > 0 THEN
          --Saldo Devedor
          vr_vlsaldo2:= vr_tab_calculado(vr_tab_calculado.FIRST).vlsdeved;
        END IF; 
         
        --Preparar a tabela conforme break-by dtmvtolt/nrparepr/dsextrat/flglista:
        vr_tab_extrato_epr_novo.DELETE;
        vr_index_extrato:= vr_tab_extrato_epr.FIRST;
        WHILE vr_index_extrato IS NOT NULL LOOP
          --Montar novo indice conforme break-by
          vr_index_novo:= TO_CHAR(vr_tab_extrato_epr(vr_index_extrato).dtmvtolt,'YYYYMMDD')|| 
                          LPAD(NVL(vr_tab_extrato_epr(vr_index_extrato).nrparepr,0),10,'0')||
                          RPAD(vr_tab_extrato_epr(vr_index_extrato).dsextrat,50,'#')||
                          CASE vr_tab_extrato_epr(vr_index_extrato).flglista WHEN TRUE THEN '1' ELSE '0' END||
                          LPAD(vr_index_extrato,10,'0');
            
          --Copiar de uma tabela para outra
          vr_tab_extrato_epr_novo(vr_index_novo):= vr_tab_extrato_epr(vr_index_extrato);
          --Proximo Registro Extrato
          vr_index_extrato:= vr_tab_extrato_epr.NEXT(vr_index_extrato);
        END LOOP;   
        
        --Percorrer todo o extrato emprestimo para carregar tabela auxiliar
        vr_index_novo:= vr_tab_extrato_epr_novo.FIRST;
        WHILE vr_index_novo IS NOT NULL LOOP
          BEGIN
            --Buscar Proximo registro extrato
            vr_index_epr_aux:= pr_tab_extrato_epr_aux.COUNT+1;
            --Popular Informacoes
            pr_tab_extrato_epr_aux(vr_index_epr_aux).nrdconta:= vr_tab_extrato_epr_novo(vr_index_novo).nrdconta;
            pr_tab_extrato_epr_aux(vr_index_epr_aux).dtmvtolt:= vr_tab_extrato_epr_novo(vr_index_novo).dtmvtolt;
            pr_tab_extrato_epr_aux(vr_index_epr_aux).cdagenci:= vr_tab_extrato_epr_novo(vr_index_novo).cdagenci; 
            pr_tab_extrato_epr_aux(vr_index_epr_aux).cdbccxlt:= vr_tab_extrato_epr_novo(vr_index_novo).cdbccxlt;
            pr_tab_extrato_epr_aux(vr_index_epr_aux).nrdolote:= vr_tab_extrato_epr_novo(vr_index_novo).nrdolote;
            pr_tab_extrato_epr_aux(vr_index_epr_aux).dshistor:= vr_tab_extrato_epr_novo(vr_index_novo).dshistor;
            pr_tab_extrato_epr_aux(vr_index_epr_aux).nrdocmto:= vr_tab_extrato_epr_novo(vr_index_novo).nrdocmto;
            pr_tab_extrato_epr_aux(vr_index_epr_aux).indebcre:= vr_tab_extrato_epr_novo(vr_index_novo).indebcre;
            pr_tab_extrato_epr_aux(vr_index_epr_aux).vllanmto:= vr_tab_extrato_epr_novo(vr_index_novo).vllanmto;
            pr_tab_extrato_epr_aux(vr_index_epr_aux).txjurepr:= vr_tab_extrato_epr_novo(vr_index_novo).txjurepr;
            pr_tab_extrato_epr_aux(vr_index_epr_aux).qtpresta:= vr_tab_extrato_epr_novo(vr_index_novo).qtpresta;
            pr_tab_extrato_epr_aux(vr_index_epr_aux).nrparepr:= vr_tab_extrato_epr_novo(vr_index_novo).nrparepr;
            pr_tab_extrato_epr_aux(vr_index_epr_aux).dsextrat:= vr_tab_extrato_epr_novo(vr_index_novo).dsextrat;
            pr_tab_extrato_epr_aux(vr_index_epr_aux).flglista:= vr_tab_extrato_epr_novo(vr_index_novo).flglista;
            pr_tab_extrato_epr_aux(vr_index_epr_aux).cdorigem:= vr_tab_extrato_epr_novo(vr_index_novo).cdorigem;

            --Historicos
            IF vr_tab_extrato_epr_novo(vr_index_novo).cdhistor IN (1050,1051) THEN
              --Flag Informacao
              vr_flginfor:= TRUE;
              --Descricao do Extrato
              pr_tab_extrato_epr_aux(vr_index_epr_aux).dsextrat:= vr_tab_extrato_epr_novo(vr_index_novo).dsextrat||'*';
            END IF;
            IF vr_tab_extrato_epr_novo(vr_index_novo).cdhistor IN (1711,1720,1708,1711,
                                                                   --> Novos historicos de estorno de financiamento
                                                                   2784,2785,2786,2787) THEN
              --Flag Informacao
              vr_flginfor2:= TRUE;
              --Descricao do Extrato
              pr_tab_extrato_epr_aux(vr_index_epr_aux).dsextrat:= vr_tab_extrato_epr_novo(vr_index_novo).dsextrat||'**';
            END IF;
            IF vr_tab_extrato_epr_novo(vr_index_novo).cdhistor = 2735 THEN
              --Flag Informacao
              vr_flginfor3:= TRUE;
              --Descricao do Extrato
              pr_tab_extrato_epr_aux(vr_index_epr_aux).dsextrat:= vr_tab_extrato_epr_novo(vr_index_novo).dsextrat||'***';
            END IF;

            --Primeira Ocorrencia
            IF vr_flgloop = FALSE THEN
              /* Saldo Inicial */
              pr_tab_extrato_epr_aux(vr_index_epr_aux).vlsaldo:= vr_tab_extrato_epr_novo(vr_index_novo).vllanmto;
              pr_tab_extrato_epr_aux(vr_index_epr_aux).vldebito:= vr_tab_extrato_epr_novo(vr_index_novo).vllanmto;
              --Saldo Inicial
              vr_vlsaldo1:= vr_tab_extrato_epr_novo(vr_index_novo).vllanmto; 
							vr_flgloop := TRUE;
              --Proximo Registro
              RAISE vr_exc_proximo;            
            END IF; 
            --Se for Credito
            IF pr_tab_extrato_epr_aux(vr_index_epr_aux).indebcre = 'C' THEN
              --Valor Credito
              pr_tab_extrato_epr_aux(vr_index_epr_aux).vlcredit:= vr_tab_extrato_epr_novo(vr_index_novo).vllanmto;
              --Se possuir Saldo
              IF vr_tab_extrato_epr_novo(vr_index_novo).flgsaldo THEN
                vr_vlsaldo1:= nvl(vr_vlsaldo1,0) - vr_tab_extrato_epr_novo(vr_index_novo).vllanmto;
                pr_tab_extrato_epr_aux(vr_index_epr_aux).vlsaldo:= vr_vlsaldo1;
              ELSE
                pr_tab_extrato_epr_aux(vr_index_epr_aux).vlsaldo:= vr_vlsaldo1;
              END IF;    
            ELSIF pr_tab_extrato_epr_aux(vr_index_epr_aux).indebcre = 'D' THEN 
              --Valor Debito
              pr_tab_extrato_epr_aux(vr_index_epr_aux).vldebito:= vr_tab_extrato_epr_novo(vr_index_novo).vllanmto;
              --Se possuir Saldo
              IF vr_tab_extrato_epr_novo(vr_index_novo).flgsaldo THEN
                vr_vlsaldo1:= nvl(vr_vlsaldo1,0) + vr_tab_extrato_epr_novo(vr_index_novo).vllanmto;
                pr_tab_extrato_epr_aux(vr_index_epr_aux).vlsaldo:= vr_vlsaldo1;
              ELSE
                pr_tab_extrato_epr_aux(vr_index_epr_aux).vlsaldo:= vr_vlsaldo1;
              END IF;    
            END IF;
            
            -- Para o contrato PP em prejuizo, o saldo sera zerado para nao ficar negativo
            IF vr_index_novo = vr_tab_extrato_epr_novo.LAST OR 
               vr_tab_extrato_epr_novo(vr_index_novo).dtmvtolt <> vr_tab_extrato_epr_novo(vr_tab_extrato_epr_novo.NEXT(vr_index_novo)).dtmvtolt THEN
              IF rw_crapepr.tpemprst = 1 AND rw_crapepr.inprejuz = 1 THEN           
                pr_tab_extrato_epr_aux(vr_index_epr_aux).vlsaldo := 0;
              END IF;              
            END IF;
            
          EXCEPTION
            WHEN vr_exc_proximo THEN
              NULL;
          END;       
          --Proximo Registro Extrato
          vr_index_novo:= vr_tab_extrato_epr_novo.NEXT(vr_index_novo);
        END LOOP; --vr_index_novo 
          
        --Se deve Imprimir
        IF pr_flgimpri THEN
          --Se teve juros remuneratórios
          IF vr_flginfor THEN
            vr_dstexinf:= '* Demonstracao dos juros remuneratorios da parcela paga em atraso. Nao altera o saldo devedor.';
          END IF;  
					IF vr_flginfor2 THEN
            vr_dstexinf2:= '** Atencao! Esse lancamento e apenas informativo, nao  altera o saldo devedor. O credito do estorno e efetuado em conta corrente.';
          END IF; 
					IF vr_flginfor3 THEN
            vr_dstexinf3:= '*** Demonstracao do IOF complementar referente as parcelas em atraso. Valor devido, mas nao altera o saldo devedor.';
          END IF; 
					 
          --Montar Mensagem Extrato
          vr_dstexto:= 'Saldo para Liquidacao em '||to_char(pr_dtmvtolt,'DD/MM/YYYY')||' R$: '||
                       to_char(vr_vlsaldo2,'fm9g999g990d00');
          --Finalizar TAG parcelas e Montar Cabecalho do Extrato
          vr_dstexto:= '</parcelas><extratos dsmsgext="'||vr_dstexto||'" dstexinf="'||vr_dstexinf||'" dstexinf2="'||vr_dstexinf2||'" dstexinf3="'||vr_dstexinf3||'">';
          --Escrever no XML
          gene0002.pc_escreve_xml(pr_clobxml,pr_dstexto,vr_dstexto);

          --Escrever no XML interno
          gene0002.pc_escreve_xml(pr_clobxml73,pr_dstexto73,vr_dstexto);

          --Tipo de Impressão /* 1 - Simplificado,  2 - Detalhado */
          IF pr_intpextr = 2 THEN
            /* Cuidado ao mudar BY deste for each, pois tem que */
            /* estar igual ao FOR EACH da tt-extrato_epr de cima */
            --Percorrer todos os registros
            vr_index_epr_aux:= pr_tab_extrato_epr_aux.FIRST;
            WHILE vr_index_epr_aux IS NOT NULL LOOP
              --Se deve listar
              IF pr_tab_extrato_epr_aux(vr_index_epr_aux).flglista THEN
                --Limpar parcela = 99
                IF pr_tab_extrato_epr_aux(vr_index_epr_aux).nrparepr = 99 THEN
                  pr_tab_extrato_epr_aux(vr_index_epr_aux).nrparepr:= NULL;
                END IF;  
                --Montar Texto
                vr_dstexto:= '<extrato> ' ||
                               '<e_dtmvtolt>'||to_char(pr_tab_extrato_epr_aux(vr_index_epr_aux).dtmvtolt,'DD/MM/YY')||'</e_dtmvtolt>'||              
                               '<e_dsextrat>'||pr_tab_extrato_epr_aux(vr_index_epr_aux).dsextrat||'</e_dsextrat>'||
                               '<e_nrparepr>'||to_char(pr_tab_extrato_epr_aux(vr_index_epr_aux).nrparepr,'fm990')||'</e_nrparepr>'||
                               '<e_vldebito>'||to_char(nvl(pr_tab_extrato_epr_aux(vr_index_epr_aux).vldebito,0),'fm999g999g990d00')||'</e_vldebito>'||
                               '<e_vlcredit>'||to_char(nvl(pr_tab_extrato_epr_aux(vr_index_epr_aux).vlcredit,0),'fm999g999g990d00')||'</e_vlcredit>'||
                               '<e_vlsaldo>' ||to_char(pr_tab_extrato_epr_aux(vr_index_epr_aux).vlsaldo,'fm999g999g990d00')||'</e_vlsaldo>'||
                               '<e_cdorigem>'||to_char(pr_tab_extrato_epr_aux(vr_index_epr_aux).cdorigem)||'</e_cdorigem>'||
                             '</extrato>';
                --Escrever no XML
                gene0002.pc_escreve_xml(pr_clobxml,pr_dstexto,vr_dstexto);
                --Escrever no XML interno
                gene0002.pc_escreve_xml(pr_clobxml73,pr_dstexto73,vr_dstexto);

              END IF; --flglista
              --Proximo Registro Extrato
              vr_index_epr_aux:= pr_tab_extrato_epr_aux.NEXT(vr_index_epr_aux);
            END LOOP;
          END IF; --pr_intpextr = 2
					-- Necessita pelo menos umas tag de extrato para geração da mensagem de rodapé no IReport
					vr_dstexto:= '<extrato></extrato>';
          --Escrever no XML
          gene0002.pc_escreve_xml(pr_clobxml,pr_dstexto,vr_dstexto);
					
          --Escrever no XML interno
          gene0002.pc_escreve_xml(pr_clobxml73,pr_dstexto73,vr_dstexto);
					
          vr_dstexto:= '</extratos>';
          --Escrever no XML
          gene0002.pc_escreve_xml(pr_clobxml,pr_dstexto,vr_dstexto);

          --Escrever no XML interno
          gene0002.pc_escreve_xml(pr_clobxml73,pr_dstexto73,vr_dstexto);

        END IF;
        -- Retorno OK
        pr_des_reto:= 'OK';
      EXCEPTION
        WHEN vr_exc_erro THEN
          -- Retorno não OK
          pr_des_reto := 'NOK';
          -- Chamar rotina de gravação de erro
          gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                               ,pr_cdagenci => pr_cdagenci
                               ,pr_nrdcaixa => pr_nrdcaixa
                               ,pr_nrsequen => 1 --> Fixo
                               ,pr_cdcritic => 0 --> Critica 0
                               ,pr_dscritic => vr_dscritic
                               ,pr_tab_erro => pr_tab_erro);
        WHEN OTHERS THEN

          -- Retorno não OK
          pr_des_reto := 'NOK';
          -- Chamar rotina de gravação de erro
          vr_dscritic := 'Erro na pc_imprime_extrato --> '|| sqlerrm;
          gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                               ,pr_cdagenci => pr_cdagenci
                               ,pr_nrdcaixa => pr_nrdcaixa
                               ,pr_nrsequen => 1 --> Fixo
                               ,pr_cdcritic => 0 --> Critica 0
                               ,pr_dscritic => vr_dscritic
                               ,pr_tab_erro => pr_tab_erro);
      END;
    END pc_imprime_extrato;

    -- Subrotina para Imprimir Extrato Emprestimo
    PROCEDURE pc_extrato_pos_fixado(pr_cdcooper IN crapcop.cdcooper%TYPE  --Codigo Cooperativa
                                   ,pr_cdagenci IN crapass.cdagenci%TYPE  --Codigo Agencia
                                   ,pr_nrdcaixa IN INTEGER                --Numero do Caixa
                                   ,pr_cdoperad IN VARCHAR2               --Codigo Operador
                                   ,pr_nmdatela IN VARCHAR2               --Nome da Tela
                                   ,pr_idorigem IN INTEGER                --Origem dos Dados
                                   ,pr_nrdconta IN crapass.nrdconta%TYPE  --Numero da Conta do Associado
                                   ,pr_idseqttl IN crapttl.idseqttl%TYPE  --Sequencial do Titular
                                   ,pr_dtmvtolt IN crapdat.dtmvtolt%TYPE  --Data Movimento
                                   ,pr_dtmvtoan IN crapdat.dtmvtoan%TYPE  --Data de Movimento do dia Anterior
                                   ,pr_nrctremp IN crapepr.nrctremp%TYPE  --Numero Contrato Emprestimo                                
                                   ,pr_flgerlog IN BOOLEAN                --Escreve erro Log
                                   ,pr_dtiniper IN crapdat.dtmvtolt%TYPE  --Data Inicio Periodo Extrato
                                   ,pr_dtfimper IN crapdat.dtmvtopr%TYPE  --Data Final Periodo Extrato
                                   ,pr_intpextr IN INTEGER                --Tipo Extrato
                                   ,pr_flgimpri IN BOOLEAN                --Flag Imprimir
                                   ,pr_clobxml  IN OUT NOCOPY CLOB        --Clob do Relatorio Principal
                                   ,pr_dstexto  IN OUT NOCOPY VARCHAR2    --String do Relatorio Principal
                                   ,pr_clobxml73 IN OUT NOCOPY CLOB       --Clob do Relatorio Interno
                                   ,pr_dstexto73 IN OUT NOCOPY VARCHAR2   --String do Relatorio Interno
                                   ,pr_tab_erro OUT GENE0001.typ_tab_erro --Tabela de Erros
                                   ,pr_tab_extrato_epr_aux OUT typ_tab_extrato_epr_aux --Tabela de Extrato de Emprestimo Auxiliar
                                   ,pr_des_reto OUT VARCHAR2 ) IS         --Descricao Erro
  BEGIN
  ---------------------------------------------------------------------------------------------------------------
  --
  --  Programa : pc_extrato_pos_fixado               Antigo: procedures/b1wgen0112.p/extrato_pos_fixado
  --  Sistema  : 
  --  Sigla    : CRED
  --  Autor    : Jaison Fernando
  --  Data     : Maio/2017                           Ultima atualizacao: 10/05/2018
  --
  -- Dados referentes ao programa:
  --
  -- Frequencia: -----
  -- Objetivo   : Procedure para Imprimir Extrato Emprestimo Pos-Fixado
  --
  -- Alterações : 10/05/2018 - P410 - AJustes IOF (Marcos-Envolti)
  ---------------------------------------------------------------------------------------------------------------
  DECLARE
        -- Buscar cadastro auxiliar de emprestimo
        CURSOR cr_crapepr (pr_cdcooper IN crapepr.cdcooper%type,
                           pr_nrdconta IN crapepr.nrdconta%type,
                           pr_nrctremp IN crapepr.nrctremp%type) is
          SELECT crapepr.tpemprst
                ,crapepr.cdlcremp
                ,crapepr.vlemprst
                ,crapepr.txmensal
                ,crapepr.nrdconta
                ,crapepr.nrctremp
                ,crapepr.cdagenci
                ,crapepr.dtmvtolt
                ,crapepr.dtdpagto
                ,crapepr.qtpreemp
                ,crapepr.inprejuz
                ,crapepr.qttolatr
                ,crapepr.cdfinemp
            FROM crapepr
           WHERE crapepr.cdcooper = pr_cdcooper
             AND crapepr.nrdconta = pr_nrdconta
             AND crapepr.nrctremp = pr_nrctremp;
        rw_crapepr cr_crapepr%rowtype;
        -- Buscar cadastro auxiliar de emprestimo
        CURSOR cr_crawepr (pr_cdcooper IN crawepr.cdcooper%type,
                           pr_nrdconta IN crawepr.nrdconta%type,
                           pr_nrctremp IN crawepr.nrctremp%type) is
          SELECT crawepr.dtdpagto
                ,crawepr.percetop
            FROM crawepr
           WHERE crawepr.cdcooper = pr_cdcooper
             AND crawepr.nrdconta = pr_nrdconta
             AND crawepr.nrctremp = pr_nrctremp;
        rw_crawepr cr_crawepr%rowtype;
        --Selecionar Linha Credito
        CURSOR cr_craplcr (pr_cdcooper IN craplcr.cdcooper%TYPE
                          ,pr_cdlcremp IN craplcr.cdlcremp%TYPE) IS
          SELECT craplcr.perjurmo
                ,craplcr.dslcremp
                ,craplcr.flgcobmu
            FROM craplcr
           WHERE craplcr.cdcooper = pr_cdcooper 
             AND craplcr.cdlcremp = pr_cdlcremp;
        rw_craplcr cr_craplcr%ROWTYPE; 
        -- Busca dos dados do associado
        CURSOR cr_crapass(pr_cdcooper IN crapcop.cdcooper%TYPE
                         ,pr_nrdconta IN crapass.nrdconta%TYPE) IS
          SELECT crapass.cdagenci
            FROM crapass
           WHERE crapass.cdcooper = pr_cdcooper
             AND crapass.nrdconta = pr_nrdconta;
        rw_crapass cr_crapass%ROWTYPE;        
        -- Cursor para busca a agencia
        CURSOR cr_crapage(pr_cdcooper IN crapage.cdcooper%TYPE
                         ,pr_cdagenci IN crapage.cdagenci%TYPE) IS
          SELECT crapage.cdagenci
                ,crapage.nmresage
            FROM crapage
           WHERE crapage.cdcooper = pr_cdcooper 
             AND crapage.cdagenci = pr_cdagenci;
        rw_crapage cr_crapage%ROWTYPE;
        
        -- Cursor para buscar a taxa
        CURSOR cr_crappep_taxa(pr_cdcooper IN crappep.cdcooper%TYPE
                              ,pr_nrdconta IN crappep.nrdconta%TYPE
                              ,pr_nrctremp IN crappep.nrctremp%TYPE
                              ,pr_nrparepr IN crappep.nrparepr%TYPE) IS
        SELECT crappep.vltaxatu
          FROM crappep
         WHERE cdcooper = pr_cdcooper
           AND nrdconta = pr_nrdconta
           AND nrctremp = pr_nrctremp
           AND nrparepr = pr_nrparepr;
        rw_crappep_taxa cr_crappep_taxa%ROWTYPE;

        -- cursor genérico de calendário
        rw_crapdat btch0001.cr_crapdat%ROWTYPE;

        --Tipo de Tabela para Break-by do emprestimo
        TYPE typ_tab_extrato_epr_novo IS TABLE OF typ_reg_extrato_epr INDEX BY VARCHAR2(100);
        vr_tab_extrato_epr_novo typ_tab_extrato_epr_novo;
        --Tabela de Memoria de Extrato Emprestimo
        vr_tab_extrato_epr typ_tab_extrato_epr; 
        vr_tab_parcela_epr empr0004.typ_tab_parcela_epr;
        --Tabela de Memoria pra guardar informacoes das parcelas
        TYPE typ_tab_linha_parcela IS TABLE OF VARCHAR2(200) INDEX BY PLS_INTEGER;
        vr_tab_linha_parcela typ_tab_linha_parcela;
        
        --Indices para as tabelas de memoria
        vr_index_extrato PLS_INTEGER;
        vr_index_epr_aux PLS_INTEGER;
        vr_index_novo    VARCHAR2(100);
        vr_index_linha_parcela PLS_INTEGER;
        --Variaveis Tabela generica
        vr_parempctl craptab.dstextab%type;
        vr_vlemprst  VARCHAR2(100);
        vr_txmensal  VARCHAR2(100);
        vr_txinmens  VARCHAR2(100);
        vr_multatra  VARCHAR2(100);
        vr_carencia  VARCHAR2(100);
        vr_dsvltaxa  VARCHAR2(100);
        vr_vlparepr  VARCHAR2(100);
        -- campos f-parcelas    ESQ
        vr_indpgesq  VARCHAR2(100);
        vr_indpgdir  VARCHAR2(100);
        vr_contaesq  INTEGER:= 0;
        vr_contalin  INTEGER:= 0;
        -- campos f-parcelas    DIR
        vr_contadir  INTEGER;
        vr_carencia2 NUMBER;
        --Relatorio
        vr_vlsaldo1  NUMBER;
        vr_flginfor  BOOLEAN:= FALSE;
				vr_flginfor2 BOOLEAN:= FALSE;
        vr_dslinpar  VARCHAR2(200); 
        vr_dstexto   VARCHAR2(32600);
				vr_flgloop   BOOLEAN := FALSE;
        vr_vlsdeved  NUMBER(25,2);
        vr_vlprvenc  NUMBER(25,2);
        vr_vlpraven  NUMBER(25,2);
        vr_vlmtapar  NUMBER(25,2);
        vr_vlmrapar  NUMBER(25,2);
        vr_vliofcpl  NUMBER(25,2);
        vr_vltxiofpri NUMBER := 0;
        vr_vltxiofadc NUMBER := 0;
        vr_vltxiofcpl number := 0;

        --Variaveis de Erro
        vr_cdcritic INTEGER;
        vr_dscritic VARCHAR2(4000);

        --Variaveis de Excecoes
        vr_exc_erro EXCEPTION;
        vr_exc_proximo EXCEPTION;

      BEGIN
        --Inicializar Variaveis
        vr_dscritic := NULL;
        pr_des_reto := 'NOK';

        --Limpar tabela Memoria
        pr_tab_extrato_epr_aux.DELETE;
        
        --Buscar Data do Sistema para a cooperativa 
        OPEN btch0001.cr_crapdat(pr_cdcooper => pr_cdcooper);
        FETCH btch0001.cr_crapdat INTO rw_crapdat;
        CLOSE btch0001.cr_crapdat;

        --Selecionar associado
        OPEN cr_crapass (pr_cdcooper => pr_cdcooper
                        ,pr_nrdconta => pr_nrdconta);
        FETCH cr_crapass INTO rw_crapass;
        CLOSE cr_crapass;

        --Selecionar Dados Agencia
        OPEN cr_crapage(pr_cdcooper => pr_cdcooper
                       ,pr_cdagenci => rw_crapass.cdagenci);
        FETCH cr_crapage INTO rw_crapage;
        CLOSE cr_crapage;

        --Limpar tabela Emprestimo
        vr_tab_extrato_epr.DELETE;

        --Obter Extrato do Emprestimo
        pc_obtem_extrato_emprest (pr_cdcooper    => pr_cdcooper          --Codigo Cooperativa
                                 ,pr_cdagenci    => pr_cdagenci          --Codigo Agencia
                                 ,pr_nrdcaixa    => pr_nrdcaixa          --Numero do Caixa
                                 ,pr_cdoperad    => pr_cdoperad          --Codigo Operador
                                 ,pr_nmdatela    => pr_nmdatela          --Nome da Tela
                                 ,pr_idorigem    => pr_idorigem          --Origem dos Dados
                                 ,pr_nrdconta    => pr_nrdconta          --Numero da Conta do Associado
                                 ,pr_idseqttl    => pr_idseqttl          --Sequencial do Titular
                                 ,pr_nrctremp    => pr_nrctremp          --Numero Contrato Emprestimo           
                                 ,pr_dtiniper    => pr_dtiniper          --Inicio periodo Extrato
                                 ,pr_dtfimper    => pr_dtfimper          --Final periodo Extrato
                                 ,pr_flgerlog    => pr_flgerlog          --Imprimir log
                                 ,pr_extrato_epr => vr_tab_extrato_epr   --Tipo de tabela com extrato emprestimo
                                 ,pr_des_reto    => pr_des_reto          --Retorno OK ou NOK
                                 ,pr_tab_erro    => pr_tab_erro);        --Tabela de Erros
        --Se ocorreu erro
        IF pr_des_reto = 'NOK' THEN 
          RETURN;
        END IF; 

        --Consultar Emprestimo
        OPEN cr_crapepr (pr_cdcooper => pr_cdcooper
                        ,pr_nrdconta => pr_nrdconta
                        ,pr_nrctremp => pr_nrctremp);
        FETCH cr_crapepr INTO rw_crapepr;
        CLOSE cr_crapepr;

        --Selecionar Informacoes Adicionais do Emprestimo
        OPEN cr_crawepr (pr_cdcooper => pr_cdcooper
                        ,pr_nrdconta => pr_nrdconta
                        ,pr_nrctremp => pr_nrctremp);
        FETCH cr_crawepr INTO rw_crawepr;
        CLOSE cr_crawepr;
        
        --Selecionar Linha Credito
        OPEN cr_craplcr (pr_cdcooper => pr_cdcooper
                        ,pr_cdlcremp => rw_crapepr.cdlcremp);
        FETCH cr_craplcr INTO rw_craplcr;
        CLOSE cr_craplcr;

        IF rw_craplcr.flgcobmu = 1 THEN
          -- Leitura do indicador de uso da tabela de taxa de juros                                                    
          vr_parempctl := tabe0001.fn_busca_dstextab (pr_cdcooper => 3 -- Fixo CECRED
                                                     ,pr_nmsistem => 'CRED'
                                                     ,pr_tptabela => 'USUARI'
                                                     ,pr_cdempres => 11
                                                     ,pr_cdacesso => 'PAREMPCTL'
                                                     ,pr_tpregist => 1); 
          --Se estiver nulo
          IF vr_parempctl IS NULL THEN
            vr_cdcritic := 55;
            vr_dscritic := GENE0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
            RAISE vr_exc_erro; 
          END IF; 
        ELSE
          vr_parempctl := 0;
        END IF;

        --Valor Emprestimo
        vr_vlemprst := 'R$ '||trim(to_char(rw_crapepr.vlemprst,'fm999g999g990d00')); 
        --Taxa Mensal Juros
        vr_txmensal := trim(to_char(rw_crapepr.txmensal,'fm990d00')||'%');  
        --Carencia do Emprestimo
        vr_carencia2 := rw_crawepr.dtdpagto - rw_crapepr.dtmvtolt;
        vr_carencia := trim(to_char(vr_carencia2,'fm9990'))||' dias';    
        --Multa 
        IF vr_parempctl IS NOT NULL THEN
          vr_multatra := to_char(gene0002.fn_char_para_number(SUBSTR(vr_parempctl,1,6)),'fm990d00')||'%';
        ELSE
          vr_multatra := '0';
        END IF;
        --Juros de Mora
        vr_txinmens := trim(to_char(rw_craplcr.perjurmo + rw_crapepr.txmensal,'fm990d00')||'%');
        
        --Se deve imprimir
        IF pr_flgimpri THEN
          --Gravar Informacoes do cabecalho no XML
          vr_dstexto:= '<conta tpemprst="' || rw_crapepr.tpemprst || '" flgmensag="N" dscmensag=""' ||
                       '  nrdconta="' || to_char(pr_nrdconta,'fm9999g999g0')                        ||
                       '" cdagenci="' || rw_crapage.cdagenci                                        ||
                       '" cdagenci_emp="' || rw_crapepr.cdagenci                                    ||
                       '" nmresage="' || rw_crapage.nmresage                                        ||
                       '" nrctremp="' || to_char(rw_crapepr.nrctremp,'fm999g999g990')               ||
                       '" nrconta_cartao="">';
          --Escrever no XML
          gene0002.pc_escreve_xml(pr_clobxml,pr_dstexto,vr_dstexto);

          --Escrever no XML interno
          gene0002.pc_escreve_xml(pr_clobxml73,pr_dstexto73,vr_dstexto);

          TIOF0001.pc_busca_taxa_iof(pr_cdcooper	=> pr_cdcooper     --> Codigo da Cooperativa 
                                    ,pr_nrdconta  => pr_nrdconta     --> Numero da Conta Corrente
                                    ,pr_nrctremp  => rw_crapepr.nrctremp   --> Numero do Contrato
                                    ,pr_dtmvtolt  => pr_dtmvtolt     --> Data do movimento para busca na tabela de IOF
                                    ,pr_cdlcremp => rw_crapepr.cdlcremp --> Linha de credito
                                    ,pr_cdfinemp => rw_crapepr.cdfinemp --> Finalidade do credito
                                    ,pr_vlemprst => rw_crapepr.vlemprst
                                    ,pr_vltxiofpri => vr_vltxiofpri  --> Taxa de IOF principal
                                    ,pr_vltxiofadc => vr_vltxiofadc  --> Taxa de IOF adicional
                                    ,pr_vltxiofcpl => vr_vltxiofcpl  --> Taxa de IOF adicional
                                    ,pr_cdcritic  => vr_cdcritic     --> Código da Crítica
                                    ,pr_dscritic  => vr_dscritic);   --> Descrição da Crítica
                                    
          IF NVL(vr_dscritic, ' ') <> ' ' THEN
            RETURN;
          END IF;
          
          --Montar Texto
          vr_dstexto:= '<parcelas' ||
                          '  p_dslcremp="'||rw_craplcr.dslcremp||
                          '" p_vlemprst="'||vr_vlemprst        ||
                          '" p_dtmvtolt="'||to_char(rw_crapepr.dtmvtolt,'DD/MM/YYYY')||
                          '" p_txmensal="'||vr_txmensal        ||
                          '" p_txinmens="'||vr_txinmens        ||
                          '" p_multatra="'||vr_multatra        ||
                          '" p_vlparepr="'||vr_vlparepr        || 
                          '" p_qtpreemp="'||rw_crapepr.qtpreemp||
                          '" p_carencia="'||vr_carencia||
						  '" p_vltxiofadc="'||to_char((nvl(vr_vltxiofadc, 0) * 100), 'fm9999g999g990d00000')||'%'    ||
                          '" p_vltxiofpri="'||to_char((nvl(vr_vltxiofpri, 0) * 100), 'fm9999g999g990d00000')||'%'    ||
                          '" p_dscet="'||rw_crawepr.percetop||'%'||
                          '" p_dsindexador="CDI 100%">';
          --Escrever no XML
          gene0002.pc_escreve_xml(pr_clobxml,pr_dstexto,vr_dstexto);

          --Escrever no XML interno
          gene0002.pc_escreve_xml(pr_clobxml73,pr_dstexto73,vr_dstexto);

        END IF;

        --Limpar tabela de memoria de parcelas
        vr_tab_parcela_epr.DELETE;
        --Buscar Parcelas da Proposta
        EMPR0004.pc_busca_parcelas_proposta (pr_cdcooper    => pr_cdcooper             --Codigo Cooperativa
                                            ,pr_cdagenci    => pr_cdagenci             --Codigo Agencia
                                            ,pr_nrdcaixa    => pr_nrdcaixa             --Numero do Caixa
                                            ,pr_cdoperad    => pr_cdoperad             --Codigo Operador
                                            ,pr_nmdatela    => pr_nmdatela             --Nome da Tela
                                            ,pr_idorigem    => pr_idorigem             --Origem dos Dados
                                            ,pr_nrdconta    => pr_nrdconta             --Numero da Conta do Associado
                                            ,pr_idseqttl    => pr_idseqttl             --Sequencial do Titular
                                            ,pr_dtmvtolt    => pr_dtmvtolt             --Data Movimento
                                            ,pr_flgerlog    => pr_flgerlog             --Imprimir log
                                            ,pr_nrctremp    => pr_nrctremp             --Contrato Emprestimo
                                            ,pr_cdlcremp    => rw_crapepr.cdlcremp     --Linha Credito
                                            ,pr_vlemprst    => rw_crapepr.vlemprst     --Valor Emprestimo
                                            ,pr_qtparepr    => rw_crapepr.qtpreemp     --Quantidade parcelas emprestimo
                                            ,pr_dtlibera    => rw_crapepr.dtmvtolt     --Data Liberacao
                                            ,pr_dtdpagto    => rw_crapepr.dtdpagto     --Data pagamento 
                                            ,pr_parcela_epr => vr_tab_parcela_epr      -->Tipo de tabela com parcelas emprestimo
                                            ,pr_des_reto    => pr_des_reto             --Retorno OK ou NOK
                                            ,pr_tab_erro    => pr_tab_erro);           --Tabela de Erros  
        --Se ocorreu erro
        IF pr_des_reto = 'NOK' THEN
          RETURN; 
        END IF; 
        --limpar tabela memoria
        vr_tab_linha_parcela.DELETE;
        --Verificar Quantidade de Parcelas para gerar linhas 
        vr_contalin:= ROUND(vr_tab_parcela_epr.COUNT / 2);
        --Se for numero impar de parcelas aumenta em 1
     /*   IF MOD(rw_crapepr.qtpreemp,2) <> 0 THEN
          vr_contalin:= vr_contalin+1;
        END IF;*/
        --Percorrer todas as parcelas
        FOR vr_contaesq IN 1..vr_contalin LOOP
          --Verificar qual a parcela da direita
          vr_contadir:= vr_contalin+vr_contaesq;
          --Verificar se Existe posicao da esquerda antes de concatenar
          IF vr_tab_parcela_epr.EXISTS(vr_contaesq) THEN
            --Montar Situacao da Parcela da esquerda
            vr_indpgesq:= NULL;
            IF vr_tab_parcela_epr(vr_contaesq).indpagto = 0 THEN
              --Vencida
              IF vr_tab_parcela_epr(vr_contaesq).dtvencto < pr_dtmvtolt AND
                 vr_tab_parcela_epr(vr_contaesq).dtvencto <= rw_crapdat.dtmvtoan THEN 
                --Vencida
                vr_indpgesq:= 'Vencida';  
              ELSE
                --A Vencer
                vr_indpgesq:= 'A vencer';
                --Acumular Saldo a Vencer
                vr_vlsaldo1:= nvl(vr_vlsaldo1,0) + vr_tab_parcela_epr(vr_contaesq).vlparepr;  
              END IF;     
            ELSIF vr_tab_parcela_epr(vr_contaesq).indpagto = 1 THEN 
              --Liquidada
              vr_indpgesq:= 'Liquidada'; 
            END IF;  
            --Montar a String para gravar na tabela
            vr_dslinpar:= RPAD(to_char(vr_tab_parcela_epr(vr_contaesq).nrparepr,'fm990')||')',5,' ')||
                          to_char(vr_tab_parcela_epr(vr_contaesq).dtparepr,'DD/MM/YY')||' '||
                          RPAD(to_char(vr_tab_parcela_epr(vr_contaesq).vlparepr,'fm999g999g990d00'),13,' ')||
                          RPAD(vr_indpgesq,13,' ');
          END IF;   
          --Verificar de existe parcela para colocar na direita
          IF vr_tab_parcela_epr.EXISTS(vr_contadir) THEN
            --Montar Situacao da Parcela da direita
            vr_indpgdir:= NULL;
            IF vr_tab_parcela_epr(vr_contadir).indpagto = 0 THEN
              --Vencida
              IF vr_tab_parcela_epr(vr_contadir).dtvencto < pr_dtmvtolt AND
                 vr_tab_parcela_epr(vr_contadir).dtvencto <= rw_crapdat.dtmvtoan THEN 
                --Vencida
                vr_indpgdir:= 'Vencida';  
              ELSE
                --A Vencer
                vr_indpgdir:= 'A vencer';
                --Acumular Saldo a Vencer
                vr_vlsaldo1:= nvl(vr_vlsaldo1,0) + vr_tab_parcela_epr(vr_contadir).vlparepr;  
              END IF;     
            ELSIF vr_tab_parcela_epr(vr_contadir).indpagto = 1 THEN 
              --Liquidada
              vr_indpgdir:= 'Liquidada'; 
            END IF;  
            --Concatenar as 2 strings
            vr_dslinpar:= vr_dslinpar ||
                          RPAD(to_char(vr_tab_parcela_epr(vr_contadir).nrparepr,'fm990')||')',5,' ')||
                          to_char(vr_tab_parcela_epr(vr_contadir).dtparepr,'DD/MM/YY')||' '||
                          RPAD(to_char(vr_tab_parcela_epr(vr_contadir).vlparepr,'fm999g999g990d00'),13,' ')||
                          RPAD(vr_indpgdir,13,' ');
          END IF;                             
          --Proxima Linha
          vr_index_linha_parcela:= vr_tab_linha_parcela.COUNT +1;
          vr_tab_linha_parcela(vr_index_linha_parcela):= vr_dslinpar;
        END LOOP; 
        
        --Colocar as Linhas prontas no CLOB
        vr_index_linha_parcela:= vr_tab_linha_parcela.FIRST;
        WHILE vr_index_linha_parcela IS NOT NULL LOOP
          --Montar Texto
          vr_dstexto:= '<parcela>'||vr_tab_linha_parcela(vr_index_linha_parcela)||'</parcela>';
          --Escrever no XML
          gene0002.pc_escreve_xml(pr_clobxml,pr_dstexto,vr_dstexto);

          --Escrever no XML interno
          gene0002.pc_escreve_xml(pr_clobxml73,pr_dstexto73,vr_dstexto);

          --Proxima Parcela
          vr_index_linha_parcela:= vr_tab_linha_parcela.NEXT(vr_index_linha_parcela);
        END LOOP;  
        
        --Valor do Saldo
        vr_vlsaldo1:=  rw_crapepr.vlemprst;
         
        --Preparar a tabela conforme break-by dtmvtolt/nrparepr/dsextrat/flglista:
        vr_tab_extrato_epr_novo.DELETE;
        vr_index_extrato:= vr_tab_extrato_epr.FIRST;
        WHILE vr_index_extrato IS NOT NULL LOOP
          --Montar novo indice conforme break-by
          vr_index_novo:= TO_CHAR(vr_tab_extrato_epr(vr_index_extrato).dtmvtolt,'YYYYMMDD')|| 
                          LPAD(NVL(vr_tab_extrato_epr(vr_index_extrato).nrparepr,0),10,'0')||
                          RPAD(vr_tab_extrato_epr(vr_index_extrato).dsextrat,50,'#')||
                          CASE vr_tab_extrato_epr(vr_index_extrato).flglista WHEN TRUE THEN '1' ELSE '0' END||
                          LPAD(vr_index_extrato,10,'0');
            
          --Copiar de uma tabela para outra
          vr_tab_extrato_epr_novo(vr_index_novo):= vr_tab_extrato_epr(vr_index_extrato);
          --Proximo Registro Extrato
          vr_index_extrato:= vr_tab_extrato_epr.NEXT(vr_index_extrato);
        END LOOP;   
        
        --Percorrer todo o extrato emprestimo para carregar tabela auxiliar
        vr_index_novo:= vr_tab_extrato_epr_novo.FIRST;
        WHILE vr_index_novo IS NOT NULL LOOP
          BEGIN
            --Buscar Proximo registro extrato
            vr_index_epr_aux:= pr_tab_extrato_epr_aux.COUNT+1;
            --Popular Informacoes
            pr_tab_extrato_epr_aux(vr_index_epr_aux).nrdconta:= vr_tab_extrato_epr_novo(vr_index_novo).nrdconta;
            pr_tab_extrato_epr_aux(vr_index_epr_aux).dtmvtolt:= vr_tab_extrato_epr_novo(vr_index_novo).dtmvtolt;
            pr_tab_extrato_epr_aux(vr_index_epr_aux).cdagenci:= vr_tab_extrato_epr_novo(vr_index_novo).cdagenci; 
            pr_tab_extrato_epr_aux(vr_index_epr_aux).cdbccxlt:= vr_tab_extrato_epr_novo(vr_index_novo).cdbccxlt;
            pr_tab_extrato_epr_aux(vr_index_epr_aux).nrdolote:= vr_tab_extrato_epr_novo(vr_index_novo).nrdolote;
            pr_tab_extrato_epr_aux(vr_index_epr_aux).cdhistor:= vr_tab_extrato_epr_novo(vr_index_novo).cdhistor;
            pr_tab_extrato_epr_aux(vr_index_epr_aux).dshistor:= vr_tab_extrato_epr_novo(vr_index_novo).dshistor;
            pr_tab_extrato_epr_aux(vr_index_epr_aux).nrdocmto:= vr_tab_extrato_epr_novo(vr_index_novo).nrdocmto;
            pr_tab_extrato_epr_aux(vr_index_epr_aux).indebcre:= vr_tab_extrato_epr_novo(vr_index_novo).indebcre;
            pr_tab_extrato_epr_aux(vr_index_epr_aux).vllanmto:= vr_tab_extrato_epr_novo(vr_index_novo).vllanmto;
            pr_tab_extrato_epr_aux(vr_index_epr_aux).txjurepr:= vr_tab_extrato_epr_novo(vr_index_novo).txjurepr;
            pr_tab_extrato_epr_aux(vr_index_epr_aux).qtpresta:= vr_tab_extrato_epr_novo(vr_index_novo).qtpresta;
            pr_tab_extrato_epr_aux(vr_index_epr_aux).nrparepr:= vr_tab_extrato_epr_novo(vr_index_novo).nrparepr;
            pr_tab_extrato_epr_aux(vr_index_epr_aux).dsextrat:= vr_tab_extrato_epr_novo(vr_index_novo).dsextrat;
            pr_tab_extrato_epr_aux(vr_index_epr_aux).flglista:= vr_tab_extrato_epr_novo(vr_index_novo).flglista;
            pr_tab_extrato_epr_aux(vr_index_epr_aux).cdorigem:= vr_tab_extrato_epr_novo(vr_index_novo).cdorigem;
            pr_tab_extrato_epr_aux(vr_index_epr_aux).qtdiacal:= vr_tab_extrato_epr_novo(vr_index_novo).qtdiacal;
            pr_tab_extrato_epr_aux(vr_index_epr_aux).vltaxprd:= vr_tab_extrato_epr_novo(vr_index_novo).vltaxprd;            

            --Primeira Ocorrencia
            IF vr_flgloop = FALSE THEN
              /* Saldo Inicial */
              pr_tab_extrato_epr_aux(vr_index_epr_aux).vlsaldo:= vr_tab_extrato_epr_novo(vr_index_novo).vllanmto;
              pr_tab_extrato_epr_aux(vr_index_epr_aux).vldebito:= vr_tab_extrato_epr_novo(vr_index_novo).vllanmto;
              --Saldo Inicial
              vr_vlsaldo1:= vr_tab_extrato_epr_novo(vr_index_novo).vllanmto; 
							vr_flgloop := TRUE;
              --Proximo Registro
              RAISE vr_exc_proximo;            
            END IF; 
            --Se for Credito
            IF pr_tab_extrato_epr_aux(vr_index_epr_aux).indebcre = 'C' THEN
              --Valor Credito
              pr_tab_extrato_epr_aux(vr_index_epr_aux).vlcredit:= vr_tab_extrato_epr_novo(vr_index_novo).vllanmto;
              --Se possuir Saldo
              IF vr_tab_extrato_epr_novo(vr_index_novo).flgsaldo THEN
                vr_vlsaldo1:= nvl(vr_vlsaldo1,0) - vr_tab_extrato_epr_novo(vr_index_novo).vllanmto;
                pr_tab_extrato_epr_aux(vr_index_epr_aux).vlsaldo:= vr_vlsaldo1;
              ELSE
                pr_tab_extrato_epr_aux(vr_index_epr_aux).vlsaldo:= vr_vlsaldo1;
              END IF;    
            ELSIF pr_tab_extrato_epr_aux(vr_index_epr_aux).indebcre = 'D' THEN 
              --Valor Debito
              pr_tab_extrato_epr_aux(vr_index_epr_aux).vldebito:= vr_tab_extrato_epr_novo(vr_index_novo).vllanmto;
              --Se possuir Saldo
              IF vr_tab_extrato_epr_novo(vr_index_novo).flgsaldo THEN
                vr_vlsaldo1:= nvl(vr_vlsaldo1,0) + vr_tab_extrato_epr_novo(vr_index_novo).vllanmto;
                pr_tab_extrato_epr_aux(vr_index_epr_aux).vlsaldo:= vr_vlsaldo1;
              ELSE
                pr_tab_extrato_epr_aux(vr_index_epr_aux).vlsaldo:= vr_vlsaldo1;
              END IF;    
            END IF;
          EXCEPTION
            WHEN vr_exc_proximo THEN
              NULL;
          END;       
          --Proximo Registro Extrato
          vr_index_novo:= vr_tab_extrato_epr_novo.NEXT(vr_index_novo);
        END LOOP; --vr_index_novo 
          
        --Se deve Imprimir
        IF pr_flgimpri THEN
          -- Busca as parcelas para pagamento
          EMPR0011.pc_busca_pagto_parc_pos_prog(pr_cdcooper => pr_cdcooper
			                                   ,pr_cdprogra => pr_nmdatela
                                               ,pr_dtmvtolt => TO_CHAR(pr_dtmvtolt,'DD/MM/RRRR')
                                               ,pr_dtmvtoan => TO_CHAR(pr_dtmvtoan,'DD/MM/RRRR')
                                               ,pr_nrdconta => pr_nrdconta
                                               ,pr_nrctremp => pr_nrctremp
                                               ,pr_vlsdeved => vr_vlsdeved
                                               ,pr_vlprvenc => vr_vlprvenc
                                               ,pr_vlpraven => vr_vlpraven
                                               ,pr_vlmtapar => vr_vlmtapar
                                               ,pr_vlmrapar => vr_vlmrapar
                                               ,pr_vliofcpl => vr_vliofcpl
                                               ,pr_cdcritic => vr_cdcritic
                                               ,pr_dscritic => vr_dscritic);
                                
          -- Se houve erro
          IF NVL(vr_cdcritic,0) > 0 OR vr_dscritic IS NOT NULL THEN
            RAISE vr_exc_erro;
          END IF;

          vr_dstexto:= 'Saldo para Liquidacao em '||to_char(pr_dtmvtolt,'DD/MM/YYYY')||' R$: '||to_char(vr_vlsdeved,'fm9g999g990d00');
          --Finalizar TAG parcelas e Montar Cabecalho do Extrato
          vr_dstexto:= '</parcelas><extratos dsmsgext="'||vr_dstexto||'" dstexinf="" dstexinf2="" dstexinf3="">';
					--Escrever no XML
          gene0002.pc_escreve_xml(pr_clobxml,pr_dstexto,vr_dstexto);

          --Escrever no XML interno
          gene0002.pc_escreve_xml(pr_clobxml73,pr_dstexto73,vr_dstexto);

          --Tipo de Impressão /* 1 - Simplificado,  2 - Detalhado */
          IF pr_intpextr = 2 THEN
            /* Cuidado ao mudar BY deste for each, pois tem que */
            /* estar igual ao FOR EACH da tt-extrato_epr de cima */
            --Percorrer todos os registros
            vr_index_epr_aux:= pr_tab_extrato_epr_aux.FIRST;
            WHILE vr_index_epr_aux IS NOT NULL LOOP
              --Se deve listar
              IF pr_tab_extrato_epr_aux(vr_index_epr_aux).flglista THEN
                --Limpar parcela = 99
                IF pr_tab_extrato_epr_aux(vr_index_epr_aux).nrparepr = 99 THEN
                  pr_tab_extrato_epr_aux(vr_index_epr_aux).nrparepr:= NULL;
                END IF;

                vr_dsvltaxa := '';
                -- Lancamento de Juros de Correcao
                IF pr_tab_extrato_epr_aux(vr_index_epr_aux).cdhistor IN (2344,2345) THEN
                  
                  OPEN cr_crappep_taxa (pr_cdcooper => pr_cdcooper
                                       ,pr_nrdconta => pr_nrdconta
                                       ,pr_nrctremp => pr_nrctremp
                                       ,pr_nrparepr => pr_tab_extrato_epr_aux(vr_index_epr_aux).nrparepr);
                  FETCH cr_crappep_taxa INTO rw_crappep_taxa;
                  IF cr_crappep_taxa%FOUND THEN
                    vr_dsvltaxa := to_char(rw_crappep_taxa.vltaxatu,'fm990d00')||'%';  
                  END IF;                    
                  CLOSE cr_crappep_taxa;
                END IF;  
                
                --Montar Texto
                vr_dstexto:= '<extrato> ' ||
                               '<e_dtmvtolt>'||to_char(pr_tab_extrato_epr_aux(vr_index_epr_aux).dtmvtolt,'DD/MM/YY')||'</e_dtmvtolt>'||              
                               '<e_dsextrat>'||pr_tab_extrato_epr_aux(vr_index_epr_aux).dsextrat||'</e_dsextrat>'||
                               '<e_nrparepr>'||to_char(pr_tab_extrato_epr_aux(vr_index_epr_aux).nrparepr,'fm990')||'</e_nrparepr>'||
                               '<e_valor>'||to_char(pr_tab_extrato_epr_aux(vr_index_epr_aux).vllanmto,'fm999g999g990d00')||'</e_valor>'||
		                           '<e_indebcre>'||pr_tab_extrato_epr_aux(vr_index_epr_aux).indebcre||'</e_indebcre>'||
                               '<e_vlsaldo>' ||to_char(pr_tab_extrato_epr_aux(vr_index_epr_aux).vlsaldo,'fm999g999g990d00')||'</e_vlsaldo>'||
                               '<e_txcorrec>'||vr_dsvltaxa||'</e_txcorrec>'||
                               '<e_nrdiaper>'||(CASE WHEN NVL(pr_tab_extrato_epr_aux(vr_index_epr_aux).qtdiacal,0) > 0 THEN pr_tab_extrato_epr_aux(vr_index_epr_aux).qtdiacal ELSE '' END)||'</e_nrdiaper>'||
                             '</extrato>';
                --Escrever no XML
                gene0002.pc_escreve_xml(pr_clobxml,pr_dstexto,vr_dstexto);
                --Escrever no XML interno
                gene0002.pc_escreve_xml(pr_clobxml73,pr_dstexto73,vr_dstexto);

              END IF; --flglista
              --Proximo Registro Extrato
              vr_index_epr_aux:= pr_tab_extrato_epr_aux.NEXT(vr_index_epr_aux);
            END LOOP;
          END IF; --pr_intpextr = 2
					-- Necessita pelo menos umas tag de extrato para geração da mensagem de rodapé no IReport
					vr_dstexto:= '<extrato></extrato>';
          --Escrever no XML
          gene0002.pc_escreve_xml(pr_clobxml,pr_dstexto,vr_dstexto);
					
          --Escrever no XML interno
          gene0002.pc_escreve_xml(pr_clobxml73,pr_dstexto73,vr_dstexto);
					
          vr_dstexto:= '</extratos>';
          --Escrever no XML
          gene0002.pc_escreve_xml(pr_clobxml,pr_dstexto,vr_dstexto);

          --Escrever no XML interno
          gene0002.pc_escreve_xml(pr_clobxml73,pr_dstexto73,vr_dstexto);

        END IF;
        -- Retorno OK
        pr_des_reto:= 'OK';
      EXCEPTION
        WHEN vr_exc_erro THEN
          -- Retorno não OK
          pr_des_reto := 'NOK';
          -- Chamar rotina de gravação de erro
          gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                               ,pr_cdagenci => pr_cdagenci
                               ,pr_nrdcaixa => pr_nrdcaixa
                               ,pr_nrsequen => 1 --> Fixo
                               ,pr_cdcritic => 0 --> Critica 0
                               ,pr_dscritic => vr_dscritic
                               ,pr_tab_erro => pr_tab_erro);
        WHEN OTHERS THEN

          -- Retorno não OK
          pr_des_reto := 'NOK';
          -- Chamar rotina de gravação de erro
          vr_dscritic := 'Erro na pc_extrato_pos_fixado --> '|| sqlerrm;
          gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                               ,pr_cdagenci => pr_cdagenci
                               ,pr_nrdcaixa => pr_nrdcaixa
                               ,pr_nrsequen => 1 --> Fixo
                               ,pr_cdcritic => 0 --> Critica 0
                               ,pr_dscritic => vr_dscritic
                               ,pr_tab_erro => pr_tab_erro);
      END;
    END pc_extrato_pos_fixado;


    -- Subrotina para gerar extrato Emprestimo
    PROCEDURE pc_gera_impextepr (pr_cdcooper IN crapcop.cdcooper%TYPE  --Codigo Cooperativa
                                ,pr_cdagenci IN crapass.cdagenci%TYPE  --Codigo Agencia
                                ,pr_nrdcaixa IN INTEGER                --Numero do Caixa
                                ,pr_idorigem IN INTEGER                --Origem dos Dados
                                ,pr_dtmvtolt IN crapdat.dtmvtolt%TYPE  --Data Movimento
                                ,pr_dtmvtopr IN crapdat.dtmvtopr%TYPE  --Data Proximo Movimento
                                ,pr_cdprogra IN crapprg.cdprogra%TYPE  --Codigo Programa
                                ,pr_cdoperad IN VARCHAR2               --Codigo Operador
                                ,pr_nmdatela IN VARCHAR2               --Nome da Tela
                                ,pr_inproces IN INTEGER                --Indicador Processo
                                ,pr_dsiduser IN VARCHAR2               --Identificador Usuario
                                ,pr_tpextrat IN INTEGER                --Tipo de Extrato
                                ,pr_flgrodar IN BOOLEAN                --Flag Executar
                                ,pr_nrdconta IN crapass.nrdconta%TYPE  --Numero da Conta do Associado
                                ,pr_idseqttl IN crapttl.idseqttl%TYPE  --Sequencial do Titular
                                ,pr_nrctremp IN crapepr.nrctremp%TYPE  --Numero Contrato Emprestimo                                
                                ,pr_flgerlog IN BOOLEAN                --Escreve erro Log
                                ,pr_inselext IN INTEGER                --Indicador Selecao Extrato
                                ,pr_intpextr IN INTEGER                --Tipo Extrato
                                ,pr_clobxml  IN OUT NOCOPY CLOB        --Clob arquivo de dados
                                ,pr_dstexto  IN OUT NOCOPY VARCHAR2    --Texto Clob 
                                ,pr_nmarqimp OUT VARCHAR2              --Nome Arquivo Impressao
                                ,pr_nmarqpdf OUT VARCHAR2              --Nome Arquivo PDF
                                ,pr_tab_erro OUT GENE0001.typ_tab_erro --Tabela de Erros
                                ,pr_des_reto OUT VARCHAR2 ) IS         --Descricao Erro
  BEGIN                                
  ---------------------------------------------------------------------------------------------------------------
  --
  --  Programa : pc_gera_impextepr                    Antigo: procedures/b1wgen0112.p/gera-impextepr
  --  Sistema  : 
  --  Sigla    : CRED
  --  Autor    : Alisson C. Berrido - Amcom
  --  Data     : Julho/2014                           Ultima atualizacao: 11/09/2017
  --
  -- Dados referentes ao programa:
  --
  -- Frequencia: -----
  -- Objetivo   : Procedure para obter impressao do extrato de emprestimos do associado
  --
  -- Alterações : 24/07/2014 - Conversão Progress -> Oracle (Alisson - AMcom)
  --              
  --              06/01/2015 - Ajuste na chamada do cursor cr_craplem pra usar o 
  --                         numero do contrato corrente. ( Jean - RKAM )             
  --
  --              12/06/2015 - Adicao de campos para geracao do extrato da portabilidade de credito. 
  --                           (Jaison/Diego - SD: 290027)
  --                           
  --              06/04/2016 - Ajustes feito para correção do chamado 426937. (Kelvin)                               
  --
  --
  --              20/04/2016 - Remover comando rm e incluir direto na tela impres 
  --                           (Lucas Ranghetti/Rodrigo #399412)
  --
  --              26/04/2017 - Ajuste para retirar o uso de campos removidos da tabela
  --			               crapass, crapttl, crapjur 
  --				  		  (Adriano - P339).
  --
  --              25/05/2017 - Passagem do tpemprst. Permitir gerar extrato de Pos-Fixado. (Jaison/James - PRJ298)
  --
  --              11/09/2017 - Ajuste para retirar caracteres especiais ao gerar a tag dssubmod (Jonta - RKAM / 739433).
  ---------------------------------------------------------------------------------------------------------------
  DECLARE
        -- Busca dos dados da cooperativa
        CURSOR cr_crapcop (pr_cdcooper IN crapcop.cdcooper%TYPE) IS
          SELECT crapcop.nmrescop
                ,crapcop.nmextcop
                ,crapcop.nrdocnpj
                ,crapcop.dsendcop
                ,crapcop.nrendcop
                ,crapcop.nmbairro
                ,crapcop.nrcepend
                ,crapcop.nmcidade
                ,crapcop.cdufdcop 
                ,crapcop.nrtelvoz
          FROM crapcop crapcop
          WHERE crapcop.cdcooper = pr_cdcooper;
        rw_crapcop cr_crapcop%ROWTYPE;  
        -- Busca dos dados do associado
        CURSOR cr_crapass(pr_cdcooper IN crapcop.cdcooper%TYPE
                         ,pr_nrdconta IN crapass.nrdconta%TYPE) IS
          SELECT crapass.nrdconta
                ,crapass.nmprimtl
                ,crapass.vllimcre
                ,crapass.nrcpfcgc
                ,crapass.inpessoa
                ,crapass.cdcooper
                ,crapass.cdagenci
                ,crapass.nrctainv
          FROM crapass crapass
          WHERE crapass.cdcooper = pr_cdcooper
          AND   crapass.nrdconta = pr_nrdconta;
        rw_crapass cr_crapass%ROWTYPE;
        -- Cursor para busca a agencia
        CURSOR cr_crapage(pr_cdcooper IN crapage.cdcooper%TYPE
                       ,pr_cdagenci IN crapage.cdagenci%TYPE) IS
          SELECT crapage.nmcidade
                ,crapage.cdagenci
                ,crapage.nmresage
                ,crapage.qtddlslf
          FROM crapage crapage
          WHERE crapage.cdcooper = pr_cdcooper 
          AND   crapage.cdagenci = pr_cdagenci;
        rw_crapage cr_crapage%ROWTYPE;
        /*
        99 - CONTRATO DE EMPRESTIMO 
        349 - EMPRESTIMO TRANSFERIDO PARA PREJUIZO
        2381 - TRANSFERENCIA EMPRESTIMO PP P/ PREJUIZO
        2385 - TRANSFERENCIA EMPRESTIMO PP SUSPEITA DE FRAUDE
        2396 - TRANSFERENCIA FINANCIAMENTO PP P/ PREJUIZO
        2400 - TRANSFERENCIA EMPRESTIMO SUSPEITA DE FRAUDE
        2401 - TRANSFERENCIA EMPRESTIMO TR P/ PREJUIZO
        2405 - TRANSFERENCIA EMP/ FIN TR SUSPEITA DE FRAUDE
        2412 - TRANSFERENCIA PREJUIZO C/C SUSPEITA DE FRAUDE
        2735 - IOF PREJUIZO

		*/
        --Selecionar Lancamento Emprestimo
        CURSOR cr_craplem (pr_cdcooper IN craplem.cdcooper%type
                          ,pr_nrdconta IN craplem.nrdconta%type
                          ,pr_nrctremp IN craplem.nrctremp%type) IS
          SELECT craplem.cdcooper
          FROM craplem 
          WHERE craplem.cdcooper = pr_cdcooper 
          AND   craplem.nrdconta = pr_nrdconta 
          AND   craplem.nrctremp = pr_nrctremp 
          AND   craplem.cdhistor IN (99,349, 2381, 2396, 2401, 2405, 2385, 2400, 2735);
        rw_craplem cr_craplem%ROWTYPE;
        --Tipo de Tabela para Break-by do emprestimo
        TYPE typ_tab_extrato_epr_novo IS TABLE OF typ_reg_extrato_epr INDEX BY VARCHAR2(100);
        --Tabela de Memoria de Emprestimos
        vr_tab_dados_epr        empr0001.typ_tab_dados_epr; 
        vr_tab_extrato_epr      typ_tab_extrato_epr; 
        vr_type_aux              typ_reg_extrato_epr;
        vr_tab_extrato_epr_novo typ_tab_extrato_epr_novo; 
        vr_tab_extrato_epr_aux  typ_tab_extrato_epr_aux; 
        -- Cursor genérico de calendário
        rw_crapdat btch0001.cr_crapdat%ROWTYPE;  
        --Variaveis de Registro da tabela Generica
        vr_dstextab      craptab.dstextab%type;  
        vr_digitaliza   craptab.dstextab%type;  
        vr_parempctl    craptab.dstextab%type;
        --Variaveis de indices
        vr_index         VARCHAR2(100);
        vr_index_novo    VARCHAR2(100);
        vr_index_extrato PLS_INTEGER;
        --Variaveis de Arquivos
        vr_clobxml73    CLOB;
        vr_nmdireto     VARCHAR2(1000);
        vr_nmendter     VARCHAR2(100);
        vr_comando      VARCHAR2(100);
        vr_typ_saida    VARCHAR2(100);
        vr_setlinha     VARCHAR2(100);
        vr_dstexto73    VARCHAR2(32600);
        vr_dstexto      VARCHAR2(32600);
        vr_dstexhis     VARCHAR2(1000);
        --Variaveis Locais
        vr_cdoperad     VARCHAR2(100);
        vr_nmdatela     VARCHAR2(100);
        vr_rel_nmresemp VARCHAR2(100);
        vr_rel_vlsdeved NUMBER;
        vr_rel_dtmvtolt DATE;
        vr_rel_cdagenci VARCHAR2(100);
        vr_rel_nmresage VARCHAR2(100);
        vr_rel_dshistor VARCHAR2(100);
        vr_rel_dslcremp VARCHAR2(100);
        vr_rel_dsfinemp VARCHAR2(100);
        vr_rel_nmdaval1 VARCHAR2(100);
        vr_rel_nmdaval2 VARCHAR2(100);
        vr_rel_nmprimtl VARCHAR2(100);
        vr_rel_nrdocmto VARCHAR2(100);
        vr_rel_vlpreemp VARCHAR2(100);
        vr_rel_indebcre VARCHAR2(100);
        vr_rel_txjurepr NUMBER;
        vr_rel_vllanmto NUMBER;
        vr_cdempres     INTEGER;
        vr_tab_diapagto INTEGER;
        vr_vlsaldod     NUMBER;
        vr_flgctepr     BOOLEAN;
        vr_regexist     BOOLEAN;
        vr_errohist     BOOLEAN;
        vr_inusatab     BOOLEAN;
        vr_qtregist     INTEGER;
        vr_nrctremp     INTEGER;
        vr_dsorigem     VARCHAR2(100);
        vr_dstransa     VARCHAR2(100);
        vr_nrdrowid     ROWID;  
        vr_txanual      crawepr.txmensal%TYPE;
        vr_txnomina     crawepr.txmensal%TYPE;
        vr_dsjasper     VARCHAR2(100);
        --Variaveis de Erro
        vr_des_reto     VARCHAR2(3);
        vr_cdcritic     INTEGER;
        vr_dscritic     VARCHAR2(4000);
        --Variaveis de Excecoes
        vr_exc_erro     EXCEPTION;
        vr_exc_sair     EXCEPTION;
        
        vr_nmaction VARCHAR2(32) := 'pc_gera_impextepr';
      BEGIN
        gene0001.pc_set_modulo(pr_module => NULL, pr_action => vr_nmaction);
        
        IF pr_inselext = 2 THEN
          vr_nrctremp:= 0;
        ELSE
          vr_nrctremp:= pr_nrctremp;  
        END IF;  
        --Inicializar transacao
        vr_dsorigem:= gene0001.vr_vet_des_origens(pr_idorigem);
        vr_dstransa:= 'Consultar dados para extrato do emprestimo.'; 
        --Inicializar Variaveis
        vr_cdcritic:= 0;
        vr_dscritic:= NULL;
        pr_des_reto:= 'NOK'; 
        --Verificar Operador e nome da tela
        IF pr_inproces = 1 THEN
          vr_cdoperad:= pr_cdoperad;
          vr_nmdatela:= pr_nmdatela;
        ELSE
          vr_cdoperad:= '1';  
          vr_nmdatela:= upper(pr_cdprogra);
        END IF;  
        /* Bloco Imprime */
        BEGIN
          --Limpar Tabela Erro
          pr_tab_erro.DELETE;
          -- Verifica se a cooperativa esta cadastrada
          OPEN cr_crapcop (pr_cdcooper => pr_cdcooper);
          FETCH cr_crapcop INTO rw_crapcop;
          -- Se não encontrar
          IF cr_crapcop%NOTFOUND THEN
            -- Fechar o cursor pois haverá raise
            CLOSE cr_crapcop;
            -- Montar mensagem de critica
            vr_cdcritic:= 651;
            RAISE vr_exc_erro;
          ELSE
            -- Apenas fechar o cursor
            CLOSE cr_crapcop;
          END IF;
          -- Busca do diretório base da cooperativa para a geração de relatórios
          vr_nmdireto:= gene0001.fn_diretorio(pr_tpdireto => 'C'           --> /usr/coop
                                             ,pr_cdcooper => pr_cdcooper   --> Cooperativa
                                             ,pr_nmsubdir => 'rl');       --> Utilizaremos o rl

          -- Inicializar as informações do XML de dados para o relatório
          dbms_lob.createtemporary(vr_clobxml73, TRUE, dbms_lob.CALL);
          dbms_lob.open(vr_clobxml73, dbms_lob.lob_readwrite);
          --Escrever no arquivo XML
          gene0002.pc_escreve_xml(vr_clobxml73, vr_dstexto73,'<?xml version="1.0" encoding="UTF-8"?><crrl073><contas>');
                                                      
          --Se nao deve rodar
          IF NOT pr_flgrodar THEN 
            --Nome Arquivo Impressao
            pr_nmarqimp:= 'crrl073.lst';
          ELSE 
            --Nome Arquivo Impressao e PDF
            vr_nmendter:= pr_dsiduser || gene0002.fn_busca_time;
            pr_nmarqimp:= vr_nmendter || '.ex';
            pr_nmarqpdf:= vr_nmendter || '.pdf';
          END IF;
          --Selecionar associado
          OPEN cr_crapass (pr_cdcooper => pr_cdcooper
                          ,pr_nrdconta => pr_nrdconta);
          --Posicionar no proximo registro
          FETCH cr_crapass INTO rw_crapass;
          --Se nao encontrou
          IF cr_crapass%NOTFOUND THEN
            --Fechar Cursor
            CLOSE cr_crapass;
            --mensagem erro
            vr_cdcritic:= 9;
            vr_dscritic:= NULL;
            --Colocar todo o texto na variavel auxiliar
            vr_dstexto:= '<conta nrdconta="'||to_char(pr_nrdconta,'fm9g999g999g0')||
                   '" flgmensag="S" dscmensag="'||vr_dscritic||'"></conta>';
            --Escrever no Arquivo
            gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);

            --Popular Clob do relatorio interno
            gene0002.pc_escreve_xml(vr_clobxml73, vr_dstexto73,vr_dstexto);

            --Levantar Excecao
            RAISE vr_exc_sair;
          END IF;  
          --Fechar Cursor
          CLOSE cr_crapass;
          --Selecionar Dados Agencia
          OPEN cr_crapage(pr_cdcooper => pr_cdcooper
                         ,pr_cdagenci => rw_crapass.cdagenci);
          FETCH cr_crapage INTO rw_crapage;
          --Se nao Encontrou            
          IF cr_crapage%NOTFOUND THEN
            vr_rel_cdagenci:= rw_crapass.cdagenci;
            vr_rel_nmresage:= RPAD('*',15,'*');
          ELSE
            vr_rel_cdagenci:= rw_crapage.cdagenci;
            vr_rel_nmresage:= rw_crapage.nmresage;
          END IF;  
          -- Fechar o cursor
          CLOSE cr_crapage;
          -- Leitura do calendário da cooperativa
          OPEN btch0001.cr_crapdat(pr_cdcooper => pr_cdcooper);
          FETCH btch0001.cr_crapdat INTO rw_crapdat;
          -- Se não encontrar
          IF btch0001.cr_crapdat%NOTFOUND THEN
            -- Fechar o cursor pois efetuaremos raise
            CLOSE btch0001.cr_crapdat;
            -- Montar mensagem de critica
            vr_cdcritic:= 1;
            RAISE vr_exc_erro;
          ELSE
            -- Apenas fechar o cursor
            CLOSE btch0001.cr_crapdat;
          END IF;
          --Buscar Indicador Uso Taxa da tabela
          vr_dstextab:= TABE0001.fn_busca_dstextab(pr_cdcooper => pr_cdcooper
                                                  ,pr_nmsistem => 'CRED'
                                                  ,pr_tptabela => 'USUARI'
                                                  ,pr_cdempres => 11
                                                  ,pr_cdacesso => 'TAXATABELA'
                                                  ,pr_tpregist => 0);
          --Se nao encontrou
          IF vr_dstextab IS NULL THEN
            --Nao usa tabela
            vr_inusatab:= FALSE;
          ELSE
            IF  SUBSTR(vr_dstextab,1,1) = '0' THEN
              --Nao usa tabela
              vr_inusatab:= FALSE;
            ELSE
              --Nao usa tabela
              vr_inusatab:= TRUE;
            END IF;    
          END IF; 
          -- busca o tipo de documento GED    
          vr_digitaliza:= tabe0001.fn_busca_dstextab(pr_cdcooper => pr_cdcooper
                                                    ,pr_nmsistem => 'CRED'
                                                    ,pr_tptabela => 'GENERI'
                                                    ,pr_cdempres => 0
                                                    ,pr_cdacesso => 'DIGITALIZA'
                                                    ,pr_tpregist => 5);
       
          -- Leitura do indicador de uso da tabela de taxa de juros                                                    
          vr_parempctl:= tabe0001.fn_busca_dstextab(pr_cdcooper => 3 /*Fixo Cecred*/
                                                   ,pr_nmsistem => 'CRED'
                                                   ,pr_tptabela => 'USUARI'
                                                   ,pr_cdempres => 11
                                                   ,pr_cdacesso => 'PAREMPCTL'
                                                   ,pr_tpregist => 1); 
      
          gene0001.pc_set_modulo(pr_module => NULL, pr_action => vr_nmaction);

          --Obter Dados do Emprestimo
          EMPR0001.pc_obtem_dados_empresti(pr_cdcooper => pr_cdcooper         --> Cooperativa conectada
                                          ,pr_cdagenci => pr_cdagenci         --> Código da agência
                                          ,pr_nrdcaixa => pr_nrdcaixa         --> Número do caixa
                                          ,pr_cdoperad => pr_cdoperad         --> Código do operador
                                          ,pr_nmdatela => 'IMPRES'            --> Nome datela conectada
                                          ,pr_idorigem => pr_idorigem         --> Indicador da origem da chamada
                                          ,pr_nrdconta => pr_nrdconta         --> Conta do associado
                                          ,pr_idseqttl => pr_idseqttl         --> Sequencia de titularidade da conta
                                          ,pr_rw_crapdat => rw_crapdat        --> Vetor com dados de parâmetro (CRAPDAT)
                                          ,pr_dtcalcul => NULL                --> Data solicitada do calculo
                                          ,pr_nrctremp => vr_nrctremp         --> Número contrato empréstimo
                                          ,pr_cdprogra => pr_cdprogra         --> Programa conectado
                                          ,pr_inusatab => vr_inusatab         --> Indicador de utilização da tabela
                                          ,pr_flgerlog => 'N'                 --> Gerar log S/N
                                          ,pr_flgcondc => TRUE                --> Mostrar emprestimos liquidados sem prejuizo
                                          ,pr_nmprimtl => rw_crapass.nmprimtl --> Nome Primeiro Titular
                                          ,pr_tab_parempctl => vr_parempctl   --> Dados tabela parametro
                                          ,pr_tab_digitaliza => vr_digitaliza --> Dados tabela parametro
                                          ,pr_nriniseq => 0                   --> Numero inicial paginacao
                                          ,pr_nrregist => 0                   --> Qtd registro por pagina
                                          ,pr_qtregist => vr_qtregist         --> Qtd total de registros
                                          ,pr_tab_dados_epr => vr_tab_dados_epr  --> Saida com os dados do empréstimo
                                          ,pr_des_reto => vr_des_reto            --> Retorno OK / NOK
                                          ,pr_tab_erro => pr_tab_erro);          --> Tabela com possíves erros

          gene0001.pc_set_modulo(pr_module => NULL, pr_action => vr_nmaction);

          --Se ocorreu erro
          IF vr_des_reto = 'NOK' THEN 
            --se tem erro na tabela 
            IF pr_tab_erro.COUNT > 0 THEN
              vr_dscritic:= pr_tab_erro(pr_tab_erro.FIRST).dscritic;
            ELSE
              vr_dscritic:= 'Nao foi possivel carregar o extrato.';
            END IF;  
            --Colocar todo o texto na variavel auxiliar
            vr_dstexto:= '<conta nrdconta="'||to_char(pr_nrdconta,'fm9999g999g0')||'" flgmensag="S" dscmensag="'||vr_dscritic||'"></conta>';
            --Escrever no Arquivo
            gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);

            --Popular Clob do relatorio interno
            gene0002.pc_escreve_xml(vr_clobxml73, vr_dstexto73,vr_dstexto);

            --Levantar Excecao
            RAISE vr_exc_sair;
           END IF; 

          gene0001.pc_set_modulo(pr_module => NULL, pr_action => vr_nmaction);

          --Buscar a primeira ocorrencia do extrato
          vr_index:= vr_tab_dados_epr.FIRST;
          WHILE vr_index IS NOT NULL LOOP

            IF vr_tab_dados_epr(vr_index).tpemprst = 1 THEN -- PP

              --Imprimir Extrato
              pc_imprime_extrato (pr_cdcooper => pr_cdcooper      --Codigo Cooperativa
                                 ,pr_cdagenci => pr_cdagenci      --Codigo Agencia
                                 ,pr_nrdcaixa => 0                --Numero do Caixa
                                 ,pr_cdoperad => pr_cdoperad      --Codigo Operador
                                 ,pr_nmdatela => pr_nmdatela      --Nome da Tela
                                 ,pr_idorigem => 1                --Origem dos Dados
                                 ,pr_nrdconta => pr_nrdconta      --Numero da Conta do Associado
                                 ,pr_idseqttl => pr_idseqttl      --Sequencial do Titular
                                 ,pr_dtmvtolt => pr_dtmvtolt      --Data Movimento
                                 ,pr_dtmvtopr => pr_dtmvtopr      --Data Proximo Movimento
                                 ,pr_dtcalcul => SYSDATE          --Data Calculo
                                 ,pr_nrctremp => vr_tab_dados_epr(vr_index).nrctremp  --Numero Contrato Emprestimo                                
                                 ,pr_flgerlog => FALSE            --Escreve erro Log
                                 ,pr_dtiniper => NULL             --Data Inicio Periodo Extrato
                                 ,pr_dtfimper => pr_dtmvtolt      --Data Final Periodo Extrato
                                 ,pr_intpextr => pr_intpextr      --Tipo Extrato /*1-Simplificado 2-Detalhado*/
                                 ,pr_dsiduser => NULL             --Identificador Usuario
                                 ,pr_flgimpri => TRUE             --Flag Imprimir
                                 ,pr_qtpreapg => vr_tab_dados_epr(vr_index).qtpreapg  --Quantidade de parcelas a pagar
                                 ,pr_clobxml  => pr_clobxml       --Clob do Relatorio Principal
                                 ,pr_dstexto  => pr_dstexto       --String do Relatorio Principal
                                 ,pr_clobxml73 => vr_clobxml73    --Clob do Relatorio Interno
                                 ,pr_dstexto73 => vr_dstexto73    --String do Relatorio Interno
                                 ,pr_tab_erro => pr_tab_erro      --Tabela de Erros
                                 ,pr_tab_extrato_epr_aux => vr_tab_extrato_epr_aux --Tabela de Extrato de Emprestimo Auxiliar
                                 ,pr_des_reto => vr_des_reto);    --Descricao Erro
              --Se ocorreu erro
              IF vr_des_reto = 'NOK' THEN 
                --se tem erro na tabela 
                IF pr_tab_erro.COUNT > 0 THEN
                  vr_dscritic:= pr_tab_erro(pr_tab_erro.FIRST).dscritic;
                ELSE
                  vr_dscritic:= 'Nao foi possivel carregar o extrato.';
                END IF;  
                --Colocar todo o texto na variavel auxiliar
                vr_dstexto:= '<conta nrdconta="'||to_char(pr_nrdconta,'fm9999g999g0')||'" flgmensag="S" dscmensag="'||vr_dscritic||'"></conta>';
                --Escrever no Arquivo
                gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);

                --Popular Clob do relatorio interno
                gene0002.pc_escreve_xml(vr_clobxml73, vr_dstexto73,vr_dstexto);

                --Levantar Excecao
                RAISE vr_exc_sair;
               END IF;

            ELSIF vr_tab_dados_epr(vr_index).tpemprst = 2 THEN -- POS-FIXADO

              --Imprimir Extrato
              pc_extrato_pos_fixado(pr_cdcooper => pr_cdcooper      --Codigo Cooperativa
                                   ,pr_cdagenci => pr_cdagenci      --Codigo Agencia
                                   ,pr_nrdcaixa => 0                --Numero do Caixa
                                   ,pr_cdoperad => pr_cdoperad      --Codigo Operador
                                   ,pr_nmdatela => pr_nmdatela      --Nome da Tela
                                   ,pr_idorigem => 1                --Origem dos Dados
                                   ,pr_nrdconta => pr_nrdconta      --Numero da Conta do Associado
                                   ,pr_idseqttl => pr_idseqttl      --Sequencial do Titular
                                   ,pr_dtmvtolt => pr_dtmvtolt      --Data Movimento
                                   ,pr_dtmvtoan => rw_crapdat.dtmvtoan
                                   ,pr_nrctremp => vr_tab_dados_epr(vr_index).nrctremp  --Numero Contrato Emprestimo                                
                                   ,pr_flgerlog => FALSE            --Escreve erro Log
                                   ,pr_dtiniper => NULL             --Data Inicio Periodo Extrato
                                   ,pr_dtfimper => pr_dtmvtolt      --Data Final Periodo Extrato
                                   ,pr_intpextr => pr_intpextr      --Tipo Extrato /*1-Simplificado 2-Detalhado*/
                                   ,pr_flgimpri => TRUE             --Flag Imprimir
                                   ,pr_clobxml  => pr_clobxml       --Clob do Relatorio Principal
                                   ,pr_dstexto  => pr_dstexto       --String do Relatorio Principal
                                   ,pr_clobxml73 => vr_clobxml73    --Clob do Relatorio Interno
                                   ,pr_dstexto73 => vr_dstexto73    --String do Relatorio Interno
                                   ,pr_tab_erro => pr_tab_erro      --Tabela de Erros
                                   ,pr_tab_extrato_epr_aux => vr_tab_extrato_epr_aux --Tabela de Extrato de Emprestimo Auxiliar
                                   ,pr_des_reto => vr_des_reto);    --Descricao Erro
              --Se ocorreu erro
              IF vr_des_reto = 'NOK' THEN 
                --se tem erro na tabela 
                IF pr_tab_erro.COUNT > 0 THEN
                  vr_dscritic:= pr_tab_erro(pr_tab_erro.FIRST).dscritic;
                ELSE
                  vr_dscritic:= 'Nao foi possivel carregar o extrato.';
                END IF;  
                --Colocar todo o texto na variavel auxiliar
                vr_dstexto:= '<conta nrdconta="'||to_char(pr_nrdconta,'fm9999g999g0')||'" flgmensag="S" dscmensag="'||vr_dscritic||'"></conta>';
                --Escrever no Arquivo
                gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);

                --Popular Clob do relatorio interno
                gene0002.pc_escreve_xml(vr_clobxml73, vr_dstexto73,vr_dstexto);

                --Levantar Excecao
                RAISE vr_exc_sair;
               END IF;

            ELSIF vr_tab_dados_epr(vr_index).tpemprst = 0 THEN -- TR

              --Obter Extrato do Emprestimo
              pc_obtem_extrato_emprest (pr_cdcooper    => pr_cdcooper          --Codigo Cooperativa
                                       ,pr_cdagenci    => pr_cdagenci          --Codigo Agencia
                                       ,pr_nrdcaixa    => pr_nrdcaixa          --Numero do Caixa
                                       ,pr_cdoperad    => pr_cdoperad          --Codigo Operador
                                       ,pr_nmdatela    => pr_nmdatela          --Nome da Tela
                                       ,pr_idorigem    => pr_idorigem          --Origem dos Dados
                                       ,pr_nrdconta    => pr_nrdconta          --Numero da Conta do Associado
                                       ,pr_idseqttl    => pr_idseqttl          --Sequencial do Titular
                                       ,pr_nrctremp    => vr_tab_dados_epr(vr_index).nrctremp  --Numero Contrato Emprestimo           
                                       ,pr_dtiniper    => NULL                 --Inicio periodo Extrato
                                       ,pr_dtfimper    => NULL                 --Final periodo Extrato
                                       ,pr_flgerlog    => FALSE                --Imprimir log
                                       ,pr_extrato_epr => vr_tab_extrato_epr   --Tipo de tabela com extrato emprestimo
                                       ,pr_des_reto    => vr_des_reto          --Retorno OK ou NOK
                                       ,pr_tab_erro    => pr_tab_erro);        --Tabela de Erros
              --Se ocorreu erro
              IF vr_des_reto = 'NOK' THEN 
                --se tem erro na tabela 
                IF pr_tab_erro.COUNT > 0 THEN
                  vr_dscritic:= pr_tab_erro(pr_tab_erro.FIRST).dscritic;
                ELSE
                  vr_dscritic:= 'Nao foi possivel carregar o extrato.';
                END IF;  
                --Colocar todo o texto na variavel auxiliar
                vr_dstexto:= '<conta nrdconta="'||to_char(pr_nrdconta,'fm9999g999g0')||'" flgmensag="S" dscmensag="'||vr_dscritic||'"></conta>';
                --Escrever no Arquivo
                gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);
    
                --Popular Clob do relatorio interno
                gene0002.pc_escreve_xml(vr_clobxml73, vr_dstexto73,vr_dstexto);
  
                --Levantar Excecao
                RAISE vr_exc_sair;
               END IF; 
              --Taxas
              vr_txanual  := vr_tab_dados_epr(vr_index).txanual;
              vr_txnomina := TRUNC(((POWER(1 + (vr_txanual / 100), 1/12) - 1) * 12) * 100, 5);
              --Valor do Saldo
              vr_vlsaldod:= 0;
              --Valor Prestacao Emprestimo
              vr_rel_vlpreemp:= 'PR: '|| to_char(vr_tab_dados_epr(vr_index).qtpreemp,'fm990')||' X '||
                                  to_char(vr_tab_dados_epr(vr_index).vlpreemp,'fm9999g999g990d00');
              --Gravar Informacoes do cabecalho no XML
              vr_dstexto:= '<conta tpemprst="' || vr_tab_dados_epr(vr_index).tpemprst || '" flgmensag="N" dscmensag=""' ||
                           '  nrdconta="' || to_char(rw_crapass.nrdconta,'fm9999g999g0')                          ||
                           '" nmprimtl="' || RPAD(rw_crapass.nmprimtl,30,' ')                                     ||
                           '" cdagenci="' || vr_rel_cdagenci                                                      ||
                           '" nmresage="' || vr_rel_nmresage                                                      ||
                           '" dtmvtolt="' || to_char(rw_crapdat.dtmvtolt,'DD/MM/YYYY')                            ||
                           '" nmextcop="' || rw_crapcop.nmextcop                                                  ||
                           '" nmrescop="' || rw_crapcop.nmrescop                                                  ||
                           '" nrdocnpj="' || gene0002.fn_mask_cpf_cnpj(rw_crapcop.nrdocnpj,2)                     ||
                           '" nrctremp="' || to_char(vr_tab_dados_epr(vr_index).nrctremp,'fm99g999g990')           ||                
                           '" dslcremp="' || RPAD(vr_tab_dados_epr(vr_index).dslcremp,29,' ')                     || 
                           '" dsdaval1="' || RPAD(vr_tab_dados_epr(vr_index).dsdaval1,49,' ')                     ||                 
                           '" dsfinemp="' || RPAD(vr_tab_dados_epr(vr_index).dsfinemp,29,' ')                     || 
                           '" dsdaval2="' || RPAD(vr_tab_dados_epr(vr_index).dsdaval2,49,' ')                     || 
                           '" vlpreemp="' || RPAD(vr_rel_vlpreemp,24,' ')                                         ||
                           '" vlparcel="' || to_char(vr_tab_dados_epr(vr_index).vlpreemp,'fm9999g999g990d00')     ||
                           '" percetop="' || to_char(vr_tab_dados_epr(vr_index).percetop,'fm9999g999g990d00000')  ||
                           '" dtultpgt="' || to_char(ADD_MONTHS(vr_tab_dados_epr(vr_index).dtpripgt, vr_tab_dados_epr(vr_index).qtpreemp - 1),'DD/MM/YYYY') ||
                           '" cdmodali="' || vr_tab_dados_epr(vr_index).cdmodali                                  ||
                           '" dsmodali="' || vr_tab_dados_epr(vr_index).dsmodali                                  ||
                           '" cdsubmod="' || vr_tab_dados_epr(vr_index).cdsubmod                                  ||
                           '" dssubmod="' || gene0007.fn_caract_acento(vr_tab_dados_epr(vr_index).dssubmod,1,'#$&%¹²³ªº°*!?<>|','                  ') ||
                           '" txanual="'  || to_char(vr_txanual,'fm9999g999g990d00000')                           ||
                           '" txnominal="'|| to_char(vr_txnomina,'fm9999g999g990d00000')                          ||
                           '" qtpreapg="' || to_char(vr_tab_dados_epr(vr_index).qtpreapg,'fm990d0000')            ||
                           '" qtpreemp="' || to_char(vr_tab_dados_epr(vr_index).qtpreemp,'fm990')                 ||
                           '" vljuracu="' || to_char(vr_tab_dados_epr(vr_index).vljuracu,'fm99999g999g990d00')    || 
                           '" vlsdeved="' || to_char(vr_tab_dados_epr(vr_index).vlsdeved,'fm999999g999g990d00mi') || 
                           '" inprejuz="' || vr_tab_dados_epr(vr_index).inprejuz                                  ||
                           '" dtprejuz="' || to_char(vr_tab_dados_epr(vr_index).dtprejuz,'DD/MM/YYYY')            || 
                           '" vlprejuz="' || to_char(vr_tab_dados_epr(vr_index).vlprejuz,'fm999g999g990d00')      || 
                           '" vljraprj="' || to_char(vr_tab_dados_epr(vr_index).vljraprj,'fm9999g990d00')         ||
                           '" tpextrat="' || pr_tpextrat                                                          ||
                           '"><lancamentos dsmsgext="Saldo para Liquidacao em ' || 
                              to_char(rw_crapdat.dtmvtolt,'DD/MM/YYYY') || ' R$: ' || 
                              to_char(vr_tab_dados_epr(vr_index).vlsdeved +
                                      vr_tab_dados_epr(vr_index).vlmtapar +
                                      vr_tab_dados_epr(vr_index).vlmrapar +
                                      vr_tab_dados_epr(vr_index).vliofcpl,'fm999999g999g990d00mi') || '">';
              --Escrever no XML
              gene0002.pc_escreve_xml(pr_clobxml,pr_dstexto,vr_dstexto);

              --Escrever no XML interno
              gene0002.pc_escreve_xml(vr_clobxml73,vr_dstexto73,vr_dstexto);

              --Verificar conta em prejuizo
              IF vr_tab_dados_epr(vr_index).inprejuz = 1 THEN
                --Selecionar Lancamento Emprestimo
                OPEN cr_craplem (pr_cdcooper => pr_cdcooper
                                ,pr_nrdconta => pr_nrdconta
                                ,pr_nrctremp => vr_tab_dados_epr(vr_index).nrctremp);
                                /*Jean (RKAM) - pr_nrctremp => vr_nrctremp - Chamado 202681 */
                                
                FETCH cr_craplem INTO rw_craplem;
                vr_flgctepr:= cr_craplem%FOUND;
                --Fechar Cursor
                CLOSE cr_craplem;
              ELSE
                vr_flgctepr:= FALSE;
              END IF; 
              
              FOR V_IND_TP IN vr_tab_extrato_epr.first .. vr_tab_extrato_epr.COUNT LOOP
                FOR V_IND_TP_AUX IN vr_tab_extrato_epr.first .. vr_tab_extrato_epr.COUNT - V_IND_TP LOOP
                  
                  IF (to_number(to_char(vr_tab_extrato_epr(V_IND_TP_AUX + 1).dtmvtolt,'yyyymmdd')) < 
                      to_number(to_char(vr_tab_extrato_epr(V_IND_TP_AUX).dtmvtolt,'yyyymmdd')) AND 
                      vr_tab_extrato_epr(V_IND_TP_AUX).dthrtran IS NULL) OR 
                     (to_number(to_char(vr_tab_extrato_epr(V_IND_TP_AUX + 1).dthrtran,'yyyymmddHHMISS')) < 
                      to_number(to_char(vr_tab_extrato_epr(V_IND_TP_AUX).dthrtran,'yyyymmddHHMISS')) AND
                      vr_tab_extrato_epr(V_IND_TP_AUX).dthrtran IS NOT NULL) THEN
                    -- ORDERNANDO O TYPE
                    vr_type_aux := vr_tab_extrato_epr(V_IND_TP_AUX);
                    vr_tab_extrato_epr(V_IND_TP_AUX) := vr_tab_extrato_epr(V_IND_TP_AUX + 1);
                    vr_tab_extrato_epr(V_IND_TP_AUX + 1) := vr_type_aux;
                  END IF;
                  --   
                END LOOP;  
              END LOOP;            
              --Preparar a tabela conforme break-by
              vr_tab_extrato_epr_novo.DELETE;
              vr_index_extrato:= vr_tab_extrato_epr.FIRST;
              WHILE vr_index_extrato IS NOT NULL LOOP
                IF vr_tab_extrato_epr(vr_index_extrato).dthrtran IS NOT NULL THEN
                --Montar novo indice conforme break-by
                  vr_index_novo:= LPAD(vr_tab_extrato_epr(vr_index_extrato).nrdconta,10,'0')||
                                  vr_tab_extrato_epr(vr_index_extrato).nranomes||
                                  TO_CHAR(vr_tab_extrato_epr(vr_index_extrato).dthrtran,'YYYYMMDD hhmiss')|| 
                                  LPAD(vr_tab_extrato_epr(vr_index_extrato).cdhistor,10,'0')||
                                  LPAD(vr_tab_extrato_epr(vr_index_extrato).nrdocmto,10,'0')||
                                  LPAD(vr_tab_extrato_epr(vr_index_extrato).nrdolote,10,'0');  
                ELSE
                --Montar novo indice conforme break-by
                vr_index_novo:= LPAD(vr_tab_extrato_epr(vr_index_extrato).nrdconta,10,'0')||
                                vr_tab_extrato_epr(vr_index_extrato).nranomes||
                                TO_CHAR(vr_tab_extrato_epr(vr_index_extrato).dtmvtolt,'YYYYMMDD')|| 
                                LPAD(vr_tab_extrato_epr(vr_index_extrato).cdhistor,10,'0')||
                                LPAD(vr_tab_extrato_epr(vr_index_extrato).nrdocmto,10,'0')||
                                LPAD(vr_tab_extrato_epr(vr_index_extrato).nrdolote,10,'0');  
                END IF;
                
                --Copiar de uma tabela para outra
                vr_tab_extrato_epr_novo(vr_index_novo):= vr_tab_extrato_epr(vr_index_extrato);
                --Proximo Registro Extrato
                vr_index_extrato:= vr_tab_extrato_epr.NEXT(vr_index_extrato);
              END LOOP; 
              
              --Percorrer tabela extrato apos break-by
              vr_index_novo:= vr_tab_extrato_epr_novo.FIRST;
              WHILE vr_index_novo IS NOT NULL LOOP
                --Se for o primeiro documento
                IF vr_index_novo = vr_tab_extrato_epr_novo.FIRST THEN
                  --Em prejuizo
                  IF vr_tab_dados_epr(vr_index).inprejuz = 1 AND NOT vr_flgctepr THEN /* em prejuizo */
                    --Saldo Devedor recebe Prejuizo
                    vr_vlsaldod:= vr_tab_dados_epr(vr_index).vlprejuz;
                    --Tipo de Emprestimo
                    IF vr_tab_extrato_epr_novo(vr_index_novo).tpemprst = 0 THEN
                      --Montar Texto
                      vr_dstexto:= 
                        '<lancto flgmensag="N" dsmensag="" flgmenhis="N" dsmenhis="">' ||
                          '<dtmvtolt>' || to_char(vr_tab_dados_epr(vr_index).dtprejuz,'DD/MM/YY') || '</dtmvtolt>' ||
                          '<dsextrat>' || 'TRF.PREJUIZO' || '</dsextrat>' ||
                          '<nrdocmto>' || '1' || '</nrdocmto>' ||
                           '<vllanmto>' || to_char(vr_tab_dados_epr(vr_index).vlprejuz,'fm99999g999g990d00') || '</vllanmto>' ||
                           '<indebcre>C</indebcre>' ||
                          '<vlsdeved></vlsdeved>' ||
                          '<txjurepr></txjurepr>' ||
                        '</lancto>';
                      --Escrever no XML
                      gene0002.pc_escreve_xml(pr_clobxml,pr_dstexto,vr_dstexto);

                      --Escrever no XML interno
                      gene0002.pc_escreve_xml(vr_clobxml73,vr_dstexto73,vr_dstexto);

                    END IF; --tpemprst = 0 
                  END IF; --Em prejuizo  
                END IF;  --Se for o primeiro documento
                --Marcar que existe registro
                vr_regexist:= TRUE;
                --Se for qualquer Historico
                IF vr_tab_extrato_epr_novo(vr_index_novo).indebcre = '*' THEN 
                  --Erro no Historico
                  vr_errohist:= TRUE;
                  --Sair do Loop
                  EXIT;
                END IF;
                --Verificar Datas
                IF (vr_tab_dados_epr(vr_index).dtmvtolt > TO_DATE('07/31/1993','MM/DD/YYYY') AND
                    vr_tab_dados_epr(vr_index).inliquid = 1 AND
                    vr_tab_dados_epr(vr_index).dtultpag < TO_DATE('07/01/1994','MM/DD/YYYY'))  OR
                    vr_tab_dados_epr(vr_index).dtmvtolt > TO_DATE('06/30/1994','MM/DD/YYYY')  THEN
                  --Debito  
                  IF vr_tab_extrato_epr_novo(vr_index_novo).indebcre = 'D' THEN
                    --Se Possui Saldo
                    IF vr_tab_extrato_epr_novo(vr_index_novo).flgsaldo AND
                      vr_tab_extrato_epr_novo(vr_index_novo).cdhistor not in (2403,2404,2407)  THEN
                      --Saldo Devedor
                      vr_vlsaldod:= nvl(vr_vlsaldod,0) + vr_tab_extrato_epr_novo(vr_index_novo).vllanmto;
                    END IF;    
                  ELSIF vr_tab_extrato_epr_novo(vr_index_novo).indebcre = 'C' AND
                        vr_tab_extrato_epr_novo(vr_index_novo).cdhistor not in (349,2401,2402,2405,2406) THEN --<> 349 THEN
                    --Se Possui Saldo
                    IF vr_tab_extrato_epr_novo(vr_index_novo).flgsaldo THEN
                      --Saldo Devedor
                      vr_vlsaldod:= nvl(vr_vlsaldod,0) - vr_tab_extrato_epr_novo(vr_index_novo).vllanmto;
                    END IF;     
                  END IF; 
                  --Ultimo Mes
                  IF vr_index_novo = vr_tab_extrato_epr_novo.LAST OR
                     vr_tab_extrato_epr_novo(vr_index_novo).nrdconta <> vr_tab_extrato_epr_novo(vr_tab_extrato_epr_novo.NEXT(vr_index_novo)).nrdconta OR
                     vr_tab_extrato_epr_novo(vr_index_novo).nranomes <> vr_tab_extrato_epr_novo(vr_tab_extrato_epr_novo.NEXT(vr_index_novo)).nranomes THEN
                    --Se for mesmo ano e mes
                    IF vr_tab_extrato_epr_novo(vr_index_novo).nranomes = to_number(to_char(pr_dtmvtolt,'YYYYMM')) THEN
                      --Saldo Devedor
                      vr_rel_vlsdeved:= -999999;  
                    ELSE
                      --Saldo Devedor
                      vr_rel_vlsdeved:= vr_vlsaldod;    
                    END IF;  
                  ELSE
                    --Saldo Devedor
                    vr_rel_vlsdeved:= -999999;  
                  END IF;   
                ELSE
                  --Saldo Devedor
                  vr_rel_vlsdeved:= -999999;
                END IF;
                --Tipo de Emprestimo
                IF vr_tab_extrato_epr_novo(vr_index_novo).tpemprst = 0 THEN
                  --Limpar campos
                  IF vr_rel_vlsdeved = -999999 THEN
                    vr_rel_vlsdeved:= NULL;
                  END IF;  
                  --Somente mostrar taxa juros positivas
                  IF vr_tab_extrato_epr_novo(vr_index_novo).txjurepr <= 0 THEN
                    vr_rel_txjurepr:= NULL;
                  ELSE
                    vr_rel_txjurepr:= vr_tab_extrato_epr_novo(vr_index_novo).txjurepr;  
                  END IF;  
                  --Montar Texto
                  vr_dstexto:= 
                    '<lancto flgmensag="N" dsmensag="" flgmenhis="N" dsmenhis="">' ||
                      '<dtmvtolt>' || to_char(vr_tab_extrato_epr_novo(vr_index_novo).dtmvtolt,'DD/MM/YY') || '</dtmvtolt>' ||
                      '<dsextrat>' || SUBSTR(vr_tab_extrato_epr_novo(vr_index_novo).dsextrat,1,15) || '</dsextrat>' ||
                      '<nrdocmto>' || to_char(vr_tab_extrato_epr_novo(vr_index_novo).nrdocmto,'fm999999g990') || '</nrdocmto>' ||
                       '<vllanmto>' || to_char(vr_tab_extrato_epr_novo(vr_index_novo).vllanmto,'fm99999g999g990d00') || '</vllanmto>' ||
                       '<indebcre>' || vr_tab_extrato_epr_novo(vr_index_novo).indebcre ||'</indebcre>' ||
                      '<vlsdeved>' || to_char(vr_rel_vlsdeved,'fm99999g999g990d00')||'</vlsdeved>' ||
                      '<txjurepr>' || to_char(vr_rel_txjurepr,'fm990d0000000')||'</txjurepr>' ||
                    '</lancto>';
                  --Escrever no XML
                  gene0002.pc_escreve_xml(pr_clobxml,pr_dstexto,vr_dstexto);

                  --Escrever no XML interno
                  gene0002.pc_escreve_xml(vr_clobxml73,vr_dstexto73,vr_dstexto);

                END IF;  
                --Proximo registro
                vr_index_novo:= vr_tab_extrato_epr_novo.NEXT(vr_index_novo);
              END LOOP;      

              gene0001.pc_set_modulo(pr_module => NULL, pr_action => vr_nmaction);

              --Se tem erro no Historico
              IF vr_errohist THEN
                --Montar mensagem Historico
                vr_dstexhis:= to_char(vr_tab_extrato_epr_novo(vr_index_novo).dtmvtolt,'DD/MM/YY')||' '||
                              vr_tab_extrato_epr_novo(vr_index_novo).cdhistor||' '||
                              to_char(vr_tab_extrato_epr_novo(vr_index_novo).nrdocmto,'fm999g999g990')||' '||
                              to_char(vr_tab_extrato_epr_novo(vr_index_novo).vllanmto,'fm99999g999g990d00')||' '||
                              vr_tab_extrato_epr_novo(vr_index_novo).cdagenci||' '||
                              vr_tab_extrato_epr_novo(vr_index_novo).cdbccxlt||' '||
                              vr_tab_extrato_epr_novo(vr_index_novo).nrdolote||' '||
                              vr_tab_extrato_epr_novo(vr_index_novo).nrseqdig;  
                --Montar Texto
                vr_dstexto:= 
                    '<lancto flgmensag="S" dsmensag="**** HA LANCAMENTO COM PROBLEMA ****"' ||
                      ' flgmenhis="S" dsmenhis="'||vr_dstexhis||'">'|| 
                      '<dtmvtolt></dtmvtolt>' ||
                      '<dsextrat></dsextrat>' ||
                      '<nrdocmto></nrdocmto>' ||
                       '<vllanmto></vllanmto>' ||
                       '<indebcre></indebcre>' ||
                      '<vlsdeved></vlsdeved>' ||
                      '<txjurepr></txjurepr>' ||
                    '</lancto>';
                --Escrever no XML
                gene0002.pc_escreve_xml(pr_clobxml,pr_dstexto,vr_dstexto);
    
                --Escrever no XML interno
                gene0002.pc_escreve_xml(vr_clobxml73,vr_dstexto73,vr_dstexto);

              END IF;
              --Se nao possui registro
              IF NOT vr_regexist THEN  
                --Montar Texto
                vr_dstexto:= 
                    '<lancto flgmensag="S" dsmensag="** NAO HA LANCAMENTOS PARA O CONTRATO **"' ||
                      ' flgmenhis="N" dsmenhis="">'|| 
                      '<dtmvtolt></dtmvtolt>' ||
                      '<dsextrat></dsextrat>' ||
                      '<nrdocmto></nrdocmto>' ||
                       '<vllanmto></vllanmto>' ||
                       '<indebcre></indebcre>' ||
                      '<vlsdeved></vlsdeved>' ||
                      '<txjurepr></txjurepr>' ||
                    '</lancto>';
                --Escrever no XML
                gene0002.pc_escreve_xml(pr_clobxml,pr_dstexto,vr_dstexto);
                --Escrever no XML interno
                gene0002.pc_escreve_xml(vr_clobxml73,vr_dstexto73,vr_dstexto);
              END IF;
              /* Finalizar tag lancamentos */
              --Montar Texto
              vr_dstexto:= '</lancamentos>';
              --Escrever no XML
              gene0002.pc_escreve_xml(pr_clobxml,pr_dstexto,vr_dstexto);
              --Escrever no XML interno
              gene0002.pc_escreve_xml(vr_clobxml73,vr_dstexto73,vr_dstexto);

            END IF; --tpemprst = 1
            
            /* Finalizar tag conta */
            --Montar Texto
            vr_dstexto:= '</conta>';
            --Escrever no XML
            gene0002.pc_escreve_xml(pr_clobxml,pr_dstexto,vr_dstexto);
            --Escrever no XML interno
            gene0002.pc_escreve_xml(vr_clobxml73,vr_dstexto73,vr_dstexto);
          
            --Proximo registro Dados Emprestimo
            vr_index:= vr_tab_dados_epr.NEXT(vr_index);
          END LOOP;
          
          gene0001.pc_set_modulo(pr_module => NULL, pr_action => vr_nmaction);
          
          --Ayllos Web
          IF pr_flgrodar = TRUE THEN
            --Popular Clob do relatorio interno
            gene0002.pc_escreve_xml(vr_clobxml73, vr_dstexto73,'</contas></crrl073>',TRUE);

            IF pr_tpextrat = 11 THEN
              -- Portabilidade
              vr_dsjasper := 'crrl073_portabilidade.jasper';
            ELSE
              -- Emprestimo
              vr_dsjasper := 'crrl073.jasper';
            END IF;

            -- Gera relatório crrl073
            gene0002.pc_solicita_relato(pr_cdcooper  => pr_cdcooper                   --> Cooperativa conectada
                                       ,pr_cdprogra  => pr_cdprogra                   --> Programa chamador
                                       ,pr_dtmvtolt  => pr_dtmvtolt                   --> Data do movimento atual
                                       ,pr_dsxml     => vr_clobxml73                  --> Arquivo XML de dados
                                       ,pr_dsxmlnode => '/crrl073/contas/conta'       --> Nó base do XML para leitura dos dados
                                       ,pr_dsjasper  => vr_dsjasper                   --> Arquivo de layout do iReport
                                       ,pr_dsparams  => NULL                          --> Sem parâmetros
                                       ,pr_cdrelato => 73                             --> Código fixo para o relatório (nao busca pelo sqcabrel)                                       
                                       ,pr_dsarqsaid => vr_nmdireto||'/'||pr_nmarqimp --> Arquivo final com o path
                                       ,pr_qtcoluna  => 80                            --> Colunas do relatorio
                                       ,pr_flg_gerar => 'S'                           --> Geraçao na hora
                                       ,pr_flg_impri => 'N'                           --> Chamar a impressão (Imprim.p)
                                       ,pr_nmformul  => '80col'                       --> Nome do formulário para impressão
                                       ,pr_nrcopias  => 1                             --> Número de cópias
                                       --,pr_sqcabrel  => 1                             --> Qual a seq do cabrel
                                       ,pr_flappend  => 'S'                           --> Fazer append do relatorio se ja existir
                                       ,pr_des_erro  => vr_dscritic);                 --> Saída com erro
            --Se ocorreu erro no relatorio
            IF vr_dscritic IS NOT NULL THEN
              --Levantar Excecao
              RAISE vr_exc_erro;
            END IF; 

            --Fechar Clob e Liberar Memoria  
            dbms_lob.close(vr_clobxml73);
            dbms_lob.freetemporary(vr_clobxml73);             

            IF pr_idorigem = 5 THEN 
                         
              --Enviar arquivo para Web
              GENE0002.pc_envia_arquivo_web (pr_cdcooper => pr_cdcooper    --Codigo Cooperativa
                                            ,pr_cdagenci => pr_cdagenci    --Codigo Agencia
                                            ,pr_nrdcaixa => pr_nrdcaixa    --Numero do Caixa
                                            ,pr_nmarqimp => pr_nmarqimp    --Nome Arquivo Impressao
                                            ,pr_nmdireto => vr_nmdireto    --Nome Diretorio
                                            ,pr_nmarqpdf => pr_nmarqpdf    --Nome Arquivo PDF
                                            ,pr_des_reto => vr_des_reto    --Retorno OK/NOK
                                            ,pr_tab_erro => pr_tab_erro);  --tabela erro
              --Se ocorreu erro
              IF vr_des_reto <> 'OK' THEN
                --Se tem erro na tabela 
                IF pr_tab_erro.COUNT > 0 THEN
                  vr_dscritic:= pr_tab_erro(pr_tab_erro.FIRST).dscritic;
                ELSE
                  vr_dscritic:= 'Erro ao enviar arquivo para web.';  
                END IF;  
                --Sair 
                RAISE vr_exc_erro;
              END IF;
            END IF;

          END IF; 

          gene0001.pc_set_modulo(pr_module => NULL, pr_action => vr_nmaction);

          --Retornar Valor para parametro
          pr_des_reto:= 'OK';                                                        
        EXCEPTION
          WHEN vr_exc_sair THEN 
            pr_des_reto:= 'OK'; 
            vr_cdcritic:= NULL;
            vr_dscritic:= NULL; 
        END; 
        
        --Se nao tem erro na temp-table 
        IF pr_tab_erro.COUNT = 0 AND (vr_dscritic IS NOT NULL OR nvl(vr_cdcritic,0) <> 0) THEN
          -- Chamar rotina de gravacao de erro
          gene0001.pc_gera_erro (pr_cdcooper => pr_cdcooper
                                ,pr_cdagenci => pr_cdagenci
                                ,pr_nrdcaixa => pr_nrdcaixa
                                ,pr_nrsequen => 1  /** Sequencia **/
                                ,pr_cdcritic => vr_cdcritic
                                ,pr_dscritic => vr_dscritic
                                ,pr_tab_erro => pr_tab_erro);
        END IF;
        --Escrever erro no Log
        IF pr_flgerlog THEN  
          --Executar rotina geracao log
          gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                              ,pr_cdoperad => vr_cdoperad
                              ,pr_dscritic => vr_dscritic
                              ,pr_dsorigem => vr_dsorigem
                              ,pr_dstransa => vr_dstransa
                              ,pr_dttransa => TRUNC(SYSDATE)
                              ,pr_flgtrans => (CASE pr_des_reto WHEN 'OK' THEN 1 ELSE 0 END)
                              ,pr_hrtransa => gene0002.fn_busca_time
                              ,pr_idseqttl => 1 /** idseqttl **/
                              ,pr_nmdatela => vr_nmdatela
                              ,pr_nrdconta => pr_nrdconta
                              ,pr_nrdrowid => vr_nrdrowid);
        END IF;  

        gene0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);

      EXCEPTION
        WHEN vr_exc_erro THEN
          -- Retorno não OK
          pr_des_reto := 'NOK';
          -- Chamar rotina de gravação de erro
          gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                               ,pr_cdagenci => pr_cdagenci
                               ,pr_nrdcaixa => pr_nrdcaixa
                               ,pr_nrsequen => 1 --> Fixo
                               ,pr_cdcritic => 0 --> Critica 0
                               ,pr_dscritic => vr_dscritic
                               ,pr_tab_erro => pr_tab_erro);
          -- Se foi solicitado geração de LOG
          IF pr_flgerlog THEN
            -- Chamar geração de LOG
            gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                                ,pr_cdoperad => pr_cdoperad
                                ,pr_dscritic => vr_dscritic
                                ,pr_dsorigem => vr_dsorigem
                                ,pr_dstransa => vr_dstransa
                                ,pr_dttransa => TRUNC(SYSDATE)
                                ,pr_flgtrans => 0 --> FALSE
                                ,pr_hrtransa => gene0002.fn_busca_time
                                ,pr_idseqttl => pr_idseqttl
                                ,pr_nmdatela => pr_nmdatela
                                ,pr_nrdconta => pr_nrdconta
                                ,pr_nrdrowid => vr_nrdrowid);
          END IF;  
        WHEN OTHERS THEN
          cecred.pc_internal_exception;
          -- Retorno não OK
          pr_des_reto := 'NOK';
          -- Chamar rotina de gravação de erro
          vr_dscritic := 'Erro na pc_gera_impextepr --> '|| sqlerrm;
          gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                               ,pr_cdagenci => pr_cdagenci
                               ,pr_nrdcaixa => pr_nrdcaixa
                               ,pr_nrsequen => 1 --> Fixo
                               ,pr_cdcritic => 0 --> Critica 0
                               ,pr_dscritic => vr_dscritic
                               ,pr_tab_erro => pr_tab_erro);
          -- Se foi solicitado geração de LOG
          IF pr_flgerlog THEN
            -- Chamar geração de LOG
            gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                                ,pr_cdoperad => pr_cdoperad
                                ,pr_dscritic => vr_dscritic
                                ,pr_dsorigem => vr_dsorigem
                                ,pr_dstransa => vr_dstransa
                                ,pr_dttransa => TRUNC(SYSDATE)
                                ,pr_flgtrans => 0 --> FALSE
                                ,pr_hrtransa => gene0002.fn_busca_time
                                ,pr_idseqttl => pr_idseqttl
                                ,pr_nmdatela => pr_nmdatela
                                ,pr_nrdconta => pr_nrdconta
                                ,pr_nrdrowid => vr_nrdrowid);
          END IF;
        END;  
      END pc_gera_impextepr;  

    -- Subrotina para gerar extrato Aplicacoes
    PROCEDURE pc_gera_impextrda (pr_cdcooper IN crapcop.cdcooper%TYPE  --Codigo Cooperativa
                                ,pr_cdagenci IN crapass.cdagenci%TYPE  --Codigo Agencia
                                ,pr_nrdcaixa IN INTEGER                --Numero do Caixa
                                ,pr_idorigem IN INTEGER                --Origem dos Dados
                                ,pr_nmdatela IN VARCHAR2               --Nome da Tela                                
                                ,pr_dtmvtolt IN crapdat.dtmvtolt%TYPE  --Data Movimento
                                ,pr_inproces IN INTEGER                --Indicador Processo
                                ,pr_cdprogra IN crapprg.cdprogra%TYPE  --Codigo Programa
                                ,pr_cdoperad IN VARCHAR2               --Codigo Operador
                                ,pr_dsiduser IN VARCHAR2               --Identificador Usuario
                                ,pr_nrdconta IN crapass.nrdconta%TYPE  --Numero da Conta do Associado
                                ,pr_nraplica IN craplap.nraplica%TYPE  --Numero Aplicacao
                                ,pr_idseqttl IN crapttl.idseqttl%TYPE  --Sequencial do Titular                                                                
                                ,pr_flgrodar IN BOOLEAN                --Flag Executar
                                ,pr_flgerlog IN BOOLEAN                --Escreve erro Log
                                ,pr_tprelato IN INTEGER                --Indicador Selecao Extrato /* tprelato: 1-Especif.   2-Todos    3-Com Saldo   4-Sem Saldo*/
                                ,pr_clobxml  IN OUT NOCOPY CLOB        --Clob arquivo de dados
                                ,pr_dstexto  IN OUT NOCOPY VARCHAR2    --Texto Clob
                                ,pr_nmarqimp OUT VARCHAR2              --Nome Arquivo Impressao
                                ,pr_nmarqpdf OUT VARCHAR2              --Nome Arquivo PDF
                                ,pr_tab_erro OUT GENE0001.typ_tab_erro --Tabela de Erros
                                ,pr_des_reto OUT VARCHAR2 ) IS         --Descricao Erro
  BEGIN
  ---------------------------------------------------------------------------------------------------------------
  --
  --  Programa : pc_gera_impextrda                    Antigo: procedures/b1wgen0112.p/gera-impextrda
  --  Sistema  : 
  --  Sigla    : CRED
  --  Autor    : Alisson C. Berrido - Amcom
  --  Data     : Julho/2014                           Ultima atualizacao: 02/03/2018
  --
  -- Dados referentes ao programa:
  --
  -- Frequencia: -----
  -- Objetivo   : Procedure para obter impressao do extrato rendimentoss de aplicacoes do associado
  --
  -- Alterações : 04/08/2014 - Conversão Progress -> Oracle (Alisson - AMcom)
  --                 
  --              14/04/2015 - Adicionar o tipo de aplicação no xml de retorno
  --                           (DTCARENC) SD 266191 (Kelvin).
  --              
  --              29/04/2015 - Criado controle para não fechar tag "aplicações" sem ter aberto
  --                           (Odirlei-AMcom)
  --
  --              20/04/2016 - Remover comando rm e incluir direto na tela impres 
  --                           (Lucas Ranghetti/Rodrigo #399412)
  --
  --              27/11/2017 - Inclusao do valor de bloqueio em garantia nos relatorios. 
  --                           PRJ404 - Garantia.(Odirlei-AMcom) 
  --  
  --              02/03/2018 - Ajustes na exibição dos valores de bloqueio Judicial e de cobertura de aplicacao
  --                           (Lucas Skroch - Supero TI)
  --
  ---------------------------------------------------------------------------------------------------------------
  DECLARE
        -- Busca dos dados da cooperativa
        CURSOR cr_crapcop (pr_cdcooper IN crapcop.cdcooper%TYPE) IS
          SELECT crapcop.nmrescop
                ,crapcop.nmextcop
          FROM crapcop crapcop
          WHERE crapcop.cdcooper = pr_cdcooper;
        rw_crapcop cr_crapcop%ROWTYPE;  
        -- Busca dos dados do associado
        CURSOR cr_crapass(pr_cdcooper IN crapcop.cdcooper%TYPE
                         ,pr_nrdconta IN crapass.nrdconta%TYPE) IS
          SELECT crapass.nrdconta
                ,crapass.nmprimtl
                ,crapass.vllimcre
                ,crapass.nrcpfcgc
                ,crapass.inpessoa
                ,crapass.cdcooper
                ,crapass.cdagenci
          FROM crapass crapass
          WHERE crapass.cdcooper = pr_cdcooper
          AND   crapass.nrdconta = pr_nrdconta;
        rw_crapass cr_crapass%ROWTYPE;
        -- Cursor para busca a agencia
          CURSOR cr_crapage(pr_cdcooper IN crapage.cdcooper%TYPE
                           ,pr_cdagenci IN crapage.cdagenci%TYPE) IS
            SELECT crapage.nmcidade
                  ,crapage.cdagenci
                  ,crapage.nmresage
                  ,crapage.qtddlslf
            FROM crapage crapage
            WHERE crapage.cdcooper = pr_cdcooper 
            AND   crapage.cdagenci = pr_cdagenci;
        rw_crapage cr_crapage%ROWTYPE;           
				
				-- Cursor para verificar existencia de aplicacao
				CURSOR cr_craprda(pr_cdcooper IN craprda.cdcooper%TYPE
				                 ,pr_nrdconta IN craprda.nrdconta%TYPE
												 ,pr_nraplica IN craprda.nraplica%TYPE) IS
          SELECT 1
					  FROM craprda rda
					 WHERE rda.cdcooper = pr_cdcooper
					   AND rda.nrdconta = pr_nrdconta
						 AND rda.nraplica = pr_nraplica;
				rw_craprda cr_craprda%ROWTYPE;
										 
				-- Cursor para verificar existencia de nova aplicacao
				CURSOR cr_craprac(pr_cdcooper IN craprac.cdcooper%TYPE
				                 ,pr_nrdconta IN craprac.nrdconta%TYPE
												 ,pr_nraplica IN craprac.nraplica%TYPE) IS
          SELECT 1
					  FROM craprac rac
					 WHERE rac.cdcooper = pr_cdcooper
					   AND rac.nrdconta = pr_nrdconta
						 AND rac.nraplica = pr_nraplica;
				rw_craprac cr_craprac%ROWTYPE;
						 
        --Variaveis Locais
        vr_vlblqjud NUMBER;
        vr_vlresblq NUMBER;
        vr_vlblqapl NUMBER;
        vr_vlblqpou NUMBER;
        vr_vlsldapl NUMBER;
        vr_dsaplica VARCHAR2(100);
        vr_txaplica NUMBER(35,8);
        vr_flgslneg BOOLEAN;
        vr_flgfirst BOOLEAN;
        vr_dsorigem VARCHAR2(100);
        vr_dstransa VARCHAR2(100);
        vr_nrdrowid ROWID;
        vr_cdoperad crapope.cdoperad%type;
        vr_nmdatela crapprg.cdprogra%type; 
        vr_cdagenci crapage.cdagenci%type;
        vr_nmresage crapage.nmresage%type;
        vr_dsblqjud VARCHAR2(1000);
        vr_dsextrat VARCHAR2(1000);
        vr_dstexto_aux VARCHAR2(1000);
        vr_vlresgat NUMBER;
        vr_vlrendim NUMBER;
        vr_vldoirrf NUMBER;
        vr_tpaplica NUMBER; --> 0 - Todas, 1 - Atuais, 2 - Novas
        vr_txacumul NUMBER;                  -- Taxa acumulada durante o período total da aplicação
        vr_txacumes NUMBER;                  -- Taxa acumulada durante o mês vigente
        vr_percirrf NUMBER;
        --Tabelas de Memoria
        --vr_tab_saldo_rdc   APLI0001.typ_tab_saldo_rdca; 
        TYPE typ_tab_saldo_rdca_088 IS TABLE OF APLI0001.typ_reg_saldo_rdca INDEX BY VARCHAR2(10);
        vr_tab_saldo_rdca_088  typ_tab_saldo_rdca_088;
        vr_tab_saldo_rdca      APLI0001.typ_tab_saldo_rdca; 
        vr_tab_extrato_rdca    APLI0002.typ_tab_extrato_rdca; 
        -- Declaração da tabela que conterá os dados da aplicação
        vr_tab_aplica apli0005.typ_tab_aplicacao;
        -- Declaração da tabela que conterá os extratos das aplicações
        vr_tab_extrato apli0005.typ_tab_extrato;
        --Indices das temp-tables
        vr_index_saldo_rdca PLS_INTEGER;
        vr_index_saldo_rdca_088 VARCHAR2(10);
        vr_index_extrato_rdca PLS_INTEGER;
        --Variaveis dos Arquivos
        vr_typ_saida VARCHAR2(3);
        vr_comando   VARCHAR2(100);
        vr_nmdireto  VARCHAR2(100);
        vr_nmendter  VARCHAR2(100);
        vr_setlinha  VARCHAR2(100);
        vr_linha     VARCHAR2(1000); 
        --CLOB de Dados
        vr_clobxml088  CLOB;
        vr_dstexto     VARCHAR2(32600);
        vr_dstexto088  VARCHAR2(32600);
        --Variaveis Erro
        vr_cdcritic INTEGER;
        vr_dscritic VARCHAR2(4000);
        vr_des_reto VARCHAR2(3);                       
        --Variaveis de Excecoes
        vr_exc_erro EXCEPTION;
        vr_exc_sair EXCEPTION;
        -- controlar tag
        vr_ftagapli BOOLEAN;
        
        vr_nmaction VARCHAR2(32) := 'pc_gera_impextrda';
      BEGIN

        gene0001.pc_set_modulo(pr_module => NULL, pr_action => vr_nmaction);
        --Limpar Tabela Erro
        pr_tab_erro.DELETE;
        
        /*** Busca Saldo Bloqueado Judicial ***/
        gene0005.pc_retorna_valor_blqjud (pr_cdcooper => pr_cdcooper          --Cooperativa
                                         ,pr_nrdconta => pr_nrdconta          --Conta Corrente
                                         ,pr_nrcpfcgc => 0 /*fixo*/           --Cpf/cnpj
                                         ,pr_cdtipmov => 1 /*bloqueio*/       --Tipo Movimento
                                         ,pr_cdmodali => 2 /*Aplicacao*/ --Modalidade
                                         ,pr_dtmvtolt => pr_dtmvtolt          --Data Atual
                                         ,pr_vlbloque => vr_vlblqjud          --Valor Bloqueado
                                         ,pr_vlresblq => vr_vlresblq          --Valor Residual
                                         ,pr_dscritic => vr_dscritic);        --Critica
        --Se ocorreu erro
        IF vr_dscritic IS NOT NULL THEN
          --Levantar Excecao
          RAISE vr_exc_erro;
        END IF;

        /*** Busca valor bloquedo garantia epr ***/
        vr_vlblqapl := 0;
        vr_vlblqpou := 0;
        bloq0001.pc_calc_bloqueio_garantia( pr_cdcooper => pr_cdcooper          --Cooperativa
                                           ,pr_nrdconta => pr_nrdconta          --Conta Corrente                                        
                                           ,pr_vlbloque_aplica => vr_vlblqapl   --Valor Bloqueado aplicacao
                                           ,pr_vlbloque_poupa  => vr_vlblqpou   --Valor Bloqueado poupanca
                                           ,pr_dscritic        => vr_dscritic);  --Critica
        --Se ocorreu erro
        IF vr_dscritic IS NOT NULL THEN
          --Levantar Excecao
          RAISE vr_exc_erro;
        END IF;

        gene0001.pc_set_modulo(pr_module => NULL, pr_action => vr_nmaction);

        --Atribuir Descricao da Origem
        vr_dsorigem:= GENE0001.vr_vet_des_origens(pr_idorigem);
        --Atribuir Descricao da Transacao
        vr_dstransa:= 'Consultar dados para extrato de aplicacao.';
        --Inicializar variaveis
        vr_cdcritic:= 0;
        vr_dscritic:= NULL;
        pr_des_reto:= 'NOK';
        --Definir Operador
        IF pr_inproces = 1  THEN
          vr_cdoperad:= pr_cdoperad;
          vr_nmdatela:= pr_nmdatela;
        ELSE  
          vr_cdoperad:= '1';
          vr_nmdatela:= UPPER(pr_cdprogra);
        END IF;
        
        BEGIN
          -- Verifica se a cooperativa esta cadastrada
          OPEN cr_crapcop (pr_cdcooper => pr_cdcooper);
          FETCH cr_crapcop INTO rw_crapcop;
          -- Se não encontrar
          IF cr_crapcop%NOTFOUND THEN
            -- Fechar o cursor pois haverá raise
            CLOSE cr_crapcop;
            -- Montar mensagem de critica
            vr_cdcritic:= 651;
            RAISE vr_exc_erro;
          ELSE
            -- Apenas fechar o cursor
            CLOSE cr_crapcop;
          END IF;
          
          -- Busca do diretório base da cooperativa para a geração de relatórios
          vr_nmdireto:= gene0001.fn_diretorio(pr_tpdireto => 'C'           --> /usr/coop
                                                 ,pr_cdcooper => pr_cdcooper   --> Cooperativa
                                              ,pr_nmsubdir => 'rl');       --> Utilizaremos o rl
          

          -- Inicializar as informações do XML de dados para o relatório
          dbms_lob.createtemporary(vr_clobxml088, TRUE, dbms_lob.CALL);
          dbms_lob.open(vr_clobxml088, dbms_lob.lob_readwrite);
          --Escrever no arquivo XML
          gene0002.pc_escreve_xml(vr_clobxml088,vr_dstexto088,'<?xml version="1.0" encoding="UTF-8"?><crrl088><contas>');
          
          --Se nao rodar
          IF NOT pr_flgrodar THEN 
            --Nome Arquivo Impressao
            pr_nmarqimp:= 'crrl088.lst';
          ELSE 
            --Nome Arquivo Impressao e PDF
            vr_nmendter:= pr_dsiduser || gene0002.fn_busca_time;
            pr_nmarqimp:= vr_nmendter || '.ex';
            pr_nmarqpdf:= vr_nmendter || '.pdf';
          END IF;  
          
          gene0001.pc_set_modulo(pr_module => NULL, pr_action => vr_nmaction);

          --Selecionar associado
          OPEN cr_crapass (pr_cdcooper => pr_cdcooper
                          ,pr_nrdconta => pr_nrdconta);
          --Posicionar no proximo registro
          FETCH cr_crapass INTO rw_crapass;
          --Se nao encontrou
          IF cr_crapass%NOTFOUND THEN
            --Fechar Cursor
            CLOSE cr_crapass;
            --mensagem erro
            vr_cdcritic:= 9;
            vr_dscritic:= 'Conta/dv: '||to_char(pr_nrdconta,'fm9g999g999g0')||
                          '- Associado nao cadastrado!!!!';
            --Colocar todo o texto na variavel auxiliar
            vr_dstexto:= '<conta nrdconta="'||to_char(pr_nrdconta,'fm9g999g999g0')||
                           '" flgmensag="S" dscmensag="'||vr_dscritic||
                           '" flgmsgsld="N" dsmsgsld="" flgmsgjud="N" dsmsgjud=""'||
                           '  flgmsgrgt="N" dsmsgrgt="" flgmsgext="N" dsmsgext=""></conta>';
            --Escrever no Arquivo
            gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);

            --Popular Clob do relatorio interno
            gene0002.pc_escreve_xml(vr_clobxml088, vr_dstexto088,vr_dstexto);

            --Levantar Excecao
            RAISE vr_exc_sair;
          END IF;  
          --Fechar Cursor
          CLOSE cr_crapass;
          
          gene0001.pc_set_modulo(pr_module => NULL, pr_action => vr_nmaction);

          --Selecionar Dados Agencia
          OPEN cr_crapage(pr_cdcooper => pr_cdcooper
                         ,pr_cdagenci => rw_crapass.cdagenci);
          FETCH cr_crapage INTO rw_crapage;
          --Se nao Encontrou            
          IF cr_crapage%NOTFOUND THEN
            vr_cdagenci:= rw_crapass.cdagenci;
            vr_nmresage:= RPAD('*',15,'*');
          ELSE
            vr_cdagenci:= rw_crapage.cdagenci;
            vr_nmresage:= rw_crapage.nmresage;
          END IF;   
          -- Fechar o cursor
          CLOSE cr_crapage;

          --Limpar tabelas memoria
          vr_tab_saldo_rdca.DELETE;
					
          -- Se numero de aplicação for 0
          IF pr_nraplica = 0 THEN
              -- Todas as aplicações
              vr_tpaplica := 0;
          ELSE
						
            -- Verifica se é uma aplicação atual
            OPEN cr_craprda(pr_cdcooper => pr_cdcooper,
                                              pr_nrdconta => pr_nrdconta,
                                              pr_nraplica => pr_nraplica);
              FETCH cr_craprda INTO rw_craprda;
              IF cr_craprda%FOUND THEN
                  -- Aplicação atual
                  vr_tpaplica := 1;					
                  CLOSE cr_craprda;
              ELSE
							
            CLOSE cr_craprda;
                -- Verifica se é uma nova aplicação
                  OPEN cr_craprac(pr_cdcooper => pr_cdcooper,
                                                  pr_nrdconta => pr_nrdconta,
                                                  pr_nraplica => pr_nraplica);
                  FETCH cr_craprac INTO rw_craprac;
                  IF cr_craprac%FOUND THEN
                      -- Nova Aplicação 
                    vr_tpaplica := 2;
                    CLOSE cr_craprac;
                  ELSE
                  CLOSE cr_craprac;                								
                    vr_cdcritic := 426; -- Aplicação não encontrada
                    vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
                    -- Gera crítica
                    RAISE vr_exc_erro;							
								
                  END IF;
              END IF;

			END IF;
					
            IF vr_tpaplica IN (0,2) THEN -- Todas ou novas
              -- Consulta de novas aplicacoes
              apli0005.pc_busca_aplicacoes(pr_cdcooper   => pr_cdcooper     --> Código da Cooperativa
                                                                      ,pr_cdoperad   => pr_cdoperad     --> Código do Operador
                                                                      ,pr_nmdatela   => pr_nmdatela     --> Nome da Tela
                                                                      ,pr_idorigem   => pr_idorigem     --> Identificador de Origem (1 - AYLLOS / 2 - CAIXA / 3 - INTERNET / 4 - TAA / 5 - AYLLOS WEB / 6 - URA                  
                                                                      ,pr_nrdconta   => pr_nrdconta     --> Número da Conta
                                                                      ,pr_idseqttl   => pr_idseqttl     --> Titular da Conta
                                                                      ,pr_nraplica   => pr_nraplica     --> Número da Aplicação - Parâmetro Opcional
                                                                      ,pr_cdprodut   => 0               --> Código do Produto  Parâmetro Opcional 
                                                                      ,pr_dtmvtolt   => pr_dtmvtolt     --> Data de Movimento
                                                                      ,pr_idconsul   => 5               --> Identificador de Consulta (0  Ativas / 1  Encerradas / 2  Todas)
                                                                      ,pr_idgerlog   => 0               --> Identificador de Log (0  Não / 1  Sim) 																 
                                                                      ,pr_cdcritic   => vr_cdcritic     --> Código da crítica
                                                                      ,pr_dscritic   => vr_dscritic     --> Descrição da crítica
                                                                      ,pr_tab_aplica => vr_tab_aplica); --> Tabela com os dados da aplicação );

              IF vr_dscritic IS NOT NULL THEN
                  --Colocar todo o texto na variavel auxiliar
                  vr_dstexto:= '<conta nrdconta="'||to_char(pr_nrdconta,'fm9g999g999g0')||
                                               '" flgmensag="S" dscmensag="'||vr_dscritic||
                                               '" flgmsgsld="N" dsmsgsld="" flgmsgjud="N" dsmsgjud=""'||
                                               '  flgmsgrgt="N" dsmsgrgt="" flgmsgext="N" dsmsgext=""></conta>';
                  --Escrever no Arquivo
                  gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);

                  --Popular Clob do relatorio interno
                  gene0002.pc_escreve_xml(vr_clobxml088,vr_dstexto088,vr_dstexto);

                  --Levantar Excecao
                  RAISE vr_exc_sair;          
              END IF;
            END IF;
					
            gene0001.pc_set_modulo(pr_module => NULL, pr_action => vr_nmaction);

            IF vr_tpaplica IN (0,1) THEN -- Todas ou atuais

                --Obtem Dados Aplicacoes
                APLI0002.pc_obtem_dados_aplicacoes (pr_cdcooper    => pr_cdcooper          --Codigo Cooperativa
                                                   ,pr_cdagenci    => pr_cdagenci          --Codigo Agencia
                                                   ,pr_nrdcaixa    => pr_nrdcaixa          --Numero do Caixa
                                                   ,pr_cdoperad    => pr_cdoperad          --Codigo Operador
                                                   ,pr_nmdatela    => 'IMPRES'             --Nome da Tela
                                                   ,pr_idorigem    => pr_idorigem          --Origem dos Dados
                                                   ,pr_nrdconta    => pr_nrdconta          --Numero da Conta do Associado
                                                   ,pr_idseqttl    => pr_idseqttl          --Sequencial do Titular
                                                   ,pr_nraplica    => pr_nraplica          --Numero da Aplicacao
                                                   ,pr_cdprogra    => 'IMPRES'             --Nome da Tela
                                                   ,pr_flgerlog    => 0 /*FALSE*/          --Imprimir log
                                                   ,pr_dtiniper    => NULL                 --Data Inicio periodo   
                                                   ,pr_dtfimper    => NULL                 --Data Final periodo
                                                   ,pr_vlsldapl    => vr_vlsldapl          --Saldo da Aplicacao
                                                   ,pr_tab_saldo_rdca  => vr_tab_saldo_rdca    --Tipo de tabela com o saldo RDCA
                                                   ,pr_des_reto    => vr_des_reto          --Retorno OK ou NOK
                                                   ,pr_tab_erro    => pr_tab_erro);        --Tabela de Erros
                --Se retornou erro
                IF vr_des_reto = 'NOK' THEN
                  --Se possuir erro na temp-table
                  IF pr_tab_erro.COUNT > 0 THEN
                      vr_dscritic:= 'Conta/dv: '||to_char(pr_nrdconta,'fm99g999g999g9')||' - '||
                                                  pr_tab_erro(pr_tab_erro.FIRST).dscritic;
                  ELSE
                      vr_dscritic:= 'Conta/dv: '||to_char(pr_nrdconta,'fm99g999g999g9')||' - '||
                                                  'Nao foi possivel carregar o extrato.';
                  END IF;                  
                  --Colocar todo o texto na variavel auxiliar
                  vr_dstexto:= '<conta nrdconta="'||to_char(pr_nrdconta,'fm9g999g999g0')||
                                               '" flgmensag="S" dscmensag="'||vr_dscritic||
                                               '" flgmsgsld="N" dsmsgsld="" flgmsgjud="N" dsmsgjud=""'||
                                               '  flgmsgrgt="N" dsmsgrgt="" flgmsgext="N" dsmsgext=""></conta>';
                  --Escrever no Arquivo
                  gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);

                  --Popular Clob do relatorio interno
                  gene0002.pc_escreve_xml(vr_clobxml088,vr_dstexto088,vr_dstexto);

                  --Levantar Excecao
                  RAISE vr_exc_sair;          
                END IF;
            END IF;
					
            gene0001.pc_set_modulo(pr_module => NULL, pr_action => vr_nmaction);

            -- Montagem do XML com todas as aplicacoes que deverao ser exibidas na tela atenda/impres
            IF vr_tab_aplica.COUNT > 0 THEN
                -- Percorre todas as aplicações de captação da conta											 
                FOR vr_contador IN vr_tab_aplica.FIRST..vr_tab_aplica.LAST LOOP

                  -- Proximo indice da tabela vr_saldo_rdca
                  vr_index_saldo_rdca := vr_tab_saldo_rdca.COUNT + 1;

                  vr_tab_saldo_rdca(vr_index_saldo_rdca).DTMVTOLT := vr_tab_aplica(vr_contador).DTMVTOLT;
                  vr_tab_saldo_rdca(vr_index_saldo_rdca).NRAPLICA := vr_tab_aplica(vr_contador).NRAPLICA;
                  vr_tab_saldo_rdca(vr_index_saldo_rdca).QTDIAAPL := vr_tab_aplica(vr_contador).QTDIAUTI;							
                  vr_tab_saldo_rdca(vr_index_saldo_rdca).QTDIAUTI := vr_tab_aplica(vr_contador).QTDIACAR;
                  vr_tab_saldo_rdca(vr_index_saldo_rdca).DSHISTOR := vr_tab_aplica(vr_contador).DSHISTOR;
                  vr_tab_saldo_rdca(vr_index_saldo_rdca).VLAPLICA := NVL(vr_tab_aplica(vr_contador).VLAPLICA,0);
                  vr_tab_saldo_rdca(vr_index_saldo_rdca).NRDOCMTO := vr_tab_aplica(vr_contador).NRDOCMTO;
                  vr_tab_saldo_rdca(vr_index_saldo_rdca).DTVENCTO := vr_tab_aplica(vr_contador).DTVENCTO;
                  vr_tab_saldo_rdca(vr_index_saldo_rdca).INDEBCRE := vr_tab_aplica(vr_contador).INDEBCRE;
                  vr_tab_saldo_rdca(vr_index_saldo_rdca).VLLANMTO := NVL(vr_tab_aplica(vr_contador).VLLANMTO,0);
                  vr_tab_saldo_rdca(vr_index_saldo_rdca).SLDRESGA := NVL(vr_tab_aplica(vr_contador).SLDRESGA,0);
                  vr_tab_saldo_rdca(vr_index_saldo_rdca).CDDRESGA := vr_tab_aplica(vr_contador).CDDRESGA;
                  vr_tab_saldo_rdca(vr_index_saldo_rdca).DTRESGAT := vr_tab_aplica(vr_contador).DTRESGAT;
                  vr_tab_saldo_rdca(vr_index_saldo_rdca).DSSITAPL := vr_tab_aplica(vr_contador).DSSITAPL;
                  vr_tab_saldo_rdca(vr_index_saldo_rdca).TXAPLMAX := NVL(vr_tab_aplica(vr_contador).TXAPLICA,0); 
                  vr_tab_saldo_rdca(vr_index_saldo_rdca).TXAPLMIN := NVL(vr_tab_aplica(vr_contador).TXAPLICA,0); 
                  vr_tab_saldo_rdca(vr_index_saldo_rdca).CDPRODUT := NVL(vr_tab_aplica(vr_contador).CDPRODUT,0);
                  vr_tab_saldo_rdca(vr_index_saldo_rdca).NMPRODUT := vr_tab_aplica(vr_contador).NMPRODUT;
                  vr_tab_saldo_rdca(vr_index_saldo_rdca).IDTIPAPL := vr_tab_aplica(vr_contador).IDTIPAPL;							
                  vr_tab_saldo_rdca(vr_index_saldo_rdca).NMDINDEX := TRIM(vr_tab_aplica(vr_contador).NMDINDEX);
                  vr_tab_saldo_rdca(vr_index_saldo_rdca).IDTXFIXA := NVL(vr_tab_aplica(vr_contador).IDTXFIXA,0);							
                  vr_tab_saldo_rdca(vr_index_saldo_rdca).PERCIRRF := NVL(vr_tab_aplica(vr_contador).PERCIRRF,0);
                  vr_tab_saldo_rdca(vr_index_saldo_rdca).VLSLDRGT := NVL(vr_tab_aplica(vr_contador).VLSLDRGT,0);
                  vr_tab_saldo_rdca(vr_index_saldo_rdca).VLSDRDAD := NVL(vr_tab_aplica(vr_contador).VLSLDTOT,0);
				  vr_tab_saldo_rdca(vr_index_saldo_rdca).DTCARENC := vr_tab_aplica(vr_contador).DTCARENC;
                END LOOP;
            END IF;	
										
          -- Iniciar variavel de controle
          vr_ftagapli := FALSE;
              
          --Modificar Ordem da temp-table para break-by nraplica.
          vr_index_saldo_rdca:= vr_tab_saldo_rdca.FIRST;
          WHILE vr_index_saldo_rdca IS NOT NULL LOOP
            --Filtrar relatorios
            IF pr_tprelato IN (1,2) OR
               (pr_tprelato = 3 AND nvl(vr_tab_saldo_rdca(vr_index_saldo_rdca).vlsdrdad,0) > 0) OR
               (pr_tprelato = 4 AND nvl(vr_tab_saldo_rdca(vr_index_saldo_rdca).vlsdrdad,0) = 0) THEN 

              --Montar novo indice
              vr_index_saldo_rdca_088:= lpad(vr_tab_saldo_rdca(vr_index_saldo_rdca).nraplica,10,'0');
              vr_tab_saldo_rdca_088(vr_index_saldo_rdca_088):= vr_tab_saldo_rdca(vr_index_saldo_rdca);
            END IF;  
            --Proximo Registro
            vr_index_saldo_rdca:= vr_tab_saldo_rdca.NEXT(vr_index_saldo_rdca);
          END LOOP; 
          --Marcar primeiro registro
          vr_flgfirst:= TRUE;
          --Percorrer os registros RDCA ordenados por nraplica.
          vr_index_saldo_rdca_088:= vr_tab_saldo_rdca_088.FIRST;
          WHILE vr_index_saldo_rdca_088 IS NOT NULL LOOP
            --Limpar tabela extrato rdca
            vr_tab_extrato_rdca.DELETE;
            IF vr_tab_saldo_rdca_088(vr_index_saldo_rdca_088).idtipapl = 'N' THEN
							
              -- Procedure para buscar informações da aplicação
                APLI0005.pc_busca_extrato_aplicacao(pr_cdcooper => pr_cdcooper,        -- Código da Cooperativa
                                                    pr_cdoperad => pr_cdoperad,        -- Código do Operador
                                                    pr_nmdatela => pr_nmdatela,        -- Nome da Tela
                                                    pr_idorigem => pr_idorigem,        -- Identificador de Origem (1 - AYLLOS / 2 - CAIXA / 3 - INTERNET / 4 - TAA / 5 - AYLLOS WEB / 6 - URA
                                                    pr_nrdconta => pr_nrdconta,        -- Número da Conta
                                                    pr_idseqttl => pr_idseqttl,        -- Titular da Conta
                                                    pr_dtmvtolt => pr_dtmvtolt,        -- Data de Movimento
                                                    pr_nraplica => vr_tab_saldo_rdca_088(vr_index_saldo_rdca_088).nraplica,        -- Número da Aplicação
                                                    pr_idlstdhs => 0,                  -- Identificador de Listagem de Todos Históricos (Fixo na chamada, 0  Não / 1  Sim)
                                                    pr_idgerlog => 0,                  -- Identificador de Log (Fixo na chamada, 0  Não / 1  Sim)
                                                    pr_tab_extrato => vr_tab_extrato,  -- PLTable com os dados de extrato
                                                    pr_vlresgat => vr_vlresgat,        -- Valor de resgate
                                                    pr_vlrendim => vr_vlrendim,        -- Valor de rendimento
                                                    pr_vldoirrf => vr_vldoirrf,        -- Valor do IRRF
                                                    pr_txacumul => vr_txacumul,        -- Taxa acumulada durante o período total da aplicação
                                                    pr_txacumes => vr_txacumes,        -- Taxa acumulada durante o mês vigente
                                                    pr_percirrf => vr_percirrf,         -- Valor de aliquota de IR
                                                    pr_cdcritic => vr_cdcritic,        -- Código da crítica
                                                    pr_dscritic => vr_dscritic);       -- Descrição da crítica

                -- Se retornou alguma critica
                IF vr_cdcritic <> 0 OR TRIM(vr_dscritic) IS NOT NULL THEN
                    --Colocar todo o texto na variavel auxiliar
                    vr_dstexto:= '<conta nrdconta="'||to_char(pr_nrdconta,'fm9g999g999g0')||
                                             '" flgmensag="S" dscmensag="'||vr_dscritic||
                                             '" flgmsgsld="N" dsmsgsld="" flgmsgjud="N" dsmsgjud=""'||
                                             '  flgmsgrgt="N" dsmsgrgt=""></conta>';
                    --Escrever no Arquivo
                    gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);

                    --Popular Clob do relatorio interno
                    gene0002.pc_escreve_xml(vr_clobxml088,vr_dstexto088,vr_dstexto);

                    --Levantar Excecao
                    RAISE vr_exc_sair;          
                END IF;
						
                IF vr_tab_extrato.COUNT > 0 THEN
                    -- Percorre todos os registros da aplicação											 
                    FOR vr_contador IN vr_tab_extrato.FIRST..vr_tab_extrato.LAST LOOP

                        -- Proximo indice da tabela vr_tab_extrato
                        vr_index_extrato_rdca:= vr_tab_extrato_rdca.COUNT + 1;

                        vr_tab_extrato_rdca(vr_index_extrato_rdca).dtmvtolt := vr_tab_extrato(vr_contador).DTMVTOLT;
                        vr_tab_extrato_rdca(vr_index_extrato_rdca).dshistor := vr_tab_extrato(vr_contador).DSHISTOR;
                        vr_tab_extrato_rdca(vr_index_extrato_rdca).nrdocmto := vr_tab_extrato(vr_contador).NRDOCMTO;
                        vr_tab_extrato_rdca(vr_index_extrato_rdca).indebcre := vr_tab_extrato(vr_contador).INDEBCRE;
                        vr_tab_extrato_rdca(vr_index_extrato_rdca).vllanmto := NVL(vr_tab_extrato(vr_contador).VLLANMTO,0);
                        vr_tab_extrato_rdca(vr_index_extrato_rdca).vlsldapl := NVL(vr_tab_extrato(vr_contador).VLSLDTOT,0);
                        vr_tab_extrato_rdca(vr_index_extrato_rdca).txaplica := NVL(vr_tab_extrato(vr_contador).TXLANCTO,0);
                        vr_tab_extrato_rdca(vr_index_extrato_rdca).dsaplica := vr_tab_saldo_rdca_088(vr_index_saldo_rdca_088).DSAPLICA;
                        vr_tab_extrato_rdca(vr_index_extrato_rdca).cdagenci := vr_cdagenci;
                        vr_tab_extrato_rdca(vr_index_extrato_rdca).vlpvlrgt := vr_vlresgat;
                        vr_tab_extrato_rdca(vr_index_extrato_rdca).cdhistor := vr_tab_extrato(vr_contador).CDHISTOR;
                        vr_tab_extrato_rdca(vr_index_extrato_rdca).tpaplrdc := 1;
                        vr_tab_extrato_rdca(vr_index_extrato_rdca).dsextrat := vr_tab_extrato(vr_contador).DSEXTRAT;

                    END LOOP;
                END IF;	
						
            ELSE
              --Consultar Extrato RDCA
              APLI0002.pc_consulta_extrato_rdca (pr_cdcooper    => pr_cdcooper       --Codigo Cooperativa
                                                ,pr_cdageope    => pr_cdagenci       --Codigo Agencia
                                                ,pr_nrcxaope    => pr_nrdcaixa       --Numero do Caixa
                                                ,pr_cdoperad    => pr_cdoperad       --Codigo Operador
                                                ,pr_nmdatela    => 'IMPRES'          --Nome da Tela
                                                ,pr_nrdconta    => pr_nrdconta       --Numero da Conta do Associado
                                                ,pr_idseqttl    => pr_idseqttl       --Sequencial do Titular
                                                ,pr_dtmvtolt    => pr_dtmvtolt       --Data do movimento
                                                ,pr_nraplica    => vr_tab_saldo_rdca_088(vr_index_saldo_rdca_088).nraplica       --Numero Aplicacao
                                                ,pr_tpaplica    => 0                 --Tipo Aplicacao
                                                ,pr_vlsdrdca    => vr_vlsldapl       --Valor Saldo RDCA
                                                ,pr_dtiniper    => NULL              --Periodo inicial
                                                ,pr_dtfimper    => NULL              --Periodo Final
                                                ,pr_cdprogra    => 'IMPRES'          --Nome da Tela
                                                ,pr_idorigem    => pr_idorigem       --Origem dos Dados
                                                ,pr_flgerlog    => FALSE             --Imprimir log
                                                ,pr_tab_extrato_rdca => vr_tab_extrato_rdca  --Tabela Extrato Aplicacao RDCA
                                                ,pr_des_reto     => vr_des_reto        --Retorno OK ou NOK
                                                ,pr_tab_erro     => pr_tab_erro);      --Tabela de Erros
              --Se retornou erro
              IF vr_des_reto = 'NOK' THEN
                  --Se possuir erro na temp-table
                  IF pr_tab_erro.COUNT > 0 THEN
                      vr_dscritic:= 'Conta/dv: '||to_char(pr_nrdconta,'fm99g999g999g9')||' - '||
                                                  pr_tab_erro(pr_tab_erro.FIRST).dscritic;
                  ELSE
                      vr_dscritic:= 'Conta/dv: '||to_char(pr_nrdconta,'fm99g999g999g9')||' - '||
                                                  'Nao foi possivel carregar o extrato.';
                  END IF;                  
                  --Colocar todo o texto na variavel auxiliar
                  vr_dstexto:= '<conta nrdconta="'||to_char(pr_nrdconta,'fm9g999g999g0')||
                                           '" flgmensag="S" dscmensag="'||vr_dscritic||
                                           '" flgmsgsld="N" dsmsgsld="" flgmsgjud="N" dsmsgjud=""'||
                                           '  flgmsgrgt="N" dsmsgrgt=""></conta>';
                  --Escrever no Arquivo
                  gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);

                  --Popular Clob do relatorio interno
                  gene0002.pc_escreve_xml(vr_clobxml088,vr_dstexto088,vr_dstexto);

                  --Levantar Excecao
                  RAISE vr_exc_sair;          
              END IF; 
            END IF;							
             
            --Primeiro Registro - Criar tag conta
            IF vr_flgfirst THEN
              --marcar que já processou primeiro registro
              vr_flgfirst:= FALSE;
              --Verificar se possui bloqueio judicial
              vr_dsextrat:= ' flgmsgjud="S" dsmsgjud="VALOR BLOQUEADO JUDICIALMENTE R$        '||
                              to_char(nvl(vr_vlblqjud,0),'fm999g999g999g990d00')||'"'; 
              
              --Verificar se possui bloqueio por garantia de aplicacao

                vr_dsextrat:= vr_dsextrat ||' flgmsggar="S" dsmsggar="VALOR BLOQUEADO COBERTURA GARANTIA R$ '||
                            to_char(nvl(vr_vlblqapl,0),'fm999g999g999g990d00')||'"'; 
               
              --Montar texto
              vr_dstexto:= '<conta nrdconta="'||to_char(rw_crapass.nrdconta,'fm9g999g999g0')||
                             '" nmprimtl="'||rw_crapass.nmprimtl||
                             '" cdagenci="'||vr_cdagenci||'" nmresage="' ||vr_nmresage||
                             '" flgmensag="N" dscmensag=""'||vr_dsextrat||'><aplicacoes>';
              --Escrever no Arquivo
              gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);

              --Popular Clob do relatorio interno
              gene0002.pc_escreve_xml(vr_clobxml088, vr_dstexto088,vr_dstexto);
              -- marcar como abriu a flag de "Aplicacoes", para controlar o fechamento
              vr_ftagapli := TRUE;
              
            END IF; --vr_flgfirst (tag conta)
           
            --Verificar se tem saldo negativo
            vr_index_extrato_rdca:= vr_tab_extrato_rdca.FIRST;
            vr_flgslneg:= FALSE;
            WHILE vr_index_extrato_rdca IS NOT NULL LOOP
              --Se for negativo
              IF nvl(vr_tab_extrato_rdca(vr_index_extrato_rdca).vlsldapl,0) < 0 THEN 
                vr_flgslneg:= TRUE;
                EXIT;
              END IF;  
              --Proximo registro
              vr_index_extrato_rdca:= vr_tab_extrato_rdca.NEXT(vr_index_extrato_rdca);    
            END LOOP; 
            
            --verificar se é o primeiro registro da aplicacao
            IF vr_tab_extrato_rdca.COUNT > 0 AND 
              (vr_index_saldo_rdca_088 = vr_tab_saldo_rdca_088.FIRST OR
              vr_tab_saldo_rdca_088(vr_index_saldo_rdca_088).nraplica <> vr_tab_saldo_rdca_088(vr_tab_saldo_rdca_088.PRIOR(vr_index_saldo_rdca_088)).nraplica) THEN
              
              --Verificar se possui saldo para resgate
              IF nvl(vr_tab_saldo_rdca_088(vr_index_saldo_rdca_088).sldresga,0) <> 0 THEN
                --Mensagem Resgate/Saldo Negativo
                vr_dstexto_aux:= ' flgmsgrgt="S" dsmsgrgt="';
                --Se for rdcpre ou rdcpos
                CASE vr_tab_saldo_rdca_088(vr_index_saldo_rdca_088).tpaplrdc
                  WHEN 1 THEN
                    vr_dstexto_aux:= vr_dstexto_aux||
                                     'Saldo disponivel para resgate: R$ '||to_char(GREATEST(0,vr_tab_saldo_rdca_088(vr_index_saldo_rdca_088).sldresga),'fm999g999g999g990d00');
                  WHEN 2 THEN
                    vr_dstexto_aux:= vr_dstexto_aux||
                                     'Saldo liquido para resgate antes do vencimento, considerando a taxa minima'||
                                     ' da operacao:  R$ '||to_char(vr_tab_saldo_rdca_088(vr_index_saldo_rdca_088).sldresga,'fm999g999g999g990d00');                  
                  ELSE NULL;
                END CASE;

                vr_dstexto_aux:= vr_dstexto_aux || '"';
              ELSE
                vr_dstexto_aux:= ' flgmsgrgt="N" dsmsgrgt=""';                                   
              END IF;                                   
              --Se possui saldo negativo
              IF vr_flgslneg THEN
                --Mensagem Resgate/Saldo negativo
                vr_dstexto_aux:= vr_dstexto_aux||' flgmsgsld="S" dsmsgsld="Saldo(s) negativo(s) se referem a resgate(s) antes do aniversario."';
              ELSE
                vr_dstexto_aux:= vr_dstexto_aux||' flgmsgsld="N" dsmsgsld="" ';                  
              END IF;   
              --Mensagem Ha Lancamento
              vr_dstexto_aux:= vr_dstexto_aux||' flgmsglan="N" dsmsglan=""';                                  

              --RDC PRE
              IF vr_tab_saldo_rdca_088(vr_index_saldo_rdca_088).tpaplrdc = 1 AND
                 vr_tab_saldo_rdca_088(vr_index_saldo_rdca_088).idtipapl = 'A' THEN
                --Calcular taxa Aplicacao
                vr_txaplica:= (POWER((1 + gene0002.fn_char_para_number(vr_tab_saldo_rdca_088(vr_index_saldo_rdca_088).txaplmax) / 100),
                                 vr_tab_saldo_rdca_088(vr_index_saldo_rdca_088).qtdiauti) - 1) * 100;
                --Montar texto
                vr_dstexto:= '<aplicacao nraplica="'||to_char(vr_tab_saldo_rdca_088(vr_index_saldo_rdca_088).nraplica,'fm999g999g990')||
                             '" dsaplica="'||vr_tab_saldo_rdca_088(vr_index_saldo_rdca_088).dsaplica||
                             '" dtvencto="'||to_char(vr_tab_saldo_rdca_088(vr_index_saldo_rdca_088).dtvencto,'DD/MM/YYYY')||
                             '" qtdiauti="'||
                             '" dtcarenc="'||to_char(vr_tab_saldo_rdca_088(vr_index_saldo_rdca_088).dtcarenc,'DD/MM/YYYY')|| 
                             '" txaplmax="'||to_char(vr_txaplica,'fm0d000000')||'%'||
                             '" txaplmin="'||to_char(vr_tab_saldo_rdca_088(vr_index_saldo_rdca_088).txaplmin,'fm990d00')||'%'||
                             '" tpaplrdc="'||vr_tab_saldo_rdca_088(vr_index_saldo_rdca_088).tpaplrdc||                             
                             '"'||vr_dstexto_aux||'>';

              ELSIF vr_tab_saldo_rdca_088(vr_index_saldo_rdca_088).tpaplrdc = 2   OR   /*RDC POS*/
								    vr_tab_saldo_rdca_088(vr_index_saldo_rdca_088).idtipapl = 'N' THEN /* Novos produtos de captação*/
                --Montar texto
                vr_dstexto:= '<aplicacao nraplica="'||to_char(vr_tab_saldo_rdca_088(vr_index_saldo_rdca_088).nraplica,'fm999g999g990')||
                             '" dsaplica="'||vr_tab_saldo_rdca_088(vr_index_saldo_rdca_088).dsaplica||
                             '" dtvencto="'||to_char(vr_tab_saldo_rdca_088(vr_index_saldo_rdca_088).dtvencto,'DD/MM/YYYY')||
                             '" qtdiaapl="'||vr_tab_saldo_rdca_088(vr_index_saldo_rdca_088).qtdiaapl||             
                             '" qtdiauti="'||vr_tab_saldo_rdca_088(vr_index_saldo_rdca_088).qtdiauti||
                             '" dtcarenc="'||to_char(vr_tab_saldo_rdca_088(vr_index_saldo_rdca_088).dtcarenc,'DD/MM/YYYY')||
                             '" txaplmax="'||to_char(vr_tab_saldo_rdca_088(vr_index_saldo_rdca_088).txaplmax,'fm990d00')||'%'||
                             '" txaplmin="'||to_char(vr_tab_saldo_rdca_088(vr_index_saldo_rdca_088).txaplmin,'fm990d00')||'%'||
                             '" tpaplrdc="'||vr_tab_saldo_rdca_088(vr_index_saldo_rdca_088).tpaplrdc||                            
                             '" idtipapl="'||vr_tab_saldo_rdca_088(vr_index_saldo_rdca_088).idtipapl||
														 '" nmdindex="'||vr_tab_saldo_rdca_088(vr_index_saldo_rdca_088).nmdindex||
														 '" idtxfixa="'||vr_tab_saldo_rdca_088(vr_index_saldo_rdca_088).idtxfixa; /*||
                             '"'||vr_dstexto_aux||'>';                    */
								IF vr_tab_saldo_rdca_088(vr_index_saldo_rdca_088).idtipapl = 'N' THEN 
									vr_dstexto:= vr_dstexto || '" percirrf="'|| NVL((vr_tab_saldo_rdca_088(vr_index_saldo_rdca_088).percirrf/100),0)
							                            || '" vlsldrgt="'|| to_char(NVL(vr_tab_saldo_rdca_088(vr_index_saldo_rdca_088).vlsldrgt,0),'fm999g999g990d00')
																					|| '" vlresgat="'|| to_char(NVL(vr_vlresgat,0),'fm999g999g990d00')
																					|| '" vlrendim="'|| to_char(NVL(vr_vlrendim,0),'fm999g999g990d00')
																					|| '" vldoirrf="'|| to_char(NVL(vr_vldoirrf,0),'fm999g999g990d00')
                                          || '" txacumes="'|| to_char(NVL(vr_txacumes,0),'fm999g999g990d000000')
                                          || '" txacumul="'|| to_char(NVL(vr_txacumul,0),'fm999g999g990d000000')
																					|| '" vlblqjud="'|| to_char(NVL(vr_vlblqjud,0),'fm999g999g990d00');
																					
							  END IF;
								vr_dstexto:= vr_dstexto || '"'||vr_dstexto_aux||'>';
              ELSE
                --Montar texto
                vr_dstexto:= '<aplicacao nraplica="'||to_char(vr_tab_saldo_rdca_088(vr_index_saldo_rdca_088).nraplica,'fm999g999g990')||
                             '" dsaplica="'||vr_tab_saldo_rdca_088(vr_index_saldo_rdca_088).dsaplica||
                             '" dtvencto="" qtdiaapl="" qtdiauti="" txaplmax="" txaplmin="" tpaplrdc="999"'||vr_dstexto_aux||'>';               
              END IF;                  
              --Escrever no Arquivo
              gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);

              --Popular Clob do relatorio interno
              gene0002.pc_escreve_xml(vr_clobxml088, vr_dstexto088,vr_dstexto);

            ELSIF vr_tab_extrato_rdca.COUNT = 0 THEN
              --Mensagem Resgate e Saldo
              vr_dstexto_aux:= ' flgmsgsld="N" dsmsgsld="" flgmsgrgt="N" dsmsgrgt=""';
              --Mensagem Nao Ha lancamento no mes
              vr_dstexto_aux:= vr_dstexto_aux||' flgmsglan="S" dsmsglan="** NAO HA LANCAMENTOS NO MES **"';
              --Montar texto
              vr_dstexto:= '<aplicacao nraplica="'||to_char(vr_tab_saldo_rdca_088(vr_index_saldo_rdca_088).nraplica,'fm999g999g990')||
                           '" dsaplica="'||vr_tab_saldo_rdca_088(vr_index_saldo_rdca_088).dsaplica||
                           '" dtvencto="" qtdiaapl="" qtdiauti="" txaplmax="" txaplmin="" tpaplrdc="999"'||vr_dstexto_aux||'>';                           
              vr_dstexto:= vr_dstexto||
                  '<det>' ||
                    '<dtmvtolt></dtmvtolt>'||
                    '<dsextrat></dsextrat>'||
                    '<nrdocmto></nrdocmto>'||
                    '<vllanmto></vllanmto>'||
                    '<indebcre></indebcre>'||
                    '<txaplica></txaplica>'||
                    '<vlsldapl></vlsldapl>'||
                  '</det></aplicacao>';             
              --Escrever no Arquivo
              gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);

              --Popular Clob do relatorio interno
              gene0002.pc_escreve_xml(vr_clobxml088, vr_dstexto088,vr_dstexto);

            END IF; --Primeira Ocorrencia da aplicacao

            --Percorrer todos os extratos rdca
            vr_index_extrato_rdca:= vr_tab_extrato_rdca.FIRST;
            WHILE vr_index_extrato_rdca IS NOT NULL LOOP
              --Se a taxa aplicacap > 0 
              IF vr_tab_extrato_rdca(vr_index_extrato_rdca).tpaplrdc NOT IN (1,2) AND
                vr_tab_extrato_rdca(vr_index_extrato_rdca).txaplica > 0 THEN 
                vr_txaplica:= vr_tab_extrato_rdca(vr_index_extrato_rdca).txaplica;
              ELSE
                vr_txaplica:= NULL;
              END IF;                  
              --Montar texto
              vr_dstexto:= 
                  '<det>' ||
                    '<dtmvtolt>' || CASE vr_tab_extrato_rdca(vr_index_extrato_rdca).tpaplrdc 
                                      WHEN 1 THEN to_char(vr_tab_extrato_rdca(vr_index_extrato_rdca).dtmvtolt,'DD/MM/YYYY') 
                                      WHEN 2 THEN to_char(vr_tab_extrato_rdca(vr_index_extrato_rdca).dtmvtolt,'DD/MM/YYYY') 
                                      ELSE        to_char(vr_tab_extrato_rdca(vr_index_extrato_rdca).dtmvtolt,'DD/MM/YY')
                                      END ||'</dtmvtolt>' ||
                    '<dsextrat>' || substr(vr_tab_extrato_rdca(vr_index_extrato_rdca).dsextrat,1,22) || '</dsextrat>' ||
                    '<nrdocmto>' || to_char(vr_tab_extrato_rdca(vr_index_extrato_rdca).nrdocmto,'fm99g999g990') || '</nrdocmto>' ||
                    '<vllanmto>' || to_char(vr_tab_extrato_rdca(vr_index_extrato_rdca).vllanmto,'fm99999g999g990d00')||'</vllanmto>' ||
                    '<indebcre>' || vr_tab_extrato_rdca(vr_index_extrato_rdca).indebcre||'</indebcre>' ||
                    '<txaplica>' || to_char(vr_txaplica,'fm990d000000') ||'</txaplica>' ||
                    '<vlsldapl>' || to_char(vr_tab_extrato_rdca(vr_index_extrato_rdca).vlsldapl,'fm99g999g999g990d00mi')||'</vlsldapl>' ||
                  '</det>' || CHR(13);
              --Escrever no Arquivo
              gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);

              --Popular Clob do relatorio interno
              gene0002.pc_escreve_xml(vr_clobxml088, vr_dstexto088,vr_dstexto);

              --Proximo registro
              vr_index_extrato_rdca:= vr_tab_extrato_rdca.NEXT(vr_index_extrato_rdca);    
            END LOOP;  
            
            --verificar se é o ultimo registro da aplicacao
            IF vr_tab_extrato_rdca.COUNT > 0 AND 
               (vr_index_saldo_rdca_088 = vr_tab_saldo_rdca_088.LAST OR
               vr_tab_saldo_rdca_088(vr_index_saldo_rdca_088).nraplica <> vr_tab_saldo_rdca_088(vr_tab_saldo_rdca_088.NEXT(vr_index_saldo_rdca_088)).nraplica) THEN
              --Montar texto
              vr_dstexto:= '</aplicacao>';
              --Escrever no Arquivo
              gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);

              --Popular Clob do relatorio interno
              gene0002.pc_escreve_xml(vr_clobxml088, vr_dstexto088,vr_dstexto);

            END IF;
            --Proximo Registro
            vr_index_saldo_rdca_088:= vr_tab_saldo_rdca_088.NEXT(vr_index_saldo_rdca_088);
          END LOOP; --vr_index_saldo_rdca_088
          
          -- Fechar flag de "Aplicacoes" apenas se entou no loop
          IF vr_ftagapli THEN
            --Montar texto
            vr_dstexto:= '</aplicacoes></conta>';
            --Escrever no Arquivo
            gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);
          END IF;
          
          IF pr_flgrodar = TRUE THEN
            --Finaliza TAG Extratos e Conta
            gene0002.pc_escreve_xml(vr_clobxml088,vr_dstexto088,'</aplicacoes></conta></contas></crrl088>',TRUE);

            -- Gera relatório 088
            gene0002.pc_solicita_relato(pr_cdcooper  => pr_cdcooper                   --> Cooperativa conectada
                                       ,pr_cdprogra  => pr_cdprogra                   --> Programa chamador
                                       ,pr_dtmvtolt  => pr_dtmvtolt                   --> Data do movimento atual
                                       ,pr_dsxml     => vr_clobxml088                 --> Arquivo XML de dados
                                       ,pr_dsxmlnode => '/crrl088/contas/conta'       --> Nó base do XML para leitura dos dados
                                       ,pr_dsjasper  => 'crrl088.jasper'              --> Arquivo de layout do iReport
                                       ,pr_dsparams  => NULL                          --> Sem parâmetros
                                       ,pr_cdrelato => 625                            --> Código fixo para o relatório (nao busca pelo sqcabrel)                                       
                                       ,pr_dsarqsaid => vr_nmdireto||'/'||pr_nmarqimp  --> Arquivo final com o path
                                       ,pr_qtcoluna  => 80                            --> Colunas do relatorio
                                       ,pr_flg_gerar => 'S'                           --> Geraçao na hora
                                       ,pr_flg_impri => 'N'                           --> Chamar a impressão (Imprim.p)
                                       ,pr_nmformul  => NULL                          --> Nome do formulário para impressão
                                       ,pr_nrcopias  => 1                             --> Número de cópias
                                       ,pr_sqcabrel  => 1                             --> Qual a seq do cabrel
                                       ,pr_flappend  => 'S'                           --> Fazer append do relatorio se ja existir
                                       ,pr_des_erro  => vr_dscritic);                 --> Saída com erro
            
            --Se ocorreu erro no relatorio
            IF vr_dscritic IS NOT NULL THEN
              --Levantar Excecao
              RAISE vr_exc_erro;
            END IF; 

            --Fechar Clob e Liberar Memoria  
            dbms_lob.close(vr_clobxml088);
            dbms_lob.freetemporary(vr_clobxml088); 

            --Ayllos Web
            IF pr_idorigem = 5 THEN
              --Enviar arquivo para Web
              GENE0002.pc_envia_arquivo_web (pr_cdcooper => pr_cdcooper        --Codigo Cooperativa
                                   ,pr_cdagenci => pr_cdagenci        --Codigo Agencia
                                   ,pr_nrdcaixa => pr_nrdcaixa        --Numero do Caixa
                                   ,pr_nmarqimp => pr_nmarqimp        --Nome Arquivo Impressao
                                   ,pr_nmdireto => vr_nmdireto        --Nome Diretorio
                                   ,pr_nmarqpdf => pr_nmarqpdf        --Nome Arquivo PDF
                                   ,pr_des_reto => pr_des_reto        --Retorno OK/NOK
                                   ,pr_tab_erro => pr_tab_erro);      --tabela erro
              --Se ocorreu erro
              IF pr_des_reto <> 'OK' THEN
                --Se tem erro na tabela 
                IF pr_tab_erro.COUNT > 0 THEN
                  vr_dscritic:= pr_tab_erro(pr_tab_erro.FIRST).dscritic;
                ELSE
                  vr_dscritic:= 'Erro ao enviar arquivo para web.';  
                END IF; 
                --Sair 
                RAISE vr_exc_sair;
              END IF; 
            END IF; --pr_idorigem = 5              
          END IF; --pr_flgrodar = true
          
          --Retorno com Sucesso
          pr_des_reto:= 'OK';
        EXCEPTION
          WHEN vr_exc_sair THEN
           pr_des_reto:= 'OK';
           vr_cdcritic:= NULL;
           vr_dscritic:= NULL;
          WHEN vr_exc_erro THEN
            RAISE vr_exc_erro;
        END;
          
        --Se nao tem erro na temp-table 
        IF pr_tab_erro.COUNT = 0 AND (vr_dscritic IS NOT NULL OR nvl(vr_cdcritic,0) <> 0) THEN
          -- Chamar rotina de gravacao de erro
          gene0001.pc_gera_erro (pr_cdcooper => pr_cdcooper
                                ,pr_cdagenci => pr_cdagenci
                                ,pr_nrdcaixa => pr_nrdcaixa
                                ,pr_nrsequen => 1  /** Sequencia **/
                                ,pr_cdcritic => vr_cdcritic
                                ,pr_dscritic => vr_dscritic
                                ,pr_tab_erro => pr_tab_erro);
        END IF;
        --Escrever erro no Log
        IF pr_flgerlog THEN  
          --Executar rotina geracao log
          gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                              ,pr_cdoperad => vr_cdoperad
                              ,pr_dscritic => vr_dscritic
                              ,pr_dsorigem => vr_dsorigem
                              ,pr_dstransa => vr_dstransa
                              ,pr_dttransa => TRUNC(SYSDATE)
                              ,pr_flgtrans => (CASE pr_des_reto WHEN 'OK' THEN 1 ELSE 0 END)
                              ,pr_hrtransa => gene0002.fn_busca_time
                              ,pr_idseqttl => 1
                              ,pr_nmdatela => vr_nmdatela
                              ,pr_nrdconta => pr_nrdconta
                              ,pr_nrdrowid => vr_nrdrowid);
        END IF;    
        gene0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);    
      EXCEPTION
        WHEN vr_exc_erro THEN
          -- Retorno não OK
          pr_des_reto := 'NOK';
          -- Chamar rotina de gravação de erro
          gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                               ,pr_cdagenci => pr_cdagenci
                               ,pr_nrdcaixa => pr_nrdcaixa
                               ,pr_nrsequen => 1 --> Fixo
                               ,pr_cdcritic => 0 --> Critica 0
                               ,pr_dscritic => vr_dscritic
                               ,pr_tab_erro => pr_tab_erro);
          -- Se foi solicitado geração de LOG
          IF pr_flgerlog THEN
            -- Chamar geração de LOG
            gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                                ,pr_cdoperad => pr_cdoperad
                                ,pr_dscritic => vr_dscritic
                                ,pr_dsorigem => vr_dsorigem
                                ,pr_dstransa => vr_dstransa
                                ,pr_dttransa => TRUNC(SYSDATE)
                                ,pr_flgtrans => 0 --> FALSE
                                ,pr_hrtransa => gene0002.fn_busca_time
                                ,pr_idseqttl => pr_idseqttl
                                ,pr_nmdatela => pr_nmdatela
                                ,pr_nrdconta => pr_nrdconta
                                ,pr_nrdrowid => vr_nrdrowid);
          END IF;  
        WHEN OTHERS THEN
          cecred.pc_internal_exception;

          -- Retorno não OK
          pr_des_reto := 'NOK';
          -- Chamar rotina de gravação de erro
          vr_dscritic := 'Erro na pc_gera_impextrda --> '|| sqlerrm;
          gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                               ,pr_cdagenci => pr_cdagenci
                               ,pr_nrdcaixa => pr_nrdcaixa
                               ,pr_nrsequen => 1 --> Fixo
                               ,pr_cdcritic => 0 --> Critica 0
                               ,pr_dscritic => vr_dscritic
                               ,pr_tab_erro => pr_tab_erro);
          -- Se foi solicitado geração de LOG
          IF pr_flgerlog THEN
            -- Chamar geração de LOG
            gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                                ,pr_cdoperad => pr_cdoperad
                                ,pr_dscritic => vr_dscritic
                                ,pr_dsorigem => vr_dsorigem
                                ,pr_dstransa => vr_dstransa
                                ,pr_dttransa => TRUNC(SYSDATE)
                                ,pr_flgtrans => 0 --> FALSE
                                ,pr_hrtransa => gene0002.fn_busca_time
                                ,pr_idseqttl => pr_idseqttl
                                ,pr_nmdatela => pr_nmdatela
                                ,pr_nrdconta => pr_nrdconta
                                ,pr_nrdrowid => vr_nrdrowid);
          END IF;    
      END;          
    END pc_gera_impextrda;  

    -- Subrotina para gerar EXTrato Analítico Aplicacao Programada
    PROCEDURE pc_gera_impextaap (pr_cdcooper IN crapcop.cdcooper%TYPE  --Codigo Cooperativa
                                ,pr_cdagenci IN crapass.cdagenci%TYPE  --Codigo Agencia
                                ,pr_nrdcaixa IN INTEGER                --Numero do Caixa
                                ,pr_idorigem IN INTEGER                --Origem dos Dados
                                ,pr_nmdatela IN VARCHAR2               --Nome da Tela                                
                                ,pr_dtmvtolt IN crapdat.dtmvtolt%TYPE  --Data Movimento
                                ,pr_dtmvtopr IN crapdat.dtmvtopr%TYPE  --Data Proximo Movimento
                                ,pr_inproces IN INTEGER                --Indicador Processo
                                ,pr_cdprogra IN crapprg.cdprogra%TYPE  --Codigo Programa
                                ,pr_cdoperad IN VARCHAR2               --Codigo Operador
                                ,pr_dsiduser IN VARCHAR2               --Identificador Usuario
                                ,pr_nrdconta IN crapass.nrdconta%TYPE  --Numero da Conta do Associado
                                ,pr_nrctrrpp IN craprpp.nrctrrpp%TYPE  --Numero Contrato
                                ,pr_dtiniper IN DATE                   --Data Inicio Periodo
                                ,pr_dtfimper IN DATE                   --Data Final Periodo
                                ,pr_idseqttl IN crapttl.idseqttl%TYPE  --Sequencial do Titular                                                                
                                ,pr_flgrodar IN BOOLEAN                --Flag Executar
                                ,pr_flgerlog IN BOOLEAN                --Escreve erro Log
                                ,pr_tab_craptab IN apli0001.typ_tab_ctablq  --Tipo de tabela de Conta Bloqueada
                                ,pr_tab_craplpp IN apli0001.typ_tab_craplpp --Tipo de tabela com lancamento poupanca
                                ,pr_tab_craplrg IN apli0001.typ_tab_craplpp --Tipo de tabela com resgates
                                ,pr_tab_resgate IN apli0001.typ_tab_resgate --Tabela com valores dos resgates das contas por aplicacao
                                ,pr_clobxml  IN OUT NOCOPY CLOB        --Clob arquivo de dados
                                ,pr_dstexto  IN OUT NOCOPY VARCHAR2    --Texto Clob
                                ,pr_nmarqimp OUT VARCHAR2              --Nome Arquivo Impressao
                                ,pr_nmarqpdf OUT VARCHAR2              --Nome Arquivo PDF
                                ,pr_tab_erro OUT GENE0001.typ_tab_erro --Tabela de Erros
                                ,pr_des_reto OUT VARCHAR2 ) IS         --Descricao Erro
  BEGIN
  ---------------------------------------------------------------------------------------------------------------
  --
  --  Programa : pc_gera_impextaap                    
  --  Sistema  : 
  --  Sigla    : CRED
  --  Autor    : CIS Corporate
  --  Data     : Julho/2018                           Ultima atualizacao: 
  --
  -- Dados referentes ao programa:
  --
  -- Frequencia: -----
  -- Objetivo   : Procedure para gerar extrato analítico da aplicação programada do associado. 
  --              Baseado na pc_gera_impextppr
  --
  -- Alterações : 
  --              
  ---------------------------------------------------------------------------------------------------------------
  DECLARE
        -- Busca dos dados da cooperativa
        CURSOR cr_crapcop IS
          SELECT crapcop.nmrescop
                ,crapcop.nmextcop
          FROM crapcop crapcop
          WHERE crapcop.cdcooper = pr_cdcooper;
        rw_crapcop cr_crapcop%ROWTYPE;  
        -- Busca dos dados do associado
        CURSOR cr_crapass IS
          SELECT crapass.nrdconta
                ,crapass.nmprimtl
                ,crapass.vllimcre
                ,crapass.nrcpfcgc
                ,crapass.inpessoa
                ,crapass.cdcooper
                ,crapass.cdagenci
          FROM crapass crapass
          WHERE crapass.cdcooper = pr_cdcooper
          AND   crapass.nrdconta = pr_nrdconta;
        rw_crapass cr_crapass%ROWTYPE;
        -- Cursor para busca a agencia
        CURSOR cr_crapage IS
          SELECT crapage.nmcidade
                ,crapage.cdagenci
                ,crapage.nmresage
                ,crapage.qtddlslf
          FROM crapage crapage
          WHERE crapage.cdcooper = pr_cdcooper 
          AND   crapage.cdagenci = pr_cdagenci;
        rw_crapage cr_crapage%ROWTYPE;
        -- Cursor com os títulos de uma conta de aplicação programada
        CURSOR cr_craprac(pr_cdcooper IN craprac.cdcooper%TYPE
                         ,pr_nrdconta IN craprac.nrdconta%TYPE
                         ,pr_nrctrrpp IN craprac.nrctrrpp%TYPE) IS
          SELECT rac.nraplica FROM craprac rac
           WHERE rac.cdcooper = pr_cdcooper
             AND rac.nrdconta = pr_nrdconta
             AND rac.nrctrrpp = pr_nrctrrpp
           ORDER BY rac.nraplica;
        rw_craprac cr_craprac%ROWTYPE;
        
        --Tabelas de Memoria
        vr_tab_extrato_rpp    typ_tab_extrato_rpp;
        vr_tab_dados_rpp      apli0001.typ_tab_dados_rpp;
        vr_tab_extrato_ap_tit apli0008.typ_tab_extrato_apl_prog;
        --Indices para temp-tables
        vr_index_dados_rpp   PLS_INTEGER;
        vr_index_extrato_rpp PLS_INTEGER;
     
        --Variaveis Locais
        vr_vlblqjud NUMBER:= 0;
        vr_vlresblq NUMBER:= 0;
        vr_vlblqapl NUMBER:= 0;
        vr_vlblqpou NUMBER:= 0;
        vr_vltotrpp NUMBER:= 0;
        vr_vltotres NUMBER:= 0;
        vr_percenir NUMBER;
        vr_flgfirst BOOLEAN;
        vr_dsblqjud VARCHAR2(500);
        vr_dsextrat VARCHAR2(100);
        vr_dsorigem VARCHAR2(100);
        vr_dstransa VARCHAR2(100);
        vr_nrdrowid ROWID;
        vr_cdoperad     crapope.cdoperad%type;
        vr_nmdatela     crapprg.cdprogra%type; 
        vr_rel_cdagenci crapage.cdagenci%type;
        vr_rel_nmresage crapage.nmresage%type;
        vr_ap_prog_tit PLS_INTEGER := 0;
        vr_vlresgat NUMBER:= 0;
        vr_vlrendim NUMBER:= 0;
        vr_vldoirrf NUMBER:= 0;
        vr_percirrf NUMBER:= 0;
        vr_txacumul NUMBER:= 0;
        vr_txacumes NUMBER:= 0;
        vr_qtdiacar PLS_INTEGER :=0;
        vr_dtfimcar DATE;
        vr_dtvencto DATE;
        vr_qtdiaprz PLS_INTEGER :=0;
        vr_qtdiaapl PLS_INTEGER :=0;
        vr_txaplica NUMBER:= 0;
        vr_nmdindex  crapind.nmdindex%type;
        
        --Registro tipo data
        rw_crapdat btch0001.cr_crapdat%ROWTYPE;
        --Variaveis dos Arquivos
        vr_typ_saida VARCHAR2(3);
        vr_comando   VARCHAR2(100);
        vr_nmdireto  VARCHAR2(100);
        vr_nmendter  VARCHAR2(100);
        vr_setlinha  VARCHAR2(100);
        --CLOB de Dados
        vr_clobxml209  CLOB;
        vr_dstexto    VARCHAR2(32600);
        vr_dstexto209  VARCHAR2(32600);
        --Variaveis Erro
        vr_cdcritic INTEGER;
        vr_dscritic VARCHAR2(4000);
        vr_des_reto VARCHAR2(3);                               
        --Variaveis de Excecoes
        vr_exc_erro EXCEPTION;
        vr_exc_sair EXCEPTION;
        
        vr_nmaction VARCHAR2(32) := 'pc_gera_impextaap';
      BEGIN

        gene0001.pc_set_modulo(pr_module => NULL, pr_action => vr_nmaction);

        --Limpar Tabela Erro
        pr_tab_erro.DELETE;
        
        /*** Busca Saldo Bloqueado Judicial ***/
        gene0005.pc_retorna_valor_blqjud (pr_cdcooper => pr_cdcooper          --Cooperativa
                                         ,pr_nrdconta => pr_nrdconta          --Conta Corrente
                                         ,pr_nrcpfcgc => 0 /*fixo*/           --Cpf/cnpj
                                         ,pr_cdtipmov => 1 /*bloqueio*/       --Tipo Movimento
                                         ,pr_cdmodali => 3 /*Poupanca Prog.*/ --Modalidade
                                         ,pr_dtmvtolt => pr_dtmvtolt          --Data Atual
                                         ,pr_vlbloque => vr_vlblqjud          --Valor Bloqueado
                                         ,pr_vlresblq => vr_vlresblq          --Valor Residual
                                         ,pr_dscritic => vr_dscritic);        --Critica
         --Se ocorreu erro
         IF vr_dscritic IS NOT NULL THEN
           --Levantar Excecao
           RAISE vr_exc_erro;
         END IF;

        /*** Busca valor bloquedo garantia epr ***/
        vr_vlblqapl := 0;
        vr_vlblqpou := 0;
        bloq0001.pc_calc_bloqueio_garantia( pr_cdcooper => pr_cdcooper          --Cooperativa
                                           ,pr_nrdconta => pr_nrdconta          --Conta Corrente                                        
                                           ,pr_vlbloque_aplica => vr_vlblqapl   --Valor Bloqueado aplicacao
                                           ,pr_vlbloque_poupa  => vr_vlblqpou   --Valor Bloqueado poupanca
                                           ,pr_dscritic        => vr_dscritic);  --Critica
        --Se ocorreu erro
        IF vr_dscritic IS NOT NULL THEN
          --Levantar Excecao
          RAISE vr_exc_erro;
        END IF; 

        --Atribuir Descricao da Origem
        vr_dsorigem:= GENE0001.vr_vet_des_origens(pr_idorigem);
        --Atribuir Descricao da Transacao
        vr_dstransa:= 'Consultar dados para extrato analitico de aplicacao programada.';
        --Inicializar variaveis
        vr_cdcritic:= 0;
        vr_dscritic:= NULL;
        pr_des_reto:= 'NOK';
        --Definir Operador
        IF pr_inproces = 1  THEN
          vr_cdoperad:= pr_cdoperad;
          vr_nmdatela:= pr_nmdatela;
        ELSE  
          vr_cdoperad:= '1';
          vr_nmdatela:= UPPER(pr_cdprogra);
        END IF;
        
        BEGIN
          -- Verifica se a cooperativa esta cadastrada
          OPEN cr_crapcop;
          FETCH cr_crapcop INTO rw_crapcop;
          -- Se não encontrar
          IF cr_crapcop%NOTFOUND THEN
            -- Fechar o cursor pois haverá raise
            CLOSE cr_crapcop;
            -- Montar mensagem de critica
            vr_cdcritic:= 651;
            RAISE vr_exc_erro;
          ELSE
            -- Apenas fechar o cursor
            CLOSE cr_crapcop;
          END IF;
          
          -- Leitura do calendário da cooperativa
          OPEN btch0001.cr_crapdat(pr_cdcooper => pr_cdcooper);
          FETCH btch0001.cr_crapdat INTO rw_crapdat;
          -- Se não encontrar
          IF btch0001.cr_crapdat%NOTFOUND THEN
            -- Fechar o cursor pois efetuaremos raise
            CLOSE btch0001.cr_crapdat;
            -- Montar mensagem de critica
            vr_cdcritic:= 1;
            RAISE vr_exc_erro;
          ELSE
            -- Apenas fechar o cursor
            CLOSE btch0001.cr_crapdat;
          END IF;
          -- Busca do diretório base da cooperativa para a geração de relatórios
          vr_nmdireto:= gene0001.fn_diretorio(pr_tpdireto => 'C'           --> /usr/coop
                                             ,pr_cdcooper => pr_cdcooper   --> Cooperativa
                                             ,pr_nmsubdir => 'rl');       --> Utilizaremos o rl
          

          -- Inicializar as informações do XML de dados para o relatório
          dbms_lob.createtemporary(vr_clobxml209, TRUE, dbms_lob.CALL);
          dbms_lob.open(vr_clobxml209, dbms_lob.lob_readwrite);
          --Escrever no arquivo XML
          gene0002.pc_escreve_xml(vr_clobxml209, vr_dstexto209,'<?xml version="1.0" encoding="UTF-8"?><crrl744><contas>');

          --Se nao rodar
          IF NOT pr_flgrodar THEN 
            --Nome Arquivo Impressao
            pr_nmarqimp:= 'crrl744.lst';
          ELSE 
            --Nome Arquivo Impressao e PDF
            vr_nmendter:= pr_dsiduser || gene0002.fn_busca_time;
            pr_nmarqimp:= vr_nmendter || '.ex';
            pr_nmarqpdf:= vr_nmendter || '.pdf';
          END IF;  
          
          --Selecionar associado
          OPEN cr_crapass;
          --Posicionar no proximo registro
          FETCH cr_crapass INTO rw_crapass;
          --Se nao encontrou
          IF cr_crapass%NOTFOUND THEN
            --Fechar Cursor
            CLOSE cr_crapass;
            --mensagem erro
            vr_cdcritic:= 9;
            vr_dscritic:= 'Conta/dv: '||to_char(pr_nrdconta,'fm9g999g999g0')||
                          '- Associado nao cadastrado!!!!';
            --Colocar todo o texto na variavel auxiliar
            vr_dstexto:= '<conta nrdconta="'||to_char(pr_nrdconta,'fm9g999g999g0')||
                         '" flgmensag="S" dscmensag="'||vr_dscritic||'"></conta>';
            --Escrever no Arquivo
            gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);

            --Popular Clob do relatorio interno
            gene0002.pc_escreve_xml(vr_clobxml209, vr_dstexto209,vr_dstexto);

            --Levantar Excecao
            RAISE vr_exc_sair;
          END IF;  
          --Fechar Cursor
          CLOSE cr_crapass;
          --Selecionar Dados Agencia
          OPEN cr_crapage;
          FETCH cr_crapage INTO rw_crapage;
          --Se nao Encontrou            
          IF cr_crapage%NOTFOUND THEN
            vr_rel_cdagenci:= rw_crapass.cdagenci;
            vr_rel_nmresage:= RPAD('*',15,'*');
          ELSE
            vr_rel_cdagenci:= rw_crapage.cdagenci;
            vr_rel_nmresage:= rw_crapage.nmresage;
          END IF;  
          -- Fechar o cursor
          CLOSE cr_crapage;
          -- Selecionar informacoes % IR para o calculo da APLI0001.pc_calc_saldo_rpp
          vr_percenir:= GENE0002.fn_char_para_number
                       (TABE0001.fn_busca_dstextab(pr_cdcooper => pr_cdcooper
                                                  ,pr_nmsistem => 'CRED'
                                                  ,pr_tptabela => 'CONFIG'
                                                  ,pr_cdempres => 0
                                                  ,pr_cdacesso => 'PERCIRAPLI'
                                                  ,pr_tpregist => 0));
          --Limpar tabelas memoria
          vr_tab_dados_rpp.DELETE;
          --Buscar todas as aplicações programadas da conta
          apli0001.pc_consulta_poupanca (pr_cdcooper => pr_cdcooper            --> Cooperativa 
                                        ,pr_cdagenci => pr_cdagenci            --> Codigo da Agencia
                                        ,pr_nrdcaixa => pr_nrdcaixa            --> Numero do caixa 
                                        ,pr_cdoperad => vr_cdoperad            --> Codigo do Operador
                                        ,pr_idorigem => pr_idorigem            --> Identificador da Origem
                                        ,pr_nrdconta => pr_nrdconta            --> Nro da conta associado
                                        ,pr_idseqttl => pr_idseqttl            --> Identificador Sequencial
                                        ,pr_nrctrrpp => pr_nrctrrpp            --> Contrato Poupanca Programada 
                                        ,pr_dtmvtolt => pr_dtmvtolt            --> Data do movimento atual
                                        ,pr_dtmvtopr => pr_dtmvtopr            --> Data do proximo movimento
                                        ,pr_inproces => pr_inproces            --> Indicador de processo
                                        ,pr_cdprogra => 'IMPRES'               --> Nome do programa chamador
                                        ,pr_flgerlog => FALSE                  --> Flag erro log
                                        ,pr_percenir => vr_percenir            --> % IR para Calculo Poupanca
                                        ,pr_tab_craptab => pr_tab_craptab      --> Tipo de tabela de Conta Bloqueada
                                        ,pr_tab_craplpp => pr_tab_craplpp      --> Tipo de tabela com lancamento poupanca
                                        ,pr_tab_craplrg => pr_tab_craplrg      --> Tipo de tabela com resgates
                                        ,pr_tab_resgate => pr_tab_resgate      --> Tabela com valores dos resgates das contas por aplicacao
                                        ,pr_vlsldrpp    => vr_vltotrpp         --> Valor saldo poupanca programada
                                        ,pr_retorno     => vr_des_reto         --> Descricao de erro ou sucesso OK/NOK 
                                        ,pr_tab_dados_rpp => vr_tab_dados_rpp  --> Poupancas Programadas
                                        ,pr_tab_erro      => pr_tab_erro);     --> Saida com erros;

          --Se retornou erro
          IF vr_des_reto = 'NOK' THEN
            -- Tenta buscar o erro no vetor de erro
            IF pr_tab_erro.COUNT > 0 THEN
              vr_dscritic:= pr_tab_erro(pr_tab_erro.FIRST).dscritic;
            ELSE
              vr_dscritic:= 'Nao foi possivel carregar o extrato.';
            END IF;
            vr_dscritic:= 'Conta/dv: '||to_char(pr_nrdconta,'fm99g999g999g9')||' - '||vr_dscritic;
            --Colocar todo o texto na variavel auxiliar
            vr_dstexto:= '<conta nrdconta="'||to_char(pr_nrdconta,'fm9g999g999g0')||
                         '" flgmensag="S" dscmensag="'||vr_dscritic||'"></conta>';
            --Escrever no Arquivo
            gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);

            --Popular Clob do relatorio interno
            gene0002.pc_escreve_xml(vr_clobxml209, vr_dstexto209,vr_dstexto);

            --Levantar Excecao
            RAISE vr_exc_sair;          
          END IF;
          --Percorrer dados extrato da poupanca
          vr_index_dados_rpp:= vr_tab_dados_rpp.FIRST;
          WHILE vr_index_dados_rpp IS NOT NULL LOOP
            IF vr_tab_dados_rpp(vr_index_dados_rpp).cdprodut >0 THEN -- Nova Aplic. Programada
                -- Recuperar os títulos desta aplicação
                vr_ap_prog_tit := 0;     
                OPEN cr_craprac (pr_cdcooper=>pr_cdcooper
                                ,pr_nrdconta=>pr_nrdconta
                                ,pr_nrctrrpp=>vr_tab_dados_rpp(vr_index_dados_rpp).nrctrrpp);
                FETCH cr_craprac INTO rw_craprac;
                IF cr_craprac%NOTFOUND THEN
                   NULL;
                ELSE
                  LOOP
                    --Limpar tabela Memoria
                    vr_tab_extrato_rpp.DELETE;
                    apli0008.pc_gerar_ext_apl_prog_titulo (pr_cdcooper => pr_cdcooper
                                                          ,pr_cdoperad => vr_cdoperad
                                                          ,pr_nmdatela => 'IMPRES'
                                                          ,pr_idorigem => pr_idorigem
                                                          ,pr_nrdconta => pr_nrdconta
                                                          ,pr_idseqttl => pr_idseqttl
                                                          ,pr_nrctrrpp => vr_tab_dados_rpp(vr_index_dados_rpp).nrctrrpp
                                                          ,pr_nraplica => rw_craprac.nraplica
                                                          ,pr_dtmvtolt_ini => pr_dtiniper
                                                          ,pr_dtmvtolt_fim => pr_dtfimper
                                                          ,pr_idlstdhs => 1
                                                          ,pr_idgerlog => 0
                                                          ,pr_tab_extrato => vr_tab_extrato_ap_tit
                                                          ,pr_vlresgat => vr_vlresgat
                                                          ,pr_vlrendim => vr_vlrendim
                                                          ,pr_vldoirrf => vr_vldoirrf
                                                          ,pr_percirrf => vr_percirrf
                                                          ,pr_txacumul => vr_txacumul
                                                          ,pr_txacumes => vr_txacumes
                                                          ,pr_qtdiacar => vr_qtdiacar
                                                          ,pr_dtfimcar => vr_dtfimcar
                                                          ,pr_dtvencto => vr_dtvencto
                                                          ,pr_qtdiaprz => vr_qtdiaprz
                                                          ,pr_qtdiaapl => vr_qtdiaapl
                                                          ,pr_txaplica => vr_txaplica
                                                          ,pr_nmdindex => vr_nmdindex
                                                          ,pr_cdcritic => vr_cdcritic
                                                          ,pr_dscritic => vr_dscritic);
	
                    --Se retornou erro
                    IF vr_dscritic IS NOT NULL THEN
                        vr_dscritic:= 'Nao foi possivel carregar o extrato.';
                        vr_dscritic:= 'Conta/dv: '||to_char(pr_nrdconta,'fm99g999g999g9')||' - '||vr_dscritic;
                        --Colocar todo o texto na variavel auxiliar
                        vr_dstexto:= '<conta nrdconta="'||to_char(pr_nrdconta,'fm9g999g999g0')||
                                     '" flgmensag="S" dscmensag="'||vr_dscritic||'"></conta>';
                        --Escrever no Arquivo
                        gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);

                        --Popular Clob do relatorio interno
                        gene0002.pc_escreve_xml(vr_clobxml209, vr_dstexto209,vr_dstexto);

                        --Levantar Excecao
                        RAISE vr_exc_sair;          
                    END IF;
                    vr_dsblqjud:= ' dsmssaldo="SALDO DISPONIVEL R$                        '||
                                    to_char(nvl(vr_vltotrpp,0),'fm999g999g999g990d00')||'"'; --vr_vltotrpp
                    --Verificar se possui bloqueio judicial
                    vr_dsblqjud:= vr_dsblqjud ||' flgmsgjud="S" dsmsgjud="VALOR BLOQUEADO JUDICIALMENTE R'|| 
                                  Rpad('$',21-LENGTH(to_char(nvl(vr_vlblqjud,0),'fm999g999g999g990d00')),' ')||to_char(nvl(vr_vlblqjud,0),'fm999g999g999g990d00')||'"'; 
                    
                    --Verificar se possui bloqueio de garantia de aplicacao
                    vr_dsblqjud:= vr_dsblqjud ||' flgmsggar="S" dsmsggar="VALOR BLOQUEADO COBERTURA GARANTIA R'||
                                  Rpad('$',16-LENGTH(to_char(nvl(vr_vlblqpou,0),'fm999g999g999g990d00')),' ')||to_char(nvl(vr_vlblqpou,0),'fm999g999g999g990d00')||'"'; 
                    vr_vltotres := GREATEST(0,nvl(vr_vltotrpp,0) - (nvl(vr_vlblqjud,0) + nvl(vr_vlblqpou,0)));
                    vr_dsblqjud:= vr_dsblqjud ||' dsmsslddis="SALDO DISPONIVEL PARA RESGATE R'||
                                  Rpad('$',21-LENGTH(to_char(vr_vltotres,'fm999g999g999g990d00')),' ')||to_char(vr_vltotres,'fm999g999g999g990d00')||'"';
                    
                    --Verificar se possui extratos de poupanca
                    IF vr_tab_extrato_ap_tit.COUNT = 0 THEN
                      vr_dsextrat:= '<extratos flgmsgext="S" dsmsgext="** NAO HA LANCAMENTOS NO PERIODO **">';
                    ELSE
                      vr_dsextrat:= '<extratos flgmsgext="N" dsmsgext="">';  
                    END IF;  
                    --Montar texto
                    vr_dstexto:= '<conta cdagenci="'||vr_rel_cdagenci||
                                 '" nmresage="'||vr_rel_nmresage||
                                 '" nrdconta="'||to_char(rw_crapass.nrdconta,'fm9g999g999g0')||
                                 '" nmprimtl="'||rw_crapass.nmprimtl||
                                 '" nrctrrpp="'||to_char(vr_tab_dados_rpp(vr_index_dados_rpp).nrctrrpp,'fm99g999g990')||
                                 '" dtvctopp="'||to_char(vr_tab_dados_rpp(vr_index_dados_rpp).dtvctopp,'DD/MM/YYYY')||
                                 '" dtiniper="'||to_char(pr_dtiniper,'DD/MM/YYYY')||
                                 '" dtfimper="'||to_char(pr_dtfimper,'DD/MM/YYYY')||
                                 '" flgmensag="N" dscmensag=""'||vr_dsblqjud||'>'||vr_dsextrat;
                    --Escrever no Arquivo
                    gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);
                    
                    --Popular Clob do relatorio interno
                    gene0002.pc_escreve_xml(vr_clobxml209, vr_dstexto209,vr_dstexto);
                    IF vr_tab_extrato_ap_tit.Count > 0 THEN
                    --Percorrer todos os extratos de poupanca
                    FOR vr_index_extrato_ap_tit IN vr_tab_extrato_ap_tit.FIRST .. vr_tab_extrato_ap_tit.LAST LOOP
                        --Se for o primeiro registro
                        IF vr_index_extrato_ap_tit=1 THEN
                           --Montar texto
                           vr_dstexto:=
                              '<extrato>' ||
                                '<nraplica>' || to_char(rw_craprac.nraplica) || '</nraplica>'||
                                '<qtdiaprz>' || to_char(vr_qtdiaprz) || '</qtdiaprz>'||
                                '<qtdiacar>' || to_char(vr_qtdiacar) || '</qtdiacar>'||
                                '<dtvencto>' || to_char(vr_dtvencto,'DD/MM/YYYY') || '</dtvencto>'||
                                '<dtfimcar>' || to_char(vr_dtfimcar,'DD/MM/YYYY') || '</dtfimcar>'||
                                '<nmdindex>' || vr_nmdindex || '</nmdindex>'||
                                '<txaplica>' || to_char(vr_txaplica,'fm9g990d00') || '%</txaplica>'||
                                '<dtmvtolt>' || to_char(vr_tab_extrato_ap_tit(vr_index_extrato_ap_tit).dtmvtolt,'DD/MM/YYYY') || '</dtmvtolt>' ||
                                '<dsextrat>' || 'SLD. ANTERIOR' || '</dsextrat>' ||
                                '<nrdocmto></nrdocmto>' ||
                                 '<vllanmto></vllanmto>' ||
                                 '<indebcre></indebcre>' ||
                                '<vlsldapr>' || to_char(vr_tab_extrato_ap_tit(vr_index_extrato_ap_tit).vlsldtot,'fm99999g999g990d00')||'</vlsldapr>' ||
                              '</extrato>';

                           --Escrever no Arquivo
                           gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);

                           --Popular Clob do relatorio interno
                           gene0002.pc_escreve_xml(vr_clobxml209, vr_dstexto209,vr_dstexto);

                        ELSE
                           --Se a taxa for zero enviar null
/*
                           IF NVL(vr_tab_extrato_ap_tit(vr_index_extrato_ap_tit).txaplmes,0) = 0 THEN
                             vr_tab_extrato_ap_tit(vr_index_extrato_ap_tit).txaplmes:= NULL;
                           END IF;  
*/
                           --Montar texto
                           vr_dstexto:= 
                              '<extrato>' ||
                                '<dtmvtolt>' || to_char(vr_tab_extrato_ap_tit(vr_index_extrato_ap_tit).dtmvtolt,'DD/MM/YYYY') || '</dtmvtolt>' ||
                                '<dsextrat>' || vr_tab_extrato_ap_tit(vr_index_extrato_ap_tit).dsextrat || '</dsextrat>' ||
                                '<nrdocmto>' || to_char(vr_tab_extrato_ap_tit(vr_index_extrato_ap_tit).nrdocmto,'fm999g999g990') || '</nrdocmto>' ||
                                '<vllanmto>' || to_char(vr_tab_extrato_ap_tit(vr_index_extrato_ap_tit).vllanmto,'fm99999g999g990d00') || '</vllanmto>' ||
                                '<indebcre>' || vr_tab_extrato_ap_tit(vr_index_extrato_ap_tit).indebcre ||'</indebcre>' ||
                                '<vlsldapr>' || to_char(vr_tab_extrato_ap_tit(vr_index_extrato_ap_tit).vlsldtot,'fm99999g999g990d00')||'</vlsldapr>' ||
                              '</extrato>';
                           --Escrever no Arquivo
                           gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);

                           --Popular Clob do relatorio interno
                           gene0002.pc_escreve_xml(vr_clobxml209, vr_dstexto209,vr_dstexto);
                        END IF; --vr_flgfirst   
                    END LOOP;  --extratos_rpp
                    END IF;
                    --Finaliza TAG Extratos e Conta
                    gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,'</extratos></conta>');
                    --Escreve CLOB Interno
                    gene0002.pc_escreve_xml(vr_clobxml209, vr_dstexto209,'</extratos></conta>');

                    FETCH cr_craprac INTO rw_craprac;
                    EXIT WHEN cr_craprac%NOTFOUND;
                  END LOOP; 
                END IF;
                CLOSE cr_craprac;
            END IF; -- Aplicacao programada
            --Proximo Registro
            vr_index_dados_rpp:= vr_tab_dados_rpp.NEXT(vr_index_dados_rpp);
          END LOOP; --dados_rpp

          gene0001.pc_set_modulo(pr_module => NULL, pr_action => vr_nmaction);

          IF pr_flgrodar = TRUE THEN              
            --Finaliza Clob Interno
            gene0002.pc_escreve_xml(vr_clobxml209, vr_dstexto209,'</contas></crrl744>',TRUE);
            -- Gera relatório 744
            gene0002.pc_solicita_relato(pr_cdcooper  => pr_cdcooper                   --> Cooperativa conectada
                                       ,pr_cdprogra  => pr_cdprogra                   --> Programa chamador
                                       ,pr_dtmvtolt  => pr_dtmvtolt                   --> Data do movimento atual
                                       ,pr_dsxml     => vr_clobxml209                 --> Arquivo XML de dados
                                       ,pr_dsxmlnode => '/crrl744/contas/conta'       --> Nó base do XML para leitura dos dados
                                       ,pr_dsjasper  => 'crrl744.jasper'              --> Arquivo de layout do iReport
                                       ,pr_dsparams  => NULL                          --> Sem parâmetros
                                       ,pr_cdrelato => 744                            --> Código fixo para o relatório (nao busca pelo sqcabrel)                                         
                                       ,pr_dsarqsaid => vr_nmdireto||'/'||pr_nmarqimp  --> Arquivo final com o path
                                       ,pr_qtcoluna  => 80                            --> Colunas do relatorio
                                       ,pr_flg_gerar => 'S'                           --> Geraçao na hora
                                       ,pr_flg_impri => 'N'                           --> Chamar a impressão (Imprim.p)
                                       ,pr_nmformul  => NULL                          --> Nome do formulário para impressão
                                       ,pr_nrcopias  => 1                             --> Número de cópias
                                       ,pr_sqcabrel  => 1                             --> Qual a seq do cabrel
                                       ,pr_flappend  => 'S'                           --> Fazer append do relatorio se ja existir
                                       ,pr_nrvergrl  => 1                             --> Versao do relatorio
                                       ,pr_des_erro  => vr_dscritic);                 --> Saída com erro
            --Se ocorreu erro no relatorio
            IF vr_dscritic IS NOT NULL THEN
              --Levantar Excecao
              RAISE vr_exc_sair;
            END IF; 
              
            IF pr_idorigem = 5  THEN                
              --Enviar arquivo para Web
              GENE0002.pc_envia_arquivo_web (pr_cdcooper => pr_cdcooper        --Codigo Cooperativa
                                   ,pr_cdagenci => pr_cdagenci        --Codigo Agencia
                                   ,pr_nrdcaixa => pr_nrdcaixa        --Numero do Caixa
                                   ,pr_nmarqimp => pr_nmarqimp        --Nome Arquivo Impressao
                                   ,pr_nmdireto => vr_nmdireto        --Nome Diretorio
                                   ,pr_nmarqpdf => pr_nmarqpdf        --Nome Arquivo PDF
                                   ,pr_des_reto => vr_des_reto        --Retorno OK/NOK
                                   ,pr_tab_erro => pr_tab_erro);      --tabela erro
              --Se ocorreu erro
              IF vr_des_reto <> 'OK' THEN
                --Se tem erro na tabela 
                IF pr_tab_erro.COUNT > 0 THEN
                  vr_dscritic:= pr_tab_erro(pr_tab_erro.FIRST).dscritic;
                ELSE
                  vr_dscritic:= 'Erro ao enviar arquivo para web.';  
                END IF; 
                --Sair 
                RAISE vr_exc_sair;
              END IF; 
            END IF;
                
            --Fechar Clob e Liberar Memoria  
            dbms_lob.close(vr_clobxml209);
            dbms_lob.freetemporary(vr_clobxml209); 
          END IF;

          gene0001.pc_set_modulo(pr_module => NULL, pr_action => vr_nmaction);

          --Retorno com Sucesso
          pr_des_reto:= 'OK';

        EXCEPTION
          WHEN vr_exc_sair THEN
            pr_des_reto:= 'OK';
            vr_cdcritic:= NULL;
            vr_dscritic:= NULL;
          WHEN vr_exc_erro THEN
            RAISE vr_exc_erro;
        END;
          
        --Se nao tem erro na temp-table 
        IF pr_tab_erro.COUNT = 0 AND (vr_dscritic IS NOT NULL OR nvl(vr_cdcritic,0) <> 0) THEN
          -- Chamar rotina de gravacao de erro
          gene0001.pc_gera_erro (pr_cdcooper => pr_cdcooper
                                ,pr_cdagenci => pr_cdagenci
                                ,pr_nrdcaixa => pr_nrdcaixa
                                ,pr_nrsequen => 1  /** Sequencia **/
                                ,pr_cdcritic => vr_cdcritic
                                ,pr_dscritic => vr_dscritic
                                ,pr_tab_erro => pr_tab_erro);
        END IF;
        --Escrever erro no Log
        IF pr_flgerlog THEN  
          --Executar rotina geracao log
          gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                              ,pr_cdoperad => vr_cdoperad
                              ,pr_dscritic => vr_dscritic
                              ,pr_dsorigem => vr_dsorigem
                              ,pr_dstransa => vr_dstransa
                              ,pr_dttransa => TRUNC(SYSDATE)
                              ,pr_flgtrans => (CASE pr_des_reto WHEN 'OK' THEN 1 ELSE 0 END)
                              ,pr_hrtransa => gene0002.fn_busca_time
                              ,pr_idseqttl => 1
                              ,pr_nmdatela => vr_nmdatela
                              ,pr_nrdconta => pr_nrdconta
                              ,pr_nrdrowid => vr_nrdrowid);
        END IF;          
        gene0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);
      EXCEPTION
        WHEN vr_exc_erro THEN
          -- Retorno não OK
          pr_des_reto := 'NOK';
          -- Chamar rotina de gravação de erro
          gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                               ,pr_cdagenci => pr_cdagenci
                               ,pr_nrdcaixa => pr_nrdcaixa
                               ,pr_nrsequen => 1 --> Fixo
                               ,pr_cdcritic => 0 --> Critica 0
                               ,pr_dscritic => vr_dscritic
                               ,pr_tab_erro => pr_tab_erro);
          -- Se foi solicitado geração de LOG
          IF pr_flgerlog THEN
            -- Chamar geração de LOG
            gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                                ,pr_cdoperad => pr_cdoperad
                                ,pr_dscritic => vr_dscritic
                                ,pr_dsorigem => vr_dsorigem
                                ,pr_dstransa => vr_dstransa
                                ,pr_dttransa => TRUNC(SYSDATE)
                                ,pr_flgtrans => 0 --> FALSE
                                ,pr_hrtransa => gene0002.fn_busca_time
                                ,pr_idseqttl => pr_idseqttl
                                ,pr_nmdatela => pr_nmdatela
                                ,pr_nrdconta => pr_nrdconta
                                ,pr_nrdrowid => vr_nrdrowid);
          END IF;  
        WHEN OTHERS THEN
          cecred.pc_internal_exception;
          -- Retorno não OK
          pr_des_reto := 'NOK';
          -- Chamar rotina de gravação de erro
          vr_dscritic := 'Erro na pc_gera_impextaap --> '|| sqlerrm;
          gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                               ,pr_cdagenci => pr_cdagenci
                               ,pr_nrdcaixa => pr_nrdcaixa
                               ,pr_nrsequen => 1 --> Fixo
                               ,pr_cdcritic => 0 --> Critica 0
                               ,pr_dscritic => vr_dscritic
                               ,pr_tab_erro => pr_tab_erro);
          -- Se foi solicitado geração de LOG
          IF pr_flgerlog THEN
            -- Chamar geração de LOG
            gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                                ,pr_cdoperad => pr_cdoperad
                                ,pr_dscritic => vr_dscritic
                                ,pr_dsorigem => vr_dsorigem
                                ,pr_dstransa => vr_dstransa
                                ,pr_dttransa => TRUNC(SYSDATE)
                                ,pr_flgtrans => 0 --> FALSE
                                ,pr_hrtransa => gene0002.fn_busca_time
                                ,pr_idseqttl => pr_idseqttl
                                ,pr_nmdatela => pr_nmdatela
                                ,pr_nrdconta => pr_nrdconta
                                ,pr_nrdrowid => vr_nrdrowid);
          END IF;  
      END;
    END pc_gera_impextaap;  

    -- Subrotina para gerar extrato Poupanca Programada
    PROCEDURE pc_gera_impextppr (pr_cdcooper IN crapcop.cdcooper%TYPE  --Codigo Cooperativa
                                ,pr_cdagenci IN crapass.cdagenci%TYPE  --Codigo Agencia
                                ,pr_nrdcaixa IN INTEGER                --Numero do Caixa
                                ,pr_idorigem IN INTEGER                --Origem dos Dados
                                ,pr_nmdatela IN VARCHAR2               --Nome da Tela                                
                                ,pr_dtmvtolt IN crapdat.dtmvtolt%TYPE  --Data Movimento
                                ,pr_dtmvtopr IN crapdat.dtmvtopr%TYPE  --Data Proximo Movimento
                                ,pr_inproces IN INTEGER                --Indicador Processo
                                ,pr_cdprogra IN crapprg.cdprogra%TYPE  --Codigo Programa
                                ,pr_cdoperad IN VARCHAR2               --Codigo Operador
                                ,pr_dsiduser IN VARCHAR2               --Identificador Usuario
                                ,pr_nrdconta IN crapass.nrdconta%TYPE  --Numero da Conta do Associado
                                ,pr_nrctrrpp IN craprpp.nrctrrpp%TYPE  --Numero Contrato
                                ,pr_tpapprog IN INTEGER default 0      --Tipo de Aplicao (0 = Ambas, 1 = RPP, 2 = Apl. Prog.)
                                ,pr_dtiniper IN DATE                   --Data Inicio Periodo
                                ,pr_dtfimper IN DATE                   --Data Final Periodo
                                ,pr_idseqttl IN crapttl.idseqttl%TYPE  --Sequencial do Titular                                                                
                                ,pr_flgrodar IN BOOLEAN                --Flag Executar
                                ,pr_flgerlog IN BOOLEAN                --Escreve erro Log
                                ,pr_tab_craptab IN apli0001.typ_tab_ctablq  --Tipo de tabela de Conta Bloqueada
                                ,pr_tab_craplpp IN apli0001.typ_tab_craplpp --Tipo de tabela com lancamento poupanca
                                ,pr_tab_craplrg IN apli0001.typ_tab_craplpp --Tipo de tabela com resgates
                                ,pr_tab_resgate IN apli0001.typ_tab_resgate --Tabela com valores dos resgates das contas por aplicacao
                                ,pr_clobxml  IN OUT NOCOPY CLOB        --Clob arquivo de dados
                                ,pr_dstexto  IN OUT NOCOPY VARCHAR2    --Texto Clob
                                ,pr_nmarqimp OUT VARCHAR2              --Nome Arquivo Impressao
                                ,pr_nmarqpdf OUT VARCHAR2              --Nome Arquivo PDF
                                ,pr_tab_erro OUT GENE0001.typ_tab_erro --Tabela de Erros
                                ,pr_des_reto OUT VARCHAR2 ) IS         --Descricao Erro
  BEGIN
  ---------------------------------------------------------------------------------------------------------------
  --
  --  Programa : pc_gera_impextppr                    Antigo: procedures/b1wgen0112.p/gera-impextppr
  --  Sistema  : 
  --  Sigla    : CRED
  --  Autor    : Alisson C. Berrido - Amcom
  --  Data     : Julho/2014                           Ultima atualizacao: 02/03/2018
  --
  -- Dados referentes ao programa:
  --
  -- Frequencia: -----
  -- Objetivo   : Procedure para gerar extrato poupanca programada do associado
  --
  -- Alterações : 02/07/2014 - Conversão Progress -> Oracle (Alisson - AMcom)
  --              
  --              20/04/2016 - Remover comando rm e incluir direto na tela impres 
  --                           (Lucas Ranghetti/Rodrigo #399412)              
  --
  --              27/11/2017 - Inclusao do valor de bloqueio em garantia nos relatorios. 
  --                           PRJ404 - Garantia.(Odirlei-AMcom)               
  --
  --              02/03/2018 - Ajustes na exibição dos valores de bloqueio Judicial e de cobertura de aplicacao
  --                           (Lucas Skroch - Supero TI)
  --
  --              20/08/2018 - Suporte a aplicações programadas (Extrato sintético APs)
  --                           Proj. 411.2 - CIS Corporate

  ---------------------------------------------------------------------------------------------------------------
  DECLARE
        -- Busca dos dados da cooperativa
        CURSOR cr_crapcop (pr_cdcooper IN crapcop.cdcooper%TYPE) IS
          SELECT crapcop.nmrescop
                ,crapcop.nmextcop
          FROM crapcop crapcop
          WHERE crapcop.cdcooper = pr_cdcooper;
        rw_crapcop cr_crapcop%ROWTYPE;  
        -- Busca dos dados do associado
        CURSOR cr_crapass(pr_cdcooper IN crapcop.cdcooper%TYPE
                         ,pr_nrdconta IN crapass.nrdconta%TYPE) IS
          SELECT crapass.nrdconta
                ,crapass.nmprimtl
                ,crapass.vllimcre
                ,crapass.nrcpfcgc
                ,crapass.inpessoa
                ,crapass.cdcooper
                ,crapass.cdagenci
          FROM crapass crapass
          WHERE crapass.cdcooper = pr_cdcooper
          AND   crapass.nrdconta = pr_nrdconta;
        rw_crapass cr_crapass%ROWTYPE;
        -- Cursor para busca a agencia
        CURSOR cr_crapage(pr_cdcooper IN crapage.cdcooper%TYPE
                         ,pr_cdagenci IN crapage.cdagenci%TYPE) IS
          SELECT crapage.nmcidade
                ,crapage.cdagenci
                ,crapage.nmresage
                ,crapage.qtddlslf
          FROM crapage crapage
          WHERE crapage.cdcooper = pr_cdcooper 
          AND   crapage.cdagenci = pr_cdagenci;
        rw_crapage cr_crapage%ROWTYPE;
        --Tabelas de Memoria
        vr_tab_extrato_rpp typ_tab_extrato_rpp;
        vr_tab_dados_rpp   apli0001.typ_tab_dados_rpp;
        --Indices para temp-tables
        vr_index_dados_rpp   PLS_INTEGER;
        vr_index_extrato_rpp PLS_INTEGER;
     
        --Variaveis Locais
        vr_vlblqjud NUMBER:= 0;
        vr_vlresblq NUMBER:= 0;
        vr_vlblqapl NUMBER:= 0;
        vr_vlblqpou NUMBER:= 0;
        vr_vltotrpp NUMBER:= 0;
        vr_vltotres NUMBER:= 0;
        vr_percenir NUMBER;
        vr_flgfirst BOOLEAN;
        vr_dsblqjud VARCHAR2(500);
        vr_dsextrat VARCHAR2(100);
        vr_dsorigem VARCHAR2(100);
        vr_dstransa VARCHAR2(100);
        vr_nrdrowid ROWID;
        vr_cdoperad     crapope.cdoperad%type;
        vr_nmdatela     crapprg.cdprogra%type; 
        vr_rel_cdagenci crapage.cdagenci%type;
        vr_rel_nmresage crapage.nmresage%type;
        --Registro tipo data
        rw_crapdat btch0001.cr_crapdat%ROWTYPE;
        --Variaveis dos Arquivos
        vr_typ_saida VARCHAR2(3);
        vr_comando   VARCHAR2(100);
        vr_nmdireto  VARCHAR2(100);
        vr_nmendter  VARCHAR2(100);
        vr_setlinha  VARCHAR2(100);
        --CLOB de Dados
        vr_clobxml209  CLOB;
        vr_dstexto    VARCHAR2(32600);
        vr_dstexto209  VARCHAR2(32600);
        --Variaveis Erro
        vr_cdcritic INTEGER;
        vr_dscritic VARCHAR2(4000);
        vr_des_reto VARCHAR2(3);                               
        --Variaveis de Excecoes
        vr_exc_erro EXCEPTION;
        vr_exc_sair EXCEPTION;
        
        vr_nmaction VARCHAR2(32) := 'pc_gera_impextppr';
      BEGIN

        gene0001.pc_set_modulo(pr_module => NULL, pr_action => vr_nmaction);

        --Limpar Tabela Erro
        pr_tab_erro.DELETE;
        
        /*** Busca Saldo Bloqueado Judicial ***/
        gene0005.pc_retorna_valor_blqjud (pr_cdcooper => pr_cdcooper          --Cooperativa
                                         ,pr_nrdconta => pr_nrdconta          --Conta Corrente
                                         ,pr_nrcpfcgc => 0 /*fixo*/           --Cpf/cnpj
                                         ,pr_cdtipmov => 1 /*bloqueio*/       --Tipo Movimento
                                         ,pr_cdmodali => 3 /*Poupanca Prog.*/ --Modalidade
                                         ,pr_dtmvtolt => pr_dtmvtolt          --Data Atual
                                         ,pr_vlbloque => vr_vlblqjud          --Valor Bloqueado
                                         ,pr_vlresblq => vr_vlresblq          --Valor Residual
                                         ,pr_dscritic => vr_dscritic);        --Critica
         --Se ocorreu erro
         IF vr_dscritic IS NOT NULL THEN
           --Levantar Excecao
           RAISE vr_exc_erro;
         END IF;

        /*** Busca valor bloquedo garantia epr ***/
        vr_vlblqapl := 0;
        vr_vlblqpou := 0;
        bloq0001.pc_calc_bloqueio_garantia( pr_cdcooper => pr_cdcooper          --Cooperativa
                                           ,pr_nrdconta => pr_nrdconta          --Conta Corrente                                        
                                           ,pr_vlbloque_aplica => vr_vlblqapl   --Valor Bloqueado aplicacao
                                           ,pr_vlbloque_poupa  => vr_vlblqpou   --Valor Bloqueado poupanca
                                           ,pr_dscritic        => vr_dscritic);  --Critica
        --Se ocorreu erro
        IF vr_dscritic IS NOT NULL THEN
          --Levantar Excecao
          RAISE vr_exc_erro;
        END IF; 
         

        --Atribuir Descricao da Origem
        vr_dsorigem:= GENE0001.vr_vet_des_origens(pr_idorigem);
        --Atribuir Descricao da Transacao
        vr_dstransa:= 'Consultar dados para extrato de poupanca.';
        --Inicializar variaveis
        vr_cdcritic:= 0;
        vr_dscritic:= NULL;
        pr_des_reto:= 'NOK';
        --Definir Operador
        IF pr_inproces = 1  THEN
          vr_cdoperad:= pr_cdoperad;
          vr_nmdatela:= pr_nmdatela;
        ELSE  
          vr_cdoperad:= '1';
          vr_nmdatela:= UPPER(pr_cdprogra);
        END IF;
        
        BEGIN
          -- Verifica se a cooperativa esta cadastrada
          OPEN cr_crapcop (pr_cdcooper => pr_cdcooper);
          FETCH cr_crapcop INTO rw_crapcop;
          -- Se não encontrar
          IF cr_crapcop%NOTFOUND THEN
            -- Fechar o cursor pois haverá raise
            CLOSE cr_crapcop;
            -- Montar mensagem de critica
            vr_cdcritic:= 651;
            RAISE vr_exc_erro;
          ELSE
            -- Apenas fechar o cursor
            CLOSE cr_crapcop;
          END IF;
          
          -- Leitura do calendário da cooperativa
          OPEN btch0001.cr_crapdat(pr_cdcooper => pr_cdcooper);
          FETCH btch0001.cr_crapdat INTO rw_crapdat;
          -- Se não encontrar
          IF btch0001.cr_crapdat%NOTFOUND THEN
            -- Fechar o cursor pois efetuaremos raise
            CLOSE btch0001.cr_crapdat;
            -- Montar mensagem de critica
            vr_cdcritic:= 1;
            RAISE vr_exc_erro;
          ELSE
            -- Apenas fechar o cursor
            CLOSE btch0001.cr_crapdat;
          END IF;
          -- Busca do diretório base da cooperativa para a geração de relatórios
          vr_nmdireto:= gene0001.fn_diretorio(pr_tpdireto => 'C'           --> /usr/coop
                                                 ,pr_cdcooper => pr_cdcooper   --> Cooperativa
                                              ,pr_nmsubdir => 'rl');       --> Utilizaremos o rl
          

          -- Inicializar as informações do XML de dados para o relatório
          dbms_lob.createtemporary(vr_clobxml209, TRUE, dbms_lob.CALL);
          dbms_lob.open(vr_clobxml209, dbms_lob.lob_readwrite);
          --Escrever no arquivo XML
          gene0002.pc_escreve_xml(vr_clobxml209, vr_dstexto209,'<?xml version="1.0" encoding="UTF-8"?><crrl209><contas>');

          --Se nao rodar
          IF NOT pr_flgrodar THEN 
            --Nome Arquivo Impressao
            pr_nmarqimp:= 'crrl209.lst';
          ELSE 
            --Nome Arquivo Impressao e PDF
            vr_nmendter:= pr_dsiduser || gene0002.fn_busca_time;
            pr_nmarqimp:= vr_nmendter || '.ex';
            pr_nmarqpdf:= vr_nmendter || '.pdf';
          END IF;  
          
          --Selecionar associado
          OPEN cr_crapass (pr_cdcooper => pr_cdcooper
                          ,pr_nrdconta => pr_nrdconta);
          --Posicionar no proximo registro
          FETCH cr_crapass INTO rw_crapass;
          --Se nao encontrou
          IF cr_crapass%NOTFOUND THEN
            --Fechar Cursor
            CLOSE cr_crapass;
            --mensagem erro
            vr_cdcritic:= 9;
            vr_dscritic:= 'Conta/dv: '||to_char(pr_nrdconta,'fm9g999g999g0')||
                          '- Associado nao cadastrado!!!!';
            --Colocar todo o texto na variavel auxiliar
            vr_dstexto:= '<conta nrdconta="'||to_char(pr_nrdconta,'fm9g999g999g0')||
                         '" flgmensag="S" dscmensag="'||vr_dscritic||'"></conta>';
            --Escrever no Arquivo
            gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);

            --Popular Clob do relatorio interno
            gene0002.pc_escreve_xml(vr_clobxml209, vr_dstexto209,vr_dstexto);

            --Levantar Excecao
            RAISE vr_exc_sair;
          END IF;  
          --Fechar Cursor
          CLOSE cr_crapass;
          --Selecionar Dados Agencia
          OPEN cr_crapage(pr_cdcooper => pr_cdcooper
                         ,pr_cdagenci => rw_crapass.cdagenci);
          FETCH cr_crapage INTO rw_crapage;
          --Se nao Encontrou            
          IF cr_crapage%NOTFOUND THEN
            vr_rel_cdagenci:= rw_crapass.cdagenci;
            vr_rel_nmresage:= RPAD('*',15,'*');
          ELSE
            vr_rel_cdagenci:= rw_crapage.cdagenci;
            vr_rel_nmresage:= rw_crapage.nmresage;
          END IF;  
          -- Fechar o cursor
          CLOSE cr_crapage;

          gene0001.pc_set_modulo(pr_module => NULL, pr_action => vr_nmaction);

          -- Selecionar informacoes % IR para o calculo da APLI0001.pc_calc_saldo_rpp
          vr_percenir:= GENE0002.fn_char_para_number
                              (TABE0001.fn_busca_dstextab(pr_cdcooper => pr_cdcooper
                                                         ,pr_nmsistem => 'CRED'
                                                         ,pr_tptabela => 'CONFIG'
                                                         ,pr_cdempres => 0
                                                         ,pr_cdacesso => 'PERCIRAPLI'
                                                         ,pr_tpregist => 0));
          --Limpar tabelas memoria
          vr_tab_dados_rpp.DELETE;
          --Executar rotina consulta poupanca
          apli0001.pc_consulta_poupanca (pr_cdcooper => pr_cdcooper            --> Cooperativa 
                                        ,pr_cdagenci => pr_cdagenci            --> Codigo da Agencia
                                        ,pr_nrdcaixa => pr_nrdcaixa            --> Numero do caixa 
                                        ,pr_cdoperad => vr_cdoperad            --> Codigo do Operador
                                        ,pr_idorigem => pr_idorigem            --> Identificador da Origem
                                        ,pr_nrdconta => pr_nrdconta            --> Nro da conta associado
                                        ,pr_idseqttl => pr_idseqttl            --> Identificador Sequencial
                                        ,pr_nrctrrpp => pr_nrctrrpp            --> Contrato Poupanca Programada 
                                        ,pr_dtmvtolt => pr_dtmvtolt            --> Data do movimento atual
                                        ,pr_dtmvtopr => pr_dtmvtopr            --> Data do proximo movimento
                                        ,pr_inproces => pr_inproces            --> Indicador de processo
                                        ,pr_cdprogra => 'IMPRES'               --> Nome do programa chamador
                                        ,pr_flgerlog => FALSE                  --> Flag erro log
                                        ,pr_percenir => vr_percenir            --> % IR para Calculo Poupanca
                                        ,pr_tab_craptab => pr_tab_craptab      --> Tipo de tabela de Conta Bloqueada
                                        ,pr_tab_craplpp => pr_tab_craplpp      --> Tipo de tabela com lancamento poupanca
                                        ,pr_tab_craplrg => pr_tab_craplrg      --> Tipo de tabela com resgates
                                        ,pr_tab_resgate => pr_tab_resgate      --> Tabela com valores dos resgates das contas por aplicacao
                                        ,pr_vlsldrpp    => vr_vltotrpp         --> Valor saldo poupanca programada
                                        ,pr_retorno     => vr_des_reto         --> Descricao de erro ou sucesso OK/NOK 
                                        ,pr_tab_dados_rpp => vr_tab_dados_rpp  --> Poupancas Programadas
                                        ,pr_tab_erro      => pr_tab_erro);     --> Saida com erros;
          --Se retornou erro
          IF vr_des_reto = 'NOK' THEN
            -- Tenta buscar o erro no vetor de erro
            IF pr_tab_erro.COUNT > 0 THEN
              vr_dscritic:= pr_tab_erro(pr_tab_erro.FIRST).dscritic;
            ELSE
              vr_dscritic:= 'Nao foi possivel carregar o extrato.';
            END IF;
            vr_dscritic:= 'Conta/dv: '||to_char(pr_nrdconta,'fm99g999g999g9')||' - '||vr_dscritic;
            --Colocar todo o texto na variavel auxiliar
            vr_dstexto:= '<conta nrdconta="'||to_char(pr_nrdconta,'fm9g999g999g0')||
                         '" flgmensag="S" dscmensag="'||vr_dscritic||'"></conta>';
            --Escrever no Arquivo
            gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);

            --Popular Clob do relatorio interno
            gene0002.pc_escreve_xml(vr_clobxml209, vr_dstexto209,vr_dstexto);

            --Levantar Excecao
            RAISE vr_exc_sair;          
          END IF;
          
          gene0001.pc_set_modulo(pr_module => NULL, pr_action => vr_nmaction);

          --Percorrer dados extrato da poupanca
          vr_index_dados_rpp:= vr_tab_dados_rpp.FIRST;
          WHILE vr_index_dados_rpp IS NOT NULL LOOP
                IF (pr_tpapprog = 0) OR -- Processar tudo
                   (pr_tpapprog = 1 AND vr_tab_dados_rpp(vr_index_dados_rpp).cdprodut<1) OR -- Apenas RPP
                   (pr_tpapprog = 2 AND vr_tab_dados_rpp(vr_index_dados_rpp).cdprodut>0) THEN  -- Apenas Novas
            --Limpar tabela Memoria
            vr_tab_extrato_rpp.DELETE;
            --Consultar Extrato Poupanca
            pc_consulta_extrato_poup (pr_cdcooper    => pr_cdcooper             --Codigo Cooperativa
                                     ,pr_cdagenci    => pr_cdagenci             --Codigo Agencia
                                     ,pr_nrdcaixa    => pr_nrdcaixa             --Numero do Caixa
                                     ,pr_cdoperad    => vr_cdoperad             --Codigo Operador
                                     ,pr_nmdatela    => 'IMPRES'                --Nome da Tela
                                     ,pr_idorigem    => pr_idorigem             --Origem da Chamada
                                     ,pr_nrdconta    => pr_nrdconta             --Numero da Conta do Associado
                                     ,pr_idseqttl    => pr_idseqttl             --Sequencial do Titular
                                     ,pr_nrctrrpp    => vr_tab_dados_rpp(vr_index_dados_rpp).nrctrrpp   --Numero Contrato Poupanca
                                     ,pr_dtiniper    => pr_dtiniper             --Periodo inicial
                                     ,pr_dtfimper    => pr_dtfimper             --Periodo Final
                                     ,pr_flgerlog    => FALSE                   --Imprimir log
                                     ,pr_tab_extrato_rpp => vr_tab_extrato_rpp  --Tabela Extrato Poupanca
                                     ,pr_des_reto    => vr_des_reto             --Retorno OK ou NOK
                                     ,pr_tab_erro    => pr_tab_erro);           --Tabela de Erros
            --Se retornou erro
            IF vr_des_reto = 'NOK' THEN
              -- Tenta buscar o erro no vetor de erro
              IF pr_tab_erro.COUNT > 0 THEN
                vr_dscritic:= pr_tab_erro(pr_tab_erro.FIRST).dscritic;
              ELSE
                vr_dscritic:= 'Nao foi possivel carregar o extrato.';
              END IF;
              vr_dscritic:= 'Conta/dv: '||to_char(pr_nrdconta,'fm99g999g999g9')||' - '||vr_dscritic;
              --Colocar todo o texto na variavel auxiliar
              vr_dstexto:= '<conta nrdconta="'||to_char(pr_nrdconta,'fm9g999g999g0')||
                           '" flgmensag="S" dscmensag="'||vr_dscritic||'"></conta>';
              --Escrever no Arquivo
              gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);

              --Popular Clob do relatorio interno
              gene0002.pc_escreve_xml(vr_clobxml209, vr_dstexto209,vr_dstexto);

              --Levantar Excecao
              RAISE vr_exc_sair;          
            END IF;
            
            vr_dsblqjud:= ' dsmssaldo="SALDO DISPONIVEL R$                        '||
                            to_char(nvl(vr_vltotrpp,0),'fm999g999g999g990d00')||'"'; --vr_vltotrpp
            --Verificar se possui bloqueio judicial
            vr_dsblqjud:= vr_dsblqjud ||' flgmsgjud="S" dsmsgjud="VALOR BLOQUEADO JUDICIALMENTE R$               '|| 
                            to_char(nvl(vr_vlblqjud,0),'fm999g999g999g990d00')||'"'; 
            
            --Verificar se possui bloqueio de garantia de aplicacao
            vr_dsblqjud:= vr_dsblqjud ||' flgmsggar="S" dsmsggar="VALOR BLOQUEADO COBERTURA GARANTIA R$      '||
                            to_char(nvl(vr_vlblqpou,0),'fm999g999g999g990d00')||'"'; 
            vr_vltotres := GREATEST(0,nvl(vr_vltotrpp,0) - (nvl(vr_vlblqjud,0) + nvl(vr_vlblqpou,0)));
						
            vr_dsblqjud:= vr_dsblqjud ||' dsmsslddis="SALDO DISPONIVEL PARA RESGATE R$           '||
                                          to_char(vr_vltotres,'fm999g999g999g990d00')||'"';
            
            --Verificar se possui extratos de poupanca
            IF vr_tab_extrato_rpp.COUNT = 0 THEN
              vr_dsextrat:= '<extratos flgmsgext="S" dsmsgext="** NAO HA LANCAMENTOS NO MES **">';
            ELSE
              vr_dsextrat:= '<extratos flgmsgext="N" dsmsgext="">';  
            END IF;  
            --Montar texto
            vr_dstexto:= '<conta cdagenci="'||vr_rel_cdagenci||
                         '" nmresage="'||vr_rel_nmresage||
                         '" nrdconta="'||to_char(rw_crapass.nrdconta,'fm9g999g999g0')||
                         '" nmprimtl="'||rw_crapass.nmprimtl||
                         '" nrctrrpp="'||to_char(vr_tab_dados_rpp(vr_index_dados_rpp).nrctrrpp,'fm99g999g990')||
                         '" dtvctopp="'||to_char(vr_tab_dados_rpp(vr_index_dados_rpp).dtvctopp,'DD/MM/YYYY')||
                         '" dtiniper="'||to_char(pr_dtiniper,'DD/MM/YYYY')||
                         '" dtfimper="'||to_char(pr_dtfimper,'DD/MM/YYYY')||
                         '" flgmensag="N" dscmensag=""'||vr_dsblqjud||'>'||vr_dsextrat;
            --Escrever no Arquivo
            gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);
            
            --Popular Clob do relatorio interno
            gene0002.pc_escreve_xml(vr_clobxml209, vr_dstexto209,vr_dstexto);
            
            --Marcar primeiro registro
            vr_flgfirst:= TRUE;
            --Percorrer todos os extratos de poupanca
            vr_index_extrato_rpp:= vr_tab_extrato_rpp.FIRST;
            WHILE vr_index_extrato_rpp IS NOT NULL LOOP
              --Se for o primeiro registro
              IF vr_flgfirst THEN
                --Montar texto
                vr_dstexto:= 
                    '<extrato>' ||
                      '<dtmvtolt>' || to_char(vr_tab_extrato_rpp(vr_index_extrato_rpp).dtmvtolt,'DD/MM/YY') || '</dtmvtolt>' ||
                      '<dsextrat>' || 'SLD. ANTERIOR' || '</dsextrat>' ||
                      '<nrdocmto></nrdocmto>' ||
                       '<vllanmto></vllanmto>' ||
                       '<indebcre></indebcre>' ||
                      '<vlsldppr>' || to_char(vr_tab_extrato_rpp(vr_index_extrato_rpp).vlsldppr,'fm99999g999g990d00')||'</vlsldppr>' ||
                      '<txaplmes></txaplmes>' ||
                    '</extrato>';
                --Escrever no Arquivo
                gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);

                --Popular Clob do relatorio interno
                gene0002.pc_escreve_xml(vr_clobxml209, vr_dstexto209,vr_dstexto);

                --Marcar que primeiro ja foi
                vr_flgfirst:= FALSE;
              ELSE
                --Se a taxa for zero enviar null
                IF NVL(vr_tab_extrato_rpp(vr_index_extrato_rpp).txaplmes,0) = 0 THEN
                  vr_tab_extrato_rpp(vr_index_extrato_rpp).txaplmes:= NULL;
                END IF;  
                --Montar texto
                vr_dstexto:= 
                    '<extrato>' ||
                      '<dtmvtolt>' || to_char(vr_tab_extrato_rpp(vr_index_extrato_rpp).dtmvtolt,'DD/MM/YY') || '</dtmvtolt>' ||
                      '<dsextrat>' || vr_tab_extrato_rpp(vr_index_extrato_rpp).dsextrat || '</dsextrat>' ||
                      '<nrdocmto>' || to_char(vr_tab_extrato_rpp(vr_index_extrato_rpp).nrdocmto,'fm999g999g990') || '</nrdocmto>' ||
                       '<vllanmto>' || to_char(vr_tab_extrato_rpp(vr_index_extrato_rpp).vllanmto,'fm99999g999g990d00') || '</vllanmto>' ||
                       '<indebcre>' || vr_tab_extrato_rpp(vr_index_extrato_rpp).indebcre ||'</indebcre>' ||
                      '<vlsldppr>' || to_char(vr_tab_extrato_rpp(vr_index_extrato_rpp).vlsldppr,'fm99999g999g990d00')||'</vlsldppr>' ||
                      '<txaplmes>' || to_char(vr_tab_extrato_rpp(vr_index_extrato_rpp).txaplmes,'fm990d000000')||'</txaplmes>' ||
                    '</extrato>';
                --Escrever no Arquivo
                gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);

                --Popular Clob do relatorio interno
                gene0002.pc_escreve_xml(vr_clobxml209, vr_dstexto209,vr_dstexto);

              END IF; --vr_flgfirst   
              --Proximo Registro
              vr_index_extrato_rpp:= vr_tab_extrato_rpp.NEXT(vr_index_extrato_rpp);
            END LOOP;  --extratos_rpp
            
            --Finaliza TAG Extratos e Conta
            gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,'</extratos></conta>');
            --Escreve CLOB Interno
            gene0002.pc_escreve_xml(vr_clobxml209, vr_dstexto209,'</extratos></conta>');
                END IF;
            --Proximo Registro
            vr_index_dados_rpp:= vr_tab_dados_rpp.NEXT(vr_index_dados_rpp);
          END LOOP; --dados_rpp

          gene0001.pc_set_modulo(pr_module => NULL, pr_action => vr_nmaction);

          IF pr_flgrodar = TRUE THEN              
            --Finaliza Clob Interno
            gene0002.pc_escreve_xml(vr_clobxml209, vr_dstexto209,'</contas></crrl209>',TRUE);
            -- Gera relatório 209
            gene0002.pc_solicita_relato(pr_cdcooper  => pr_cdcooper                   --> Cooperativa conectada
                                       ,pr_cdprogra  => pr_cdprogra                   --> Programa chamador
                                       ,pr_dtmvtolt  => pr_dtmvtolt                   --> Data do movimento atual
                                       ,pr_dsxml     => vr_clobxml209                 --> Arquivo XML de dados
                                       ,pr_dsxmlnode => '/crrl209/contas/conta'       --> Nó base do XML para leitura dos dados
                                       ,pr_dsjasper  => 'crrl209.jasper'              --> Arquivo de layout do iReport
                                       ,pr_dsparams  => NULL                          --> Sem parâmetros
                                       ,pr_cdrelato => 209                            --> Código fixo para o relatório (nao busca pelo sqcabrel)                                         
                                       ,pr_dsarqsaid => vr_nmdireto||'/'||pr_nmarqimp  --> Arquivo final com o path
                                       ,pr_qtcoluna  => 80                            --> Colunas do relatorio
                                       ,pr_flg_gerar => 'S'                           --> Geraçao na hora
                                       ,pr_flg_impri => 'N'                           --> Chamar a impressão (Imprim.p)
                                       ,pr_nmformul  => NULL                          --> Nome do formulário para impressão
                                       ,pr_nrcopias  => 1                             --> Número de cópias
                                       ,pr_sqcabrel  => 1                             --> Qual a seq do cabrel
                                       ,pr_flappend  => 'S'                           --> Fazer append do relatorio se ja existir
                                       ,pr_nrvergrl  => 1                             --> Versao do relatorio
                                       ,pr_des_erro  => vr_dscritic);                 --> Saída com erro
            --Se ocorreu erro no relatorio
            IF vr_dscritic IS NOT NULL THEN
              --Levantar Excecao
              RAISE vr_exc_sair;
            END IF; 
              
            IF pr_idorigem = 5  THEN                
              --Enviar arquivo para Web
              GENE0002.pc_envia_arquivo_web (pr_cdcooper => pr_cdcooper        --Codigo Cooperativa
                                   ,pr_cdagenci => pr_cdagenci        --Codigo Agencia
                                   ,pr_nrdcaixa => pr_nrdcaixa        --Numero do Caixa
                                   ,pr_nmarqimp => pr_nmarqimp        --Nome Arquivo Impressao
                                   ,pr_nmdireto => vr_nmdireto        --Nome Diretorio
                                   ,pr_nmarqpdf => pr_nmarqpdf        --Nome Arquivo PDF
                                   ,pr_des_reto => vr_des_reto        --Retorno OK/NOK
                                   ,pr_tab_erro => pr_tab_erro);      --tabela erro
              --Se ocorreu erro
              IF vr_des_reto <> 'OK' THEN
                --Se tem erro na tabela 
                IF pr_tab_erro.COUNT > 0 THEN
                  vr_dscritic:= pr_tab_erro(pr_tab_erro.FIRST).dscritic;
                ELSE
                  vr_dscritic:= 'Erro ao enviar arquivo para web.';  
                END IF; 
                --Sair 
                RAISE vr_exc_sair;
              END IF; 
            END IF;
                
            --Fechar Clob e Liberar Memoria  
            dbms_lob.close(vr_clobxml209);
            dbms_lob.freetemporary(vr_clobxml209); 
          END IF;

          --Retorno com Sucesso
          pr_des_reto:= 'OK';

          gene0001.pc_set_modulo(pr_module => NULL, pr_action => vr_nmaction);

        EXCEPTION
          WHEN vr_exc_sair THEN
            pr_des_reto:= 'OK';
            vr_cdcritic:= NULL;
            vr_dscritic:= NULL;
          WHEN vr_exc_erro THEN
            RAISE vr_exc_erro;
        END;
          
        --Se nao tem erro na temp-table 
        IF pr_tab_erro.COUNT = 0 AND (vr_dscritic IS NOT NULL OR nvl(vr_cdcritic,0) <> 0) THEN
          -- Chamar rotina de gravacao de erro
          gene0001.pc_gera_erro (pr_cdcooper => pr_cdcooper
                                ,pr_cdagenci => pr_cdagenci
                                ,pr_nrdcaixa => pr_nrdcaixa
                                ,pr_nrsequen => 1  /** Sequencia **/
                                ,pr_cdcritic => vr_cdcritic
                                ,pr_dscritic => vr_dscritic
                                ,pr_tab_erro => pr_tab_erro);
        END IF;
        --Escrever erro no Log
        IF pr_flgerlog THEN  
          --Executar rotina geracao log
          gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                              ,pr_cdoperad => vr_cdoperad
                              ,pr_dscritic => vr_dscritic
                              ,pr_dsorigem => vr_dsorigem
                              ,pr_dstransa => vr_dstransa
                              ,pr_dttransa => TRUNC(SYSDATE)
                              ,pr_flgtrans => (CASE pr_des_reto WHEN 'OK' THEN 1 ELSE 0 END)
                              ,pr_hrtransa => gene0002.fn_busca_time
                              ,pr_idseqttl => 1
                              ,pr_nmdatela => vr_nmdatela
                              ,pr_nrdconta => pr_nrdconta
                              ,pr_nrdrowid => vr_nrdrowid);
        END IF;          

        gene0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);

      EXCEPTION
        WHEN vr_exc_erro THEN
          -- Retorno não OK
          pr_des_reto := 'NOK';
          -- Chamar rotina de gravação de erro
          gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                               ,pr_cdagenci => pr_cdagenci
                               ,pr_nrdcaixa => pr_nrdcaixa
                               ,pr_nrsequen => 1 --> Fixo
                               ,pr_cdcritic => 0 --> Critica 0
                               ,pr_dscritic => vr_dscritic
                               ,pr_tab_erro => pr_tab_erro);
          -- Se foi solicitado geração de LOG
          IF pr_flgerlog THEN
            -- Chamar geração de LOG
            gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                                ,pr_cdoperad => pr_cdoperad
                                ,pr_dscritic => vr_dscritic
                                ,pr_dsorigem => vr_dsorigem
                                ,pr_dstransa => vr_dstransa
                                ,pr_dttransa => TRUNC(SYSDATE)
                                ,pr_flgtrans => 0 --> FALSE
                                ,pr_hrtransa => gene0002.fn_busca_time
                                ,pr_idseqttl => pr_idseqttl
                                ,pr_nmdatela => pr_nmdatela
                                ,pr_nrdconta => pr_nrdconta
                                ,pr_nrdrowid => vr_nrdrowid);
          END IF;  
        WHEN OTHERS THEN
          cecred.pc_internal_exception;
          -- Retorno não OK
          pr_des_reto := 'NOK';
          -- Chamar rotina de gravação de erro
          vr_dscritic := 'Erro na pc_gera_impextppr --> '|| sqlerrm;
          gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                               ,pr_cdagenci => pr_cdagenci
                               ,pr_nrdcaixa => pr_nrdcaixa
                               ,pr_nrsequen => 1 --> Fixo
                               ,pr_cdcritic => 0 --> Critica 0
                               ,pr_dscritic => vr_dscritic
                               ,pr_tab_erro => pr_tab_erro);
          -- Se foi solicitado geração de LOG
          IF pr_flgerlog THEN
            -- Chamar geração de LOG
            gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                                ,pr_cdoperad => pr_cdoperad
                                ,pr_dscritic => vr_dscritic
                                ,pr_dsorigem => vr_dsorigem
                                ,pr_dstransa => vr_dstransa
                                ,pr_dttransa => TRUNC(SYSDATE)
                                ,pr_flgtrans => 0 --> FALSE
                                ,pr_hrtransa => gene0002.fn_busca_time
                                ,pr_idseqttl => pr_idseqttl
                                ,pr_nmdatela => pr_nmdatela
                                ,pr_nrdconta => pr_nrdconta
                                ,pr_nrdrowid => vr_nrdrowid);
          END IF;  
      END;
    END pc_gera_impextppr;  

    -- Subrotina para gerar extrato Capital
    PROCEDURE pc_gera_impextcap (pr_cdcooper IN crapcop.cdcooper%TYPE  --Codigo Cooperativa
                                ,pr_cdagenci IN crapass.cdagenci%TYPE  --Codigo Agencia
                                ,pr_nrdcaixa IN INTEGER                --Numero do Caixa
                                ,pr_idorigem IN INTEGER                --Origem dos Dados
                                ,pr_nmdatela IN VARCHAR2               --Nome da Tela                                
                                ,pr_dtmvtolt IN crapdat.dtmvtolt%TYPE  --Data Movimento
                                ,pr_inproces IN INTEGER                --Indicador Processo
                                ,pr_cdprogra IN crapprg.cdprogra%TYPE  --Codigo Programa
                                ,pr_cdoperad IN VARCHAR2               --Codigo Operador
                                ,pr_dsiduser IN VARCHAR2               --Identificador Usuario
                                ,pr_nrdconta IN crapass.nrdconta%TYPE  --Numero da Conta do Associado
                                ,pr_dtrefere IN DATE                   --Data de Referencia
                                ,pr_idseqttl IN crapttl.idseqttl%TYPE  --Sequencial do Titular                                                                
                                ,pr_flgrodar IN BOOLEAN                --Flag Executar
                                ,pr_flgerlog IN BOOLEAN                --Escreve erro Log
                                ,pr_clobxml  IN OUT NOCOPY CLOB        --Clob arquivo de dados
                                ,pr_dstexto  IN OUT NOCOPY VARCHAR2    --Texto Clob
                                ,pr_nmarqimp OUT VARCHAR2              --Nome Arquivo Impressao
                                ,pr_nmarqpdf OUT VARCHAR2              --Nome Arquivo PDF
                                ,pr_tab_erro OUT GENE0001.typ_tab_erro --Tabela de Erros
                                ,pr_des_reto OUT VARCHAR2 ) IS         --Descricao Erro
  BEGIN
  ---------------------------------------------------------------------------------------------------------------
  --
  --  Programa : pc_gera_impextcap                     Antigo: procedures/b1wgen0112.p/gera-impextcap
  --  Sistema  : 
  --  Sigla    : CRED
  --  Autor    : Alisson C. Berrido - Amcom
  --  Data     : Julho/2014                           Ultima atualizacao: 20/04/2016
  --
  -- Dados referentes ao programa:
  --
  -- Frequencia: -----
  -- Objetivo   : Procedure para obter impressao do extrato do capital do associado
  --
  -- Alterações : 02/07/2014 - Conversão Progress -> Oracle (Alisson - AMcom)
  --              
  --              20/04/2016 - Remover comando rm e incluir direto na tela impres 
  --                           (Lucas Ranghetti/Rodrigo #399412)              
  ---------------------------------------------------------------------------------------------------------------
  DECLARE
        -- Busca dos dados da cooperativa
        CURSOR cr_crapcop (pr_cdcooper IN crapcop.cdcooper%TYPE) IS
          SELECT crapcop.nmrescop
                ,crapcop.nmextcop
          FROM crapcop crapcop
          WHERE crapcop.cdcooper = pr_cdcooper;
        rw_crapcop cr_crapcop%ROWTYPE;  
        -- Busca dos dados do associado
        CURSOR cr_crapass(pr_cdcooper IN crapcop.cdcooper%TYPE
                         ,pr_nrdconta IN crapass.nrdconta%TYPE) IS
          SELECT crapass.nrdconta
                ,crapass.nmprimtl
                ,crapass.vllimcre
                ,crapass.nrcpfcgc
                ,crapass.inpessoa
                ,crapass.cdcooper
                ,crapass.cdagenci
          FROM crapass crapass
          WHERE crapass.cdcooper = pr_cdcooper
          AND   crapass.nrdconta = pr_nrdconta;
        rw_crapass cr_crapass%ROWTYPE;
        -- Cursor para busca a agencia
        CURSOR cr_crapage(pr_cdcooper IN crapage.cdcooper%TYPE
                         ,pr_cdagenci IN crapage.cdagenci%TYPE) IS
          SELECT crapage.nmcidade
                ,crapage.cdagenci
                ,crapage.nmresage
                ,crapage.qtddlslf
          FROM crapage crapage
          WHERE crapage.cdcooper = pr_cdcooper 
          AND   crapage.cdagenci = pr_cdagenci;
        rw_crapage cr_crapage%ROWTYPE;
        --Tabelas de Memoria
        vr_tab_extrato_cotas typ_tab_extrato_cotas;
        --Variaveis Locais
        vr_vlblqjud NUMBER:= 0;
        vr_vlresblq NUMBER:= 0;
        vr_vlsldant NUMBER:= 0;
        vr_flgfirst BOOLEAN;
        vr_dsblqjud VARCHAR2(100);
        vr_dsextrat VARCHAR2(100);
        vr_dsorigem VARCHAR2(100);
        vr_dstransa VARCHAR2(100);
        vr_nrdrowid ROWID;
        vr_cdoperad crapope.cdoperad%type;
        vr_nmdatela crapprg.cdprogra%type; 
        vr_dsagenci VARCHAR2(100);
        --Indices das temp-tables
        vr_index_extrato_cotas PLS_INTEGER;
        --Variaveis dos Arquivos
        vr_typ_saida VARCHAR2(3);
        vr_comando   VARCHAR2(100);
        vr_nmdireto  VARCHAR2(100);
        vr_nmendter  VARCHAR2(100);
        vr_setlinha  VARCHAR2(100);
        --CLOB de Dados
        vr_clobxml143  CLOB;
        vr_dstexto     VARCHAR2(32600);
        vr_dstexto143  VARCHAR2(32600);
        --Variaveis Erro
        vr_cdcritic INTEGER;
        vr_dscritic VARCHAR2(4000);
        vr_des_reto VARCHAR2(3);                               
        --Variaveis de Excecoes
        vr_exc_erro EXCEPTION;
        vr_exc_sair EXCEPTION;
        
        vr_nmaction VARCHAR2(32) := 'pc_gera_impextcap';
      BEGIN

        gene0001.pc_set_modulo(pr_module => NULL, pr_action => vr_nmaction);

        --Limpar Tabela Erro
        pr_tab_erro.DELETE;
        
        /*** Busca Saldo Bloqueado Judicial ***/
        gene0005.pc_retorna_valor_blqjud (pr_cdcooper => pr_cdcooper            --Cooperativa
                                         ,pr_nrdconta => pr_nrdconta            --Conta Corrente
                                         ,pr_nrcpfcgc => 0 /*fixo*/             --Cpf/cnpj
                                         ,pr_cdtipmov => 3 /*bloqueio Capital*/ --Tipo Movimento
                                         ,pr_cdmodali => 4 /*Capital*/          --Modalidade
                                         ,pr_dtmvtolt => pr_dtmvtolt            --Data Atual
                                         ,pr_vlbloque => vr_vlblqjud            --Valor Bloqueado
                                         ,pr_vlresblq => vr_vlresblq            --Valor Residual
                                         ,pr_dscritic => vr_dscritic);          --Critica
         --Se ocorreu erro
         IF vr_dscritic IS NOT NULL THEN
           --Levantar Excecao
           RAISE vr_exc_erro;
         END IF;

        --Atribuir Descricao da Origem
        vr_dsorigem:= GENE0001.vr_vet_des_origens(pr_idorigem);
        --Atribuir Descricao da Transacao
        vr_dstransa:= 'Consultar dados para extrato do capital.';
        --Inicializar variaveis
        vr_cdcritic:= 0;
        vr_dscritic:= NULL;
        pr_des_reto:= 'NOK';
        --Definir Operador
        IF pr_inproces = 1  THEN
          vr_cdoperad:= pr_cdoperad;
          vr_nmdatela:= pr_nmdatela;
        ELSE  
          vr_cdoperad:= '1';
          vr_nmdatela:= UPPER(pr_cdprogra);
        END IF;
        
        BEGIN
          -- Verifica se a cooperativa esta cadastrada
          OPEN cr_crapcop (pr_cdcooper => pr_cdcooper);
          FETCH cr_crapcop INTO rw_crapcop;
          -- Se não encontrar
          IF cr_crapcop%NOTFOUND THEN
            -- Fechar o cursor pois haverá raise
            CLOSE cr_crapcop;
            -- Montar mensagem de critica
            vr_cdcritic:= 651;
            RAISE vr_exc_erro;
          ELSE
            -- Apenas fechar o cursor
            CLOSE cr_crapcop;
          END IF;
          
          -- Busca do diretório base da cooperativa para a geração de relatórios
          vr_nmdireto:= gene0001.fn_diretorio(pr_tpdireto => 'C'           --> /usr/coop
                                             ,pr_cdcooper => pr_cdcooper   --> Cooperativa
                                             ,pr_nmsubdir => 'rl');       --> Utilizaremos o rl

          -- Inicializar as informações do XML de dados para o relatório
          dbms_lob.createtemporary(vr_clobxml143, TRUE, dbms_lob.CALL);
          dbms_lob.open(vr_clobxml143, dbms_lob.lob_readwrite);
          --Escrever no arquivo XML
          gene0002.pc_escreve_xml(vr_clobxml143, vr_dstexto143,'<?xml version="1.0" encoding="UTF-8"?><crrl143><contas>');
          
          --Se nao rodar
          IF NOT pr_flgrodar THEN 
            --Nome Arquivo Impressao
            pr_nmarqimp:= 'crrl143.lst';
          ELSE 
            --Nome Arquivo Impressao e PDF
            vr_nmendter:= pr_dsiduser || gene0002.fn_busca_time;
            pr_nmarqimp:= vr_nmendter || '.ex';
            pr_nmarqpdf:= vr_nmendter || '.pdf';
          END IF;  
          
          --Selecionar associado
          OPEN cr_crapass (pr_cdcooper => pr_cdcooper
                          ,pr_nrdconta => pr_nrdconta);
          --Posicionar no proximo registro
          FETCH cr_crapass INTO rw_crapass;
          --Se nao encontrou
          IF cr_crapass%NOTFOUND THEN
            --Fechar Cursor
            CLOSE cr_crapass;
            --mensagem erro
            vr_cdcritic:= 9;
            vr_dscritic:= 'Conta/dv: '||to_char(pr_nrdconta,'fm9g999g999g0')||
                          '- Associado nao cadastrado!!!!';
            --Colocar todo o texto na variavel auxiliar
            vr_dstexto:= '<conta nrdconta="'||to_char(pr_nrdconta,'fm9g999g999g0')||
                         '" flgmensag="S" dscmensag="'||vr_dscritic||'"></conta>';
            --Escrever no Arquivo
            gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);
            
            --Popular Clob do relatorio interno
            gene0002.pc_escreve_xml(vr_clobxml143, vr_dstexto143,vr_dstexto);

            --Levantar Excecao
            RAISE vr_exc_sair;
          END IF;  
          --Fechar Cursor
          CLOSE cr_crapass;
          --Selecionar Dados Agencia
          OPEN cr_crapage(pr_cdcooper => pr_cdcooper
                         ,pr_cdagenci => rw_crapass.cdagenci);
          FETCH cr_crapage INTO rw_crapage;
          --Se Encontrou            
          IF cr_crapage%FOUND THEN
            vr_dsagenci:= rw_crapass.cdagenci||' - '||rw_crapage.nmresage;
          END IF;  
          -- Fechar o cursor
          CLOSE cr_crapage;

          gene0001.pc_set_modulo(pr_module => NULL, pr_action => vr_nmaction);

          --Limpar tabelas memoria
          vr_tab_extrato_cotas.DELETE;
          --Executar rotina consulta cotas associado
          pc_extrato_cotas (pr_cdcooper    => pr_cdcooper                 --Codigo Cooperativa
                           ,pr_cdagenci    => pr_cdagenci                 --Codigo Agencia
                           ,pr_nrdcaixa    => pr_nrdcaixa                 --Numero do Caixa
                           ,pr_cdoperad    => vr_cdoperad                 --Codigo Operador
                           ,pr_nmdatela    => vr_nmdatela                 --Nome da Tela
                           ,pr_idorigem    => pr_idorigem                 --Origem da Chamada
                           ,pr_nrdconta    => pr_nrdconta                 --Numero da Conta do Associado
                           ,pr_idseqttl    => 1                           --Sequencial do Titular
                           ,pr_dtmvtolt    => pr_dtmvtolt                 --Data Movimento
                           ,pr_dtiniper    => pr_dtrefere                 --Periodo inicial
                           ,pr_dtfimper    => pr_dtmvtolt                 --Periodo Final
                           ,pr_flgerlog    => FALSE                       --Imprimir log
                           ,pr_vlsldant    => vr_vlsldant                 --Valor Saldo Anterior
                           ,pr_tab_extrato_cotas => vr_tab_extrato_cotas  --Tabela Extrato Cotas
                           ,pr_des_reto    => vr_des_reto                 --Retorno OK ou NOK
                           ,pr_dscritic    => vr_dscritic);               --Descricao do Erro
          --Se retornou erro
          IF vr_des_reto = 'NOK' THEN
            vr_dscritic:= 'Conta/dv: '||to_char(pr_nrdconta,'fm99g999g999g9')||' - '||vr_dscritic;
            --Colocar todo o texto na variavel auxiliar
            vr_dstexto:= '<conta nrdconta="'||to_char(pr_nrdconta,'fm9g999g999g0')||
                         '" flgmensag="S" dscmensag="'||vr_dscritic||'"></conta>';
            --Escrever no Arquivo
            gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);
            
            --Popular Clob do relatorio interno
            gene0002.pc_escreve_xml(vr_clobxml143, vr_dstexto143,vr_dstexto);

            --Levantar Excecao
            RAISE vr_exc_sair;          
          END IF;
          
          --Verificar se possui bloqueio judicial
          vr_dsblqjud:= ' flgmsgjud="S" dsmsgjud="VALOR BLOQUEADO JUDICIALMENTE R$        '||
                          to_char(nvl(vr_vlblqjud,0),'fm999g999g999g990d00')||'"'; 
          --Verificar se possui extratos de capital
          IF vr_tab_extrato_cotas.COUNT = 0 THEN
            vr_dsextrat:= '<extratos flgmsgext="S" dsmsgext="** NAO HA LANCAMENTOS NO MES **">';
          ELSE
            vr_dsextrat:= '<extratos flgmsgext="N" dsmsgext="">';  
          END IF;  
          --Montar texto
          vr_dstexto:= '<conta nmresage="'||vr_dsagenci||
                         '" nrdconta="'||to_char(rw_crapass.nrdconta,'fm9g999g999g0')||
                         '" nmprimtl="'||rw_crapass.nmprimtl||
                         '" dtrefere="'||to_char(pr_dtrefere,'DD/MM/YYYY')||
                         '" flgmensag="N" dscmensag=""'||vr_dsblqjud||'>'||vr_dsextrat;
          --Escrever no Arquivo
          gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);

          --Popular Clob do relatorio interno
          gene0002.pc_escreve_xml(vr_clobxml143, vr_dstexto143,vr_dstexto);
          
          --Marcar Primeiro registro
          vr_flgfirst:= TRUE;
          --Percorrer todos os extratos de capital
          vr_index_extrato_cotas:= vr_tab_extrato_cotas.FIRST;
          WHILE vr_index_extrato_cotas IS NOT NULL LOOP
            --Se for o primeiro registro
            IF vr_flgfirst THEN
              --Montar texto
              vr_dstexto:= 
                  '<extrato>' ||
                    '<dtmvtolt></dtmvtolt>' ||
                    '<dsextrat>' || 'SALDO ANTERIOR' || '</dsextrat>' ||
                    '<nrdocmto></nrdocmto>' ||
                    '<nrctrpla></nrctrpla>' ||
                     '<indebcre></indebcre>' ||
                     '<vllanmto></vllanmto>' ||
                    '<vlsldtot>' || to_char(vr_vlsldant,'fm99999g999g990d00')||'</vlsldtot>' ||
                  '</extrato>';
              --Escrever no Arquivo
              gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);

              --Popular Clob do relatorio interno
              gene0002.pc_escreve_xml(vr_clobxml143, vr_dstexto143,vr_dstexto);

              --Marcar que primeiro ja foi
              vr_flgfirst:= FALSE;
            END IF;
            --Verificar Numero Plano Capital
            IF nvl(vr_tab_extrato_cotas(vr_index_extrato_cotas).nrctrpla,0) <= 0 THEN
              vr_tab_extrato_cotas(vr_index_extrato_cotas).nrctrpla:= NULL;
            END IF;  
            --Montar texto
            vr_dstexto:= 
                '<extrato>' ||
                  '<dtmvtolt>' || to_char(vr_tab_extrato_cotas(vr_index_extrato_cotas).dtmvtolt,'DD/MM/YYYY') || '</dtmvtolt>' ||
                  '<dsextrat>' || substr(vr_tab_extrato_cotas(vr_index_extrato_cotas).dsextrat,1,20) || '</dsextrat>' ||
                  '<nrdocmto>' || to_char(vr_tab_extrato_cotas(vr_index_extrato_cotas).nrdocmto,'fm999999g990') || '</nrdocmto>' ||
                  '<nrctrpla>' || to_char(vr_tab_extrato_cotas(vr_index_extrato_cotas).nrctrpla,'fm999g999g990') || '</nrctrpla>' ||
                  '<indebcre>' || vr_tab_extrato_cotas(vr_index_extrato_cotas).indebcre ||'</indebcre>' ||
                  '<vllanmto>' || to_char(vr_tab_extrato_cotas(vr_index_extrato_cotas).vllanmto,'fm99999g999g990d00') || '</vllanmto>' ||
                  '<vlsldtot>' || to_char(vr_tab_extrato_cotas(vr_index_extrato_cotas).vlsldtot,'fm99999g999g990d00')||'</vlsldtot>' ||
               '</extrato>';
            --Escrever no Arquivo
            gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);
            
            --Popular Clob do relatorio interno
            gene0002.pc_escreve_xml(vr_clobxml143, vr_dstexto143,vr_dstexto);
            
            --Proximo Registro
            vr_index_extrato_cotas:= vr_tab_extrato_cotas.NEXT(vr_index_extrato_cotas);
          END LOOP;  --extratos_cotas
          
          --Escrever no Arquivo
          gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,'</extratos></conta>');

          IF pr_flgrodar = TRUE THEN
            --Finaliza TAG Extratos e Conta
            gene0002.pc_escreve_xml(vr_clobxml143,vr_dstexto143,'</extratos></conta></contas></crrl143>',TRUE);

            -- Gera relatório 143
            gene0002.pc_solicita_relato(pr_cdcooper  => pr_cdcooper                   --> Cooperativa conectada
                                       ,pr_cdprogra  => pr_cdprogra                   --> Programa chamador
                                       ,pr_dtmvtolt  => pr_dtmvtolt                   --> Data do movimento atual
                                       ,pr_dsxml     => vr_clobxml143                 --> Arquivo XML de dados
                                       ,pr_dsxmlnode => '/crrl143/contas/conta'       --> Nó base do XML para leitura dos dados
                                       ,pr_dsjasper  => 'crrl143.jasper'              --> Arquivo de layout do iReport
                                       ,pr_dsparams  => NULL                          --> Sem parâmetros
                                       ,pr_cdrelato => 143                            --> Código fixo para o relatório (nao busca pelo sqcabrel)                                        
                                       ,pr_dsarqsaid => vr_nmdireto||'/'||pr_nmarqimp --> Arquivo final com o path
                                       ,pr_qtcoluna  => 80                            --> Colunas do relatorio
                                       ,pr_flg_gerar => 'S'                           --> Geraçao na hora
                                       ,pr_flg_impri => 'N'                           --> Chamar a impressão (Imprim.p)
                                       ,pr_nmformul  => NULL                          --> Nome do formulário para impressão
                                       ,pr_nrcopias  => 1                             --> Número de cópias
                                       ,pr_sqcabrel  => 1                             --> Qual a seq do cabrel
                                       ,pr_flappend  => 'S'                           --> Fazer append do relatorio se ja existir
                                       ,pr_des_erro  => vr_dscritic);                 --> Saída com erro
            --Se ocorreu erro no relatorio
            IF vr_dscritic IS NOT NULL THEN
              --Levantar Excecao
              RAISE vr_exc_erro;
            END IF; 
            --Fechar Clob e Liberar Memoria  
            dbms_lob.close(vr_clobxml143);
            dbms_lob.freetemporary(vr_clobxml143); 
  
              --Ayllos Web
            IF pr_idorigem = 5 THEN

              --Enviar arquivo para Web
              GENE0002.pc_envia_arquivo_web (pr_cdcooper => pr_cdcooper        --Codigo Cooperativa
                                   ,pr_cdagenci => pr_cdagenci        --Codigo Agencia
                                   ,pr_nrdcaixa => pr_nrdcaixa        --Numero do Caixa
                                   ,pr_nmarqimp => pr_nmarqimp        --Nome Arquivo Impressao
                                   ,pr_nmdireto => vr_nmdireto        --Nome Diretorio
                                   ,pr_nmarqpdf => pr_nmarqpdf        --Nome Arquivo PDF
                                   ,pr_des_reto => vr_des_reto        --Retorno OK/NOK
                                   ,pr_tab_erro => pr_tab_erro);      --tabela erro
              --Se ocorreu erro
              IF vr_des_reto <> 'OK' THEN
                --Se tem erro na tabela 
                IF pr_tab_erro.COUNT > 0 THEN
                  vr_dscritic:= pr_tab_erro(pr_tab_erro.FIRST).dscritic;
                ELSE
                  vr_dscritic:= 'Erro ao enviar arquivo para web.';  
                END IF; 
                --Sair 
                RAISE vr_exc_erro;
              END IF; 
            END IF; --pr_idorigem = 5
          END IF;  
          --Retorno com Sucesso
          pr_des_reto:= 'OK';

        EXCEPTION
          WHEN vr_exc_sair THEN
            vr_cdcritic:= NULL;
            vr_dscritic:= NULL;
          WHEN vr_exc_erro THEN
            pr_des_reto:= 'NOK';
        END;
          
        gene0001.pc_set_modulo(pr_module => NULL, pr_action => vr_nmaction);

        --Se nao tem erro na temp-table 
        IF pr_tab_erro.COUNT = 0 AND (vr_dscritic IS NOT NULL OR nvl(vr_cdcritic,0) <> 0) THEN
          -- Chamar rotina de gravacao de erro
          gene0001.pc_gera_erro (pr_cdcooper => pr_cdcooper
                                ,pr_cdagenci => pr_cdagenci
                                ,pr_nrdcaixa => pr_nrdcaixa
                                ,pr_nrsequen => 1  /** Sequencia **/
                                ,pr_cdcritic => vr_cdcritic
                                ,pr_dscritic => vr_dscritic
                                ,pr_tab_erro => pr_tab_erro);
        END IF;
        --Escrever erro no Log
        IF pr_flgerlog THEN  
          --Executar rotina geracao log
          gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                              ,pr_cdoperad => vr_cdoperad
                              ,pr_dscritic => vr_dscritic
                              ,pr_dsorigem => vr_dsorigem
                              ,pr_dstransa => vr_dstransa
                              ,pr_dttransa => TRUNC(SYSDATE)
                              ,pr_flgtrans => (CASE pr_des_reto WHEN 'OK' THEN 1 ELSE 0 END)
                              ,pr_hrtransa => gene0002.fn_busca_time
                              ,pr_idseqttl => 1
                              ,pr_nmdatela => vr_nmdatela
                              ,pr_nrdconta => pr_nrdconta
                              ,pr_nrdrowid => vr_nrdrowid);
        END IF;          
        gene0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);         
      EXCEPTION
        WHEN vr_exc_erro THEN
          -- Retorno não OK
          pr_des_reto := 'NOK';
          -- Chamar rotina de gravação de erro
          gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                               ,pr_cdagenci => pr_cdagenci
                               ,pr_nrdcaixa => pr_nrdcaixa
                               ,pr_nrsequen => 1 --> Fixo
                               ,pr_cdcritic => 0 --> Critica 0
                               ,pr_dscritic => vr_dscritic
                               ,pr_tab_erro => pr_tab_erro);
          -- Se foi solicitado geração de LOG
          IF pr_flgerlog THEN
            -- Chamar geração de LOG
            gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                                ,pr_cdoperad => pr_cdoperad
                                ,pr_dscritic => vr_dscritic
                                ,pr_dsorigem => vr_dsorigem
                                ,pr_dstransa => vr_dstransa
                                ,pr_dttransa => TRUNC(SYSDATE)
                                ,pr_flgtrans => 0 --> FALSE
                                ,pr_hrtransa => gene0002.fn_busca_time
                                ,pr_idseqttl => pr_idseqttl
                                ,pr_nmdatela => pr_nmdatela
                                ,pr_nrdconta => pr_nrdconta
                                ,pr_nrdrowid => vr_nrdrowid);
          END IF;  
        WHEN OTHERS THEN
          cecred.pc_internal_exception;
          -- Retorno não OK
          pr_des_reto := 'NOK';
          -- Chamar rotina de gravação de erro
          vr_dscritic := 'Erro na pc_gera_impextcap --> '|| sqlerrm;
          gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                               ,pr_cdagenci => pr_cdagenci
                               ,pr_nrdcaixa => pr_nrdcaixa
                               ,pr_nrsequen => 1 --> Fixo
                               ,pr_cdcritic => 0 --> Critica 0
                               ,pr_dscritic => vr_dscritic
                               ,pr_tab_erro => pr_tab_erro);
          -- Se foi solicitado geração de LOG
          IF pr_flgerlog THEN
            -- Chamar geração de LOG
            gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                                ,pr_cdoperad => pr_cdoperad
                                ,pr_dscritic => vr_dscritic
                                ,pr_dsorigem => GENE0001.vr_vet_des_origens(pr_idorigem)
                                ,pr_dstransa => vr_dstransa
                                ,pr_dttransa => TRUNC(SYSDATE)
                                ,pr_flgtrans => 0 --> FALSE
                                ,pr_hrtransa => gene0002.fn_busca_time
                                ,pr_idseqttl => pr_idseqttl
                                ,pr_nmdatela => pr_nmdatela
                                ,pr_nrdconta => pr_nrdconta
                                ,pr_nrdrowid => vr_nrdrowid);
          END IF;    
      END;
    END pc_gera_impextcap;  
      
    -- Subrotina para gerar extrato Tarifas
    PROCEDURE pc_gera_impexttar (pr_cdcooper IN crapcop.cdcooper%TYPE  --Codigo Cooperativa
                                ,pr_cdagenci IN crapass.cdagenci%TYPE  --Codigo Agencia
                                ,pr_nrdcaixa IN INTEGER                --Numero do Caixa
                                ,pr_idorigem IN INTEGER                --Origem dos Dados
                                ,pr_nmdatela IN VARCHAR2               --Nome da Tela                                
                                ,pr_dtmvtolt IN crapdat.dtmvtolt%TYPE  --Data Movimento
                                ,pr_inproces IN INTEGER                --Indicador Processo
                                ,pr_cdprogra IN crapprg.cdprogra%TYPE  --Codigo Programa
                                ,pr_cdoperad IN VARCHAR2               --Codigo Operador
                                ,pr_dsiduser IN VARCHAR2               --Identificador Usuario
                                ,pr_nrdconta IN crapass.nrdconta%TYPE  --Numero da Conta do Associado
                                ,pr_nranoref IN INTEGER                --Ano de Referencia
                                ,pr_flgrodar IN BOOLEAN                --Flag Executar
                                ,pr_flgerlog IN BOOLEAN                --Escreve erro Log
                                ,pr_clobxml  IN OUT NOCOPY CLOB        --Clob arquivo de dados
                                ,pr_dstexto  IN OUT NOCOPY VARCHAR2    --Texto Clob
                                ,pr_nmarqimp OUT VARCHAR2              --Nome Arquivo Impressao
                                ,pr_nmarqpdf OUT VARCHAR2              --Nome Arquivo PDF
                                ,pr_tab_erro OUT GENE0001.typ_tab_erro --Tabela de Erros
                                ,pr_des_reto OUT VARCHAR2 ) IS         --Descricao Erro
  BEGIN
  ---------------------------------------------------------------------------------------------------------------
  --
  --  Programa : pc_gera_impexttar            Antigo: procedures/b1wgen0112.p/gera-impexttar
  --  Sistema  : 
  --  Sigla    : CRED
  --  Autor    : Alisson C. Berrido - Amcom
  --  Data     : Julho/2014                           Ultima atualizacao: 20/04/2016
  --
  -- Dados referentes ao programa:
  --
  -- Frequencia: -----
  -- Objetivo   : Procedure para gerar extrato tarifas do associado
  --
  -- Alterações : 02/07/2014 - Conversão Progress -> Oracle (Alisson - AMcom)
  --              
  --              20/04/2016 - Remover comando rm e incluir direto na tela impres 
  --                           (Lucas Ranghetti/Rodrigo #399412)              
  ---------------------------------------------------------------------------------------------------------------
  DECLARE
        -- Busca dos dados da cooperativa
        CURSOR cr_crapcop (pr_cdcooper IN crapcop.cdcooper%TYPE) IS
          SELECT crapcop.nmrescop
                ,crapcop.nmextcop
          FROM crapcop crapcop
          WHERE crapcop.cdcooper = pr_cdcooper;
        rw_crapcop cr_crapcop%ROWTYPE;  
        -- Busca dos dados do associado
        CURSOR cr_crapass(pr_cdcooper IN crapcop.cdcooper%TYPE
                         ,pr_nrdconta IN crapass.nrdconta%TYPE) IS
          SELECT crapass.nrdconta
                ,crapass.nmprimtl
                ,crapass.vllimcre
                ,crapass.nrcpfcgc
                ,crapass.inpessoa
                ,crapass.cdcooper
                ,crapass.cdagenci
          FROM crapass crapass
          WHERE crapass.cdcooper = pr_cdcooper
          AND   crapass.nrdconta = pr_nrdconta;
        rw_crapass cr_crapass%ROWTYPE;
        --Tabelas de Memoria
        vr_tab_extrato_cotas typ_tab_extrato_cotas;
        --Variaveis Locais
        vr_vlblqjud NUMBER:= 0;
        vr_vlresblq NUMBER:= 0;
        vr_vlsldant NUMBER:= 0;
        vr_flgfirst BOOLEAN;
        vr_dsblqjud VARCHAR2(100);
        vr_dsextrat VARCHAR2(100);
        vr_dsorigem VARCHAR2(100);
        vr_dstransa VARCHAR2(100);
        vr_nrdrowid ROWID;
        vr_cdoperad crapope.cdoperad%type;
        vr_nmdatela crapprg.cdprogra%type; 
        vr_dsagenci VARCHAR2(100);
        --Tabelas de memoria
        vr_tab_dados_cooperado typ_tab_dados_cooperado;
        vr_tab_tarifas typ_tab_tarifas;
        vr_tab_totdomes typ_tab_number;
        --Indices das temp-tables
		vr_index_tarifas VARCHAR(100);
        vr_index_dados_cooperado PLS_INTEGER;
        --Variaveis dos Arquivos
        vr_typ_saida VARCHAR2(3);
        vr_comando   VARCHAR2(100);
        vr_nmdireto  VARCHAR2(100);
        vr_nmendter  VARCHAR2(100);
        vr_setlinha  VARCHAR2(100);
        vr_linha     VARCHAR2(1000); 
        --CLOB de Dados
        vr_clobxml499  CLOB;
        vr_dstexto     VARCHAR2(32600);
        vr_dstexto499  VARCHAR2(32600); 
        --Variaveis Erro
        vr_cdcritic INTEGER;
        vr_dscritic VARCHAR2(4000);
        vr_des_reto VARCHAR2(3);                      
        --Variaveis de Excecoes
        vr_exc_erro EXCEPTION;
        vr_exc_sair EXCEPTION;
        
        vr_nmaction VARCHAR2(32) := 'pc_gera_impexttar';
      BEGIN
        
        gene0001.pc_set_modulo(pr_module => NULL, pr_action => vr_nmaction);
      
        --Limpar Tabela Erro
        pr_tab_erro.DELETE;
        
        --Atribuir Descricao da Origem
        vr_dsorigem:= GENE0001.vr_vet_des_origens(pr_idorigem);
        --Atribuir Descricao da Transacao
        vr_dstransa:= 'Consultar dados para extrato de tarifas.';
        --Inicializar variaveis
        vr_cdcritic:= 0;
        vr_dscritic:= NULL;
        pr_des_reto:= 'NOK';
        --Definir Operador
        IF pr_inproces = 1  THEN
          vr_cdoperad:= pr_cdoperad;
          vr_nmdatela:= pr_nmdatela;
        ELSE  
          vr_cdoperad:= '1';
          vr_nmdatela:= UPPER(pr_cdprogra);
        END IF;
        
        BEGIN
          -- Verifica se a cooperativa esta cadastrada
          OPEN cr_crapcop (pr_cdcooper => pr_cdcooper);
          FETCH cr_crapcop INTO rw_crapcop;
          -- Se não encontrar
          IF cr_crapcop%NOTFOUND THEN
            -- Fechar o cursor pois haverá raise
            CLOSE cr_crapcop;
            -- Montar mensagem de critica
            vr_cdcritic:= 651;
            RAISE vr_exc_erro;
          ELSE
            -- Apenas fechar o cursor
            CLOSE cr_crapcop;
          END IF;
          
          -- Busca do diretório base da cooperativa para a geração de relatórios
          vr_nmdireto:= gene0001.fn_diretorio(pr_tpdireto => 'C'           --> /usr/coop
                                             ,pr_cdcooper => pr_cdcooper   --> Cooperativa
                                             ,pr_nmsubdir => 'rl');       --> Utilizaremos o rl
          
          -- Inicializar as informações do XML de dados para o relatório
          dbms_lob.createtemporary(vr_clobxml499, TRUE, dbms_lob.CALL);
          dbms_lob.open(vr_clobxml499, dbms_lob.lob_readwrite);
          --Escrever no arquivo XML
          gene0002.pc_escreve_xml(vr_clobxml499,vr_dstexto499,'<?xml version="1.0" encoding="UTF-8"?><crrl499><contas>');
          
          --Se nao rodar
          IF NOT pr_flgrodar THEN 
            --Nome Arquivo Impressao
            pr_nmarqimp:= 'crrl499.lst';
          ELSE 
            --Nome Arquivo Impressao e PDF
            vr_nmendter:= pr_dsiduser || gene0002.fn_busca_time;
            pr_nmarqimp:= vr_nmendter || '.ex';
            pr_nmarqpdf:= vr_nmendter || '.pdf';
          END IF;  
          
          --Limpar tabelas memoria
          vr_tab_totdomes.DELETE;
          vr_tab_tarifas.DELETE;
          vr_tab_dados_cooperado.DELETE;
          --Executar rotina geracao extrato tarifas
          pc_gera_extrato_tarifas (pr_cdcooper  => pr_cdcooper       --Codigo Cooperativa
                                  ,pr_cdagenci  => pr_cdagenci       --Codigo Agencia
                                  ,pr_nrdcaixa  => pr_nrdcaixa       --Numero do Caixa
                                  ,pr_cdoperad  => vr_cdoperad       --Codigo Operador
                                  ,pr_nrdconta  => pr_nrdconta       --Numero da Conta do Associado
                                  ,pr_anorefer  => pr_nranoref       --Ano Referencia
                                  ,pr_idorigem  => pr_idorigem       --Origem dos Dados
                                  ,pr_idseqttl  => 1                 --Sequencial do Titular
                                  ,pr_nmdatela  => vr_nmdatela       --Nome da Tela
                                  ,pr_flgerlog  => FALSE             --Imprimir log
                                  ,pr_dados_cooperado => vr_tab_dados_cooperado  --Tipo de tabela com dados do cooperado
                                  ,pr_tab_tarifas  => vr_tab_tarifas   --Tabela com as tarifas
                                  ,pr_tab_totdomes => vr_tab_totdomes  --Tabela com totais mensais
                                  ,pr_des_reto     => vr_des_reto      --Retorno OK ou NOK
                                  ,pr_tab_erro     => pr_tab_erro);    --Tabela de Erros
          --Se retornou erro
          IF vr_des_reto = 'NOK' THEN
            --Se possuir erro na temp-table
            IF pr_tab_erro.COUNT > 0 THEN
              vr_dscritic:= 'Conta/dv: '||to_char(pr_nrdconta,'fm99g999g999g9')||' - '||
                            pr_tab_erro(pr_tab_erro.FIRST).dscritic;
            ELSE
              vr_dscritic:= 'Conta/dv: '||to_char(pr_nrdconta,'fm99g999g999g9')||' - '||
                            'Nao foi possivel carregar o extrato.';
            END IF;                  
            --Colocar todo o texto na variavel auxiliar
            vr_dstexto:= '<conta nrdconta="'||to_char(pr_nrdconta,'fm9g999g999g0')||
                         '" flgmensag="S" dscmensag="'||vr_dscritic||'"></conta>';
            --Escrever no Arquivo
            gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);

            --Popular Clob do relatorio interno
            gene0002.pc_escreve_xml(vr_clobxml499,vr_dstexto499,vr_dstexto);

            --Levantar Excecao
            RAISE vr_exc_sair;          
          END IF;
          
          --Buscar primeira ocorrencia dos dados do cooperado
          vr_index_dados_cooperado:= vr_tab_dados_cooperado.FIRST;
          IF vr_index_dados_cooperado IS NOT NULL THEN
            --Montar texto
            vr_dstexto:= '<conta nmextcop="'||vr_tab_dados_cooperado(vr_index_dados_cooperado).nmextcop||
                         '" nmprimtl="'||substr(vr_tab_dados_cooperado(vr_index_dados_cooperado).nmprimtl,1,40)||
                         '" nrcpfcgc="'||gene0002.fn_mask_cpf_cnpj(vr_tab_dados_cooperado(vr_index_dados_cooperado).nrcpfcgc,vr_tab_dados_cooperado(vr_index_dados_cooperado).inpessoa)||
                         '" nrdconta="'||to_char(vr_tab_dados_cooperado(vr_index_dados_cooperado).nrdconta,'fm9g999g999g0')||
                         '" cdagenci="'||vr_tab_dados_cooperado(vr_index_dados_cooperado).cdagenci||  
                         '" anorefer="'||pr_nranoref||
                         '" flgmensag="N" dscmensag=""><tarifas1>';
            --Escrever no Arquivo
            gene0002.pc_escreve_xml(pr_clobxml,pr_dstexto,vr_dstexto);

            --Popular Clob do relatorio interno
            gene0002.pc_escreve_xml(vr_clobxml499,vr_dstexto499,vr_dstexto);

            --Percorrer todas as tarifas para preencher primeiro semestre
            vr_index_tarifas:= vr_tab_tarifas.FIRST;
            WHILE vr_index_tarifas IS NOT NULL LOOP
              --Montar texto
              vr_dstexto:= 
                '<tarifa1>' ||
				  '<dsexthst>' || vr_tab_tarifas(vr_index_tarifas).dsexthst || '</dsexthst>' ||
                  '<mes1>' || to_char(vr_tab_tarifas(vr_index_tarifas).vlrdomes(1),'fm999g999g990d00') || '</mes1>' ||
                  '<mes2>' || to_char(vr_tab_tarifas(vr_index_tarifas).vlrdomes(2),'fm999g999g990d00') || '</mes2>' ||
                  '<mes3>' || to_char(vr_tab_tarifas(vr_index_tarifas).vlrdomes(3),'fm999g999g990d00') || '</mes3>' ||
                  '<mes4>' || to_char(vr_tab_tarifas(vr_index_tarifas).vlrdomes(4),'fm999g999g990d00') || '</mes4>' ||
                  '<mes5>' || to_char(vr_tab_tarifas(vr_index_tarifas).vlrdomes(5),'fm999g999g990d00') || '</mes5>' ||
                  '<mes6>' || to_char(vr_tab_tarifas(vr_index_tarifas).vlrdomes(6),'fm999g999g990d00') || '</mes6>' ||
               '</tarifa1>';
              --Escrever no Arquivo
              gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);
              
              --Popular Clob do relatorio interno
              gene0002.pc_escreve_xml(vr_clobxml499, vr_dstexto499,vr_dstexto);
            
              --Proximo Registro tarifas
              vr_index_tarifas:= vr_tab_tarifas.NEXT(vr_index_tarifas);
            END LOOP;
            --Montar texto
            vr_dstexto:= '</tarifas1><tarifas2>';
            --Escrever no Arquivo
            gene0002.pc_escreve_xml(pr_clobxml,pr_dstexto,vr_dstexto);

            --Popular Clob do relatorio interno
            gene0002.pc_escreve_xml(vr_clobxml499,vr_dstexto499,vr_dstexto);

            --Percorrer todas as tarifas para preencher segundo semestre
            vr_index_tarifas:= vr_tab_tarifas.FIRST;
            WHILE vr_index_tarifas IS NOT NULL LOOP
              --Montar texto
              vr_dstexto:= 
                '<tarifa2>' ||
                  '<dsexthst>' || vr_tab_tarifas(vr_index_tarifas).dsexthst || '</dsexthst>' ||
                  '<mes7>'  || to_char(vr_tab_tarifas(vr_index_tarifas).vlrdomes(7),'fm999g999g990d00')  || '</mes7>'  ||
                  '<mes8>'  || to_char(vr_tab_tarifas(vr_index_tarifas).vlrdomes(8),'fm999g999g990d00')  || '</mes8>'  ||
                  '<mes9>'  || to_char(vr_tab_tarifas(vr_index_tarifas).vlrdomes(9),'fm999g999g990d00')  || '</mes9>'  ||
                  '<mes10>' || to_char(vr_tab_tarifas(vr_index_tarifas).vlrdomes(10),'fm999g999g990d00') || '</mes10>' ||
                  '<mes11>' || to_char(vr_tab_tarifas(vr_index_tarifas).vlrdomes(11),'fm999g999g990d00') || '</mes11>' ||
                  '<mes12>' || to_char(vr_tab_tarifas(vr_index_tarifas).vlrdomes(12),'fm999g999g990d00') || '</mes12>' ||
                  '<mes13>' || to_char(vr_tab_tarifas(vr_index_tarifas).vlrdomes(13),'fm999g999g990d00') || '</mes13>' ||
               '</tarifa2>';
              --Escrever no Arquivo
              gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);

              --Popular Clob do relatorio interno
              gene0002.pc_escreve_xml(vr_clobxml499, vr_dstexto499,vr_dstexto);

              --Proximo Registro tarifas
              vr_index_tarifas:= vr_tab_tarifas.NEXT(vr_index_tarifas);
            END LOOP;
           
            /* Fechar Tag Tarifas e Conta */ 
            --Escrever no Arquivo
            gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,'</tarifas2></conta>');
            
            gene0002.pc_escreve_xml(vr_clobxml499, vr_dstexto499,'</tarifas2></conta>');
            
            --Ayllos Web
            IF pr_flgrodar = TRUE THEN
              
              --Escrever no Arquivo
              gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,'</tarifas2></conta>');            
            
              --Finaliza TAG Extratos e Conta
              gene0002.pc_escreve_xml(vr_clobxml499,vr_dstexto499,'</contas></crrl499>', TRUE);
              
              gene0001.pc_set_modulo(pr_module => NULL, pr_action => vr_nmaction);
              
              -- Gera relatório 499
              gene0002.pc_solicita_relato(pr_cdcooper  => pr_cdcooper                   --> Cooperativa conectada
                                         ,pr_cdprogra  => pr_cdprogra                   --> Programa chamador
                                         ,pr_dtmvtolt  => pr_dtmvtolt                   --> Data do movimento atual
                                         ,pr_dsxml     => vr_clobxml499                 --> Arquivo XML de dados
                                         ,pr_dsxmlnode => '/crrl499/contas/conta'       --> Nó base do XML para leitura dos dados
                                         ,pr_dsjasper  => 'crrl499.jasper'              --> Arquivo de layout do iReport
                                         ,pr_dsparams  => NULL                          --> Sem parâmetros
                                         ,pr_cdrelato => 499                            --> Código fixo para o relatório (nao busca pelo sqcabrel) 
                                         ,pr_dsarqsaid => vr_nmdireto||'/'||pr_nmarqimp --> Arquivo final com o path
                                         ,pr_qtcoluna  => 132                           --> Colunas do relatorio
                                         ,pr_flg_gerar => 'S'                           --> Geraçao na hora
                                         ,pr_flg_impri => 'N'                           --> Chamar a impressão (Imprim.p)
                                         ,pr_nmformul  => NULL                          --> Nome do formulário para impressão
                                         ,pr_nrcopias  => 1                             --> Número de cópias
                                         ,pr_sqcabrel  => 1                             --> Qual a seq do cabrel
                                         ,pr_flappend  => 'S'                           --> Fazer append do relatorio se ja existir
                                         ,pr_des_erro  => vr_dscritic);                 --> Saída com erro
              --Se ocorreu erro no relatorio
              IF vr_dscritic IS NOT NULL THEN
                --Levantar Excecao
                RAISE vr_exc_erro;
              END IF;
              
              --Fechar Clob e Liberar Memoria  
              dbms_lob.close(vr_clobxml499);
              dbms_lob.freetemporary(vr_clobxml499); 
  
                --Ayllos Web
              IF pr_idorigem = 5 THEN
                --Enviar arquivo para Web
                GENE0002.pc_envia_arquivo_web (pr_cdcooper => pr_cdcooper        --Codigo Cooperativa
                                     ,pr_cdagenci => pr_cdagenci        --Codigo Agencia
                                     ,pr_nrdcaixa => pr_nrdcaixa        --Numero do Caixa
                                     ,pr_nmarqimp => pr_nmarqimp        --Nome Arquivo Impressao
                                     ,pr_nmdireto => vr_nmdireto        --Nome Diretorio
                                     ,pr_nmarqpdf => pr_nmarqpdf        --Nome Arquivo PDF
                                     ,pr_des_reto => vr_des_reto        --Retorno OK/NOK
                                     ,pr_tab_erro => pr_tab_erro);      --tabela erro
                --Se ocorreu erro
                IF vr_des_reto <> 'OK' THEN
                  --Se tem erro na tabela 
                  IF pr_tab_erro.COUNT > 0 THEN
                    vr_dscritic:= pr_tab_erro(pr_tab_erro.FIRST).dscritic;
                  ELSE
                    vr_dscritic:= 'Erro ao enviar arquivo para web.';  
                  END IF; 
                  --Sair 
                  RAISE vr_exc_erro;
                END IF;
               
              END IF; --pr_idorigem = 5
            
            END IF;
            
          END IF;--vr_index_dados_cooperado IS NOT NULL

          --Retorno com Sucesso
          pr_des_reto:= 'OK';
        EXCEPTION
          WHEN vr_exc_sair THEN 
            vr_cdcritic:= NULL;
            vr_dscritic:= NULL;
          WHEN vr_exc_erro THEN
            pr_des_reto:= 'NOK';
        END;  
         
        --Se nao tem erro na temp-table 
        IF pr_tab_erro.COUNT = 0 AND (vr_dscritic IS NOT NULL OR nvl(vr_cdcritic,0) <> 0) THEN
          -- Chamar rotina de gravacao de erro
          gene0001.pc_gera_erro (pr_cdcooper => pr_cdcooper
                                ,pr_cdagenci => pr_cdagenci
                                ,pr_nrdcaixa => pr_nrdcaixa
                                ,pr_nrsequen => 1  /** Sequencia **/
                                ,pr_cdcritic => vr_cdcritic
                                ,pr_dscritic => vr_dscritic
                                ,pr_tab_erro => pr_tab_erro);
        END IF;
        --Escrever erro no Log
        IF pr_flgerlog THEN  
          --Executar rotina geracao log
          gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                              ,pr_cdoperad => vr_cdoperad
                              ,pr_dscritic => vr_dscritic
                              ,pr_dsorigem => vr_dsorigem
                              ,pr_dstransa => vr_dstransa
                              ,pr_dttransa => TRUNC(SYSDATE)
                              ,pr_flgtrans => (CASE pr_des_reto WHEN 'OK' THEN 1 ELSE 0 END)
                              ,pr_hrtransa => gene0002.fn_busca_time
                              ,pr_idseqttl => 1
                              ,pr_nmdatela => vr_nmdatela
                              ,pr_nrdconta => pr_nrdconta
                              ,pr_nrdrowid => vr_nrdrowid);
        END IF;          
        gene0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);
      EXCEPTION
        WHEN vr_exc_erro THEN
          -- Retorno não OK
          pr_des_reto := 'NOK';
          -- Chamar rotina de gravação de erro
          gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                               ,pr_cdagenci => pr_cdagenci
                               ,pr_nrdcaixa => pr_nrdcaixa
                               ,pr_nrsequen => 1 --> Fixo
                               ,pr_cdcritic => 0 --> Critica 0
                               ,pr_dscritic => vr_dscritic
                               ,pr_tab_erro => pr_tab_erro);
          -- Se foi solicitado geração de LOG
          IF pr_flgerlog THEN
            -- Chamar geração de LOG
            gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                                ,pr_cdoperad => pr_cdoperad
                                ,pr_dscritic => vr_dscritic
                                ,pr_dsorigem => vr_dsorigem
                                ,pr_dstransa => vr_dstransa
                                ,pr_dttransa => TRUNC(SYSDATE)
                                ,pr_flgtrans => 0 --> FALSE
                                ,pr_hrtransa => gene0002.fn_busca_time
                                ,pr_idseqttl => 1
                                ,pr_nmdatela => pr_nmdatela
                                ,pr_nrdconta => pr_nrdconta
                                ,pr_nrdrowid => vr_nrdrowid);
          END IF;  
        WHEN OTHERS THEN
          cecred.pc_internal_exception;
          -- Retorno não OK
          pr_des_reto := 'NOK';
          -- Chamar rotina de gravação de erro
          vr_dscritic := 'Erro na pc_gera_impexttar --> '|| sqlerrm;
          gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                               ,pr_cdagenci => pr_cdagenci
                               ,pr_nrdcaixa => pr_nrdcaixa
                               ,pr_nrsequen => 1 --> Fixo
                               ,pr_cdcritic => 0 --> Critica 0
                               ,pr_dscritic => vr_dscritic
                               ,pr_tab_erro => pr_tab_erro);
          -- Se foi solicitado geração de LOG
          IF pr_flgerlog THEN
            -- Chamar geração de LOG
            gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                                ,pr_cdoperad => pr_cdoperad
                                ,pr_dscritic => vr_dscritic
                                ,pr_dsorigem => vr_dsorigem
                                ,pr_dstransa => vr_dstransa
                                ,pr_dttransa => TRUNC(SYSDATE)
                                ,pr_flgtrans => 0 --> FALSE
                                ,pr_hrtransa => gene0002.fn_busca_time
                                ,pr_idseqttl => 1
                                ,pr_nmdatela => pr_nmdatela
                                ,pr_nrdconta => pr_nrdconta
                                ,pr_nrdrowid => vr_nrdrowid);
          END IF;
      END;
    END pc_gera_impexttar;  

    -- Subrotina para gerar extrato Aplicacoes
    PROCEDURE pc_gera_impextapl (pr_cdcooper IN crapcop.cdcooper%TYPE  --Codigo Cooperativa
                                ,pr_cdagenci IN crapass.cdagenci%TYPE  --Codigo Agencia
                                ,pr_nrdcaixa IN INTEGER                --Numero do Caixa
                                ,pr_idorigem IN INTEGER                --Origem dos Dados
                                ,pr_nmdatela IN VARCHAR2               --Nome da Tela                                
                                ,pr_dtmvtolt IN crapdat.dtmvtolt%TYPE  --Data Movimento
                                ,pr_cdprogra IN crapprg.cdprogra%TYPE  --Codigo Programa
                                ,pr_cdoperad IN VARCHAR2               --Codigo Operador
                                ,pr_inproces IN INTEGER                --Indicador Processo
                                ,pr_dsiduser IN VARCHAR2               --Identificador Usuario
                                ,pr_nrdconta IN crapass.nrdconta%TYPE  --Numero da Conta do Associado
                                ,pr_dtrefere IN DATE                   --Data de Referencia
                                ,pr_flgrodar IN BOOLEAN                --Flag Executar
                                ,pr_flgerlog IN BOOLEAN                --Escreve erro Log
                                ,pr_clobxml  IN OUT NOCOPY CLOB        --Clob arquivo de dados
                                ,pr_dstexto  IN OUT NOCOPY VARCHAR2    --Texto Clob
                                ,pr_tab_craptab IN apli0001.typ_tab_ctablq   --> Tipo de tabela de Conta Bloqueada
                                ,pr_tab_craplpp IN apli0001.typ_tab_craplpp  --> Tipo de tabela com lancamento poupanca
                                ,pr_tab_craplrg IN apli0001.typ_tab_craplpp  --> Tipo de tabela com resgates
                                ,pr_tab_resgate IN apli0001.typ_tab_resgate  --> Tabela com valores dos resgates das contas por aplicacao
                                ,pr_nmarqimp OUT VARCHAR2              --Nome Arquivo Impressao
                                ,pr_nmarqpdf OUT VARCHAR2              --Nome Arquivo PDF
                                ,pr_tab_erro OUT GENE0001.typ_tab_erro --Tabela de Erros
                                ,pr_des_reto OUT VARCHAR2 ) IS         --Descricao Erro
  BEGIN
  ---------------------------------------------------------------------------------------------------------------
  --
  --  Programa : pc_gera_impextapl                     Antigo: procedures/b1wgen0112.p/gera-impextapl
  --  Sistema  : 
  --  Sigla    : CRED
  --  Autor    : Alisson C. Berrido - Amcom
  --  Data     : Julho/2014                           Ultima atualizacao: 20/04/2016
  --
  -- Dados referentes ao programa:
  --
  -- Frequencia: -----
  -- Objetivo   : Procedure para gerar extrato aplicacoes do associado
  --
  -- Alterações : 02/07/2014 - Conversão Progress -> Oracle (Alisson - AMcom)
  --              
  --              20/04/2016 - Remover comando rm e incluir direto na tela impres 
  --                           (Lucas Ranghetti/Rodrigo #399412)              
  ---------------------------------------------------------------------------------------------------------------
  DECLARE
        -- Busca dos dados da cooperativa
        CURSOR cr_crapcop (pr_cdcooper IN crapcop.cdcooper%TYPE) IS
          SELECT crapcop.nmrescop
                ,crapcop.nmextcop
          FROM crapcop crapcop
          WHERE crapcop.cdcooper = pr_cdcooper;
        rw_crapcop cr_crapcop%ROWTYPE;  
        
        -- Busca dos dados do associado
        CURSOR cr_crapass(pr_cdcooper IN crapcop.cdcooper%TYPE
                         ,pr_nrdconta IN crapass.nrdconta%TYPE) IS
          SELECT crapass.nrdconta
                ,crapass.nmprimtl
                ,crapass.vllimcre
                ,crapass.nrcpfcgc
                ,crapass.inpessoa
                ,crapass.cdcooper
                ,crapass.cdagenci
          FROM crapass crapass
          WHERE crapass.cdcooper = pr_cdcooper
          AND   crapass.nrdconta = pr_nrdconta;
        rw_crapass cr_crapass%ROWTYPE;
        --Registro do tipo calendario
        rw_crapdat  BTCH0001.cr_crapdat%ROWTYPE;
        
        --Variaveis Locais
        vr_vlblqjud NUMBER;
        vr_vlresblq NUMBER;
        vr_tipoapli VARCHAR2(100);
        vr_ttaplica NUMBER;
        vr_totlrdca NUMBER;
        vr_totalrdc NUMBER;
        vr_total_novos_prod NUMBER;        
        
        vr_ttpoupan NUMBER;
        vr_percenir NUMBER;
        vr_dtiniext DATE;
        vr_dtfimext DATE;
        vr_ddmvtolt INTEGER;
        vr_vlsldrpp NUMBER;
        vr_dsorigem VARCHAR2(100);
        vr_dstransa VARCHAR2(100);
        vr_nrdrowid ROWID;
        vr_cdoperad crapope.cdoperad%type;
        vr_nmdatela crapprg.cdprogra%type; 
        vr_dsagenci VARCHAR2(100);
        vr_dsblqjud VARCHAR2(1000);
        vr_dsextrat VARCHAR2(1000);
        --Tabelas de Memoria
        vr_tab_saldo_rdca  APLI0001.typ_tab_saldo_rdca;
        vr_tab_dados_rpp   apli0001.typ_tab_dados_rpp;
        --Indices das temp-tables
        vr_index_saldo_rdc  PLS_INTEGER;        
        vr_index_saldo_rdca PLS_INTEGER;
        vr_index_dados_rpp  PLS_INTEGER;
        --Variaveis dos Arquivos
        vr_typ_saida VARCHAR2(3);
        vr_comando   VARCHAR2(100);
        vr_nmdireto  VARCHAR2(100);
        vr_nmendter  VARCHAR2(100);
        vr_setlinha  VARCHAR2(100);
        vr_linha     VARCHAR2(1000); 
        --CLOB de Dados
        vr_clobxml143  CLOB;
        vr_dstexto    VARCHAR2(32600);
        vr_dstexto_RDCA   VARCHAR2(32600);
        vr_dstexto_RDC    VARCHAR2(32600);                
        vr_dstexto_NPC    VARCHAR2(32600);        
        vr_dstexto143  VARCHAR2(32600); 
        --Variaveis Erro
        vr_cdcritic INTEGER;
        vr_dscritic VARCHAR2(4000);
        vr_des_reto VARCHAR2(3);                              
        --Variaveis de Excecoes
        vr_exc_erro EXCEPTION;
        vr_exc_sair EXCEPTION;

        vr_cont_rdc INTEGER DEFAULT 0;
        vr_cont_rdca INTEGER DEFAULT 0;
        vr_cont_rpp INTEGER DEFAULT 0;
        vr_contador INTEGER DEFAULT 0;
        vr_cont_novos_prod INTEGER DEFAULT 0;
        vr_in_proces INTEGER;    
        
        vr_contador PLS_INTEGER := 0;        
            
        vr_nmaction VARCHAR2(32) := 'pc_gera_impextapl';
      BEGIN
        gene0001.pc_set_modulo(pr_module => NULL, pr_action => vr_nmaction);
        --Limpar Tabela Erro
        pr_tab_erro.DELETE;
        
        /*** Busca Saldo Bloqueado Judicial ***/
        gene0005.pc_retorna_valor_blqjud (pr_cdcooper => pr_cdcooper          --Cooperativa
                                         ,pr_nrdconta => pr_nrdconta          --Conta Corrente
                                         ,pr_nrcpfcgc => 0 /*fixo*/           --Cpf/cnpj
                                         ,pr_cdtipmov => 1 /*bloqueio*/       --Tipo Movimento
                                         ,pr_cdmodali => 2 /*Aplicacao*/      --Modalidade
                                         ,pr_dtmvtolt => pr_dtmvtolt          --Data Atual
                                         ,pr_vlbloque => vr_vlblqjud          --Valor Bloqueado
                                         ,pr_vlresblq => vr_vlresblq          --Valor Residual
                                         ,pr_dscritic => vr_dscritic);        --Critica
        --Se ocorreu erro
        IF vr_dscritic IS NOT NULL THEN
          --Levantar Excecao
          RAISE vr_exc_erro;
        END IF;

        --Atribuir Descricao da Origem
        vr_dsorigem:= GENE0001.vr_vet_des_origens(pr_idorigem);
        --Atribuir Descricao da Transacao
        vr_dstransa:= 'Consultar dados para extrato de aplicacao e poupanca.';
        --Inicializar variaveis
        vr_cdcritic:= 0;
        vr_dscritic:= NULL;
        pr_des_reto:= 'NOK';
        --Definir Operador
        IF pr_inproces = 1  THEN
          vr_cdoperad:= pr_cdoperad;
          vr_nmdatela:= pr_nmdatela;
        ELSE  
          vr_cdoperad:= '1';
          vr_nmdatela:= UPPER(pr_cdprogra);
        END IF;
        
        BEGIN
          -- Data Inicio do Extrato
          vr_dtiniext:= TO_DATE('01/'||to_char(pr_dtrefere,'MM/YYYY'),'DD/MM/YYYY');
          -- Verifica se a cooperativa esta cadastrada
          OPEN cr_crapcop (pr_cdcooper => pr_cdcooper);
          FETCH cr_crapcop INTO rw_crapcop;
          -- Se não encontrar
          IF cr_crapcop%NOTFOUND THEN
            -- Fechar o cursor pois haverá raise
            CLOSE cr_crapcop;
            -- Montar mensagem de critica
            vr_cdcritic:= 651;
            RAISE vr_exc_erro;
          ELSE
            -- Apenas fechar o cursor
            CLOSE cr_crapcop;
          END IF;
          
          -- Verifica se a cooperativa esta cadastrada
          OPEN BTCH0001.cr_crapdat(pr_cdcooper => pr_cdcooper);
          FETCH BTCH0001.cr_crapdat INTO rw_crapdat;
          -- Se não encontrar
          IF BTCH0001.cr_crapdat%NOTFOUND THEN
            -- Fechar o cursor pois haverá raise
            CLOSE BTCH0001.cr_crapdat;
            -- Montar mensagem de critica
            vr_cdcritic := 1;
            vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
            -- Gera exceção
            RAISE vr_exc_erro;
          ELSE
            -- Apenas fechar o cursor
            CLOSE BTCH0001.cr_crapdat;
          END IF;
          -- Busca do diretório base da cooperativa para a geração de relatórios
          vr_nmdireto:= gene0001.fn_diretorio(pr_tpdireto => 'C'           --> /usr/coop
                                             ,pr_cdcooper => pr_cdcooper   --> Cooperativa
                                             ,pr_nmsubdir => 'rl');       --> Utilizaremos o rl
          
          -- Inicializar as informações do XML de dados para o relatório
          dbms_lob.createtemporary(vr_clobxml143, TRUE, dbms_lob.CALL);
          dbms_lob.open(vr_clobxml143, dbms_lob.lob_readwrite);
          --Escrever no arquivo XML
          gene0002.pc_escreve_xml(vr_clobxml143,vr_dstexto143,'<?xml version="1.0" encoding="UTF-8"?><crrl143b><contas>');
          
          --Se nao rodar
          IF NOT pr_flgrodar THEN 
            --Nome Arquivo Impressao
            pr_nmarqimp:= 'crrl143.lst';
          ELSE 
            --Nome Arquivo Impressao e PDF
            vr_nmendter:= pr_dsiduser || gene0002.fn_busca_time;
            pr_nmarqimp:= vr_nmendter || '.ex';
            pr_nmarqpdf:= vr_nmendter || '.pdf';
          END IF;  
          
          --Selecionar associado
          OPEN cr_crapass (pr_cdcooper => pr_cdcooper
                          ,pr_nrdconta => pr_nrdconta);
          --Posicionar no proximo registro
          FETCH cr_crapass INTO rw_crapass;
          --Se nao encontrou
          IF cr_crapass%NOTFOUND THEN
            --Fechar Cursor
            CLOSE cr_crapass;
            --mensagem erro
            vr_cdcritic:= 9;
            vr_dscritic:= 'Conta/dv: '||to_char(pr_nrdconta,'fm9g999g999g0')||
                          '- Associado nao cadastrado!!!!';
            --Colocar todo o texto na variavel auxiliar
            vr_dstexto:= '<conta nrdconta="'||to_char(pr_nrdconta,'fm9g999g999g0')||
                         '" flgmensag="S" dscmensag="'||vr_dscritic||'" flgmsgext="N" dsmsgext=""></conta>';
            --Escrever no Arquivo
            gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);

            --Popular Clob do relatorio interno
            gene0002.pc_escreve_xml(vr_clobxml143, vr_dstexto143,vr_dstexto);
	
            --Levantar Excecao
            RAISE vr_exc_sair;
          END IF;  
          --Fechar Cursor
          CLOSE cr_crapass;
          
          gene0001.pc_set_modulo(pr_module => NULL, pr_action => vr_nmaction);

          --Limpar tabelas memoria
          vr_tab_saldo_rdca.DELETE;
          
          APLI0005.pc_lista_aplicacoes(pr_cdcooper => pr_cdcooper
                                     , pr_cdoperad => pr_cdoperad
                                     , pr_nmdatela => pr_nmdatela
                                     , pr_idorigem => pr_idorigem
                                     , pr_nrdcaixa => pr_nrdcaixa
                                     , pr_nrdconta => pr_nrdconta
                                     , pr_idseqttl => 1
                                     , pr_cdagenci => pr_cdagenci
                                     , pr_cdprogra => pr_cdprogra
                                     , pr_nraplica => 0 -- todas
                                     , pr_cdprodut => 0 -- todos
                                     , pr_dtmvtolt => pr_dtmvtolt
                                     , pr_idconsul => 0
                                     , pr_idgerlog => 1
                                     , pr_cdcritic => vr_cdcritic
                                     , pr_dscritic => vr_dscritic
                                     , pr_saldo_rdca => vr_tab_saldo_rdca);
                    
          --Se retornou erro
          IF vr_cdcritic > 0 OR vr_dscritic <> '' THEN
            --Se possuir erro na temp-table
            IF vr_cdcritic > 0 THEN
              vr_dscritic:= 'Conta/dv: '||to_char(pr_nrdconta,'fm99g999g999g9')||' - '||
                            pr_tab_erro(vr_cdcritic).dscritic;
            ELSE
              vr_dscritic:= 'Conta/dv: '||to_char(pr_nrdconta,'fm99g999g999g9')||' - '||
                            'Nao foi possivel carregar o extrato.';
            END IF;                  
            --Colocar todo o texto na variavel auxiliar
            vr_dstexto:= '<conta nrdconta="'||to_char(pr_nrdconta,'fm9g999g999g0')||
                         '" flgmensag="S" dscmensag="'||vr_dscritic||'" flgmsgext="N" dsmsgext=""></conta>';
            --Escrever no Arquivo
            gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);

            --Popular Clob do relatorio interno
            gene0002.pc_escreve_xml(vr_clobxml143,vr_dstexto143,vr_dstexto);

            --Levantar Excecao
            RAISE vr_exc_sair;          
          END IF;
          
          gene0001.pc_set_modulo(pr_module => NULL, pr_action => vr_nmaction);

          -- Selecionar informacoes % IR para o calculo da APLI0001.pc_calc_saldo_rpp
          vr_percenir:= GENE0002.fn_char_para_number
                              (TABE0001.fn_busca_dstextab(pr_cdcooper => pr_cdcooper
                                                         ,pr_nmsistem => 'CRED'
                                                         ,pr_tptabela => 'CONFIG'
                                                         ,pr_cdempres => 0
                                                         ,pr_cdacesso => 'PERCIRAPLI'
                                                         ,pr_tpregist => 0));

          --Limpar tabelas memoria de retorno
          vr_tab_dados_rpp.DELETE;
          --Executar rotina consulta poupanca
          apli0001.pc_consulta_poupanca (pr_cdcooper => pr_cdcooper            --> Cooperativa 
                                        ,pr_cdagenci => pr_cdagenci            --> Codigo da Agencia
                                        ,pr_nrdcaixa => pr_nrdcaixa            --> Numero do caixa 
                                        ,pr_cdoperad => vr_cdoperad            --> Codigo do Operador
                                        ,pr_idorigem => pr_idorigem            --> Identificador da Origem
                                        ,pr_nrdconta => pr_nrdconta            --> Nro da conta associado
                                        ,pr_idseqttl => 1                      --> Identificador Sequencial
                                        ,pr_nrctrrpp => 0 /*todas*/            --> Contrato Poupanca Programada 
                                        ,pr_dtmvtolt => vr_dtiniext            --> Data do movimento atual
                                        ,pr_dtmvtopr => vr_dtfimext            --> Data do proximo movimento
                                        ,pr_inproces => pr_inproces            --> Indicador de processo
                                        ,pr_cdprogra => 'IMPRES'               --> Nome do programa chamador
                                        ,pr_flgerlog => FALSE                  --> Flag erro log
                                        ,pr_percenir => vr_percenir            --> % IR para Calculo Poupanca
                                        ,pr_tab_craptab => pr_tab_craptab      --> Tipo de tabela de Conta Bloqueada
                                        ,pr_tab_craplpp => pr_tab_craplpp      --> Tipo de tabela com lancamento poupanca
                                        ,pr_tab_craplrg => pr_tab_craplrg      --> Tipo de tabela com resgates
                                        ,pr_tab_resgate => pr_tab_resgate      --> Tabela com valores dos resgates das contas por aplicacao
                                        ,pr_vlsldrpp    => vr_vlsldrpp         --> Valor saldo poupanca programada
                                        ,pr_retorno     => vr_des_reto         --> Descricao de erro ou sucesso OK/NOK 
                                        ,pr_tab_dados_rpp => vr_tab_dados_rpp  --> Poupancas Programadas
                                        ,pr_tab_erro      => pr_tab_erro);     --> Saida com erros;
          --Se retornou erro
          IF vr_des_reto = 'NOK' THEN
            -- Tenta buscar o erro no vetor de erro
            IF pr_tab_erro.COUNT > 0 THEN
              vr_dscritic:= pr_tab_erro(pr_tab_erro.FIRST).dscritic;
            ELSE
              vr_dscritic:= 'Nao foi possivel carregar o extrato.';
            END IF;
            vr_dscritic:= 'Conta/dv: '||to_char(pr_nrdconta,'fm99g999g999g9')||' - '||vr_dscritic;
            --Colocar todo o texto na variavel auxiliar
            vr_dstexto:= '<conta nrdconta="'||to_char(pr_nrdconta,'fm9g999g999g0')||
                         '" flgmensag="S" dscmensag="'||vr_dscritic||'" flgmsgext="N" dsmsgext=""></conta>';
            --Escrever no Arquivo
            gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto);

            --Popular Clob do relatorio interno
            gene0002.pc_escreve_xml(vr_clobxml143, vr_dstexto143,vr_dstexto);
  
            --Levantar Excecao
            RAISE vr_exc_sair;          
          END IF;          
          
          gene0001.pc_set_modulo(pr_module => NULL, pr_action => vr_nmaction);

          --Verificar se possui bloqueio judicial
          vr_dsblqjud:= ' flgmsgjud="S" dsmsgjud="VALOR BLOQUEADO JUDICIALMENTE R$        '||
                          to_char(nvl(vr_vlblqjud,0),'fm999g999g999g990d00')||'"'; 
            
          --Verificar se possui extratos 
          --IF (vr_tab_saldo_rdc.COUNT + vr_tab_saldo_rdca.COUNT + vr_tab_dados_rpp.COUNT) = 0 THEN
          IF (vr_tab_saldo_rdca.COUNT + vr_tab_dados_rpp.COUNT) = 0 THEN            
            vr_dsextrat:= ' flgmsgext="S" dsmsgext="NAO FORAM ENCONTRADOS LANCAMENTOS."';
          ELSE
            --Nao mostra mensagem extrato
            vr_dsextrat:= ' flgmsgext="N" dsmsgext=""';

            --Zerar totais
            vr_totlrdca:= 0;
            vr_totalrdc:= 0;
            vr_ttpoupan:= 0;
            vr_total_novos_prod := 0;
            
            --Se possuir Poupanca
            vr_index_dados_rpp:= vr_tab_dados_rpp.FIRST;
            WHILE vr_index_dados_rpp IS NOT NULL LOOP
              vr_ttpoupan:= nvl(vr_ttpoupan,0) + vr_tab_dados_rpp(vr_index_dados_rpp).vlsdrdpp;      
              --Proximo Registro
              vr_index_dados_rpp:= vr_tab_dados_rpp.NEXT(vr_index_dados_rpp);      
            END LOOP;

            /* percorre tmp-table de aplicacoes */
            FOR vr_contador IN vr_tab_saldo_rdca.FIRST..vr_tab_saldo_rdca.LAST LOOP  

               -- caso forem aplicacoes dos novos produtos de captacao
               IF (vr_tab_saldo_rdca(vr_contador).idtipapl = 'N') THEN
               
                 vr_cont_novos_prod := vr_cont_novos_prod +1; 
                   
                 --Montar xml de Novas aplicacoes de Captacao
                 vr_dstexto_NPC:= vr_dstexto_NPC ||
                     '<nprod>' ||
                       '<dtvencto>' || to_char(vr_tab_saldo_rdca(vr_contador).dtvencto,'DD/MM/YYYY') || '</dtvencto>' ||
                       '<dsaplica>' || (vr_tab_saldo_rdca(vr_contador).nmprodut) || '</dsaplica>' ||
                       '<dshistor>' || substr(vr_tab_saldo_rdca(vr_contador).dshistor,1,9) || '</dshistor>' ||
                       '<nrdocmto>' || substr(vr_tab_saldo_rdca(vr_contador).nrdocmto,1,7) || '</nrdocmto>' ||
                       '<sldresga>' || to_char(vr_tab_saldo_rdca(vr_contador).sldresga,'fm99999g999g990d00')||'</sldresga>' ||
                     '</nprod>';                 
                                     
                 --Acumular Saldo das Novas aplicacoes de Produtos de Captacao
                 vr_total_novos_prod:= nvl(vr_total_novos_prod,0) + vr_tab_saldo_rdca(vr_contador).sldresga;                                        
               
               ELSE
                 
                 IF vr_tab_saldo_rdca(vr_contador).tpaplica IN (3,5) THEN -- RDCA
                   vr_cont_rdca := vr_cont_rdca +1;
                   
                   --Montar xml de aplicacoes RDCA
                   vr_dstexto_RDCA:= vr_dstexto_RDCA || 
                         '<rdca>' ||
                           '<ddmvtolt>' || to_char(vr_tab_saldo_rdca(vr_contador).dtmvtolt,'DD') || '</ddmvtolt>' ||
                           '<dshistor>' || substr(vr_tab_saldo_rdca(vr_contador).dshistor,1,10) || '</dshistor>' ||
                           '<nrdocmto>' || substr(vr_tab_saldo_rdca(vr_contador).nrdocmto,1,7) || '</nrdocmto>' ||
                           '<sldresga>' || to_char(vr_tab_saldo_rdca(vr_contador).sldresga,'fm99999g999g990d00')||'</sldresga>' ||
                         '</rdca>';                 
                   
                   --Acumular total RDCA      
                   vr_totlrdca:= nvl(vr_totlrdca,0) + vr_tab_saldo_rdca(vr_contador).sldresga;                 

                 ELSIF vr_tab_saldo_rdca(vr_contador).tpaplica IN (7,8) THEN -- RDC               
                   vr_cont_rdc := vr_cont_rdc +1;

                   --Montar xml de aplicacoes RDC
                   vr_dstexto_RDC:= vr_dstexto_RDC ||
                       '<rdc>' ||
                         '<dtvencto>' || to_char(vr_tab_saldo_rdca(vr_contador).dtvencto,'DD/MM/YYYY') || '</dtvencto>' ||
                         '<dshistor>' || substr(vr_tab_saldo_rdca(vr_contador).dshistor,1,9) || '</dshistor>' ||
                         '<nrdocmto>' || substr(vr_tab_saldo_rdca(vr_contador).nrdocmto,1,7) || '</nrdocmto>' ||
                         '<sldresga>' || to_char(vr_tab_saldo_rdca(vr_contador).sldresga,'fm99999g999g990d00')||'</sldresga>' ||
                       '</rdc>';                 
                   
                   --Acumular total RDC
                   vr_totalrdc:= nvl(vr_totalrdc,0) + vr_tab_saldo_rdca(vr_contador).sldresga;                       
                 
                 END IF;
                 
               END IF;                 
 
            END LOOP;            
            
            --Indica se possui registros RDC  
            IF vr_cont_rdc > 0 THEN
              vr_dsextrat:= vr_dsextrat||' flgrdc="S"';
            ELSE
              vr_dsextrat:= vr_dsextrat||' flgrdc="N"';  
            END IF;  
            --Indica se possui registros RDCA              
            IF vr_cont_rdca > 0 THEN
              vr_dsextrat:= vr_dsextrat||' flgrdca="S"';
            ELSE
              vr_dsextrat:= vr_dsextrat||' flgrdca="N"';  
            END IF;  
            --Indica se possui registros Poupanca              
            IF vr_tab_dados_rpp.COUNT > 0 THEN
              vr_dsextrat:= vr_dsextrat||' flgpoup="S"';
            ELSE
              vr_dsextrat:= vr_dsextrat||' flgpoup="N"';  
            END IF;  
            --Indica se possui registros de Novos Produtos de Captacao
            IF vr_cont_novos_prod > 0 THEN
              vr_dsextrat:= vr_dsextrat||' flgnpro="S"';
            ELSE
              vr_dsextrat:= vr_dsextrat||' flgnpro="N"';  
            END IF;  
            
          END IF;  

          --Total geral
          vr_ttaplica:= nvl(vr_totlrdca,0) + nvl(vr_totalrdc,0) + nvl(vr_ttpoupan,0) + NVL(vr_total_novos_prod,0);
          
          --Montar texto
          vr_dstexto:= '<conta nrdconta="'||to_char(rw_crapass.nrdconta,'fm9g999g999g0')||
                         '" nmprimtl="'||rw_crapass.nmprimtl||
                         '" flgmensag="N" dscmensag=""'||vr_dsblqjud||vr_dsextrat||' total="'||
                         to_char(vr_ttaplica,'fm99999g999g990d00')||'">'||'<aplic_rdca tipoapli="RDCA">';

          gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto); --Escrever no Arquivo
          gene0002.pc_escreve_xml(vr_clobxml143, vr_dstexto143,vr_dstexto); --Popular Clob do relatorio interno

          -- grava dados de aplicacoes RDCA
          gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto_RDCA); --Escrever no Arquivo
          gene0002.pc_escreve_xml(vr_clobxml143, vr_dstexto143,vr_dstexto_RDCA); --Popular Clob do relatorio interno
          
          --Grava nos de aplicacoes RDCA e RDC
          vr_dstexto:= '</aplic_rdca><aplic_rdc tipoapli="RDC">';
          gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto); --Escrever no Arquivo
          gene0002.pc_escreve_xml(vr_clobxml143, vr_dstexto143,vr_dstexto); --Popular Clob do relatorio interno

          -- grava dados de aplicacoes RDC
          gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto_RDC); --Escrever no Arquivo
          gene0002.pc_escreve_xml(vr_clobxml143, vr_dstexto143,vr_dstexto_RDC); --Popular Clob do relatorio interno

          /* NOVOS PRODUTOS CAPTACAO */
          -- grava dados de aplicacoes novas
          vr_dstexto:= '</aplic_rdc><aplic_nprod>';
          gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto); --Escrever no Arquivo
          gene0002.pc_escreve_xml(vr_clobxml143, vr_dstexto143,vr_dstexto); --Popular Clob do relatorio interno
          gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto_NPC); --Escrever no Arquivo
          gene0002.pc_escreve_xml(vr_clobxml143, vr_dstexto143,vr_dstexto_NPC); --Popular Clob do relatorio interno

          /* grava dados da poupanca */
          vr_dstexto := '</aplic_nprod><poupancas tipoapli="POUP.PROGRAMADA">';
          gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto); --Escrever no Arquivo
          gene0002.pc_escreve_xml(vr_clobxml143, vr_dstexto143,vr_dstexto); --Popular Clob do relatorio interno
          
          --Se possuir Poupanca
          vr_index_dados_rpp:= vr_tab_dados_rpp.FIRST;
          WHILE vr_index_dados_rpp IS NOT NULL LOOP
            --Montar texto
            vr_dstexto:= 
                '<poup>' ||
                  '<ddmvtolt>' || to_char(vr_tab_dados_rpp(vr_index_dados_rpp).dtinirpp,'DD') || '</ddmvtolt>' ||
                  '<dssitrpp>' || vr_tab_dados_rpp(vr_index_dados_rpp).dssitrpp || '</dssitrpp>' ||
                  '<vlprerpp>' || vr_tab_dados_rpp(vr_index_dados_rpp).vlprerpp || '</vlprerpp>' ||
                  '<vlsdrdpp>' || to_char(vr_tab_dados_rpp(vr_index_dados_rpp).vlsdrdpp,'fm99999g999g990d00')||'</vlsdrdpp>' ||
                '</poup>';
            gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto); --Escrever no Arquivo
            gene0002.pc_escreve_xml(vr_clobxml143, vr_dstexto143,vr_dstexto); --Popular Clob do relatorio interno

            --Proximo Registro
            vr_index_dados_rpp:= vr_tab_dados_rpp.NEXT(vr_index_dados_rpp);      
          END LOOP;
          
          --Montar texto
          vr_dstexto:= '</poupancas></conta>';
          gene0002.pc_escreve_xml(pr_clobxml, pr_dstexto,vr_dstexto); --Escrever no Arquivo
          gene0002.pc_escreve_xml(vr_clobxml143, vr_dstexto143,vr_dstexto); --Popular Clob do relatorio interno

          
          --Ayllos Web
          IF pr_flgrodar = TRUE THEN

            --Finaliza TAG Extratos e Conta            
            gene0002.pc_escreve_xml(vr_clobxml143,vr_dstexto143,'</contas></crrl143b>',TRUE);

            -- Gera relatório 143
            gene0002.pc_solicita_relato(pr_cdcooper  => pr_cdcooper                   --> Cooperativa conectada
                                       ,pr_cdprogra  => pr_cdprogra                   --> Programa chamador
                                       ,pr_dtmvtolt  => pr_dtmvtolt                   --> Data do movimento atual
                                       ,pr_dsxml     => vr_clobxml143                 --> Arquivo XML de dados
                                       ,pr_dsxmlnode => '/crrl143b/contas/conta'      --> Nó base do XML para leitura dos dados
                                       ,pr_dsjasper  => 'crrl143b.jasper'             --> Arquivo de layout do iReport
                                       ,pr_cdrelato => 143                            --> codigo relatorio
                                       ,pr_dsparams  => NULL                          --> Sem parâmetros
                                       ,pr_dsarqsaid => vr_nmdireto||'/'||pr_nmarqimp --> Arquivo final com o path
                                       ,pr_qtcoluna  => 80                            --> Colunas do relatorio
                                       ,pr_flg_gerar => 'S'                           --> Geraçao na hora
                                       ,pr_flg_impri => 'N'                           --> Chamar a impressão (Imprim.p)
                                       ,pr_nmformul  => NULL                          --> Nome do formulário para impressão
                                       ,pr_nrcopias  => 1                             --> Número de cópias
                                       ,pr_sqcabrel  => 1                             --> Qual a seq do cabrel
                                       ,pr_flappend  => 'S'                           --> Fazer append do relatorio se ja existir
                                       ,pr_des_erro  => vr_dscritic);                 --> Saída com erro
            --Se ocorreu erro no relatorio
            IF vr_dscritic IS NOT NULL THEN
              --Levantar Excecao
              RAISE vr_exc_erro;
            END IF; 
            
            --Fechar Clob e Liberar Memoria  
            dbms_lob.close(vr_clobxml143);
            dbms_lob.freetemporary(vr_clobxml143); 
            
            IF pr_idorigem = 5 THEN
              --Enviar arquivo para Web
              GENE0002.pc_envia_arquivo_web (pr_cdcooper => pr_cdcooper        --Codigo Cooperativa
                                   ,pr_cdagenci => pr_cdagenci        --Codigo Agencia
                                   ,pr_nrdcaixa => pr_nrdcaixa        --Numero do Caixa
                                   ,pr_nmarqimp => pr_nmarqimp        --Nome Arquivo Impressao
                                   ,pr_nmdireto => vr_nmdireto        --Nome Diretorio
                                   ,pr_nmarqpdf => pr_nmarqpdf        --Nome Arquivo PDF
                                   ,pr_des_reto => vr_des_reto        --Retorno OK/NOK
                                   ,pr_tab_erro => pr_tab_erro);      --tabela erro
              --Se ocorreu erro
              IF vr_des_reto <> 'OK' THEN
                --Se tem erro na tabela 
                IF pr_tab_erro.COUNT > 0 THEN
                  vr_dscritic:= pr_tab_erro(pr_tab_erro.FIRST).dscritic;
                ELSE
                  vr_dscritic:= 'Erro ao enviar arquivo para web.';  
                END IF; 
                --Sair 
                RAISE vr_exc_erro;
              END IF; 
            
            END IF; --pr_idorigem = 5
            
            --Retorno com Sucesso
            pr_des_reto:= 'OK';
            
          END IF; -- pr_flgrodar = true          
        EXCEPTION
          WHEN vr_exc_sair THEN
            pr_des_reto:= 'OK';
            vr_cdcritic:= NULL;
            vr_dscritic:= NULL;
            
        END;
          
        --Se nao tem erro na temp-table 
        IF pr_tab_erro.COUNT = 0 AND (vr_dscritic IS NOT NULL OR nvl(vr_cdcritic,0) <> 0) THEN
          -- Chamar rotina de gravacao de erro
          gene0001.pc_gera_erro (pr_cdcooper => pr_cdcooper
                                ,pr_cdagenci => pr_cdagenci
                                ,pr_nrdcaixa => pr_nrdcaixa
                                ,pr_nrsequen => 1  /** Sequencia **/
                                ,pr_cdcritic => vr_cdcritic
                                ,pr_dscritic => vr_dscritic
                                ,pr_tab_erro => pr_tab_erro);
        END IF;
        --Escrever erro no Log
        IF pr_flgerlog THEN  
          --Executar rotina geracao log
          gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                              ,pr_cdoperad => vr_cdoperad
                              ,pr_dscritic => vr_dscritic
                              ,pr_dsorigem => vr_dsorigem
                              ,pr_dstransa => vr_dstransa
                              ,pr_dttransa => TRUNC(SYSDATE)
                              ,pr_flgtrans => (CASE pr_des_reto WHEN 'OK' THEN 1 ELSE 0 END)
                              ,pr_hrtransa => gene0002.fn_busca_time
                              ,pr_idseqttl => 1
                              ,pr_nmdatela => vr_nmdatela
                              ,pr_nrdconta => pr_nrdconta
                              ,pr_nrdrowid => vr_nrdrowid);
        END IF;          
        gene0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);
      EXCEPTION
        WHEN vr_exc_erro THEN
          -- Retorno não OK
          pr_des_reto := 'NOK';
          -- Chamar rotina de gravação de erro
          gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                               ,pr_cdagenci => pr_cdagenci
                               ,pr_nrdcaixa => pr_nrdcaixa
                               ,pr_nrsequen => 1 --> Fixo
                               ,pr_cdcritic => 0 --> Critica 0
                               ,pr_dscritic => vr_dscritic
                               ,pr_tab_erro => pr_tab_erro);
          -- Se foi solicitado geração de LOG
          IF pr_flgerlog THEN
            -- Chamar geração de LOG
            gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                                ,pr_cdoperad => pr_cdoperad
                                ,pr_dscritic => vr_dscritic
                                ,pr_dsorigem => vr_dsorigem
                                ,pr_dstransa => vr_dstransa
                                ,pr_dttransa => TRUNC(SYSDATE)
                                ,pr_flgtrans => 0 --> FALSE
                                ,pr_hrtransa => gene0002.fn_busca_time
                                ,pr_idseqttl => 1
                                ,pr_nmdatela => pr_nmdatela
                                ,pr_nrdconta => pr_nrdconta
                                ,pr_nrdrowid => vr_nrdrowid);
          END IF;  
        WHEN OTHERS THEN
          cecred.pc_internal_exception;
          -- Retorno não OK
          pr_des_reto := 'NOK';
          -- Chamar rotina de gravação de erro
          vr_dscritic := 'Erro na pc_gera_impextapl --> '|| sqlerrm;
          gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                               ,pr_cdagenci => pr_cdagenci
                               ,pr_nrdcaixa => pr_nrdcaixa
                               ,pr_nrsequen => 1 --> Fixo
                               ,pr_cdcritic => 0 --> Critica 0
                               ,pr_dscritic => vr_dscritic
                               ,pr_tab_erro => pr_tab_erro);
          -- Se foi solicitado geração de LOG
          IF pr_flgerlog THEN
            -- Chamar geração de LOG
            gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                                ,pr_cdoperad => pr_cdoperad
                                ,pr_dscritic => vr_dscritic
                                ,pr_dsorigem => vr_dsorigem
                                ,pr_dstransa => vr_dstransa
                                ,pr_dttransa => TRUNC(SYSDATE)
                                ,pr_flgtrans => 0 --> FALSE
                                ,pr_hrtransa => gene0002.fn_busca_time
                                ,pr_idseqttl => 1
                                ,pr_nmdatela => pr_nmdatela
                                ,pr_nrdconta => pr_nrdconta
                                ,pr_nrdrowid => vr_nrdrowid);
          END IF;
      END;
    END pc_gera_impextapl;  

  -- Subrotina para gerar extrato de operacoes de credito
  PROCEDURE pc_gera_extrato_op_credito(pr_cdcooper IN crapcop.cdcooper%TYPE  --Codigo Cooperativa
                                      ,pr_cdagenci IN crapass.cdagenci%TYPE  --Codigo Agencia
                                      ,pr_nrdcaixa IN INTEGER                --Numero do Caixa
                                      ,pr_idorigem IN INTEGER                --Origem dos Dados
                                      ,pr_nmdatela IN VARCHAR2               --Nome da Tela                                
                                      ,pr_dtmvtolt IN VARCHAR2               --Data Movimento
                                      ,pr_cdprogra IN crapprg.cdprogra%TYPE  --Codigo Programa
                                      ,pr_cdoperad IN VARCHAR2               --Codigo Operador                                  
                                      ,pr_dsiduser IN VARCHAR2               --Identificador Usuario
                                      ,pr_nrdconta IN crapass.nrdconta%TYPE  --Numero da Conta do Associado
                                      ,pr_dtrefere IN VARCHAR2               --Data de Referencia
                                      ,pr_flgrodar IN INTEGER                --Flag Executar
                                      ,pr_flgerlog IN INTEGER                --Escreve erro Log                                                                                           
                                      ,pr_nmarqimp OUT VARCHAR2              --Nome Arquivo Impressao
                                      ,pr_nmarqpdf OUT VARCHAR2              --Nome Arquivo PDF
                                      ,pr_des_reto OUT VARCHAR2              --Saida OK/NOK
                                      ,pr_clobxml  OUT CLOB                  --Clob arquivo de dados
                                      ,pr_cdcritic OUT PLS_INTEGER           --Codigo Erro
                                      ,pr_dscritic OUT VARCHAR2) IS          --Descricao Erro
  BEGIN
    ---------------------------------------------------------------------------------------------------------------
    --
    --  Programa : pc_gera_extrato_op_credito                     Antigo: 
    --  Sistema  : 
    --  Sigla    : CRED
    --  Autor    : Jonathan - RKAM
    --  Data     : Dezembro/2015                          Ultima atualizacao: 20/04/2016
    --
    -- Dados referentes ao programa:
    --
    -- Frequencia: -----
    -- Objetivo   : Procedure para gerar extrato de operacoes de credito
    --
    -- Alterações : 20/04/2016 - Remover comando rm e incluir direto na tela impres 
    --                           (Lucas Ranghetti/Rodrigo #399412)
    --              
    ---------------------------------------------------------------------------------------------------------------
  DECLARE
    -- Busca dos dados da cooperativa
    CURSOR cr_crapcop (pr_cdcooper IN crapcop.cdcooper%TYPE) IS
    SELECT crapcop.nmrescop
          ,crapcop.nmextcop
      FROM crapcop crapcop
     WHERE crapcop.cdcooper = pr_cdcooper;
    rw_crapcop cr_crapcop%ROWTYPE;  
    
    -- Busca dos dados do associado
    CURSOR cr_crapass(pr_cdcooper IN crapcop.cdcooper%TYPE
                     ,pr_nrdconta IN crapass.nrdconta%TYPE) IS
    SELECT crapass.nrdconta
          ,crapass.nmprimtl
          ,crapass.vllimcre
          ,crapass.nrcpfcgc
          ,crapass.inpessoa
          ,crapass.cdcooper
          ,crapass.cdagenci
      FROM crapass crapass
     WHERE crapass.cdcooper = pr_cdcooper
       AND crapass.nrdconta = pr_nrdconta;
    rw_crapass cr_crapass%ROWTYPE;
    
    --Registro do tipo calendario
    rw_crapdat  BTCH0001.cr_crapdat%ROWTYPE;
      
    CURSOR cr_craplcm1(pr_cdcooper IN crapcop.cdcooper%TYPE
                      ,pr_nrdconta IN crapass.nrdconta%TYPE
                      ,pr_dtiniext IN crapdat.dtmvtolt%TYPE
                      ,pr_dtfinext IN crapdat.dtmvtolt%TYPE
                      ,pr_cdhistor IN craplcm.cdhistor%TYPE) IS
    SELECT craplcm.dtmvtolt
          ,craplcm.cdhistor
          ,craplcm.vllanmto
     FROM craplcm
    WHERE craplcm.cdcooper = pr_cdcooper
      AND craplcm.nrdconta = pr_nrdconta
      AND craplcm.dtmvtolt BETWEEN pr_dtiniext AND pr_dtfinext
      AND craplcm.cdhistor = pr_cdhistor;
    rw_craplcm1 cr_craplcm1%ROWTYPE;
    
    --Busca tarifa de empréstimos/financiamento
    CURSOR cr_craplem2(pr_cdcooper IN crapcop.cdcooper%TYPE
                      ,pr_nrdconta IN crapass.nrdconta%TYPE
                      ,pr_dtiniext IN crapdat.dtmvtolt%TYPE
                      ,pr_dtfinext IN crapdat.dtmvtolt%TYPE) IS
    SELECT craplem.dtmvtolt
          ,craplem.cdhistor
          ,craplem.vllanmto
     FROM craplem
    WHERE craplem.cdcooper = pr_cdcooper
      AND craplem.nrdconta = pr_nrdconta
      AND craplem.dtmvtolt BETWEEN pr_dtiniext AND pr_dtfinext
      AND craplem.cdhistor IN (98,1037,1038);
    rw_craplem2 cr_craplem2%ROWTYPE;
    
    --Busca tarifa de antecipação referente a desconto de títulos
    CURSOR cr_craplcm3(pr_cdcooper IN crapcop.cdcooper%TYPE
                      ,pr_nrdconta IN crapass.nrdconta%TYPE
                      ,pr_dtiniext IN crapdat.dtmvtolt%TYPE
                      ,pr_dtfinext IN crapdat.dtmvtolt%TYPE) IS
    SELECT craplcm.dtmvtolt
          ,craplcm.cdhistor
          ,craplcm.vllanmto
     FROM craplcm
    WHERE craplcm.cdcooper = pr_cdcooper
      AND craplcm.nrdconta = pr_nrdconta
      AND craplcm.dtmvtolt BETWEEN pr_dtiniext AND pr_dtfinext
      AND craplcm.cdhistor IN (1435,1459);
    rw_craplcm3 cr_craplcm3%ROWTYPE;
    
    --Multa emprestimos/financiamentos
    CURSOR cr_craplem4(pr_cdcooper IN crapcop.cdcooper%TYPE
                      ,pr_nrdconta IN crapass.nrdconta%TYPE
                      ,pr_dtiniext IN crapdat.dtmvtolt%TYPE
                      ,pr_dtfinext IN crapdat.dtmvtolt%TYPE) IS
    SELECT craplem.dtmvtolt
          ,craplem.cdhistor
          ,craplem.vllanmto
     FROM craplem
    WHERE craplem.cdcooper = pr_cdcooper
      AND craplem.nrdconta = pr_nrdconta
      AND craplem.dtmvtolt BETWEEN pr_dtiniext AND pr_dtfinext
      AND craplem.cdhistor IN (1076,1047,1618,1540);
    rw_craplem4 cr_craplem4%ROWTYPE;
    
    --Juros mora emprestimos/financiamentos
    CURSOR cr_craplem5(pr_cdcooper IN crapcop.cdcooper%TYPE
                      ,pr_nrdconta IN crapass.nrdconta%TYPE
                      ,pr_dtiniext IN crapdat.dtmvtolt%TYPE
                      ,pr_dtfinext IN crapdat.dtmvtolt%TYPE) IS
    SELECT craplem.dtmvtolt
          ,craplem.cdhistor
          ,craplem.vllanmto
     FROM craplem
    WHERE craplem.cdcooper = pr_cdcooper
      AND craplem.nrdconta = pr_nrdconta
      AND craplem.dtmvtolt BETWEEN pr_dtiniext AND pr_dtfinext
      AND craplem.cdhistor IN (1078,1077,1620,1619);
    rw_craplem5 cr_craplem5%ROWTYPE;
    
    --Juros normais emprestimos/financiamentos
    CURSOR cr_craplem6(pr_cdcooper IN crapcop.cdcooper%TYPE
                      ,pr_nrdconta IN crapass.nrdconta%TYPE
                      ,pr_dtiniext IN crapdat.dtmvtolt%TYPE
                      ,pr_dtfinext IN crapdat.dtmvtolt%TYPE) IS
    SELECT craplem.dtmvtolt
          ,craplem.cdhistor
          ,craplem.vllanmto
     FROM craplem
    WHERE craplem.cdcooper = pr_cdcooper
      AND craplem.nrdconta = pr_nrdconta
      AND craplem.dtmvtolt BETWEEN pr_dtiniext AND pr_dtfinext
      AND craplem.cdhistor IN (1051,1050);
    rw_craplem6 cr_craplem6%ROWTYPE;
           
    -- Busca os juros remuneratórios referente a desconto de cheques
    CURSOR cr_crapljd(pr_cdcooper IN crapcop.cdcooper%TYPE
                     ,pr_nrdconta IN crapass.nrdconta%TYPE
                     ,pr_dtiniext IN crapdat.dtmvtolt%TYPE
                     ,pr_dtfinext IN crapdat.dtmvtolt%TYPE) IS
    SELECT SUM(ljd.vldjuros) vlrtotal
      FROM crapcdb cdb
          ,crapljd ljd
     WHERE cdb.cdcooper = pr_cdcooper
       AND cdb.nrdconta = pr_nrdconta
       AND cdb.dtdevolu BETWEEN pr_dtiniext AND pr_dtfinext
       AND ljd.cdcooper = cdb.cdcooper
       AND ljd.nrdconta = cdb.nrdconta
       AND ljd.nrborder = cdb.nrborder
       AND ljd.nrcheque = cdb.nrcheque;
    rw_crapljd cr_crapljd%ROWTYPE;
    
     -- Busca os juros remuneratórios referente a desconto de títulos
    CURSOR cr_crapljt(pr_cdcooper IN crapcop.cdcooper%TYPE
                     ,pr_nrdconta IN crapass.nrdconta%TYPE
                     ,pr_dtiniext IN crapdat.dtmvtolt%TYPE
                     ,pr_dtfinext IN crapdat.dtmvtolt%TYPE) IS
    SELECT SUM(ljt.vldjuros) vlrtotal
      FROM craptdb tdb
          ,crapljt ljt
     WHERE tdb.cdcooper = pr_cdcooper
       AND tdb.nrdconta = pr_nrdconta
       AND tdb.dtresgat BETWEEN pr_dtiniext AND pr_dtfinext
       AND ljt.cdcooper = tdb.cdcooper
       AND ljt.nrdconta = tdb.nrdconta
       AND ljt.nrborder = tdb.nrborder
       AND ljt.nrdocmto = tdb.nrdocmto;
    rw_crapljt cr_crapljt%ROWTYPE;
    
    CURSOR cr_craplem(pr_cdcooper IN crapcop.cdcooper%TYPE
                     ,pr_nrdconta IN crapass.nrdconta%TYPE
                     ,pr_dtiniext IN crapdat.dtmvtolt%TYPE
                     ,pr_dtfinext IN crapdat.dtmvtolt%TYPE
                     ,pr_cdhistor IN craplem.cdhistor%TYPE) IS
    SELECT craplem.dtmvtolt
          ,craplem.cdhistor
          ,craplem.vllanmto
     FROM craplem
    WHERE craplem.cdcooper = pr_cdcooper
      AND craplem.nrdconta = pr_nrdconta
      AND craplem.dtmvtolt BETWEEN pr_dtiniext AND pr_dtfinext
      AND craplem.cdhistor = pr_cdhistor;
    rw_craplem cr_craplem%ROWTYPE;
           
    --Variaveis Locais
    vr_dtiniext DATE;
    vr_dtfimext DATE;        
    vr_dsorigem VARCHAR2(100);
    vr_dstransa VARCHAR2(100);
    vr_nrdrowid ROWID;
    vr_cdoperad crapope.cdoperad%type;
    vr_nmdatela crapprg.cdprogra%type; 
    vr_vlrparci NUMBER(25,2);
    vr_vltotmes NUMBER(25,2); 
    vr_vltotano NUMBER(25,2);
    vr_trimestre INTEGER := 0;   
    
    --Tabelas de Memoria        
    vr_tab_extrato_ope_credito typ_tab_extrato_ope_credito;
    vr_dtmvtolt DATE;
                 
    --Indices das temp-tables
    vr_index  VARCHAR2(4);        
    
    --Variaveis dos Arquivos
    vr_typ_saida VARCHAR2(3);
    vr_comando   VARCHAR2(100);
    vr_nmdireto  VARCHAR2(100);
    vr_nmendter  VARCHAR2(100);
    vr_setlinha  VARCHAR2(100);
    
    --CLOB de Dados        
    vr_dstexto     VARCHAR2(32600);
    vr_dstexto143  VARCHAR2(32600); 
    
    --Variaveis Erro
    vr_cdcritic INTEGER;
    vr_dscritic VARCHAR2(4000);
    vr_des_reto VARCHAR2(3);     
                             
    --Variaveis de Excecoes
    vr_exc_erro EXCEPTION;
    vr_exc_sair EXCEPTION;

    vr_contador INTEGER := 1;
    vr_tab_erro gene0001.typ_tab_erro;       
    vr_conttrim INTEGER := 0;
    vr_mes      VARCHAR2(4);
        
    TYPE vr_typ_arr_histor_iof IS TABLE OF NUMBER;
    vr_arr_histor_iof vr_typ_arr_histor_iof;
        
    vr_nmaction VARCHAR2(32) := 'pc_gera_extrato_op_credito';
        
  BEGIN
      
    gene0001.pc_set_modulo(pr_action => NULL, pr_module => vr_nmaction);
    
    --Limpar Tabelas
    vr_tab_erro.DELETE;
    vr_tab_extrato_ope_credito.DELETE;
    
    --Atribuir Descricao da Origem
    vr_dsorigem:= GENE0001.vr_vet_des_origens(pr_idorigem);
    
    --Atribuir Descricao da Transacao
    vr_dstransa:= 'Consultar dados para extrato de operacao de credito.';
    
    --Inicializar variaveis
    vr_cdcritic:= 0;
    vr_dscritic:= NULL;
    pr_des_reto:= 'NOK';
           
    BEGIN
      
      IF to_number(pr_dtrefere) >= to_number(to_char(SYSDATE,'YYYY')) THEN
        
        -- Montar mensagem de critica
        vr_dscritic:= 'Consulta permitida apenas para exercicio anterior.';
        RAISE vr_exc_erro;
      
      END IF;
      
      BEGIN                                                  
        --Pega a data de movimento e converte para "DATE"
        vr_dtmvtolt:= to_date(pr_dtmvtolt,'DD/MM/YYYY'); 
                      
      EXCEPTION
        WHEN OTHERS THEN
          
          --Monta mensagem de critica
          vr_dscritic := 'Data de movimento invalida.';
          
          --Gera exceção
          RAISE vr_exc_erro;
      END;
    
      -- Verifica se a cooperativa esta cadastrada
      OPEN cr_crapcop (pr_cdcooper => pr_cdcooper);
      
      FETCH cr_crapcop INTO rw_crapcop;
      -- Se não encontrar
      IF cr_crapcop%NOTFOUND THEN
        
        -- Fechar o cursor pois haverá raise
        CLOSE cr_crapcop;
        
        -- Montar mensagem de critica
        vr_cdcritic:= 651;
        RAISE vr_exc_erro;
        
      ELSE
        -- Apenas fechar o cursor
        CLOSE cr_crapcop;
      END IF;
      
      -- Verifica se a cooperativa esta cadastrada
      OPEN BTCH0001.cr_crapdat(pr_cdcooper => pr_cdcooper);
      
      FETCH BTCH0001.cr_crapdat INTO rw_crapdat;
      -- Se não encontrar
      IF BTCH0001.cr_crapdat%NOTFOUND THEN
        
        -- Fechar o cursor pois haverá raise
        CLOSE BTCH0001.cr_crapdat;
        
        -- Montar mensagem de critica
        vr_cdcritic := 1;
        vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        
        -- Gera exceção
        RAISE vr_exc_erro;
        
      ELSE
        -- Apenas fechar o cursor
        CLOSE BTCH0001.cr_crapdat;
      END IF;
      
      -- Busca do diretório base da cooperativa para a geração de relatórios
      vr_nmdireto:= gene0001.fn_diretorio(pr_tpdireto => 'C'           --> /usr/coop
                                         ,pr_cdcooper => pr_cdcooper   --> Cooperativa
                                         ,pr_nmsubdir => 'rl');       --> Utilizaremos o rl
      
      --Se nao rodar
      IF pr_flgrodar = 0 THEN 
        --Nome Arquivo Impressao
        pr_nmarqimp:= 'crrl712.lst';
      ELSE 
        --Nome Arquivo Impressao e PDF
        vr_nmendter:= pr_dsiduser || gene0002.fn_busca_time;
        pr_nmarqimp:= vr_nmendter || '.ex';
        pr_nmarqpdf:= vr_nmendter || '.pdf';
        
      END IF;  
      
      --Selecionar associado
      OPEN cr_crapass (pr_cdcooper => pr_cdcooper
                      ,pr_nrdconta => pr_nrdconta);
                      
      --Posicionar no proximo registro
      FETCH cr_crapass INTO rw_crapass;
      
      --Se nao encontrou
      IF cr_crapass%NOTFOUND THEN
        --Fechar Cursor
        CLOSE cr_crapass;
        
        --mensagem erro
        vr_cdcritic:= 9;
                                 
        --Levantar Excecao
        RAISE vr_exc_sair;
        
      END IF;  
      
      --Fechar Cursor
      CLOSE cr_crapass;
      
      -- Inicializar as informações do XML de dados para o relatório
      dbms_lob.createtemporary(pr_clobxml, TRUE);
      dbms_lob.open(pr_clobxml, dbms_lob.lob_readwrite);
      
      --Colocar todo o texto na variavel auxiliar
      vr_dstexto:= '<crrl712>' || 
                      '<cabecalho>' ||
                         '<instfina>' || rw_crapcop.nmextcop || '</instfina>' ||
                         '<nmprimtl>' || rw_crapass.nmprimtl || '</nmprimtl>' ||
                         '<nrdconta>' || TRIM(gene0002.fn_mask_conta(rw_crapass.nrdconta)) || '</nrdconta>' ||
                         '<nrcpfcgc>' || TO_CHAR(gene0002.fn_mask_cpf_cnpj(rw_crapass.nrcpfcgc,rw_crapass.inpessoa)) || '</nrcpfcgc>' ||
                         '<cdagenci>' || rw_crapass.cdagenci || '</cdagenci>' ||
                         '<anocompe>' || pr_dtrefere || '</anocompe>' ||
                      '</cabecalho>' ||
                      '<informacoes>';    
                
      --Popular Clob do relatorio interno
      gene0002.pc_escreve_xml(pr_clobxml, vr_dstexto143,vr_dstexto);      
      
      gene0001.pc_set_modulo(pr_action => NULL, pr_module => vr_nmaction);

      --Percorre os 12 meses do ano
      WHILE vr_contador <= 12 LOOP
        
        --Inicializa as variaveis de contabilizacao
        vr_vlrparci := 0;
        vr_vltotmes := 0; 
          
        -- Data Inicio do Extrato
        vr_dtiniext:= TO_DATE('01/' || vr_contador || '/' || pr_dtrefere,'DD/MM/YYYY');
      
        -- Data Final do Extrato
        vr_dtfimext:= last_day(vr_dtiniext);
        
        --Cria o index a ser usado pela PLTABLE
        vr_index := trim(to_char(vr_contador,'00') || '01');
      
        vr_tab_extrato_ope_credito(vr_index).dscricao := 'Emprestimos/Financiamentos';            
        
        --Busca jusros remuneratórios de empréstimos/financiamentos
        FOR rw_craplem2 IN cr_craplem2(pr_cdcooper => pr_cdcooper
                                      ,pr_nrdconta => pr_nrdconta
                                      ,pr_dtiniext => vr_dtiniext
                                      ,pr_dtfinext => vr_dtfimext) LOOP
                
          vr_tab_extrato_ope_credito(vr_index).juroremu := NVL(vr_tab_extrato_ope_credito(vr_index).juroremu,0) + rw_craplem2.vllanmto;
          
        END LOOP;
        
        --Multa emprestimos/financiamento
        FOR rw_craplem4 IN cr_craplem4(pr_cdcooper => pr_cdcooper
                                      ,pr_nrdconta => pr_nrdconta
                                      ,pr_dtiniext => vr_dtiniext
                                      ,pr_dtfinext => vr_dtfimext) LOOP
                                 
          vr_tab_extrato_ope_credito(vr_index).vlrmulta := NVL(vr_tab_extrato_ope_credito(vr_index).vlrmulta,0) + rw_craplem4.vllanmto;
          
        END LOOP;
        
        --Busca multa de empréstimos/financiamentos PRICE TR - tmemprst 0
        FOR rw_craplem IN cr_craplem(pr_cdcooper => pr_cdcooper
                                    ,pr_nrdconta => pr_nrdconta
                                    ,pr_dtiniext => vr_dtiniext
                                    ,pr_dtfinext => vr_dtfimext
                                    ,pr_cdhistor => '443') LOOP
         
          vr_tab_extrato_ope_credito(vr_index).vlrmulta := NVL(vr_tab_extrato_ope_credito(vr_index).vlrmulta,0) + rw_craplem.vllanmto;
          
        END LOOP;
        
        --Juros mora emprestimos/financiamento
        FOR rw_craplem5 IN cr_craplem5(pr_cdcooper => pr_cdcooper
                                      ,pr_nrdconta => pr_nrdconta
                                      ,pr_dtiniext => vr_dtiniext
                                      ,pr_dtfinext => vr_dtfimext) LOOP
                                 
          vr_tab_extrato_ope_credito(vr_index).juromora := NVL(vr_tab_extrato_ope_credito(vr_index).juromora,0) + rw_craplem5.vllanmto;
          
        END LOOP;
        
        --Busca juros de mora de empréstimos/financiamentos PRICE TR - tmemprst 0
        FOR rw_craplem IN cr_craplem(pr_cdcooper => pr_cdcooper
                                    ,pr_nrdconta => pr_nrdconta
                                    ,pr_dtiniext => vr_dtiniext
                                    ,pr_dtfinext => vr_dtfimext
                                    ,pr_cdhistor => '441') LOOP
                                 
          vr_tab_extrato_ope_credito(vr_index).juromora := NVL(vr_tab_extrato_ope_credito(vr_index).juromora,0) + rw_craplem.vllanmto;
          
        END LOOP;
        
        --Juros normais emprestimos/financiamento
        FOR rw_craplem6 IN cr_craplem6(pr_cdcooper => pr_cdcooper
                                      ,pr_nrdconta => pr_nrdconta
                                      ,pr_dtiniext => vr_dtiniext
                                      ,pr_dtfinext => vr_dtfimext) LOOP
                                 
          vr_tab_extrato_ope_credito(vr_index).juronorm := NVL(vr_tab_extrato_ope_credito(vr_index).juronorm,0) + rw_craplem6.vllanmto;
          
        END LOOP;
        
        --Busca demais despesas referente a empresitmos/financiamentos (IOF)
        vr_arr_histor_iof := vr_typ_arr_histor_iof(322,2308,2309,2310, 2313, 2314);
        FOR i IN vr_arr_histor_iof.first .. vr_arr_histor_iof.last LOOP          
        FOR rw_craplcm1 IN cr_craplcm1(pr_cdcooper => pr_cdcooper
                                      ,pr_nrdconta => pr_nrdconta
                                      ,pr_dtiniext => vr_dtiniext
                                      ,pr_dtfinext => vr_dtfimext
                                        ,pr_cdhistor => vr_arr_histor_iof(i)) LOOP
          vr_tab_extrato_ope_credito(vr_index).demadesp := NVL(vr_tab_extrato_ope_credito(vr_index).demadesp,0) + rw_craplcm1.vllanmto;
          
        END LOOP;
        END LOOP;
                                 
          
        
        --Incrementa o total de cada item
        vr_vlrparci := nvl( vr_tab_extrato_ope_credito(vr_index).juroremu,0) +
                       nvl( vr_tab_extrato_ope_credito(vr_index).juronorm,0) +
                       nvl( vr_tab_extrato_ope_credito(vr_index).juromora,0) +
                       nvl( vr_tab_extrato_ope_credito(vr_index).vlrmulta,0) +
                       nvl( vr_tab_extrato_ope_credito(vr_index).demadesp,0);
        
        --Incrementar o total do mês               
        vr_vltotmes := vr_vltotmes + vr_vlrparci;                       
        
        vr_dstexto:= '<detalhe id_tipo="' || vr_tab_extrato_ope_credito(vr_index).dscricao || '" vltottip="' || to_char(nvl( vr_vlrparci,0),'fm999G999G990D00') || '">' ||
                         '<jurorend>' || to_char(nvl( vr_tab_extrato_ope_credito(vr_index).juroremu,0),'fm999G999G990D00') || '</jurorend>' ||
                         '<juronorm>' || to_char(nvl( vr_tab_extrato_ope_credito(vr_index).juronorm,0),'fm999G999G990D00') || '</juronorm>' ||
                         '<juromora>' || to_char(nvl( vr_tab_extrato_ope_credito(vr_index).juromora,0),'fm999G999G990D00') || '</juromora>' ||
                         '<vlrmulta>' || to_char(nvl( vr_tab_extrato_ope_credito(vr_index).vlrmulta,0),'fm999G999G990D00')  || '</vlrmulta>' ||
                         '<demadesp>' || to_char(nvl( vr_tab_extrato_ope_credito(vr_index).demadesp,0),'fm999G999G990D00') || '</demadesp>' ||                                   
                     '</detalhe> ';  
        
        vr_index := trim(to_char(vr_contador,'00') || '02');
      
        vr_tab_extrato_ope_credito(vr_index).dscricao := 'Limite de Credito';            
        
        -- Projeto 410 - busca despesa referente IOF sobre limite credito
        --Busca demais despesas referente a limite de crédito
        FOR rw_craplcm1 IN cr_craplcm1(pr_cdcooper => pr_cdcooper
                                      ,pr_nrdconta => pr_nrdconta
                                      ,pr_dtiniext => vr_dtiniext
                                      ,pr_dtfinext => vr_dtfimext
                                      ,pr_cdhistor => '323') LOOP
                                 
          vr_tab_extrato_ope_credito(vr_index).demadesp := NVL(vr_tab_extrato_ope_credito(vr_index).demadesp,0) + rw_craplcm1.vllanmto;
          
        END LOOP;
        
        --Busca demais despesas referente a limite de crédito
        FOR rw_craplcm1 IN cr_craplcm1(pr_cdcooper => pr_cdcooper
                                      ,pr_nrdconta => pr_nrdconta
                                      ,pr_dtiniext => vr_dtiniext
                                      ,pr_dtfinext => vr_dtfimext
                                      ,pr_cdhistor => '2322') LOOP
          vr_tab_extrato_ope_credito(vr_index).demadesp := NVL(vr_tab_extrato_ope_credito(vr_index).demadesp,0) + rw_craplcm1.vllanmto;
        END LOOP;
        --Busca demais despesas referente a limite de crédito
        FOR rw_craplcm1 IN cr_craplcm1(pr_cdcooper => pr_cdcooper
                                      ,pr_nrdconta => pr_nrdconta
                                      ,pr_dtiniext => vr_dtiniext
                                      ,pr_dtfinext => vr_dtfimext
                                      ,pr_cdhistor => '2322') LOOP
          vr_tab_extrato_ope_credito(vr_index).demadesp := NVL(vr_tab_extrato_ope_credito(vr_index).demadesp,0) + rw_craplcm1.vllanmto;
        END LOOP;
        --Busca juros remuneratórios refente a limite de crédito
        FOR rw_craplcm1 IN cr_craplcm1(pr_cdcooper => pr_cdcooper
                                     ,pr_nrdconta => pr_nrdconta
                                     ,pr_dtiniext => vr_dtiniext
                                     ,pr_dtfinext => vr_dtfimext
                                     ,pr_cdhistor => '38') LOOP
                                 
          vr_tab_extrato_ope_credito(vr_index).juroremu := NVL(vr_tab_extrato_ope_credito(vr_index).juroremu,0) + rw_craplcm1.vllanmto;
          
        END LOOP;
        
        --Incrementa o total de cada item
        vr_vlrparci := nvl( vr_tab_extrato_ope_credito(vr_index).juroremu,0) +
                       nvl( vr_tab_extrato_ope_credito(vr_index).juronorm,0) +
                       nvl( vr_tab_extrato_ope_credito(vr_index).juromora,0) +
                       nvl( vr_tab_extrato_ope_credito(vr_index).vlrmulta,0) +
                       nvl( vr_tab_extrato_ope_credito(vr_index).demadesp,0);
                       
        --Incrementar o total do mês                                      
        vr_vltotmes := vr_vltotmes + vr_vlrparci;                       
        
        vr_dstexto:= vr_dstexto ||
                     '<detalhe id_tipo="' || vr_tab_extrato_ope_credito(vr_index).dscricao || '" vltottip="' || to_char(nvl( vr_vlrparci,0),'fm999G999G990D00') || '">' ||
                         '<jurorend>' || to_char(nvl( vr_tab_extrato_ope_credito(vr_index).juroremu,0),'fm999G999G990D00') || '</jurorend>' ||
                         '<juronorm>' || to_char(nvl( vr_tab_extrato_ope_credito(vr_index).juronorm,0),'fm999G999G990D00') || '</juronorm>' ||
                         '<juromora>' || to_char(nvl( vr_tab_extrato_ope_credito(vr_index).juromora,0),'fm999G999G990D00') || '</juromora>' ||
                         '<vlrmulta>' || to_char(nvl( vr_tab_extrato_ope_credito(vr_index).vlrmulta,0),'fm999G999G990D00')  || '</vlrmulta>' ||
                         '<demadesp>' || to_char(nvl( vr_tab_extrato_ope_credito(vr_index).demadesp,0),'fm999G999G990D00') || '</demadesp>' ||                                   
                     '</detalhe> ';
                     
        vr_index := trim(to_char(vr_contador,'00') || '03');
      
        vr_tab_extrato_ope_credito(vr_index).dscricao := 'Desconto de Cheques';      
      
        --Busca demais despesas referente a desconto de cheques
        FOR rw_craplcm1 IN cr_craplcm1(pr_cdcooper => pr_cdcooper
                                      ,pr_nrdconta => pr_nrdconta
                                      ,pr_dtiniext => vr_dtiniext
                                      ,pr_dtfinext => vr_dtfimext
                                      ,pr_cdhistor => '324') LOOP
                                 
          vr_tab_extrato_ope_credito(vr_index).demadesp := NVL(vr_tab_extrato_ope_credito(vr_index).demadesp,0) + rw_craplcm1.vllanmto;
          
        END LOOP;
        
        --Busca demais despesas referente a desconto de cheques
        FOR rw_craplcm1 IN cr_craplcm1(pr_cdcooper => pr_cdcooper
                                      ,pr_nrdconta => pr_nrdconta
                                      ,pr_dtiniext => vr_dtiniext
                                      ,pr_dtfinext => vr_dtfimext
                                      ,pr_cdhistor => '2318') LOOP
          vr_tab_extrato_ope_credito(vr_index).demadesp := NVL(vr_tab_extrato_ope_credito(vr_index).demadesp,0) + rw_craplcm1.vllanmto;
        END LOOP;
        --Busca juros remuneratórios referente a desconto de cheques
        OPEN cr_crapljd(pr_cdcooper => pr_cdcooper
                       ,pr_nrdconta => pr_nrdconta
                       ,pr_dtiniext => vr_dtiniext
                       ,pr_dtfinext => vr_dtfimext);
                                
        FETCH cr_crapljd INTO rw_crapljd;
                               
        IF cr_crapljd%NOTFOUND THEN
        
          vr_tab_extrato_ope_credito(vr_index).juroremu := rw_crapljd.vlrtotal;
                      
        END IF; 
                    
        CLOSE cr_crapljd;
        
        --Incrementa o total de cada item
        vr_vlrparci := nvl( vr_tab_extrato_ope_credito(vr_index).juroremu,0) +
                       nvl( vr_tab_extrato_ope_credito(vr_index).juronorm,0) +
                       nvl( vr_tab_extrato_ope_credito(vr_index).juromora,0) +
                       nvl( vr_tab_extrato_ope_credito(vr_index).vlrmulta,0) +
                       nvl( vr_tab_extrato_ope_credito(vr_index).demadesp,0);
                       
        --Incrementar o total do mês               
        vr_vltotmes := vr_vltotmes + vr_vlrparci;                       
        
        vr_dstexto:= vr_dstexto || 
                    '<detalhe id_tipo="' || vr_tab_extrato_ope_credito(vr_index).dscricao || '" vltottip="' || to_char(nvl( vr_vlrparci,0),'fm999G999G990D00') || '">' ||
                         '<jurorend>' || to_char(nvl( vr_tab_extrato_ope_credito(vr_index).juroremu,0),'fm999G999G990D00') || '</jurorend>' ||
                         '<juronorm>' || to_char(nvl( vr_tab_extrato_ope_credito(vr_index).juronorm,0),'fm999G999G990D00') || '</juronorm>' ||
                         '<juromora>' || to_char(nvl( vr_tab_extrato_ope_credito(vr_index).juromora,0),'fm999G999G990D00') || '</juromora>' ||
                         '<vlrmulta>' || to_char(nvl( vr_tab_extrato_ope_credito(vr_index).vlrmulta,0),'fm999G999G990D00')  || '</vlrmulta>' ||
                         '<demadesp>' || to_char(nvl( vr_tab_extrato_ope_credito(vr_index).demadesp,0),'fm999G999G990D00') || '</demadesp>' ||                                   
                     '</detalhe> ';
        
        vr_index := trim(to_char(vr_contador,'00') || '04');
      
        vr_tab_extrato_ope_credito(vr_index).dscricao := 'Desconto de Titulos';
        
        --Busca juros remuneratórios referente a desconto de títulos
        OPEN cr_crapljt(pr_cdcooper => pr_cdcooper
                       ,pr_nrdconta => pr_nrdconta
                       ,pr_dtiniext => vr_dtiniext
                       ,pr_dtfinext => vr_dtfimext);
                                
        FETCH cr_crapljt INTO rw_crapljt;
                               
        IF cr_crapljt%NOTFOUND THEN
        
          vr_tab_extrato_ope_credito(vr_index).juroremu := rw_crapljt.vlrtotal;
                      
        END IF; 
                    
        CLOSE cr_crapljt;
        
        --Busca tarifa de antecipação referente a desconto de títulos
        FOR rw_craplcm3 IN cr_craplcm3(pr_cdcooper => pr_cdcooper
                                      ,pr_nrdconta => pr_nrdconta
                                      ,pr_dtiniext => vr_dtiniext
                                      ,pr_dtfinext => vr_dtfimext) LOOP
                                 
          vr_tab_extrato_ope_credito(vr_index).juroremu := NVL(vr_tab_extrato_ope_credito(vr_index).juroremu,0) + rw_craplcm3.vllanmto;
          
        END LOOP;
        
        --Busca demais despesas referente a desconto de títulos
        FOR rw_craplcm1 IN cr_craplcm1(pr_cdcooper => pr_cdcooper
                                      ,pr_nrdconta => pr_nrdconta
                                      ,pr_dtiniext => vr_dtiniext
                                      ,pr_dtfinext => vr_dtfimext
                                      ,pr_cdhistor => '688') LOOP
          vr_tab_extrato_ope_credito(vr_index).demadesp := NVL(vr_tab_extrato_ope_credito(vr_index).demadesp,0) + rw_craplcm1.vllanmto;
        END LOOP;
        --Busca demais despesas referente a desconto de títulos
        FOR rw_craplcm1 IN cr_craplcm1(pr_cdcooper => pr_cdcooper
                                      ,pr_nrdconta => pr_nrdconta
                                      ,pr_dtiniext => vr_dtiniext
                                      ,pr_dtfinext => vr_dtfimext
                                      ,pr_cdhistor => '2320') LOOP
                                 
          vr_tab_extrato_ope_credito(vr_index).demadesp := NVL(vr_tab_extrato_ope_credito(vr_index).demadesp,0) + rw_craplcm1.vllanmto;
          
        END LOOP;

        --Incrementa o total de cada item
        vr_vlrparci := nvl( vr_tab_extrato_ope_credito(vr_index).juroremu,0) +
                       nvl( vr_tab_extrato_ope_credito(vr_index).juronorm,0) +
                       nvl( vr_tab_extrato_ope_credito(vr_index).juromora,0) +
                       nvl( vr_tab_extrato_ope_credito(vr_index).vlrmulta,0) +
                       nvl( vr_tab_extrato_ope_credito(vr_index).demadesp,0);
             
        --Incrementar o total do mês          
        vr_vltotmes := vr_vltotmes + vr_vlrparci;                       
        
         --Para os ambientes diferente de Internet Bank quebra o relatório em duas páginas
        IF pr_idorigem <> 3 AND
           vr_contador = 9 THEN
          
          vr_trimestre := vr_trimestre + 1; 
        
        END IF;
        
        gene0002.pc_escreve_xml(pr_clobxml, vr_dstexto143,'<mes trimestre="' || vr_trimestre || '" id_mes="' || GENE0001.vr_vet_nmmesano(vr_contador) || '" vltotmes="' || to_char(nvl( vr_vltotmes,0),'fm999G999G990D00') || '">');  
       
        vr_dstexto:= vr_dstexto ||
                     '<detalhe id_tipo="' || vr_tab_extrato_ope_credito(vr_index).dscricao || '" vltottip="' || to_char(nvl( vr_vlrparci,0),'fm999G999G990D00') || '">' ||
                         '<jurorend>' || to_char(nvl( vr_tab_extrato_ope_credito(vr_index).juroremu,0),'fm999G999G990D00') || '</jurorend>' ||
                         '<juronorm>' || to_char(nvl( vr_tab_extrato_ope_credito(vr_index).juronorm,0),'fm999G999G990D00') || '</juronorm>' ||
                         '<juromora>' || to_char(nvl( vr_tab_extrato_ope_credito(vr_index).juromora,0),'fm999G999G990D00') || '</juromora>' ||
                         '<vlrmulta>' || to_char(nvl( vr_tab_extrato_ope_credito(vr_index).vlrmulta,0),'fm999G999G990D00')  || '</vlrmulta>' ||
                         '<demadesp>' || to_char(nvl( vr_tab_extrato_ope_credito(vr_index).demadesp,0),'fm999G999G990D00') || '</demadesp>' ||                                   
                     '</detalhe>' ||                                        
                   '</mes>';
          
        --Popular Clob do relatorio interno
        gene0002.pc_escreve_xml(pr_clobxml, vr_dstexto143,vr_dstexto);        
       
        --Para o ambiente Internet Bank quebra o relatório em três páginas
        IF pr_idorigem = 3        AND 
           MOD(vr_contador,4) = 0 THEN
          
          vr_trimestre := vr_trimestre + 1; 
        
        END IF;
        
        vr_contador := vr_contador + 1;
        
        --Incrementa valor total ano
        vr_vltotano := NVL(vr_vltotano,0) + vr_vltotmes;
        
      END LOOP;
        
      --Finaliza TAG Extratos e Conta            
      gene0002.pc_escreve_xml(pr_clobxml,vr_dstexto143,'</informacoes><totalAno>' || to_char(nvl( vr_vltotano,0),'fm999G999G990D00') || '</totalAno></crrl712>',TRUE);      
                                                    
      gene0001.pc_set_modulo(pr_action => NULL, pr_module => vr_nmaction);
                                           
      --Ayllos Web
      IF pr_flgrodar = 1 THEN

        -- Gera relatório 712
        gene0002.pc_solicita_relato(pr_cdcooper  => pr_cdcooper                   --> Cooperativa conectada
                                   ,pr_cdprogra  => pr_cdprogra                   --> Programa chamador
                                   ,pr_dtmvtolt  => vr_dtmvtolt                   --> Data do movimento atual
                                   ,pr_dsxml     => pr_clobxml                 --> Arquivo XML de dados
                                   ,pr_dsxmlnode => '/crrl712/informacoes/mes/detalhe'      --> Nó base do XML para leitura dos dados
                                   ,pr_dsjasper  => 'crrl712.jasper'             --> Arquivo de layout do iReport
                                   ,pr_cdrelato  => 712                            --> codigo relatorio
                                   ,pr_dsparams  => NULL                          --> Sem parâmetros
                                   ,pr_dsarqsaid => vr_nmdireto||'/'||pr_nmarqimp --> Arquivo final com o path
                                   ,pr_qtcoluna  => 132                            --> Colunas do relatorio
                                   ,pr_flg_gerar => 'S'                           --> Geraçao na hora
                                   ,pr_flg_impri => 'N'                           --> Chamar a impressão (Imprim.p)
                                   ,pr_nmformul  => NULL                          --> Nome do formulário para impressão
                                   ,pr_nrcopias  => 1                             --> Número de cópias
                                   ,pr_sqcabrel  => 2                             --> Qual a seq do cabrel                                       
                                   ,pr_des_erro  => vr_dscritic);                 --> Saída com erro
                                   
        --Se ocorreu erro no relatorio
        IF vr_dscritic IS NOT NULL THEN
          --Levantar Excecao
          RAISE vr_exc_erro;
        END IF; 
        
        IF pr_idorigem = 5 THEN
          --Enviar arquivo para Web
          GENE0002.pc_envia_arquivo_web(pr_cdcooper => pr_cdcooper        --Codigo Cooperativa
                                       ,pr_cdagenci => pr_cdagenci        --Codigo Agencia
                                       ,pr_nrdcaixa => pr_nrdcaixa        --Numero do Caixa
                                       ,pr_nmarqimp => pr_nmarqimp        --Nome Arquivo Impressao
                                       ,pr_nmdireto => vr_nmdireto        --Nome Diretorio
                                       ,pr_nmarqpdf => pr_nmarqpdf        --Nome Arquivo PDF
                                       ,pr_des_reto => vr_des_reto        --Retorno OK/NOK
                                       ,pr_tab_erro => vr_tab_erro);      --tabela erro
                               
          --Se ocorreu erro
          IF vr_des_reto <> 'OK' THEN
            --Se tem erro na tabela 
            IF vr_tab_erro.COUNT > 0 THEN
              vr_dscritic:= vr_tab_erro(vr_tab_erro.FIRST).dscritic;
            ELSE
              vr_dscritic:= 'Erro ao enviar arquivo para web.';  
            END IF; 
            --Sair 
            RAISE vr_exc_erro;
          END IF; 
        
        END IF; --pr_idorigem = 5
        
        --Retorno com Sucesso
        pr_des_reto:= 'OK';
        
      END IF; -- pr_flgrodar = true        
        
    EXCEPTION
      WHEN vr_exc_sair THEN
        pr_des_reto:= 'OK';
        vr_cdcritic:= NULL;
        vr_dscritic:= NULL;
        
    END;          
    
    --Escrever erro no Log
    IF pr_flgerlog = 1 THEN  
      --Executar rotina geracao log
      gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                          ,pr_cdoperad => vr_cdoperad
                          ,pr_dscritic => vr_dscritic
                          ,pr_dsorigem => vr_dsorigem
                          ,pr_dstransa => vr_dstransa
                          ,pr_dttransa => TRUNC(SYSDATE)
                          ,pr_flgtrans => (CASE pr_des_reto WHEN 'OK' THEN 1 ELSE 0 END)
                          ,pr_hrtransa => gene0002.fn_busca_time
                          ,pr_idseqttl => 1
                          ,pr_nmdatela => vr_nmdatela
                          ,pr_nrdconta => pr_nrdconta
                          ,pr_nrdrowid => vr_nrdrowid);
    END IF; 
    gene0001.pc_set_modulo(pr_action => NULL, pr_module => NULL);
  EXCEPTION
    WHEN vr_exc_erro THEN
      -- Retorno não OK
      pr_des_reto := 'NOK';
      
      --Monta mensagem de erro
      pr_cdcritic := vr_cdcritic;
      pr_dscritic := vr_dscritic;
      
      -- Se foi solicitado geração de LOG
      IF pr_flgerlog = 1 THEN
        -- Chamar geração de LOG
        gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                            ,pr_cdoperad => pr_cdoperad
                            ,pr_dscritic => vr_dscritic
                            ,pr_dsorigem => vr_dsorigem
                            ,pr_dstransa => vr_dstransa
                            ,pr_dttransa => TRUNC(SYSDATE)
                            ,pr_flgtrans => 0 --> FALSE
                            ,pr_hrtransa => gene0002.fn_busca_time
                            ,pr_idseqttl => 1
                            ,pr_nmdatela => pr_nmdatela
                            ,pr_nrdconta => pr_nrdconta
                            ,pr_nrdrowid => vr_nrdrowid);
      END IF;  
      
    WHEN OTHERS THEN
      cecred.pc_internal_exception;
      -- Retorno não OK
      pr_des_reto := 'NOK';
      -- Chamar rotina de gravação de erro
      vr_dscritic := 'Erro na pc_gera_extrato_op_credito --> '|| sqlerrm;          
      
      -- Se foi solicitado geração de LOG
      IF pr_flgerlog = 1 THEN
        -- Chamar geração de LOG
        gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                            ,pr_cdoperad => pr_cdoperad
                            ,pr_dscritic => vr_dscritic
                            ,pr_dsorigem => vr_dsorigem
                            ,pr_dstransa => vr_dstransa
                            ,pr_dttransa => TRUNC(SYSDATE)
                            ,pr_flgtrans => 0 --> FALSE
                            ,pr_hrtransa => gene0002.fn_busca_time
                            ,pr_idseqttl => 1
                            ,pr_nmdatela => pr_nmdatela
                            ,pr_nrdconta => pr_nrdconta
                            ,pr_nrdrowid => vr_nrdrowid);
                            
      END IF;
          
  END;
      
  END pc_gera_extrato_op_credito;  

    -- Subrotina para gerar impressao
    PROCEDURE pc_gera_impressao (pr_cdcooper IN crapcop.cdcooper%TYPE  --Codigo Cooperativa
                                ,pr_cdagenci IN crapass.cdagenci%TYPE  --Codigo Agencia
                                ,pr_nrdcaixa IN INTEGER                --Numero do Caixa
                                ,pr_idorigem IN INTEGER                --Origem dos Dados
                                ,pr_nmdatela IN VARCHAR2               --Nome da Tela
                                ,pr_dtmvtolt IN crapdat.dtmvtolt%TYPE  --Data Movimento
                                ,pr_dtmvtopr IN crapdat.dtmvtopr%TYPE  --Data Proximo Movimento
                                ,pr_cdprogra IN crapprg.cdprogra%TYPE  --Codigo Programa
                                ,pr_inproces IN INTEGER                --Indicador Processo
                                ,pr_cdoperad IN VARCHAR2               --Codigo Operador
                                ,pr_dsiduser IN VARCHAR2               --Identificador Usuario
                                ,pr_flgrodar IN BOOLEAN                --Flag Executar
                                ,pr_nrdconta IN crapass.nrdconta%TYPE  --Numero da Conta do Associado
                                ,pr_idseqttl IN crapttl.idseqttl%TYPE  --Sequencial do Titular
                                ,pr_tpextrat IN INTEGER                --Tipo de Extrato
                                ,pr_dtrefere IN DATE                   --Data de Referencia
                                ,pr_dtreffim IN DATE                   --Data Referencia Final
                                ,pr_flgtarif IN BOOLEAN                --Indicador Cobra tarifa
                                ,pr_inrelext IN INTEGER                --Indicador Relatorio Extrato
                                ,pr_inselext IN INTEGER                --Indicador Selecao Extrato
                                ,pr_nrctremp IN crapepr.nrctremp%TYPE  --Numero Contrato Emprestimo
                                ,pr_nraplica IN craplap.nraplica%TYPE  --Numero Aplicacao
                                ,pr_nranoref IN INTEGER                --Ano de Referencia
                                ,pr_flgerlog IN BOOLEAN                --Escreve erro Log
                                ,pr_clobxml1 IN OUT NOCOPY CLOB        --Clob arquivo de dados crrl040
                                ,pr_dstexto1 IN OUT NOCOPY VARCHAR2    --Texto para Clob 1
                                ,pr_clobxml2 IN OUT NOCOPY CLOB        --Clob arquivo de dados crrl044
                                ,pr_dstexto2 IN OUT NOCOPY VARCHAR2    --Texto para Clob 2
                                ,pr_clobxml3 IN OUT NOCOPY CLOB        --Clob arquivo de dados crrl073
                                ,pr_dstexto3 IN OUT NOCOPY VARCHAR2    --Texto para Clob 3
                                ,pr_clobxml4 IN OUT NOCOPY CLOB        --Clob arquivo de dados crrl088
                                ,pr_dstexto4 IN OUT NOCOPY VARCHAR2    --Texto para Clob 4
                                ,pr_clobxml5 IN OUT NOCOPY CLOB        --Clob arquivo de dados crrl209
                                ,pr_dstexto5 IN OUT NOCOPY VARCHAR2    --Texto para Clob 5
                                ,pr_clobxml6 IN OUT NOCOPY CLOB        --Clob arquivo de dados crrl370
                                ,pr_dstexto6 IN OUT NOCOPY VARCHAR2    --Texto para Clob 6
                                ,pr_clobxml7 IN OUT NOCOPY CLOB        --Clob arquivo de dados crrl499
                                ,pr_dstexto7 IN OUT NOCOPY VARCHAR2    --Texto para Clob 7
                                ,pr_clobxml8 IN OUT NOCOPY CLOB        --Clob arquivo de dados crrl143
                                ,pr_dstexto8 IN OUT NOCOPY VARCHAR2    --Texto para Clob 8
                                ,pr_clobxml9 IN OUT NOCOPY CLOB        --Clob arquivo de dados crrl143b
                                ,pr_dstexto9 IN OUT NOCOPY VARCHAR2    --Texto para Clob 9
                                ,pr_tab_craptab IN apli0001.typ_tab_ctablq   --> Tipo de tabela de Conta Bloqueada
                                ,pr_tab_craplpp IN apli0001.typ_tab_craplpp  --> Tipo de tabela com lancamento poupanca
                                ,pr_tab_craplrg IN apli0001.typ_tab_craplpp  --> Tipo de tabela com resgates
                                ,pr_tab_resgate IN apli0001.typ_tab_resgate  --> Tabela com valores dos resgates das contas por aplicacao
                                ,pr_intpextr IN INTEGER                      --> Tipo de extrato (1=Simplificado, 2=Detalhado)
                              ,pr_tpinform IN INTEGER DEFAULT 0      -- Tipo do Informe PJ 0-Anual / 1-Trimestral
                              ,pr_nrperiod IN INTEGER DEFAULT 1      -- Trimestre PJ 1-Jan-Mar / 2-Abr-Jun / 3-Jul-Set / 4-Out-Dez
                                ,pr_nmarqimp OUT VARCHAR2              --Nome Arquivo Impressao
                                ,pr_nmarqpdf OUT VARCHAR2              --Nome Arquivo PDF
                                ,pr_tab_erro OUT GENE0001.typ_tab_erro -- Tabela de Erros
                                ,pr_des_reto OUT VARCHAR2 ) IS         --Descricao OK/NOK
  BEGIN
  ---------------------------------------------------------------------------------------------------------------
  --
  --  Programa : pc_gera_impressao                    Antigo: procedures/b1wgen0112.p/Gera_Impressao
  --  Sistema  : 
  --  Sigla    : CRED
  --  Autor    : Alisson C. Berrido - Amcom
  --  Data     : Julho/2014                           Ultima atualizacao: 11/07/2016
  --
  -- Dados referentes ao programa:
  --
  -- Frequencia: -----
  -- Objetivo   : Procedure para gerar impressao do extrato do associado
  --
  -- Alterações : 02/07/2014 - Conversão Progress -> Oracle (Alisson - AMcom)
  --              
  --              11/07/2016 - M325 - Informe de Rendimentos (Guilherme/SUPERO)
  --                         - Inclusão novos parametros entrada
  --                         - Tratamento para informe Trimestral
  --              
  --              13/08/2018 - Extrato Analítico Apl. Programada - Prj. 411.2 (CIS Corporate)
  ---------------------------------------------------------------------------------------------------------------
  DECLARE
      --Variaveis Locais
      vr_nraplica craplap.nraplica%TYPE;
      --Variaveis Erro
      vr_cdcritic INTEGER;
      vr_dscritic VARCHAR2(4000);
      vr_des_reto VARCHAR2(3);
      --Variaveis de Excecoes
      vr_exc_erro EXCEPTION;
        
      vr_tpapprog NUMBER;
        
      BEGIN
        
        --Limpar parametros erro
        pr_des_reto:= 'OK';
        --Tipo de Extrato        
        IF pr_tpextrat = 1 THEN 
              --Extrato de Conta Corrente
              pc_gera_impextdpv (pr_cdcooper => pr_cdcooper      --Codigo Cooperativa
                                ,pr_cdagenci => pr_cdagenci      --Codigo Agencia
                                ,pr_nrdcaixa => pr_nrdcaixa      --Numero do Caixa
                                ,pr_idorigem => pr_idorigem      --Origem dos Dados
                                ,pr_dtmvtolt => pr_dtmvtolt      --Data Movimento
                                ,pr_cdprogra => pr_cdprogra      --Codigo Programa
                                ,pr_inproces => pr_inproces      --Indicador Processo
                                ,pr_cdoperad => pr_cdoperad      --Codigo Operador
                                ,pr_nmdatela => pr_nmdatela      --Nome da Tela                                
                                ,pr_dsiduser => pr_dsiduser      --Identificador Usuario
                                ,pr_flgrodar => pr_flgrodar      --Flag Executar
                                ,pr_nrdconta => pr_nrdconta      --Numero da Conta do Associado
                                ,pr_dtrefere => pr_dtrefere      --Data de Referencia
                                ,pr_dtreffim => pr_dtreffim      --Data Referencia Final
                                ,pr_inrelext => pr_inrelext      --Indicador Relatorio Extrato
                                ,pr_inselext => pr_inselext      --Indicador Selecao Extrato
                                ,pr_flgtarif => pr_flgtarif      --Indicador Cobra tarifa
                                ,pr_flgerlog => pr_flgerlog      --Escreve erro Log
                                ,pr_clobxml  => pr_clobxml1      --Clob arquivo de dados
                                ,pr_dstexto  => pr_dstexto1      --Texto Clob 1
                                ,pr_nmarqimp => pr_nmarqimp      --Nome Arquivo Impressao
                                ,pr_nmarqpdf => pr_nmarqpdf      --Nome Arquivo PDF
                                ,pr_tab_erro => pr_tab_erro      --Tabela de Erros
                                ,pr_des_reto => vr_des_reto);    --Descricao Erro
        ELSIF pr_tpextrat = 7 THEN 
          --Extrato de Investimentos
              pc_gera_impextcti (pr_cdcooper => pr_cdcooper      --Codigo Cooperativa
                                ,pr_cdagenci => pr_cdagenci      --Codigo Agencia
                                ,pr_nrdcaixa => pr_nrdcaixa      --Numero do Caixa
                                ,pr_idorigem => pr_idorigem      --Origem dos Dados
                                ,pr_nmdatela => pr_nmdatela      --Nome da Tela                                
                                ,pr_dtmvtolt => pr_dtmvtolt      --Data Movimento
                                ,pr_inproces => pr_inproces      --Indicador Processo
                                ,pr_cdprogra => pr_cdprogra      --Codigo Programa
                                ,pr_cdoperad => pr_cdoperad      --Codigo Operador
                                ,pr_dsiduser => pr_dsiduser      --Identificador Usuario
                                ,pr_nrdconta => pr_nrdconta      --Numero da Conta do Associado
                                ,pr_idseqttl => pr_idseqttl      --Sequencial do Titular
                                ,pr_dtiniper => pr_dtrefere      --Data de Referencia
                                ,pr_flgrodar => pr_flgrodar      --Flag Executar
                                ,pr_flgerlog => pr_flgerlog      --Escreve erro Log
                                ,pr_clobxml  => pr_clobxml6      --Clob arquivo de dados
                                ,pr_dstexto  => pr_dstexto6      --Texto Clob 6
                                ,pr_tab_craptab => pr_tab_craptab --> Tipo de tabela de Conta Bloqueada
                                ,pr_nmarqimp => pr_nmarqimp      --Nome Arquivo Impressao
                                ,pr_nmarqpdf => pr_nmarqpdf      --Nome Arquivo PDF
                                ,pr_tab_erro => pr_tab_erro      --Tabela de Erros
                                ,pr_des_reto => vr_des_reto);    --Descricao Erro
        ELSIF pr_tpextrat IN (2,6) THEN 
          --Extrato de Imposto de Renda
          IF pr_tpinform = 0 THEN  -- Anual (Padrao)
              pc_gera_impextir  (pr_cdcooper => pr_cdcooper      --Codigo Cooperativa
                                ,pr_cdagenci => pr_cdagenci      --Codigo Agencia
                                ,pr_nrdcaixa => pr_nrdcaixa      --Numero do Caixa
                                ,pr_idorigem => pr_idorigem      --Origem dos Dados
                                ,pr_nmdatela => pr_nmdatela      --Nome da Tela                                
                                ,pr_dtmvtolt => pr_dtmvtolt      --Data Movimento
                                ,pr_inproces => pr_inproces      --Indicador Processo
                                ,pr_cdprogra => pr_cdprogra      --Codigo Programa
                                ,pr_cdoperad => pr_cdoperad      --Codigo Operador
                                ,pr_dsiduser => pr_dsiduser      --Identificador Usuario
                                ,pr_nrdconta => pr_nrdconta      --Numero da Conta do Associado
                                ,pr_anorefer => pr_nranoref      --Ano de Referencia
                                ,pr_tpextrat => pr_tpextrat      --Tipo de Extrato
                                ,pr_flgrodar => pr_flgrodar      --Flag Executar
                                ,pr_flgerlog => pr_flgerlog      --Escreve erro Log
                                ,pr_clobxml  => pr_clobxml2      --Clob arquivo de dados
                                ,pr_dstexto  => pr_dstexto2      --Texto Clob 2
                                ,pr_nmarqimp => pr_nmarqimp      --Nome Arquivo Impressao
                                ,pr_nmarqpdf => pr_nmarqpdf      --Nome Arquivo PDF
                                ,pr_tab_erro => pr_tab_erro      --Tabela de Erros
                                ,pr_des_reto => vr_des_reto);    --Descricao Erro
          ELSE
             pc_gera_impextir_pj_trim
                                (pr_cdcooper => pr_cdcooper      --Codigo Cooperativa
                                ,pr_cdagenci => pr_cdagenci      --Codigo Agencia
                                ,pr_nrdcaixa => pr_nrdcaixa      --Numero do Caixa
                                ,pr_idorigem => pr_idorigem      --Origem dos Dados
                                ,pr_nmdatela => pr_nmdatela      --Nome da Tela
                                ,pr_dtmvtolt => pr_dtmvtolt      --Data Movimento
                                ,pr_inproces => pr_inproces      --Indicador Processo
                                ,pr_cdprogra => pr_cdprogra      --Codigo Programa
                                ,pr_cdoperad => pr_cdoperad      --Codigo Operador
                                ,pr_dsiduser => pr_dsiduser      --Identificador Usuario
                                ,pr_nrdconta => pr_nrdconta      --Numero da Conta do Associado
                                ,pr_anorefer => pr_nranoref      --Ano de Referencia
                                ,pr_tpextrat => pr_tpextrat      --Tipo de Extrato
                                ,pr_nrperiod => pr_nrperiod      -- Trimestre de Referencia
                                ,pr_flgrodar => pr_flgrodar      --Flag Executar
                                ,pr_flgerlog => pr_flgerlog      --Escreve erro Log
                                ,pr_clobxml  => pr_clobxml2      --Clob arquivo de dados
                                ,pr_dstexto  => pr_dstexto2      --Texto Clob 2
                                ,pr_dsmsgerr => vr_dscritic      -- Mensagem de erro (Progress)
                                ,pr_nmarqimp => pr_nmarqimp      --Nome Arquivo Impressao
                                ,pr_nmarqpdf => pr_nmarqpdf      --Nome Arquivo PDF
                                ,pr_tab_erro => pr_tab_erro      --Tabela de Erros
                                ,pr_des_reto => vr_des_reto);    --Descricao Erro
          END IF;
        ELSIF pr_tpextrat IN (3,11) THEN /* Emprestimo e Portabilidade */
          --Extrato de Emprestimo
              pc_gera_impextepr (pr_cdcooper => pr_cdcooper      --Codigo Cooperativa
                                ,pr_cdagenci => pr_cdagenci      --Codigo Agencia
                                ,pr_nrdcaixa => pr_nrdcaixa      --Numero do Caixa
                                ,pr_idorigem => pr_idorigem      --Origem dos Dados
                                ,pr_dtmvtolt => pr_dtmvtolt      --Data Movimento
                                ,pr_dtmvtopr => pr_dtmvtopr      --Data Proximo Movimento
                                ,pr_cdprogra => pr_cdprogra      --Codigo Programa
                                ,pr_cdoperad => pr_cdoperad      --Codigo Operador
                                ,pr_nmdatela => pr_nmdatela      --Nome da Tela                                
                                ,pr_inproces => pr_inproces      --Indicador Processo
                                ,pr_dsiduser => pr_dsiduser      --Identificador Usuario
                                ,pr_tpextrat => pr_tpextrat      --Tipo de Extrato
                                ,pr_flgrodar => pr_flgrodar      --Flag Executar                                
                                ,pr_nrdconta => pr_nrdconta      --Numero da Conta do Associado
                                ,pr_idseqttl => pr_idseqttl      --Sequencial do Titular
                                ,pr_nrctremp => pr_nrctremp      --Numero Contrato Emprestimo
                                ,pr_flgerlog => pr_flgerlog      --Escreve erro Log                                
                                ,pr_inselext => pr_inselext      --Indicador Selecao Extrato
                                ,pr_intpextr => pr_intpextr      --Tipo Extrato
                                ,pr_clobxml  => pr_clobxml3      --Clob arquivo de dados
                                ,pr_dstexto  => pr_dstexto3      --Texto Clob 3
                                ,pr_nmarqimp => pr_nmarqimp      --Nome Arquivo Impressao
                                ,pr_nmarqpdf => pr_nmarqpdf      --Nome Arquivo PDF
                                ,pr_tab_erro => pr_tab_erro      --Tabela de Erros
                                ,pr_des_reto => vr_des_reto);    --Descricao Erro
        ELSIF pr_tpextrat = 4 THEN /* Aplicacao */ 
          --Verificar Extrato         
          IF pr_inselext = 2 THEN
            vr_nraplica:= 0;
          ELSE
            vr_nraplica:= pr_nraplica;
          END IF; 
          --Extrato de Rendimento das Aplicacoes    
              pc_gera_impextrda (pr_cdcooper => pr_cdcooper      --Codigo Cooperativa
                                ,pr_cdagenci => pr_cdagenci      --Codigo Agencia
                                ,pr_nrdcaixa => pr_nrdcaixa      --Numero do Caixa
                                ,pr_idorigem => pr_idorigem      --Origem dos Dados
                                ,pr_nmdatela => pr_nmdatela      --Nome da Tela                                
                                ,pr_dtmvtolt => pr_dtmvtolt      --Data Movimento
                                ,pr_inproces => pr_inproces      --Indicador Processo
                                ,pr_cdprogra => pr_cdprogra      --Codigo Programa
                                ,pr_cdoperad => pr_cdoperad      --Codigo Operador
                                ,pr_dsiduser => pr_dsiduser      --Identificador Usuario
                                ,pr_nrdconta => pr_nrdconta      --Numero da Conta do Associado
                                ,pr_nraplica => vr_nraplica      --Numero da Aplicacao
                                ,pr_idseqttl => pr_idseqttl      --Sequencial do Titular
                                ,pr_flgrodar => pr_flgrodar      --Flag Executar                                
                                ,pr_flgerlog => pr_flgerlog      --Escreve erro Log                                
                                ,pr_tprelato => pr_inselext      --Indicador Selecao Extrato                                                                
                                ,pr_clobxml  => pr_clobxml4      --Clob arquivo de dados
                                ,pr_dstexto  => pr_dstexto4      --Texto Clob 4
                                ,pr_nmarqimp => pr_nmarqimp      --Nome Arquivo Impressao
                                ,pr_nmarqpdf => pr_nmarqpdf      --Nome Arquivo PDF
                                ,pr_tab_erro => pr_tab_erro      --Tabela de Erros
                                ,pr_des_reto => vr_des_reto);    --Descricao Erro

        ELSIF pr_tpextrat = 5 THEN /* Poupanca Programada */
          --Verificar Extrato
          IF pr_inselext = 2 THEN
            vr_nraplica:= 0;
          ELSE
            vr_nraplica:= pr_nraplica;
          END IF; 
          IF pr_inrelext IN (1,2) THEN -- Extrato Default (Completo ou das aplicações programadas)
             IF pr_inrelext = 1 THEN -- Sintético Aplic. Programada
                vr_tpapprog := 0;
             ELSE  
                vr_tpapprog := 2;
             END IF;
          --Extrato da Poupanca Programada    
              pc_gera_impextppr (pr_cdcooper => pr_cdcooper      --Codigo Cooperativa
                                ,pr_cdagenci => pr_cdagenci      --Codigo Agencia
                                ,pr_nrdcaixa => pr_nrdcaixa      --Numero do Caixa
                                ,pr_idorigem => pr_idorigem      --Origem dos Dados
                                ,pr_nmdatela => pr_nmdatela      --Nome da Tela                                
                                ,pr_dtmvtolt => pr_dtmvtolt      --Data Movimento
                                ,pr_dtmvtopr => pr_dtmvtopr      --Data Proximo Movimento
                                ,pr_inproces => pr_inproces      --Indicador Processo
                                ,pr_cdprogra => pr_cdprogra      --Codigo Programa
                                ,pr_cdoperad => pr_cdoperad      --Codigo Operador
                                ,pr_dsiduser => pr_dsiduser      --Identificador Usuario
                                ,pr_nrdconta => pr_nrdconta      --Numero da Conta do Associado
                                ,pr_nrctrrpp => vr_nraplica      --Numero Contrato
                                ,pr_tpapprog => vr_tpapprog      --Tipo de Aplicao (0 = Ambas, 1 = RPP, 2 = Apl. Prog.)
                                ,pr_dtiniper => pr_dtrefere      --Data Inicio Periodo
                                ,pr_dtfimper => pr_dtreffim      --Data Final Periodo
                                ,pr_idseqttl => pr_idseqttl      --Sequencial do Titular
                                ,pr_flgrodar => pr_flgrodar      --Flag Executar                                
                                ,pr_flgerlog => pr_flgerlog      --Escreve erro Log                                
                                ,pr_clobxml  => pr_clobxml5      --Clob arquivo de dados
                                ,pr_dstexto  => pr_dstexto5      --Texto Clob 5 
                                ,pr_tab_craptab => pr_tab_craptab --Tipo de tabela de Conta Bloqueada
                                ,pr_tab_craplpp => pr_tab_craplpp --Tipo de tabela com lancamento poupanca
                                ,pr_tab_craplrg => pr_tab_craplpp --Tipo de tabela com resgates
                                ,pr_tab_resgate => pr_tab_resgate --Tabela com valores dos resgates das contas por aplicacao
                                ,pr_nmarqimp => pr_nmarqimp       --Nome Arquivo Impressao
                                ,pr_nmarqpdf => pr_nmarqpdf       --Nome Arquivo PDF
                                ,pr_tab_erro => pr_tab_erro       --Tabela de Erros
                                ,pr_des_reto => vr_des_reto);     --Descricao Erro
          ELSE                      
              --Extrato Analítico da Aplicação Programada    
                pc_gera_impextaap (pr_cdcooper => pr_cdcooper      --Codigo Cooperativa
                                  ,pr_cdagenci => pr_cdagenci      --Codigo Agencia
                                  ,pr_nrdcaixa => pr_nrdcaixa      --Numero do Caixa
                                  ,pr_idorigem => pr_idorigem      --Origem dos Dados
                                  ,pr_nmdatela => pr_nmdatela      --Nome da Tela                                
                                  ,pr_dtmvtolt => pr_dtmvtolt      --Data Movimento
                                  ,pr_dtmvtopr => pr_dtmvtopr      --Data Proximo Movimento
                                  ,pr_inproces => pr_inproces      --Indicador Processo
                                  ,pr_cdprogra => pr_cdprogra      --Codigo Programa
                                  ,pr_cdoperad => pr_cdoperad      --Codigo Operador
                                  ,pr_dsiduser => pr_dsiduser      --Identificador Usuario
                                  ,pr_nrdconta => pr_nrdconta      --Numero da Conta do Associado
                                  ,pr_nrctrrpp => vr_nraplica      --Numero Contrato
                                ,pr_dtiniper => pr_dtrefere      --Data Inicio Periodo
                                ,pr_dtfimper => pr_dtreffim      --Data Final Periodo
                                ,pr_idseqttl => pr_idseqttl      --Sequencial do Titular
                                ,pr_flgrodar => pr_flgrodar      --Flag Executar                                
                                ,pr_flgerlog => pr_flgerlog      --Escreve erro Log                                
                                ,pr_clobxml  => pr_clobxml5      --Clob arquivo de dados
                                ,pr_dstexto  => pr_dstexto5      --Texto Clob 5 
                                ,pr_tab_craptab => pr_tab_craptab --Tipo de tabela de Conta Bloqueada
                                ,pr_tab_craplpp => pr_tab_craplpp --Tipo de tabela com lancamento poupanca
                                ,pr_tab_craplrg => pr_tab_craplpp --Tipo de tabela com resgates
                                ,pr_tab_resgate => pr_tab_resgate --Tabela com valores dos resgates das contas por aplicacao
                                ,pr_nmarqimp => pr_nmarqimp       --Nome Arquivo Impressao
                                ,pr_nmarqpdf => pr_nmarqpdf       --Nome Arquivo PDF
                                ,pr_tab_erro => pr_tab_erro       --Tabela de Erros
                                ,pr_des_reto => vr_des_reto);     --Descricao Erro
          END IF;              
        ELSIF pr_tpextrat = 8 THEN /* Capital */
          --Extrato Capital
              pc_gera_impextcap (pr_cdcooper => pr_cdcooper       --Codigo Cooperativa
                                ,pr_cdagenci => pr_cdagenci       --Codigo Agencia
                                ,pr_nrdcaixa => pr_nrdcaixa       --Numero do Caixa
                                ,pr_idorigem => pr_idorigem       --Origem dos Dados
                                ,pr_nmdatela => pr_nmdatela       --Nome da Tela                                
                                ,pr_dtmvtolt => pr_dtmvtolt       --Data Movimento
                                ,pr_inproces => pr_inproces       --Indicador Processo
                                ,pr_cdprogra => pr_cdprogra       --Codigo Programa
                                ,pr_cdoperad => pr_cdoperad       --Codigo Operador
                                ,pr_dsiduser => pr_dsiduser       --Identificador Usuario
                                ,pr_nrdconta => pr_nrdconta       --Numero da Conta do Associado
                                ,pr_dtrefere => pr_dtrefere       --Data de Referencia
                                ,pr_idseqttl => pr_idseqttl       --Sequencial do Titular
                                ,pr_flgrodar => pr_flgrodar       --Flag Executar                                
                                ,pr_flgerlog => pr_flgerlog       --Escreve erro Log
                                ,pr_clobxml  => pr_clobxml8       --Clob arquivo de dados
                                ,pr_dstexto  => pr_dstexto8       --Texto Clob 8          
                                ,pr_nmarqimp => pr_nmarqimp       --Nome Arquivo Impressao
                                ,pr_nmarqpdf => pr_nmarqpdf       --Nome Arquivo PDF
                                ,pr_tab_erro => pr_tab_erro       --Tabela de Erros
                                ,pr_des_reto => vr_des_reto);     --Descricao Erro
        ELSIF pr_tpextrat = 9 THEN /* Tarifas */
          --Verificar Extrato
          IF pr_inselext = 2 THEN
            vr_nraplica:= 0;
          ELSE
            vr_nraplica:= pr_nraplica;
          END IF;
          --Extrato de tarifas     
              pc_gera_impexttar (pr_cdcooper => pr_cdcooper       --Codigo Cooperativa
                                ,pr_cdagenci => pr_cdagenci       --Codigo Agencia
                                ,pr_nrdcaixa => pr_nrdcaixa       --Numero do Caixa
                                ,pr_idorigem => pr_idorigem       --Origem dos Dados
                                ,pr_nmdatela => pr_nmdatela       --Nome da Tela                                
                                ,pr_dtmvtolt => pr_dtmvtolt       --Data Movimento
                                ,pr_inproces => pr_inproces       --Indicador Processo
                                ,pr_cdprogra => pr_cdprogra       --Codigo Programa
                                ,pr_cdoperad => pr_cdoperad       --Codigo Operador
                                ,pr_dsiduser => pr_dsiduser       --Identificador Usuario
                                ,pr_nrdconta => pr_nrdconta       --Numero da Conta do Associado
                                ,pr_nranoref => pr_nranoref       --Ano de Referencia
                                ,pr_flgrodar => pr_flgrodar       --Flag Executar                                
                                ,pr_flgerlog => pr_flgerlog       --Escreve erro Log                                
                                ,pr_clobxml  => pr_clobxml7       --Clob arquivo de dados
                                ,pr_dstexto  => pr_dstexto7       --Texto Clob 7                                
                                ,pr_nmarqimp => pr_nmarqimp       --Nome Arquivo Impressao
                                ,pr_nmarqpdf => pr_nmarqpdf       --Nome Arquivo PDF
                                ,pr_tab_erro => pr_tab_erro       --Tabela de Erros
                                ,pr_des_reto => vr_des_reto);     --Descricao Erro
        ELSIF pr_tpextrat = 10 THEN /* Aplicacoes */
          --Extrato das Aplicacoes
          pc_gera_impextapl (pr_cdcooper => pr_cdcooper           --Codigo Cooperativa
                            ,pr_cdagenci => pr_cdagenci           --Codigo Agencia
                            ,pr_nrdcaixa => pr_nrdcaixa           --Numero do Caixa
                            ,pr_idorigem => pr_idorigem           --Origem dos Dados
                            ,pr_nmdatela => pr_nmdatela           --Nome da Tela                                
                            ,pr_dtmvtolt => pr_dtmvtolt           --Data Movimento
                            ,pr_cdprogra => pr_cdprogra           --Codigo Programa
                            ,pr_cdoperad => pr_cdoperad           --Codigo Operador
                            ,pr_inproces => pr_inproces           --Indicador Processo
                            ,pr_dsiduser => pr_dsiduser           --Identificador Usuario
                            ,pr_nrdconta => pr_nrdconta           --Numero da Conta do Associado
                            ,pr_dtrefere => pr_dtrefere           --Data de Referencia
                            ,pr_flgrodar => pr_flgrodar           --Flag Executar                                
                            ,pr_flgerlog => pr_flgerlog           --Escreve erro Log  
                            ,pr_clobxml  => pr_clobxml9           --Clob arquivo de dados
                            ,pr_dstexto  => pr_dstexto9           --Texto Clob 9
                            ,pr_tab_craptab => pr_tab_craptab     --Tipo de tabela de Conta Bloqueada
                            ,pr_tab_craplpp => pr_tab_craplpp     --Tipo de tabela com lancamento poupanca
                            ,pr_tab_craplrg => pr_tab_craplpp     --Tipo de tabela com resgates
                            ,pr_tab_resgate => pr_tab_resgate     --Tabela com valores dos resgates das contas por aplicacao
                            ,pr_nmarqimp => pr_nmarqimp           --Nome Arquivo Impressao
                            ,pr_nmarqpdf => pr_nmarqpdf           --Nome Arquivo PDF
                            ,pr_tab_erro => pr_tab_erro           --Tabela de Erros
                            ,pr_des_reto => vr_des_reto);         --Descricao Erro
                            
        ELSIF pr_tpextrat = 12 THEN /* Juros e encargos */
          --Extrato de juros e encargos
           pc_gera_extrato_op_credito(pr_cdcooper => pr_cdcooper --Codigo Cooperativa
                                     ,pr_cdagenci => pr_cdagenci --Codigo Agencia
                                     ,pr_nrdcaixa => pr_nrdcaixa --Numero do Caixa
                                     ,pr_idorigem => pr_idorigem --Origem dos Dados
                                     ,pr_nmdatela => pr_nmdatela --Nome da Tela                                
                                     ,pr_dtmvtolt => TO_CHAR(pr_dtmvtolt,'DD/MM/RRRR') --Data Movimento
                                     ,pr_cdprogra => pr_cdprogra --Codigo Programa
                                     ,pr_cdoperad => pr_cdoperad --Codigo Operador                                  
                                     ,pr_dsiduser => pr_dsiduser --Identificador Usuario
                                     ,pr_nrdconta => pr_nrdconta --Numero da Conta do Associado
                                     ,pr_dtrefere => to_char(pr_nranoref) --Data de Referencia
                                     ,pr_flgrodar => (CASE pr_flgrodar WHEN TRUE THEN 1 ELSE 0 END) --Flag Executar
                                     ,pr_flgerlog => (CASE pr_flgerlog WHEN TRUE THEN 1 ELSE 0 END) --Escreve erro Log                                                                                           
                                     ,pr_nmarqimp => pr_nmarqimp --Nome Arquivo Impressao
                                     ,pr_nmarqpdf => pr_nmarqpdf --Nome Arquivo PDF
                                     ,pr_des_reto => vr_des_reto --Saida OK/NOK
                                     ,pr_clobxml  => pr_clobxml9 --Clob arquivo de dados
                                     ,pr_cdcritic => vr_cdcritic --Codigo Erro
                                     ,pr_dscritic => vr_dscritic);           --Descricao Erro
                                                          
           --Se ocorreu erro
           IF vr_des_reto <> 'OK' THEN
                 
             IF TRIM(vr_cdcritic) IS NULL AND TRIM(vr_dscritic) IS NULL THEN
               
               --Monta mensagem de erro
               vr_dscritic :=  'Erro na pc_gera_extrato_op_credito.';
             
             END IF;
             
             -- Chamar rotina de gravacao de erro
             gene0001.pc_gera_erro (pr_cdcooper => pr_cdcooper
                                   ,pr_cdagenci => pr_cdagenci
                                   ,pr_nrdcaixa => pr_nrdcaixa
                                   ,pr_nrsequen => 1  /** Sequencia **/
                                   ,pr_cdcritic => vr_cdcritic
                                   ,pr_dscritic => vr_dscritic
                                   ,pr_tab_erro => pr_tab_erro);
                                   
           END IF;                        
                                
        ELSE
          --Critica
          vr_cdcritic:= 14;
          --Montar critica
          vr_dscritic:= gene0001.fn_busca_critica(vr_cdcritic);
          -- Chamar rotina de gravacao de erro
          gene0001.pc_gera_erro (pr_cdcooper => pr_cdcooper
                                ,pr_cdagenci => pr_cdagenci
                                ,pr_nrdcaixa => pr_nrdcaixa
                                ,pr_nrsequen => 1  /** Sequencia **/
                                ,pr_cdcritic => vr_cdcritic
                                ,pr_dscritic => vr_dscritic
                                ,pr_tab_erro => pr_tab_erro);
        END IF;
        
        --Se possui erro  
        IF pr_tab_erro.COUNT > 0 THEN
          pr_des_reto:= 'NOK'; 
        ELSE
          pr_des_reto:= 'OK';
        END IF;
        
      EXCEPTION
        WHEN vr_exc_erro THEN
          -- Chamar rotina de gravacao de erro
          gene0001.pc_gera_erro (pr_cdcooper => pr_cdcooper
                                ,pr_cdagenci => pr_cdagenci
                                ,pr_nrdcaixa => pr_nrdcaixa
                                ,pr_nrsequen => 1  /** Sequencia **/
                                ,pr_cdcritic => vr_cdcritic
                                ,pr_dscritic => vr_dscritic
                                ,pr_tab_erro => pr_tab_erro);
          pr_des_reto:= 'NOK';  
        WHEN OTHERS THEN
          cecred.pc_internal_exception(pr_cdcooper);
          --Montar critica
          vr_dscritic:=  'Erro ao executar a rotina pc_gera_impressao. '||sqlerrm; 
          -- Chamar rotina de gravacao de erro
          gene0001.pc_gera_erro (pr_cdcooper => pr_cdcooper
                                ,pr_cdagenci => pr_cdagenci
                                ,pr_nrdcaixa => pr_nrdcaixa
                                ,pr_nrsequen => 1  /** Sequencia **/
                                ,pr_cdcritic => vr_cdcritic
                                ,pr_dscritic => vr_dscritic
                                ,pr_tab_erro => pr_tab_erro); 
          pr_des_reto:= 'NOK';                       

      END;    
    END pc_gera_impressao;  

    PROCEDURE pc_gera_impressao_car( pr_cdcooper IN crapcop.cdcooper%TYPE  --Codigo Cooperativa
                                    ,pr_cdagenci IN crapass.cdagenci%TYPE  --Codigo Agencia
                                    ,pr_nrdcaixa IN INTEGER                --Numero do Caixa
                                    ,pr_idorigem IN INTEGER                --Origem dos Dados
                                    ,pr_nmdatela IN VARCHAR2               --Nome da Tela
                                    ,pr_dtmvtolt IN crapdat.dtmvtolt%TYPE  --Data Movimento
                                    ,pr_dtmvtopr IN crapdat.dtmvtopr%TYPE  --Data Proximo Movimento
                                    ,pr_cdprogra IN crapprg.cdprogra%TYPE  --Codigo Programa
                                    ,pr_inproces IN INTEGER                --Indicador Processo
                                    ,pr_cdoperad IN VARCHAR2               --Codigo Operador
                                    ,pr_dsiduser IN VARCHAR2               --Identificador Usuario
                                    ,pr_flgrodar IN INTEGER                --Flag Executar
                                    ,pr_nrdconta IN crapass.nrdconta%TYPE  --Numero da Conta do Associado
                                    ,pr_idseqttl IN crapttl.idseqttl%TYPE  --Sequencial do Titular
                                    ,pr_tpextrat IN INTEGER                --Tipo de Extrato
                                    ,pr_dtrefere IN DATE                   --Data de Referencia
                                    ,pr_dtreffim IN DATE                   --Data Referencia Final
                                    ,pr_flgtarif IN INTEGER                --Indicador Cobra tarifa
                                    ,pr_inrelext IN INTEGER                --Indicador Relatorio Extrato
                                    ,pr_inselext IN INTEGER                --Indicador Selecao Extrato
                                    ,pr_nrctremp IN crapepr.nrctremp%TYPE  --Numero Contrato Emprestimo
                                    ,pr_nraplica IN craplap.nraplica%TYPE  --Numero Aplicacao
                                    ,pr_nranoref IN INTEGER                --Ano de Referencia
                                    ,pr_flgerlog IN INTEGER                --Escreve erro Log
                                    ,pr_intpextr IN INTEGER                --Tipo de extrato (1=Simplificado, 2=Detalhado)
                                    ,pr_tpinform IN INTEGER DEFAULT 0      -- Tipo do Informe PJ 0-Anual / 1-Trimestral
                                    ,pr_nrperiod IN INTEGER DEFAULT 1      -- Trimestre PJ 1-Jan-Mar / 2-Abr-Jun / 3-Jul-Set / 4-Out-Dez
                                    ,pr_nmarqimp OUT VARCHAR2              --Nome Arquivo Impressao
                                    ,pr_nmarqpdf OUT VARCHAR2              --Nome Arquivo PDF
                                    ,pr_des_reto OUT VARCHAR2 ) IS         --Descricao OK/NOK                                    
    BEGIN
    ---------------------------------------------------------------------------------------------------------------
    --
    --  Programa : pc_gera_impressao_car                   Antigo: 
    --  Sistema  : 
    --  Sigla    : CRED
    --  Autor    : Carlos Rafael Tanholi - Cecred
    --  Data     : Outubro/2014                           Ultima atualizacao: 11/07/2016
    --
    -- Dados referentes ao programa:
    --
    -- Frequencia: -----
    -- Objetivo   : Procedure para possibilitar a utilizacao da pc_gera_impressao através do Oracle
    --              e assim realizar a impressao do extrato do associado
    --
    -- Alterações : 16/05/2016 - Ajustar cursor cr_craptab_ctabloq que estava filtrando o numero
    --                           da conta na crapcop e para que seja utilizado o indice da craptab
    --                           (Douglas - Chamado 452281)
    --              
    --              09/06/2016 - Removido cursor cr_craptab_ctabloq para utilizar a procedure padrao
    --                           TABE0001.pc_carrega_ctabloq (Douglas - Chamado 454248)
    --
    --              11/07/2016 - M325 - Informe de Rendimentos (Guilherme/SUPERO)
    --                           - Inclusão novos parametros entrada
    --
    --              17/08/2018 - Extrato analítico para Apl. Programada
    --                         - Proj. 411.2 - (CIS Corporate)
	  ---------------------------------------------------------------------------------------------------------------
    DECLARE
    
    -- Busca dos dados da cooperativa
    CURSOR cr_crapcop (pr_cdcooper IN crapcop.cdcooper%TYPE) IS
      SELECT crapcop.nmrescop
            ,crapcop.nmextcop
            ,crapcop.dsdircop
      FROM crapcop crapcop
      WHERE crapcop.cdcooper = pr_cdcooper;
    rw_crapcop cr_crapcop%ROWTYPE;
    
    
    -- Tratamento de erros
    vr_exc_saida EXCEPTION;
    -- Variaveis de XML
    vr_xml_temp VARCHAR2(32767);
    --variveis de retorno
    vr_nmarqimp VARCHAR2(200);
    vr_nmarqpdf VARCHAR2(200);
    vr_des_reto VARCHAR2(5);
    -- Temp Table
    vr_tab_erro GENE0001.typ_tab_erro;    
    -- Campos CLOB
    vr_clobxml1 CLOB;
    vr_clobxml2 CLOB;    
    vr_clobxml3 CLOB;
    vr_clobxml4 CLOB;
    vr_clobxml5 CLOB;
    vr_clobxml6 CLOB;
    vr_clobxml7 CLOB;
    vr_clobxml8 CLOB;
    vr_clobxml9 CLOB;
    -- Campos VARCHAR2
    vr_dstexto1 VARCHAR2(1);
    vr_dstexto2 VARCHAR2(1);
    vr_dstexto3 VARCHAR2(1);    
    vr_dstexto4 VARCHAR2(1);
    vr_dstexto5 VARCHAR2(1);
    vr_dstexto6 VARCHAR2(1);
    vr_dstexto7 VARCHAR2(1);
    vr_dstexto8 VARCHAR2(1);
    vr_dstexto9 VARCHAR2(1);
    -- variavies booleanas  
    vr_flgrodar BOOLEAN;
    vr_flgtarif BOOLEAN;
    vr_flgerlog BOOLEAN; 
    
    vr_nmdireto  VARCHAR2(100);
        
    ------------------------ VARIAVEIS PARA INDICES --------------------------  
    vr_index_craptab VARCHAR2(20);
    vr_index_craplpp VARCHAR2(20);
    vr_index_craplrg VARCHAR2(20);
    vr_index_resgate VARCHAR2(25);          
    
    ---------------------------- ESTRUTURAS DE TABELA ---------------------        
    vr_tab_craptab  APLI0001.typ_tab_ctablq;   --> Armazenar tabela de Conta Bloqueada
    vr_tab_craplpp  APLI0001.typ_tab_craplpp;  --> Armazenar tabela com lancamento poupanca
    vr_tab_craplrg  APLI0001.typ_tab_craplpp;  --> Armazenar tabela com resgates
    vr_tab_resgate  APLI0001.typ_tab_resgate;  --> Armazenar resgates das contas por aplicacao                
        
    -- Cursor genérico de calendário
    rw_crapdat btch0001.cr_crapdat%ROWTYPE;        
        
    vr_dsparame VARCHAR2(4000);
        
    -- Selecionar quantidade de saques em poupanca nos ultimos 6 meses
    CURSOR cr_craplpp (pr_cdcooper IN craplpp.cdcooper%TYPE
                      ,pr_dtmvtolt IN craplpp.dtmvtolt%TYPE
                      ,pr_nrdconta IN crapcop.nrdconta%TYPE) IS
          SELECT nrdconta
                ,nrctrrpp
                ,sum(qtlancmto) qtlancmto
                FROM (
                  SELECT lpp.nrdconta nrdconta
                        ,lpp.nrctrrpp nrctrrpp
            ,Count(*) qtlancmto
      FROM craplpp lpp
      WHERE lpp.cdcooper = pr_cdcooper
      AND lpp.cdhistor IN (158,496)
      AND lpp.dtmvtolt > pr_dtmvtolt
      AND lpp.nrdconta = pr_nrdconta
                  GROUP BY lpp.nrdconta,lpp.nrctrrpp
                  UNION       
                  SELECT rac.nrdconta nrdconta
                        ,rac.nrctrrpp nrctrrpp
                        ,Count(*) qtlancmto
                  FROM crapcpc cpc, craprac rac, craplac lac 
                  WHERE rac.cdcooper = pr_cdcooper
                    AND rac.nrdconta = pr_nrdconta
                    AND rac.nrctrrpp > 0
                    AND cpc.cdprodut = rac.cdprodut
                    AND rac.cdcooper = lac.cdcooper
                    AND rac.nrdconta = lac.nrdconta
                    AND lac.cdhistor in (cpc.cdhsrgap)
                    AND lac.dtmvtolt > pr_dtmvtolt       
               GROUP BY rac.nrdconta,rac.nrctrrpp 
               )
	        GROUP BY nrdconta,nrctrrpp;
                      
    --Contar a quantidade de resgates das contas
    CURSOR cr_craplrg_saque (pr_cdcooper IN craplrg.cdcooper%TYPE
                            ,pr_nrdconta IN crapcop.nrdconta%TYPE) IS
      SELECT lrg.nrdconta
            ,lrg.nraplica
            ,COUNT(*) qtlancmto
      FROM craplrg lrg
      WHERE lrg.cdcooper = pr_cdcooper
      AND lrg.tpaplica = 4
      AND lrg.inresgat = 0
      AND lrg.nrdconta = pr_nrdconta
      GROUP BY lrg.nrdconta,lrg.nraplica;

    --Selecionar informacoes dos lancamentos de resgate
    CURSOR cr_craplrg (pr_cdcooper IN craplrg.cdcooper%TYPE
                      ,pr_dtresgat IN craplrg.dtresgat%TYPE
                      ,pr_nrdconta IN crapcop.nrdconta%TYPE) IS
      SELECT lrg.nrdconta
            ,lrg.nraplica
            ,lrg.tpaplica
            ,lrg.tpresgat
            ,NVL(SUM(NVL(lrg.vllanmto,0)),0) vllanmto
      FROM craplrg lrg
      WHERE lrg.cdcooper = pr_cdcooper
      AND   lrg.dtresgat <= pr_dtresgat
      AND   lrg.inresgat = 0
      AND   lrg.tpresgat = 1
      AND lrg.nrdconta = pr_nrdconta
      GROUP BY lrg.nrdconta
              ,lrg.nraplica
              ,lrg.tpaplica
              ,lrg.tpresgat;                     
    
    vr_nmrotpro VARCHAR2(100) := 'EXTR0002.pc_gera_impressao_car';

    --------------------------FIM ESTRUTURAS DE TABELA----------------------------------------
    
    BEGIN 
      
      GENE0001.pc_set_modulo(pr_module => vr_nmrotpro, pr_action => vr_nmrotpro);

      vr_dsparame := 'pr_cdcooper:' || pr_cdcooper ||
                     ', pr_cdagenci:' || pr_cdagenci ||
                     ', pr_nrdcaixa:' || pr_nrdcaixa ||
                     ', pr_idorigem:' || pr_idorigem ||
                     ', pr_nmdatela:' || pr_nmdatela ||
                     ', pr_dtmvtolt:' || pr_dtmvtolt ||
                     ', pr_dtmvtopr:' || pr_dtmvtopr ||
                     ', pr_cdprogra:' || pr_cdprogra ||
                     ', pr_inproces:' || pr_inproces ||
                     ', pr_cdoperad:' || pr_cdoperad ||
                     ', pr_dsiduser:' || pr_dsiduser ||
                     ', pr_flgrodar:' || pr_flgrodar ||
                     ', pr_nrdconta:' || pr_nrdconta ||
                     ', pr_idseqttl:' || pr_idseqttl ||
                     ', pr_tpextrat:' || pr_tpextrat ||
                     ', pr_dtrefere:' || pr_dtrefere ||
                     ', pr_dtreffim:' || pr_dtreffim ||
                     ', pr_flgtarif:' || pr_flgtarif ||
                     ', pr_inrelext:' || pr_inrelext ||
                     ', pr_inselext:' || pr_inselext ||
                     ', pr_nrctremp:' || pr_nrctremp ||
                     ', pr_nraplica:' || pr_nraplica ||
                     ', pr_nranoref:' || pr_nranoref ||
                     ', pr_flgerlog:' || pr_flgerlog ||
                     ', pr_intpextr:' || pr_intpextr ||
                     ', pr_tpinform:' || pr_tpinform ||
                     ', pr_nrperiod:' || pr_nrperiod;

      -- Verifica se a cooperativa esta cadastrada
      OPEN cr_crapcop (pr_cdcooper => pr_cdcooper);
      FETCH cr_crapcop INTO rw_crapcop;
      -- Se não encontrar
      IF cr_crapcop%NOTFOUND THEN
        -- Fechar o cursor pois haverá raise
        CLOSE cr_crapcop;
        -- Montar mensagem de critica
        --vr_exc_saida := TRUE;
        RAISE vr_exc_saida;
      ELSE
        -- Apenas fechar o cursor
        CLOSE cr_crapcop;
      END IF;    
    
      /* 
      Tratamento necessario para variaveis do
      PROGRESS do tipo Booleano que devem ser
      passadas como Integer para o Oracle
      */   
      IF pr_flgrodar > 0 THEN
        vr_flgrodar := TRUE;
      ELSE
        vr_flgrodar := FALSE;
      END IF;
      
      IF pr_flgtarif > 0 THEN
        vr_flgtarif := TRUE;
      ELSE
        vr_flgtarif := FALSE;
      END IF;
      
      IF pr_flgerlog > 0 THEN
        vr_flgerlog := TRUE;
      ELSE
        vr_flgerlog := FALSE;
      END IF;

      -- carrega as PLTABLES necessarias
      IF pr_inproces = 1 AND (pr_tpextrat = 5 OR pr_tpextrat = 10) THEN

        -- Leitura do calendário da cooperativa
        OPEN btch0001.cr_crapdat(pr_cdcooper => pr_cdcooper);
        FETCH btch0001.cr_crapdat INTO rw_crapdat;
        CLOSE BTCH0001.cr_crapdat;
        -- limpa as PLTABLES   
        vr_tab_craptab.DELETE;
        vr_tab_craplpp.DELETE;
        vr_tab_craplrg.DELETE;
        vr_tab_resgate.DELETE;

        -- Carregar tabela de memoria de contas bloqueadas
        TABE0001.pc_carrega_ctablq(pr_cdcooper => pr_cdcooper
                                  ,pr_nrdconta => pr_nrdconta
                                  ,pr_tab_cta_bloq => vr_tab_craptab);

        -- Carregar tabela de memoria de lancamentos na poupanca
        FOR rw_craplpp IN cr_craplpp (pr_cdcooper => pr_cdcooper
                                     ,pr_dtmvtolt => rw_crapdat.dtmvtolt - 180
                                     ,pr_nrdconta => pr_nrdconta) LOOP
          --Se possuir mais de 3 registros
          IF rw_craplpp.qtlancmto > 3 THEN                                     
            -- Montar indice para acessar tabela
            vr_index_craplpp:= LPad(rw_craplpp.nrdconta,10,'0')||LPad(rw_craplpp.nrctrrpp,10,'0');
            -- Atribuir quantidade encontrada de cada conta ao vetor
            vr_tab_craplpp(vr_index_craplpp):= rw_craplpp.qtlancmto;
          END IF;
        END LOOP;

        -- Carregar tabela de memoria com total de resgates na poupanca
        FOR rw_craplrg IN cr_craplrg_saque (pr_cdcooper => pr_cdcooper
                                           ,pr_nrdconta => pr_nrdconta) LOOP
          -- Montar Indice para acesso quantidade lancamentos de resgate
          vr_index_craplrg:= LPad(rw_craplrg.nrdconta,10,'0')||LPad(rw_craplrg.nraplica,10,'0');
          -- Popular tabela de memoria
          vr_tab_craplrg(vr_index_craplrg):= rw_craplrg.qtlancmto;
        END LOOP;
                   
        -- Carregar tabela de memória com total resgatado por conta e aplicacao
        FOR rw_craplrg IN cr_craplrg (pr_cdcooper => pr_cdcooper
                                     ,pr_dtresgat => rw_crapdat.dtmvtopr
                                     ,pr_nrdconta => pr_nrdconta) LOOP
          -- Montar indice para selecionar total dos resgates na tabela auxiliar
          vr_index_resgate := LPad(rw_craplrg.nrdconta,10,'0') ||
                              LPad(rw_craplrg.tpaplica,05,'0') ||
                              LPad(rw_craplrg.nraplica,10,'0');
          -- Popular a tabela de memoria com a soma dos lancamentos de resgate
          vr_tab_resgate(vr_index_resgate).tpresgat := rw_craplrg.tpresgat;
          vr_tab_resgate(vr_index_resgate).vllanmto := rw_craplrg.vllanmto;
        END LOOP;          

      END IF;    
      
      pc_gera_impressao(pr_cdcooper => pr_cdcooper, 
                        pr_cdagenci => pr_cdagenci, 
                        pr_nrdcaixa => pr_nrdcaixa, 
                        pr_idorigem => pr_idorigem, 
                        pr_nmdatela => pr_nmdatela, 
                        pr_dtmvtolt => pr_dtmvtolt, 
                        pr_dtmvtopr => pr_dtmvtolt, 
                        pr_cdprogra => pr_cdprogra, 
                        pr_inproces => pr_inproces,
                        pr_cdoperad => pr_cdoperad, 
                        pr_dsiduser => pr_dsiduser, 
                        pr_flgrodar => vr_flgrodar, 
                        pr_nrdconta => pr_nrdconta, 
                        pr_idseqttl => pr_idseqttl, 
                        pr_tpextrat => pr_tpextrat, 
                        pr_dtrefere => pr_dtrefere, 
                        pr_dtreffim => pr_dtreffim, 
                        pr_flgtarif => vr_flgtarif, 
                        pr_inrelext => pr_inrelext, 
                        pr_inselext => pr_inselext, 
                        pr_nrctremp => pr_nrctremp, 
                        pr_nraplica => pr_nraplica, 
                        pr_nranoref => pr_nranoref, 
                        pr_flgerlog => vr_flgerlog,
                        pr_clobxml1 => vr_clobxml1,
                        pr_dstexto1 => vr_dstexto1,
                        pr_clobxml2 => vr_clobxml2,
                        pr_dstexto2 => vr_dstexto2,
                        pr_clobxml3 => vr_clobxml3,
                        pr_dstexto3 => vr_dstexto3,
                        pr_clobxml4 => vr_clobxml4,
                        pr_dstexto4 => vr_dstexto4,
                        pr_clobxml5 => vr_clobxml5,
                        pr_dstexto5 => vr_dstexto5,
                        pr_clobxml6 => vr_clobxml6,
                        pr_dstexto6 => vr_dstexto6,
                        pr_clobxml7 => vr_clobxml7,
                        pr_dstexto7 => vr_dstexto7,
                        pr_clobxml8 => vr_clobxml8,
                        pr_dstexto8 => vr_dstexto8,
                        pr_clobxml9 => vr_clobxml9,
                        pr_dstexto9 => vr_dstexto9,
                        pr_tab_craptab => vr_tab_craptab,
                        pr_tab_craplpp => vr_tab_craplpp,
                        pr_tab_craplrg => vr_tab_craplrg,
                        pr_tab_resgate => vr_tab_resgate,
                        pr_intpextr => pr_intpextr,
                        pr_tpinform => pr_tpinform,
                        pr_nrperiod => pr_nrperiod,
                        pr_nmarqimp => pr_nmarqimp, 
                        pr_nmarqpdf => pr_nmarqpdf, 
                        pr_tab_erro => vr_tab_erro, 
                        pr_des_reto => pr_des_reto);
                            
      IF pr_des_reto <> 'OK' THEN
        
         FOR vr_contador IN vr_tab_erro.FIRST..vr_tab_erro.LAST LOOP
          pr_des_reto := vr_tab_erro(vr_contador).dscritic;  
         END LOOP;
        
      END IF;
      
      -- trata caminho do arquivo para acessos do tipo 5(WEB)
      IF pr_idorigem <> 5 THEN
        -- Busca do diretório base da cooperativa para a geração de relatórios
        vr_nmdireto:= gene0001.fn_diretorio(pr_tpdireto => 'C'         --> /usr/coop
                                           ,pr_cdcooper => pr_cdcooper --> Cooperativa
                                           ,pr_nmsubdir => 'rl');      --> Utilizaremos o rl                  
        vr_nmdireto := vr_nmdireto||'/';                                           
      END IF;
      
      pr_nmarqpdf := REPLACE(pr_nmarqimp,'.ex','.pdf');
      
      -- valida o retorno OK e a existencia de 1 dos 2 tipos de arquivos gerados
      IF pr_des_reto = 'OK' THEN        
        -- monta as variaveis de nome com o caminho correto
        pr_nmarqimp := vr_nmdireto||pr_nmarqimp;
        pr_nmarqpdf := vr_nmdireto||pr_nmarqpdf;

      END IF;

      GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);

      EXCEPTION
        WHEN vr_exc_saida THEN
          GENE0004.pc_log(pr_cdcritic => 9999, 
                          pr_dscritic => gene0001.fn_busca_critica(pr_cdcritic => 9999) ||
                                         vr_nmrotpro ||
                                         '. ' || vr_dsparame, 
                          pr_nmrotina => 'EXTR0002',
                          pr_cdcooper => pr_cdcooper);
          pr_des_reto := 'NOK';
        WHEN OTHERS THEN
          cecred.pc_internal_exception;
          GENE0004.pc_log(pr_cdcritic => 9999, 
                          pr_dscritic => gene0001.fn_busca_critica(pr_cdcritic => 9999) ||
                                         vr_nmrotpro ||
                                         '. ' || SQLERRM ||
                                         '. ' || vr_dsparame, 
                          pr_nmrotina => 'EXTR0002',
                          pr_cdcooper => pr_cdcooper);

          pr_des_reto := 'NOK';
      END;    
    END pc_gera_impressao_car;  

    PROCEDURE pc_gera_impressao_portab(pr_nrdconta IN crapass.nrdconta%TYPE --Numero da Conta do Associado
                                      ,pr_nrctremp IN crapepr.nrctremp%TYPE --Numero Contrato Emprestimo
                                      ,pr_xmllog   IN VARCHAR2              --XML com informações de LOG
                                      ,pr_cdcritic OUT PLS_INTEGER          --Código da crítica
                                      ,pr_dscritic OUT VARCHAR2             --Descrição da crítica
                                      ,pr_retxml   IN OUT NOCOPY XMLType    --Arquivo de retorno do XML
                                      ,pr_nmdcampo OUT VARCHAR2             --Nome do campo com erro
                                      ,pr_des_erro OUT VARCHAR2) IS         --Erros do processo

    ---------------------------------------------------------------------------------------------------------------
    --
    --  Programa : pc_gera_impressao_portab
    --  Sistema  : 
    --  Sigla    : CRED
    --  Autor    : Jaison - Cecred
    --  Data     : Junho/2015                           Ultima atualizacao: 
    --
    -- Dados referentes ao programa:
    --
    -- Frequencia: -----
    -- Objetivo   : Procedure para possibilitar a utilizacao da pc_gera_impressao atraves do Oracle
    --              e assim realizar a impressao do extrato da portabilidade
    --
    -- Alterações : 
    --              
	  ---------------------------------------------------------------------------------------------------------------
    
    -- Tratamento de erros
    vr_exc_saida EXCEPTION;
    vr_dscritic VARCHAR2(4000) := '';
    vr_cdcritic crapcri.cdcritic%TYPE := 0;
    
    -- Temp Table
    vr_tab_erro GENE0001.typ_tab_erro;    
    -- Campos CLOB
    vr_clobxml1 CLOB;
    vr_clobxml2 CLOB;    
    vr_clobxml3 CLOB;
    vr_clobxml4 CLOB;
    vr_clobxml5 CLOB;
    vr_clobxml6 CLOB;
    vr_clobxml7 CLOB;
    vr_clobxml8 CLOB;
    vr_clobxml9 CLOB;
    -- Campos VARCHAR2
    vr_dstexto1 VARCHAR2(1);
    vr_dstexto2 VARCHAR2(1);
    vr_dstexto3 VARCHAR2(1);    
    vr_dstexto4 VARCHAR2(1);
    vr_dstexto5 VARCHAR2(1);
    vr_dstexto6 VARCHAR2(1);
    vr_dstexto7 VARCHAR2(1);
    vr_dstexto8 VARCHAR2(1);
    vr_dstexto9 VARCHAR2(1);
    
    vr_nmdireto  VARCHAR2(100);
    vr_nmarqimp  VARCHAR2(100); 
    vr_nmarqpdf  VARCHAR2(100);
    
    -- Variaveis de log
    vr_cdcooper INTEGER;
    vr_cdoperad VARCHAR2(100);
    vr_nmdatela VARCHAR2(100);
    vr_nmeacao  VARCHAR2(100);
    vr_cdagenci VARCHAR2(100);
    vr_nrdcaixa VARCHAR2(100);
    vr_idorigem VARCHAR2(100);    
    vr_des_reto VARCHAR2(100);
    
    ---------------------------- ESTRUTURAS DE TABELA ---------------------        
    vr_tab_craptab  APLI0001.typ_tab_ctablq;   --> Armazenar tabela de Conta Bloqueada
    vr_tab_craplpp  APLI0001.typ_tab_craplpp;  --> Armazenar tabela com lancamento poupanca
    vr_tab_craplrg  APLI0001.typ_tab_craplpp;  --> Armazenar tabela com resgates
    vr_tab_resgate  APLI0001.typ_tab_resgate;  --> Armazenar resgates das contas por aplicacao                
        
    -- Cursor genérico de calendário
    rw_crapdat btch0001.cr_crapdat%ROWTYPE;    
    --------------------------FIM ESTRUTURAS DE TABELA----------------------------------------
    
    BEGIN
      -- Incluir nome do módulo logado
      GENE0001.pc_informa_acesso(pr_module => 'pc_gera_impressao_portab'
                                ,pr_action => NULL);
                                
      -- Extrair dados do XML de requisição
      gene0004.pc_extrai_dados(pr_xml      => pr_retxml
                              ,pr_cdcooper => vr_cdcooper
                              ,pr_nmdatela => vr_nmdatela
                              ,pr_nmeacao  => vr_nmeacao
                              ,pr_cdagenci => vr_cdagenci
                              ,pr_nrdcaixa => vr_nrdcaixa
                              ,pr_idorigem => vr_idorigem
                              ,pr_cdoperad => vr_cdoperad
                              ,pr_dscritic => vr_dscritic);

	    -- Leitura do calendário da cooperativa
      OPEN btch0001.cr_crapdat(pr_cdcooper => vr_cdcooper);
      FETCH btch0001.cr_crapdat INTO rw_crapdat;
      CLOSE BTCH0001.cr_crapdat;

      -- Faz a chamada da impressao
      pc_gera_impressao(pr_cdcooper => vr_cdcooper, 
                        pr_cdagenci => vr_cdagenci, 
                        pr_nrdcaixa => vr_nrdcaixa, 
                        pr_idorigem => vr_idorigem, 
                        pr_nmdatela => 'IMPRES', 
                        pr_dtmvtolt => rw_crapdat.dtmvtolt, 
                        pr_dtmvtopr => rw_crapdat.dtmvtopr, 
                        pr_cdprogra => 'IMPRES',
                        pr_inproces => rw_crapdat.inproces,
                        pr_cdoperad => vr_cdoperad, 
                        pr_dsiduser => dbms_random.string('X',20), -- Caracteres alfa-numericos
                        pr_flgrodar => TRUE,
                        pr_nrdconta => pr_nrdconta, 
                        pr_idseqttl => 1,
                        pr_tpextrat => 11, -- Portabilidade
                        pr_dtrefere => NULL,
                        pr_dtreffim => NULL,
                        pr_flgtarif => FALSE,
                        pr_inrelext => 0,
                        pr_inselext => 0,
                        pr_nrctremp => pr_nrctremp, 
                        pr_nraplica => 0, 
                        pr_nranoref => 0, 
                        pr_flgerlog => TRUE,
                        pr_clobxml1 => vr_clobxml1,
                        pr_dstexto1 => vr_dstexto1,
                        pr_clobxml2 => vr_clobxml2,
                        pr_dstexto2 => vr_dstexto2,
                        pr_clobxml3 => vr_clobxml3,
                        pr_dstexto3 => vr_dstexto3,
                        pr_clobxml4 => vr_clobxml4,
                        pr_dstexto4 => vr_dstexto4,
                        pr_clobxml5 => vr_clobxml5,
                        pr_dstexto5 => vr_dstexto5,
                        pr_clobxml6 => vr_clobxml6,
                        pr_dstexto6 => vr_dstexto6,
                        pr_clobxml7 => vr_clobxml7,
                        pr_dstexto7 => vr_dstexto7,
                        pr_clobxml8 => vr_clobxml8,
                        pr_dstexto8 => vr_dstexto8,
                        pr_clobxml9 => vr_clobxml9,
                        pr_dstexto9 => vr_dstexto9,
                        pr_tab_craptab => vr_tab_craptab,
                        pr_tab_craplpp => vr_tab_craplpp,
                        pr_tab_craplrg => vr_tab_craplrg,
                        pr_tab_resgate => vr_tab_resgate,
                        pr_intpextr => 2, -- Detalhado
                        pr_tpinform => 0,
                        pr_nrperiod => 1,
                        pr_nmarqimp => vr_nmarqimp, 
                        pr_nmarqpdf => vr_nmarqpdf, 
                        pr_tab_erro => vr_tab_erro, 
                        pr_des_reto => vr_des_reto);

      -- Criar cabeçalho do XML
       pr_retxml := XMLType.createXML('<?xml version="1.0" encoding="ISO-8859-1" ?><Dados/>');
       gene0007.pc_insere_tag(pr_xml => pr_retxml, pr_tag_pai => 'Dados', pr_posicao => 0, pr_tag_nova => 'nmarqpdf', pr_tag_cont => vr_nmarqpdf, pr_des_erro => vr_dscritic);

      EXCEPTION

      WHEN vr_exc_saida THEN

        IF vr_cdcritic <> 0 THEN
          pr_cdcritic := vr_cdcritic;
          pr_dscritic := GENE0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        ELSE
          pr_cdcritic := vr_cdcritic;
          pr_dscritic := vr_dscritic;
        END IF;

        -- Carregar XML padrão para variável de retorno não utilizada.
        -- Existe para satisfazer exigência da interface.
        pr_retxml := XMLType.createXML('<?xml version="1.0" encoding="ISO-8859-1" ?> ' ||
                                       '<Root><Erro>' || pr_dscritic || '</Erro></Root>');
        ROLLBACK;
      WHEN OTHERS THEN

        pr_cdcritic := vr_cdcritic;
        pr_dscritic := 'Erro geral na rotina da tela INDICE: ' || SQLERRM;

        -- Carregar XML padrão para variável de retorno não utilizada.
        -- Existe para satisfazer exigência da interface.
        pr_retxml := XMLType.createXML('<?xml version="1.0" encoding="ISO-8859-1" ?> ' ||
                                       '<Root><Erro>' || pr_dscritic || '</Erro></Root>');
        ROLLBACK;

          
    END pc_gera_impressao_portab;
    
  --Subrotina para consultar lancamentos futuros 
  PROCEDURE pc_verifica_hist_lan_del(pr_cdcooper IN crapcop.cdcooper%TYPE              --Codigo Cooperativa                                      
                                    ,pr_cdhistor IN craphis.cdhistor%TYPE              --Historico
                                    ,pr_des_reto OUT VARCHAR2                          --Retorno OK ou NOK
                                    ,pr_tab_erro OUT GENE0001.typ_tab_erro) IS         --Tabela Retorno Erro 
  BEGIN
  ---------------------------------------------------------------------------------------------------------------
  --
  --  Programa : pc_verifica_hist_lan_del
  --  Sistema  : 
  --  Sigla    : CRED  
  --  Autor    : Tiago - CECRED
  --  Data     : Julho/2015                           Ultima atualizacao: 11/12/2015
  --
  -- Dados referentes ao programa:
  --
  -- Frequencia: -----
  -- Objetivo   : Procedure para consultar lancamentos futuros do associado
  --
  -- Alterações : 11/12/2015 - Correção na lógica de exclusão quando existe mais de um histórico (Marcos-Supero)
  --              
  ---------------------------------------------------------------------------------------------------------------
  DECLARE
      --Variaveis Locais
      vr_dsconteu VARCHAR(4000);
      
      --Variaveis Erro
      vr_cdcritic  INTEGER;
      vr_dscritic  VARCHAR2(4000);  
      vr_des_erro  VARCHAR2(4000);
      
    BEGIN
      --Inicializar tabelas memoria
      pr_tab_erro.DELETE;

      --Inicializar Variaveis
      vr_cdcritic:= 0;
      vr_dscritic:= NULL;

      
      /*pega lista de historicos separados por virgula passiveis de exclusao
        na lautom (ex: 1545,4662)*/
      tari0001.pc_carrega_par_tarifa_vigente(pr_cdcooper => pr_cdcooper
                                            ,pr_cdbattar => 'CDHISTEXCL'
                                            ,pr_dsconteu => vr_dsconteu
                                            ,pr_cdcritic => vr_cdcritic
                                            ,pr_dscritic => vr_dscritic
                                            ,pr_des_erro => vr_des_erro
                                            ,pr_tab_erro => pr_tab_erro);
                                            
      -- Verifica se Houve Erro no Retorno
      IF vr_des_erro = 'NOK' THEN
        -- Retornamos NOK
      pr_des_reto:= 'NOK';
      ELSE
        -- Verifica se o histórico existe na listagem
        IF gene0002.fn_existe_valor(pr_base => vr_dsconteu
                                   ,pr_busca => pr_cdhistor
                                   ,pr_delimite => ',') = 'S' THEN
           pr_des_reto := 'OK';
      ELSE
          pr_des_reto:= 'NOK';
      END IF;  
      END IF;
      
    EXCEPTION
      WHEN OTHERS THEN
        -- Retorno não OK
        pr_des_reto:= 'NOK';
      END; 
    END pc_verifica_hist_lan_del;   

    PROCEDURE pc_exclui_lautom_gen(pr_cdcooper IN crapcop.cdcooper%TYPE
                                  ,pr_cdoperad IN crapope.cdoperad%TYPE
                                  ,pr_nmdatela IN craptel.nmdatela%TYPE
                                  ,pr_cdagenci IN crapage.cdagenci%TYPE
                                  ,pr_nrdcaixa IN craplot.nrdcaixa%TYPE
                                  ,pr_idorigem IN INTEGER
                                  ,pr_dstabela IN VARCHAR2
                                  ,pr_genrecid IN craplau.progress_recid%TYPE
                                  ,pr_cdhistor IN craphis.cdhistor%TYPE
                                  ,pr_cdcritic OUT crapcri.cdcritic%TYPE
                                  ,pr_dscritic OUT crapcri.dscritic%TYPE) IS
    BEGIN
     /* .............................................................................
       Programa: pc_excluir_lautom_gen
       Sistema : 
       Sigla   : EXTR
       Autor   : Tiago 
       Data    : Julho/15.                    Ultima atualizacao: 23/11/2015

       Dados referentes ao programa:

       Frequencia: Sempre que for chamado

       Objetivo  : Rotina referente a exclusao de lancamento automaticos.

       Observacao: -----

       Alteracoes: 23/11/2015 - Ajustado para excluir os lanctos futuros referente
                                a Folha de Pagamento. (Andre Santos - SUPERO)
      ..............................................................................*/												      
      DECLARE
        
        CURSOR cr_craphis(pr_cdcooper IN craphis.cdcooper%TYPE
                         ,pr_cdhistor IN craphis.cdhistor%TYPE) IS
          SELECT craphis.dshistor
            FROM craphis
           WHERE craphis.cdcooper = pr_cdcooper
             AND craphis.cdhistor = pr_cdhistor;
        rw_craphis cr_craphis%ROWTYPE;
      
        CURSOR cr_crappfp (p_genrecid craplau.progress_recid%TYPE) IS
           SELECT pfp.flsitdeb
                 ,pfp.flsittar
                 ,pfp.vllctpag
                 ,pfp.qtlctpag * pfp.vltarapr vltarapr
                 ,emp.nrdconta
                 ,pfp.nrseqpag
                 ,pfp.dtdebito
                 ,pfp.dtcredit
                 ,emp.cdcontar
                 ,pfp.idopdebi
                 ,emp.cdempres
             FROM crappfp pfp
                 ,crapemp emp
            WHERE pfp.progress_recid = p_genrecid
              AND pfp.cdcooper = emp.cdcooper
              AND pfp.cdempres = emp.cdempres;
        rw_crappfp cr_crappfp%ROWTYPE;
        
        CURSOR cr_craplfp (p_genrecid craplau.progress_recid%TYPE) IS
           SELECT lfp.idsitlct
                 ,pfp.cdempres
                 ,lfp.nrdconta
                 ,lfp.vllancto
                 ,pfp.nrseqpag||lpad(lfp.nrseqlfp,6,'0') nrdocmto
                 ,pfp.dtcredit   
                 ,DECODE(emp.idtpempr,'C',ofp.cdhscrcp,ofp.cdhiscre) cdhistor              
             FROM craplfp lfp
                 ,crappfp pfp
                 ,crapemp emp
                 ,crapofp ofp
            WHERE lfp.progress_recid = p_genrecid
              AND lfp.cdcooper = pfp.cdcooper
              AND lfp.cdempres = pfp.cdempres
              AND lfp.nrseqpag = pfp.nrseqpag
              AND pfp.cdcooper = emp.cdcooper
              AND pfp.cdempres = emp.cdempres
              AND lfp.cdcooper = ofp.cdcooper
              AND lfp.cdorigem = ofp.cdorigem;
        rw_craplfp cr_craplfp%ROWTYPE;
              

        --Variaveis Locais
        vr_dsconteu VARCHAR(1000);
        vr_dsorigem VARCHAR2(100);
        vr_dstransa VARCHAR2(100);
        vr_nrdrowid ROWID;
        vr_idfatura tbcrd_fatura.idfatura%TYPE;
        vr_nrdconta tbcrd_fatura.nrdconta%TYPE;
        vr_cdhistor craplau.cdhistor%TYPE;
        vr_vldocmto tbcrd_fatura.vlfatura%TYPE;
        vr_dtvencto tbcrd_fatura.dtvencimento%TYPE;
        vr_dsdocmto tbcrd_fatura.dsdocumento%TYPE;
        vr_dshistor craphis.dshistor%TYPE;
        
        --Variaveis Erro
        vr_cdcritic  INTEGER;
        vr_dscritic  VARCHAR2(4000);  
        vr_des_reto  VARCHAR2(3);      
        vr_des_erro   VARCHAR2(4000);
        vr_tab_erro   GENE0001.typ_tab_erro; 
        
        --Variaveis de Excecoes
        vr_exc_erro EXCEPTION;
        vr_exc_sucesso EXCEPTION;          
      BEGIN
        
        IF pr_dstabela IS NULL OR
           pr_dstabela = ''    OR
           pr_cdhistor = 0     THEN
           vr_cdcritic := 0;
           vr_dscritic := 'Exclusao de lancamento nao permitida.';
           RAISE vr_exc_erro;
        END IF;
        
        --Verifica na tabela de parametro se o historico
        --pode ser excluido(mudar situacao do registro)        
        pc_verifica_hist_lan_del(pr_cdcooper => pr_cdcooper
                                ,pr_cdhistor => pr_cdhistor
                                ,pr_des_reto => vr_des_erro
                                ,pr_tab_erro => vr_tab_erro);
                                
        IF vr_des_erro <> 'OK' THEN
           vr_cdcritic := 0;
           vr_dscritic := 'Exclusao de lancamento nao permitida. (Historico nao permitido)';
           RAISE vr_exc_erro;           
        END IF;
          
        --Verificar qual tabela passada para exclusao
        IF UPPER(pr_dstabela) = 'TBCRD_FATURA' THEN
           BEGIN
             UPDATE tbcrd_fatura
                SET tbcrd_fatura.insituacao = 3
              WHERE tbcrd_fatura.progress_recid = pr_genrecid
              RETURN tbcrd_fatura.idfatura, tbcrd_fatura.nrdconta,
                     tbcrd_fatura.vlpendente, tbcrd_fatura.dtvencimento,
                     tbcrd_fatura.dsdocumento
                INTO vr_idfatura, vr_nrdconta, 
                     vr_vldocmto, vr_dtvencto, 
                     vr_dsdocmto;
                     
             vr_cdhistor := 1545;
              
             INSERT INTO tbcrd_cancela_fatura(idcancela_fatura
                                             ,idfatura
                                             ,dtcancelamento
                                             ,cdoperador_cancel) 
                     VALUES(seq_crd_idcancela_fatura.nextval
                           ,vr_idfatura
                           ,SYSDATE
                           ,pr_cdoperad);
           EXCEPTION
             WHEN OTHERS THEN
               vr_cdcritic := 0;
               vr_dscritic := 'Exclusao de lancamento nao permitida. (Fatura CC)';
               RAISE vr_exc_erro;
           END;
        END IF;

        IF UPPER(pr_dstabela) = 'CRAPLAU' THEN
           BEGIN           
             UPDATE craplau
                SET craplau.insitlau = 4
                   ,craplau.dtdebito = SYSDATE 
              WHERE craplau.progress_recid = pr_genrecid
              RETURN craplau.nrdconta, craplau.vllanaut,
                     craplau.dtmvtolt, craplau.nrdocmto,
                     craplau.cdhistor
              INTO vr_nrdconta, vr_vldocmto, 
                   vr_dtvencto, vr_dsdocmto,
                   vr_cdhistor;
           EXCEPTION
             WHEN OTHERS THEN
               vr_cdcritic := 0;
               vr_dscritic := 'Exclusao de lancamento nao permitida. (Lautom)';
               RAISE vr_exc_erro;
           END;
        END IF;

        IF UPPER(pr_dstabela) = 'CRAPAVS' THEN
           BEGIN
             UPDATE crapavs
                SET crapavs.insitavs = 4
                   ,crapavs.dtdebito = SYSDATE 
              WHERE crapavs.progress_recid = pr_genrecid
              RETURN crapavs.nrdconta, crapavs.vllanmto,
                     crapavs.dtmvtolt, crapavs.nrdocmto,
                     crapavs.cdhistor
              INTO vr_nrdconta, vr_vldocmto, 
                   vr_dtvencto, vr_dsdocmto,
                   vr_cdhistor;              
           EXCEPTION
             WHEN OTHERS THEN
               vr_cdcritic := 0;
               vr_dscritic := 'Exclusao de lancamento nao permitida. (Aviso debito)';
               RAISE vr_exc_erro;
           END;
        END IF;
        
        /********************************************************************************/
        
        IF UPPER(pr_dstabela) = 'CRAPPFP-DEBITO' THEN -- Debito de Pagamento
           
           -- Somente poderemos cancelar o pagamento se ele ainda nao foi debitado
           -- Portando devemos buscar o indicador de debito ou nao na tabela e tambem
           -- outras informacoes para complementacao do LOG se ocorrer a exclusao

           OPEN cr_crappfp(pr_genrecid);
           FETCH cr_crappfp INTO rw_crappfp;
           CLOSE cr_crappfp;
           
           vr_nrdconta := rw_crappfp.nrdconta;
           vr_vldocmto := rw_crappfp.vllctpag;
           vr_dtvencto := rw_crappfp.dtdebito;
           vr_dsdocmto := rw_crappfp.nrseqpag;
           vr_cdhistor := 0;
           
           -- Se o mesmo ja foi debitado
           IF rw_crappfp.flsitdeb = 1 THEN
              -- Gerar Excecao
              vr_cdcritic := 0;
              vr_dscritic := 'Exclusao de lancamento nao permitida. (Pagamento ja debitado)';
              RAISE vr_exc_erro;
           END IF;
           
           -- Efetuaremos a reprovacao do pagamento
           BEGIN
             UPDATE crappfp pfp
                SET pfp.idsitapr = 3           --> (Reprovada)
                   ,pfp.cdopeest = pr_cdoperad --> (Operador conectado)
                   ,pfp.dsjusest = 'Debito cancelado atraves da Exclusao de Lcto Futuro (Operador: '||pr_cdoperad||')'
              WHERE pfp.progress_recid = pr_genrecid;     
           EXCEPTION
             WHEN OTHERS THEN
               vr_cdcritic := 0;
               vr_dscritic := 'Exclusao de lancamento com erro. (Pagamento) :'||SQLERRM;
               RAISE vr_exc_erro;
           END;

           -- Envio centralizado de log de erro
           btch0001.pc_gera_log_batch(pr_cdcooper     => pr_cdcooper
                                     ,pr_nmarqlog     => 'FOLHIB'
                                     ,pr_ind_tipo_log => 2  -- Erro tratato
                                     ,pr_des_log      => TO_CHAR(SYSDATE,'DD/MM/RRRR HH24:MI:SS')||':'
                                                      || ' DEBITO DE FOLHA  EMP '||rw_crappfp.cdempres||'  CONTA '
                                                      || TO_CHAR(gene0002.fn_mask_conta(vr_nrdconta)) 
                                                      || ' NO VALOR DE R$ ' 
                                                      ||  TO_CHAR(vr_vldocmto,'fm9g999g999g999g999g990d00','NLS_NUMERIC_CHARACTERS=,.') 
                                                      ||' CANCELADO ATRAVES DA EXCLUSAO DE LCTO FUTURO PELO OPERADOR  '
                                                      || pr_cdoperad);

        END IF;
        
        IF UPPER(pr_dstabela) = 'CRAPPFP-TARIFA' THEN -- Tarifacao do Pagamento
           
           -- Somente poderemos zerar a tarifa se ela ainda nao foi debitada
           -- Portando devemos buscar o indicador de debito ou nao na tabela e tambem
           -- outras informacoes para complementacao do LOG se ocorrer a exclusao
           
           OPEN cr_crappfp(pr_genrecid);
           FETCH cr_crappfp INTO rw_crappfp;
           CLOSE cr_crappfp;
           
           vr_nrdconta := rw_crappfp.nrdconta;
           vr_vldocmto := rw_crappfp.vltarapr;
           vr_dtvencto := rw_crappfp.dtcredit;
           vr_dsdocmto := rw_crappfp.nrseqpag;
           vr_cdhistor := folh0001.fn_histor_tarifa_folha(pr_cdcooper,rw_crappfp.cdcontar,rw_crappfp.idopdebi,rw_crappfp.vllctpag);

           -- Se o mesmo já foi debitado
           IF rw_crappfp.flsittar = 1 THEN
             -- Gerar Exceção
             vr_cdcritic := 0;
             vr_dscritic := 'Exclusao de lancamento nao permitida. (Tarifa ja debitada)';
             RAISE vr_exc_erro;
           END IF;
           
           -- Efetuaremos o desconto da tarifa
           BEGIN
             UPDATE crappfp pfp
                SET pfp.vltarapr = 0 --> (Desconto)
                   ,pfp.flsittar = 1 --> (Debitada)
                   ,pfp.dsobstar = 'Tarifa eliminada atraves da Exclusao de Lcto Futuro (Operador: '||pr_cdoperad||')'
                   ,pfp.dthortar = SYSDATE
              WHERE pfp.progress_recid = pr_genrecid;            
           EXCEPTION
             WHEN OTHERS THEN
               vr_cdcritic := 0;
               vr_dscritic := 'Exclusao de tarifa com erro. (Pagamento) :'||SQLERRM;
               RAISE vr_exc_erro;
           END;

           -- Envio centralizado de log de erro
           btch0001.pc_gera_log_batch(pr_cdcooper     => pr_cdcooper
                                     ,pr_nmarqlog     => 'FOLHIB'
                                     ,pr_ind_tipo_log => 2 -- Erro tratato
                                     ,pr_des_log      => TO_CHAR(SYSDATE,'DD/MM/RRRR HH24:MI:SS')||':' 
                                                      || ' DEBITO DE TARIFA  EMP '||rw_crappfp.cdempres ||'  CONTA '
                                                      || TO_CHAR(gene0002.fn_mask_conta(vr_nrdconta)) 
                                                      || ' NO VALOR DE R$ ' 
                                                      ||  TO_CHAR(vr_vldocmto,'fm9g999g999g999g999g990d00','NLS_NUMERIC_CHARACTERS=,.') 
                                                      ||' ELIMINADA ATRAVES DA EXCLUSAO DE LCTO FUTURO PELO OPERADOR  '
                                                      || pr_cdoperad);
        END IF;
        
        IF UPPER(pr_dstabela) = 'CRAPLFP' THEN -- Lancamento do Pagamento

           -- Somente poderemos cancelar o credito se ele ainda nao foi creditado ao empregado,
           -- Portando devemos buscar a situacao do lancamento ou nao na tabela e tambem
           -- outras informacoes para complementacao do LOG se ocorrer a exclusao

           OPEN cr_craplfp(pr_genrecid);
           FETCH cr_craplfp INTO rw_craplfp;
           CLOSE cr_craplfp;
           
           vr_nrdconta := rw_craplfp.nrdconta;
           vr_vldocmto := rw_craplfp.vllancto;
           vr_dtvencto := rw_craplfp.dtcredit;
           vr_dsdocmto := rw_craplfp.nrdocmto;
           vr_cdhistor := rw_craplfp.cdhistor;

           -- Se o mesmo ja foi creditado
           IF rw_craplfp.idsitlct != 'L' THEN
              -- Gerar Excecao
              vr_cdcritic := 0;
              vr_dscritic := 'Exclusao de lancamento nao permitida. (Credito ja efetuado)';
              RAISE vr_exc_erro;
           END IF;

           -- Efetuaremos o cancelamento do credito
           BEGIN
              UPDATE craplfp lfp
                 SET lfp.idsitlct = 'E' --> (Erro)
                    ,lfp.dsobslct = 'Credito ao empregado cancelado atraves da Exclusao de Lcto Futuro (Operador: '||pr_cdoperad||')'
               WHERE lfp.progress_recid = pr_genrecid;            
           EXCEPTION
              WHEN OTHERS THEN
                 vr_cdcritic := 0;
                 vr_dscritic := 'Exclusao de credito empregado com erro. (Pagamento) :'||sqlerrm;
                 RAISE vr_exc_erro;
           END;

           -- Envio centralizado de log de erro
           btch0001.pc_gera_log_batch(pr_cdcooper     => pr_cdcooper
                                     ,pr_nmarqlog     => 'FOLHIB'
                                     ,pr_ind_tipo_log => 2 -- Erro tratato
                                     ,pr_des_log      => TO_CHAR(SYSDATE,'DD/MM/RRRR HH24:MI:SS')||':' 
                                                      || ' CREDITO DE FOLHA  EMP '||rw_craplfp.cdempres ||'  PARA A CONTA '
                                                      || TO_CHAR(gene0002.fn_mask_conta(vr_nrdconta)) 
                                                      || ' NO VALOR DE R$ ' 
                                                      ||  TO_CHAR(vr_vldocmto,'fm9g999g999g999g999g990d00','NLS_NUMERIC_CHARACTERS=,.') 
                                                      ||' ELIMINADA ATRAVES DA EXCLUSAO DE LCTO FUTURO PELO OPERADOR  '
                                                      || pr_cdoperad);
        END IF;
        
        /********************************************************************************/        
        
        OPEN cr_craphis(pr_cdcooper => pr_cdcooper
                       ,pr_cdhistor => vr_cdhistor);                       
        FETCH cr_craphis INTO rw_craphis;
        
        IF cr_craphis%NOTFOUND THEN
           vr_dshistor := vr_cdhistor;
        ELSE
           vr_dshistor := rw_craphis.dshistor;
        END IF;   
        CLOSE cr_craphis;
        
        vr_dstransa := 'Exclusao lancamento futuro';
        
        -- Chamar geração de LOG
        gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                            ,pr_cdoperad => pr_cdoperad
                            ,pr_dscritic => ' '
                            ,pr_dsorigem => GENE0001.vr_vet_des_origens(pr_idorigem)
                            ,pr_dstransa => vr_dstransa
                            ,pr_dttransa => TRUNC(SYSDATE)
                            ,pr_flgtrans => 1 --> FALSE
                            ,pr_hrtransa => gene0002.fn_busca_time
                            ,pr_idseqttl => 1
                            ,pr_nmdatela => pr_nmdatela
                            ,pr_nrdconta => vr_nrdconta
                            ,pr_nrdrowid => vr_nrdrowid);
                            
                            
        gene0001.pc_gera_log_item(pr_nrdrowid => vr_nrdrowid 
                                 ,pr_nmdcampo => 'Historico'
                                 ,pr_dsdadant => ' '
                                 ,pr_dsdadatu => rw_craphis.dshistor);
                                 
        gene0001.pc_gera_log_item(pr_nrdrowid => vr_nrdrowid 
                                 ,pr_nmdcampo => 'Conta/dv Destino'
                                 ,pr_dsdadant => ' ' 
                                 ,pr_dsdadatu => GENE0002.fn_mask_conta(vr_nrdconta));
                                 
        gene0001.pc_gera_log_item(pr_nrdrowid => vr_nrdrowid 
                                 ,pr_nmdcampo => 'Data Vencto'
                                 ,pr_dsdadant => ' ' 
                                 ,pr_dsdadatu => TO_CHAR(vr_dtvencto,'DD/MM/RRRR'));
                                 
        gene0001.pc_gera_log_item(pr_nrdrowid => vr_nrdrowid 
                                 ,pr_nmdcampo => 'Data Lautom'
                                 ,pr_dsdadant => ' ' 
                                 ,pr_dsdadatu => TO_CHAR(SYSDATE,'DD/MM/RRRR'));                                 
                                 
        gene0001.pc_gera_log_item(pr_nrdrowid => vr_nrdrowid 
                                 ,pr_nmdcampo => 'Valor'
                                 ,pr_dsdadant => ' ' 
                                 ,pr_dsdadatu => TO_CHAR(vr_vldocmto,'fm999g999g990d00'));
                                 
        gene0001.pc_gera_log_item(pr_nrdrowid => vr_nrdrowid 
                                 ,pr_nmdcampo => 'Numero Documento'
                                 ,pr_dsdadant => ' ' 
                                 ,pr_dsdadatu => vr_dsdocmto);
                                 
                                 
                                 
        
        COMMIT;
      EXCEPTION
        WHEN vr_exc_sucesso THEN
          pr_cdcritic := 0;
          pr_dscritic := '';
        WHEN vr_exc_erro THEN
          pr_cdcritic:= vr_cdcritic;
          pr_dscritic:= vr_dscritic;

          -- Chamar rotina de gravação de erro
          gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                               ,pr_cdagenci => pr_cdagenci
                               ,pr_nrdcaixa => pr_nrdcaixa
                               ,pr_nrsequen => 1 --> Fixo
                               ,pr_cdcritic => 0 --> Critica 0
                               ,pr_dscritic => vr_dscritic
                               ,pr_tab_erro => vr_tab_erro);
                               
          ROLLBACK;                                              

        WHEN OTHERS THEN

          -- Chamar rotina de gravação de erro
          vr_dscritic := 'Erro na pc_exclui_lautom --> '|| sqlerrm;
          gene0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                               ,pr_cdagenci => pr_cdagenci
                               ,pr_nrdcaixa => pr_nrdcaixa
                               ,pr_nrsequen => 1 --> Fixo
                               ,pr_cdcritic => 0 --> Critica 0
                               ,pr_dscritic => vr_dscritic
                               ,pr_tab_erro => vr_tab_erro);
                               
          ROLLBACK;                               
        
      END;
    END pc_exclui_lautom_gen;
      
    PROCEDURE pc_exclui_lautom_web(pr_dstabela IN  VARCHAR2                    --Tabela
                                  ,pr_cdhistor IN  craphis.cdhistor%TYPE       --Historico
                                  ,pr_genrecid IN  craplau.progress_recid%TYPE -- RECID
                                  ,pr_xmllog   IN  VARCHAR2                    -- XML com informações de LOG
                                  ,pr_cdcritic OUT PLS_INTEGER                 -- Código da crítica
                                  ,pr_dscritic OUT VARCHAR2                    -- Descrição da crítica
                                  ,pr_retxml   IN  OUT NOCOPY XMLType          -- Arquivo de retorno do XML
                                  ,pr_nmdcampo OUT VARCHAR2                    -- Nome do campo com erro
                                  ,pr_des_erro OUT VARCHAR2) IS                -- Erros do processo
                                  
		BEGIN
     /* .............................................................................
       Programa: pc_exclui_lautom_web
       Sistema : Novos Produtos de Captação
       Sigla   : APLI
       Autor   : Tiago 
       Data    : Julho/15.                    Ultima atualizacao: --/--/----

       Dados referentes ao programa:

       Frequencia: Sempre que for chamado

       Objetivo  : Rotina referente a exclusao de lancamento automaticos.

       Observacao: -----

       Alteracoes: 
      ..............................................................................*/												
      DECLARE
  		
        -- Variável de críticas
        vr_cdcritic crapcri.cdcritic%TYPE;
        vr_dscritic VARCHAR2(10000);

        -- Tratamento de erros
        vr_exc_saida EXCEPTION;

        -- Variaveis de log
        vr_cdcooper crapcop.cdcooper%TYPE;
        vr_cdoperad VARCHAR2(100);
        vr_nmdatela VARCHAR2(100);
        vr_nmeacao  VARCHAR2(100);
        vr_cdagenci VARCHAR2(100);
        vr_nrdcaixa VARCHAR2(100);
        vr_idorigem VARCHAR2(100);
  			
        -- Variaveis locais
        vr_cdprodut crapcpc.cdprodut%TYPE := 0; -- Codigo do Produto da Aplicacao
        vr_dtresgat DATE;

      BEGIN
        
        -- Recupera dados de log para consulta posterior
        gene0004.pc_extrai_dados(pr_xml      => pr_retxml
                                ,pr_cdcooper => vr_cdcooper
                                ,pr_nmdatela => vr_nmdatela
                                ,pr_nmeacao  => vr_nmeacao
                                ,pr_cdagenci => vr_cdagenci
                                ,pr_nrdcaixa => vr_nrdcaixa
                                ,pr_idorigem => vr_idorigem
                                ,pr_cdoperad => vr_cdoperad
                                ,pr_dscritic => vr_dscritic);

        -- Verifica se houve erro recuperando informacoes de log                              
        IF vr_dscritic IS NOT NULL THEN
          RAISE vr_exc_saida;
        END IF;
        
        pc_exclui_lautom_gen(pr_cdcooper => vr_cdcooper
                            ,pr_cdoperad => vr_cdoperad
                            ,pr_nmdatela => vr_nmdatela
                            ,pr_cdagenci => vr_cdagenci
                            ,pr_nrdcaixa => vr_nrdcaixa
                            ,pr_idorigem => vr_idorigem
                            ,pr_dstabela => pr_dstabela 
                            ,pr_genrecid => pr_genrecid
                            ,pr_cdhistor => pr_cdhistor
                            ,pr_cdcritic => vr_cdcritic
                            ,pr_dscritic => vr_dscritic);
                            
        -- Verifica se houve erro recuperando informacoes de log                              
        IF vr_dscritic IS NOT NULL THEN
          RAISE vr_exc_saida;
        END IF;                            
      
      EXCEPTION
        WHEN vr_exc_saida THEN

          IF vr_cdcritic <> 0 AND TRIM(vr_dscritic) IS NULL THEN
            vr_dscritic := gene0001.fn_busca_critica(vr_cdcritic);
          END IF;

          pr_cdcritic := vr_cdcritic;
          pr_dscritic := vr_dscritic;

          -- Carregar XML padrão para variável de retorno não utilizada.
          -- Existe para satisfazer exigência da interface.
          pr_retxml := XMLType.createXML('<?xml version="1.0" encoding="ISO-8859-1" ?> ' ||
                                         '<Root><Erro>' || pr_dscritic || '</Erro></Root>');
          ROLLBACK;

        WHEN OTHERS THEN
          pr_cdcritic := vr_cdcritic;
          pr_dscritic := 'Erro nao tratado na APLI0005.pc_val_solicit_resgate_web: ' || SQLERRM;

          -- Carregar XML padrão para variável de retorno não utilizada.
          -- Existe para satisfazer exigência da interface.
          pr_retxml := XMLType.createXML('<?xml version="1.0" encoding="ISO-8859-1" ?> ' ||
                                         '<Root><Erro>' || pr_dscritic || '</Erro></Root>');

      END;
  		
    END pc_exclui_lautom_web;
                                      
    /* Rotina referente a consulta de lancamentos. */
    PROCEDURE pc_consulta_lancto_car (pr_cdcooper IN crapcop.cdcooper%TYPE              --Codigo Cooperativa
                                     ,pr_cdagenci IN crapass.cdagenci%TYPE              --Codigo Agencia
                                     ,pr_nrdcaixa IN INTEGER                            --Numero do Caixa
                                     ,pr_cdoperad IN VARCHAR2                           --Codigo Operador
                                     ,pr_nrdconta IN crapass.nrdconta%TYPE              --Numero da Conta do Associado
                                     ,pr_idorigem IN INTEGER                            --Origem dos Dados
                                     ,pr_idseqttl IN INTEGER                            --Sequencial do Titular
                                     ,pr_nmdatela IN VARCHAR2                           --Nome da Tela
                                     ,pr_flgerlog IN PLS_INTEGER                        --Imprimir log
                                     ,pr_dtiniper IN DATE                               -- Data inicio
                                     ,pr_dtfimper IN DATE                               -- Data final
                                     ,pr_indebcre IN craphis.indebcre%TYPE              -- Debito/Credito
                                     ,pr_dscritic OUT VARCHAR2                          --Retorno OK ou NOK
                                     ,pr_cdcritic OUT INTEGER                           --Retorno OK ou NOK
                                     ,pr_clobxmlc_totais OUT CLOB                       -- XML com informações de LOG
                                     ,pr_clobxmlc OUT CLOB) IS                          -- XML com informações de LOG
    BEGIN
     /* .............................................................................

     Programa: pc_consulta_lancto_car
     Sistema : Consultar lancamentos
     Sigla   : EXTR
     Autor   : Lucas Ranghetti
     Data    : Fevereiro/16.                  Ultima atualizacao: 27/05/2016

     Dados referentes ao programa:

     Frequencia: Sempre que for chamado

     Objetivo  : Rotina referente a consulta de lancamentos.

     Observacao: -----

     Alteracoes: 27/04/2016 - Incluir campo genrecid na consulta-lancto-car(Lucas Ranghetti/Fabricio)

                 27/05/2016 - Inclusao: fldebito, cdagenci, cdbccxlt, nrdolote, nrseqdig. 
                              (Jaison/James)

     ..............................................................................*/
      DECLARE
      
      -- Variável de críticas
      vr_cdcritic crapcri.cdcritic%TYPE;
      vr_dscritic VARCHAR2(10000);
      vr_des_erro VARCHAR2(10000);

      vr_flgerlog BOOLEAN;
      -- Tratamento de erros
      vr_exc_erro EXCEPTION;

      --Variáveis locais
      vr_contador PLS_INTEGER := 0;
      vr_contador_totais PLS_INTEGER := 0;
      vr_contador_erro PLS_INTEGER := 0;
      
      -- Temp Table
      vr_tab_totais_futuros typ_tab_totais_futuros;  
      vr_tab_lancamento_futuro typ_tab_lancamento_futuro;
      vr_tab_erro GENE0001.typ_tab_erro;

      -- Variaveis de XML 
      vr_xml_temp VARCHAR2(32767);      
      vr_xml_temp_totais VARCHAR2(32767);      
      vr_soma_deb number(15,2);
      vr_soma_cre number(15,2);
      vr_soma_tot number(15,2);
      vr_dtiniper DATE;
      vr_dtfimper date;
      BEGIN
        
        CASE pr_flgerlog 
          WHEN 1 THEN vr_flgerlog := TRUE;
          WHEN 0 THEN vr_flgerlog := FALSE; 
        END CASE;
        if (pr_nmdatela = 'TAL') AND
           (pr_dtiniper IS NULL) AND
           (pr_dtfimper IS NULL) THEN 
            begin
             select 
             last_day(add_months(crapdat.dtmvtolt,-1)) + 1,
             last_day(crapdat.dtmvtolt)
             into 
             vr_dtiniper,
             vr_dtfimper from crapdat
             where crapdat.cdcooper = pr_cdcooper;
            exception 
              when others then 
                vr_dtiniper := null;
                vr_dtfimper := null;
            end;   
         else
           vr_dtiniper := pr_dtiniper;
           vr_dtfimper := pr_dtfimper;   
         end if;  
        pc_consulta_lancamento(pr_cdcooper => pr_cdcooper
                              ,pr_cdagenci => pr_cdagenci
                              ,pr_nrdcaixa => pr_nrdcaixa
                              ,pr_cdoperad => pr_cdoperad
                              ,pr_nrdconta => pr_nrdconta
                              ,pr_idorigem => pr_idorigem
                              ,pr_idseqttl => pr_idseqttl
                              ,pr_nmdatela => pr_nmdatela
                              ,pr_flgerlog => vr_flgerlog
                              ,pr_dtiniper => vr_dtiniper
                              ,pr_dtfimper => vr_dtfimper
                              ,pr_indebcre => pr_indebcre
                              ,pr_des_reto => vr_des_erro
                              ,pr_tab_erro => vr_tab_erro
                              ,pr_tab_totais_futuros => vr_tab_totais_futuros
                              ,pr_tab_lancamento_futuro => vr_tab_lancamento_futuro);
                      
        IF vr_tab_erro.count() > 0 THEN
        /* Buscar erro da tabela temporaria */        
        FOR vr_contador_erro IN vr_tab_erro.FIRST..vr_tab_erro.LAST LOOP
            
          vr_cdcritic := vr_tab_erro(vr_contador_erro).cdcritic;
          vr_dscritic := vr_tab_erro(vr_contador_erro).dscritic;
        
        END LOOP;
                  
        -- verifica se tem erro            
        IF vr_des_erro IS NOT NULL OR 
           vr_cdcritic IS NOT NULL OR 
           vr_dscritic IS NOT NULL THEN
           RAISE vr_exc_erro;
        END IF;        
        END IF;
        
        IF vr_tab_lancamento_futuro.count() > 0 THEN
        /* Montar xml referente aos lancamentos futuros */
        -- Criar documento XML
        dbms_lob.createtemporary(pr_clobxmlc, TRUE); 
        dbms_lob.open(pr_clobxmlc, dbms_lob.lob_readwrite);       
        vr_soma_deb := 0;
        vr_soma_cre := 0;
        vr_soma_tot := 0;
        -- Insere o cabeçalho do XML 
        gene0002.pc_escreve_xml(pr_xml            => pr_clobxmlc 
                               ,pr_texto_completo => vr_xml_temp 
                                 ,pr_texto_novo     => '<?xml version="1.0" encoding="ISO-8859-1"?><root>');

        FOR vr_contador IN vr_tab_lancamento_futuro.FIRST..vr_tab_lancamento_futuro.LAST LOOP
           if nvl(to_char(vr_tab_lancamento_futuro(vr_contador).indebcre),' ') = 'D' then
             vr_soma_deb := vr_soma_deb + nvl(vr_tab_lancamento_futuro(vr_contador).vllanmto,0);
           else
             vr_soma_cre :=  vr_soma_cre + nvl(vr_tab_lancamento_futuro(vr_contador).vllanmto,0);
           end if;
          -- Montar XML com registros de carencia
          gene0002.pc_escreve_xml(pr_xml            => pr_clobxmlc 
                                 ,pr_texto_completo => vr_xml_temp 
                                 ,pr_texto_novo     => '<lancamento>' 
													                            ||   '<dsmvtolt>'||nvl(to_char(vr_tab_lancamento_futuro(vr_contador).dsmvtolt),' ') ||'</dsmvtolt>'
                                                      ||   '<dtmvtolt>'||nvl(TO_CHAR(vr_tab_lancamento_futuro(vr_contador).dtmvtolt, 'DD/MM/RRRR'),' ')||'</dtmvtolt>'
                                                      ||   '<dshistor>'||nvl(to_char(vr_tab_lancamento_futuro(vr_contador).dshistor),' ') ||'</dshistor>'
                                                      ||   '<nrdocmto>'||nvl(to_char(vr_tab_lancamento_futuro(vr_contador).nrdocmto),' ') ||'</nrdocmto>'
                                                      ||   '<indebcre>'||nvl(to_char(vr_tab_lancamento_futuro(vr_contador).indebcre),' ') ||'</indebcre>'
                                                      ||   '<vllanmto>'||nvl(trim(to_char(vr_tab_lancamento_futuro(vr_contador).vllanmto,'999g999g9990d00')),'0') ||'</vllanmto>'
                                                      ||   '<dstabela>'||nvl(to_char(vr_tab_lancamento_futuro(vr_contador).dstabela),' ') ||'</dstabela>'
                                                      ||   '<cdhistor>'||nvl(to_char(vr_tab_lancamento_futuro(vr_contador).cdhistor),'0') ||'</cdhistor>'
													                            ||   '<genrecid>'||nvl(to_char(vr_tab_lancamento_futuro(vr_contador).genrecid),'0') ||'</genrecid>'
                                                      ||   '<fldebito>'||nvl(to_char(vr_tab_lancamento_futuro(vr_contador).fldebito),'0') ||'</fldebito>'
                                                      ||   '<cdagenci>'||nvl(to_char(vr_tab_lancamento_futuro(vr_contador).cdagenci),'0') ||'</cdagenci>'
                                                      ||   '<cdbccxlt>'||nvl(to_char(vr_tab_lancamento_futuro(vr_contador).cdbccxlt),'0') ||'</cdbccxlt>'
                                                      ||   '<nrdolote>'||nvl(to_char(vr_tab_lancamento_futuro(vr_contador).nrdolote),'0') ||'</nrdolote>'
                                                      ||   '<nrseqdig>'||nvl(to_char(vr_tab_lancamento_futuro(vr_contador).nrseqdig),'0') ||'</nrseqdig>'
                                                      ||   '<dtrefere>'||nvl(TO_CHAR(vr_tab_lancamento_futuro(vr_contador).dtrefere, 'DD/MM/RRRR'),' ')||'</dtrefere>'
                                                      ||   '<cdtiptra>'||nvl(vr_tab_lancamento_futuro(vr_contador).cdtiptra,0)||'</cdtiptra>'
                                                      ||   '<idlancto>'||nvl(vr_tab_lancamento_futuro(vr_contador).idlancto,0)||'</idlancto>'
                                                      ||   '<idlstdom>'||nvl(vr_tab_lancamento_futuro(vr_contador).idlstdom,0)||'</idlstdom>'
                                                      ||   '<incancel>'||nvl(vr_tab_lancamento_futuro(vr_contador).incancel,0)||'</incancel>'                                                      
                                                    || '</lancamento>');
        END LOOP;
         
        -- Encerrar a tag raiz 
        gene0002.pc_escreve_xml(pr_xml            => pr_clobxmlc 
                               ,pr_texto_completo => vr_xml_temp 
                                 ,pr_texto_novo     => '</root>'
                               ,pr_fecha_xml      => TRUE);
        END IF;
                               
        IF vr_tab_totais_futuros.count() > 0 THEN
        /* Montar xml referente aos totais do lancamentos futuros */
        -- Criar documento XML
        dbms_lob.createtemporary(pr_clobxmlc_totais, TRUE); 
          dbms_lob.open(pr_clobxmlc_totais, dbms_lob.lob_readwrite);

        -- Insere o cabeçalho do XML 
        gene0002.pc_escreve_xml(pr_xml            => pr_clobxmlc_totais 
                               ,pr_texto_completo => vr_xml_temp_totais 
                                 ,pr_texto_novo     => '<?xml version="1.0" encoding="ISO-8859-1"?><root>');

        FOR vr_contador_totais IN vr_tab_totais_futuros.FIRST..vr_tab_totais_futuros.LAST LOOP
           if (pr_nmdatela = 'TAA') then
             vr_soma_deb := nvl(vr_tab_totais_futuros(vr_contador_totais).vllaudeb,0);
             vr_soma_cre := nvl(vr_tab_totais_futuros(vr_contador_totais).vllaucre,0);
             vr_soma_tot := nvl(vr_tab_totais_futuros(vr_contador_totais).vllautom,0);
           else
             vr_soma_tot :=vr_soma_cre - vr_soma_deb;
           end if;
          -- Montar XML com registros de carencia
          gene0002.pc_escreve_xml(pr_xml            => pr_clobxmlc_totais 
                                 ,pr_texto_completo => vr_xml_temp_totais 
                                 ,pr_texto_novo     => '<totais>' 
                                                      ||   '<vllautom>'||nvl(trim(to_char(vr_soma_tot,'999g999g990d00')),'0')||'</vllautom>'
                                                      ||   '<vllaudeb>'||nvl(trim(to_char(vr_soma_deb,'999g999g990d00')),'0')||'</vllaudeb>'
                                                      ||   '<vllaucre>'||nvl(trim(to_char(vr_soma_cre,'999g999g990d00')),'0')||'</vllaucre>'
                                                    || '</totais>');
        END LOOP;
         
        -- Encerrar a tag raiz 
        gene0002.pc_escreve_xml(pr_xml            => pr_clobxmlc_totais 
                               ,pr_texto_completo => vr_xml_temp_totais
                                 ,pr_texto_novo     => '</root>'
                               ,pr_fecha_xml      => TRUE);                               
        END IF;
        
      EXCEPTION
        WHEN vr_exc_erro THEN

          pr_cdcritic := vr_cdcritic;
          pr_dscritic := vr_dscritic;

        WHEN OTHERS THEN
          pr_cdcritic := vr_cdcritic;
          pr_dscritic := 'Erro geral em Consulta lancamentos futuros EXTR0002.pc_consulta_lancto_car: ' || SQLERRM;
          ROLLBACK;
          
      END;        
    
    END pc_consulta_lancto_car;
    
  END EXTR0002;
/
