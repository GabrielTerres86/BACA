CREATE OR REPLACE PACKAGE CECRED.PAGA0001 AS

  ---------------------------------------------------------------------------------------------------------------
  --
  --  Programa: PAGA0001                       Antiga: b1wgen0016.p
  --  Autor   : Evandro/David
  --  Data    : Abril/2006                     Ultima Atualizacao: 11/03/2019
  --
  --  Dados referentes ao programa:
  --
  --  Objetivo  : BO para controlar o pagamento de convenios (faturas) e de
  --              titulos.
  --
  --  Alteracoes: 22/08/2007 - Incluida procedure de Convenios Aceitos (Diego).
  --
  --              16/11/2007 - Alterar param para BO que gera protocolo (David).
  --
  --              11/12/2007 - Tratamento para Transpocred na procedure
  --                           "pagamentos_liberados" (David).
  --
  --              28/12/2007 - Tratamento para contas juridicas (David).
  --
  --              27/02/2008 - Armazenar o codigo de barras no protocolo (David).
  --
  --              28/04/2008 - Adicionado estorno de titulos e faturas (Evandro).
  --
  --              09/04/2008 - Adaptacao para agendamento de pagamentos (David).
  --
  --              31/07/2008 - Incluir parametro na procedure gera protocolo
  --                           (David).
  --
  --              20/05/2009 - Alterar tratamento para verificacao de registros
  --                           que estao com EXCLUSIVE-LOCK (David).
  --
  --              06/08/2009 - Alteracoes do Projeto de Transferencia para
  --                           Credito de Salario (David).
  --
  --              10/08/2009 - Validar faturas com mesmo sequencial no cadastro
  --                           de agendamento (David).
  --
  --              22/04/2010 - Alterar indice craplau4 por craplau2 na consulta
  --                           de agendamentos (David).
  --
  --              27/05/2010 - Receber a origem via parametro para possibilitar
  --                           o uso via TAA, o pagamento do TAA foi criado
  --                           como tipo 6 nos protocolos (Evandro).
  --
  --              24/06/2010 - Ajuste no recebimento da origem 4 para
  --                           tratamento do TAA e mensagem de erro na
  --                           verificacao da fatura (Evandro).
  --
  --              24/09/2010 - Bloquear agendamentos para o PAC 5 da Creditextil,
  --                           referente a sobreposicao de PACs (David).
  --
  --              20/10/2010 - Incluidos parametros nas procedures paga_titulo e
  --                           paga_convenio para compartilhamento com TAA
  --                           (Vitor).
  --
  --              01/05/2011 - Ajustes para a utilizacao das rotinas de
  --                           agendamento pelo TAA (Henrique).
  --
  --              02/05/2011 - Incluso parametro pagamento por cheque na
  --                           gera-titulos-iptu
  --                         - Incluso parametros cobranca registrada na
  --                           retorna-valores-titulo-iptu e gera-titulos-iptu
  --                         - Incluso parametros cobranca registrada na
  --                           verifica_titulo e paga_titulo (Guilherme).
  --
  --              09/06/2011 - Correcao nos debitos TAA (Evandro).
  --
  --              08/07/2011 - Chamada para procedure liquidacao-intrabancaria-dda
  --                           dentro da procedure paga_titulo (Elton).
  --
  --              21/07/2011 - Acerto no controle de erros para TAA (Evandro).
  --
  --              05/08/2011 - Ajuste de parametros na executa transferencia.
  --                           Incluir no protocolo: a cooperativa , agencia e
  --                           terminal (Gabriel).
  --
  --              17/08/2011 - Ajuste na condicao para geracao do movimento na
  --                           tabela crapmvi (David).
  --
  --              04/10/2011 - Adicionado parametros de nome e cpf do preposto
  --                           e operador em procedure obtem-agendamentos (Jorge).
  --
  --              05/10/2011 - CPF operador na verifica_operacao
  --                         - Incluir procedure cria_transacao_operador
  --                         - Incluir procedure cria_transacao_operador_registro
  --                         - Incluir procedure busca_transacoes
  --                         - Incluir procedure exclui_transacoes
  --                         - Incluir procedure efetiva_transacoes
  --                         - Incluir procedure atualiza_transacoes_nao_efetivadas
  --                           (Guilherme).
  --
  --              08/03/2012 - Incluido parametro de titulos DDA nas rotinas de
  --                           agendamento/pagamento. (Rafael)
  --                         - Incluido rotina de baixa-operacional nos pagamentos
  --                           de titulos DDA. (Rafael)
  --
  --              09/03/2012 - Adicionado os campos cdbcoctl e cdagectl.(Fabricio)
  --
  --              20/03/2012 - Removido rotina baixa-operacional nos pagamentos.
  --                           A baixa operacional ficou dentro da rotina de
  --                           atualizacao do dda na b1wgen0079. (Rafael)
  --
  --              24/04/2012 - Ajuste na condicao para pagtos de titulos na
  --                           procedure pagamentos_liberados (David).
  --
  --              11/05/2012 - Projeto TED Internet (David).
  --
  --              19/06/2012 - Alteracao na leitura da craptco (David Kruger).
  --
  --              19/10/2012 - Envio de email para pagamento de titulo com
  --                           valor acima de 1.000,00 (David Kistner).
  --
  --              08/11/2012 - Tratamento para Viacredi Alto Vale (David).
  --
  --              28/11/2012 - Ajuste Migracao Alto Vale (David).
  --
  --              03/01/2013 - Ajuste nos filtros da monitoracao de pagamento de
  --                           titulo (David).
  --
  --              08/02/2013 - Incluso chamada do procedimento retorna-valores-fatura da
  --                           BO b1crap15.p no procedimento estorna_convenio e incluso
  --                           tratamento para criticas (Daniel).
  --
  --              07/03/2013 - Alterar e-mail monitoracao pagtos (David).
  --
  --              18/04/2013 - Tratamento para Convenios SICREDI (Lucas)
  --
  --              18/04/2013 - Transferencia InterCooperativa (Gabriel).
  --
  --              27/04/2013 - Tratamento para convenios Sicredi (Elton).
  --
  --              30/04/2013 - Alterar valor minimo para monitoracao de pagtos
  --                           em 1000,00, exceto Viacredi e Alto Vale (David).
  --
  --              20/05/2013 - Novo param. procedure 'grava-autenticacao-internet'
  --                          (Lucas).
  --
  --              10/06/2013 - Alteracao funcao enviar_email_completo para
  --                           nova versao (Jean Michel).
  --                         - Projeto VR Boletos - inclusao do parametro DDA/CNPJ
  --                           do cedente na rotina de pagto de titulos. (Rafael)
  --
  --              18/06/2013 - Alteracao em valores de parametro de envio de
  --                           email para monitoracao de fralde. (Jorge)
  --
  --              25/06/2013 - Conversao Progress para oracle (Alisson - AMcom)
  --
  --              17/07/2013 - Alterada a procedure 'obtem-agendamentos' e
  --                           'debita-agendamento-transferencia' para correcao de
  --                           transferencia intercooperativa (Lucas).
  --
  --              19/07/2013 - Softdesk 77129 Alterada a procedure
  --                           debita-agendamento-pagamento; Quando a situacao do
  --                            agendamento ¿ setada para "Nao Efetivado",
  --                           verificar se o agendamento ¿ DDA
  --                           (craplau.idtitdda > 0), e entao tornar o titulo DDA
  --                           para "Em Aberto". (Carlos)
  --
  --              20/01/2014 - Melhoria processo leitura crapcob e craprtc (Gabriel).
  --
  --              31/01/2014 - Alterar Rowid pelo Progress Recid (Gabriel)
  --
  --              22/04/2014 - Incluido a fn_sequence na rotina pc_prepara_retorno_cooperativa
  --                           (Andrino - RKAM)
  --
  --              17/07/2014 - Adicionado procedure pc_verifica_situacao_transacao para verificar se existem
  --                           transacoes que nao podem mais ser aprovadas (Douglas - Chamado 178989)
  --
  --              07/08/2014 - Implementado ajusta para migracao da Concredi -> Viacredi, na procedure
  --                           pc_obtem_agend_debitos (Jean Michel).
  --
  --            03/09/2014 - Alteração na pc_verifica_convenio para apenas validar
  --                           código de barras caso seja inclusão de Débito
  --                           Automático (Lucas Lunelli - Projeto Débito Fácil)
  --                           Liberação Outubro/2014.
  --
  --        03/09/2014 - Inclusao rotinas projeto Float (Daniel).
  --
  --        03/09/2014 - Inclusao de tratamento para migracao de cooperativas
  --                           na procedure pc_obtem_agend_debitos e retirado leitura
  --                           da tabela craptco da procedure pc_executa_transferencia,
  --                           nova condicao pc_verifica_convenio e pc_verifica_titulo
  --                           (Jean Michel).
  --
  --        14/10/2014 - Procedure pc_verifica_titulo como publica (Guilherme/SUPERO)
  --
  --        29/10/2014 - Ajuste em pc_debito_agendto_pagto para quando atualizar craplau.insitlau = 4,
  --                     atualizar o campo dtdebito = craplau.dtmvtop em vez de
  --                     rw_craplau.dtmvtopg. (Jorge/Elton - SD 192000)
  --
  --        03/12/2014 - Inclusao da chamada do solicita_baixa_automatica (Guilherme/SUPERO)
  --
  --        04/12/2014 - De acordo com a circula 3.656 do Banco Central,substituir
  --                     nomenclaturas Cedente por Beneficiário e  Sacado por Pagador
  --                      Chamado 229313 (Jean Reddiga - RKAM).
  --
  --        15/01/2015 - Tratamento para considerar os lancamentos de debitos de
  --                     convenios CECRED (apenas quando o processo nao estiver
  --                     rodando) - procedure pc_obtem_agend_debitos.
  --                     (Chamado 229249 # PRJ Melhoria) - (Fabricio)
  --
  --        21/01/2015 - Ajustar pc_gera_arq_coop_cnab240 para carregar o campo crapcob.dsdoccop
  --                     no Segmento T, posição 59-73 (Douglas - Chamado 235429)
  --
  --        21/01/2015 - Remover validação que verifica se eh cobranca registrada da
  --                     cooperativa na pc_paga_titulo (Douglas - Chamado 228302)
  --
  --        29/09/2015 - Adicionar as procedures pc_PAGA0001_obtem_agen_deb e pc_PAGA0001_efetua_debitos para
  --                     a tela DEBNET (Douglas - Chamado 285228)
  --
  --        02/01/2015 - Realizar alterações referente as rotinas do GPS ( Renato - Supero )
  --
  --        04/12/2015 - Prj 131. Ajustadas procedures verifica_convenio,
  --                     verifica_titulo e paga_titulo para utilizar a nova 
  --                     estrutura de aprovação conjunta. (Reinert)  
  --
  --        21/12/2015 - Incluido verificacao de situação de transacao pendente, nas procedures
  --                     pc_debita_agendto_transf e pc_debita_agendto_pagto Prj. Assinatura Conjunta (Jean Michel).
  --
  --        11/11/2015 - Incluido calculo de modulo 11 para geracao
  --                     de comprovante/protocolo. (Tiago/Fabricio) SD - 334427
  --
  --        15/01/2015 - Deletado proc. pc_verifica_sit_transacao. Proj. 131 Assinatura Multipla.
  --                     (Jorge/David) Proj. 131 Assinatura Multipla.
  --
  --        11/01/2016 - Mover as procedures de execucao de instrucao de cobranca para a package COBR0007
  --                       - pc_verifica_horario_cobranca
  --                       - pc_verifica_ent_confirmada
  --                       - pc_efetua_val_recusa_padrao
  --                       - pc_verif_existencia_instruc
  --                       - pc_elimina_remessa
  --                       - pc_inst_titulo_migrado
  --                       - pc_inst_protestar
  --                       - pc_inst_pedido_baixa
  --                       - pc_inst_pedido_baixa_decurso
  --                       - pc_inst_sustar_baixar
  --                       - pc_enviar_titulo_protesto
  --                   - Mover as procedures de execucao de instrucao de cobranca para a package COBR0006
  --                       - pc_prep_retorno_cooper_90
  --                     (Douglas - Importacao de Arquivo CNAB)
  --
  --        29/01/2016 - Ajuste para corrigir o problema de registros na tabela craprtc com
  --                     numero de remessa duplicados
  --		  	         (Adriano - SD 391157).
  --                     
  --        26/02/2016 - Ajuste para efetuar a atualizaçao do titulo DDA somente no final da rotina,
  --                     pois existem casos que é ocorre um erro e é efetuado rollback contudo, a situação do titulo 
  --                     já foi atulizada e enviado a JDDA.
  --                     (Adriano - SD 394710)
  --
  --        28/03/2016 - Adicionados parâmetros para geraçao de LOG
  --                     (Lucas Lunelli - PROJ290 Cartao CECRED no CaixaOnline)
  --
  --
  --        05/04/2016 - Ajustado conforme solicitação do SD 429445 (Jean Michel).
  --
  --  	    10/05/2016 - Ajustes devido ao projeto M118 para cadastrar o favorecido de forma automatica
  --					 (Adriano - M117).
  --
  --  	    23/05/2016 - Retirado o uso do campo craplau.flmobile pois não existe em produção
  --					 (Adriano - M117).
  --
  --        30/05/2016 - Alteraçoes Oferta DEBAUT Sicredi (Lucas Lunelli - [PROJ320])
  --
  --        18/07/2016 - Tratamento para DARF/DAS na procedure pc_verifica_convenio, Prj. 338 (Jean Michel)
  --	
  --        31/08/2016 - Removida procedure pc_verifica_sit_transacao, SD 514239 (Jean Michel).
  --		
  --		22/09/2016 - Ajuste nos cursores que buscam títulos em aberto para arquivo de retorno (Rodrigo)
  --
  --        06/10/2016 - SD 489677 - Alteração de DELETE p/ UPDATE na CRAPLGP,
  --                     alterando o "flgativo" (Guilherme/SUPERO)
  --
  --        28/10/2016 - SD 509982 - DEBCON - Atualização criticas (Guilherme/SUPERO)
  --
  --        29/12/2016 - Tratamento Nova Plataforma de cobrança PRJ340 - NPC (Odirlei-AMcom)
  --
  --        10/02/2017 - Ajustado parâmetros pr_nrispbpg das procedures pc_processa_liquidacao e
  --                     pc_proc_liquid_apos_baixa para DEFAULT 99999999 (Rafael)
	--
	--        22/02/2017 - Ajustes para correçao de crítica de pagamento DARF/DAS (Lucas Lunelli - P.349.2)
	--
  --        10/05/2017 - Fixar na pc_valores_a_creditar os códigos de histórico 2277 e 2278, para os prejuizos 
  --                     Projeto 210_2 (Lombardi).	
  --
  --        15/12/2017 - Incluido nome do módulo logado
  --                     No caso de erro de programa gravar tabela especifica de log 
  --                     Ajuste mensagem de erro 
  --                     (Belli - Envolti - Chamado 779415)   
  --        
  --         28/06/2018 - Remover caracteres especiais ao inserir na tabela craplcm, para o campo dscedent.
  --                      (Alcemir Mout's) - PRB0040107.
  --
  --         18/07/2018 - Inclusão de pc_internal_exception nas exceptions others da procedure pc_paga_titulo
  --                      (André Bohn Mout's) - PRB0040172
  --
  --          23/06/2018 - Rename da tabela tbepr_cobranca para tbrecup_cobranca e filtro tpproduto = 0 (Paulo Penteado GFT)
  --     
  --          29/10/2018 - Ajuste critica/ mensagem / continuação do processo
  --                      ( Belli - Envolti - PRB0040400)
  --
  --          16/01/2019 - Revitalizacao (Remocao de lotes) - Pagamentos, Transferencias, Poupanca
  --                   Heitor (Mouts)
  ---------------------------------------------------------------------------------------------------------------

  --Tipo de registro de agendamento
  TYPE typ_reg_agendto IS
    RECORD (cdcooper crapcop.cdcooper%type
           ,dscooper crapcop.nmrescop%type
           ,nrdconta craplau.nrdconta%type
           ,nmprimtl crapass.nmprimtl%type
           ,cdagenci crapass.cdagenci%type
           ,cdtiptra craplau.cdtiptra%type
           ,fltiptra BOOLEAN
           ,dstiptra VARCHAR2(100)
           ,fltipdoc BOOLEAN
           ,dstransa VARCHAR2(100)
           ,vllanaut craplau.vllanaut%type
           ,dttransa craplau.dttransa%type
           ,hrtransa VARCHAR2(8)
           ,nrdocmto craplau.nrdocmto%type
           ,dslindig craplau.dslindig%type
           ,dscritic VARCHAR2(1000)
           ,nrdrecid ROWID
           ,fldebito BOOLEAN
           ,dsorigem VARCHAR2(20)
           ,dshistor VARCHAR2(100)
           ,idseqttl craplau.idseqttl%type
           ,prorecid NUMBER
           ,cdctrlcs craplau.cdctrlcs%type);

  --Tipo de tabela de agendamento
  TYPE typ_tab_agendto IS TABLE OF typ_reg_agendto INDEX BY VARCHAR2(300);

  vr_idlote_sms tbgen_sms_lote.idlote_sms%TYPE := 0;

  --Tipo de registro de lancamentos consolidados
  TYPE typ_reg_lcm_consolidada IS
    RECORD (cdcooper craplcm.cdcooper%type
           ,nrdconta craplcm.nrdconta%type
           ,nrconven crapcco.nrconven%type
           ,cdocorre INTEGER
           ,cdhistor craplcm.cdhistor%type
           ,tplancto VARCHAR2(1000)
           ,vllancto craplcm.vllanmto%type
           ,qtdregis INTEGER
           ,cdfvlcop INTEGER
           ,nrctremp crapepr.nrctremp%TYPE
           ,nrdocmto crapcob.nrdocmto%TYPE
           ,cdpesqbb craplcm.cdpesqbb%TYPE);

  --Tipo de tabela de lancamentos consolidada
  TYPE typ_tab_lcm_consolidada IS TABLE OF typ_reg_lcm_consolidada INDEX BY VARCHAR2(40);

  --Tipo de Registro de titulos
  TYPE typ_reg_titulos IS
    RECORD (cdbandoc crapcob.cdbandoc%type
           ,dsdoccop crapcob.dsdoccop%type
           ,dtmvtolt crapcob.dtmvtolt%type
           ,dtlibbdt craptdb.dtlibbdt%type
           ,dtvencto crapcob.dtvencto%type
           ,idseqttl crapcob.idseqttl%type
           ,nmdsacad crapsab.nmdsacad%type
           ,nrcnvcob crapcob.nrcnvcob%type
           ,nrctrlim craplim.nrctrlim%type
           ,nrdctabb crapcob.nrdctabb%type
           ,nrdocmto crapcob.nrdocmto%type
           ,nrinssac crapcob.nrinssac%type
           ,vldescto crapcob.vldescto%type
           ,vldpagto crapcob.vldpagto%type
           ,vltitulo crapcob.vltitulo%type
           ,vlliquid craptdb.vlliquid%type
           ,flgstats INTEGER
           ,nrdconta crapass.nrdconta%type
           ,nrborder crapbdt.nrborder%type
           ,qtdiavig craplim.qtdiavig%type
           ,qtrenctr craplim.qtrenctr%type
           ,qtrenova craplim.qtrenova%type
           ,dtctrato craplim.dtinivig%type
           ,dssittit VARCHAR2(1000)
           ,flgregis BOOLEAN
           ,tpcobran VARCHAR2(11));

  --Tipo de tabela de desconto
  /* A ordenacao da tabela de titulos deve ser feita pela conta + numero sequencial
     Ex: vr_index:= lpad(nrdconta,10,'0')||lpad(vr_tab_titulo.count+1,10,'0');
  */
  TYPE typ_tab_titulos IS TABLE OF typ_reg_titulos INDEX BY VARCHAR2(20);

  --Tipo de Registro para Protesto
  TYPE typ_reg_lat_consolidada IS RECORD
    (cdcooper  crapcop.cdcooper%type
    ,nrdconta  crapass.nrdconta%type
    ,nrdocmto  crapcob.nrdocmto%type
    ,nrcnvcob  crapcob.nrcnvcob%type
    ,dsincide  VARCHAR2(1000)
    ,cdocorre  craptar.cdocorre%type
    ,cdmotivo  craptar.cdmotivo%type
    ,vllanmto  NUMBER
    ,dscritic  VARCHAR2(1000));

  --Tipo de tabela para protesto
  TYPE typ_tab_lat_consolidada IS TABLE OF typ_reg_lat_consolidada INDEX BY VARCHAR2(60);

  --Tipo de tabela para arquivo cobranca cooperado
  TYPE typ_tab_arq_cobranca IS TABLE OF VARCHAR2(1000) INDEX BY PLS_INTEGER;

  
  
  --Tipo de registro de bancos favorecidos (tt)  
  TYPE typ_reg_bancos_favorecido IS
    RECORD (cdbccxlt crapban.cdbccxlt%type
           ,nmresbcc crapban.nmresbcc%type
           ,nrispbif crapban.nrispbif%type);
  --Tipo de tabela de agendamento index = NRISPBIF, CDBCCXLT
  TYPE typ_tab_bancos_favorecido IS TABLE OF typ_reg_bancos_favorecido INDEX BY VARCHAR2(100);

  --Tipo de registro de tipos de contas (tt)  
  TYPE typ_reg_tp_contas IS
    RECORD (nmtipcta VARCHAR2(100)
           ,intipcta VARCHAR2(100));
  --Tipo de tabela de agendamento index = NRISPBIF, CDBCCXLT
  TYPE typ_tab_tp_contas IS TABLE OF typ_reg_tp_contas INDEX BY PLS_INTEGER;
  
  TYPE typ_reg_craplot_rowid IS  RECORD (vr_rowid rowid);
  TYPE typ_tab_tp_cralot_rowid IS TABLE OF typ_reg_craplot_rowid INDEX BY VARCHAR2(300);
  
  TYPE typ_reg_autorizacao_favorecido IS
  RECORD (
         nmextcop crapcop.nmextcop%type
         ,nmrescop crapcop.nmrescop%type
         ,cdbcoctl crapcop.cdbcoctl%type
         ,nrispbif crapcti.nrispbif%type
         ,nmbcoctl crapban.nmextbcc%type
         ,cdagectl crapcop.cdagectl%type
         ,dttransa crapcti.dttransa%type
         ,hrtransa crapcti.hrtransa%type
         ,nrdconta crapass.nrdconta%type
         ,nmextttl crapttl.nmextttl%type
         ,nmprimtl crapass.nmprimtl%type
         ,nmsegttl crapass.nmprimtl%type
         ,cddbanco crapcti.cddbanco%type
         ,nmdbanco crapban.nmextbcc%type
         ,cdageban crapcti.cdageban%type
         ,nrctatrf crapcti.nrctatrf%type
         ,nmtitula crapcti.nmtitula%type
         ,dsprotoc crapcti.dsprotoc%type
         ,nrtelfax crapage.nrtelfax%type
         ,dsdemail crapage.dsdemail%type
         ,nmopecad VARCHAR2(100)
         ,idsequen INTEGER
         ,intipcta INTEGER
         ,inpessoa INTEGER
         ,nrcpfcgc crapass.nrcpfcgc%type);
  TYPE typ_tab_autorizacao_favorecido IS TABLE OF typ_reg_autorizacao_favorecido INDEX BY VARCHAR2(100);
  
  vr_tab_retorno lanc0001.typ_reg_retorno;
  vr_incrineg  INTEGER;
  vr_dscedent  craplcm.dscedent%type;
  
  --Buscar informacoes de movimentação da internet
  CURSOR cr_crapmvi (pr_cdcooper IN crapmvi.cdcooper%TYPE
                    ,pr_nrdconta IN crapmvi.nrdconta%TYPE
                    ,pr_idseqttl IN crapmvi.idseqttl%TYPE
                    ,pr_dtmvtolt IN crapmvi.dtmvtolt%TYPE) IS
  SELECT crapmvi.cdcooper
        ,crapmvi.cdoperad
        ,crapmvi.dtmvtolt
        ,crapmvi.dttransa
        ,crapmvi.hrtransa
        ,crapmvi.idseqttl
        ,crapmvi.nrdconta
        ,crapmvi.vlmovweb
        ,crapmvi.vlmovtrf
        ,crapmvi.rowid
    FROM crapmvi
   WHERE crapmvi.cdcooper = pr_cdcooper
     AND crapmvi.nrdconta = pr_nrdconta
     AND crapmvi.idseqttl = pr_idseqttl
     AND crapmvi.dtmvtolt = pr_dtmvtolt
     FOR UPDATE NOWAIT;
     
  
  PROCEDURE pc_efetua_debitos_paralelo(pr_cdcooper    IN crapcop.cdcooper%TYPE      --Cooperativa
                                   ,pr_tab_agendto IN OUT NOCOPY typ_tab_agendto --tabela de agendamento
                                   ,pr_cdprogra    IN crapprg.cdprogra%TYPE      --Codigo programa
                                   ,pr_dtmvtopg    IN crapdat.dtmvtolt%TYPE      --Data Pagamento
                                   ,pr_inproces    IN crapdat.inproces%TYPE      --Indicador processo
                                   ,pr_flsgproc    IN BOOLEAN                    --Flag segundo processamento
                                      ,pr_cdcritic    OUT INTEGER                   --Codigo da Critica
                                   ,pr_dscritic    OUT VARCHAR2);
                                   
  function fn_exec_paralelo return boolean;
  
  procedure pc_insere_lote_wrk(pr_cdcooper IN craplot.cdcooper%TYPE
                              ,pr_dtmvtolt IN craplot.dtmvtolt%TYPE
                              ,pr_cdagenci IN craplot.cdagenci%TYPE
                              ,pr_cdbccxlt IN craplot.cdbccxlt%TYPE
                              ,pr_nrdolote IN craplot.nrdolote%TYPE
                              ,pr_cdoperad IN craplot.cdoperad%TYPE
                              ,pr_nrdcaixa IN craplot.nrdcaixa%TYPE
                              ,pr_tplotmov IN craplot.tplotmov%TYPE
                              ,pr_cdhistor IN craplot.cdhistor%TYPE
                              ,pr_cdbccxpg IN craplot.cdbccxpg%TYPE
                              ,pr_nmrotina in varchar2);

  procedure pc_gerar_lote_from_wrk(pr_cdcooper       IN craplot.cdcooper%TYPE
                                  ,pr_craplot_rowid out typ_tab_tp_cralot_rowid
                                  ,pr_dserro        OUT VARCHAR2);
  
  procedure pc_atualiz_lote(pr_craplot_rowid in typ_tab_tp_cralot_rowid,
                            pr_cdcooper      in craplot.cdcooper%type,
                            pr_sequecia_lote in craplot.nrseqdig%type);
   
  --Funcao utilizada para controle da sequencia para a tabela craplcm.
  function fn_seq_parale_craplcm RETURN VARCHAR2;                              
     
  -- Procedimento para inserir ou atualizar a crapmvi e não deixar tabela lockada
  PROCEDURE pc_insere_movimento_internet(pr_cdcooper IN crapmvi.cdcooper%TYPE
                                        ,pr_nrdconta IN crapmvi.nrdconta%TYPE
                                        ,pr_idseqttl IN crapmvi.idseqttl%TYPE
                                        ,pr_dtmvtolt IN crapmvi.dtmvtolt%TYPE
                                        ,pr_cdoperad IN crapmvi.cdoperad%TYPE
                                        ,pr_inpessoa IN crapass.inpessoa%TYPE
                                        ,pr_tpoperac IN NUMBER --1 - Transferência, 2 - Pagamento, 4 - TED
                                        ,pr_vllanmto IN crapmvi.vlmovweb%TYPE
                                        ,pr_dscritic OUT VARCHAR2);
  
  /* Procedimento do internetbank operação 23 - Transferencia */
  PROCEDURE pc_InternetBank23 ( pr_cdcooper IN crapcop.cdcooper%TYPE   --> Codigo da cooperativa
                               ,pr_nrdconta IN crapttl.nrdconta%TYPE   --> Numero da conta
                               ,pr_idseqttl IN crapttl.idseqttl%TYPE   --> Sequencial titular
                               ,pr_dtmvtolt IN crapdat.dtmvtolt%TYPE   --> Data de movimento
                               ,pr_tppeslst IN INTEGER
                               ,pr_tpoperac IN INTEGER                 --> Tipo de opracao
                               ,pr_tptipdif IN crapcti.intipdif%TYPE
                               ,pr_nrcpfope IN crapcti.nrcpfcgc%TYPE   --> CPF do operador juridico
                               ,pr_nmtitpes IN crapcti.nmtitula%TYPE
                               ,pr_flgpesqu IN INTEGER
                               ,pr_flmobile IN INTEGER
                               ,pr_dstransa IN VARCHAR2
                               ,pr_cdorigem IN INTEGER                 --> Código da Origem
                               ,pr_dsorigem IN VARCHAR2                --> Descrição da Origem
                               ,pr_cdagenci IN INTEGER                 --> Agencia              
                               ,pr_nrdcaixa IN INTEGER                 --> Caixa
                               ,pr_nmprogra IN VARCHAR2                --> Nome do programa
                               ,pr_xml_dsmsgerr   OUT VARCHAR2         --> Retorno XML de critica
                               ,pr_xml_operacao23 OUT CLOB             --> Retorno XML da operação 23
                               ,pr_dsretorn       OUT VARCHAR2);

  /* Procedure para gravar solicitação de envio da jdda */
  PROCEDURE pc_solicita_crapdda ( pr_cdcooper  IN crapcop.cdcooper%type   --Codigo Cooperativa
                                 ,pr_dtmvtolt  IN crapdat.dtmvtolt%TYPE   --Data pagamento
                                 ,pr_cobrowid  IN ROWID                   --rowid de cobranca
                                 ,pr_dscritic  OUT VARCHAR2);             --Descricao da critica
                                 
  /* Procedure para gravar solicitação de envio para a CIP - Chamada Progress */
  PROCEDURE pc_solicita_crapdda_prog (  pr_cdcooper  IN crapcop.cdcooper%type   --Codigo Cooperativa
                                       ,pr_dtmvtolt  IN crapdat.dtmvtolt%TYPE   --Data pagamento
                                       ,pr_cobrecid  IN crapcob.progress_recid%TYPE  --recid de cobranca
                                       ,pr_dscritic  OUT VARCHAR2);            --Descricao da critica
                                       
  /* Procedure para efetuar alteracao no registro auxiliar*/
  PROCEDURE pc_altera_situac_trans(pr_cdcooper IN crapcop.cdcooper%type --Cooperativa
                                  ,pr_nrdconta IN crapass.nrdconta%TYPE  --Conta do associado
                                  ,pr_dssgproc IN VARCHAR2 --Indicador segundo processo
                                  ,pr_dtmvtolt IN crapdat.dtmvtolt%type  --Data do movimento
                                  ,pr_tab_limite_pend IN INET0002.typ_tab_limite_pend
                                  ,pr_flgalter OUT BOOLEAN  --Flag que alterou
                                  ,pr_cdcritic OUT INTEGER  --Codigo erro
                                  ,pr_dscritic OUT VARCHAR2); --Descricao erro


  /* Procedure para atualizar o registro de transacao para nao efetivado */
  PROCEDURE pc_atualiza_trans_nao_efetiv (pr_cdcooper IN crapcop.cdcooper%type  --Codigo da Cooperativa
                                         ,pr_nrdconta IN crapass.nrdconta%TYPE  --Numero da Conta
                                         ,pr_cdagenci IN crapass.cdagenci%TYPE  --Codigo da Agencia
                                         ,pr_dtmvtolt IN crapdat.dtmvtolt%type  --Data Proximo Pagamento
                                         ,pr_dstransa OUT VARCHAR2              --Msg Transação
                                         ,pr_cdcritic OUT INTEGER               --Codigo de erro
                                         ,pr_dscritic OUT varchar2);            --Retorno de Erro

  /* Procedure para obter agendamento debitos */
  PROCEDURE pc_obtem_agend_debitos (pr_cdcooper IN crapcop.cdcooper%TYPE    --Cooperativa
                                   ,pr_dtmvtopg IN crapdat.dtmvtolt%TYPE    --Data de pagamento
                                   ,pr_inproces IN crapdat.inproces%TYPE    --Indicador processo
                                   ,pr_cdprogra IN VARCHAR2                 --Nome do programa
  																 ,pr_inpriori IN VARCHAR2 DEFAULT 'T'     --Indicador de prioridade para o debitador unico ("S"= agua/luz, "N"=outros, "T"=todos) 
                                   ,pr_tab_agendto OUT typ_tab_agendto      --tabela de agendamento
                                   ,pr_cdcritic OUT INTEGER   --Codigo da Critica
                                   ,pr_dscritic OUT VARCHAR2); --Descricao da critica


  /* Procedure para obter agendamento debitos */
  PROCEDURE pc_efetua_debitos (pr_cdcooper    IN crapcop.cdcooper%TYPE      --Cooperativa
                              ,pr_tab_agendto IN OUT NOCOPY typ_tab_agendto --tabela de agendamento
                              ,pr_cdprogra    IN crapprg.cdprogra%TYPE      --Codigo programa
                              ,pr_dtmvtopg    IN crapdat.dtmvtolt%TYPE      --Data Pagamento
                              ,pr_inproces    IN crapdat.inproces%TYPE      --Indicador processo
                              ,pr_flsgproc    IN BOOLEAN                    --Flag segundo processamento
							  ,pr_execucao    IN INTEGER DEFAULT 0          --Ordem de execução no dia
                              ,pr_cdcritic    OUT INTEGER     --Codigo da Critica
                              ,pr_dscritic    OUT VARCHAR2);   --Descricao da critica

  /* Procedure para verificar qual o historico para a transferencia */
  PROCEDURE pc_verifica_historico_transf (pr_cdcooper IN crapcop.cdcooper%TYPE  --Codigo Cooperativa
                                         ,pr_nrdconta IN crapass.nrdconta%TYPE  --Conta associado
                                         ,pr_nrctatrf IN crapcti.nrctatrf%TYPE  --Conta destino
                                         ,pr_cdorigem IN INTEGER                --Identificador Origem
                                         ,pr_cdtiptra IN craplau.cdtiptra%TYPE  --Tipo transacao
                                         ,pr_cdhiscre OUT craphis.cdhistor%TYPE  --Historico Credito
                                         ,pr_cdhisdeb OUT craphis.cdhistor%TYPE  --Historico Debito
                                         ,pr_cdcritic OUT INTEGER  --Codigo do erro
                                         ,pr_dscritic OUT VARCHAR2); --Descricao do erro

  /* Verificar os Convenios */
  PROCEDURE pc_verifica_convenio (pr_cdcooper IN  crapcop.cdcooper%TYPE   --Codigo da cooperativa
                                 ,pr_nrdconta IN  crapttl.nrdconta%TYPE   --Numero da conta
                                 ,pr_idseqttl IN  crapttl.idseqttl%TYPE   --Sequencial titular
                                 ,pr_idagenda IN  INTEGER                 --Indicador agendamento
                                 ,pr_lindigi1 IN OUT NUMBER               --Linha digitavel 1
                                 ,pr_lindigi2 IN OUT NUMBER               --Linha digitavel 2
                                 ,pr_lindigi3 IN OUT NUMBER               --Linha digitavel 3
                                 ,pr_lindigi4 IN OUT NUMBER               --Linha digitavel 4
                                 ,pr_cdbarras IN OUT VARCHAR2             --Codigo de Barras
                                 ,pr_dtvencto IN OUT DATE                 --Data Vencimento
                                 ,pr_vllanmto IN  NUMBER                  --Valor Lancamento
                                 ,pr_dtagenda IN OUT DATE                 --Data agendamento
                                 ,pr_idorigem IN  INTEGER                 --Indicador de origem
                                 ,pr_indvalid IN  INTEGER                 --Indicador se ja foi feito
								 ,pr_flmobile IN  INTEGER                 --Indicador Mobile
                                 ,pr_nmextcon OUT VARCHAR2                --Nome do banco
                                 ,pr_cdseqfat OUT NUMBER                  --Codigo Sequencial fatura
                                 ,pr_vlfatura OUT NUMBER                  --Valor fatura
                                 ,pr_nrdigfat OUT INTEGER                 --Numero Digito Fatura
                                 ,pr_dstransa OUT VARCHAR2                --Descricao transacao
                                 ,pr_cdcritic OUT INTEGER                 --Codigo da critica
                                 ,pr_dscritic OUT VARCHAR2);              --Descricao critica

  /* Chamada para ser utilizada no progress
     Verificar os Convenios */
  PROCEDURE pc_verifica_convenio_prog(pr_cdcooper IN  crapcop.cdcooper%TYPE   --Codigo da cooperativa
                                     ,pr_nrdconta IN  crapttl.nrdconta%TYPE   --Numero da conta
                                     ,pr_idseqttl IN  crapttl.idseqttl%TYPE   --Sequencial titular
                                     ,pr_idagenda IN  INTEGER                 --Indicador agendamento
                                     ,pr_lindigi1 IN OUT NUMBER               --Linha digitavel 1
                                     ,pr_lindigi2 IN OUT NUMBER               --Linha digitavel 2
                                     ,pr_lindigi3 IN OUT NUMBER               --Linha digitavel 3
                                     ,pr_lindigi4 IN OUT NUMBER               --Linha digitavel 4
                                     ,pr_cdbarras IN OUT VARCHAR2             --Codigo de Barras
                                     ,pr_dtvencto IN OUT DATE                 --Data Vencimento
                                     ,pr_vllanmto IN  NUMBER                  --Valor Lancamento
                                     ,pr_dtagenda IN OUT DATE                 --Data agendamento
                                     ,pr_idorigem IN  INTEGER                 --Indicador de origem
                                     ,pr_indvalid IN  INTEGER                 --Indicador se ja foi feito
                                     ,pr_nmextcon OUT VARCHAR2                --Nome do banco
                                     ,pr_cdseqfat OUT VARCHAR2                  --Codigo Sequencial fatura
                                     ,pr_vlfatura OUT NUMBER                  --Valor fatura
                                     ,pr_nrdigfat OUT INTEGER                 --Numero Digito Fatura
                                     ,pr_dstransa OUT VARCHAR2                --Descricao transacao
                                     ,pr_cdcritic OUT INTEGER                 --Codigo da critica
                                     ,pr_dscritic OUT VARCHAR2);              --Descricao critica

  /* Pagar os Convenios */
  PROCEDURE pc_paga_convenio (pr_cdcooper IN  crapcop.cdcooper%TYPE   --Codigo da cooperativa
                             ,pr_nrdconta IN  crapttl.nrdconta%TYPE   --Numero da conta
                             ,pr_idseqttl IN  crapttl.idseqttl%TYPE   --Sequencial titular
                             ,pr_cdbarras IN  VARCHAR2                --Codigo de Barras
                             ,pr_dscedent IN  VARCHAR2 DEFAULT NULL   -- Descrição do cedente
                             ,pr_cdseqfat IN  NUMBER                  --Codigo Sequencial fatura
                             ,pr_vlfatura IN  NUMBER                  --Valor fatura
                             ,pr_nrdigfat IN  INTEGER                 --Numero Digito Fatura
                             ,pr_flgagend IN  INTEGER /*1-True,0-False*/--Flag agendado
                             ,pr_idorigem IN  INTEGER                 --Indicador de origem
                             ,pr_cdcoptfn IN  INTEGER                 --Codigo cooperativa transacao
                             ,pr_cdagetfn IN  INTEGER                 --Codigo Agencia transacao
                             ,pr_nrterfin IN  INTEGER                 --Numero terminal financeiro
                             ,pr_nrcpfope IN  NUMBER                  --Numero cpf operador
                             ,pr_tpcptdoc IN craptit.tpcptdoc%TYPE DEFAULT 1 --> Tipo de captura do documento (1=Leitora, 2=Linha digitavel).
                             ,pr_flmobile IN INTEGER                  --Indicador Mobile
                             ,pr_iptransa IN VARCHAR2 DEFAULT NULL    -- Ip da transação
                             ,pr_iddispos IN VARCHAR2 DEFAULT NULL    -- id do dispositivo
                             ,pr_dstransa OUT VARCHAR2                --Descricao transacao
                             ,pr_dsprotoc OUT VARCHAR2                --Descricao Protocolo
                             ,pr_cdbcoctl OUT VARCHAR2                --Codigo Banco Centralizador
                             ,pr_cdagectl OUT VARCHAR2                --Codigo Agencia Centralizadora
                             ,pr_cdcritic OUT INTEGER                 --Codigo da critica
                             ,pr_dscritic OUT VARCHAR2                --Descricao critica
                             ,pr_msgofatr OUT VARCHAR2
                             ,pr_cdempcon OUT NUMBER
							 ,pr_cdsegmto OUT VARCHAR2);                

  /* Chamada para utilizar no progress
     Pagar os Convenios */
  PROCEDURE pc_paga_convenio_prog (pr_cdcooper IN  crapcop.cdcooper%TYPE   --Codigo da cooperativa
                                   ,pr_nrdconta IN  crapttl.nrdconta%TYPE   --Numero da conta
                                   ,pr_idseqttl IN  crapttl.idseqttl%TYPE   --Sequencial titular
                                   ,pr_cdbarras IN  VARCHAR2                --Codigo de Barras
                                   ,pr_dscedent IN  VARCHAR2 DEFAULT NULL   -- descrição do cedente
                                   ,pr_cdseqfat IN  VARCHAR2                  --Codigo Sequencial fatura
                                   ,pr_vlfatura IN  NUMBER                  --Valor fatura
                                   ,pr_nrdigfat IN  INTEGER                 --Numero Digito Fatura
                                   ,pr_flgagend IN  INTEGER /*1-True,0-Fals*/-- Flag agendado
                                   ,pr_idorigem IN  INTEGER                 --Indicador de origem
                                   ,pr_cdcoptfn IN  INTEGER                 --Codigo cooperativa transacao
                                   ,pr_cdagetfn IN  INTEGER                 --Codigo Agencia transacao
                                   ,pr_nrterfin IN  INTEGER                 --Numero terminal financeiro
                                   ,pr_nrcpfope IN  NUMBER                  --Numero cpf operador
                                   ,pr_flmobile IN INTEGER                  --Indicador Mobile
                                   ,pr_iptransa IN VARCHAR2 DEFAULT NULL    -- Ip da transação
                                   ,pr_iddispos IN VARCHAR2 DEFAULT NULL    -- id do dispositivo
                                   ,pr_dstransa OUT VARCHAR2                --Descricao transacao
                                   ,pr_dsprotoc OUT VARCHAR2                --Descricao Protocolo
                                   ,pr_cdbcoctl OUT VARCHAR2                --Codigo Banco Centralizador
                                   ,pr_cdagectl OUT VARCHAR2                --Codigo Agencia Centralizadora
                                   ,pr_cdcritic OUT INTEGER                -- Codigo da critica
                                   ,pr_dscritic OUT VARCHAR2               -- Descricao critica
                                   ,pr_msgofatr OUT VARCHAR2
                                   ,pr_cdempcon OUT NUMBER
								   ,pr_cdsegmto OUT VARCHAR2);               

  /* Verificar os titulos */
  PROCEDURE pc_verifica_titulo (pr_cdcooper IN  crapcop.cdcooper%TYPE   --Codigo da cooperativa
                               ,pr_nrdconta IN  crapttl.nrdconta%TYPE   --Numero da conta
                               ,pr_idseqttl IN  crapttl.idseqttl%TYPE   --Sequencial titular
                               ,pr_idagenda IN  INTEGER                 --Indicador agendamento
                               ,pr_lindigi1 IN OUT NUMBER               --Linha digitavel 1
                               ,pr_lindigi2 IN OUT NUMBER               --Linha digitavel 2
                               ,pr_lindigi3 IN OUT NUMBER               --Linha digitavel 3
                               ,pr_lindigi4 IN OUT NUMBER               --Linha digitavel 4
                               ,pr_lindigi5 IN OUT NUMBER               --Linha digitavel 5
                               ,pr_cdbarras IN OUT VARCHAR2             --Codigo de Barras
                               ,pr_vllanmto IN  NUMBER                  --Valor Lancamento
                               ,pr_dtagenda IN OUT DATE                 --Data agendamento
                               ,pr_idorigem IN  INTEGER                 --Indicador de origem
                               ,pr_indvalid IN  INTEGER                 --Indicador se ja foi feito
                               ,pr_flmobile IN  INTEGER  
                               ,pr_cdctrlcs IN tbcobran_consulta_titulo.cdctrlcs%TYPE DEFAULT NULL --> Numero de controle da consulta no NPC
                               ,pr_nmextbcc OUT VARCHAR2                --Nome do banco
                               ,pr_vlfatura OUT NUMBER                  --Valor fatura
                               ,pr_dtdifere OUT BOOLEAN                 --Indicador data diferente
                               ,pr_vldifere OUT BOOLEAN                 --Indicador valor diferente
                               ,pr_nrctacob OUT INTEGER                 --Numero Conta Cobranca
                               ,pr_insittit OUT INTEGER                 --Indicador Situacao Titulo
                               ,pr_intitcop OUT INTEGER                 --Indicador Titulo Cooperativa
                               ,pr_nrcnvcob OUT NUMBER                  --Numero Convenio Cobranca
                               ,pr_nrboleto OUT NUMBER                  --Numero Boleto
                               ,pr_nrdctabb OUT INTEGER                 --Numero conta
                               ,pr_dstransa OUT VARCHAR2                --Descricao transacao
                               /* parametro de cobranca registrada */
                               ,pr_cobregis OUT BOOLEAN                 --Cobranca Registrada
                               ,pr_msgalert OUT VARCHAR2                --mensagem alerta
                               ,pr_vlrjuros OUT NUMBER                  --Valor Juros
                               ,pr_vlrmulta OUT NUMBER                  --Valor Multa
                               ,pr_vldescto OUT NUMBER                  --Valor desconto
                               ,pr_vlabatim OUT NUMBER                  --Valor Abatimento
                               ,pr_vloutdeb OUT NUMBER                  --Valor saida debito
                               ,pr_vloutcre OUT NUMBER                  --Valor saida credito
                               /* parametros de erro */
                               ,pr_cdcritic OUT INTEGER                 --Codigo da critica
                               ,pr_dscritic OUT VARCHAR2);              --Descricao critica

  /* Chamada para utilizar via Progress - Verificar os titulos */
  PROCEDURE pc_verifica_titulo_prog ( pr_cdcooper IN  crapcop.cdcooper%TYPE   --Codigo da cooperativa
                                     ,pr_nrdconta IN  crapttl.nrdconta%TYPE   --Numero da conta
                                     ,pr_idseqttl IN  crapttl.idseqttl%TYPE   --Sequencial titular
                                     ,pr_idagenda IN  INTEGER                 --Indicador agendamento
                                     ,pr_lindigi1 IN OUT NUMBER               --Linha digitavel 1
                                     ,pr_lindigi2 IN OUT NUMBER               --Linha digitavel 2
                                     ,pr_lindigi3 IN OUT NUMBER               --Linha digitavel 3
                                     ,pr_lindigi4 IN OUT NUMBER               --Linha digitavel 4
                                     ,pr_lindigi5 IN OUT NUMBER               --Linha digitavel 5
                                     ,pr_cdbarras IN OUT VARCHAR2             --Codigo de Barras
                                     ,pr_vllanmto IN  NUMBER                  --Valor Lancamento
                                     ,pr_dtagenda IN OUT DATE                 --Data agendamento
                                     ,pr_idorigem IN  INTEGER                 --Indicador de origem
                                     ,pr_indvalid IN  INTEGER                 --Indicador se ja foi feito
                                     ,pr_cdctrlcs IN tbcobran_consulta_titulo.cdctrlcs%TYPE DEFAULT NULL --> Numero de controle da consulta no NPC
                                     ,pr_nmextbcc OUT VARCHAR2                --Nome do banco
                                     ,pr_vlfatura OUT NUMBER                  --Valor fatura
                                     ,pr_dtdifere OUT INTEGER                 --Indicador data diferente
                                     ,pr_vldifere OUT INTEGER                 --Indicador valor diferente
                                     ,pr_nrctacob OUT INTEGER                 --Numero Conta Cobranca
                                     ,pr_insittit OUT INTEGER                 --Indicador Situacao Titulo
                                     ,pr_intitcop OUT INTEGER                 --Indicador Titulo Cooperativa
                                     ,pr_nrcnvcob OUT NUMBER                  --Numero Convenio Cobranca
                                     ,pr_nrboleto OUT NUMBER                  --Numero Boleto
                                     ,pr_nrdctabb OUT INTEGER                 --Numero conta
                                     ,pr_dstransa OUT VARCHAR2                --Descricao transacao
                                     /* parametro de cobranca registrada */
                                     ,pr_cobregis OUT INTEGER                 --Cobranca Registrada
                                     ,pr_msgalert OUT VARCHAR2                --mensagem alerta
                                     ,pr_vlrjuros OUT NUMBER                  --Valor Juros
                                     ,pr_vlrmulta OUT NUMBER                  --Valor Multa
                                     ,pr_vldescto OUT NUMBER                  --Valor desconto
                                     ,pr_vlabatim OUT NUMBER                  --Valor Abatimento
                                     ,pr_vloutdeb OUT NUMBER                  --Valor saida debito
                                     ,pr_vloutcre OUT NUMBER                  --Valor saida credito
                                     /* parametros de erro */
                                     ,pr_cdcritic OUT INTEGER                 --Codigo da critica
                                     ,pr_dscritic OUT VARCHAR2);              --Descricao critica
  /* Pagar os titulos */
  PROCEDURE pc_paga_titulo (pr_cdcooper IN crapcop.cdcooper%TYPE    --Codigo da cooperativa
                           ,pr_nrdconta IN crapttl.nrdconta%TYPE    --Numero da conta
                           ,pr_idseqttl IN crapttl.idseqttl%TYPE    --Sequencial titular
                           ,pr_lindigi1 IN NUMBER                   --Linha digitavel 1
                           ,pr_lindigi2 IN NUMBER                   --Linha digitavel 2
                           ,pr_lindigi3 IN NUMBER                   --Linha digitavel 3
                           ,pr_lindigi4 IN NUMBER                   --Linha digitavel 4
                           ,pr_lindigi5 IN NUMBER                   --Linha digitavel 5
                           ,pr_cdbarras IN VARCHAR2                 --Codigo de Barras
                           ,pr_dscedent IN VARCHAR2                 --Descricao do Cedente
                           ,pr_vllanmto IN NUMBER                   --Valor Lancamento
                           ,pr_vlfatura IN NUMBER                   --Valor fatura
                           ,pr_nrctacob IN INTEGER                  --Numero Conta Cobranca
                           ,pr_insittit IN INTEGER                  --Indicador Situacao Titulo
                           ,pr_intitcop IN INTEGER                  --Indicador Titulo Cooperativa
                           ,pr_nrcnvcob IN NUMBER                   --Numero Convenio Cobranca
                           ,pr_nrboleto IN OUT NUMBER               --Numero Boleto
                           ,pr_nrdctabb IN INTEGER                  --Numero conta
                           ,pr_idtitdda IN NUMBER                   --Indicador titulo DDA
                           ,pr_flgagend IN INTEGER /*1-True,0-False*/--Flag agendado
                           ,pr_idorigem IN INTEGER                  --Indicador de origem
                           ,pr_cdcoptfn IN INTEGER                  --Codigo cooperativa transacao
                           ,pr_cdagetfn IN INTEGER                  --Codigo Agencia transacao
                           ,pr_nrterfin IN INTEGER                  --Numero terminal financeiro
                           /* parametro de cobranca registrada */
                           ,pr_vlrjuros IN NUMBER                   --Valor Juros
                           ,pr_vlrmulta IN NUMBER                   --Valor Multa
                           ,pr_vldescto IN NUMBER                   --Valor desconto
                           ,pr_vlabatim IN NUMBER                   --Valor Abatimento
                           ,pr_vloutdeb IN NUMBER                   --Valor saida debito
                           ,pr_vloutcre IN NUMBER                   --Valor saida credito
                           ,pr_nrcpfope IN NUMBER                   --Numero cpf operador
                           ,pr_tpcptdoc IN craptit.tpcptdoc%TYPE DEFAULT 1 --> Tipo de captura do documento (1=Leitora, 2=Linha digitavel).
                           ,pr_cdctrlcs IN tbcobran_consulta_titulo.cdctrlcs%TYPE DEFAULT NULL --> Numero de controle da consulta no NPC
                           ,pr_flmobile IN INTEGER DEFAULT 0        --Indicador Mobile
                           ,pr_iptransa IN VARCHAR2 DEFAULT NULL    -- Ip da transação
                           ,pr_iddispos IN VARCHAR2 DEFAULT NULL    -- id do dispositivo                           
                           ,pr_dstransa OUT VARCHAR2                --Descricao transacao
                           ,pr_dsprotoc OUT VARCHAR2                --Descricao Protocolo
                           ,pr_cdbcoctl OUT VARCHAR2                --Codigo Banco Centralizador
                           ,pr_cdagectl OUT VARCHAR2                --Codigo Agencia Centralizadora
                           /* parametros de erro */
                           ,pr_cdcritic OUT INTEGER                 --Codigo da critica
                           ,pr_dscritic OUT VARCHAR2);              --Descricao critica

  /* Procedure para efetuar transferencia da Internet */
  PROCEDURE pc_executa_transferencia (pr_cdcooper IN craplcm.cdcooper%TYPE  --Codigo Cooperativa
                                     ,pr_dtmvtolt IN craplcm.dtmvtolt%TYPE  --Data Movimento
                                     ,pr_dtmvtocd IN craplcm.dtmvtolt%TYPE  --Data Credito
                                     ,pr_cdagenci IN craplcm.cdagenci%TYPE  --Codigo Agencia
                                     ,pr_cdbccxlt IN craplcm.cdbccxlt%TYPE  --Codigo Banco/Caixa
                                     ,pr_nrdolote IN craplcm.nrdolote%TYPE  --Numero Lote
                                     ,pr_nrdcaixa IN craplot.nrdcaixa%TYPE  --Numero da Caixa
                                     ,pr_nrdconta IN craplcm.nrdconta%TYPE  --Numero da conta
                                     ,pr_idseqttl IN crapttl.idseqttl%TYPE  --Sequencial titulo
                                     ,pr_nrdocmto IN craplcm.nrdocmto%TYPE  --Numero documento
                                     ,pr_cdhiscre IN craplcm.cdhistor%TYPE  --Historico Credito
                                     ,pr_cdhisdeb IN craplcm.cdhistor%TYPE  --Historico Debito
                                     ,pr_vllanmto IN craplcm.vllanmto%TYPE  --Valor Lancamento
                                     ,pr_cdoperad IN craplcm.cdoperad%TYPE  --Codigo Operador
                                     ,pr_nrctatrf IN crapcti.nrctatrf%TYPE  --Numero conta transferencia
                                     ,pr_flagenda IN BOOLEAN                --Flag agendado
                                     ,pr_cdcoptfn IN INTEGER                --Codigo cooperativa transf
                                     ,pr_cdagetfn IN INTEGER                --Codigo agencia transf
                                     ,pr_nrterfin IN INTEGER                --Numero terminal
                                     ,pr_dscartao IN VARCHAR2               --Descricao do cartao
                                     ,pr_cdorigem IN INTEGER                --Codigo da Origem
                                     ,pr_nrcpfope IN NUMBER                 --CPF operador
									 ,pr_flmobile IN INTEGER                --> Indicador Mobile
									 ,pr_idtipcar IN INTEGER                --> Indicador Tipo Cartão Utilizado
									 ,pr_nrcartao IN NUMBER                 --> Numero Cartao
                                     ,pr_dstransa OUT VARCHAR2               --Descricao transacao
                                     ,pr_nrdocdeb OUT craplcm.nrdocmto%TYPE  --Numero documento debito
                                     ,pr_nrdoccre OUT craplcm.nrdocmto%TYPE  --Numero documento credito
                                     ,pr_dsprotoc OUT crappro.dsprotoc%TYPE  --Descricao protocolo
                                     ,pr_cdcritic OUT INTEGER  --Codigo do erro
                                     ,pr_dscritic OUT VARCHAR2); --Descricao do erro


  /* Procedure para efetuar transferencia Intercooperativa */
  PROCEDURE pc_executa_transf_intercoop (pr_cdcooper IN craplcm.cdcooper%TYPE     --Codigo Cooperativa
                                        ,pr_cdagenci IN craplcm.cdagenci%TYPE     --Codigo Agencia
                                        ,pr_nrdcaixa IN craplot.nrdcaixa%TYPE     --Numero da Caixa
                                        ,pr_cdoperad IN craplcm.cdoperad%TYPE     --Codigo Operador
                                        ,pr_idorigem IN INTEGER                   --Codigo da Origem
                                        ,pr_dtmvtolt IN craplcm.dtmvtolt%TYPE     --Data Movimento
                                        ,pr_idagenda IN INTEGER                   --Identificador agendamento
                                        ,pr_nrdconta IN craplcm.nrdconta%TYPE     --Numero da conta
                                        ,pr_idseqttl IN crapttl.idseqttl%TYPE     --Sequencial titular
                                        ,pr_nrcpfope IN crapopi.nrcpfope%TYPE     --CPF operador
                                        ,pr_cddbanco IN crapcti.cddbanco%TYPE     --Codigo Banco/Caixa
                                        ,pr_cdagectl IN crapcti.cdageban%TYPE     --Codigo agencia centralizadora
                                        ,pr_nrctatrf IN craplau.nrctadst%TYPE     --Conta destino
                                        ,pr_vllanmto IN craplcm.vllanmto%TYPE     --Valor Lancamento
                                        ,pr_nrsequni IN INTEGER                   --Numero Sequencia
                                        ,pr_cdcoptfn IN INTEGER                   --Cooperativa transf.
                                        ,pr_nrterfin IN INTEGER                   --Numero terminal
										,pr_flmobile IN INTEGER                   --Indicador Mobile
										,pr_idtipcar IN INTEGER                   --Indicador Tipo Cartão Utilizado
										,pr_nrcartao IN NUMBER                    --Numero Cartao																				
                                        ,pr_dsprotoc OUT crappro.dsprotoc%TYPE    --Descricao protocolo
                                        ,pr_nrdocmto OUT NUMBER                   --Numero documento Debito
                                        ,pr_nrdoccre OUT NUMBER                   --Numero documento Credito
                                        ,pr_nrdoctar OUT NUMBER                   --Numero TAR
                                        ,pr_cdcritic OUT INTEGER                  --Codigo do erro
                                        ,pr_dscritic OUT VARCHAR2);               --Descricao do erro

  /* Gerar relatorio agendamentos da internet - crrl482 */
  PROCEDURE pc_gera_relatorio_debnet ( pr_cdcooper    IN crapcop.cdcooper%TYPE       --Cooperativa
                                      ,pr_cdprogra    IN crapprg.cdprogra%TYPE       --Codigo do Programa
                                      ,pr_tab_agendto IN PAGA0001.typ_tab_agendto    --Tabela de memoria com os agendamentos
                                      ,pr_rw_crapdat  IN BTCH0001.cr_crapdat%ROWTYPE --Registro de Data
                                      ,pr_nmrelato    OUT VARCHAR2                   --Nome do relatorio gerado
                                      ,pr_cdcritic    OUT INTEGER                    --Codigo do erro
                                      ,pr_dscritic    OUT VARCHAR2);                 --Descricao do erro

  /* Gerar relatorio agendamentos da internet - crrl482 */
  PROCEDURE pc_gera_relatorio (pr_cdcooper    IN crapcop.cdcooper%TYPE       --Cooperativa
                              ,pr_cdprogra    IN crapprg.cdprogra%TYPE       --Codigo do Programa
                              ,pr_tab_agendto IN PAGA0001.typ_tab_agendto    --Tabela de memoria com os agendamentos
                              ,pr_rw_crapdat  IN BTCH0001.cr_crapdat%ROWTYPE --Registro de Datas
                              ,pr_cdcritic    OUT INTEGER                    --Codigo do erro
                              ,pr_dscritic    OUT VARCHAR2);                 --Descricao do erro

  /* Funcao para buscar a data do dia */
  FUNCTION fn_busca_datdodia (pr_cdcooper IN crapcop.cdcooper%type) RETURN DATE;

  /* Procedure para Efetuar lancamentos da baixa de titulo que esta em emprestimo */
  PROCEDURE pc_baixa_epr_titulo (pr_cdcooper IN INTEGER  --Codigo Cooperativa
                                ,pr_cdagenci IN INTEGER  --Codigo Agencia
                                ,pr_nrdcaixa IN INTEGER  --Numero do Caixa
                                ,pr_cdoperad IN VARCHAR2 --Codigo Operador
                                ,pr_nrdconta IN INTEGER  --Numero da Conta
                                ,pr_idseqttl IN INTEGER  --Sequencial do Titular
                                ,pr_idorigem IN INTEGER  --Identificador Origem pagamento
                                ,pr_nmdatela IN VARCHAR2 --Nome do programa chamador
                                ,pr_dtmvtolt IN DATE     --Data do Movimento
                                ,pr_nrctremp IN INTEGER  --Numero Contrato Emprestimo
                                ,pr_nrctasac IN INTEGER  --Numero da Conta do Sacado
                                ,pr_nrboleto IN INTEGER  --Numero do Boleto
                                ,pr_dtvencto IN DATE     --Data Vencimento
                                ,pr_vlboleto IN NUMBER   --Valor boleto
                                ,pr_vllanmto IN NUMBER   --Valor Lancamento
                                ,pr_flgerlog IN BOOLEAN  --Gerar erro log
                                ,pr_tab_erro OUT GENE0001.typ_tab_erro --Tabela de erro
                                ,pr_cdcritic OUT INTEGER --Codigo de erro
                                ,pr_dscritic OUT VARCHAR2); --Retorno de Erro

  /* Procedure para processar liquidacao de titulos */
  PROCEDURE pc_processa_liquidacao (pr_idtabcob IN ROWID    --Rowid da Cobranca
                                   ,pr_nrnosnum IN VARCHAR2 --Nosso Numero
                                   ,pr_nrispbpg IN INTEGER DEFAULT 99999999  --Numero ISPB do pagador
                                   ,pr_cdbanpag IN INTEGER  --Codigo banco pagamento
                                   ,pr_cdagepag IN INTEGER  --Codigo Agencia pagamento
                                   ,pr_vltitulo IN NUMBER   --Valor do titulo
                                   ,pr_vlliquid IN NUMBER   --Valor Liquidacao
                                   ,pr_vlrpagto IN NUMBER   --Valor pagamento
                                   ,pr_vlabatim IN NUMBER   --Valor abatimento
                                   ,pr_vldescto IN NUMBER   --Valor desconto
                                   ,pr_vlrjuros IN NUMBER   --Valor juros
                                   ,pr_vloutdeb IN NUMBER   --Valor saida debito
                                   ,pr_vloutcre IN NUMBER   --Valor saida credito
                                   ,pr_dtocorre IN DATE     --Data Ocorrencia
                                   ,pr_dtcredit IN DATE     --Data Credito
                                   ,pr_cdocorre IN INTEGER  --Codigo Ocorrencia
                                   ,pr_dsmotivo IN VARCHAR2 --Descricao Motivo
                                   ,pr_dtmvtolt IN DATE     --Data movimento
                                   ,pr_cdoperad IN VARCHAR2 --Codigo Operador
                                   ,pr_indpagto IN INTEGER  --Indicador pagamento /* 0-COMPE 1-Caixa On-Line 3-Internet 4-TAA */
                                   ,pr_inestcri IN INTEGER DEFAULT 0 --Estado crise
                                   ,pr_ret_nrremret OUT INTEGER --Numero remetente
                                   ,pr_nmtelant IN VARCHAR2 DEFAULT NULL -- somente para COMPEFORA
                                   ,pr_cdcritic OUT INTEGER --Codigo Critica
                                   ,pr_dscritic OUT VARCHAR2 --Descricao Critica
                                   ,pr_tab_lcm_consolidada IN OUT PAGA0001.typ_tab_lcm_consolidada --Tabela lancamentos consolidada
                                   ,pr_tab_descontar       IN OUT PAGA0001.typ_tab_titulos);     --Tabela de titulos descontar

  /* Procedure para realizar lancamento na conta do cooperado */
  PROCEDURE pc_realiza_lancto_cooperado (pr_cdcooper IN INTEGER --Codigo Cooperativa
                                        ,pr_dtmvtolt IN DATE    --Data Movimento
                                        ,pr_cdagenci IN INTEGER --Codigo Agencia
                                        ,pr_cdbccxlt IN INTEGER --Codigo banco caixa
                                        ,pr_nrdolote IN INTEGER --Numero do Lote
                                        ,pr_cdpesqbb IN VARCHAR2 --Codigo Pesquisa
                                        ,pr_tab_lcm_consolidada IN PAGA0001.typ_tab_lcm_consolidada --Tabela lancamentos consolidada
                                        ,pr_cdcritic OUT INTEGER --Codigo Critica
                                        ,pr_dscritic OUT VARCHAR2); --Descricao Critica

  /* Procedure para Criar log de Cobranca */
  PROCEDURE pc_cria_log_cobranca(pr_idtabcob IN ROWID       --ROWID da Cobranca
                                ,pr_cdoperad IN VARCHAR2    --Operador
                                ,pr_dtmvtolt IN DATE        --Data movimento
                                ,pr_dsmensag IN VARCHAR2    --Descricao Mensagem
                                ,pr_des_erro OUT VARCHAR2   --Indicador erro
                                ,pr_dscritic OUT VARCHAR2); --Descricao erro

  /* Procedure para debitar os agendamentos de pagamentos */
  PROCEDURE pc_debita_agendto_pagto  (pr_cdcooper IN crapcop.cdcooper%TYPE   --Codigo Cooperativa
                                     ,pr_cdagenci IN crapage.cdagenci%TYPE   --Codigo Agencia
                                     ,pr_nrdcaixa IN craplot.nrdcaixa%TYPE   --Numero Caixa
                                     ,pr_cdoperad IN crapope.cdoperad%TYPE   --Operador
                                     ,pr_nmdatela IN craptel.nmdatela%TYPE   --Nome programa
                                     ,pr_idorigem IN INTEGER                 --origem (TAA ou Internet)
                                     ,pr_dtmvtolt IN crapdat.dtmvtolt%TYPE   --Data pagamento
                                     ,pr_inproces IN crapdat.inproces%TYPE   --Indicador Processo
                                     ,pr_flsgproc IN PLS_INTEGER             --Flag segundo processamento
                                     ,pr_craplau_progress_recid IN NUMBER    --Recid lancamento automatico
                                     ,pr_cdcritic OUT INTEGER      --Codigo da Critica
                                     ,pr_dscritic OUT VARCHAR2);  --Descricao da critica);



  /* Procedure para processar liquidacao de titulos apos baixa */
  PROCEDURE pc_proc_liquid_apos_baixa (pr_idtabcob IN ROWID    --Rowid da Cobranca
                                      ,pr_nrnosnum IN VARCHAR2 --Nosso Numero
                                      ,pr_nrispbpg IN INTEGER DEFAULT 99999999  --Numero ISPB do pagador
                                      ,pr_cdbanpag IN INTEGER  --Codigo banco pagamento
                                      ,pr_cdagepag IN INTEGER  --Codigo Agencia pagamento
                                      ,pr_vltitulo IN NUMBER   --Valor do titulo
                                      ,pr_vlliquid IN NUMBER   --Valor Liquidacao
                                      ,pr_vlrpagto IN NUMBER   --Valor pagamento
                                      ,pr_vlabatim IN NUMBER   --Valor abatimento
                                      ,pr_vldescto IN NUMBER   --Valor desconto
                                      ,pr_vlrjuros IN NUMBER   --Valor juros
                                      ,pr_vloutdeb IN NUMBER   --Valor saida debito
                                      ,pr_vloutcre IN NUMBER   --Valor saida credito
                                      ,pr_dtocorre IN DATE     --Data Ocorrencia
                                      ,pr_dtcredit IN DATE     --Data Credito
                                      ,pr_cdocorre IN INTEGER  --Codigo Ocorrencia
                                      ,pr_dsmotivo IN VARCHAR2 --Descricao Motivo
                                      ,pr_dtmvtolt IN DATE     --Data movimento
                                      ,pr_cdoperad IN VARCHAR2 --Codigo Operador
                                      ,pr_indpagto IN INTEGER  --Indicador pagamento /* 0-COMPE 1-Caixa On-Line 3-Internet 4-TAA */
                                      ,pr_inestcri IN INTEGER DEFAULT 0 --Estado crise
                                      ,pr_ret_nrremret OUT INTEGER --Numero remetente
                                      ,pr_cdcritic OUT INTEGER --Codigo Critica
                                      ,pr_dscritic OUT VARCHAR2 --Descricao Critica
                                      ,pr_tab_lcm_consolidada IN OUT PAGA0001.typ_tab_lcm_consolidada); --Tabela lancamentos consolidada



  /* Procedure para gerar arquivo para Cooperado */
  PROCEDURE pc_gera_arq_cooperado (pr_cdcooper IN crapcop.cdcooper%TYPE   --Codigo Cooperativa
                                  ,pr_nrcnvcob IN crapcob.nrcnvcob%TYPE   --Numero Convenio
                                  ,pr_nrdconta IN crapcob.nrdconta%TYPE   --Numero da Conta
                                  ,pr_dtmvtolt IN crapdat.dtmvtolt%TYPE   --Data pagamento
                                  ,pr_idorigem IN INTEGER                 --Identificador Origem
                                  ,pr_flgproce IN INTEGER                 --Flag Processo
                                  ,pr_cdprogra IN crapprg.cdprogra%TYPE   --Nome Programa
                                  ,pr_tab_arq_cobranca  OUT PAGA0001.typ_tab_arq_cobranca --Tabela Cobranca
                                  ,pr_cdcritic OUT INTEGER                --Codigo da Critica
                                  ,pr_dscritic OUT VARCHAR2);             --Descricao da critica

  /* Procedure para Gerar arquivo para cooperado paralelamente */
  PROCEDURE pc_gera_arq_cooperad_par(pr_cdcooper IN crapcop.cdcooper%TYPE   --Codigo Cooperativa
                                    ,pr_nrcnvcob IN crapcob.nrcnvcob%TYPE   --Numero Convenio
                                    ,pr_nrdconta IN crapcob.nrdconta%TYPE   --Numero da Conta
                                    ,pr_idparale IN NUMBER                  --Indicador de processo paralelo
                                    ,pr_idprogra IN NUMBER                  --Id da execução unica
                                    ,pr_dtmvtolt IN crapdat.dtmvtolt%TYPE   --Data pagamento
                                    ,pr_idorigem IN INTEGER                 --Identificador Origem
                                    ,pr_flgproce IN INTEGER                 --Flag Processo
                                    ,pr_cdprogra IN crapprg.cdprogra%TYPE   --Nome Programa
                                    ,pr_cdcritic OUT INTEGER                --Codigo da Critica
                                    ,pr_dscritic OUT VARCHAR2);             --Descricao da critica

  /* Procedure para gerar arquivo para Cooperado. Irá apenas chamar a rotina pc_gera_arq_cooperado */
  PROCEDURE pc_gera_arq_cooperado_car(pr_cdcooper IN crapcop.cdcooper%TYPE   --Codigo Cooperativa
                                     ,pr_nrcnvcob IN crapcob.nrcnvcob%TYPE   --Numero Convenio
                                     ,pr_nrdconta IN crapcob.nrdconta%TYPE   --Numero da Conta
                                     ,pr_dtmvtolt IN crapdat.dtmvtolt%TYPE   --Data pagamento
                                     ,pr_idorigem IN INTEGER                 --Identificador Origem
                                     ,pr_flgproce IN INTEGER                 --Flag Processo
                                     ,pr_cdprogra IN crapprg.cdprogra%TYPE   --Nome Programa
                                     ,pr_nmdcampo OUT VARCHAR2               --Nome do Campo
                                     ,pr_des_erro OUT VARCHAR2               --Saida OK/NOK
                                     ,pr_clob_ret OUT CLOB                   --Tabela arquivo cobranca
                                     ,pr_cdcritic OUT PLS_INTEGER            --Codigo Erro
                                     ,pr_dscritic OUT VARCHAR2);           --Descricao Erro

  /* Procedure para gerar lancamento das tarifas */
  PROCEDURE pc_efetua_lancto_tarifas_lat (pr_cdcooper  IN crapcop.cdcooper%type   --Codigo Cooperativa
                                         ,pr_dtmvtolt  IN crapdat.dtmvtolt%TYPE   --Data pagamento
                                         ,pr_tab_lat_consolidada   IN OUT PAGA0001.typ_tab_lat_consolidada --Tabela tarifas
                                         ,pr_cdcritic  OUT INTEGER                --Codigo da Critica
                                         ,pr_dscritic  OUT VARCHAR2);             --Descricao da critica

  /* Procedure para gerar motivos de ocorrencia  */
  PROCEDURE pc_proc_motivos_retorno (pr_idtabcob IN ROWID       --Rowid da cobranca
                                    ,pr_cdocorre IN INTEGER     --Codigo Ocorrencia
                                    ,pr_dsmotivo IN VARCHAR2    --Descricao Motivo
                                    ,pr_dtmvtolt IN DATE        --Data Movimentacao
                                    ,pr_cdoperad IN VARCHAR2    --Codigo Operador
                                    ,pr_cdcritic OUT INTEGER    --Codigo Critica
                                    ,pr_dscritic OUT VARCHAR2); --Descricao Critica

  /* Procedure para preparar a remessa para banco */
  PROCEDURE pc_prep_remessa_banco (pr_cdcooper IN crapcob.cdcooper%TYPE  --Codigo Cooperativa
                                  ,pr_nrcnvcob IN crapcob.nrcnvcob%TYPE  --Numero Convenio
                                  ,pr_dtmvtolt IN crapdat.dtmvtolt%TYPE  --Data movimento
                                  ,pr_cdoperad IN crapope.cdoperad%TYPE  --Codigo Operador
																	,pr_idregcob IN ROWID DEFAULT '0'      --ROWID da cobranca
                                  ,pr_nrremret OUT INTEGER               --Numero Remessa Retorno
                                  ,pr_rowid_ret OUT ROWID                --ROWID Remessa Retorno
                                  ,pr_nrseqreg OUT INTEGER               --Numero Sequencial
                                  ,pr_cdcritic OUT INTEGER               --Codigo Critica
                                  ,pr_dscritic OUT VARCHAR2);            --Descricao Critica

  /* Procedure para criar tabela remessa */
  PROCEDURE pc_cria_tab_remessa (pr_idregcob IN ROWID            --ROWID da cobranca
                                ,pr_nrremret IN INTEGER          --Numero Remessa
                                ,pr_nrseqreg IN INTEGER          --Numero Sequencial
                                ,pr_cdocorre IN INTEGER          --Codigo Ocorrencia
                                ,pr_cdmotivo IN VARCHAR2              --Codigo Motivo
                                ,pr_dtdprorr IN DATE                  --Data Prorrogacao
                                ,pr_vlabatim IN NUMBER                --Valor Abatimento
                                ,pr_cdoperad IN crapope.cdoperad%TYPE --Codigo Operador
                                ,pr_dtmvtolt IN crapdat.dtmvtolt%TYPE --Data Movimento
                                ,pr_cdcritic OUT INTEGER              --Codigo Critica
                                ,pr_dscritic OUT VARCHAR2);           --Descricao Critica

								  
  /* Procedure que gera dados para tt-lcm-consolidada  */
  PROCEDURE pc_prep_tt_lcm_consolidada (pr_idtabcob IN ROWID       -- ROWID da cobranca
                                       ,pr_cdocorre IN INTEGER     -- Codigo Ocorrencia
                                       ,pr_tplancto IN VARCHAR     -- Tipo Lancamento
                                       ,pr_vltarifa IN NUMBER      -- Valor Tarifa
                                       ,pr_cdhistor IN INTEGER     -- Codigo Historico
                                       ,pr_cdmotivo IN craptar.cdmotivo%TYPE --Codigo motivo
                                       ,pr_tab_lcm_consolidada IN OUT PAGA0001.typ_tab_lcm_consolidada
                                       ,pr_cdcritic OUT INTEGER    -- Codigo Critica
                                       ,pr_dscritic OUT VARCHAR2); -- Descricao Critica

  /* Procedure que prepara retorno para cooperado  */
  PROCEDURE pc_prep_retorno_cooperado (pr_idregcob IN ROWID      --ROWID da cobranca
                                      ,pr_cdocorre IN INTEGER    --Codigo Ocorrencia
                                      ,pr_dsmotivo IN VARCHAR    --Descricao Motivo
                                      ,pr_dtmvtolt IN DATE       --Data Movimento
                                      ,pr_cdoperad IN VARCHAR2   --Codigo Operador
                                      ,pr_nrremret OUT INTEGER   --Numero Remessa
                                      ,pr_cdcritic OUT INTEGER   --Codigo Critica
                                      ,pr_dscritic OUT VARCHAR2);--Descricao Critica

                                       
  /* Procedure para gravar retorno */
  PROCEDURE pc_grava_retorno (pr_cdcooper IN INTEGER                    --Codigo Cooperativa
                             ,pr_nrcnvcob IN INTEGER                    --Numero Convenio Cobranca
                             ,pr_nrdconta IN INTEGER                    --Numero da Conta
                             ,pr_nrdocmto IN NUMBER                     --Numero documento
                             ,pr_nrnosnum IN VARCHAR2                   --Nosso Numero
                             ,pr_cdocorre IN INTEGER                    --Codigo Ocorrencia
                             ,pr_dsmotivo IN VARCHAR2                   --Descricao Motivo
                             ,pr_nrremret IN INTEGER                    --Numero remessa retorno
                             ,pr_nrseqreg IN INTEGER                    --Sequencial do registro
                             ,pr_nrispbrc IN NUMBER DEFAULT 99999999    --Numero ISPB do recebedor
                             ,pr_cdbcorec IN INTEGER                    --Codigo banco recebedor
                             ,pr_cdagerec IN INTEGER                    --Codigo Agencia recebedora
                             ,pr_cdbcocor IN INTEGER                    --Codigo Banco
                             ,pr_nrretcoo IN INTEGER                    --Numero retorno cooperativa
                             ,pr_dtcredit IN DATE                       --Data Credito
                             ,pr_flcredit IN BOOLEAN                    --Flag Creditado
                             ,pr_vlabatim IN NUMBER                     --Valor abatimentos
                             ,pr_vldescto IN NUMBER                     --Valor descontos
                             ,pr_vljurmul IN NUMBER                     --Valor Juros
                             ,pr_vloutcre IN NUMBER                     --Valor saida credito
                             ,pr_vloutdes IN NUMBER                     --Valor saida debito
                             ,pr_vlrliqui IN NUMBER                     --Valor liquidacao
                             ,pr_vlrpagto IN NUMBER                     --Valor Pagamento
                             ,pr_vltarifa IN NUMBER                     --Valor tarifa
                             ,pr_vltitulo IN NUMBER                     --Valor titulo
                             ,pr_cdoperad IN VARCHAR2                   --Codigo operador
                             ,pr_dtmvtolt IN DATE                       --Data Movimento
                             ,pr_dtocorre IN DATE                       --Data Ocorrencia
                             ,pr_inestcri IN INTEGER DEFAULT 0          --Estado crise
                             ,pr_cdcritic OUT INTEGER                   --Codigo erro
                             ,pr_dscritic OUT VARCHAR2);                --Descricao erro

  /* Procedure para processar solicitação de envio da jdda */
  PROCEDURE pc_processa_crapdda ( pr_dscritic  OUT VARCHAR2);           --Descricao da critica

  PROCEDURE pc_valores_a_creditar(pr_cdcooper IN crapcco.cdcooper%TYPE
                                 ,pr_nrcnvcob IN crapcco.nrconven%TYPE
                                 ,pr_dtmvtolt IN crapdat.dtmvtolt%TYPE
                                 ,pr_dtcredit IN crapret.dtcredit%TYPE
                                 ,pr_idtabcob IN ROWID
                                 ,pr_tab_lcm_consolidada IN OUT PAGA0001.typ_tab_lcm_consolidada -- Tabela lancamentos consolidada
                                 ,pr_cdprogra IN crapprg.cdprogra%TYPE  -- Nome Programa
                                 ,pr_nmtelant IN VARCHAR2 DEFAULT NULL -- somente para COMPEFORA
                                 ,pr_cdcritic OUT INTEGER               -- Codigo da Critica
                                 ,pr_dscritic OUT VARCHAR2);            -- Descricao da critica

  /* Procedure para debitar lancamentos de convenios CECRED */
  PROCEDURE pc_debita_convenio_cecred (pr_cdcooper IN crapcop.cdcooper%TYPE   --Codigo Cooperativa
                                      ,pr_cdagenci IN crapage.cdagenci%TYPE   --Codigo Agencia
                                      ,pr_nrdcaixa IN craplot.nrdcaixa%TYPE   --Numero Caixa
                                      ,pr_cdoperad IN crapope.cdoperad%TYPE   --Operador
                                      ,pr_nmdatela IN craptel.nmdatela%TYPE   --Nome programa
                                      ,pr_idorigem IN INTEGER                 --origem (TAA ou Internet)
                                      ,pr_dtmvtolt IN crapdat.dtmvtolt%TYPE   --Data pagamento
                                      ,pr_inproces IN crapdat.inproces%TYPE   --Indicador Processo
                                      ,pr_craplau_progress_recid IN NUMBER    --Recid lancamento automático
                                      ,pr_cdcritic OUT INTEGER      --Codigo da Critica
                                      ,pr_dscritic OUT VARCHAR2); -- Descricao da critica


  PROCEDURE pc_prepara_retorno_cooperativa (pr_idtabcob IN ROWID    --ROWID da cobranca
                                           ,pr_dtmvtolt IN DATE     --Data Movimento
                                           ,pr_dtocorre IN DATE     --Data Ocorrencia
                                           ,pr_cdoperad IN VARCHAR2 --Codigo Operador
                                           ,pr_vlabatim IN NUMBER   --Valor Abatimento
                                           ,pr_vldescto IN NUMBER   --Valor Desconto
                                           ,pr_vljurmul IN NUMBER   --Valor juros multa
                                           ,pr_vlrpagto IN NUMBER   --Valor pagamento
                                           ,pr_vltarifa IN NUMBER DEFAULT 0  --Valor tarifa
                                           ,pr_vloutcre IN NUMBER DEFAULT 0 --Valor outros creditos
																					 ,pr_vloutdes IN NUMBER DEFAULT 0 -- Valor de outras despesas
                                           ,pr_flgdesct IN BOOLEAN  --Flag para titulo descontado
                                           ,pr_flcredit IN BOOLEAN  --Flag credito já efetuado
                                           ,pr_nrretcoo IN NUMBER   --Numero Retorno Cooperativa
                                           ,pr_cdmotivo IN VARCHAR  --Codigo Motivo
                                           ,pr_cdocorre IN INTEGER  --Codigo Ocorrencia
                                           ,pr_nrispbpg IN INTEGER DEFAULT 99999999  --Numero ISPB do pagador
                                           ,pr_cdbanpag IN INTEGER  --Codigo banco pagamento
                                           ,pr_cdagepag IN INTEGER  --Codigo Agencia pagamento
                                           ,pr_inestcri IN INTEGER DEFAULT 0 --Estado crise
                                           ,pr_cdcritic OUT INTEGER --Codigo Critica
                                           ,pr_dscritic OUT VARCHAR2);

										    
										    
  /* Procedure para obter agendamento debitos */
  PROCEDURE pc_PAGA0001_obtem_agen_deb (pr_cdcooper  IN crapcop.cdcooper%TYPE -- Cooperativa
                                       ,pr_dtmvtopg  IN crapdat.dtmvtolt%TYPE -- Data de pagamento
                                       ,pr_inproces  IN crapdat.inproces%TYPE -- Indicador processo
                                       ,pr_clobxmlc OUT CLOB                  -- XML com informações dos agendamentos
                                       ,pr_cdcritic OUT INTEGER               -- Codigo da Critica
                                       ,pr_dscritic OUT VARCHAR2);            -- Descricao da critica

  /* Procedure para efetuar debitos de agendamentos */
  PROCEDURE pc_PAGA0001_efetua_debitos (pr_cdcooper  IN crapcop.cdcooper%TYPE -- Cooperativa
                                       ,pr_cdprogra  IN crapprg.cdprogra%TYPE -- Codigo programa
                                       ,pr_dtmvtopg  IN crapdat.dtmvtolt%TYPE -- Data Pagamento
                                       ,pr_inproces  IN crapdat.inproces%TYPE -- Indicador processo
                                       ,pr_flsgproc  IN INTEGER               -- Flag segundo processamento
                                       ,pr_nmrelato OUT VARCHAR2              -- Nome do relatorio gerado
                                       ,pr_cdcritic OUT INTEGER               -- Codigo da Critica
                                       ,pr_dscritic OUT VARCHAR2);            -- Descricao da critica
                                  
  /* Procedure para debitar os agendamentos de TED */
  PROCEDURE pc_debita_agendto_ted (pr_cdcooper IN crapcop.cdcooper%TYPE   --Codigo Cooperativa
                                  ,pr_cdagenci IN crapage.cdagenci%TYPE   --Codigo Agencia
                                  ,pr_nrdcaixa IN craplot.nrdcaixa%TYPE   --Numero Caixa
                                  ,pr_cdoperad IN crapope.cdoperad%TYPE   --Operador
                                  ,pr_nmdatela IN craptel.nmdatela%TYPE   --Nome programa
                                  ,pr_idorigem IN INTEGER                 --origem (TAA ou Internet)
                                  ,pr_dtmvtolt IN crapdat.dtmvtolt%TYPE   --Data pagamento
                                  ,pr_inproces IN crapdat.inproces%TYPE   --Indicador Processo
                                  ,pr_flsgproc IN BOOLEAN                 --Flag segundo processamento
                                  ,pr_cdtiptra IN INTEGER                 --Codigo tipo transferencia
                                  ,pr_craplau_progress_recid IN NUMBER    --Recid lancamento automático
								  ,pr_execucao IN INTEGER DEFAULT 0       --Ordem de execução no dia
                                  ,pr_cdcritic OUT INTEGER      --Codigo da Critica
                                  ,pr_dscritic OUT VARCHAR2);

  -- Controla Controla log em banco de dados - 15/12/2017 - Chamado 779415  
  PROCEDURE pc_controla_log_programa( pr_cdcooper       IN NUMBER   DEFAULT NULL -- Código da cooperativa
                                     ,pr_dstiplog       IN VARCHAR2 -- Tipo de Log
                                     ,pr_tpocorrencia   IN NUMBER   DEFAULT NULL -- 1-Erro de negocio/ 2-Erro nao tratado/ 3-Alerta/ 4-Mensagem
                                     ,pr_cdmensagem     IN NUMBER   DEFAULT NULL -- Codigo do Log
                                     ,pr_dsmensagem     IN VARCHAR2 DEFAULT NULL -- Descrição do Log
                                     ,pr_cdprograma     IN VARCHAR2 DEFAULT 'PAGA0001'
                                     ,pr_tpexecucao     IN NUMBER DEFAULT 0 -- 0-Outro/ 1-Batch/ 2-Job/ 3-Online
                                     ,pr_cdcriticidade  IN tbgen_prglog_ocorrencia.cdcriticidade%type DEFAULT 2 -- Nivel criticidade (0-Baixa/ 1-Media/ 2-Alta/ 3-Critica)                                      
                                      ); 
                                       
  /* Procedure para cancelar agendamentos pendentes apos termino do ciclo de pagamento dos agentamentos */
  PROCEDURE pc_PAGA0001_cancela_debitos (pr_cdcooper IN crapcop.cdcooper%TYPE
                                        ,pr_dtmvtopg  IN crapdat.dtmvtolt%TYPE --> Data Pagamento
                                        ,pr_cdcritic OUT INTEGER               --> Codigo da Critica
                                        ,pr_dscritic OUT VARCHAR2);                                                                      
END PAGA0001;
/
CREATE OR REPLACE PACKAGE BODY CECRED.PAGA0001 AS

/* ---------------------------------------------------------------------------------------------------------------
  --
  --  Programa : PAGA0001
  --  Sistema  : Procedimentos para o debito de agendamentos feitos na Internet
  --  Sigla    : CRED
  --  Autor    : Alisson C. Berrido - Amcom
  --  Data     : Junho/2013.                   Ultima atualizacao: 11/03/2019
  --
  -- Dados referentes ao programa:
  --
  -- Frequencia: -----
  -- Objetivo  : Procedimentos para agendamentos na Internet
  --
  -- Alteracoes: 31/01/2014 - Alterar Rowid pelo Progress Recid (Gabriel)
  --
  --             08/05/2014 - Alterado a passagem de parametro na procedure
  --                          pc_grava_retorno para passar o banco e a agencia
  --                          de onde o titulo foi pago (para os parametros:
  --                          pr_cdbcorec e pr_cdagerec). Anteriormente buscava
  --                          o banco e a agencia cadastrados na crapcop. (Fabricio)
  --             26/06/2014 - Alterado na procedure gera_relatorio para quando o
  --                          processo não estiver rodando o nome do relatorio seja
  --                          crrl483_time.lst (Tiago/Aline)
  --             17/07/2014 - Adicionado procedure pc_verifica_situacao_transacao para
  --                          validar se exitem transacoes que nao podem mais ser aprovadas.
  --                          (Douglas - Chamado 178989)
  --             25/07/2014 - Ao efetuar uma transferencia efetuada no TAA e verificar que não
  --                          havia saldo o suficiente para a operação, um raise era levantado,
  --                          quando apenas uma flag deveria ser marcada, para que a rotina de transferencias
  --                          tivesse o mesmo comportamento do pagamento de titulos.
  --                          ao levantar a exceção, o rollback era feito e o insitlau não era atualizado.
  --                          (Douglas/Thiago Rodrigues - Chamado 179602)
  --
  --             07/08/2014 - Implementado ajusta para migracao da Concredi -> Viacredi, na procedure
  --                          pc_obtem_agend_debitos (Jean Michel).
  -- 
  --             03/09/2014 - Alteração na pc_verifica_convenio para apenas validar
  --                          código de barras caso seja inclusão de Débito
  --                          Automático (Lucas Lunelli - Projeto Débito Fácil)
  --                          Liberação Outubro/2014.
  --
  --             03/09/2014 - Inclusao rotinas projeto Float (Daniel).
  --
  --             03/09/2014 - Inclusao de tratamento para migracao de cooperativas
  --                          na procedure pc_obtem_agend_debitos e retirado leitura
  --                          da tabela craptco da procedure pc_executa_transferencia,
  --                          nova condicao pc_verifica_convenio e pc_verifica_titulo
  --                          (Jean Michel).
  --
  --             03/09/2014 - Alterar o valor passado para o parametro par_vlrliqui,
  --                          na chamada da rotina pc_grava_retorno, pois está sendo
  --                          gravado o valor incorreto para o campo crapret.vlrliqui
  --                          ( SD 183392 - Renato - Supero )
  --
  --             19/09/2014 - Adicionado parametros de saida pr_msgofatr e pr_cdempcon
  --                          na procedure pc_paga_convenio.
  --                          (Debito Automatico Facil) - (Fabricio)
  --
  --        03/12/2014 - Inclusao da chamada do solicita_baixa_automatica (Guilherme/SUPERO)
  --
  --        04/12/2014 - De acordo com a circula 3.656 do Banco Central,substituir
  --                     nomenclaturas Cedente por Beneficiário e  Sacado por Pagador
  --                      Chamado 229313 (Jean Reddiga - RKAM).
  --
  --        06/01/2015 - Adicionado o parametro pr_cdmotivo para procedure pc_prep_tt_lcm_consolidada
  --                     e ajustado os pontos onde chamava esta procedure para passar o parametro
  --                     SD 240100 (Tiago/Rodrigo).
  --
  --        15/01/2015 - Tratamento para considerar os lancamentos de debitos de
  --                     convenios CECRED (apenas quando o processo nao estiver
  --                     rodando) - procedure pc_obtem_agend_debitos.
  --                     (Chamado 229249 # PRJ Melhoria) - (Fabricio)
  --
  --        10/02/2015 - Criação de mensagem de notificação no internetbank ao gerar
  --                     crítica de insuficiência de saldo para débito (Agend./Pagam./Transf.) (Lunelli - SD. 229251)
  --
  --        27/03/2015 - Ajuste retorno das informacoes no momento de criacao do lote;
  --                     procedure pc_debita_convenio_cecred (pos-liberacao). (Fabrício)
  --
  --        30/03/2015 - Correção no formato de data das mensagens enviadas por
  --                     crítica de insuficiência de saldo para débito (Lunelli - SD. 267208)
  --
  --        30/03/2015 - Alterado na leitura da craplau para quando for
  --                     Debito automatico (DEBAUT), buscar as datas de
  --                     pagamentos tambem menores que a data atual, isto
  --                     para os casos de pagamentos com data no final de
  --                     semana. (Ajustes pos-liberacao # PRJ Melhoria) -
  --                     (Fabricio)
  --
  --        20/04/2015 - Tratamento na procedure pc_debita_convenio_cecred para
  --                     lancamentos duplicados Liberty / Unimed.
  --                     (Chamado 272543) - (Fabricio)
  --                   - Quando nao encontrar autorizacao de debito automatico
  --                     cadastrada (453), deve gerar ndb para retornar a critica
  --                     a empresa; procedure pc_debita_convenio_cecred.
  --                     (Chamado 275834) - (Fabricio)
  --
  --        06/05/2015 - Atualizada data do último débito na tabela de autorizações (crapatr)
  --                     (Lucas Lunelli - SD 256257)
  --
  --        20/05/2015 - Alterado para chamar a pc_gerar_mensagem da package GENE0003 e
  --                     não mais da própria DDDA ( Renato - Supero )
  --
  --        11/06/2015 - Ajustes na rotina de pagamentos e valores a creditar, e incluido
  --                     ocorrencias de pagto 76 e 77 (Cooperativa/EE) referente
  --                     ao projeto 219 - Cooperativa Emite e Expede (Daniel/Rafael)
  --
  --        22/07/2015 - Incluir BEGIN com EXCEPTION na conversão da vr_dttolera na
  --                     procedure  pc_verif_dias_toler_sicredi, pois caso haja erro na
  --                     conversão da data não deve fazer nada conforme fazia o programa
  --                     progress (Lucas Ranghetti #304939)
  --
  --        24/07/2015 - Ajustar a gravação da crapret para utilizar o valor de
  --                     vr_nrremrtc e vr_nrremcre na pc_prep_retorno_cooper_90
  --                     (Douglas - Chamado 310678)
  --
  --        30/07/2015 - pc_paga_titulo e pc_paga_convenio, Alterado para fazer o atualização do lote qnd for agencia = 90 Internet
  --                     que não foram feitos na cxon0014, diminuindo tempo de lock da tabela (Odirlei-Amcom)
  --
  --        10/08/2015 - Incluir regra para evitar que sejam efetivadas 2 transferencias iguais
  --                     enviadas pelo ambiente mobile (Dionathan).
  --
  --        12/08/2015 - Adicionar tratamento na pc_grava_retorno, validando o código do banco de acordo
  --                     com a avalidação realizada pela pc_processa_liquidacao, antes da chamada da
  --                     pc_prep_tt_lcm_consolidada. (Douglas - Chamado 316517)
  --
  --        13/08/2015 - Ajustar a pesquisa dos últimos três IP's utilizados para acessar o Internet bank
  --                     na pc_paga_titulo (Douglas - Chamado 313242)
  --
  --        14/08/2015 - pc_paga_titulo e pc_paga_convenio -> inclusão do parametro pr_tpcptdoc, para identificacao do tipo de captura
  --                          (leitora ou manual(linha digitavel)) (Odirlei-AMcom)
  --
  --        21/09/2015 - #321279 e #322979 Adicionado o monitoramento de fraude para pagamento de convênios.
  --                     Alterado para verificar também os pagamentos agendados pois estão ocorrendo fraudes
  --                     também por agendamento.
  --                     No e-mail, adicionado o nome do cedente para títulos e convênios.
  --                     No e-mail, adicionada a informação "Agendamento" para pagamentos agendados.
  --                     Alterado o assunto dos e-mails para diferenciar convênios de títulos pela área de
  --                     monitoração. (Carlos)
  --
  --        29/09/2015 - Ajustado para nao executar rotina de monitoracao na efetivacao do pagamento agendado
  --                     devido a perda de performace da rotina crps509 (Odirlei-AMcom)
  --
  --        29/09/2015 - Adicionar as procedures pc_PAGA0001_obtem_agen_deb e pc_PAGA0001_efetua_debitos para
  --                     a tela DEBNET (Douglas - Chamado 285228)
  --
  --        02/01/2015 - Realizar alterações referente as rotinas do GPS ( Renato - Supero )
  --
  --        04/12/2015 - Prj 131. Ajustadas procedures verifica_convenio,
  --                     verifica_titulo e paga_titulo para utilizar a nova 
  --                     estrutura de aprovação conjunta. (Reinert)  
  --
  --        21/12/2015 - Incluido verificacao de situação de transacao pendente, nas procedures
  --                     pc_debita_agendto_transf e pc_debita_agendto_pagto Prj. Assinatura Conjunta (Jean Michel).
  --
  --        22/12/2015 - Incluido campos para o relatorio crrl482 SD376916 (Odirlei-AMcom)
  --
  --        11/11/2015 - Incluido calculo de modulo 11 para geracao
  --                     de comprovante/protocolo. (Tiago/Fabricio) SD - 334427
  --
  --        30/12/2015 - Ajuste para não desconsiderar o motivo quando for
  --                     titulos do banco do brasil com ocorrencia 28
  --                     (Adriano).
  --
  --        06/01/2016 - Alterar nome do procedimento pc_gera_relatorio para evitar overlay devido
  --                     a problemas com a sincronização do schema holder (Odirlei-AMcom)             
  --
  --        11/01/2016 - Mover as procedures de execucao de instrucao de cobranca para a package COBR0007
  --                       - pc_verifica_horario_cobranca
  --                       - pc_verifica_ent_confirmada
  --                       - pc_efetua_val_recusa_padrao
  --                       - pc_verif_existencia_instruc
  --                       - pc_elimina_remessa
  --                       - pc_inst_titulo_migrado
  --                       - pc_inst_protestar
  --                       - pc_inst_pedido_baixa
  --                       - pc_inst_pedido_baixa_decurso
  --                       - pc_inst_sustar_baixar
  --                       - pc_enviar_titulo_protesto
  --                   - Mover as procedures de execucao de instrucao de cobranca para a package COBR0006
  --                       - pc_prep_retorno_cooper_90
  --                     (Douglas - Importacao de Arquivo CNAB)
  --
  --
  --        19/01/2016 - (Ajuste migracao crps123 > crps509) Incluir tratamento de debito facil 
  --                     na procedure  pc_debita_convenio_cecred (Lucas Ranghetti #388406 )
  --
  --        21/01/2016 - (Ajuste migracao crps123 > crps509) Incluir update da crapalu para o 
  --                     debito facil na procedure pc_debita_convenio_cecred (Lucas Ranghetti/Fabricio)
  --
  --        29/01/2016 - Ajuste para corrigir o problema de registros na tabela craprtc com
  --                     numero de remessa duplicados
  --                 (Adriano - SD 391157).
  --
  --        26/02/2016 - Ajuste para efetuar a atualizaçao do titulo DDA somente no final da rotina,
  --                     pois existem casos que é ocorre um erro e é efetuado rollback contudo, a situação do titulo 
  --                     já foi atulizada e enviado a JDDA.
  --                     (Adriano - SD 394710)
  --
  --        03/02/2016 - Alimentar a variavel vr_nrremrtc
  --                     (Adriano)     
  --
  --        15/02/2016 - Incluir validacao de cooperado demitido critica "64"  
  --                     na procedure pc_debita_convenio_cecred (Lucas Ranghetti #386413)
  --
  --        22/03/2016 - Ajuste na mensagem de alerta que identifica transferências duplicadas
  --                     conforme solicitado no chamado 421403. (Kelvin)            
  --
  --        29/03/2016 - Conversão da rotina pc_InternetBank23
  --                     (Adriano - M117).             
  --
  --        09/05/2016 - Ajuste para gerar log em caso de erro na chamada da rotina
  --                     pc_InternetBank23
  --                     (Adriano - M117).     
  --
  --		10/05/2016 - Ajustes devido ao projeto M118 para cadastrar o favorecido de forma automatica
  --					 (Adriano - M117).
  --
  --    12/05/2016 - Retirada a procedure pc_acesso_cadastro_fav e feito o filtro de 10 bancos mais 
  --                 utilizados, para o mobile (Carlos - M117)
  --
  --    12/05/2016 - Alterado o tipo do parametro pr_nrctatrf de integer para craplau.nrctadst no 
  --                 procedimento pc_executa_transf_intercoop (Carlos - M117)
  --
  --    16/05/2016 - Ajustes realizados:
  --                  > Ajuste para ajustar a condição que identifica o tipo de transação
  --                    e efetua a chamada da respectiva rotina de efetivação;
  --                  > Ajuste para corrigir a geração da tags "BANCOS" que estava sendo
  --                    criada em duplicidade;
  --                (Adriano - M117).        
  --
  --   18/05/2016 - Ajuste para poscionar corretamente as tags de limite na InternetBank23
  --                (Adriano - M117).
  --
  --   23/05/2016 - Retirado o uso do campo craplau.flmobile pois não existe em produção
  --	  		    (Adriano - M117).    

       27/07/2016 - Correção da forma de abertura das tags xml na rotina pc_InternetBank23;
                  - Definidos valores default (10 e espaço) para os parâmetros cdfinali e dshistor na rotina
                    CXON0020.pc_executa_envio_ted (Carlos)
      
         30/05/2016 - Alteraçoes Oferta DEBAUT Sicredi (Lucas Lunelli - [PROJ320])

       31/05/2016 - Ajuste para formatar corretamente a agencia da cooperativa
                    na tag que monta as contas destinos
                    (Adriano - M117).    
                    
       02/06/2016 - Ajsute realizados:
                     -> Ajuste para retornar as criticas nas variaveis auxliares
                        ao chamar a rotina resposável pelo débitos de agendamentos de TED
                     -> Corrigido leitura da craplau para buscar agendamentos 
                        por tipo de acordo com programa origem                        
                   (Adriano).  
                   
       06/06/2016 - Ajuste para incluir o tratamento de assinatura conjunta na rotina
                    que efetua o debito de agendamentos de TED 
                    (Adriano).                           
                    
       16/06/2016 - Ajuste para corrigir problema de sobreposição da variável vr_dscritic
                    (Adriano).
                                                                              
       07/07/2016 - Alterar parametro cdprogra para passar 'DEBNET' ao
                    inves de passar NULL na procedure pc_PAGA0001_obtem_agen_deb e
                    pc_PAGA0001_efetua_debitos (Lucas Ranghetti #483791)
                             
       15/04/2016 - Incluir validação para pacotes de tarifas na procedure
                     pc_altera_situac_trans. (Reinert)

       30/05/2016 - Alteraçoes Oferta DEBAUT Sicredi (Lucas Lunelli - [PROJ320])
       
       28/06/2016 - O corpo da mensagem está com dia e mês invertido na procedure pc_debita_agendto_pagto,
                    inserido formatação na data (Tiago/Elton SD439430) 

       01/07/2016 - Incluir critica "Lancamento ja efetivado pela DEBCON." para lancamentos 
                    ja efetuados na procedure pc_debita_convenio_cecred (Lucas Ranghetti #474938)
       07/07/2016 - Alterar parametro cdprogra para passar 'DEBNET' ao
                    inves de passar NULL na procedure pc_PAGA0001_obtem_agen_deb e
                    pc_PAGA0001_efetua_debitos (Lucas Ranghetti #483791)
					 
       15/04/2016 - Incluir validação para pacotes de tarifas na procedure
                     pc_altera_situac_trans. (Reinert)

       30/05/2016 - Alteraçoes Oferta DEBAUT Sicredi (Lucas Lunelli - [PROJ320])
       01/07/2016 - Incluir critica "Lancamento ja efetivado pela DEBCON." para lancamentos 
                    ja efetuados na procedure pc_debita_convenio_cecred (Lucas Ranghetti #474938)
       28/06/2016 - O corpo da mensagem está com dia e mês invertido na procedure pc_debita_agendto_pagto,
                    inserido formatação na data (Tiago/Elton SD439430) 

       15/07/2016 - #433568 na procedure pc_executa_transferencia da PAGA0001 permitir que se gere o 
                    protocolo para os agendamentos feitos através do TAA (Carlos)

	     18/07/2016 - Ajuste para incluir end if perdido no merge (Adriano)
                                                                              
       18/07/2016 - Tratamento para DARF/DAS na procedure pc_verifica_convenio, Prj. 338 (Jean Michel)
                                                                  
			 04/08/2016 - Alterado rotinas pc_gera_arq_coop_cnab240 e pc_gera_arq_coop_cnab400
			              para tratar envio via ftp. (Reinert)
                                                                              
       23/08/2016 - Incluir tratamento para autorizações suspensas na procedure
                    pc_debita_convenio_cecred (Lucas Ranghetti #499496)

       31/08/2016 - Removida procedure pc_verifica_sit_transacao, SD 514239 (Jean Michel).
       
       13/09/2016 - Ajuste para buscar corretamente o registro de favorecidos
                   (Adriano - SD 495293). 
                   
       21/09/2016 - #523944 Criação de log de controle de início, erros e fim de execução
                    do job pc_processa_crapdda (Carlos)
              
       21/09/2016 - Controle de Lock na tabela CRAPMVI (Dionathan)
              
       28/09/2016 - Incluir ROLLBACK TO undopoint na saida de critica da pc_insere_lote
                    na procedure pc_paga_titulo (Lucas Ranghetti #511679)   
					
       12/09/2016 - Alterações referente ao projeto 302 - Sistema de Acordos - [Renato Darosci / Supero]
                  - Inclusão na rotina pc_prep_tt_lcm_consolidada da condição para buscar a conta para pagamento 
                    de acordo referente ao sistema de Acordos 
                  - Fixar na pc_valores_a_creditar o código de histórico 2180, para os pagamentos de acordo
  
       04/11/2016 - Ajuste para tratar a terceira execucao do processo debnet M349 (Tiago/Elton) 					                   

       29/12/2016 - Tratamento Nova Plataforma de cobrança PRJ340 - NPC (Odirlei-AMcom)
       
       23/01/2017 - Ajustes para que não haja mais estouro de chave da CRAPLCM##3
                    e tratamentos de erro com rollback em alguns casos pois
                    qdo cai nessas situações algumas vezes acabava efetivando
                    o debito mesmo sem protocolo por exemplo SD590929 e SD594359
                    (Tiago/Fabricio).       
       
       17/02/2017 - Incluir chamada da rotina PGTA0001.pc_gera_retorno_tit_pago
                    conforme o programa crps509 ja faz (Lucas Ranghetti #590601) 

       22/02/2017 - Ajustes para correçao de crítica de pagamento DARF/DAS (Lucas Lunelli - P.349.2)      

       12/05/2017 - Segunda fase da melhoria 342 (Kelvin). 
       
       30/03/2017 - Incluir validacao para faturas vencidas para agendamentos conforme
                    ja faz a rotina de pagamento (Lucas Ranghetti #637996)
       05/04/2017 - Adicionado tratamento para que os boletos a serem creditados na conta da Access devem ser
                    transferidos para a conta da Acredicoop - Conforme determinação judicial
                    (Douglas- Chamado 643859)

	   04/04/2017 - Ajuste para integracao de arquivos com layout na versao 5
				    (Jonata - RKAM M311).

       12/04/2017 - Incluir validacao para faturas vencidas para agendamentos conforme
                    ja faz a rotina de pagamento PM.AGROLANDIA (Tiago #647174)			 
    
       22/05/2017 - Incluido validacao para nao agendar faturas vencidas
                    para PM.TROMBUDO CENTRAL e FMS.TROMBUDO CENTRAL
                    (Tiago/Fabricio #653830)
                    
       26/05/2017 - Incluido validacao para nao agendar faturas vencidas
                    para PM.AGROLANDIA (Tiago/Fabricio #647174)                        
                    
       08/06/2017 - Retirado "OR" por problemas na compilacao(Tiago).
       															 
       10/07/2017 - Adicionar tratamento para validar o vencimento dos tributos
                    sicredi (Lucas Ranghetti #653552)

       03/08/2017 - Incluir tratamento para atualizar a situação do lancamento para
                    4 caso a fatura ja tenha sido arrecadada  e não for no ultimo 
                    processo (Lucas Ranghetti #711123)        
                    
       02/08/2017 - Ajuste para retirar o uso de campos removidos da tabela
  		              crapass, crapttl, crapjur 
       						 (Adriano - P339).
                   
       03/10/2017 - Ajustes na  validação de pagamentos (Ricardo Linhares - prj 356.2).                   
       
       17/10/2017 - Implementação do envio de notificaões para o Cecred Mobile e novo Ibank, e alteração das chamadas
                    da gene0003.pc_gerar_mensagem para evitar redundância na busca dos titulares com acesso à internet.
                    (Pablão)
       
       25/10/2017 - Alterar o armazenamento da pr_dscritic quando encontrar erros
                    para utilizar a vr_dscritic pois no raise utilizamos o vr_dscritic
                    para gravar no pr_dscritic (Lucas Ranghetti / Fabricio)               
                    
	   07/12/2017 - Melhoria 458, incluir parametro tppagmto nas chamadas da pc_gera_titulos_iptu - Antonio R. Jr (mouts)                         
               
	   11/12/2017 - Alterar campo flgcnvsi por tparrecd.
                    PRJ406-FGTS (Odirlei-AMcom)                       
       
       12/12/2017 - Passar como texto o campo nrcartao na chamada da procedure 
                    pc_gera_log_ope_cartao (Lucas Ranghetti #810576)   
  
       15/12/2017 - Incluido nome do módulo logado
                    No caso de erro de programa gravar tabela especifica de log                     
                    Ajuste mensagem de erro
                    Mensagens fixas trocar por codigo, e cadastrar caso seja codigo novo
                   (Belli - Envolti - Chamado 779415)       
       
       14/02/2018 - Projeto Ligeirinho. Alterado para gravar na tabela de lotes (craplot) somente no final
                            da execução do CRPS509 => INTERNET E TAA. (Fabiano Girardi AMcom)        

       27/03/2018 - Ajustes referente ao PRJ352
                                     

	   27/06/2018 - Incidente INC0017437 - Ajuste no insert CRAPCRE. Inclusão de PRAGMA (Mario Bernat - AMcom)
		
	   04/07/2018 - Ajustado cursor cr_craprtc nas procedures pc_gera_arq_coop_cnab240 e pc_gera_arq_coop_cnab400
	                para poder trazer todos os titulos do dia, para gerar em um unico arquivo de retorno.
					(Alcemir Mout's) - SCTASK0010677.
								   
       03/09/2018 - Correção para remover lote (Jonata - Mouts).

     29/10/2018 - Ajuste critica/ mensagem / continuação do processo
                  ( Belli - Envolti - PRB0040400)
		
       29/05/2018 - Alteração INSERT na craplcm pela chamada da rotina LANC0001
                    PRJ450 - Renato Cordeiro (AMcom)         
		
     02/01/2019 -  sctask0041317 Retirada de variáveis e cursores não utilizados, rotinas pc_paga_convenio e 
                   pc_paga_titulo; retirada de consulta repetida da crapass, rotina pc_paga_convenio (Carlos)

     11/03/2019 - Quando der erro na rotina pc atualiza trans nao efetiv, 
                  gerar Log pois as rotinas chamadoras iram ignorar o erro.
                  (Belli - Envolti - INC0034476)
                  
  ---------------------------------------------------------------------------------------------------------------*/

  /* Cursores da Package */

  -- Busca as informações da cooperativa conectada
  CURSOR cr_crapcop(pr_cdcooper IN crapcop.cdcooper%TYPE) IS
    SELECT crapcop.cdcooper
          ,crapcop.dsdircop
          ,crapcop.cdbcoctl
          ,crapcop.cdagectl
          ,crapcop.nmrescop
          ,crapcop.vlinimon
          ,crapcop.vllmonip
          ,crapcop.nmextcop
          ,crapcop.flgofatr
    FROM crapcop crapcop
    WHERE crapcop.cdcooper = pr_cdcooper;
  rw_crapcop cr_crapcop%ROWTYPE;

  -- Busca da cooperativa conforme o código do banco
  CURSOR cr_crabcop(pr_cdagectl IN crapcop.cdagectl%TYPE) IS
    SELECT crapcop.cdcooper
          ,crapcop.dsdircop
          ,crapcop.cdbcoctl
          ,crapcop.cdagectl
          ,crapcop.nmrescop
          ,crapcop.vlinimon
          ,crapcop.vllmonip
          ,crapcop.nmextcop
          ,crapcop.flgofatr
    FROM crapcop crapcop
    WHERE crapcop.cdagectl = pr_cdagectl;

  -- Busca dos dados do associado
  CURSOR cr_crapass(pr_cdcooper IN crapcop.cdcooper%TYPE
                   ,pr_nrdconta IN crapass.nrdconta%TYPE) IS
    SELECT crapass.nrdconta
          ,crapass.nmprimtl
          ,crapass.vllimcre
          ,crapass.nrcpfcgc
          ,crapass.inpessoa
          ,crapass.cdcooper
          ,crapass.cdagenci
          ,crapass.nrctacns
          ,crapass.dtdemiss
					,crapass.idastcjt
          ,crapass.cdtipcta
    FROM crapass
    WHERE crapass.cdcooper = pr_cdcooper
    AND   crapass.nrdconta = pr_nrdconta;
  rw_crapass cr_crapass%ROWTYPE;

  --Selecionar Informacoes Agencia
  CURSOR cr_crapage (pr_cdcooper IN crapage.cdcooper%type
                    ,pr_cdagenci IN crapage.cdagenci%type) IS
    SELECT crapage.nmresage
    FROM crapage
    WHERE crapage.cdcooper = pr_cdcooper
    AND   crapage.cdagenci = pr_cdagenci;
  rw_crapage cr_crapage%ROWTYPE;

  --Selecionar dados Pessoa Juridica
  CURSOR cr_crapjur (pr_cdcooper IN crapjur.cdcooper%type
                    ,pr_nrdconta IN crapjur.nrdconta%type) IS
    SELECT crapjur.nmextttl
    FROM crapjur
    WHERE crapjur.cdcooper = pr_cdcooper
    AND   crapjur.nrdconta = pr_nrdconta;
  rw_crapjur cr_crapjur%ROWTYPE;
  --Selecionar contas migradas
  CURSOR cr_craptco (pr_cdcopant IN craptco.cdcopant%type
                    ,pr_nrctaant IN craptco.nrctaant%type
                    ,pr_tpctatrf IN craptco.tpctatrf%type) IS
    SELECT craptco.cdcopant
    FROM craptco
    WHERE craptco.cdcopant = pr_cdcopant
    AND   craptco.nrctaant = pr_nrctaant
    AND   craptco.tpctatrf = pr_tpctatrf;
  rw_craptco cr_craptco%ROWTYPE;

  --Selecionar informacoes do titular
  CURSOR cr_crapttl (pr_cdcooper IN crapttl.cdcooper%type
                    ,pr_nrdconta IN crapttl.nrdconta%type
                    ,pr_idseqttl IN crapttl.idseqttl%type) IS
    SELECT crapttl.nmextttl
          ,crapttl.nrcpfcgc
          ,crapttl.idseqttl
    FROM crapttl
    WHERE crapttl.cdcooper = pr_cdcooper
    AND   crapttl.nrdconta = pr_nrdconta
    AND   crapttl.idseqttl = pr_idseqttl;
  rw_crapttl cr_crapttl%ROWTYPE;

  --Selecionar informacoes de senhas
  CURSOR cr_crapsnh (pr_cdcooper IN crapsnh.cdcooper%type
                    ,pr_nrdconta IN crapsnh.nrdconta%type
                    ,pr_idseqttl IN crapsnh.idseqttl%type
                    ,pr_tpdsenha IN crapsnh.tpdsenha%type) IS
    SELECT crapsnh.nrcpfcgc
          ,crapsnh.cdcooper
          ,crapsnh.nrdconta
    FROM crapsnh
    WHERE crapsnh.cdcooper = pr_cdcooper
    AND   crapsnh.nrdconta = pr_nrdconta
    AND   crapsnh.idseqttl = pr_idseqttl
    AND   crapsnh.tpdsenha = pr_tpdsenha;
  rw_crapsnh cr_crapsnh%ROWTYPE;

  --Selecionar titulares com senhas ativas
  CURSOR cr_crapsnh2 (pr_cdcooper IN crapsnh.cdcooper%type
                     ,pr_nrdconta IN crapsnh.nrdconta%TYPE
                     ,pr_cdsitsnh IN crapsnh.cdsitsnh%TYPE
                     ,pr_tpdsenha IN crapsnh.tpdsenha%TYPE) IS
    SELECT crapsnh.nrcpfcgc
          ,crapsnh.cdcooper
          ,crapsnh.nrdconta
          ,crapsnh.idseqttl
    FROM crapsnh
    WHERE crapsnh.cdcooper = pr_cdcooper
    AND   crapsnh.nrdconta = pr_nrdconta
    AND   crapsnh.cdsitsnh = pr_cdsitsnh
    AND   crapsnh.tpdsenha = pr_tpdsenha;
  rw_crapsnh2 cr_crapsnh2%ROWTYPE;

	CURSOR cr_crapsnh3 (pr_cdcooper IN crapsnh.cdcooper%type
                     ,pr_nrdconta IN crapsnh.nrdconta%TYPE) IS
		SELECT crapsnh.nrcpfcgc
          ,crapsnh.cdcooper
          ,crapsnh.nrdconta
          ,crapsnh.idseqttl
		  FROM crappod, 
			     crapsnh
		 WHERE crappod.cdcooper = pr_cdcooper 
		 	 AND crappod.nrdconta = pr_nrdconta
			 AND crappod.cddpoder = 10 /* Operação de autoatendimento */
			 AND crappod.flgconju = 1 /* Assina em conjunto */
			 AND crapsnh.cdcooper = crappod.cdcooper
			 AND crapsnh.nrdconta = crappod.nrdconta
			 AND crapsnh.nrcpfcgc = crappod.nrcpfpro
       AND crapsnh.tpdsenha = 1;
	
  --Selecionar informacoes Avalista
  CURSOR cr_crapavt (pr_cdcooper IN crapavt.cdcooper%type
                    ,pr_nrdconta IN crapavt.nrdconta%type
                    ,pr_tpctrato IN crapavt.tpctrato%type
                    ,pr_nrcpfcgc IN crapavt.nrcpfcgc%type) IS
    SELECT crapavt.nrdctato
          ,crapavt.nmdavali
    FROM crapavt
    WHERE crapavt.cdcooper = pr_cdcooper
    AND   crapavt.nrdconta = pr_nrdconta
    AND   crapavt.tpctrato = pr_tpctrato
    AND   crapavt.nrcpfcgc = pr_nrcpfcgc;
  rw_crapavt cr_crapavt%ROWTYPE;

  --Selecionar informacoes da autenticacao
  CURSOR cr_crapaut (pr_rowid IN ROWID) IS
    SELECT crapaut.cdcooper
          ,crapaut.dtmvtolt
          ,crapaut.cdagenci
          ,crapaut.nrdcaixa
          ,crapaut.vldocmto
          ,crapaut.hrautent
          ,crapaut.nrsequen
          ,crapaut.cdopecxa
          ,crapaut.cdhistor
          ,crapaut.dsprotoc
          ,crapaut.nrdocmto
          ,crapaut.ROWID
    FROM crapaut
    WHERE ROWID = pr_rowid;
  rw_crapaut cr_crapaut%ROWTYPE;

  --Selecionar informacoes da autenticacao
  CURSOR cr_crapaut_sequen (pr_cdcooper IN crapaut.cdcooper%type
                           ,pr_cdagenci IN crapaut.cdagenci%type
                           ,pr_nrdcaixa IN crapaut.nrdcaixa%type
                           ,pr_dtmvtolt IN crapaut.dtmvtolt%type
                           ,pr_nrsequen IN crapaut.nrsequen%type) IS
    SELECT crapaut.cdcooper
          ,crapaut.dtmvtolt
          ,crapaut.cdagenci
          ,crapaut.nrdcaixa
          ,crapaut.vldocmto
          ,crapaut.hrautent
          ,crapaut.nrsequen
          ,crapaut.cdopecxa
          ,crapaut.cdhistor
          ,crapaut.dsprotoc
          ,crapaut.nrdocmto
          ,crapaut.ROWID
    FROM crapaut crapaut
    WHERE crapaut.cdcooper = pr_cdcooper
    AND   crapaut.cdagenci = pr_cdagenci
    AND   crapaut.nrdcaixa = pr_nrdcaixa
    AND   crapaut.dtmvtolt = pr_dtmvtolt
    AND   crapaut.nrsequen = pr_nrsequen;

  --Selecionar informacoes dos terminais
  CURSOR cr_craptfn (pr_cdcoptfn IN craptfn.cdcooper%type
                    ,pr_nrterfin IN craptfn.nrterfin%type) IS
    SELECT craptfn.nrultaut
          ,craptfn.cdcooper
          ,craptfn.cdagenci
          ,craptfn.nrterfin
          ,craptfn.cdoperad
          ,craptfn.ROWID
    FROM craptfn
    WHERE craptfn.cdcooper = pr_cdcoptfn
    AND   craptfn.nrterfin = pr_nrterfin;
  rw_craptfn cr_craptfn%ROWTYPE;

  --Selecionar informacoes dos lancamentos automaticos
  CURSOR cr_craplau (pr_progress_recid IN NUMBER) IS
    SELECT craplau.nrdconta
          ,craplau.insitlau
          ,craplau.vllanaut
          ,craplau.idseqttl
          ,craplau.dtmvtopg
          ,craplau.cddbanco
          ,craplau.cdageban
          ,craplau.nrctadst
          ,craplau.cdtiptra
          ,craplau.nrcpfope
          ,craplau.dslindig
          ,craplau.dscodbar
          ,craplau.dscedent
          ,craplau.idtitdda
          ,craplau.cdhistor
          ,craplau.nrdocmto
          ,craplau.cdseqtel
          ,craplau.cdempres
          ,craplau.cdbccxlt
          ,craplau.cdagenci
          ,craplau.nrseqdig
          ,craplau.nrdolote
          ,craplau.dtmvtolt
          ,craplau.nrdctabb
          ,craplau.nrcrcard
          ,craplau.nrseqagp
          ,craplau.flgblqdb
          ,craplau.ROWID
          ,craplau.cdcooper
          ,craplau.cdtrapen
          ,craplau.dsorigem
          ,craplau.cdcoptfn
          ,craplau.cdagetfn
          ,craplau.nrterfin
          ,craplau.nrcpfpre
          ,craplau.nmprepos
		      ,craplau.flmobile
		      ,craplau.idtipcar
		      ,craplau.nrcartao
    FROM craplau
    WHERE progress_recid = pr_progress_recid;
  rw_craplau cr_craplau%ROWTYPE;

  --Selecionar erros
  CURSOR cr_craperr (pr_cdcooper IN craperr.cdcooper%type
                    ,pr_cdagenci IN craperr.cdagenci%type
                    ,pr_nrdcaixa IN craperr.nrdcaixa%type) IS
    SELECT craperr.dscritic
          ,craperr.cdcritic
    FROM craperr craperr
    WHERE craperr.cdcooper = pr_cdcooper
    AND   craperr.cdagenci = pr_cdagenci
    AND   craperr.nrdcaixa = pr_nrdcaixa;
  rw_craperr cr_craperr%ROWTYPE;

  --Selecionar informacoes dos bancos
  CURSOR cr_crapban (pr_cdbccxlt IN crapban.cdbccxlt%type) IS
    SELECT crapban.nmresbcc
          ,crapban.nmextbcc
    FROM crapban
    WHERE crapban.cdbccxlt = pr_cdbccxlt;
  rw_crapban cr_crapban%ROWTYPE;

  --Buscar informacoes de lote
  CURSOR cr_craplot (pr_cdcooper IN craplot.cdcooper%TYPE
                    ,pr_dtmvtolt IN craplot.dtmvtolt%TYPE
                    ,pr_cdagenci IN craplot.cdagenci%TYPE
                    ,pr_cdbccxlt IN craplot.cdbccxlt%TYPE
                    ,pr_nrdolote IN craplot.nrdolote%TYPE) IS
    SELECT  craplot.cdcooper
           ,craplot.dtmvtolt
           ,craplot.nrdolote
           ,craplot.cdagenci
           ,craplot.nrseqdig
           ,craplot.cdbccxlt
           ,craplot.qtcompln
           ,craplot.tplotmov
           ,craplot.cdhistor
           ,craplot.cdoperad
           ,craplot.qtinfoln
           ,craplot.vlcompcr
           ,craplot.vlinfocr
           ,craplot.rowid
    FROM craplot craplot
    WHERE craplot.cdcooper = pr_cdcooper
    AND   craplot.dtmvtolt = pr_dtmvtolt
    AND   craplot.cdagenci = pr_cdagenci
    AND   craplot.cdbccxlt = pr_cdbccxlt
    AND   craplot.nrdolote = pr_nrdolote
    FOR UPDATE NOWAIT;
  rw_craplot cr_craplot%ROWTYPE;

  --Testar se o lote esta em lock
  CURSOR cr_craplot_rowid (pr_rowid IN ROWID) IS
    SELECT  1
    FROM craplot craplot
    WHERE craplot.rowid = pr_rowid
    FOR UPDATE NOWAIT;
  rw_craplot_rowid cr_craplot_rowid%ROWTYPE;

  --Selecionar registro cobranca
  CURSOR cr_crapcob (pr_rowid IN ROWID) IS
    SELECT  crapcob.cdcooper
           ,crapcob.nrdconta
           ,crapcob.cdbandoc
           ,crapcob.nrdctabb
           ,crapcob.nrcnvcob
           ,crapcob.nrdocmto
           ,crapcob.flgregis
           ,crapcob.flgcbdda
           ,crapcob.insitpro
           ,crapcob.nrnosnum
           ,crapcob.vltitulo
           ,crapcob.incobran
           ,crapcob.dtvencto
           ,crapcob.dsdoccop
           ,crapcob.vlabatim
           ,crapcob.vldescto
           ,crapcob.flgdprot
           ,crapcob.idopeleg
           ,crapcob.insitcrt
           ,crapcob.cdagepag
           ,crapcob.cdbanpag
           ,crapcob.cdtitprt
           ,crapcob.dtdbaixa
           ,crapcob.nrctremp
           ,crapcob.inserasa
           ,crapcob.nrdident
           ,crapcob.indpagto
           ,crapcob.rowid
		   ,crapcob.insrvprt
    FROM crapcob
    WHERE crapcob.ROWID = pr_rowid;
  rw_crapcob cr_crapcob%ROWTYPE;

  --Selecionar Cobrancas
  CURSOR cr_crapcob2 (pr_cdcooper IN crapcob.cdcooper%type
                     ,pr_cdbandoc IN crapcob.cdbandoc%TYPE
                     ,pr_nrdctabb IN crapcob.nrdctabb%TYPE
                     ,pr_nrdconta IN crapcob.nrdconta%type
                     ,pr_nrcnvcob IN crapcob.nrcnvcob%type
                     ,pr_nrdocmto IN crapcob.nrdocmto%type) IS
    SELECT crapcob.cdbandoc
          ,crapcob.cdcooper
          ,crapcob.nrdconta
          ,crapcob.nrdctabb
          ,crapcob.nrcnvcob
          ,crapcob.nrdocmto
          ,crapcob.incobran
          ,crapcob.insitcrt
          ,crapcob.vldpagto
          ,crapcob.nrnosnum
          ,crapcob.dsdoccop
          ,crapcob.dtvencto
          ,crapcob.vltitulo
          ,crapcob.flgregis
          ,crapcob.flgcbdda
          ,crapcob.insitpro
          ,crapcob.dtdbaixa
          ,crapcob.vldescto
          ,crapcob.vlabatim
          ,crapcob.flgdprot
          ,crapcob.idopeleg
          ,crapcob.qtdiaprt
          ,crapcob.cddespec
          ,crapcob.nrinssac
          ,crapcob.rowid
    FROM crapcob
    WHERE crapcob.cdcooper = pr_cdcooper
    AND   crapcob.cdbandoc = pr_cdbandoc
    AND   crapcob.nrdctabb = pr_nrdctabb
    AND   crapcob.nrdconta = pr_nrdconta
    AND   crapcob.nrcnvcob = pr_nrcnvcob
    AND   crapcob.nrdocmto = pr_nrdocmto
    ORDER BY crapcob.progress_recid ASC;
  rw_crapcob2 cr_crapcob2%ROWTYPE;

  --Selecionar Informacoes Sacado
  CURSOR cr_crapsab (pr_cdcooper IN crapsab.cdcooper%type
                    ,pr_nrdconta IN crapsab.nrdconta%type
                    ,pr_nrinssac IN crapsab.nrinssac%type) IS
    SELECT crapsab.nmdsacad
          ,crapsab.cdtpinsc
          ,crapsab.nrinssac
          ,crapsab.nmcidsac
          ,crapsab.cdufsaca
    FROM crapsab
    WHERE crapsab.cdcooper = pr_cdcooper
    AND   crapsab.nrdconta = pr_nrdconta
    AND   crapsab.nrinssac = pr_nrinssac;
  rw_crapsab cr_crapsab%ROWTYPE;

  --Selecionar Informacoes Convenios
  CURSOR cr_crapcon (pr_cdcooper IN crapcon.cdcooper%type
                    ,pr_cdempcon IN crapcon.cdempcon%type
                    ,pr_cdsegmto IN crapcon.cdsegmto%type) IS
    SELECT crapcon.flginter
          ,crapcon.nmextcon
          ,crapcon.tparrecd
          ,crapcon.cdhistor
          ,crapcon.nmrescon
          ,crapcon.cdsegmto
          ,crapcon.cdempcon
          ,crapcon.cdcooper
    FROM crapcon
    WHERE crapcon.cdcooper = pr_cdcooper
    AND   crapcon.cdempcon = pr_cdempcon
    AND   crapcon.cdsegmto = pr_cdsegmto;
  rw_crapcon cr_crapcon%ROWTYPE;

  --Selecionar informacoes autorizacao debito
  CURSOR cr_crapatr (pr_cdcooper IN crapatr.cdcooper%TYPE
                    ,pr_nrdconta IN crapatr.nrdconta%TYPE
                    ,pr_cdsegmto IN crapatr.cdsegmto%TYPE
                    ,pr_cdempcon IN crapatr.cdempcon%TYPE) IS
    SELECT crapatr.cdcooper
    FROM crapatr
    WHERE crapatr.cdcooper = pr_cdcooper
    AND   crapatr.nrdconta = pr_nrdconta
    AND   crapatr.cdsegmto = pr_cdsegmto
    AND   crapatr.cdempcon = pr_cdempcon;
  rw_crapatr cr_crapatr%ROWTYPE;

  --Selecionar movimento retorno titulos bancarios
  CURSOR cr_crapret (pr_cdcooper IN crapret.cdcooper%type
                    ,pr_nrcnvcob IN crapret.nrcnvcob%type
                    ,pr_nrremret IN crapret.nrremret%type) IS
    SELECT crapret.nrseqreg
    FROM crapret
    WHERE crapret.cdcooper = pr_cdcooper
    AND   crapret.nrcnvcob = pr_nrcnvcob
    AND   crapret.nrremret = pr_nrremret
    ORDER BY crapret.progress_recid DESC;
  rw_crapret cr_crapret%ROWTYPE;

  --Selecionar Controle Cobranca
  CURSOR cr_crapceb (pr_cdcooper IN crapceb.cdcooper%type
                    ,pr_nrdconta IN crapceb.nrdconta%type
                    ,pr_nrconven IN crapceb.nrconven%type) IS
    SELECT crapceb.inarqcbr
          ,crapceb.nrdconta
          ,crapceb.cddemail
          ,crapceb.nrcnvceb
		  ,crapceb.inenvcob
    FROM crapceb
    WHERE crapceb.cdcooper = pr_cdcooper
    AND   crapceb.nrdconta = pr_nrdconta
    AND   crapceb.nrconven = pr_nrconven
    ORDER BY crapceb.progress_recid ASC;
  rw_crapceb cr_crapceb%ROWTYPE;


  --Tipo de Dados para cursor data
  rw_crapdat  BTCH0001.cr_crapdat%ROWTYPE;

  --Tabela de Memoria para desconto titulo
  vr_tab_descontar typ_tab_titulos;
  --
  vr_assin_conjunta NUMBER(1);

  -- Objetos para armazenar as variáveis da notificação
  vr_variaveis_notif  NOTI0001.typ_variaveis_notif;
  
  vr_craplot_rowid typ_tab_tp_cralot_rowid;
  
  vr_index_craplot_rowid VARCHAR2(300);
  vr_id_proc_paralelo varchar2(1) := 'N';
  
  /* CONSTANTES */
  ORIGEM_AGEND_NAO_EFETIVADO CONSTANT tbgen_notif_automatica_prm.cdorigem_mensagem%TYPE := 3;
  MOTIVO_TRANSFERENCIA       CONSTANT tbgen_notif_automatica_prm.cdmotivo_mensagem%TYPE := 1;
  MOTIVO_TED                 CONSTANT tbgen_notif_automatica_prm.cdmotivo_mensagem%TYPE := 2;
  MOTIVO_PAGAMENTO_TITULO    CONSTANT tbgen_notif_automatica_prm.cdmotivo_mensagem%TYPE := 3;
  MOTIVO_PAGAMENTO_CONVENIO  CONSTANT tbgen_notif_automatica_prm.cdmotivo_mensagem%TYPE := 4;
  MOTIVO_PAGAMENTO_DARFDAS   CONSTANT tbgen_notif_automatica_prm.cdmotivo_mensagem%TYPE := 5;
  MOTIVO_PAGAMENTO_GPS       CONSTANT tbgen_notif_automatica_prm.cdmotivo_mensagem%TYPE := 6;
  CODIGO_SEPARADOR_STRING    CONSTANT VARCHAR2(1) := '|';




PROCEDURE pc_efetua_debitos_paralelo (pr_cdcooper    IN crapcop.cdcooper%TYPE      --Cooperativa
                                   ,pr_tab_agendto IN OUT NOCOPY typ_tab_agendto --tabela de agendamento
                                   ,pr_cdprogra    IN crapprg.cdprogra%TYPE      --Codigo programa
                                   ,pr_dtmvtopg    IN crapdat.dtmvtolt%TYPE      --Data Pagamento
                                   ,pr_inproces    IN crapdat.inproces%TYPE      --Indicador processo
                                   ,pr_flsgproc    IN BOOLEAN                    --Flag segundo processamento
                                   ,pr_cdcritic    OUT INTEGER     --Codigo da Critica
                                   ,pr_dscritic    OUT VARCHAR2) is
  begin
    
    vr_id_proc_paralelo := 'S';
    pc_efetua_debitos(pr_cdcooper     => pr_cdcooper    
                     ,pr_tab_agendto  => pr_tab_agendto
                     ,pr_cdprogra     => pr_cdprogra   
                     ,pr_dtmvtopg     => pr_dtmvtopg   
                     ,pr_inproces     => pr_inproces   
                     ,pr_flsgproc     => pr_flsgproc   
                     ,pr_cdcritic     => pr_cdcritic   
                     ,pr_dscritic     => pr_dscritic);   
    
  end pc_efetua_debitos_paralelo;                              

  function fn_exec_paralelo return boolean is 
  begin
    return vr_id_proc_paralelo = 'S';
  end fn_exec_paralelo;
  
  procedure pc_insere_lote_wrk(pr_cdcooper IN craplot.cdcooper%TYPE
                              ,pr_dtmvtolt IN craplot.dtmvtolt%TYPE
                              ,pr_cdagenci IN craplot.cdagenci%TYPE
                              ,pr_cdbccxlt IN craplot.cdbccxlt%TYPE
                              ,pr_nrdolote IN craplot.nrdolote%TYPE
                              ,pr_cdoperad IN craplot.cdoperad%TYPE
                              ,pr_nrdcaixa IN craplot.nrdcaixa%TYPE
                              ,pr_tplotmov IN craplot.tplotmov%TYPE
                              ,pr_cdhistor IN craplot.cdhistor%TYPE
                              ,pr_cdbccxpg IN craplot.cdbccxpg%TYPE
                              ,pr_nmrotina in varchar2) is
    
    vr_campos  tbgen_batch_relatorio_wrk.dscritic%type;
    
  begin 
    vr_campos :=   CODIGO_SEPARADOR_STRING||
                   pr_cdbccxlt||CODIGO_SEPARADOR_STRING||
                   pr_nrdolote||CODIGO_SEPARADOR_STRING||
                   pr_cdoperad||CODIGO_SEPARADOR_STRING||
                   pr_nrdcaixa||CODIGO_SEPARADOR_STRING||
                   pr_tplotmov||CODIGO_SEPARADOR_STRING||
                   pr_cdhistor||CODIGO_SEPARADOR_STRING||
                   pr_cdbccxpg||CODIGO_SEPARADOR_STRING;
  
    INSERT INTO tbgen_batch_relatorio_wrk(cdcooper
                                         ,cdprograma
                                         ,dsrelatorio
                                         ,dtmvtolt
                                         ,cdagenci
                                         ,dschave
                                         ,DSCRITIC) values (pr_cdcooper
                                                           ,'CRPS509'
                                                           ,pr_nmrotina
                                                           ,pr_dtmvtolt
                                                           ,pr_cdagenci
                                                           ,'CRAPLOT'
                                                           ,vr_campos);                                                      
  
  end pc_insere_lote_wrk;
  
  procedure pc_gerar_lote_from_wrk(pr_cdcooper       IN craplot.cdcooper%TYPE
                                  ,pr_craplot_rowid out typ_tab_tp_cralot_rowid
                                  ,pr_dserro        OUT VARCHAR2) is 
     
     cursor cr_craplot is 
       select
         tab.cdagenci,
         tab.dtmvtolt,
         tab.cdbccxlt,
         tab.nrdolote,
         tab.cdoperad,
         tab.nrdcaixa,
         tab.tplotmov,
         tab.cdhistor,
         tab.cdbccxpg 
       from 
       (select 
         cdagenci,
         dtmvtolt,
         substr(dscritic,instr(dscritic,CODIGO_SEPARADOR_STRING,1,1)+1,instr(dscritic,CODIGO_SEPARADOR_STRING,1,2) -instr(dscritic,CODIGO_SEPARADOR_STRING,1,1)-1) cdbccxlt,
         substr(dscritic,instr(dscritic,CODIGO_SEPARADOR_STRING,1,2)+1,instr(dscritic,CODIGO_SEPARADOR_STRING,1,3) -instr(dscritic,CODIGO_SEPARADOR_STRING,1,2)-1) nrdolote,
         substr(dscritic,instr(dscritic,CODIGO_SEPARADOR_STRING,1,3)+1,instr(dscritic,CODIGO_SEPARADOR_STRING,1,4) -instr(dscritic,CODIGO_SEPARADOR_STRING,1,3)-1) cdoperad,
         substr(dscritic,instr(dscritic,CODIGO_SEPARADOR_STRING,1,4)+1,instr(dscritic,CODIGO_SEPARADOR_STRING,1,5) -instr(dscritic,CODIGO_SEPARADOR_STRING,1,4)-1) nrdcaixa,
         substr(dscritic,instr(dscritic,CODIGO_SEPARADOR_STRING,1,5)+1,instr(dscritic,CODIGO_SEPARADOR_STRING,1,6) -instr(dscritic,CODIGO_SEPARADOR_STRING,1,5)-1) tplotmov,
         substr(dscritic,instr(dscritic,CODIGO_SEPARADOR_STRING,1,6)+1,instr(dscritic,CODIGO_SEPARADOR_STRING,1,7) -instr(dscritic,CODIGO_SEPARADOR_STRING,1,6)-1) cdhistor,
         substr(dscritic,instr(dscritic,CODIGO_SEPARADOR_STRING,1,6)+1,instr(dscritic,CODIGO_SEPARADOR_STRING,1,7) -instr(dscritic,CODIGO_SEPARADOR_STRING,1,6)-1) cdbccxpg       
       from tbgen_batch_relatorio_wrk wrk
       where wrk.cdcooper   = pr_cdcooper
         and wrk.cdprograma = 'CRPS509'
         and wrk.dschave    = 'CRAPLOT') tab
       group by tab.cdagenci,
                tab.dtmvtolt,
                tab.cdbccxlt,
                tab.nrdolote,
                tab.cdoperad,
                tab.nrdcaixa,
                tab.tplotmov,
                tab.cdhistor,
                tab.cdbccxpg ;

    vr_rowid rowid;
    vr_dslog varchar2(4000);
  begin
    pr_dserro := NULL;
    for rr_craplot in cr_craplot loop
      vr_index_craplot_rowid := pr_cdcooper||
                                rr_craplot.cdagenci||
                                to_char(rr_craplot.dtmvtolt,'yyyymmdd')||
                                rr_craplot.cdbccxlt||
                                rr_craplot.nrdolote||
                                rr_craplot.cdoperad||
                                rr_craplot.nrdcaixa||
                                rr_craplot.tplotmov||
                                rr_craplot.cdhistor||
                                rr_craplot.cdbccxpg;

      vr_dslog := 'Coop/Ag: '||pr_cdcooper||'/'||rr_craplot.cdagenci||
                    ' Mvto: '||to_char(rr_craplot.dtmvtolt,'dd/mm/yyyy')||
                    ' Lote: '||rr_craplot.nrdolote||
                    ' ccxlt: '||rr_craplot.cdbccxlt;
                                              
      UPDATE craplot
         SET nrseqdig = nrseqdig 
       WHERE cdcooper = pr_cdcooper
         AND dtmvtolt = rr_craplot.dtmvtolt
         AND cdagenci = rr_craplot.cdagenci
         AND cdbccxlt = rr_craplot.cdbccxlt
         AND nrdolote = rr_craplot.nrdolote
         RETURNING ROWID INTO vr_rowid;
      
      IF SQL%ROWCOUNT = 0 THEN
      INSERT INTO craplot(craplot.cdcooper
                         ,craplot.dtmvtolt
                         ,craplot.cdagenci
                         ,craplot.cdbccxlt
                         ,craplot.nrdolote
                         ,craplot.nrseqdig
                         ,craplot.tplotmov
                         ,craplot.cdoperad
                         ,craplot.cdhistor
                         ,craplot.nrdcaixa
                         ,craplot.cdopecxa) VALUES (pr_cdcooper
                                                   ,rr_craplot.dtmvtolt
                                                   ,rr_craplot.cdagenci
                                                   ,rr_craplot.cdbccxlt
                                                   ,rr_craplot.nrdolote
                                                   ,1  -- craplot.nrseqdig
                                                   ,rr_craplot.tplotmov
                                                   ,rr_craplot.cdoperad
                                                   ,rr_craplot.cdhistor
                                                   ,rr_craplot.nrdcaixa
                                                   ,rr_craplot.cdoperad) RETURNING ROWID INTO vr_rowid;
        
      END IF;
        pr_craplot_rowid(vr_index_craplot_rowid).vr_rowid := vr_rowid;
      end loop rr_craplot;
  EXCEPTION
    WHEN OTHERS THEN
      pr_dserro :=  'pc_gerar_lote_from_wrk '||vr_dslog ||' Sqlerrm: '||sqlerrm;
        
  end pc_gerar_lote_from_wrk;
  
  procedure pc_atualiz_lote(pr_craplot_rowid in typ_tab_tp_cralot_rowid,
                            pr_cdcooper      in craplot.cdcooper%type,
                            pr_sequecia_lote in craplot.nrseqdig%type) is
    
     cursor cr_craplcm(pr_rowid    in ROWID,
                       pr_nrseqdig in number) is 
      select sum(qt_registro) qt_registro,
             sum(vllanmto)     vllanmto
        from(select count(1)                 qt_registro
                    ,nvl(SUM(lcm.vllanmto),0) vllanmto
      from craplcm lcm
          ,craplot lot
      where lot.rowid    = pr_rowid
        and lot.CDCOOPER = lcm.CDCOOPER
        and lot.DTMVTOLT = lcm.DTMVTOLT
        and lot.CDAGENCI = lcm.CDAGENCI
        and lot.CDBCCXLT = lcm.CDBCCXLT
                and lot.NRDOLOTE = lcm.NRDOLOTE
                and lcm.nrseqdig >= pr_sequecia_lote 
             union
             select count(1)                 qt_registro
                    ,nvl(SUM(lft.vllanmto),0) vllanmto
              from craplft lft
                  ,craplot lot
              where lot.rowid    = pr_rowid
                and lot.CDCOOPER = lft.CDCOOPER
                and lot.DTMVTOLT = lft.DTMVTOLT
                and lot.CDAGENCI = lft.CDAGENCI
                and lot.CDBCCXLT = lft.CDBCCXLT
                and lot.NRDOLOTE = lft.NRDOLOTE
                and lft.nrseqdig >= pr_sequecia_lote);
    
    rr_craplcm cr_craplcm%rowtype; 
    vr_dsvlrprm     crapprm.dsvlrprm%type;
    vr_dsvlrprmnum  number;    
  begin
    vr_index_craplot_rowid:= pr_craplot_rowid.FIRST;
    WHILE vr_index_craplot_rowid IS NOT NULL LOOP
	    
      open  cr_craplcm(pr_rowid    => pr_craplot_rowid(vr_index_craplot_rowid).vr_rowid,
                       pr_nrseqdig => pr_sequecia_lote );
      fetch cr_craplcm into rr_craplcm;
    
      update craplot c
      set c.nrseqdig = nvl(c.nrseqdig,0) + rr_craplcm.qt_registro
         ,c.qtcompln = nvl(c.qtcompln,0) + rr_craplcm.qt_registro 
         ,c.qtinfoln = nvl(c.qtinfoln,0) + rr_craplcm.qt_registro 
         ,c.vlcompdb = nvl(c.vlcompdb,0) + rr_craplcm.vllanmto    
         ,c.vlinfodb = nvl(c.vlinfodb,0) + rr_craplcm.vllanmto
      where c.rowid = pr_craplot_rowid(vr_index_craplot_rowid).vr_rowid;
    
      close cr_craplcm;
      
      vr_index_craplot_rowid := pr_craplot_rowid.next(vr_index_craplot_rowid);
    END LOOP;
  
  end pc_atualiz_lote;
  
  function fn_seq_parale_craplcm RETURN VARCHAR2 is
  begin
    
    RETURN cecred.craplot_509_seq.nextval;

  end fn_seq_parale_craplcm;
  
  /* Funcao para buscar a data do dia */
  FUNCTION fn_busca_datdodia (pr_cdcooper IN crapcop.cdcooper%type) RETURN DATE IS
  ---------------------------------------------------------------------------------------------------------------
  --
  --  Programa : fn_busca_datdodia
  --  Sistema  : Procedimentos para buscar a data do dia
  --  Sigla    : CRED
  --  Autor    : Alisson C. Berrido - Amcom
  --  Data     : Junho/2013.                   Ultima atualizacao: 15/12/2017
  --
  -- Dados referentes ao programa:
  --
  -- Frequencia: -----
  -- Objetivo  : Funcao para buscar a data do dia
    --    
    --               15/12/2017 - Incluido nome do módulo logado
    --                            No caso de erro de programa gravar tabela especifica de log                     
    --                            Ajuste mensagem de erro 
    --                            (Belli - Envolti - Chamado 779415)        
    --
  ---------------------------------------------------------------------------------------------------------------
  BEGIN
    BEGIN
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.fn_busca_datdodia');
      RETURN(GENE0005.fn_valida_dia_util(pr_cdcooper => pr_cdcooper
                                        ,pr_dtmvtolt => SYSDATE
                                        ,pr_tipo     => 'P'));
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);
    EXCEPTION
      WHEN OTHERS THEN
        -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
        CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);   
        RETURN(NULL);
    END;
  END fn_busca_datdodia;

  -- Procedimento para inserir ou atualizar a crapmvi e não deixar tabela lockada
  PROCEDURE pc_insere_movimento_internet(pr_cdcooper IN crapmvi.cdcooper%TYPE
                                        ,pr_nrdconta IN crapmvi.nrdconta%TYPE
                                        ,pr_idseqttl IN crapmvi.idseqttl%TYPE
                                        ,pr_dtmvtolt IN crapmvi.dtmvtolt%TYPE
                                        ,pr_cdoperad IN crapmvi.cdoperad%TYPE
                                        ,pr_inpessoa IN crapass.inpessoa%TYPE
                                        ,pr_tpoperac IN NUMBER --1 - Transferência, 2 - Pagamento, 4 - TED
                                        ,pr_vllanmto IN crapmvi.vlmovweb%TYPE
                                        ,pr_dscritic OUT VARCHAR2) IS
 /* ..........................................................................
    
   Programa: pc_insere_movimento_internet
   Sistema : Internet - Cooperativa de Credito
   Sigla   : CRED
   Autor   : XXXX
   Data    : 00/00/0000.                       Ultima atualizacao: 15/12/2017
   
   Dados referentes ao programa:
   
   Frequencia: Sempre que for chamado
   Objetivo  : insere movimento internet.
   
   Alteracoes:                            
               15/12/2017 - Incluido nome do módulo logado
                            No caso de erro de programa gravar tabela especifica de log                     
                            Ajuste mensagem de erro 
                            (Belli - Envolti - Chamado 779415)        
                                
    */
  
    -- Pragma - abre nova sessao para tratar a atualizacao
    PRAGMA AUTONOMOUS_TRANSACTION;
    -- criar rowtype controle
    rw_crapmvi_ctl cr_crapmvi%ROWTYPE;
    
    -- Valores de movimento
    vr_vlmovweb crapmvi.vlmovweb%TYPE := 0;
    vr_vlmovtrf crapmvi.vlmovtrf%TYPE := 0;
    vr_vlmovpgo crapmvi.vlmovpgo%TYPE := 0;
    vr_vlmovted crapmvi.vlmovted%TYPE := 0;
    
		-- Variável de críticas
		vr_cdcritic crapcri.cdcritic%TYPE;
		vr_dscritic VARCHAR2(10000);

		-- Tratamento de erros
		vr_exc_erro EXCEPTION;    
    --Agrupa os parametros - 15/12/2017 - Chamado 779415 
    vr_dsparame VARCHAR2(4000);
		-- Tratamento de erros - 15/12/2017 - Chamado 779415 
		vr_exc_msg  EXCEPTION;   
  BEGIN
	  -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
    -- Está abreviado o nome da procedure pelo motivo que a ação no Oracle tem limite de 32 caracteres
	  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_insere_movimento_int');
    --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
    vr_dsparame := ' pr_cdcooper:'  || pr_cdcooper ||
                   ', pr_nrdconta:' || pr_nrdconta ||
                   ', pr_idseqttl:' || pr_idseqttl ||
                   ', pr_dtmvtolt:' || pr_dtmvtolt ||
                   ', pr_cdoperad:' || pr_cdoperad ||
                   ', pr_inpessoa:' || pr_inpessoa ||
                   ', pr_tpoperac:' || pr_tpoperac ||
                   ', pr_vllanmto:' || pr_vllanmto;
    
    IF pr_inpessoa = 1 THEN -- Se for pessoa Física - Une em uma variável
      vr_vlmovweb := pr_vllanmto;
    ELSE -- Se for pessoa Jurídica separa em Transferência, Pagamento e TED
      vr_vlmovtrf := CASE pr_tpoperac WHEN 1 THEN pr_vllanmto ELSE 0 END; -- Transferência
      vr_vlmovpgo := CASE pr_tpoperac WHEN 2 THEN pr_vllanmto ELSE 0 END; -- Pagamento
      vr_vlmovted := CASE pr_tpoperac WHEN 4 THEN pr_vllanmto ELSE 0 END; -- TED
    END IF;
    
    /* Tratamento para buscar registro de movimento se o mesmo estiver em lock, tenta por 10 seg. */
    FOR i IN 1 .. 100 LOOP
      BEGIN
        -- Leitura do lote
        OPEN cr_crapmvi(pr_cdcooper => pr_cdcooper
                       ,pr_nrdconta => pr_nrdconta
                       ,pr_idseqttl => pr_idseqttl
                       ,pr_dtmvtolt => pr_dtmvtolt);
       FETCH cr_crapmvi
        INTO rw_crapmvi_ctl;
        vr_dscritic := NULL;
        EXIT;
      EXCEPTION
        WHEN OTHERS THEN
          IF cr_crapmvi%ISOPEN THEN
            CLOSE cr_crapmvi;
          END IF;
          
          -- setar critica caso for o ultimo
          IF i = 100 THEN
            -- Ajuste mensagem - 15/12/2017 - Chamado 779415  
            vr_cdcritic := 1202;
            vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                           ', pr_nrdconta:' || pr_nrdconta;
          END IF;

          -- aguardar 0,5 seg. antes de tentar novamente
          sys.dbms_lock.sleep(0.1);
      END;

    END LOOP;
    
    IF vr_dscritic IS NOT NULL THEN
	    -- Saida com erro - 15/12/2017 - Chamado 779415                    
		  RAISE vr_exc_msg;
    END IF;
    
    IF cr_crapmvi%NOTFOUND THEN
      
      BEGIN
      -- criar registros de movimentos na tabela crapmvi
      INSERT INTO crapmvi
        (crapmvi.cdcooper
        ,crapmvi.cdoperad
        ,crapmvi.dtmvtolt
        ,crapmvi.dttransa
        ,crapmvi.hrtransa
        ,crapmvi.idseqttl
        ,crapmvi.nrdconta
        ,crapmvi.vlmovweb
        ,crapmvi.vlmovtrf
        ,crapmvi.vlmovpgo
        ,crapmvi.vlmovted
        )
      VALUES
        (pr_cdcooper
        ,pr_cdoperad
        ,pr_dtmvtolt
        ,TRUNC(SYSDATE)
        ,GENE0002.fn_busca_time
        ,pr_idseqttl
        ,pr_nrdconta
        ,vr_vlmovweb
        ,vr_vlmovtrf -- Transferência
        ,vr_vlmovpgo -- Pagamento
        ,vr_vlmovted -- TED
        );
      EXCEPTION
        WHEN OTHERS THEN
          -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
          CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);   
          -- Fechar cursor   
          IF cr_crapmvi%ISOPEN THEN
            CLOSE cr_crapmvi;
          END IF;
          -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
          vr_cdcritic := 1034;
          vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                         'CRAPMVI(1):' ||  
                         ' cdcooper:'    || pr_cdcooper ||
                         ', cdoperad:'    || pr_cdoperad || 
                         ', dtmvtolt:'    || pr_dtmvtolt || 
                         ', dttransa:'    || 'TRUNC(SYSDATE)' ||
                         ', hrtransa:'    || GENE0002.fn_busca_time ||
                         ', idseqttl:'    || pr_idseqttl || 
                         ', nrdconta:'    || pr_nrdconta || 
                         ', vlmovweb:'    || vr_vlmovweb ||
                         ', vlmovtrf:'    || vr_vlmovtrf ||
                         ', vlmovpgo:'    || vr_vlmovpgo || 
                         ', vlmovted:'    || vr_vlmovted || 
                         '. ' ||sqlerrm;                     
				  RAISE vr_exc_erro;
      END;
    ELSE
      BEGIN        
      -- ou atualizar os valores
      UPDATE crapmvi
         SET crapmvi.vlmovweb = crapmvi.vlmovweb + vr_vlmovweb -- Movimentação geral (apenas PF)
            ,crapmvi.vlmovtrf = crapmvi.vlmovtrf + vr_vlmovtrf -- Transferência (apenas PJ)
            ,crapmvi.vlmovpgo = crapmvi.vlmovpgo + vr_vlmovpgo -- Pagamento (apenas PJ)
            ,crapmvi.vlmovted = crapmvi.vlmovted + vr_vlmovted -- TED (apenas PJ)
       WHERE crapmvi.rowid = rw_crapmvi_ctl.rowid;
      EXCEPTION
        WHEN OTHERS THEN
          -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
          CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);   
          -- Fechar cursor   
          IF cr_crapmvi%ISOPEN THEN
            CLOSE cr_crapmvi;
          END IF;
          -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
          vr_cdcritic := 1035;
          vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                         'CRAPMVI(1):' ||                     
                         ' vlmovweb:'  || ' crapmvi.vlmovweb + ' || vr_vlmovweb ||
                         ', vlmovtrf:' || ' crapmvi.vlmovtrf + ' || vr_vlmovtrf ||
                         ', vlmovpgo:' || ' crapmvi.vlmovpgo + ' || vr_vlmovpgo ||
                         ', vlmovted:' || ' crapmvi.vlmovted + ' || vr_vlmovted ||
                         ' com rowid:' || rw_crapmvi_ctl.rowid ||
                         '. ' ||sqlerrm;                     
				  RAISE vr_exc_erro;
      END;

    END IF;
  
    CLOSE cr_crapmvi;
  
    COMMIT;
	  -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);
  EXCEPTION
    -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415      
    -- Disparadores:  inss0002.pc_gps_arrecadar_sicredi     - Não grava TBGEN - Necessário Avaliar
    --                paga0001.pc_executa_transf_intercoop  - Grava TBGEN
    --                paga0001.pc_executa_transferencia     - Grava TBGEN
    --                paga0001.pc_paga_convenio             - Grava TBGEN
    --                paga0001.pc_paga_titulo               - Grava TBEGN    
    WHEN vr_exc_msg THEN
		  -- Alimenta críticas parametrizadas
			pr_dscritic := lpad(vr_cdcritic,5,'0') ||
                     ' ' ||vr_dscritic;
      ROLLBACK;
		WHEN vr_exc_erro THEN
		  -- Alimenta críticas parametrizadas
			pr_dscritic := lpad(vr_cdcritic,5,'0') ||
                     ' ' ||vr_dscritic||
                     ' ' ||vr_dsparame;
      ROLLBACK;
    WHEN OTHERS THEN
      -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
      CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);   
      IF cr_crapmvi%ISOPEN THEN
        CLOSE cr_crapmvi;
      END IF;
      -- se ocorreu algum erro durante a criacao
      -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
      vr_cdcritic := 9999;
      pr_dscritic:= lpad(vr_cdcritic,5,'0') ||
                     ' ' ||gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic)  ||
                    'PAGA0001.pc_insere_movimento_internet'||
                    '. ' ||  SQLERRM ||
                    '.'  || vr_dsparame ;	

      ROLLBACK;

  END pc_insere_movimento_internet;

  /* Procedimento do internetbank operação 23 - Transferencia */ 
  PROCEDURE pc_InternetBank23 ( pr_cdcooper IN crapcop.cdcooper%TYPE   --> Codigo da cooperativa
                               ,pr_nrdconta IN crapttl.nrdconta%TYPE   --> Numero da conta
                               ,pr_idseqttl IN crapttl.idseqttl%TYPE   --> Sequencial titular
                               ,pr_dtmvtolt IN crapdat.dtmvtolt%TYPE   --> Data de movimento
                               ,pr_tppeslst IN INTEGER
                               ,pr_tpoperac IN INTEGER                 --> Tipo de opracao
                               ,pr_tptipdif IN crapcti.intipdif%TYPE
                               ,pr_nrcpfope IN crapcti.nrcpfcgc%TYPE   --> CPF do operador juridico
                               ,pr_nmtitpes IN crapcti.nmtitula%TYPE
                               ,pr_flgpesqu IN INTEGER
                               ,pr_flmobile IN INTEGER
                               ,pr_dstransa IN VARCHAR2
                               ,pr_cdorigem IN INTEGER                 --> Código da Origem
                               ,pr_dsorigem IN VARCHAR2                --> Descrição da Origem
                               ,pr_cdagenci IN INTEGER                 --> Agencia              
                               ,pr_nrdcaixa IN INTEGER                 --> Caixa
                               ,pr_nmprogra IN VARCHAR2                --> Nome do programa
                               ,pr_xml_dsmsgerr   OUT VARCHAR2         --> Retorno XML de critica
                               ,pr_xml_operacao23 OUT CLOB             --> Retorno XML da operação 23
                               ,pr_dsretorn       OUT VARCHAR2) IS     --> Retorno de critica (OK ou NOK)
 /* ..........................................................................
    
   Programa: pc_InternetBank23             antigo:sistema/internet/fontes/InternetBank23.p
   Sistema : Internet - Cooperativa de Credito
   Sigla   : CRED
   Autor   : David
   Data    : Abril/2007.                       Ultima atualizacao: 15/12/2017
   
   Dados referentes ao programa:
   
   Frequencia: Sempre que for chamado (On-Line)
   Objetivo  : Listar contas destino para transferencia via Internet.
   
   Alteracoes: 10/08/2007 - Alterado para usar os horarios de disponibilidade
                            da transferencia (Evandro).

               28/09/2007 - Acrescentada validacao pela procedure da BO 15
                            verifica_operacao (David).

               09/10/2007 - Gerar log com data TODAY e nao dtmvtolt (David).
               
               06/03/2008 - Utilizar include de temp-tables (David).
               
               24/04/2008 - Adaptacao para agendamentos (David).
               
               25/06/2008 - Nova procedures para obter contas destino (David).
                            
               03/11/2008 - Inclusao widget-pool (martin)
               
               27/07/2009 - Alteracoes do Projeto de Transferencia para 
                            Credito de Salario (David).
                            
               25/01/2010 - Retirado by no for each tt-contas-destino(Guilherme)
               
               04/11/2010 - Criar novo registro na temp-table para cada linha
                            do XML (David).
                            
               05/10/2011 - Parametro cpf operador na verifica_operacao
                            (Guilherme).
                            
               14/05/2012 - Projeto TED Internet (David).
               
               26/03/2013 - Transferencia intecooperativa (Gabriel).
               
               05/09/2013 - Nova forma de chamar as agências, de PAC agora 
                            a escrita será PA (André Euzébio - Supero).
                            
               30/06/2014 - Retornar a situacao do beneficiario da TED
                            (Chamado 161848) (Jonata - RKAM).
                            
               20/04/2015 - Inclusão do campo ISPB SD271603 FDR041 (Vanessa)                
                            
               20/04/2015 - Inclusão do campos de tipo de Transação nos limites.
                            (Dionathan)
                            
               28/07/2015 - Adição de parâmetro flmobile para indicar que a origem
                            da chamada é do mobile (Dionathan)
                            
               20/01/2016 - Ajuste para chamada efetuada por operador PJ.
                            Projeto 131 - Assinatura Conjunta (David).
                            
               17/02/2016 - Melhorias para o envio e cadastro de contas para
                            efetivar TED, M. 118 (Jean Michel).
                            
               29/02/2016 - Inclusão da lista de Bancos para cadastro de favorecido
                            via Mobile (Dionathan)
                            
               29/03/2016 - Conversão da rotina pc_InternetBank23
                           (Adriano - M117).             
                            
               09/05/2016 - Ajuste para gerar log em caso de erro na chamada da rotina
                            pc_InternetBank23
                            (Adriano - M117).                                                
                            
               16/05/2016 - Ajuste para corrigir a geração da tags "BANCOS" que estava sendo
                            criada em duplicidade
                            (Adriano - M117).
                          
			         25/05/2016 - Ajuste para aumentar o format da variável de index
						                (Adriano M117).                                                 
                            
               31/05/2016 - Ajuste para formatar corretamente a agencia da cooperativa
                            na tag que monta as contas destinos
                            (Adriano - M117).                           
                            
               28/07/2017 - Ajustes referente a melhoria 342. (Kelvin)          
        
               15/12/2017 - Incluido nome do módulo logado
                            No caso de erro de programa gravar tabela especifica de log                     
                            Ajuste mensagem de erro 
                            (Belli - Envolti - Chamado 779415)        
            
    .................................................................................*/                           
                               
    --Cursor para obter os 10 bancos mais utilizados
    CURSOR cr_crapban (pr_cdbcoctl IN crapcop.cdbcoctl%TYPE
                      ,pr_flmobile IN INTEGER) IS
    SELECT REPLACE(UPPER(TRIM(b.nmresbcc)),'&','e') nmresbcc
          ,b.cdbccxlt
          ,b.nrispbif      
      FROM crapban b
     WHERE b.flgdispb = 1
       AND b.cdbccxlt <> pr_cdbcoctl
       AND (pr_flmobile = 0 OR b.cdbccxlt IN (1,104,237,341,33,756,399,748,41,136)); --Lista dos bancos mais utilizados na TED para mobile
    rw_crapban cr_crapban%ROWTYPE;
    
    --Cursor para obter os tipos de conta para TED
    CURSOR cr_tipcta IS
    SELECT tab.tpregist cdtipcta
          ,tab.dstextab dstipcta
      FROM craptab tab
     WHERE tab.cdcooper = pr_cdcooper
       AND UPPER(tab.nmsistem) = 'CRED'
       AND UPPER(tab.tptabela) = 'GENERI'
       AND tab.cdempres = 0
       AND UPPER(tab.cdacesso) = 'TPCTACRTED';
    rw_tipcta cr_tipcta%ROWTYPE;
    
    ----------------> VARIAVEIS <---------------
    --Variaveis de Erro
      vr_cdcritic crapcri.cdcritic%TYPE;
      vr_dscritic VARCHAR2(4000);
    
    vr_xml_dsmsgerr VARCHAR2(1000);    
    vr_des_erro  VARCHAR2(10);  -- OK ou NOK  
    --Tabela memoria de erros
    vr_tab_erro  GENE0001.typ_tab_erro;
    
    vr_tab_limite             INET0001.typ_tab_limite;
    vr_tab_internet           INET0001.typ_tab_internet;
    vr_tab_contas_cadastradas INET0001.typ_tab_contas_cadastradas;
    vr_tab_finalidades        INET0001.typ_tab_finalidades;
    vr_tab_crapcop            VARCHAR2(32000);
    
    vr_tab_bancos_favorecido      typ_tab_bancos_favorecido;
    vr_tab_tp_contas              typ_tab_tp_contas; 
    vr_tab_autorizacao_favorecido typ_tab_autorizacao_favorecido;
        
    vr_dstransa VARCHAR2(500) := NULL;
    vr_vllanmto number;
    vr_index_contas_cad VARCHAR2(210);
    vr_index_bancos_favorecido VARCHAR2(100);
    vr_index PLS_INTEGER;
    
    vr_nmcooper VARCHAR2(400);
    vr_fltemban BOOLEAN := FALSE;
    vr_cdhistor INTEGER;
    vr_cdhisest INTEGER;
    vr_vltarifa NUMBER;
    vr_hrlimtrf crapprm.dsvlrprm%TYPE; --Transf no dia (tipo Crédito Salário)
    vr_hrtrfini VARCHAR2(10); 
    vr_hrtrffim VARCHAR2(10); 
    vr_dtdivulg DATE;
    vr_dtvigenc DATE;
    vr_cdfvlcop INTEGER;
    vr_flghbtrc NUMBER;
    vr_flghbtrf NUMBER;
    vr_dsmsgtar VARCHAR2(250);
    vr_dsmsgtrf VARCHAR2(250);
    vr_dssitcta VARCHAR2(10);
    
    --Variaveis de Excecao
      vr_exc_erro EXCEPTION;
    -- Variaveis de XML    
    vr_xml_temp VARCHAR2(32767);
    --Agrupa os parametros - 15/12/2017 - Chamado 779415 
    vr_dsparame VARCHAR2(4000);
    --Descrição padronizada para o xml - 15/12/2017 - Chamado 779415 
    vr_dscriaux VARCHAR2(4000);
    
    -----------> SubPrograma <------------
    -- Gerar log
    PROCEDURE pc_proc_geracao_log(pr_flgtrans IN INTEGER
                                 ,pr_flgpesqu IN INTEGER
                                 ,pr_tpoperac IN INTEGER) IS
      
      vr_nrdrowid  ROWID;
      
    BEGIN
      
      IF pr_flgpesqu = 1 THEN
        vr_dstransa := 'Consulta favorecidos';
      ELSIF pr_tpoperac = 1 THEN
        vr_dstransa := 'Acesso a tela de transferencias';
      ELSE
        vr_dstransa := 'Acesso a tela de TED';
      END IF;
        
      -- Gerar log ao cooperado (b1wgen0014 - gera_log);
      GENE0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                          ,pr_cdoperad => '996'
                          ,pr_dscritic => vr_dscritic
                          ,pr_dsorigem => pr_dsorigem
                          ,pr_dstransa => vr_dstransa
                          ,pr_dttransa => TRUNC(SYSDATE)
                          ,pr_flgtrans => pr_flgtrans
                          ,pr_hrtransa => gene0002.fn_busca_time
                          ,pr_idseqttl => pr_idseqttl
                          ,pr_nmdatela => pr_nmprogra
                          ,pr_nrdconta => pr_nrdconta
                          ,pr_nrdrowid => vr_nrdrowid);
      
      GENE0001.pc_gera_log_item(pr_nrdrowid => vr_nrdrowid,
                                pr_nmdcampo => 'Origem',
                                pr_dsdadant => NULL,
                                pr_dsdadatu => CASE pr_flmobile
                                                 WHEN 1 THEN 'MOBILE'
                                                 ELSE 'INTERNETBANK' 
                                               END);
                          
    END pc_proc_geracao_log;
    
  BEGIN 
	  -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
	  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_InternetBank23');
    
    --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
    vr_dsparame := ' pr_cdcooper:'  || pr_cdcooper ||
                   ', pr_nrdconta:' || pr_nrdconta ||
                   ', pr_idseqttl:' || pr_idseqttl ||
                   ', pr_dtmvtolt:' || pr_dtmvtolt ||
                   ', pr_tppeslst:' || pr_tppeslst ||
                   ', pr_tpoperac:' || pr_tpoperac ||
                   ', pr_tptipdif:' || pr_tptipdif ||
                   ', pr_nrcpfope:' || pr_nrcpfope ||
                   ', pr_nmtitpes:' || pr_nmtitpes ||
                   ', pr_flgpesqu:' || pr_flgpesqu ||
                   ', pr_flmobile:' || pr_flmobile ||
                   ', pr_dstransa:' || pr_dstransa;
 
    vr_flghbtrc := NULL;
    vr_flghbtrf := NULL;

    
    IF pr_flgpesqu = 1 THEN
      vr_dstransa := 'Consulta favorecidos';
    ELSIF pr_tpoperac = 1 THEN
      vr_dstransa := 'Acesso a tela de transferencias';
    ELSE
      vr_dstransa := 'Acesso a tela de TED';
    END IF;    
  
    --> Montar xml de retorno dos dados <---
    -- Criar documento XML
    dbms_lob.createtemporary(pr_xml_operacao23, TRUE);       
    dbms_lob.open(pr_xml_operacao23, dbms_lob.lob_readwrite); 

    IF pr_flgpesqu <> 1 THEN
      INET0001.pc_verifica_operacao(pr_cdcooper => pr_cdcooper, 
                                    pr_cdagenci => pr_cdagenci,   -- PA           
                                    pr_nrdcaixa => pr_nrdcaixa,   -- CAIXA         
                                    pr_nrdconta => pr_nrdconta,  
                                    pr_idseqttl => pr_idseqttl,  
                                    pr_dtmvtolt => pr_dtmvtolt,  
                                    pr_idagenda => 0,             -- AGENDAMENTO   
                                    pr_dtmvtopg => pr_dtmvtolt,   -- DATA DEBITO   
                                    pr_vllanmto => vr_vllanmto,   -- VALOR OPER.   
                                    pr_cddbanco => 0,             -- BANCO DESTINO 
                                    pr_cdageban => 0,             -- AGENC.DESTINO 
                                    pr_nrctatrf => 0,             -- CONTA DESTINO 
                                    pr_cdtiptra => 0,             -- IND.TRANSACAO 
                                    pr_cdoperad => '996',         -- OPERADOR      
                                    pr_tpoperac => pr_tpoperac,  
                                    pr_flgvalid => FALSE,         -- VALIDACOES    
                                    pr_dsorigem => pr_dsorigem,    -- ORIGEM        
                                    pr_nrcpfope => pr_nrcpfope,   -- CPF OPERADOR  
                                    pr_flgctrag => TRUE,          -- VALIDA LIMITES
                                    pr_nmdatela => pr_nmprogra, 
                                    pr_dstransa => vr_dstransa, 
                                    pr_tab_limite => vr_tab_limite, 
                                    pr_tab_internet => vr_tab_internet, 
                                    pr_cdcritic => vr_cdcritic, 
                                    pr_dscritic => vr_dscritic
                                   ,pr_assin_conjunta => vr_assin_conjunta);                                    
      IF (nvl(vr_cdcritic,0) <> 0 OR 
        TRIM(vr_dscritic) IS NOT NULL) THEN
        RAISE vr_exc_erro;
      END IF;                           

      IF vr_tab_limite.count = 0 THEN
        --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        vr_cdcritic := 1077; --Tabela de limites nao encontrada
        vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        -- Abortar programa
        RAISE vr_exc_erro;
      ELSE        
	      -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
	      GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_InternetBank23');   
        gene0002.pc_escreve_xml(pr_xml            => pr_xml_operacao23
                               ,pr_texto_completo => vr_xml_temp 
                               ,pr_texto_novo     => 
                               '<LIMITE>' || 
                                  '<hrinipag>' || vr_tab_limite(vr_tab_limite.first).hrinipag || '</hrinipag>' || 
                                  '<hrfimpag>' || vr_tab_limite(vr_tab_limite.first).hrfimpag || '</hrfimpag>' || 
                                  '<idesthor>' || vr_tab_limite(vr_tab_limite.first).idesthor || '</idesthor>' || 
                                  '<qtmesagd>' || vr_tab_limite(vr_tab_limite.first).qtmesagd || '</qtmesagd>' ||
                                  '<iddiauti>' ||vr_tab_limite(vr_tab_limite.first).iddiauti || '</iddiauti>');                               
          
        IF (pr_nrcpfope = 0 AND vr_tab_internet.EXISTS(pr_idseqttl)) THEN
          gene0002.pc_escreve_xml(pr_xml            => pr_xml_operacao23
                                 ,pr_texto_completo => vr_xml_temp 
                                 ,pr_texto_novo     =>
                                 '<vllimted>' || to_char(vr_tab_internet(pr_idseqttl).vllimted,'FM999G999G999G990D00') || '</vllimted>' ||
                                 '<vldspted>' || to_char(vr_tab_internet(pr_idseqttl).vldspted,'FM999G999G999G990D00') || '</vldspted>');
        ELSE
          gene0002.pc_escreve_xml(pr_xml            => pr_xml_operacao23
                                 ,pr_texto_completo => vr_xml_temp 
                                 ,pr_texto_novo     =>
                                 '<vllimted>' || to_char(vr_tab_internet(vr_tab_internet.first).vllimted,'FM999G999G999G990D00') || '</vllimted>' ||
                                 '<vldspted>' || to_char(vr_tab_internet(vr_tab_internet.first).vldspted,'FM999G999G999G990D00') || '</vldspted>');
        END IF;
	      -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
	      GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_InternetBank23');   
      
        --Flag para identificar se transferência credito salário está ativo    
        vr_flghbtrc := GENE0001.fn_param_sistema(pr_nmsistem => 'CRED'
                                                ,pr_cdcooper => pr_cdcooper
                                                ,pr_cdacesso => 'FOLHAIB_HABILITA_TRANSF');
	      -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
	      GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_InternetBank23');   
        
        gene0002.pc_escreve_xml(pr_xml            => pr_xml_operacao23
                               ,pr_texto_completo => vr_xml_temp                               
                               ,pr_texto_novo     =>
                                 '<cdtiptra>1</cdtiptra>' ||
                                 '<dstiptra>TRANSFERENCIA</dstiptra>' ||
								                 '<qtmesrec>' || vr_tab_limite(vr_tab_limite.first).qtmesrec || '</qtmesrec>' ||
                                 '<qtmesfut>' || vr_tab_limite(vr_tab_limite.first).qtmesfut || '</qtmesfut>' ||
                                 '<flghbtrf>' || TO_CHAR(vr_flghbtrc)                        || '</flghbtrf>' ||                                               
                               '</LIMITE>');
	      -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
	      GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_InternetBank23');   
                               
      END IF;   
      
    END IF;

    /* Contas cadastradas */
    inet0001.pc_con_contas_cadastradas( pr_cdcooper => pr_cdcooper, 
                                        pr_cdagenci => pr_cdagenci,
                                        pr_nrdcaixa => pr_nrdcaixa, 
                                        pr_cdoperad => '996', 
                                        pr_nmdatela => pr_nmprogra,
                                        pr_idorigem => pr_cdorigem, 
                                        pr_nrdconta => pr_nrdconta, 
                                        pr_idseqttl => pr_idseqttl, 
                                        pr_dtmvtolt => pr_dtmvtolt, 
                                        pr_tppeslst => pr_tppeslst, 
                                        pr_intipdif => pr_tptipdif,
                                        pr_nmtitula => pr_nmtitpes,
                                        pr_cdcritic => vr_cdcritic,
                                        pr_dscritic => vr_dscritic,
                                        pr_tab_contas_cadastradas => vr_tab_contas_cadastradas,
                                        pr_dsretorn => vr_des_erro );

    IF vr_des_erro <> 'OK' THEN
      --Levantar Excecao
      RAISE vr_exc_erro;
    END IF;
	  -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
	  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_InternetBank23');   
    
    gene0002.pc_escreve_xml(pr_xml            => pr_xml_operacao23
                           ,pr_texto_completo => vr_xml_temp
                           ,pr_texto_novo     => '<CONTAS_DESTINO>');
	  -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
	  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_InternetBank23'); 
    
    vr_index_contas_cad := vr_tab_contas_cadastradas.FIRST;
    
    WHILE vr_index_contas_cad IS NOT NULL LOOP      
      
      IF vr_tab_contas_cadastradas(vr_index_contas_cad).insitcta = 2 THEN
        vr_dssitcta := 'Ativo';
      ELSIF vr_tab_contas_cadastradas(vr_index_contas_cad).insitcta = 3 THEN
        vr_dssitcta := 'Suspenso';
      ELSE
        vr_dssitcta := '';
      END IF;        
      
      gene0002.pc_escreve_xml(pr_xml            => pr_xml_operacao23
                             ,pr_texto_completo => vr_xml_temp
                             ,pr_texto_novo     => '<DADOS>' 
                                                ||   '<nrctatrf>'||TO_CHAR(vr_tab_contas_cadastradas(vr_index_contas_cad).nrctatrf)    ||'</nrctatrf>'
                                                ||   '<nmprimtl>'||TO_CHAR(vr_tab_contas_cadastradas(vr_index_contas_cad).nmtitula)    ||'</nmprimtl>'
                                                ||   '<cddbanco>'||TO_CHAR(vr_tab_contas_cadastradas(vr_index_contas_cad).cddbanco)    ||'</cddbanco>'
                                                ||   '<nmextbcc>'||TO_CHAR(vr_tab_contas_cadastradas(vr_index_contas_cad).nmextbcc)    ||'</nmextbcc>'
                                                ||   '<cdageban>'||TO_CHAR(vr_tab_contas_cadastradas(vr_index_contas_cad).cdageban,'fm0000')    ||'</cdageban>'
                                                ||   '<inpessoa>'||TO_CHAR(vr_tab_contas_cadastradas(vr_index_contas_cad).inpessoa)    ||'</inpessoa>'
                                                ||   '<nrcpfcgc>'||TO_CHAR(vr_tab_contas_cadastradas(vr_index_contas_cad).nrcpfcgc)    ||'</nrcpfcgc>'
                                                ||   '<dsctatrf>'||TO_CHAR(vr_tab_contas_cadastradas(vr_index_contas_cad).dsctatrf)    ||'</dsctatrf>'
                                                ||   '<nrseqcad>'||TO_CHAR(vr_tab_contas_cadastradas(vr_index_contas_cad).nrseqcad)    ||'</nrseqcad>'
                                                ||   '<dstipcta>'||TO_CHAR(vr_tab_contas_cadastradas(vr_index_contas_cad).dstipcta)    ||'</dstipcta>'
                                                ||   '<intipcta>'||TO_CHAR(vr_tab_contas_cadastradas(vr_index_contas_cad).intipcta)    ||'</intipcta>'
                                                ||   '<dscpfcgc>'||TO_CHAR(vr_tab_contas_cadastradas(vr_index_contas_cad).dscpfcgc)    ||'</dscpfcgc>'
                                                ||   '<insitcta>'||TO_CHAR(vr_tab_contas_cadastradas(vr_index_contas_cad).insitcta)    ||'</insitcta>'
                                                ||   '<cdispbif>'||TO_CHAR(vr_tab_contas_cadastradas(vr_index_contas_cad).nrispbif)    ||'</cdispbif>'
                                                ||   '<dsageban>'||TO_CHAR(vr_tab_contas_cadastradas(vr_index_contas_cad).dsageban)    ||'</dsageban>'
                                                ||   '<nmageban>'||TO_CHAR(vr_tab_contas_cadastradas(vr_index_contas_cad).nmageban)    ||'</nmageban>'
                                                ||   '<nmsegntl>'||TO_CHAR(vr_tab_contas_cadastradas(vr_index_contas_cad).nmtitul2)    ||'</nmsegntl>'
                                                ||   '<dssitcta>'||vr_dssitcta                                                         ||'</dssitcta>'
                                                || '</DADOS>');   
                           
      vr_index_contas_cad := vr_tab_contas_cadastradas.NEXT(vr_index_contas_cad);
      
    END LOOP;
	  -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
	  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_InternetBank23');   

    gene0002.pc_escreve_xml(pr_xml            => pr_xml_operacao23
                           ,pr_texto_completo => vr_xml_temp
                           ,pr_texto_novo     => '</CONTAS_DESTINO>');                                                      
	  -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
	  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_InternetBank23');                                                       

    inet0001.pc_consulta_finalidades(pr_cdcooper        => pr_cdcooper
                                    ,pr_cdagenci        => pr_cdagenci
                                    ,pr_nrdcaixa        => pr_nrdcaixa
                                    ,pr_cdcritic        => vr_cdcritic
                                    ,pr_dscritic        => vr_dscritic
                                    ,pr_tab_finalidades => vr_tab_finalidades
                                    ,pr_dsretorn        => vr_des_erro);

    IF vr_des_erro <> 'OK' THEN
      RAISE vr_exc_erro;
    END IF;
	  -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
	  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_InternetBank23');   

    -- Insere o cabeçalho do XML 
    gene0002.pc_escreve_xml(pr_xml            => pr_xml_operacao23
                           ,pr_texto_completo => vr_xml_temp
                           ,pr_texto_novo     => '<FINALIDADES>');
	  -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
	  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_InternetBank23');   

    vr_index := vr_tab_finalidades.FIRST;
    
    WHILE vr_index IS NOT NULL LOOP
      
      gene0002.pc_escreve_xml(pr_xml            => pr_xml_operacao23
                             ,pr_texto_completo => vr_xml_temp 
                             ,pr_texto_novo     =>   '<FINALIDADE>'
                                                   ||   '<cdfinali>'||TO_CHAR(vr_tab_finalidades(vr_index).cdfinali)    ||'</cdfinali>'
                                                   ||   '<dsfinali>'||TO_CHAR(vr_tab_finalidades(vr_index).dsfinali)    ||'</dsfinali>'
                                                   ||   '<flgselec>'||TO_CHAR(vr_tab_finalidades(vr_index).flgselec)    ||'</flgselec>'
                                                  || '</FINALIDADE>');	
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
	    GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_InternetBank23');   

      vr_index := vr_tab_finalidades.NEXT(vr_index);
      
    END LOOP;

    gene0002.pc_escreve_xml(pr_xml            => pr_xml_operacao23
                           ,pr_texto_completo => vr_xml_temp 
                           ,pr_texto_novo     => '</FINALIDADES>');
	  -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
	  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_InternetBank23');   

    CINF0001.pc_carrega_cooperativas(pr_nmcooper     => vr_nmcooper,
                                     pr_tab_crapcop  => vr_tab_crapcop,
                                     pr_xml_dsmsgerr => vr_xml_dsmsgerr,
                                     pr_dsretorn     => vr_des_erro);
    
    IF vr_des_erro <> 'OK'               OR 
      TRIM(vr_xml_dsmsgerr) IS NOT NULL THEN
      --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
      vr_cdcritic := 1128; --Nao foi possivel carregar cooperativas
      vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);  
      RAISE vr_exc_erro;
    END IF;
	  -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
	  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_InternetBank23');   

    gene0002.pc_escreve_xml(pr_xml            => pr_xml_operacao23
                           ,pr_texto_completo => vr_xml_temp 
                           ,pr_texto_novo     => vr_tab_crapcop);
	  -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
	  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_InternetBank23');   

    OPEN cr_crapcop (pr_cdcooper);
      
    FETCH cr_crapcop INTO rw_crapcop;
      
    IF cr_crapcop%NOTFOUND THEN
      --Fechar Cursor
      CLOSE cr_crapcop;
      --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
      vr_cdcritic := 1076; --Registro de cooperativa origem nao encontrado
      vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);        
      RAISE vr_exc_erro;
    ELSE
      CLOSE cr_crapcop;
    END IF;

    -- Insere a tag de BANCOS no XML
    gene0002.pc_escreve_xml(pr_xml            => pr_xml_operacao23
                           ,pr_texto_completo => vr_xml_temp
                           ,pr_texto_novo     => '<BANCOS>');
	  -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
	  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_InternetBank23');   
                           
    -- Vamos listar somente os top 10 bancos ativos
    FOR rw_crapban IN cr_crapban (pr_cdbcoctl => rw_crapcop.cdbcoctl
                                 ,pr_flmobile => pr_flmobile) LOOP

      gene0002.pc_escreve_xml(pr_xml            => pr_xml_operacao23
                             ,pr_texto_completo => vr_xml_temp 
                             ,pr_texto_novo     =>  '<BANCO>'
                                                  ||   '<cddbanco>'|| TO_CHAR(rw_crapban.cdbccxlt,'999')    ||'</cddbanco>'
                                                  ||   '<nmresbcc>'|| rw_crapban.nmresbcc ||'</nmresbcc>'
                                                  ||   '<nrispbif>'|| TO_CHAR(rw_crapban.nrispbif)  ||'</nrispbif>'
                                                  || '</BANCO>');
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
	    GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_InternetBank23');   
      vr_fltemban := TRUE;
      
    END LOOP;

    IF NOT vr_fltemban THEN
      --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
      vr_cdcritic := 57; --Bancos nao cadastrados
      vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
      RAISE vr_exc_erro;
    END IF;

    gene0002.pc_escreve_xml(pr_xml            => pr_xml_operacao23
                           ,pr_texto_completo => vr_xml_temp 
                           ,pr_texto_novo     => '</BANCOS>');
	  -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
	  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_InternetBank23');   
    
    -- Insere a tag de TIPOS DE CONTA no XML
    gene0002.pc_escreve_xml(pr_xml            => pr_xml_operacao23
                           ,pr_texto_completo => vr_xml_temp
                           ,pr_texto_novo     => '<TIPOSCONTA>');
	  -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
	  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_InternetBank23');   
                           
    FOR rw_tipcta IN cr_tipcta LOOP

      gene0002.pc_escreve_xml(pr_xml            => pr_xml_operacao23
                             ,pr_texto_completo => vr_xml_temp 
                             ,pr_texto_novo     =>  '<TIPOCONTA>'
                                                  ||   '<cdtipcta>'|| TO_CHAR(rw_tipcta.cdtipcta)    ||'</cdtipcta>'
                                                  ||   '<dstipcta>'|| rw_tipcta.dstipcta ||'</dstipcta>'
                                                  || '</TIPOCONTA>');
      
    END LOOP;
	  -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
	  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_InternetBank23');   

    gene0002.pc_escreve_xml(pr_xml            => pr_xml_operacao23
                           ,pr_texto_completo => vr_xml_temp 
                           ,pr_fecha_xml      => TRUE
                           ,pr_texto_novo     => '</TIPOSCONTA>');
	  -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
	  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_InternetBank23');   

    pr_dsretorn := 'OK';
    
    --Flag para identificar se há tarifa ou não
    vr_flghbtrf := GENE0001.fn_param_sistema(pr_nmsistem => 'CRED'
                                            ,pr_cdcooper => pr_cdcooper
                                            ,pr_cdacesso => 'FOLHAIB_TARI_TRF_TPSAL');

    -- Insere o cabeçalho do XML 
    gene0002.pc_escreve_xml(pr_xml            => pr_xml_operacao23
                           ,pr_texto_completo => vr_xml_temp
                           ,pr_texto_novo     => '<TRANSFERENCIA>');                             
	  -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
	  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_InternetBank23');                               

    --Se transferencia tipo salário está ativo        
    IF vr_flghbtrc = 1 THEN    
      
      --Se há tarifas
      IF vr_flghbtrf = 1 THEN
        -- Busca o valor da tarifa
        TARI0001.pc_carrega_dados_tar_vigente(pr_cdcooper  => pr_cdcooper       --Codigo Cooperativa
                                             ,pr_cdbattar  => 'TRANSTPSAL'      -- Codigo Tarifa 
                                             ,pr_vllanmto  => 0                 -- Valor Lancamento
                                             ,pr_cdprogra  => 'INTERNETBANK23'  -- Codigo Programa  
                                             ,pr_cdhistor  => vr_cdhistor       -- Codigo Historico
                                             ,pr_cdhisest  => vr_cdhisest       -- Historico Estorno
                                             ,pr_vltarifa  => vr_vltarifa       -- Valor tarifa
                                             ,pr_dtdivulg  => vr_dtdivulg       -- Data Divulgacao
                                             ,pr_dtvigenc  => vr_dtvigenc       -- Data Vigencia
                                             ,pr_cdfvlcop  => vr_cdfvlcop       -- Codigo faixa valor cooperativa
                                             ,pr_cdcritic  => vr_cdcritic       -- Codigo Critica
                                             ,pr_dscritic  => vr_dscritic       -- Descricao Critica
                                             ,pr_tab_erro  => vr_tab_erro);     -- Tabela erros

        -- Se ocorreu erro
        IF vr_cdcritic IS NOT NULL OR vr_dscritic IS NOT NULL THEN
                  
          -- Se possui erro no vetor
          IF vr_tab_erro.Count >  0   THEN
            vr_cdcritic := vr_tab_erro(vr_tab_erro.FIRST).cdcritic;
            vr_dscritic := vr_tab_erro(vr_tab_erro.FIRST).dscritic;
          ELSE
            --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
            vr_cdcritic := 1058; --Nao foi possivel carregar a tarifa
            vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
          END IF;
          
          -- Levantar Excecao
          RAISE vr_exc_erro;
          
        END IF; 
	      -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
	      GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_InternetBank23');   
        
        vr_dsmsgtar := 'A transferência de Crédito Salário é tarifada em R$ ' || 
                       to_char(vr_vltarifa, 'FM999G999G990D90')  || ' por lançamento.';
                       
        gene0002.pc_escreve_xml(pr_xml            => pr_xml_operacao23
                               ,pr_texto_completo => vr_xml_temp 
                               ,pr_texto_novo     =>  '<TARIFA>'
                                                   || '<dsmsgtar>'|| vr_dsmsgtar ||'</dsmsgtar>'                                             
                                                   || '</TARIFA>');
	      -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
	      GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_InternetBank23');   
        
      END IF;
      
      --horário de início transferência CADPAC PA 90
      folh0001.pc_hrtransfer_internet(pr_cdcooper => pr_cdcooper
                                     ,pr_hrtrfini => vr_hrtrfini
                                     ,pr_hrtrffim => vr_hrtrffim);
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
	    GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_InternetBank23');   
      
      --Horario Transf no dia (tipo Crédito Salário)
      vr_hrlimtrf := GENE0001.fn_param_sistema(pr_nmsistem => 'CRED'
                                            	,pr_cdcooper => pr_cdcooper
                                              ,pr_cdacesso => 'FOLHAIB_HR_LIM_TRF_TPSAL');
      
      --Mensagem que aparecera na tela de transferencia
      vr_dsmsgtrf := 'Horário permitido para transf. de salário não agendada  das ' || vr_hrtrfini ||' às ' || vr_hrlimtrf || ' (Horário de Brasília).';
      
      gene0002.pc_escreve_xml(pr_xml            => pr_xml_operacao23
                             ,pr_texto_completo => vr_xml_temp 
                             ,pr_texto_novo     =>  '<HORATRANS>'
                                                 || '<dsmsgtrf>'|| vr_dsmsgtrf ||'</dsmsgtrf>'                                             
                                                 || '</HORATRANS>');
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
	    GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_InternetBank23');   
      
    END IF;
                                                    
    gene0002.pc_escreve_xml(pr_xml            => pr_xml_operacao23
                           ,pr_texto_completo => vr_xml_temp 
                           ,pr_fecha_xml      => TRUE
                           ,pr_texto_novo     => '</TRANSFERENCIA>');  
	  -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL); 
    
  EXCEPTION
    -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
    -- Disparadores:  InternetBank23.p "Sem procedure"      - Não grava TBGEN 
    WHEN vr_exc_erro THEN
      
      ROLLBACK;
      
      vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic, pr_dscritic => vr_dscritic); 
      IF vr_dscritic IS NULL THEN
        vr_cdcritic := 1142; -- Erro inesperado. Nao foi possivel efetuar a transferencia. Tente novamente ou contacte seu PA
        -- buscar descrição
        vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic); 
      END IF;
      
      -- definir retorno
      pr_xml_dsmsgerr := '<dsmsgerr>'|| vr_dscritic ||'</dsmsgerr>';
      pr_dsretorn := 'NOK';
      
      pc_proc_geracao_log(pr_flgtrans => 0 /*false*/
                         ,pr_flgpesqu => pr_flgpesqu
                         ,pr_tpoperac => pr_tpoperac);
                          
      -- O atributo dscritic da tabela craplgm tem 245 caracteres e não suporta uma descrição com parametros 
      --> Geração de log                             
      pc_controla_log_programa(pr_cdcooper      => pr_cdcooper
                              ,pr_dstiplog      => 'E' -- Tipo de Log - E = erro
                              ,pr_tpocorrencia  => 1   -- 1-Erro de negocio
                              ,pr_cdcriticidade => 1
                              ,pr_cdmensagem    => vr_cdcritic  -- Codigo do Log
                              ,pr_dsmensagem    => vr_dscritic || -- Descrição
                                                   vr_dsparame                                                                                             
                               );                           
    WHEN OTHERS THEN
      -- No caso de erro de programa gravar tabela especifica de log
      -- sai chamada direta - btch0001.pc_log_internal_exception(pr_cdcooper);
      CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);               
      
      vr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => 9999)  ||
                    'PAGA0001.pc_InternetBank23'||
                    '. ' ||  SQLERRM ||
                    '.'  || vr_dsparame ;	
      
      ROLLBACK;
      
      -- Erro inesperado. Nao foi possivel efetuar a transferencia. Tente novamente ou contacte seu PA                         
      -- buscar descrição
      vr_dscriaux := gene0001.fn_busca_critica(pr_cdcritic => 1142);
      
      -- definir retorno
      pr_xml_dsmsgerr := '<dsmsgerr>' || vr_dscriaux || '</dsmsgerr>';
      pr_dsretorn := 'NOK';
      
      pc_proc_geracao_log(pr_flgtrans => 0 /*false*/
                         ,pr_flgpesqu => pr_flgpesqu
                         ,pr_tpoperac => pr_tpoperac);
  
      -- O atributo dscritic da tabela craplgm tem 245 caracteres e não suporta uma descrição com parametros 
      --> Geração de log                             
      pc_controla_log_programa(pr_cdcooper      => pr_cdcooper
                              ,pr_dstiplog      => 'E' -- Tipo de Log - E = erro
                              ,pr_tpocorrencia  => 2   -- 1-Erro de negocio
                              ,pr_cdmensagem    => 9999  -- Codigo do Log
                              ,pr_dsmensagem    => vr_dscritic              
                               );   
  END pc_InternetBank23; 



  /* Procedure para gravar solicitação de envio da jdda */
  PROCEDURE pc_solicita_crapdda ( pr_cdcooper  IN crapcop.cdcooper%type   --Codigo Cooperativa
                                 ,pr_dtmvtolt  IN crapdat.dtmvtolt%TYPE   --Data pagamento
                                 ,pr_cobrowid  IN ROWID                   --rowid de cobranca
                                 ,pr_dscritic  OUT VARCHAR2) IS           --Descricao da critica
    -- .........................................................................
    --
    --  Programa : pc_solicita_crapdda
    --  Sistema  : Cred
    --  Sigla    : PAGA0001
    --  Autor    : Odirlei Busana - AMcom
    --  Data     : Maio/2014.                   Ultima atualizacao: 15/12/2017
    --
    --  Dados referentes ao programa:
    --
    --   Frequencia: Sempre que for chamado
    --   Objetivo  : Procedure para gravar solicitação na crapdda, para posteriormente comunicar com a JDDA
    --
    --   Alterações:
    --               15/12/2017 - Incluido nome do módulo logado
    --                            No caso de erro de programa gravar tabela especifica de log                     
    --                            Ajuste mensagem de erro 
    --                           (Belli - Envolti - Chamado 779415)    
    --

    --Agrupa os parametros - 15/12/2017 - Chamado 779415 
    vr_dsparame VARCHAR2(4000);
    --Controle de exceção - 15/12/2017 - Chamado 779415 
    vr_dscritic VARCHAR2(4000);
    vr_exc_erro EXCEPTION;
  BEGIN
	  -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_solicita_crapdda');
    
    --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
    vr_dsparame := ' pr_cdcooper:'  || pr_cdcooper ||
                   ', pr_dtmvtolt:' || pr_dtmvtolt ||
                   ', pr_cobrowid:' || pr_cobrowid;
    BEGIN
      INSERT INTO CRAPDDA
            ( cdcooper,
              dtsolici,
              dtmvtolt,
              cobrowid,
              dtproces,
              flgerado)
        VALUES
            ( pr_cdcooper, -- cdcooper
              SYSDATE,     -- dtsolici
              pr_dtmvtolt, -- dtmvtolt,
              pr_cobrowid, -- cobrowid
              NULL,        -- dtproces
              'N');        -- flgerado
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);
    EXCEPTION
      WHEN OTHERS THEN
        -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
        CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);            
        -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => 1034)  ||
                      'CRAPDDA(2):' ||
                      ' cdcooper:' || pr_cdcooper ||
                      ', dtsolici:' || 'SYSDATE'   ||
                      ', dtmvtolt:' || pr_dtmvtolt ||
                      ', cobrowid:' || pr_cobrowid ||
                      ', dtproces:' || 'NULL' ||      
                      ', flgerado:' || 'N'    ||      
                      '. ' || SQLERRM;
         --Levantar Excecao
         RAISE vr_exc_erro;
    END;
	  -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);
  EXCEPTION
    -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
    -- Disparadores: PAGA0001.pc_paga_titulo                 - Não grava TBGEN 
    --               PAGA0001.pc_solicita_crapdda_prog       - Grava TBGEN
    --               Jobs.JBDDA_PROCESSA_CRAPDDA             - Não grava TBGEN
    WHEN vr_exc_erro THEN
      pr_dscritic:= vr_dscritic || vr_dsparame;
    WHEN OTHERS THEN
      -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
      CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);            
      -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
      pr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => 9999)||
                    'paga0001.pc_solicita_crapdda' ||
                    '. ' || SQLERRM || 
                    '.'  || vr_dsparame;

  END pc_solicita_crapdda;

  /* Procedure para gravar solicitação de envio para a CIP - Chamada Progress */
  PROCEDURE pc_solicita_crapdda_prog (  pr_cdcooper  IN crapcop.cdcooper%type   --Codigo Cooperativa
                                       ,pr_dtmvtolt  IN crapdat.dtmvtolt%TYPE   --Data pagamento
                                       ,pr_cobrecid  IN crapcob.progress_recid%TYPE  --recid de cobranca
                                       ,pr_dscritic  OUT VARCHAR2) IS           --Descricao da critica
    /* .........................................................................
    --
    --  Programa : pc_solicita_crapdda
    --  Sistema  : Cred
    --  Sigla    : PAGA0001
    --  Autor    : Odirlei Busana - AMcom
    --  Data     : Junho/2017.                   Ultima atualizacao: 15/12/2017
    --
    --  Dados referentes ao programa:
    --
    --   Frequencia: Sempre que for chamado
    --   Objetivo  : Procedure para gravar solicitação na crapdda, para posteriormente comunicar para a CIP - Chamada Progress 
    --   
    --   Alterações:    
    --               15/12/2017 - Incluido nome do módulo logado
    --                            No caso de erro de programa gravar tabela especifica de log                     
    --                            Ajuste mensagem de erro 
    --                           (Belli - Envolti - Chamado 779415)    
    --
    --
    */
    
    ----->>> CURSORES <<<-----
    --> Buscar boleto
    CURSOR cr_crapcob IS
      SELECT cob.rowid
        FROM crapcob cob
       WHERE cob.progress_recid = pr_cobrecid;
    rw_crapcob cr_crapcob%ROWTYPE;
    ----->>> VARIAVEIS <<<-----
    vr_dscritic VARCHAR2(4000);
    vr_exc_erro EXCEPTION;
    --Agrupa os parametros - 15/12/2017 - Chamado 779415 
    vr_dsparame VARCHAR2(4000);
    
  BEGIN
	  -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
	  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_solicita_crapdda_prog');
    
    --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
    vr_dsparame :=  ' pr_cdcooper:'  || pr_cdcooper ||
                    ', pr_dtmvtolt:' || pr_dtmvtolt ||
                    ', pr_cobrecid:' || pr_cobrecid;
   
    --> Buscar dados do boleto
    OPEN cr_crapcob;
    FETCH cr_crapcob INTO rw_crapcob;
    
    IF cr_crapcob%NOTFOUND THEN     
      CLOSE cr_crapcob;
      --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
      --Boleto de cobranca nao econtrado
      vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => 1078);
      RAISE vr_exc_erro;
    ELSE
      CLOSE cr_crapcob;
    END IF;

    pc_solicita_crapdda ( pr_cdcooper  => pr_cdcooper   --Codigo Cooperativa
                         ,pr_dtmvtolt  => pr_dtmvtolt   --Data pagamento
                         ,pr_cobrowid  => rw_crapcob.rowid   --rowid de cobranca
                         ,pr_dscritic  => vr_dscritic);   --Descricao da critica
    
    IF vr_dscritic IS NOT NULL THEN
      RAISE vr_exc_erro;
    END IF;
	  -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);
    
  EXCEPTION
    -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
    -- Disparadores: b1wgen0088.p.liquidacao-intrabancaria-dda - Não grava TBGEN 
    WHEN vr_exc_erro THEN
      --> Geração de log                             
      pc_controla_log_programa(   pr_cdcooper     => pr_cdcooper
                                 ,pr_dstiplog     => 'E'  -- E = erro
                                 ,pr_tpocorrencia => 2    -- 1-Erro de negocio/ 2-Erro nao tratado
                                 ,pr_cdmensagem   => 0    -- Codigo do Log
                                 ,pr_dsmensagem   => vr_dscritic || -- Descrição do Log
                                                     vr_dsparame
                                 );  
      pr_dscritic := vr_dscritic; 
    WHEN OTHERS THEN
      -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
      CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);  
      -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
      pr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => 9999) ||
                    'paga0001.pc_solicita_crapdda_prog' ||
                    '. ' || SQLERRM ||
                    '.'  || vr_dsparame;
      --> Geração de log                             
      pc_controla_log_programa(   pr_cdcooper     => pr_cdcooper
                                 ,pr_dstiplog     => 'E' -- E = erro
                                 ,pr_tpocorrencia => 2   -- 1-Erro de negocio/ 2-Erro nao tratado
                                 ,pr_cdmensagem   => 9999        -- Codigo do Log
                                 ,pr_dsmensagem   => pr_dscritic -- Descrição do Log
                                 );                            
  END pc_solicita_crapdda_prog;


  /* Gerar relatorio agendamentos da internet - crrl482 */
  PROCEDURE pc_gera_relatorio_debnet ( pr_cdcooper    IN crapcop.cdcooper%TYPE       --Cooperativa
                                      ,pr_cdprogra    IN crapprg.cdprogra%TYPE       --Codigo do Programa
                                      ,pr_tab_agendto IN PAGA0001.typ_tab_agendto    --Tabela de memoria com os agendamentos
                                      ,pr_rw_crapdat  IN BTCH0001.cr_crapdat%ROWTYPE --Registro de Data
                                      ,pr_nmrelato    OUT VARCHAR2                   --Nome do relatorio gerado
                                      ,pr_cdcritic    OUT INTEGER                    --Codigo do erro
                                      ,pr_dscritic    OUT VARCHAR2) IS               --Descricao do erro
    -- ..........................................................................
    --
    --  Programa : pc_gera_relatorio              Antiga: crps509.i/gera-relatorio
    --  Sistema  : Rotinas Internet
    --  Sigla    : AGEN
    --  Autor    : Alisson C. Berrido - AMcom
    --  Data     : Junho/2013.                   Ultima atualizacao: 15/12/2017
    --
    --  Dados referentes ao programa:
    --
    --   Frequencia: Sempre que for chamado
    --   Objetivo  : Procedure para gerar relatorio crrl482
    --
    --   Alteracao : 29/09/2015 - Adicionado o parametro pr_nmrelato para que seja retornado
    --                            o nome do relatorio que foi gerado (Douglas - Chamado 285228)
    --
    --               20/11/2015 - Tratamento para nao utilizar inprocess, será sempre gerado 
    --                            relatorio crrl482 SD358495 (Odirlei-AMcom)
    --
    --               06/01/2016 - Alterar nome do procedimento para evitar overlay devido
    --                            a problemas com a sincronização do schema holder (Odirlei-AMcom)             
    --
    --               15/12/2017 - Incluido nome do módulo logado
    --                            No caso de erro de programa gravar tabela especifica de log                     
    --                            Ajuste mensagem de erro 
    --                           (Belli - Envolti - Chamado 779415)    
    --        
    -- ..........................................................................

  BEGIN
    DECLARE
      --Variaveis Locais
      vr_dtrefere    DATE;
      vr_flgimpr     CHAR;
      vr_cdcooper    INTEGER;
      vr_sequencia   INTEGER;
      vr_iddebito    VARCHAR2(4);
      vr_idtipdoc    VARCHAR2(4);
      vr_idtiptra    VARCHAR2(4);
      vr_dircopia    VARCHAR2(100);
      vr_titulo      VARCHAR2(100);
      vr_dstransa    VARCHAR2(100);
      vr_dstiptra    VARCHAR2(100);
      vr_nom_direto  VARCHAR2(100);
      vr_nom_arquivo VARCHAR2(100);
      --Variavel de Indice para agendamento
      vr_index_agendto VARCHAR2(300);
      vr_index_relato  VARCHAR2(300);
      --Variaveis de Erro
      vr_cdcritic crapcri.cdcritic%TYPE;
      vr_dscritic VARCHAR2(4000);
      --Variaveis de Excecao
      vr_exc_erro EXCEPTION;
      -- Variável para armazenar as informações em XML
      vr_des_xml     CLOB;
      --Tabela de memoria temporaria para relatório
      vr_tab_relato PAGA0001.typ_tab_agendto;
      --Agrupa os parametros - 15/12/2017 - Chamado 779415 
      vr_dsparame VARCHAR2(4000);

      --Escrever no arquivo CLOB
      PROCEDURE pc_escreve_xml(pr_des_dados IN VARCHAR2) IS
      BEGIN
        --Escrever no arquivo XML
        dbms_lob.writeappend(vr_des_xml,length(pr_des_dados),pr_des_dados);
      END;

    BEGIN
	      -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		    GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_gera_relatorio_debnet');
       --Inicializar variaveis retorno
        pr_cdcritic:= NULL;
        pr_dscritic:= NULL;
        
        --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
        vr_dsparame := ' pr_cdcooper:'  || pr_cdcooper ||
                       ', pr_cdprogra:' || pr_cdprogra;
        
        vr_nom_arquivo := 'crrl482_' || to_char( gene0002.fn_busca_time );
        vr_dtrefere:= pr_rw_crapdat.dtmvtolt;

        IF pr_tab_agendto.Count > 0 THEN
          --Inicializar sequencial impressao
          vr_sequencia:= 0;
          --Limpar tabela relatorio
          vr_tab_relato.DELETE;
          --Percorrer a tabela de memoria montando novo indice
          vr_index_agendto:= pr_tab_agendto.FIRST;
          WHILE vr_index_agendto IS NOT NULL LOOP
            --Verificar se foi pago
            IF pr_tab_agendto(vr_index_agendto).fldebito THEN
              vr_iddebito:= 'PAGO';
            ELSE
              vr_iddebito:= 'ABER';
            END IF;
            --Verificar se é true ou false
            IF pr_tab_agendto(vr_index_agendto).fltipdoc THEN
              vr_idtipdoc:= 'ZCON';
            ELSE
              vr_idtipdoc:= 'ATIT';
            END IF;
            IF pr_tab_agendto(vr_index_agendto).fltiptra THEN
              vr_idtiptra:= 'SIM';
            ELSE
              vr_idtiptra:= 'NAO';
            END IF;
            --Incrementar Sequencia
            vr_sequencia:= vr_sequencia + 1;
            --Montar novo indice
            vr_index_relato:= rpad(pr_tab_agendto(vr_index_agendto).dsorigem,20,'#')||  --dsorigem
                              vr_iddebito||                                             --fldebito
                              vr_idtiptra||                                             --fltiptra
                              vr_idtipdoc||                                             --fltipdoc
                              lpad(pr_tab_agendto(vr_index_agendto).cdcooper,5,'0')||   --cdcooper
                              lpad(pr_tab_agendto(vr_index_agendto).cdagenci,10,'0')||  --cdagenci
                              lpad(pr_tab_agendto(vr_index_agendto).nrdconta,10,'0')||  --nrdconta
                              lpad(to_char(pr_tab_agendto(vr_index_agendto).dttransa,'DDMMYYYY'),8,'0')|| --data transacao
                              lpad(pr_tab_agendto(vr_index_agendto).hrtransa,8,'0')||   --hora transacao
                              lpad(pr_tab_agendto(vr_index_agendto).vllanaut * 100,10,'0')||  --Valor lancamento
                              lpad(vr_sequencia,10,'0');                                --sequencia
            --Inserir dados na tabela de memoria
            vr_tab_relato(vr_index_relato).cdcooper:= pr_tab_agendto(vr_index_agendto).cdcooper;
            vr_tab_relato(vr_index_relato).dscooper:= pr_tab_agendto(vr_index_agendto).dscooper;
            vr_tab_relato(vr_index_relato).nrdconta:= pr_tab_agendto(vr_index_agendto).nrdconta;
            vr_tab_relato(vr_index_relato).nmprimtl:= pr_tab_agendto(vr_index_agendto).nmprimtl;
            vr_tab_relato(vr_index_relato).cdagenci:= pr_tab_agendto(vr_index_agendto).cdagenci;
            vr_tab_relato(vr_index_relato).cdtiptra:= pr_tab_agendto(vr_index_agendto).cdtiptra;
            vr_tab_relato(vr_index_relato).fltiptra:= pr_tab_agendto(vr_index_agendto).fltiptra;
            vr_tab_relato(vr_index_relato).dstiptra:= pr_tab_agendto(vr_index_agendto).dstiptra;
            vr_tab_relato(vr_index_relato).fltipdoc:= pr_tab_agendto(vr_index_agendto).fltipdoc;
            vr_tab_relato(vr_index_relato).dstransa:= pr_tab_agendto(vr_index_agendto).dstransa;
            vr_tab_relato(vr_index_relato).vllanaut:= pr_tab_agendto(vr_index_agendto).vllanaut;
            vr_tab_relato(vr_index_relato).dttransa:= pr_tab_agendto(vr_index_agendto).dttransa;
            vr_tab_relato(vr_index_relato).hrtransa:= pr_tab_agendto(vr_index_agendto).hrtransa;
            vr_tab_relato(vr_index_relato).nrdocmto:= pr_tab_agendto(vr_index_agendto).nrdocmto;
            vr_tab_relato(vr_index_relato).dslindig:= pr_tab_agendto(vr_index_agendto).dslindig;
            vr_tab_relato(vr_index_relato).dscritic:= pr_tab_agendto(vr_index_agendto).dscritic;
            vr_tab_relato(vr_index_relato).nrdrecid:= pr_tab_agendto(vr_index_agendto).nrdrecid;
            vr_tab_relato(vr_index_relato).fldebito:= pr_tab_agendto(vr_index_agendto).fldebito;
            vr_tab_relato(vr_index_relato).dshistor:= pr_tab_agendto(vr_index_agendto).dshistor;
            vr_tab_relato(vr_index_relato).cdctrlcs:= pr_tab_agendto(vr_index_agendto).cdctrlcs;

            IF pr_tab_agendto(vr_index_agendto).dsorigem = 'DEBAUT' THEN
              vr_tab_relato(vr_index_relato).dsorigem := 'DEBITO AUTOMATICO';
            ELSIF pr_tab_agendto(vr_index_agendto).dsorigem = 'PORTABILIDAD' THEN
              -- Quando a origem for portabilidade, deve agrupar no relatório 
              -- como Internet (Renato - Supero - 22/05/2019)
              vr_tab_relato(vr_index_relato).dsorigem := 'INTERNET';
            ELSE
              vr_tab_relato(vr_index_relato).dsorigem:= pr_tab_agendto(vr_index_agendto).dsorigem;
            END IF;

            vr_tab_relato(vr_index_relato).idseqttl:= pr_tab_agendto(vr_index_agendto).idseqttl;

            --Proximo registro do vetor
            vr_index_agendto:= pr_tab_agendto.NEXT(vr_index_agendto);
          END LOOP;

          -- Inicializar o CLOB
          dbms_lob.createtemporary(vr_des_xml, TRUE);
          dbms_lob.open(vr_des_xml, dbms_lob.lob_readwrite);
          -- Inicilizar as informacoes do XML
          pc_escreve_xml('<?xml version="1.0" encoding="utf-8"?><crrl482><contas>');

          vr_index_relato:= vr_tab_relato.FIRST;
          WHILE vr_index_relato IS NOT NULL LOOP
            --Se for para listar todas ou for igual a informada
            IF pr_cdcooper = 0 OR vr_tab_relato(vr_index_relato).cdcooper = pr_cdcooper THEN

              -- Se estivermos processando o primeiro registro do vetor ou mudou a origem
              IF vr_index_relato = vr_tab_relato.FIRST OR
                vr_tab_relato(vr_index_relato).dsorigem <> vr_tab_relato(vr_tab_relato.PRIOR(vr_index_relato)).dsorigem THEN
                -- Busca do diretório base da cooperativa
                vr_nom_direto := gene0001.fn_diretorio(pr_tpdireto => 'C' -- /usr/coop
                                                      ,pr_cdcooper => vr_tab_relato(vr_index_relato).cdcooper
                                                      ,pr_nmsubdir => '/rl'); --> Utilizaremos o rl

                -- Adicionar o no de origem
                pc_escreve_xml('<origem dsorigem="'||vr_tab_relato(vr_index_relato).dsorigem||'">');
              END IF;

              -- Se estivermos processando o primeiro registro do vetor ou mudou o titulo
              IF vr_index_relato = vr_tab_relato.FIRST OR
                vr_tab_relato(vr_index_relato).dsorigem <> vr_tab_relato(vr_tab_relato.PRIOR(vr_index_relato)).dsorigem OR
                vr_tab_relato(vr_index_relato).fldebito <> vr_tab_relato(vr_tab_relato.PRIOR(vr_index_relato)).fldebito OR
                vr_tab_relato(vr_index_relato).fltiptra <> vr_tab_relato(vr_tab_relato.PRIOR(vr_index_relato)).fltiptra THEN
                --Determinar o titulo
                IF vr_tab_relato(vr_index_relato).fldebito THEN
                  vr_titulo:= 'EFETUADOS';
                ELSE
                  vr_titulo:= 'NAO EFETUADOS';
                END IF;
                -- Adicionar o no de titulo
                pc_escreve_xml('<titulo dstitulo="'||vr_titulo||'"
                                        dtrefere="'||To_Char(vr_dtrefere,'DD/MM/YYYY')||'">');
              END IF;

              -- Se estivermos processando o primeiro registro do vetor ou mudou o tipo documento ou a cooperativa
              IF vr_index_relato = vr_tab_relato.FIRST OR
                vr_tab_relato(vr_index_relato).dsorigem <> vr_tab_relato(vr_tab_relato.PRIOR(vr_index_relato)).dsorigem OR
                vr_tab_relato(vr_index_relato).fldebito <> vr_tab_relato(vr_tab_relato.PRIOR(vr_index_relato)).fldebito OR
                vr_tab_relato(vr_index_relato).fltiptra <> vr_tab_relato(vr_tab_relato.PRIOR(vr_index_relato)).fltiptra OR
                vr_tab_relato(vr_index_relato).fltipdoc <> vr_tab_relato(vr_tab_relato.PRIOR(vr_index_relato)).fltipdoc OR
                vr_tab_relato(vr_index_relato).cdcooper <> vr_tab_relato(vr_tab_relato.PRIOR(vr_index_relato)).cdcooper THEN

                --Determinar o titulo
                IF vr_tab_relato(vr_index_relato).cdtiptra = 4 THEN
                  vr_dstiptra := 'TED';                
                ELSIF vr_tab_relato(vr_index_relato).fltiptra THEN
                  IF vr_tab_relato(vr_index_relato).fltipdoc THEN
                    vr_dstiptra:= 'TRANSFERENCIAS';
                  ELSE
                    vr_dstiptra:= 'CREDITOS DE SALARIO';
                  END IF;
                ELSE
                  IF vr_tab_relato(vr_index_relato).fltipdoc THEN
                    vr_dstiptra:= 'CONVENIOS';
                  ELSE
                    vr_dstiptra:= 'TITULOS';
                  END IF;
                END IF;
                -- Adicionar o no de documento
                pc_escreve_xml('<docto dstiptra="'||vr_dstiptra||'"
                                       dscooper="'||vr_tab_relato(vr_index_relato).dscooper||'">');
              END IF;

              --Montar descricao transacao e indicar se imprime ou nao critica
              IF vr_tab_relato(vr_index_relato).fldebito THEN
                IF vr_tab_relato(vr_index_relato).fltiptra OR
                   vr_tab_relato(vr_index_relato).cdtiptra = 6 THEN
                  vr_dstransa:= vr_tab_relato(vr_index_relato).dstransa;
                ELSE
                  vr_dstransa:= vr_tab_relato(vr_index_relato).dslindig;
                END IF;
                --Nao imprimir critica
                vr_flgimpr:= 'N';
              ELSE
                IF vr_tab_relato(vr_index_relato).fltiptra OR
                   vr_tab_relato(vr_index_relato).cdtiptra = 6 THEN
                  vr_dstransa:= vr_tab_relato(vr_index_relato).dstransa;
                ELSE
                  vr_dstransa:= vr_tab_relato(vr_index_relato).dslindig;
                END IF;
                --imprimir critica
                vr_flgimpr:= 'S';
              END IF;
              --Montar tag da conta para arquivo XML
              pc_escreve_xml
              ('<conta>
                  <cdagenci>'||vr_tab_relato(vr_index_relato).cdagenci||'</cdagenci>
                  <nrdconta>'||GENE0002.fn_mask_conta(vr_tab_relato(vr_index_relato).nrdconta)||'</nrdconta>
                  <nmprimtl>'||SubStr(vr_tab_relato(vr_index_relato).nmprimtl,1,40)||'</nmprimtl>
                  <idseqttl>'||vr_tab_relato(vr_index_relato).idseqttl||'</idseqttl>
                  <dstransa>'||vr_dstransa||'</dstransa>
                  <vllanaut>'||To_Char(vr_tab_relato(vr_index_relato).vllanaut,'fm999g999g999g990d00')||'</vllanaut>
                  <nrdocmto>'||vr_tab_relato(vr_index_relato).nrdocmto||'</nrdocmto>
                  <dshistor>'||vr_tab_relato(vr_index_relato).dshistor||'</dshistor>
                  <dscritic>'||UPPER(vr_tab_relato(vr_index_relato).dscritic)||'</dscritic>
                  <imprime>'||vr_flgimpr||'</imprime>
                </conta>');

              --Se mudou o tipo documento ou cooperativa ou chegou ao final do vetor
              IF vr_index_relato = vr_tab_relato.LAST OR
                 vr_tab_relato(vr_index_relato).dsorigem <> vr_tab_relato(vr_tab_relato.NEXT(vr_index_relato)).dsorigem OR
                 vr_tab_relato(vr_index_relato).fldebito <> vr_tab_relato(vr_tab_relato.NEXT(vr_index_relato)).fldebito OR
                 vr_tab_relato(vr_index_relato).fltiptra <> vr_tab_relato(vr_tab_relato.NEXT(vr_index_relato)).fltiptra OR
                 vr_tab_relato(vr_index_relato).fltipdoc <> vr_tab_relato(vr_tab_relato.NEXT(vr_index_relato)).fltipdoc OR
                 vr_tab_relato(vr_index_relato).cdcooper <> vr_tab_relato(vr_tab_relato.NEXT(vr_index_relato)).cdcooper THEN
                -- Finalizar o agrupador da origem
                pc_escreve_xml('</docto>');
              END IF;

              --Se mudou o titulo ou chegou ao final do vetor
              IF vr_index_relato = vr_tab_relato.LAST OR
                 vr_tab_relato(vr_index_relato).dsorigem <> vr_tab_relato(vr_tab_relato.NEXT(vr_index_relato)).dsorigem OR
                 vr_tab_relato(vr_index_relato).fldebito <> vr_tab_relato(vr_tab_relato.NEXT(vr_index_relato)).fldebito OR
                 vr_tab_relato(vr_index_relato).fltiptra <> vr_tab_relato(vr_tab_relato.NEXT(vr_index_relato)).fltiptra THEN
                -- Finalizar o agrupador do titulo
                pc_escreve_xml('</titulo>');
              END IF;

              --Se mudou a origem ou chegou ao final do vetor
              IF vr_index_relato = vr_tab_relato.LAST OR
                 vr_tab_relato(vr_index_relato).dsorigem <> vr_tab_relato(vr_tab_relato.NEXT(vr_index_relato)).dsorigem THEN
                -- Finalizar o agrupador da origem
                pc_escreve_xml('</origem>');
              END IF;
            END IF;
            --Proximo registro do vetor
            vr_index_relato:= vr_tab_relato.NEXT(vr_index_relato);
          END LOOP;

         --Finalizar tag detalhe
         pc_escreve_xml('</contas></crrl482>');

         -- Busca do diretorio base da cooperativa para copiar arquivo para pasta rlnsv
         vr_dircopia:= gene0001.fn_diretorio(pr_tpdireto => 'C' -- /usr/coop
                                            ,pr_cdcooper => vr_tab_relato(vr_tab_relato.FIRST).cdcooper
                                            ,pr_nmsubdir => '/rlnsv'); --> Utilizaremos o rlnsv

         --Verificar qual a cooperativa da impressa
         IF pr_cdcooper = 0 THEN
           vr_cdcooper:= vr_tab_relato(vr_tab_relato.FIRST).cdcooper;
         ELSE
           vr_cdcooper:= pr_cdcooper;
         END IF;

         -- Efetuar solicitacao de geracao de relatorio --
         gene0002.pc_solicita_relato (pr_cdcooper  => vr_cdcooper         --> Cooperativa conectada
                                     ,pr_cdprogra  => pr_cdprogra         --> Programa chamador
                                     ,pr_dtmvtolt  => pr_rw_crapdat.dtmvtolt --> Data do movimento atual
                                     ,pr_dsxml     => vr_des_xml          --> Arquivo XML de dados
                                     ,pr_dsxmlnode => '/crrl482/contas/origem/titulo/docto/conta'       --> No base do XML para leitura dos dados
                                     ,pr_dsjasper  => 'crrl482.jasper'    --> Arquivo de layout do iReport
                                     ,pr_dsparams  => NULL                --> Titulo do relatório
                                     ,pr_dsarqsaid => vr_nom_direto||'/'||vr_nom_arquivo||'.lst' --> Arquivo final
                                     ,pr_qtcoluna  => 234                 --> 132 colunas
                                     ,pr_sqcabrel  => 1                   --> Sequencia do Relatorio {includes/cabrel132_2.i}
                                     ,pr_flg_impri => 'S'                 --> Chamar a impressão (Imprim.p)
                                     ,pr_nmformul  => '234col'            --> Nome do formulário para impressão
                                     ,pr_nrcopias  => 1                   --> Número de cópias
                                     ,pr_flg_gerar => 'S'                 --> gerar PDF
                                     ,pr_dspathcop => vr_dircopia         --> Copiar arquivo para diretorio
                                     ,pr_flgremarq => 'N'                 --> Nao remover arquivo apos copia
                                     ,pr_des_erro  => vr_dscritic);       --> Saída com erro
         -- Testar se houve erro
         IF vr_dscritic IS NOT NULL THEN
           -- Gerar excecao
           RAISE vr_exc_erro;
         END IF;

	       -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		     GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_gera_relatorio_debnet');

         -- Liberando a memoria alocada pro CLOB
         dbms_lob.close(vr_des_xml);
         dbms_lob.freetemporary(vr_des_xml);

        END IF;

      -- Retornar o nome do relatorio gerado
      pr_nmrelato:= vr_nom_arquivo;
      --Limpar tabela relatorio
      vr_tab_relato.DELETE;
      
      -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
      GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);
    EXCEPTION
      -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
      -- Disparadores: paga0001.pc_gera_relatorio              - Grava TBGEN 
      --               paga0001.pc_PAGA0001_efetua_debitos     - Grava TBGEN
      WHEN vr_exc_erro THEN
        pr_cdcritic:= vr_cdcritic;
        pr_dscritic:= vr_dscritic;
      WHEN OTHERS THEN
        -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
        CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);        
        -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        pr_cdcritic:= 9999;
        pr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic) ||
                      'PAGA0001.pc_gera_relatorio_debnet' ||
                      '. ' || SQLERRM || 
                      '.'  || vr_dsparame;
    END;
  END pc_gera_relatorio_debnet;

  /* Gerar relatorio agendamentos da internet - crrl482 */
  PROCEDURE pc_gera_relatorio (pr_cdcooper    IN crapcop.cdcooper%TYPE       --Cooperativa
                              ,pr_cdprogra    IN crapprg.cdprogra%TYPE       --Codigo do Programa
                              ,pr_tab_agendto IN PAGA0001.typ_tab_agendto    --Tabela de memoria com os agendamentos
                              ,pr_rw_crapdat  IN BTCH0001.cr_crapdat%ROWTYPE --Registro de Data
                              ,pr_cdcritic    OUT INTEGER                    --Codigo do erro
                              ,pr_dscritic    OUT VARCHAR2) IS               --Descricao do erro
    -- ..........................................................................
    --
    --  Programa : pc_gera_relatorio
    --  Sistema  : Rotinas Internet
    --  Sigla    : AGEN
    --  Autor    : Douglas Quisinski
    --  Data     : Setembro/2015                 Ultima atualizacao: 15/12/2017
    --
    --  Dados referentes ao programa:
    --
    --   Frequencia: Sempre que for chamado
    --   Objetivo  : Procedure que não possui o parametro de nome do relatorio gerado que possui a mesma
    --               funcionalidade da procedure acima
    --
    --   Alteracao :
    --
    --               15/12/2017 - Incluido nome do módulo logado
    --                            No caso de erro de programa gravar tabela especifica de log                     
    --                            Ajuste mensagem de erro 
    --                           (Belli - Envolti - Chamado 779415)    
    --
    -- ..........................................................................

    vr_nmrelato VARCHAR2(100);
    --Agrupa os parametros - 15/12/2017 - Chamado 779415 
    vr_dsparame VARCHAR2(4000);

    BEGIN
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_gera_relatorio');
      
      --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
      vr_dsparame :=  ' pr_cdcooper:'  || pr_cdcooper ||
                      ', pr_cdprogra:' || pr_cdprogra;
      
      pc_gera_relatorio_debnet (pr_cdcooper    => pr_cdcooper
                               ,pr_cdprogra    => pr_cdprogra
                               ,pr_tab_agendto => pr_tab_agendto
                               ,pr_rw_crapdat  => pr_rw_crapdat
                               ,pr_nmrelato    => vr_nmrelato
                               ,pr_cdcritic    => pr_cdcritic
                               ,pr_dscritic    => pr_dscritic);
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);
    EXCEPTION
      -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
      -- Esta Procedure grava TBGEN
      -- Disparadores: pc_crps509.prc                          - Não grava TBGEN - Necessario Avaliar
      --               pc_crps705.prc                          - Não grava TBGEN - Necessario Avaliar
      WHEN OTHERS THEN
        -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
        CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);   
        -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        pr_cdcritic:= 9999;
        pr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic) ||
                      'PAGA0001.pc_gera_relatorio' || 
                      '. ' || SQLERRM ||
                      '.'  || vr_dsparame;
        --> Geração de log                             
        pc_controla_log_programa( pr_cdcooper     => pr_cdcooper
                                 ,pr_dstiplog     => 'E'          -- E = erro
                                 ,pr_tpocorrencia => 2            -- 1-Erro de negocio/ 2-Erro nao tratado
                                 ,pr_cdmensagem   => pr_cdcritic  -- Codigodo Log
                                 ,pr_dsmensagem   => pr_dscritic  -- Descrição do Log
                                 ,pr_tpexecucao   => 0            -- 0-Outro, 1-Batch, 2-Job, 3-Online                                                      
                                 );      
  END pc_gera_relatorio;

  /* Procedure para efetuar transferencia da Internet */
  PROCEDURE pc_executa_transf_intercoop (pr_cdcooper IN craplcm.cdcooper%TYPE     --Codigo Cooperativa
                                        ,pr_cdagenci IN craplcm.cdagenci%TYPE     --Codigo Agencia
                                        ,pr_nrdcaixa IN craplot.nrdcaixa%TYPE     --Numero da Caixa
                                        ,pr_cdoperad IN craplcm.cdoperad%TYPE     --Codigo Operador
                                        ,pr_idorigem IN INTEGER                   --Codigo da Origem
                                        ,pr_dtmvtolt IN craplcm.dtmvtolt%TYPE     --Data Movimento
                                        ,pr_idagenda IN INTEGER                   --Identificador agendamento
                                        ,pr_nrdconta IN craplcm.nrdconta%TYPE     --Numero da conta
                                        ,pr_idseqttl IN crapttl.idseqttl%TYPE     --Sequencial titular
                                        ,pr_nrcpfope IN crapopi.nrcpfope%TYPE     --CPF operador
                                        ,pr_cddbanco IN crapcti.cddbanco%TYPE     --Codigo Banco/Caixa
                                        ,pr_cdagectl IN crapcti.cdageban%TYPE     --Codigo agencia centralizadora
                                        ,pr_nrctatrf IN craplau.nrctadst%TYPE     --Conta destino
                                        ,pr_vllanmto IN craplcm.vllanmto%TYPE     --Valor Lancamento
                                        ,pr_nrsequni IN INTEGER                   --Numero Sequencia
                                        ,pr_cdcoptfn IN INTEGER                   --Cooperativa transf.
                                        ,pr_nrterfin IN INTEGER                   --Numero terminal
										                    ,pr_flmobile IN INTEGER                   --Indicador Mobile
										                    ,pr_idtipcar IN INTEGER                   --Indicador Tipo Cartão Utilizado
										                    ,pr_nrcartao IN NUMBER                    --Numero Cartao																				
                                        ,pr_dsprotoc OUT crappro.dsprotoc%TYPE    --Descricao protocolo
                                        ,pr_nrdocmto OUT NUMBER                   --Numero documento Debito
                                        ,pr_nrdoccre OUT NUMBER                   --Numero documento Credito
                                        ,pr_nrdoctar OUT NUMBER                   --Numero TAR
                                        ,pr_cdcritic OUT INTEGER    --Código do erro
                                        ,pr_dscritic OUT VARCHAR2) IS --Descricao do erro
    -- ..........................................................................
    --
    --  Programa : pc_executa_transf_intercoop        Antiga: B1wgen0015.p/executa-transferencia-intercooperativa
    --  Sistema  : Rotinas Internet
    --  Sigla    : INET
    --  Autor    : Alisson C. Berrido - AMcom
    --  Data     : Junho/2013.                   Ultima atualizacao: 15/12/2017
    --
    --  Dados referentes ao programa:
    --
    --   Frequencia: Sempre que for chamado
    --   Objetivo  : Procedure para efetuar transferencia Intercooperativas
    --
    --   Alteração : 23/06/2015 - Ajuste ao definir variavel de agendameno para rotina de protocolo
    --                            (Odirlei-AMcom)
    --
  --               28/03/2016 - Adicionados parâmetros para geraçao de LOG
    --                            (Lucas Lunelli - PROJ290 Cartao CECRED no CaixaOnline)
    --
    --             15/12/2017 - Incluido nome do módulo logado
    --                          No caso de erro de programa gravar tabela especifica de log                     
    --                          Ajuste mensagem de erro
    --                          Mensagens fixas trocar por codigo, e cadastrar caso seja codigo novo
    --                          (Belli - Envolti - Chamado 779415) 
    --               
    -- ..........................................................................

  BEGIN
    DECLARE
      --Cursores Locais

      --Variaveis Locais
      vr_dsinfor1 VARCHAR2(1000);
      vr_dsinfor2 VARCHAR2(1000);
      vr_dsinfor3 VARCHAR2(1000);
      vr_nrdconta VARCHAR2(100);
      vr_nmprepos VARCHAR2(100);
      vr_datdodia DATE;
      vr_recidcre ROWID;
      vr_reciddeb ROWID;
      vr_literala LONG;
      vr_ultsequa INTEGER;
      vr_nrultaut INTEGER;
      vr_vllanmto NUMBER;
      vr_nrcpfpre NUMBER;
      vr_flgagend BOOLEAN;
      vr_nmextttl crapttl.nmextttl%type;
      vr_nrcpfcgc crapttl.nrcpfcgc%type;
      vr_cdlantar craplat.cdlantar%TYPE;
      --Variaveis de Erro
      vr_cdcritic crapcri.cdcritic%TYPE;
      vr_dscritic VARCHAR2(4000);
      vr_des_erro VARCHAR2(4000);
      vr_flgtrans BOOLEAN:= FALSE;
      vr_craptfn  BOOLEAN:= FALSE;
      vr_crapsnh  BOOLEAN:= FALSE;
      --Variaveis de Excecao
      vr_exc_erro EXCEPTION;
      --Variavel de Registro
      rw_cra2ass  cr_crapass%ROWTYPE;
      rw_crabass  cr_crapass%ROWTYPE;
      rw_crabcop  cr_crapcop%ROWTYPE;
      --Agrupa os parametros - 15/12/2017 - Chamado 779415 
      vr_dsparame VARCHAR2(4000);

      -- Verificar cadasto de senhas
      CURSOR cr_crapsnh2 (pr_cdcooper crapass.cdcooper%TYPE,
                          pr_nrdconta crapass.nrdconta%TYPE,
                          pr_nrcpfcgc crapttl.nrcpfcgc%TYPE) IS
        SELECT crapsnh.cdcooper
              ,crapsnh.nrdconta
              ,crapsnh.idseqttl
          FROM crapsnh
         WHERE crapsnh.cdcooper = pr_cdcooper
           AND crapsnh.nrdconta = pr_nrdconta
           AND crapsnh.tpdsenha = 1
           AND crapsnh.nrcpfcgc = pr_nrcpfcgc;

      rw_crapsnh2 cr_crapsnh2%ROWTYPE;

      CURSOR cr_crappod(pr_cdcooper crapass.cdcooper%TYPE,
                        pr_nrdconta crapass.nrdconta%TYPE)IS
        SELECT pod.cdcooper
              ,pod.nrdconta
              ,pod.nrcpfpro
          FROM crappod pod
         WHERE pod.cdcooper = pr_cdcooper
           AND pod.nrdconta = pr_nrdconta
           AND pod.cddpoder = 10
           AND pod.flgconju = 1;

      rw_crappod cr_crappod%ROWTYPE;

    BEGIN
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_executa_transf_intercoop');
      --Inicializar variaveis retorno
      pr_cdcritic:= NULL;
      pr_dscritic:= NULL;
      
      --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
      vr_dsparame :=  ' pr_cdcooper:'  || pr_cdcooper || 
                      ', pr_cdagenci:' || pr_cdagenci ||
                      ', pr_nrdcaixa:' || pr_nrdcaixa ||
                      ', pr_cdoperad:' || pr_cdoperad ||
                      ', pr_idorigem:' || pr_idorigem ||
                      ', pr_dtmvtolt:' || pr_dtmvtolt ||
                      ', pr_idagenda:' || pr_idagenda ||
                      ', pr_nrdconta:' || pr_nrdconta ||
                      ', pr_idseqttl:' || pr_idseqttl ||
                      ', pr_nrcpfope:' || pr_nrcpfope ||
                      ', pr_cddbanco:' || pr_cddbanco ||
                      ', pr_cdagectl:' || pr_cdagectl ||
                      ', pr_nrctatrf:' || pr_nrctatrf ||
                      ', pr_vllanmto:' || pr_vllanmto ||
                      ', pr_nrsequni:' || pr_nrsequni ||
                      ', pr_cdcoptfn:' || pr_cdcoptfn ||
                      ', pr_nrterfin:' || pr_nrterfin ||
					            ', pr_flmobile:' || pr_flmobile ||
				              ', pr_idtipcar:' || pr_idtipcar ||
                      ', pr_nrcartao:' || pr_nrcartao;

      -- Savepoint
      SAVEPOINT TRANS_INTER;

      --Se a cooperativa origem nao existir
      OPEN cr_crapcop(pr_cdcooper => pr_cdcooper);
      FETCH cr_crapcop INTO rw_crapcop;
      --Se nao encontrou
      IF cr_crapcop%NOTFOUND THEN
        --Fechar Cursor
        CLOSE cr_crapcop;
        --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        vr_cdcritic := 1076; --Registro de cooperativa origem nao encontrado
        vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
      --Fechar Cursor
      CLOSE cr_crapcop;
      --Se a cooperativa destino nao existir
      OPEN cr_crabcop(pr_cdagectl => pr_cdagectl);
      FETCH cr_crabcop INTO rw_crabcop;
      --Se nao encontrou
      IF cr_crabcop%NOTFOUND THEN
        --Fechar Cursor
        CLOSE cr_crabcop;
        --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        vr_cdcritic:= 1079; --Registro de cooperativa destino nao encontrado
        vr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
      --Fechar Cursor
      CLOSE cr_crabcop;
      /* Conta origem */
      OPEN cr_crapass(pr_cdcooper => pr_cdcooper
                     ,pr_nrdconta => pr_nrdconta);
      FETCH cr_crapass INTO rw_crapass;
      --Se nao encontrou associado
      IF cr_crapass%NOTFOUND THEN
        --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        vr_cdcritic:= 1080; --Associado origem nao cadastrado
        vr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        --Fechar Cursor
        CLOSE cr_crapass;
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
      --Fechar Cursor
      CLOSE cr_crapass;

      /* Conta destino */
      OPEN cr_crapass(pr_cdcooper => rw_crabcop.cdcooper
                     ,pr_nrdconta => pr_nrctatrf );
      FETCH cr_crapass INTO rw_crabass;
      --Se nao encontrou associado
      IF cr_crapass%NOTFOUND THEN
        --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        vr_cdcritic:= 1081; --Conta destino nao cadastrada
        vr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        --Fechar Cursor
        CLOSE cr_crapass;
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
      --Fechar Cursor
      CLOSE cr_crapass;

      --Se for pessoa fisica
      IF rw_crapass.inpessoa = 1 THEN
        /* Nome do titular que fez a transferencia */
        OPEN cr_crapttl (pr_cdcooper => rw_crapass.cdcooper
                        ,pr_nrdconta => rw_crapass.nrdconta
                        ,pr_idseqttl => pr_idseqttl);
        --Posicionar no proximo registro
        FETCH cr_crapttl INTO rw_crapttl;
        --Se nao encontrar
        IF cr_crapttl%NOTFOUND THEN
          --Fechar Cursor
          CLOSE cr_crapttl;
          --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
          vr_cdcritic:= 1082; --Titular nao encontrado
          vr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
          RAISE vr_exc_erro;
        END IF;
        --Fechar Cursor
        CLOSE cr_crapttl;
        --Nome e cpf do titular
        vr_nmextttl:= rw_crapttl.nmextttl;
        vr_nrcpfcgc:= rw_crapttl.nrcpfcgc;
      ELSE
        --Nome e cpf do associado
        vr_nmextttl:= rw_crapass.nmprimtl;
        vr_nrcpfcgc:= rw_crapass.nrcpfcgc;

        --Se origem for Internet
        IF  pr_idorigem = 3  THEN /* Internet */
          --selecionar senha
          OPEN cr_crapsnh (pr_cdcooper => pr_cdcooper
                          ,pr_nrdconta => pr_nrdconta
                          ,pr_idseqttl => pr_idseqttl
                          ,pr_tpdsenha => 1);
          --Posicionar no proximo registro
          FETCH cr_crapsnh INTO rw_crapsnh;
          --Verificar se encontrou senha
          vr_crapsnh:= cr_crapsnh%FOUND;

          IF NOT vr_crapsnh THEN
            --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
            --Montar Erro
            vr_cdcritic:= 1088; --Senha para conta on-line nao cadastrada
            vr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
            --Fechar Cursor
            CLOSE cr_crapsnh;
            --Levantar Excecao
            RAISE vr_exc_erro;
          END IF;
          --Fechar Cursor
          CLOSE cr_crapsnh;
        END IF;
        --Selecionar Avalista
        OPEN cr_crapavt (pr_cdcooper => rw_crapsnh.cdcooper
                        ,pr_nrdconta => rw_crapsnh.nrdconta
                        ,pr_tpctrato => 6
                        ,pr_nrcpfcgc => rw_crapsnh.nrcpfcgc);
        --Posicionar no proximo registro
        FETCH cr_crapavt INTO rw_crapavt;
        --Se nao encontrar
        IF cr_crapavt%FOUND THEN
          --Selecionar informacoes avalista
          OPEN cr_crapass (pr_cdcooper => pr_cdcooper
                          ,pr_nrdconta => rw_crapavt.nrdctato);
          --Posicionar no proximo registro
          FETCH cr_crapass INTO rw_cra2ass;
          --Se nao encontrar
          IF cr_crapass%FOUND THEN
            --Nome preposto recebe nome avalista
            vr_nmprepos:= rw_cra2ass.nmprimtl;
          ELSE
            --Nome preposto recebe nome avalista
            vr_nmprepos:= rw_crapavt.nmdavali;
          END IF;
          --Fechar Cursor
          CLOSE cr_crapass;
        END IF;
        --Fechar Cursor
        CLOSE cr_crapavt;
      END IF;

      IF pr_idorigem = 3 THEN  /* Internet */

        IF rw_crapass.idastcjt = 0 THEN
        
          -- Atualiza o registro de movimento da internet
          paga0001.pc_insere_movimento_internet(pr_cdcooper => pr_cdcooper 
                                               ,pr_nrdconta => pr_nrdconta
                                               ,pr_idseqttl => pr_idseqttl
                                               ,pr_dtmvtolt => pr_dtmvtolt
                                               ,pr_cdoperad => pr_cdoperad
                                               ,pr_inpessoa => rw_crapass.inpessoa
                                               ,pr_tpoperac => 1 -- Transferência
                                               ,pr_vllanmto => pr_vllanmto
                                               ,pr_dscritic => vr_dscritic);
                                               
                  --Levantar Excecao
          IF vr_dscritic IS NOT NULL THEN
             vr_cdcritic := substr(vr_dscritic,1,5);
             vr_dscritic := substr(vr_dscritic,7);
                  RAISE vr_exc_erro;
            END IF;

        ELSE
          FOR rw_crappod IN cr_crappod(pr_cdcooper => pr_cdcooper
                                      ,pr_nrdconta => pr_nrdconta) LOOP

            OPEN cr_crapsnh2(pr_cdcooper => rw_crappod.cdcooper
                            ,pr_nrdconta => rw_crappod.nrdconta
                            ,pr_nrcpfcgc => rw_crappod.nrcpfpro);
                                    
            FETCH cr_crapsnh2 INTO rw_crapsnh2;

            IF cr_crapsnh2%NOTFOUND THEN
              CLOSE cr_crapsnh2;
              CONTINUE;
            ELSE
              CLOSE cr_crapsnh2;
            END IF;

            -- Atualiza o registro de movimento da internet
            paga0001.pc_insere_movimento_internet(pr_cdcooper => pr_cdcooper 
                                                 ,pr_nrdconta => pr_nrdconta
                                                 ,pr_idseqttl => rw_crapsnh2.idseqttl
                                                 ,pr_dtmvtolt => pr_dtmvtolt
                                                 ,pr_cdoperad => pr_cdoperad
                                                 ,pr_inpessoa => rw_crapass.inpessoa
                                                 ,pr_tpoperac => 1 -- Transferência
                                                 ,pr_vllanmto => pr_vllanmto
                                                 ,pr_dscritic => vr_dscritic);

                    --Levantar Excecao
            IF vr_dscritic IS NOT NULL THEN
              vr_cdcritic := substr(vr_dscritic,1,5);
              vr_dscritic := substr(vr_dscritic,7);
                    RAISE vr_exc_erro;
              END IF;

          END LOOP;
            
        END IF;
  
      END IF;

      --Atribuir valor do lancamento
      vr_vllanmto:= pr_vllanmto;

      /* Realiza transferencia */
      CXON0022.pc_realiza_transferencia (pr_cooper            => pr_cdcooper --Codigo Cooperativa Origem
                                        ,pr_cod_agencia       => pr_cdagenci --Codigo Agencia
                                        ,pr_nro_caixa         => pr_nrdcaixa --Numero do caixa
                                        ,pr_cod_operador      => pr_cdoperad --Codigo Operador
                                        ,pr_idorigem          => pr_idorigem  --Origem transacao
                                        ,pr_cooper_dest       => rw_crabcop.cdcooper  --Codigo Cooperativa
                                        ,pr_nrdcontade        => pr_nrdconta  --Numero Conta destino
                                        ,pr_idseqttl          => pr_idseqttl  --Sequencial do Titular
                                        ,pr_nrdcontapara      => pr_nrctatrf  --Conta de Destino
                                        ,pr_valor             => vr_vllanmto   --Valor da transacao
                                        ,pr_nrsequni          => pr_nrsequni  --Numero Sequencial
                                        ,pr_idagenda          => pr_idagenda  --Indicador Agendamento
                                        ,pr_cdcoptfn          => pr_cdcoptfn  --Codigo Cooperativa
                                        ,pr_nrterfin          => pr_nrterfin  --Numero do terminal
										                    ,pr_flmobile          => pr_flmobile  --Indicador Mobile
										                    ,pr_idtipcar          => pr_idtipcar  --Indicador Tipo Cartão Utilizado
										                    ,pr_nrcartao          => pr_nrcartao  --Numero Cartao																				
                                        ,pr_literal_autentica => vr_literala  --Numero literal autenticacao
                                        ,pr_ult_seq_autentica => vr_ultsequa  --Sequencial autenticacao
                                        ,pr_nro_docto         => pr_nrdocmto  --Numero documento Debito
                                        ,pr_nro_docto_cred    => pr_nrdoccre  --Numero documento Credito
                                        ,pr_cdlantar          => vr_cdlantar  --Codigo Lancamento tarifa
                                        ,pr_reg_lcm_deb       => vr_reciddeb  --ROWID do registro lancamento debito
                                        ,pr_reg_lcm_cre       => vr_recidcre  --ROWID do registro lancamento credito
                                        ,pr_nrultaut          => vr_nrultaut  --Numero Ultima Autorizacao
                                        ,pr_cdcritic          => vr_cdcritic  --Código do erro
                                        ,pr_dscritic          => vr_dscritic); --Descricao do erro
      --Se ocorreu erro
      IF nvl(vr_cdcritic,0) <> 0 OR trim(vr_dscritic) IS NOT NULL THEN
        --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
        --Selecionar erro
        OPEN cr_craperr (pr_cdcooper => pr_cdcooper
                        ,pr_cdagenci => pr_cdagenci
                        ,pr_nrdcaixa => To_Number(pr_nrdconta||pr_idseqttl));
        --Posicionar no primeiro registro
        FETCH cr_craperr INTO rw_craperr;
        --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
        --Se Encontrou
        IF cr_craperr%FOUND THEN
          IF nvl(rw_craperr.cdcritic,0) <> nvl(vr_cdcritic,0) THEN
            --> Geração de log                             
            pc_controla_log_programa( pr_cdcooper     => pr_cdcooper
                                     ,pr_dstiplog     => 'E' -- E = erro
                                     ,pr_tpocorrencia => 2   -- 1-Erro de negocio/ 2-Erro nao tratado
                                     ,pr_cdmensagem   => nvl(vr_cdcritic,0) -- Codigo do Log
                                     ,pr_dsmensagem   => vr_dscritic        -- Desc Log
                                     );   
          END IF;
          
          vr_cdcritic:= NVL(rw_craperr.cdcritic,0); 
          vr_dscritic:= rw_craperr.dscritic;
        ELSE
          --> Geração de log                             
          pc_controla_log_programa( pr_cdcooper     => pr_cdcooper
                                   ,pr_dstiplog     => 'E' -- E = erro
                                   ,pr_tpocorrencia => 2   -- 1-Erro de negocio/ 2-Erro nao tratado
                                   ,pr_cdmensagem   => nvl(vr_cdcritic,0) -- Codigo do Log
                                   ,pr_dsmensagem   => gene0001.fn_busca_critica(nvl(vr_cdcritic,0), vr_dscritic) -- Desc Log
                                   );                            
          vr_cdcritic:= 1084; -- TED invalida
          vr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        END IF;
        --Fechar Cursor
        CLOSE cr_craperr;
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
      --Fechar Cursor
      IF cr_craperr%isopen then
        CLOSE cr_craperr;
      END IF;

      /** Protocolo **/
      IF (pr_idorigem = 3 OR (pr_idorigem = 4 AND pr_nrterfin <> 0)) THEN   /* INTERNET ou TAA */
        --Selecionar autenticacao
        OPEN cr_crapaut (pr_rowid => vr_reciddeb);
        --Posicionar no proximo registro
        FETCH cr_crapaut INTO rw_crapaut;
        --Se nao encontrar
        IF cr_crapaut%NOTFOUND THEN
          --Fechar Cursor
          CLOSE cr_crapaut;
          --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
          vr_cdcritic:= 1086; --Registro da autenticacao nao encontrado
          vr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
          --Levantar Excecao
          RAISE vr_exc_erro;
        END IF;
        --Fechar Cursor
        CLOSE cr_crapaut;
        /* TAA e numero do terminal prenchido */
        IF pr_idorigem = 4 AND pr_nrterfin <> 0 THEN
          vr_craptfn:= FALSE;
          --Selecionar terminais financeiros
          OPEN cr_craptfn (pr_cdcoptfn => pr_cdcoptfn
                          ,pr_nrterfin => pr_nrterfin);
          --Posicionar no proximo registro
          FETCH cr_craptfn INTO rw_craptfn;
          --Verificar se encontrou
          vr_craptfn:= cr_craptfn%FOUND;
          --Se nao encontrou
          IF NOT vr_craptfn THEN
            --Fechar Cursor
            CLOSE cr_craptfn;
            --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
            vr_cdcritic:= 1087; --Terminal Financeiro nao cadastrado
            vr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
            --levantar Excecao
            RAISE vr_exc_erro;
          END IF;
          --Fechar Cursor
          CLOSE cr_craptfn;
          --Atualizar tabela terminais
          BEGIN
            UPDATE craptfn SET craptfn.nrultaut = Nvl(craptfn.nrultaut,0) + 2
            WHERE craptfn.ROWID = rw_craptfn.ROWID;
          EXCEPTION
            WHEN Others THEN
              -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
              CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
              -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
              pr_cdcritic := 1035;
              pr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic) ||
                            'CRAPTFN(2):' ||  
                            ' nrultaut: Nvl(craptfn.nrultaut,0) + 2' ||
                            ' com ROWID:'    || rw_craptfn.ROWID ||
                            '. ' ||sqlerrm;  
              --Levantar Excecao
              RAISE vr_exc_erro;
          END;
        END IF;
        --Montar Mensagens Informativas
        vr_dsinfor1:= 'Transferencia';
        vr_dsinfor2:= vr_nmextttl ||'#' ||
                      'Conta/dv Destino: ' ||GENE0002.fn_mask_conta(pr_nrctatrf) ||' - '||
                      rw_crabass.nmprimtl||'#'|| gene0002.fn_mask(rw_crabcop.cdagectl,'9999')||
                      ' - '|| rw_crabcop.nmrescop;
        IF NOT vr_craptfn THEN
          vr_dsinfor3:= NULL;
        ELSE
          vr_dsinfor3:= 'TAA: '||gene0002.fn_mask(rw_craptfn.cdcooper,'9999')||'/'||
                                 gene0002.fn_mask(rw_craptfn.cdagenci,'9999')||'/'||
                                 gene0002.fn_mask(rw_craptfn.nrterfin,'9999');
        END IF;
        --Cpf preposto
        IF vr_crapsnh THEN
          vr_nrcpfpre:= rw_crapsnh.nrcpfcgc;
        ELSE
          vr_nrcpfpre:= 0;
        END IF;

        -- Flag de controle de agenda
        IF pr_idagenda  >= 2 THEN
          vr_flgagend := TRUE;
        ELSE
          vr_flgagend := FALSE;
        END IF;

        --Gerar protocolo
        GENE0006.pc_gera_protocolo(pr_cdcooper => pr_cdcooper          --> Código da cooperativa
                                  ,pr_dtmvtolt => rw_crapaut.dtmvtolt  --> Data movimento
                                  ,pr_hrtransa => rw_crapaut.hrautent  --> Hora da transação
                                  ,pr_nrdconta => pr_nrdconta          --> Número da conta
                                  ,pr_nrdocmto => pr_nrdocmto          --> Número do documento
                                  ,pr_nrseqaut => rw_crapaut.nrsequen  --> Número da sequencia
                                  ,pr_vllanmto => vr_vllanmto          --> Valor lançamento
                                  ,pr_nrdcaixa => rw_crapaut.nrdcaixa  --> Número do caixa
                                  ,pr_gravapro => TRUE                 --> Controle de gravação do crappro
                                  ,pr_cdtippro => 1                    --> Código do tipo protocolo
                                  ,pr_dsinfor1 => vr_dsinfor1          --> Descricaoo 1
                                  ,pr_dsinfor2 => vr_dsinfor2          --> Descricao 2
                                  ,pr_dsinfor3 => vr_dsinfor3          --> Descricao 3
                                  ,pr_dscedent => NULL                 --> Descritivo Cedente
                                  ,pr_flgagend => vr_flgagend          --> Controle de agenda
                                  ,pr_nrcpfope => pr_nrcpfope          --> Numero de operacao
                                  ,pr_nrcpfpre => vr_nrcpfpre          --> Numero preposto
                                  ,pr_nmprepos => vr_nmprepos          --> Nome preposto
                                  ,pr_dsprotoc => pr_dsprotoc          --> Descricao do protocolo
                                  ,pr_dscritic => vr_dscritic          --> Descricao crítica
                                  ,pr_des_erro => vr_des_erro);        --> Descricao dos erros de processo
        --Se ocorreu erro
        IF vr_dscritic IS NOT NULL OR vr_des_erro IS NOT NULL THEN
          --Levantar Excecao
          RAISE vr_exc_erro;
        END IF;
        /** Armazena protocolo na autenticacao **/
        BEGIN
          UPDATE crapaut SET crapaut.dsprotoc = pr_dsprotoc
          WHERE crapaut.ROWID = rw_crapaut.ROWID;
        EXCEPTION
          WHEN OTHERS THEN
            -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
            CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
            -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
            pr_cdcritic := 1035;
            pr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic) ||
                           'CRAPAUT(3):' ||  
                           ' dsprotoc:' || pr_dsprotoc ||
                           ' com ROWID:'   || rw_crapaut.ROWID ||
                           '. ' ||sqlerrm;  
          --Levantar Excecao
          RAISE vr_exc_erro;
        END;
        /** Protocolo para registro na tabela craplcm **/
        OPEN cr_crapaut (pr_rowid => vr_recidcre);
        --Posicionar no proximo registro
        FETCH cr_crapaut INTO rw_crapaut;
        --Se nao encontrar
        IF cr_crapaut%NOTFOUND THEN
          --Fechar Cursor
          CLOSE cr_crapaut;
          --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
          vr_cdcritic:= 1086; --Registro da autenticacao nao encontrado
          vr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
          --Levantar Excecao
          RAISE vr_exc_erro;
        END IF;
        --Fechar Cursor
        CLOSE cr_crapaut;
        /** Armazena protocolo na autenticacao **/
        BEGIN
          UPDATE crapaut SET crapaut.dsprotoc = pr_dsprotoc
          WHERE crapaut.ROWID = rw_crapaut.ROWID;
        EXCEPTION
          WHEN OTHERS THEN
            -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
            CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
            -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
            pr_cdcritic := 1035;
            pr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic) ||
                           'CRAPAUT(4):' ||
                           ' dsprotoc:'  || pr_dsprotoc ||
                           ' com ROWID:' || rw_crapaut.ROWID ||
                           '. ' ||sqlerrm;
          --Levantar Excecao
          RAISE vr_exc_erro;
        END;
        --Marcar transacao como nao realizada
        vr_flgtrans:= FALSE;
        IF (pr_idorigem = 4 AND pr_nrterfin <> 0) THEN  /* TAA */
          --Incluir log transacao
          BEGIN
            INSERT INTO crapltr
                  (crapltr.cdcooper
                  ,crapltr.cdoperad
                  ,crapltr.nrterfin
                  ,crapltr.dtmvtolt
                  ,crapltr.nrautdoc
                  ,crapltr.nrdconta
                  ,crapltr.nrdocmto
                  ,crapltr.nrsequni
                  ,crapltr.cdhistor
                  ,crapltr.vllanmto
                  ,crapltr.dttransa
                  ,crapltr.hrtransa
                  ,crapltr.nrcartao
                  ,crapltr.tpautdoc
                  ,crapltr.nrestdoc
                  ,crapltr.cdsuperv)
             VALUES (pr_cdcooper
                  ,rw_craptfn.cdoperad
                  ,rw_craptfn.nrterfin
                  ,pr_dtmvtolt
                  ,rw_craptfn.nrultaut
                  ,pr_nrdconta
                  ,pr_nrdocmto
                  ,pr_nrsequni
                  ,1009
                  ,vr_vllanmto
                  ,Trunc(SYSDATE)
                  ,GENE0002.fn_busca_time
                  ,0
                  ,1
                  ,0
                  ,' ');
          EXCEPTION
            WHEN OTHERS THEN
              -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
              CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
              -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
              pr_cdcritic := 1034;
              pr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic) ||
                             'CRAPLTR(3):' ||
                             ' cdcooper:' || pr_cdcooper			 ||
                             ', cdoperad:' || rw_craptfn.cdoperad ||
                             ', nrterfin:' || rw_craptfn.nrterfin ||
                             ', dtmvtolt:' || pr_dtmvtolt ||
                             ', nrautdoc:' || rw_craptfn.nrultaut ||
                             ', nrdconta:' || pr_nrdconta ||
                             ', nrdocmto:' || pr_nrdocmto ||
                             ', nrsequni:' || pr_nrsequni ||
                             ', cdhistor:' || '1009' ||
                             ', vllanmto:' || vr_vllanmto ||
                             ', dttransa:' || 'Trunc(SYSDATE)' ||
                             ', hrtransa:' || GENE0002.fn_busca_time ||
                             ', nrcartao:' || '0' ||
                             ', tpautdoc:' || '1' ||
                             ', nrestdoc:' || '0' ||
                             ', cdsuperv:' || ' ' ||				  
                             '. ' ||sqlerrm;
              --Levantar Excecao
              RAISE vr_exc_erro;
          END;
          --Incluir log transacao
          BEGIN
            INSERT INTO crapltr
                  (crapltr.cdcooper
                  ,crapltr.cdoperad
                  ,crapltr.nrterfin
                  ,crapltr.dtmvtolt
                  ,crapltr.nrautdoc
                  ,crapltr.nrdconta
                  ,crapltr.nrdocmto
                  ,crapltr.nrsequni
                  ,crapltr.cdhistor
                  ,crapltr.vllanmto
                  ,crapltr.dttransa
                  ,crapltr.hrtransa
                  ,crapltr.nrcartao
                  ,crapltr.tpautdoc
                  ,crapltr.nrestdoc
                  ,crapltr.cdsuperv)
             VALUES (pr_cdcooper
                  ,rw_craptfn.cdoperad
                  ,rw_craptfn.nrterfin
                  ,pr_dtmvtolt
                  ,rw_craptfn.nrultaut
                  ,pr_nrdconta
                  ,pr_nrdocmto
                  ,pr_nrsequni + 1
                  ,1011
                  ,vr_vllanmto
                  ,Trunc(SYSDATE)
                  ,GENE0002.fn_busca_time
                  ,0
                  ,1
                  ,0
                  ,' ');
          EXCEPTION
            WHEN OTHERS THEN
              -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
              CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
              -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
              pr_cdcritic := 1034;
              pr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic) ||
                             'CRAPLTR(4):' ||
                             ' cdcooper:'  || pr_cdcooper	 ||
                             ', cdoperad:' || rw_craptfn.cdoperad	||
                             ', nrterfin:' || rw_craptfn.nrterfin	||
                             ', dtmvtolt:' || pr_dtmvtolt	||
                             ', nrautdoc:' || rw_craptfn.nrultaut	||
                             ', nrdconta:' || pr_nrdconta	||
                             ', nrdocmto:' || pr_nrdocmto	||
                             ', nrsequni:' || pr_nrsequni || ' + 1	' ||
                             ', cdhistor:' || '1011' ||
                             ', vllanmto:' || vr_vllanmto	||
                             ', dttransa:' || 'Trunc(SYSDATE)'	||
                             ', hrtransa:' || GENE0002.fn_busca_time 	||
                             ', nrcartao:' || '0'	||
                             ', tpautdoc:' || '1'	||
                             ', nrestdoc:' || '0'	||
                             ', cdsuperv:' || ' '	 ||				  
                             '. ' ||sqlerrm;
              --Levantar Excecao
              RAISE vr_exc_erro;
          END;
        END IF;


      END IF;

      -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
      GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);
    EXCEPTION
      -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415      
      -- Disparadores: paga0002.pc_InternetBank22              - Não grava TBGEN - Necessario avaliar    
      --               paga0001.pc_debita_agendto_transf       - Não grava TBGEN
      --
      --               Eliminar a gravação do Log aqui quando acertar a paga0002.pc_InternetBank22       
      WHEN vr_exc_erro THEN
        IF nvl(vr_cdcritic,0) = 0 and trim(vr_dscritic) is null then
          -- Devolvemos codigo e critica encontradas	   
          vr_cdcritic := nvl(pr_cdcritic,0);
          vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic, pr_dscritic);       

          --> Geração de log                             
          pc_controla_log_programa( pr_cdcooper      => pr_cdcooper
                                   ,pr_dstiplog      => 'E' -- Tipo de Log - E = erro 
                                   ,pr_tpocorrencia  => 1   -- 1-Erro de negocio 
                                   ,pr_cdcriticidade => 1
                                   ,pr_cdmensagem    => vr_cdcritic -- Codigo do Log 
                                   ,pr_dsmensagem    => vr_dscritic || 
                                                        vr_dsparame
                                  );                             
          vr_cdcritic := 1083; --Nao foi possivel efetuar a transferencia
          vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);                          
        ELSE    
          --> Geração de log                             
          pc_controla_log_programa( pr_cdcooper      => pr_cdcooper
                                   ,pr_dstiplog      => 'E' -- Tipo de Log - E = erro
                                   ,pr_tpocorrencia  => 1   -- 1-Erro de negocio
                                   ,pr_cdcriticidade => 1
                                   ,pr_cdmensagem    => vr_cdcritic -- Codigo do Log
                                   ,pr_dsmensagem    => vr_dscritic || -- Descrição do Log
                                                        vr_dsparame 
                                   );                             
        END IF;

        -- Efetua o rollback do que foi executado na chamada da rotina
        ROLLBACK TO TRANS_INTER;

        pr_cdcritic:= vr_cdcritic;
        pr_dscritic:= vr_dscritic;
      WHEN OTHERS THEN
        -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
        CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);        
        -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        pr_cdcritic:= 9999;
        pr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic)||
                      'PAGA0001.pc_executa_transf_intercoop' || 
                      '. ' || SQLERRM ||
                      '.'  || vr_dsparame ;
        --> Geração de log                             
        pc_controla_log_programa( pr_cdcooper     => pr_cdcooper
                                 ,pr_dstiplog     => 'E' -- E = erro
                                 ,pr_tpocorrencia => 2   -- 1-Erro de negocio/ 2-Erro nao tratado
                                 ,pr_cdmensagem   => pr_cdcritic -- Codigo do Log
                                 ,pr_dsmensagem   => pr_dscritic -- Descrição do Log
                                 );                            
        pr_cdcritic := 1083; --Nao foi possivel efetuar a transferencia
        pr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic);                          
        -- Efetua o rollback do que foi executado na chamada da rotina
        ROLLBACK TO TRANS_INTER;
    END;
  END pc_executa_transf_intercoop;

  /* Procedure para efetuar transferencia da Internet */
  PROCEDURE pc_executa_transferencia (pr_cdcooper IN craplcm.cdcooper%TYPE  --Codigo Cooperativa
                                     ,pr_dtmvtolt IN craplcm.dtmvtolt%TYPE  --Data Movimento
                                     ,pr_dtmvtocd IN craplcm.dtmvtolt%TYPE  --Data Credito
                                     ,pr_cdagenci IN craplcm.cdagenci%TYPE  --Codigo Agencia
                                     ,pr_cdbccxlt IN craplcm.cdbccxlt%TYPE  --Codigo Banco/Caixa
                                     ,pr_nrdolote IN craplcm.nrdolote%TYPE  --Numero Lote
                                     ,pr_nrdcaixa IN craplot.nrdcaixa%TYPE  --Numero da Caixa
                                     ,pr_nrdconta IN craplcm.nrdconta%TYPE  --Numero da conta
                                     ,pr_idseqttl IN crapttl.idseqttl%TYPE  --Sequencial titulo
                                     ,pr_nrdocmto IN craplcm.nrdocmto%TYPE  --Numero documento
                                     ,pr_cdhiscre IN craplcm.cdhistor%TYPE  --Historico Credito
                                     ,pr_cdhisdeb IN craplcm.cdhistor%TYPE  --Historico Debito
                                     ,pr_vllanmto IN craplcm.vllanmto%TYPE  --Valor Lancamento
                                     ,pr_cdoperad IN craplcm.cdoperad%TYPE  --Codigo Operador
                                     ,pr_nrctatrf IN crapcti.nrctatrf%TYPE  --Numero conta transferencia
                                     ,pr_flagenda IN BOOLEAN                --Flag agendado
                                     ,pr_cdcoptfn IN INTEGER                --Codigo cooperativa transf
                                     ,pr_cdagetfn IN INTEGER                --Codigo agencia transf
                                     ,pr_nrterfin IN INTEGER                --Numero terminal
                                     ,pr_dscartao IN VARCHAR2               --Descricao do cartao
                                     ,pr_cdorigem IN INTEGER                --Codigo da Origem
                                     ,pr_nrcpfope IN NUMBER                 --CPF operador
									                   ,pr_flmobile IN INTEGER                --> Indicador Mobile
									                   ,pr_idtipcar IN INTEGER                --> Indicador Tipo Cartão Utilizado
									                   ,pr_nrcartao IN NUMBER                 --> Numero Cartao
                                     ,pr_dstransa OUT VARCHAR2               --Descricao transacao
                                     ,pr_nrdocdeb OUT craplcm.nrdocmto%TYPE  --Numero documento debito
                                     ,pr_nrdoccre OUT craplcm.nrdocmto%TYPE  --Numero documento credito
                                     ,pr_dsprotoc OUT crappro.dsprotoc%TYPE  --Descricao protocolo
                                     ,pr_cdcritic OUT INTEGER  --Código do erro
                                     ,pr_dscritic OUT VARCHAR2) IS --Descricao do erro
    -- ..........................................................................
    --
    --  Programa : pc_executa_transferencia        Antiga: B1wgen0015.p/executa_transferencia
    --  Sistema  : Rotinas Internet
    --  Sigla    : CRED
    --  Autor    : Alisson C. Berrido - AMcom
    --  Data     : Junho/2013.                   Ultima atualizacao: 15/12/2017
    --
    --  Dados referentes ao programa:
    --
    --   Frequencia: Sempre que for chamado
    --   Objetivo  : Procedure para efetuar transferencia da Internet
    --
    --   Alterações: 03/09/2014 - retirado leitura da tabela craptco (Jean Michel).
    --
    --               27/07/2015 - Criado rotina pc_insere_lote para controlar a criação do lote
    --                            e tentar diminuir o tempo de lock da tabela SD312759 (Odirlei-AMcom)
    --
    --               06/10/2015 - Ajustes para tentar diminuir o tempo de lock da tabela lote (Odirlei-AMcom)
    --
    --               04/02/2016 - Aumento no tempo de verificacao de Transferencia duplicada. 
    --                            De 30 seg. para 10 min. (Jorge/David) - SD 397867 
	--
    --               28/03/2016 - Adicionados parâmetros para geraçao de LOG
    --                          (Lucas Lunelli - PROJ290 Cartao CECRED no CaixaOnline)
	--
    --               12/12/2017 - Passar como texto o campo nrcartao na chamada da procedure 
    --                            pc_gera_log_ope_cartao (Lucas Ranghetti #810576)
    --
    --               15/12/2017 - Incluido nome do módulo logado
    --                            No caso de erro de programa gravar tabela especifica de log                     
    --                            Ajuste mensagem de erro
    --                            Mensagens fixas trocar por codigo, e cadastrar caso seja codigo novo
    --                            (Belli - Envolti - Chamado 779415) 
    --                 
    -- ..........................................................................

  BEGIN
    DECLARE
      --Selecionar informacoes sequencial unico
      CURSOR cr_crapnsu (pr_cdcooper IN crapcop.cdcooper%type) IS
        SELECT crapnsu.cdcooper
              ,crapnsu.nrsequni
              ,crapnsu.rowid
        FROM crapnsu
        WHERE crapnsu.cdcooper = pr_cdcooper;
      rw_crapnsu cr_crapnsu%ROWTYPE;

     CURSOR cr_craplcm_dup(pr_cdcooper IN craplcm.cdcooper%TYPE
                          ,pr_nrdconta IN craplcm.nrdconta%TYPE
                          ,pr_dtmvtocd IN craplcm.dtmvtolt%TYPE
                          ,pr_cdhisdeb IN craplcm.cdhistor%TYPE
                          ,pr_vllanmto IN craplcm.vllanmto%TYPE
                          ,pr_nrctatrf IN crapcti.nrctatrf%TYPE) IS
      SELECT MAX(lcm.hrtransa)
        FROM craplcm lcm
       WHERE lcm.cdcooper = pr_cdcooper
         AND lcm.nrdconta = pr_nrdconta
         AND lcm.dtmvtolt = pr_dtmvtocd
         AND lcm.cdhistor = pr_cdhisdeb
         AND lcm.vllanmto = pr_vllanmto
         AND to_number(SUBSTR(lcm.cdpesqbb,45,8)) = pr_nrctatrf;
      vr_hrtransa_dup craplcm.hrtransa%TYPE;

      -- Verificar cadasto de senhas
      CURSOR cr_crapsnh2 (pr_cdcooper crapass.cdcooper%TYPE,
                          pr_nrdconta crapass.nrdconta%TYPE,
                          pr_nrcpfcgc crapttl.nrcpfcgc%TYPE) IS
        SELECT crapsnh.cdcooper
              ,crapsnh.nrdconta
              ,crapsnh.idseqttl
          FROM crapsnh
         WHERE crapsnh.cdcooper = pr_cdcooper
           AND crapsnh.nrdconta = pr_nrdconta
           AND crapsnh.tpdsenha = 1
           AND crapsnh.nrcpfcgc = pr_nrcpfcgc;

      rw_crapsnh2 cr_crapsnh2%ROWTYPE;

      CURSOR cr_crappod(pr_cdcooper crapass.cdcooper%TYPE,
                        pr_nrdconta crapass.nrdconta%TYPE)IS
        SELECT pod.cdcooper
              ,pod.nrdconta
              ,pod.nrcpfpro
          FROM crappod pod
         WHERE pod.cdcooper = pr_cdcooper
           AND pod.nrdconta = pr_nrdconta
           AND pod.cddpoder = 10
           AND pod.flgconju = 1;

      rw_crappod cr_crappod%ROWTYPE;

      --Variaveis Locais
      vr_nrautdoc craplcm.nrautdoc%type;
      vr_dslitera VARCHAR2(32000);
      vr_dsinfor1 VARCHAR2(1000);
      vr_dsinfor2 VARCHAR2(1000);
      vr_dsinfor3 VARCHAR2(1000);
      vr_nrdconta VARCHAR2(1000);
      vr_nmextttl VARCHAR2(1000);
      vr_nmarqdbo VARCHAR2(1000);
      vr_cdpesqbb VARCHAR2(1000);
      vr_nrdrecid ROWID;
      vr_nrcartao NUMBER;
      vr_nrsequni INTEGER;
      vr_nrseqcre INTEGER;
      vr_nrctacar INTEGER;
      vr_contador INTEGER;
      vr_cdtippro INTEGER;
      vr_nmprepos VARCHAR2(100);
      vr_nrcpfpre NUMBER;
	  vr_cdorigem INTEGER;
      vr_datdodia DATE;
      vr_rowid    ROWID;
      vr_cdhistor INTEGER;
      vr_cdhisest INTEGER;
      vr_vltarifa NUMBER;
      vr_dtdivulg DATE;
      vr_dtvigenc DATE;
      vr_cdfvlcop INTEGER;
      vr_flghbtrf NUMBER;
      vr_nrseqdig craplcm.nrseqdig%TYPE :=0;
      
      --Variaveis de Erro
      vr_cdcritic crapcri.cdcritic%TYPE;
      vr_dscritic VARCHAR2(4000);
      vr_des_erro VARCHAR2(4000);
      vr_tab_erro  GENE0001.typ_tab_erro;
      
      --Variaveis de Excecao
      vr_exc_erro EXCEPTION;
      
      --Variavel registro tipo associado
      rw_crabass cr_crapass%ROWTYPE;
      rw_cra2ass cr_crapass%ROWTYPE;
      rw_craplcm craplcm%ROWTYPE;
      --Agrupa os parametros - 15/12/2017 - Chamado 779415 
      vr_dsparame VARCHAR2(4000);

      -- Procedimento para inserir o lote e não deixar tabela lockada
      PROCEDURE pc_insere_lote (pr_cdcooper IN craplot.cdcooper%TYPE,
                                pr_dtmvtolt IN craplot.dtmvtolt%TYPE,
                                pr_cdagenci IN craplot.cdagenci%TYPE,
                                pr_cdbccxlt IN craplot.cdbccxlt%TYPE,
                                pr_nrdolote IN craplot.nrdolote%TYPE,
                                pr_cdoperad IN craplot.cdoperad%TYPE,
                                pr_nrdcaixa IN craplot.nrdcaixa%TYPE,
                                pr_tplotmov IN craplot.tplotmov%TYPE,
                                pr_cdhistor IN craplot.cdhistor%TYPE,
                                pr_craplot  OUT cr_craplot%ROWTYPE,
                                pr_cdcritic OUT INTEGER,
                                pr_dscritic OUT VARCHAR2)IS

        -- Pragma - abre nova sessao para tratar a atualizacao
        PRAGMA AUTONOMOUS_TRANSACTION;
        -- criar rowtype controle
        rw_craplot_ctl cr_craplot%ROWTYPE;

      BEGIN
        -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
        GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_insere_lote - A');

        /* Tratamento para buscar registro de lote se o mesmo estiver em lock, tenta por 10 seg. */
        FOR i IN 1..100 LOOP
          BEGIN
            -- Leitura do lote
            OPEN cr_craplot (pr_cdcooper  => pr_cdcooper,
                             pr_dtmvtolt  => pr_dtmvtolt,
                             pr_cdagenci  => pr_cdagenci,
                             pr_cdbccxlt  => pr_cdbccxlt,
                             pr_nrdolote  => pr_nrdolote);
            FETCH cr_craplot INTO rw_craplot_ctl;
            pr_dscritic := NULL;
            EXIT;
          EXCEPTION
            WHEN OTHERS THEN
               IF cr_craplot%ISOPEN THEN
                 CLOSE cr_craplot;
               END IF;

               -- setar critica caso for o ultimo
               IF i = 100 THEN
                 pr_dscritic:= pr_dscritic||'Registro de lote '||pr_nrdolote||' em uso. Tente novamente.';
               END IF;
               -- aguardar 0,5 seg. antes de tentar novamente
               sys.dbms_lock.sleep(0.1);
          END;
        END LOOP;

        -- se encontrou erro ao buscar lote, abortar programa
        IF pr_dscritic IS NOT NULL THEN
          ROLLBACK;
          RETURN;
        END IF;

        IF cr_craplot%NOTFOUND THEN
          -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
          BEGIN
          -- criar registros de lote na tabela
          INSERT INTO craplot
                  (craplot.cdcooper
                  ,craplot.dtmvtolt
                  ,craplot.cdagenci
                  ,craplot.cdbccxlt
                  ,craplot.nrdolote
                  ,craplot.tplotmov
                  ,craplot.cdoperad
                  ,craplot.cdhistor
                  ,craplot.nrdcaixa
                  ,craplot.cdopecxa)
          VALUES  (pr_cdcooper
                  ,pr_dtmvtolt
                  ,pr_cdagenci
                  ,pr_cdbccxlt
                  ,pr_nrdolote
                  ,pr_tplotmov
                  ,pr_cdoperad
                  ,pr_cdhistor
                  ,pr_nrdcaixa
                  ,pr_cdoperad)
             RETURNING  craplot.ROWID
                       ,craplot.nrdolote
                       ,craplot.cdbccxlt
                       ,craplot.tplotmov
                       ,craplot.dtmvtolt
                       ,craplot.cdagenci
                       ,craplot.cdhistor
                       ,craplot.cdoperad
                       ,craplot.qtcompln
                       ,craplot.qtinfoln
                       ,craplot.vlcompcr
                       ,craplot.vlinfocr
                   INTO rw_craplot_ctl.ROWID
                      , rw_craplot_ctl.nrdolote
                      , rw_craplot_ctl.cdbccxlt
                      , rw_craplot_ctl.tplotmov
                      , rw_craplot_ctl.dtmvtolt
                      , rw_craplot_ctl.cdagenci
                      , rw_craplot_ctl.cdhistor
                      , rw_craplot_ctl.cdoperad
                      , rw_craplot_ctl.qtcompln
                      , rw_craplot_ctl.qtinfoln
                      , rw_craplot_ctl.vlcompcr
                      , rw_craplot_ctl.vlinfocr;
          EXCEPTION
            WHEN OTHERS THEN
              -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
              CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
              pr_cdcritic := 1034;
              pr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic) ||
                            'CRAPLOT(5):' ||
                            ' pr_cdcooper:'   || pr_cdcooper ||
                            ', pr_dtmvtolt:'  || pr_dtmvtolt ||
                            ', pr_cdagenci:'  || pr_cdagenci ||
                            ', pr_cdbccxlt:'  || pr_cdbccxlt ||
                            ', pr_nrdolote:'  || pr_nrdolote ||
                            ', nrseqdig:'     || '1'         ||
                            ', pr_tplotmov:'  || pr_tplotmov ||
                            ', pr_cdoperad:'  || pr_cdoperad ||
                            ', pr_cdhistor:'  || pr_cdhistor ||
                            ', pr_nrdcaixa:'  || pr_nrdcaixa ||
                            ', pr_cdoperad:'  || pr_cdoperad ||
                            '. ' ||sqlerrm;
              --Levantar Excecao
              RAISE vr_exc_erro;                                                        
          END;
        END IF;

        CLOSE cr_craplot;

        -- retornar informações para o programa chamador
        pr_craplot := rw_craplot_ctl;

        COMMIT;
      EXCEPTION
        WHEN vr_exc_erro THEN
          --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
          IF cr_craplot%ISOPEN THEN
            CLOSE cr_craplot;
          END IF;            
          ROLLBACK;
        WHEN OTHERS THEN
          -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
          CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
          IF cr_craplot%ISOPEN THEN
            CLOSE cr_craplot;
          END IF;
          -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
          pr_cdcritic := 9999;
          pr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic) ||
                      'PAGA0001.pc_insere_lote'||
                      '. ' || SQLERRM ||
                      '. pr_cdcooper:' || pr_cdcooper || 
                      ', pr_dtmvtolt:' || pr_dtmvtolt ||
                      ', pr_cdagenci:' || pr_cdagenci ||
                      ', pr_cdbccxlt:' || pr_cdbccxlt ||
                      ', pr_nrdolote:' || pr_nrdolote ||
                      ', pr_cdoperad:' || pr_cdoperad ||
                      ', pr_nrdcaixa:' || pr_nrdcaixa ||
                      ', pr_tplotmov:' || pr_tplotmov ||
                      ', pr_cdhistor:' || pr_cdhistor;		
          ROLLBACK;
      END pc_insere_lote;

    BEGIN
      --Savepoint para abortar sem alterar
      SAVEPOINT TRANS_UNDO;
      
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_executa_transferencia');
     
      --Inicializar variaveis retorno
      pr_cdcritic:= NULL;
      pr_dscritic:= NULL;
      
      --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
      vr_dsparame :=  ' pr_cdcooper:'  || pr_cdcooper ||  
                      ', pr_dtmvtolt:' || pr_dtmvtolt ||
                      ', pr_dtmvtocd:' || pr_dtmvtocd ||
                      ', pr_cdagenci:' || pr_cdagenci ||                         
                      ', pr_cdbccxlt:' || pr_cdbccxlt ||
                      ', pr_nrdolote:' || pr_nrdolote ||
                      ', pr_nrdcaixa:' || pr_nrdcaixa ||
                      ', pr_nrdconta:' || pr_nrdconta ||
                      ', pr_idseqttl:' || pr_idseqttl ||
                      ', pr_nrdocmto:' || pr_nrdocmto ||
                      ', pr_cdhiscre:' || pr_cdhiscre ||
                      ', pr_cdhisdeb:' || pr_cdhisdeb ||
                      ', pr_vllanmto:' || pr_vllanmto ||
                      ', pr_cdoperad:' || pr_cdoperad ||
                      ', pr_nrctatrf:' || pr_nrctatrf ||
                      ', pr_cdagetfn:' || pr_cdagetfn ||
                      ' ,pr_flagenda:' || CASE pr_flagenda
                                            WHEN true 
                                              THEN 'true'
                                              ELSE 'false' 
                                          END || 
                      ', pr_cdcoptfn:' || pr_cdcoptfn ||
                      ', pr_cdagetfn:' || pr_cdagetfn ||
                      ', pr_nrterfin:' || pr_nrterfin ||
                      ', pr_dscartao:' || pr_dscartao ||  
                      ', pr_cdorigem:' || pr_cdorigem ||
                      ', pr_nrcpfope:' || pr_nrcpfope ||
					            ', pr_flmobile:' || pr_flmobile ||
				              ', pr_idtipcar:' || pr_idtipcar ||
                      ', pr_nrcartao:' || pr_nrcartao;

      /* Para origem 4-TAA, quando o par_nrterfin <> 0, esta efetuando a operacao on-line
       no proprio terminal, caso par_nrterfin = 0, esta efetuando debito de agendamento
       via batch, por exemplo */
      IF pr_cdhisdeb = 771 THEN
        pr_dstransa:= 'Credito de Salario';
      ELSE
        pr_dstransa:= 'Transferencia de Valores';
      END IF;
      --Selecionar a data do dia
      vr_datdodia:= trunc(SYSDATE); /*PAGA0001.fn_busca_datdodia(pr_cdcooper => pr_cdcooper); */

      --Se a cooperativa nao existir
      OPEN cr_crapcop(pr_cdcooper => pr_cdcooper);
      FETCH cr_crapcop INTO rw_crapcop;
      --Se nao encontrou
      IF cr_crapcop%NOTFOUND THEN
        --Fechar Cursor
        CLOSE cr_crapcop;
        --Excluida mensagem perdida - 15/12/2017 - Chamado 779415
        --IF pr_cdorigem = 2 THEN /* CASH */ pr_dscritic:= '616'; /* Codigo Erro EXTRACASH */
        --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
        vr_cdcritic:= 1070; --Cooperativa nao cadastrada
        vr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
          --Levantar Excecao
          RAISE vr_exc_erro;
      END IF;
      --Fechar Cursor
      CLOSE cr_crapcop;
      /* Conta origem */
      OPEN cr_crapass(pr_cdcooper => pr_cdcooper
                     ,pr_nrdconta => pr_nrdconta);
      FETCH cr_crapass INTO rw_crapass;
      --Fechar Cursor
      CLOSE cr_crapass;
      --Verificar a conta de destino
      OPEN cr_crapass(pr_cdcooper => pr_cdcooper
                     ,pr_nrdconta => To_Number(pr_nrctatrf));
      FETCH cr_crapass INTO rw_crabass;
      --Exclue AND pr_cdorigem = 2 - 15/12/2017 - Chamado 779415         
      --Se nao encontrou e for cash
      IF cr_crapass%NOTFOUND THEN
        --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        --Exclue pr_dscritic:= '002'; /* Codigo Erro EXTRACASH */
        vr_cdcritic := 9; --Associado nao cadastrado
        vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        --Fechar Cursor
        CLOSE cr_crapass;
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
      --Fechar Cursor
      CLOSE cr_crapass;
      IF pr_cdorigem = 2 THEN   /* CASH */
        /* Nao permite transferir para mesma conta */
        IF  rw_crapass.nrdconta = rw_crabass.nrdconta THEN
          --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
          --Exclue pr_dscritic:= '002'; /* Codigo Erro EXTRACASH */
          vr_cdcritic := 1092; --Transferencia para a mesma conta nao he permitido
          vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
          RAISE vr_exc_erro;
        END IF;
      END IF;

      -- Colocado o savepoint  no inicioda rotina pois se der erro no inicio o rollback faz certo - 15/12/2017 - Chamado 779415

      /*[PROJETO LIGEIRINHO] Esta função retorna verdadeiro, quando o processo foi iniciado pela rotina:
       PAGA0001.pc_efetua_debitos_paralelo, que é chamada na rotina PC_CRPS509. Tem por finalidade definir
       se grava na tabela CRAPLOT no momento em que esta rodando a esta rotina OU somente no final da execucação
       da PC_CRPS509, para evitar o erro de lock da tabela, pois esta gravando a agencia 90,91 ou 1 ao inves de gravar
       a agencia do cooperado*/

       vr_nrseqdig := fn_sequence('CRAPLOT'
                                ,'NRSEQDIG'
                                ,''||pr_cdcooper||';'
                                   ||to_char(pr_dtmvtocd,'DD/MM/RRRR')||';'
                                   ||pr_cdagenci||';'
                                   ||pr_cdbccxlt||';'
                                   ||pr_nrdolote);

      if not fn_exec_paralelo then
      -- Procedimento para inserir o lote e não deixar tabela lockada
      pc_insere_lote (pr_cdcooper => pr_cdcooper,
                      pr_dtmvtolt => pr_dtmvtocd,
                      pr_cdagenci => pr_cdagenci,
                      pr_cdbccxlt => pr_cdbccxlt,
                      pr_nrdolote => pr_nrdolote,
                      pr_cdoperad => pr_cdoperad,
                      pr_nrdcaixa => pr_nrdcaixa,
                      pr_tplotmov => 1,
                      pr_cdhistor => 0,
                      pr_craplot  => rw_craplot,
                        pr_cdcritic => vr_cdcritic,
                      pr_dscritic => vr_dscritic);
      else
        pc_insere_lote_wrk (pr_cdcooper => pr_cdcooper,
                            pr_dtmvtolt => pr_dtmvtocd,
                            pr_cdagenci => pr_cdagenci,
                            pr_cdbccxlt => pr_cdbccxlt,
                            pr_nrdolote => pr_nrdolote,
                            pr_cdoperad => pr_cdoperad,
                            pr_nrdcaixa => pr_nrdcaixa,
                            pr_tplotmov => 1,
                            pr_cdhistor => 0,
                            pr_cdbccxpg => null,
                            pr_nmrotina => 'PC_EXECUTA_TRANSFERENCIA');

        rw_craplot.cdcooper := pr_cdcooper;                   
        rw_craplot.dtmvtolt := pr_dtmvtocd;                  
        rw_craplot.cdagenci := pr_cdagenci;                   
        rw_craplot.cdbccxlt := pr_cdbccxlt;                  
        rw_craplot.nrdolote := pr_nrdolote;                   
        rw_craplot.cdoperad := pr_cdoperad;                   
        rw_craplot.tplotmov := 1;                   
        rw_craplot.cdhistor := 0;
      end if;                        

      -- se encontrou erro ao buscar lote, abortar programa
      IF vr_dscritic IS NOT NULL THEN
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_executa_transferencia');

      /* Se a origem for internet ou TAA */
      IF pr_cdorigem IN (3,4) THEN
        /* Grava uma autenticacao para a transferencia */
        CXON0000.pc_grava_autenticacao (pr_cooper       => pr_cdcooper   --Codigo Cooperativa
                                       ,pr_cod_agencia  => pr_cdagenci   --Codigo Agencia
                                       ,pr_nro_caixa    => pr_nrdcaixa   --Numero do caixa
                                       ,pr_cod_operador => pr_cdoperad   --Codigo Operador
                                       ,pr_valor        => pr_vllanmto   --Valor da transacao
                                       ,pr_docto        => vr_nrseqdig   --Numero documento
                                       ,pr_operacao     => TRUE           --Indicador Operacao Debito
                                       ,pr_status       => '1'            --Status da Operacao - Online
                                       ,pr_estorno      => FALSE          --Indicador Estorno
                                       ,pr_histor       => pr_cdhiscre    --Historico
                                       ,pr_data_off     => NULL           --Data Transacao
                                       ,pr_sequen_off   => 0              --Sequencia
                                       ,pr_hora_off     => 0              --Hora transacao
                                       ,pr_seq_aut_off  => 0              --Sequencia automatica
                                       ,pr_literal      => vr_dslitera    --Descricao literal
                                       ,pr_sequencia    => vr_nrautdoc    --Sequencia
                                       ,pr_registro     => vr_nrdrecid    --ROWID do registro
                                       ,pr_cdcritic     => vr_cdcritic    --Código do erro
                                       ,pr_dscritic     => vr_dscritic);  --Descricao do erro
        IF nvl(vr_cdcritic,0) <> 0 OR trim(vr_dscritic) IS NOT NULL THEN
          --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
          vr_cdcritic := 1089; --Erro na autenticacao da transferencia
          vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
          --Levantar Excecao
          RAISE vr_exc_erro;
        END IF;
	      -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		    GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_executa_transferencia');
      END IF;
      /* CASH ou TAA */
      IF pr_cdorigem = 2 OR (pr_cdorigem = 4 AND pr_nrterfin <> 0) THEN
        --Selecionar terminais financeiros
        OPEN cr_craptfn (pr_cdcoptfn => pr_cdcoptfn
                        ,pr_nrterfin => pr_nrterfin);
        --Posicionar no proximo registro
        FETCH cr_craptfn INTO rw_craptfn;
        --Se nao encontrar
        IF cr_craptfn%NOTFOUND THEN
          --Fechar Cursor
          CLOSE cr_craptfn;
          --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
          --Exclue vr_dscritic:= '995';
          vr_cdcritic:= 1087; --Terminal Financeiro nao cadastrado
          vr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
          --levantar Excecao
          RAISE vr_exc_erro;
        END IF;
        --Fechar Cursor
        CLOSE cr_craptfn;
        --Atualizar tabela terminais
        BEGIN
          UPDATE craptfn SET craptfn.nrultaut = Nvl(craptfn.nrultaut,0) + 1
          WHERE craptfn.ROWID = rw_craptfn.ROWID;
        EXCEPTION
          WHEN Others THEN
            -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
            CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
            -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
            vr_cdcritic := 1034;
            vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                           'CRAPTFN(6):' ||
                           ' nrultaut: Nvl(craptfn.nrultaut,0) + 1'    ||
                           ', ROWID: ' || rw_craptfn.ROWID || 
                           '. ' ||sqlerrm;
            --Levantar Excecao
            RAISE vr_exc_erro;
        END;
      END IF;

      /* Montar Codigo Pesquisa */
      IF pr_cdorigem = 3 THEN  /* INTERNET */
        vr_cdpesqbb:= 'INTERNET - TRANSFERENCIA ON-LINE - CONTA    '||
                        gene0002.fn_mask(pr_nrctatrf,'99999999');
        IF pr_flagenda THEN
          vr_cdpesqbb:= vr_cdpesqbb ||' AGENDADO';
        END IF;
      ELSE  /* TAA */
        vr_cdpesqbb:= 'TAA - TRANSFERENCIA ON-LINE - CONTA         '||
                        gene0002.fn_mask(pr_nrctatrf,'99999999');
        IF pr_flagenda THEN
          vr_cdpesqbb:= vr_cdpesqbb ||' AGENDADO';
        END IF;
      END IF;

      IF NOT pr_flagenda THEN
        OPEN cr_craplcm_dup (pr_cdcooper => pr_cdcooper
                            ,pr_nrdconta => pr_nrdconta
                            ,pr_dtmvtocd => pr_dtmvtocd
                            ,pr_cdhisdeb => pr_cdhisdeb
                            ,pr_vllanmto => pr_vllanmto
                            ,pr_nrctatrf => pr_nrctatrf);
        --Posicionar no proximo registro
        FETCH cr_craplcm_dup INTO vr_hrtransa_dup;
          --Se encontrar
          IF cr_craplcm_dup%FOUND THEN
            --Compara os segundos do último lançamento para não haver duplicidade
            IF (((SYSDATE-TRUNC(SYSDATE))*(24*60*60)) - vr_hrtransa_dup) <= 600 THEN

              --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
              vr_cdcritic := 1090; --Transferencia duplicada. Consulte seu extrato para verificar o lancamento
              vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
              --Levantar Excecao
              RAISE vr_exc_erro;

            END IF;
          END IF;
        --Fechar Cursor
        CLOSE cr_craplcm_dup;

      END IF;

      /* Cria o lancamento do DEBITO */
      lanc0001.pc_gerar_lancamento_conta(
              pr_cdcooper => pr_cdcooper
             ,pr_dtmvtolt => pr_dtmvtocd
             ,pr_cdagenci => pr_cdagenci
             ,pr_cdbccxlt => pr_cdbccxlt
             ,pr_nrdolote => pr_nrdolote
             ,pr_dtrefere => pr_dtmvtocd
             ,pr_hrtransa => GENE0002.fn_busca_time
             ,pr_cdoperad => pr_cdoperad
             ,pr_nrdconta => pr_nrdconta
             ,pr_nrdctabb => pr_nrdconta
             ,pr_nrdctitg => gene0002.fn_mask(pr_nrdconta,'99999999')
             ,pr_nrdocmto => vr_nrseqdig
             ,pr_nrseqdig => vr_nrseqdig
             ,pr_cdhistor => pr_cdhisdeb
             ,pr_vllanmto => pr_vllanmto
             ,pr_cdcoptfn => pr_cdcoptfn
             ,pr_cdagetfn => pr_cdagetfn
             ,pr_nrterfin => pr_nrterfin
             ,pr_cdpesqbb => vr_cdpesqbb
             ,pr_tab_retorno => vr_tab_retorno
             ,pr_incrineg => vr_incrineg
             ,pr_cdcritic => vr_cdcritic
             ,pr_dscritic => vr_dscritic
             );
             
      vr_rowid := vr_tab_retorno.rowidlct;
         
      IF vr_cdcritic > 0 OR 
         vr_dscritic IS NOT NULL THEN
                         
          -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
          CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
          -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415          
          vr_dscritic := vr_dscritic ||
                         'CRAPLCM(7):' ||
                         ' cdcooper:'  || pr_cdcooper || 
                         ', dtmvtolt:' || pr_dtmvtocd || 
                         ', cdagenci:' || pr_cdagenci || 
                         ', cdbccxlt:' || pr_cdbccxlt || 
                         ', nrdolote:' || pr_nrdolote || 
                         ', dtrefere:' || pr_dtmvtocd || 
                         ', hrtransa:' || GENE0002.fn_busca_time || 
                         ', cdoperad:' || pr_cdoperad || 
                         ', nrdconta:' || pr_nrdconta || 
                         ', nrdctabb:' || pr_nrdconta || 
                         ', nrdctitg:' || gene0002.fn_mask(pr_nrdconta,'99999999') || 
                         ', nrdocmto:' || vr_nrseqdig ||
                         ', nrseqdig:' || vr_nrseqdig ||
                         ', cdhistor:' || pr_cdhisdeb || 
                         ', vllanmto:' || pr_vllanmto || 
                         ', cdcoptfn:' || pr_cdcoptfn || 
                         ', cdagetfn:' || pr_cdagetfn || 
                         ', nrterfin:' || pr_nrterfin || 
                         ', cdpesqbb:' || vr_cdpesqbb || 
                         '. ';
          --Levantar Excecao
          RAISE vr_exc_erro;
      END IF;   
      
      --Numero documento debito recebe sequencia lote
      pr_nrdocdeb:= vr_nrseqdig;

      /* Para INTERNET ou em caso de TAA executando em BATCH */
      IF  pr_cdorigem = 3 OR (pr_cdorigem = 4 AND pr_nrterfin = 0) THEN

        BEGIN
          UPDATE craplcm SET craplcm.nrsequni = vr_nrseqdig
                            ,craplcm.nrautdoc = nvl(vr_nrautdoc,0)
          WHERE craplcm.ROWID = vr_rowid
          RETURNING craplcm.cdcooper
                   ,craplcm.dtmvtolt
                   ,craplcm.hrtransa
                   ,craplcm.nrdconta
                   ,craplcm.nrdocmto
                   ,craplcm.vllanmto
          INTO     rw_craplcm.cdcooper
                  ,rw_craplcm.dtmvtolt
                  ,rw_craplcm.hrtransa
                  ,rw_craplcm.nrdconta
                  ,rw_craplcm.nrdocmto
                  ,rw_craplcm.vllanmto;
        EXCEPTION
          WHEN Others THEN
            -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
            CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
            -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
            vr_cdcritic := 1035;
            vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                           'CRAPLCM(6):' ||
                           ' nrsequni:'  || vr_nrseqdig ||
                           ', nrautdoc:' || nvl(vr_nrautdoc,0) || 
                           ' com ROWID:' || vr_rowid || 
                           '. ' ||sqlerrm;
            --Levantar Excecao
            RAISE vr_exc_erro;
        END;
      ELSE
        BEGIN
          UPDATE craplcm SET craplcm.nrsequni = pr_nrdocmto
                            ,craplcm.nrautdoc = nvl(rw_craptfn.nrultaut,0)
          WHERE craplcm.ROWID = vr_rowid
          RETURNING craplcm.cdcooper
                   ,craplcm.dtmvtolt
                   ,craplcm.hrtransa
                   ,craplcm.nrdconta
                   ,craplcm.nrdocmto
                   ,craplcm.vllanmto
                   ,craplcm.nrautdoc
                   ,craplcm.nrsequni
                   ,craplcm.cdhistor
          INTO     rw_craplcm.cdcooper
                  ,rw_craplcm.dtmvtolt
                  ,rw_craplcm.hrtransa
                  ,rw_craplcm.nrdconta
                  ,rw_craplcm.nrdocmto
                  ,rw_craplcm.vllanmto
                  ,rw_craplcm.nrautdoc
                  ,rw_craplcm.nrsequni
                  ,rw_craplcm.cdhistor;
        EXCEPTION
          WHEN Others THEN
            -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
            CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
            -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
            vr_cdcritic := 1035;
            vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                           'CRAPLCM(7):' ||
                           ' nrsequni:'  || pr_nrdocmto || 
                           ', nrautdoc:' || nvl(rw_craptfn.nrultaut,0) || 
                           ' com ROWID:' || vr_rowid || 
                           '. ' ||sqlerrm;
            --Levantar Excecao
            RAISE vr_exc_erro;              
        END;
      END IF;

      -- Procedimento para reservar o nrseqdig
     /*[PROJETO LIGEIRINHO] Esta função retorna verdadeiro, quando o processo foi iniciado pela rotina:
       PAGA0001.pc_efetua_debitos_paralelo, que é chamada na rotina PC_CRPS509. Tem por finalidade definir
       se grava na tabela CRAPLOT no momento em que esta rodando a esta rotina OU somente no final da execucação
       da PC_CRPS509, para evitar o erro de lock da tabela, pois esta gravando a agencia 90,91 ou 1 ao inves de gravar
       a agencia do cooperado*/
     
     vr_nrseqdig := fn_sequence('CRAPLOT'
                                ,'NRSEQDIG'
                                ,''||pr_cdcooper||';'
                                   ||to_char(pr_dtmvtocd,'DD/MM/RRRR')||';'
                                   ||pr_cdagenci||';'
                                   ||pr_cdbccxlt||';'
                                   ||pr_nrdolote);  
     
     if not fn_exec_paralelo then

        -- Procedimento para reservar o nrseqdig
      pc_insere_lote (pr_cdcooper => pr_cdcooper,
                      pr_dtmvtolt => pr_dtmvtocd,
                      pr_cdagenci => pr_cdagenci,
                      pr_cdbccxlt => pr_cdbccxlt,
                      pr_nrdolote => pr_nrdolote,
                      pr_cdoperad => pr_cdoperad,
                      pr_nrdcaixa => pr_nrdcaixa,
                      pr_tplotmov => 1,
                      pr_cdhistor => 0,
                      pr_craplot  => rw_craplot,
                        pr_cdcritic => vr_cdcritic,
                      pr_dscritic => vr_dscritic);
     else   
       pc_insere_lote_wrk (pr_cdcooper => pr_cdcooper,
                           pr_dtmvtolt => pr_dtmvtocd,
                           pr_cdagenci => pr_cdagenci,
                           pr_cdbccxlt => pr_cdbccxlt,
                           pr_nrdolote => pr_nrdolote,
                           pr_cdoperad => pr_cdoperad,
                           pr_nrdcaixa => pr_nrdcaixa,
                           pr_tplotmov => 1,
                           pr_cdhistor => 0,
                           pr_cdbccxpg => null,
                           pr_nmrotina => 'PC_EXECUTA_TRANSFERENCIA');  

        rw_craplot.cdcooper := pr_cdcooper;                   
        rw_craplot.dtmvtolt := pr_dtmvtocd;                  
        rw_craplot.cdagenci := pr_cdagenci;                   
        rw_craplot.cdbccxlt := pr_cdbccxlt;                  
        rw_craplot.nrdolote := pr_nrdolote;                   
        rw_craplot.cdoperad := pr_cdoperad;                                    
        rw_craplot.tplotmov := 1;                   
        rw_craplot.cdhistor := 0;
     end if;

	    -- Incluido tratamento - 15/12/2017 - Chamado 779415
      -- se encontrou erro ao buscar lote, abortar programa
      IF vr_dscritic IS NOT NULL THEN
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_executa_transferencia');

      /* INTERNET ou TAA */
      IF pr_cdorigem = 3 OR pr_cdorigem = 4 THEN
        /* Formata nrdconta para visualizacao na internet */
        vr_nrdconta:= GENE0002.fn_mask_conta(rw_crabass.nrdconta);
        --Trocar o ultimo ponto por traco
        vr_nrdconta:= SubStr(vr_nrdconta,1,Length(vr_nrdconta)-2)||'-'||
                      SubStr(vr_nrdconta,Length(vr_nrdconta),1);
        --Se for pessoa fisica
        IF rw_crapass.inpessoa = 1 THEN
          /* Nome do titular que fez a transferencia */
          OPEN cr_crapttl (pr_cdcooper => rw_crapass.cdcooper
                          ,pr_nrdconta => rw_crapass.nrdconta
                          ,pr_idseqttl => pr_idseqttl);
          --Posicionar no proximo registro
          FETCH cr_crapttl INTO rw_crapttl;
          --Se nao encontrar
          IF cr_crapttl%NOTFOUND THEN
            --Fechar Cursor
            CLOSE cr_crapttl;
            --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
            vr_cdcritic:= 1082; --Titular nao encontrado
            vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
            RAISE vr_exc_erro;
          END IF;
          --Fechar Cursor
          CLOSE cr_crapttl;
          --Nome titular
          vr_nmextttl:= rw_crapttl.nmextttl;
        ELSE
          vr_nmextttl:= rw_crapass.nmprimtl;
        END IF;
        /* Campos da crappro para visualizacao na internet */
        IF pr_cdhisdeb = 771 THEN
          vr_dsinfor1:= 'Credito de Salario';
        ELSE
          vr_dsinfor1:= 'Transferencia';
        END IF;
        vr_dsinfor2:= vr_nmextttl ||'#' ||
                      'Conta/dv Destino: ' ||vr_nrdconta ||' - '||
                      rw_crabass.nmprimtl||'#'|| gene0002.fn_mask(rw_crapcop.cdagectl,'9999')||
                      ' - '|| rw_crapcop.nmrescop;

        vr_dsinfor3 := NULL;

        IF pr_nrterfin <> 0 THEN
          vr_dsinfor3:= 'TAA: '||gene0002.fn_mask(rw_craptfn.cdcooper,'9999')||'/'||
                                 gene0002.fn_mask(rw_craptfn.cdagenci,'9999')||'/'||
                                 gene0002.fn_mask(rw_craptfn.nrterfin,'9999');
        END IF;

        IF  pr_cdorigem = 3 THEN
          /* busca dados do preposto */
          vr_nmprepos:= NULL;
          vr_nrcpfpre:= 0;
          --selecionar senha
          OPEN cr_crapsnh (pr_cdcooper => pr_cdcooper
                          ,pr_nrdconta => pr_nrdconta
                          ,pr_idseqttl => 1
                          ,pr_tpdsenha => 1);
          --Posicionar no proximo registro
          FETCH cr_crapsnh INTO rw_crapsnh;
          --Se encontrar
          IF cr_crapsnh%FOUND THEN
            --Numero cpf preposto
            vr_nrcpfpre:= rw_crapsnh.nrcpfcgc;
            --Selecionar Avalista
            OPEN cr_crapavt (pr_cdcooper => rw_crapsnh.cdcooper
                            ,pr_nrdconta => rw_crapsnh.nrdconta
                            ,pr_tpctrato => 6
                            ,pr_nrcpfcgc => rw_crapsnh.nrcpfcgc);
            --Posicionar no proximo registro
            FETCH cr_crapavt INTO rw_crapavt;
            --Se nao encontrar
            IF cr_crapavt%FOUND THEN
              --Selecionar informacoes avalista
              OPEN cr_crapass (pr_cdcooper => pr_cdcooper
                              ,pr_nrdconta => rw_crapavt.nrdctato);
              --Posicionar no proximo registro
              FETCH cr_crapass INTO rw_cra2ass;
              --Se nao encontrar
              IF cr_crapass%FOUND THEN
                --Nome preposto recebe nome avalista
                vr_nmprepos:= rw_cra2ass.nmprimtl;
              ELSE
                --Nome preposto recebe nome avalista
                vr_nmprepos:= rw_crapavt.nmdavali;
              END IF;
              --Fechar Cursor
              CLOSE cr_crapass;
            END IF;
            --Fechar Cursor
            CLOSE cr_crapavt;
          END IF;
          --Fechar Cursor
          CLOSE cr_crapsnh;
        END IF;
        --Determinar tipo operacao
        IF pr_cdhisdeb = 771 THEN
          vr_cdtippro:= 4; /* Credito Salario */
        ELSE
          vr_cdtippro:= 1; /* Transferencia   */
        END IF;
        --Gerar protocolo
        GENE0006.pc_gera_protocolo(pr_cdcooper => rw_craplcm.cdcooper  --> Código da cooperativa
                                  ,pr_dtmvtolt => rw_craplcm.dtmvtolt  --> Data movimento
                                  ,pr_hrtransa => rw_craplcm.hrtransa  --> Hora da transação
                                  ,pr_nrdconta => rw_craplcm.nrdconta  --> Número da conta
                                  ,pr_nrdocmto => rw_craplcm.nrdocmto  --> Número do documento
                                  ,pr_nrseqaut => nvl(vr_nrautdoc,0)          --> Número da sequencia
                                  ,pr_vllanmto => rw_craplcm.vllanmto  --> Valor lançamento
                                  ,pr_nrdcaixa => pr_nrdcaixa          --> Número do caixa
                                  ,pr_gravapro => TRUE                 --> Controle de gravação
                                  ,pr_cdtippro => vr_cdtippro          --> Código de operação
                                  ,pr_dsinfor1 => vr_dsinfor1          --> Descrição 1
                                  ,pr_dsinfor2 => vr_dsinfor2          --> Descrição 2
                                  ,pr_dsinfor3 => vr_dsinfor3          --> Descrição 3
                                  ,pr_dscedent => NULL                 --> Descritivo
                                  ,pr_flgagend => pr_flagenda          --> Controle de agenda
                                  ,pr_nrcpfope => pr_nrcpfope          --> Número de operação
                                  ,pr_nrcpfpre => vr_nrcpfpre          --> Número pré operação
                                  ,pr_nmprepos => vr_nmprepos          --> Nome
                                  ,pr_dsprotoc => pr_dsprotoc          --> Descrição do protocolo
                                  ,pr_dscritic => vr_dscritic          --> Descrição crítica
                                  ,pr_des_erro => vr_des_erro);        --> Descrição dos erros de processo
        --Se ocorreu erro
        IF vr_dscritic IS NOT NULL OR vr_des_erro IS NOT NULL THEN
          --Levantar Excecao
          RAISE vr_exc_erro;
        END IF;
	      -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		    GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_executa_transferencia');
        --Verificar se existe registro autenticacao
        OPEN cr_crapaut (pr_rowid => vr_nrdrecid);
        --Posicionar no proximo registro
        FETCH cr_crapaut INTO rw_crapaut;
        --Se nao encontrar
        IF cr_crapaut%NOTFOUND THEN
          --Fechar Cursor
          CLOSE cr_crapaut;
          --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
          vr_cdcritic := 1086; --Registro da autenticacao nao encontrado
          vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
          --Levantar Excecao
          RAISE vr_exc_erro;
        END IF;
        --Fechar Cursor
        CLOSE cr_crapaut;
        --Atualizar protocolo no registro de autenticacao
        BEGIN
          UPDATE crapaut SET crapaut.dsprotoc = pr_dsprotoc
          WHERE crapaut.ROWID = rw_crapaut.ROWID;
        EXCEPTION
          WHEN OTHERS THEN
            -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
            CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
            -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
            vr_cdcritic := 1035;
            vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                           'CRAPAUT(8):' ||
                           ' dsprotoc:'  || pr_dsprotoc ||
                           ' com ROWID:' || rw_crapaut.ROWID ||'. ' ||sqlerrm;
          --Levantar Excecao
          RAISE vr_exc_erro;
        END;
      END IF;

      /* CASH ou TAA */
      IF pr_cdorigem = 2 OR (pr_cdorigem  = 4  AND pr_nrterfin <> 0) THEN
        --Gravar log transacao caixa
        BEGIN
          INSERT INTO crapltr
                 (crapltr.cdcooper
                 ,crapltr.cdoperad
                 ,crapltr.nrterfin
                 ,crapltr.dtmvtolt
                 ,crapltr.nrautdoc
                 ,crapltr.nrdconta
                 ,crapltr.nrdocmto
                 ,crapltr.nrsequni
                 ,crapltr.cdhistor
                 ,crapltr.vllanmto
                 ,crapltr.dttransa
                 ,crapltr.hrtransa
                 ,crapltr.nrcartao
                 ,crapltr.tpautdoc
                 ,crapltr.nrestdoc
                 ,crapltr.cdsuperv)
          VALUES (pr_cdcooper
                 ,rw_craptfn.cdoperad
                 ,rw_craptfn.nrterfin
                 ,pr_dtmvtocd
                 ,rw_craplcm.nrautdoc
                 ,rw_craplcm.nrdconta
                 ,rw_craplcm.nrdocmto
                 ,rw_craplcm.nrsequni
                 ,rw_craplcm.cdhistor
                 ,rw_craplcm.vllanmto
                 ,Trunc(SYSDATE)
                 ,rw_craplcm.hrtransa
                 ,vr_nrcartao
                 ,1
                 ,0
                 ,' ');
        EXCEPTION
          WHEN OTHERS THEN
            -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
            CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
            -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
            vr_cdcritic := 1034;
            vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                           'CRAPLTR(8):' ||
                           ' cdcooper:'   || pr_cdcooper ||
                           ', cdoperad:'  || rw_craptfn.cdoperad ||
                           ', nrterfin:'  || rw_craptfn.nrterfin ||
                           ', dtmvtolt:'  || pr_dtmvtocd ||
                           ', nrautdoc:'  || rw_craplcm.nrautdoc ||
                           ', nrdconta:'  || rw_craplcm.nrdconta ||
                           ', nrdocmto:'  || rw_craplcm.nrdocmto ||
                           ', nrsequni:'  || rw_craplcm.nrsequni ||
                           ', cdhistor:'  || rw_craplcm.cdhistor ||
                           ', vllanmto:'  || rw_craplcm.vllanmto ||
                           ', dttransa:'  || 'Trunc(SYSDATE)' ||
                           ', hrtransa:'  || rw_craplcm.hrtransa ||
                           ', nrcartao:'  || vr_nrcartao ||
                           ', tpautdoc:'  || '1' ||
                           ', nrestdoc:'  || '0' ||
                           ', cdsuperv:'  || ' ' ||
                           '. ' ||sqlerrm;
          --Levantar Excecao
          RAISE vr_exc_erro;
        END;
      END IF;

      /* INTERNET TAA */
      IF pr_cdorigem IN (3,4) THEN
        /* Grava uma autenticacao para a transferencia */
        CXON0000.pc_grava_autenticacao (pr_cooper       => pr_cdcooper   --Codigo Cooperativa
                                       ,pr_cod_agencia  => pr_cdagenci   --Codigo Agencia
                                       ,pr_nro_caixa    => pr_nrdcaixa   --Numero do caixa
                                       ,pr_cod_operador => pr_cdoperad   --Codigo Operador
                                       ,pr_valor        => pr_vllanmto   --Valor da transacao
                                       ,pr_docto        => vr_nrseqdig   --Numero documento
                                       ,pr_operacao     => FALSE           --Indicador Operacao Debito
                                       ,pr_status       => '1'            --Status da Operacao - Online
                                       ,pr_estorno      => FALSE          --Indicador Estorno
                                       ,pr_histor       => pr_cdhiscre    --Historico
                                       ,pr_data_off     => NULL           --Data Transacao
                                       ,pr_sequen_off   => 0              --Sequencia
                                       ,pr_hora_off     => 0              --Hora transacao
                                       ,pr_seq_aut_off  => 0              --Sequencia automatica
                                       ,pr_literal      => vr_dslitera    --Descricao literal
                                       ,pr_sequencia    => vr_nrautdoc    --Sequencia
                                       ,pr_registro     => vr_nrdrecid    --ROWID do registro
                                       ,pr_cdcritic     => vr_cdcritic    --Código do erro
                                       ,pr_dscritic     => vr_dscritic);  --Descricao do erro
        IF nvl(vr_cdcritic,0) <> 0 OR TRIM(vr_dscritic) IS NOT NULL THEN
          --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
          vr_cdcritic := 1089; --Erro na autenticacao da transferencia
          vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
          --Levantar Excecao
          RAISE vr_exc_erro;
        END IF;
	      -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		    GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_executa_transferencia');
      END IF;

      /* CASH ou TAA */
      IF pr_cdorigem = 2 OR (pr_cdorigem = 4 AND pr_nrterfin <> 0) THEN
        --Selecionar terminais financeiros
        OPEN cr_craptfn (pr_cdcoptfn => pr_cdcoptfn
                        ,pr_nrterfin => pr_nrterfin);
        --Posicionar no proximo registro
        FETCH cr_craptfn INTO rw_craptfn;
        --Se nao encontrar
        IF cr_craptfn%NOTFOUND THEN
          --Fechar Cursor
          CLOSE cr_craptfn;
          --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
          --Exclue vr_dscritic:= '995';
          vr_cdcritic := 1087; --Terminal Financeiro nao cadastrado.
          vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
          --levantar Excecao
          RAISE vr_exc_erro;
        END IF;
        --Fechar Cursor
        CLOSE cr_craptfn;
        --Atualizar tabela terminais
        BEGIN
          UPDATE craptfn SET craptfn.nrultaut = Nvl(craptfn.nrultaut,0) + 1
          WHERE craptfn.ROWID = rw_craptfn.ROWID;
        EXCEPTION
          WHEN Others THEN
            -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
            CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
            -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
            vr_cdcritic := 1035;
            vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                           'CRAPTFN(9):' ||
                           ' nrultaut:  Nvl(craptfn.nrultaut,0) + 1'  ||
                           ' com ROWID:' || rw_craptfn.ROWID || 
                           '. ' ||sqlerrm;
            --Levantar Excecao
            RAISE vr_exc_erro;
        END;
      END IF;

      /* Atencao na alteracao da string pois o termo AGENDADO do *
       * campo cdpesqbb eh utilizado em regra da BO b1wgen0001,  *
       * na composicao de saldo (procedure obtem-saldo-dia)      */
      IF pr_cdorigem = 3 THEN  /* INTERNET */
        vr_cdpesqbb:= 'INTERNET - TRANSFERENCIA ON-LINE - CONTA    '||
                        gene0002.fn_mask(pr_nrdconta,'99999999');
        IF pr_flagenda THEN
          vr_cdpesqbb:= vr_cdpesqbb ||' AGENDADO';
        END IF;
      ELSE  /* TAA */
        vr_cdpesqbb:= 'TAA - TRANSFERENCIA ON-LINE - CONTA         '||
                        gene0002.fn_mask(pr_nrdconta,'99999999');
        IF pr_flagenda THEN
          vr_cdpesqbb:= vr_cdpesqbb||' AGENDADO';
        END IF;
      END IF;
      /* Cria o lancamento do CREDITO */
      BEGIN
         lanc0001.pc_gerar_lancamento_conta(
              pr_cdcooper => pr_cdcooper
             ,pr_dtmvtolt => pr_dtmvtocd
             ,pr_cdagenci => pr_cdagenci
             ,pr_cdbccxlt => pr_cdbccxlt
             ,pr_nrdolote => pr_nrdolote
             ,pr_dtrefere => pr_dtmvtocd
             ,pr_hrtransa => GENE0002.fn_busca_time
             ,pr_cdoperad => pr_cdoperad
             ,pr_nrdconta => To_Number(pr_nrctatrf)
             ,pr_nrdctabb => To_Number(pr_nrctatrf)
             ,pr_nrdctitg => gene0002.fn_mask(pr_nrctatrf,'99999999')
             ,pr_nrseqdig => vr_nrseqdig
             ,pr_nrdocmto => vr_nrseqdig
             ,pr_cdhistor => pr_cdhiscre
             ,pr_vllanmto => pr_vllanmto
             ,pr_cdcoptfn => pr_cdcoptfn
             ,pr_cdagetfn => pr_cdagetfn
             ,pr_nrterfin => pr_nrterfin
             ,pr_cdpesqbb => vr_cdpesqbb
             ,pr_tab_retorno => vr_tab_retorno
             ,pr_incrineg => vr_incrineg
             ,pr_cdcritic => vr_cdcritic
             ,pr_dscritic => vr_dscritic
             );
             
         vr_rowid := vr_tab_retorno.rowidlct;
         IF nvl(vr_cdcritic,0) > 0 OR 
            trim(vr_dscritic) IS NOT NULL THEN
                
           --Levantar Excecao
           RAISE vr_exc_erro;   
         END IF;
         
      EXCEPTION
        WHEN vr_exc_erro THEN
          RAISE vr_exc_erro; 
        WHEN Others THEN
          -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
          CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
          -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
          vr_cdcritic := 1034;
          vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                           'CRAPLCM(9):' ||
                           ' cdcooper:'   || pr_cdcooper ||
                           ', dtmvtolt:'  || pr_dtmvtocd ||
                           ', cdagenci:'  || pr_cdagenci ||
                           ', cdbccxlt:'  || pr_cdbccxlt ||
                           ', nrdolote:'  || pr_nrdolote ||
                           ', dtrefere:'  || pr_dtmvtocd ||
                           ', hrtransa:'  || GENE0002.fn_busca_time ||
                           ', cdoperad:'  || pr_cdoperad ||
                           ', nrdconta:'  || To_Number(pr_nrctatrf) ||
                           ', nrdctabb:'  || To_Number(pr_nrctatrf) ||
                           ', nrdctitg:'  || gene0002.fn_mask(pr_nrctatrf,'99999999') ||
                           ', nrseqdig:'  || vr_nrseqdig ||
                           ', nrdocmto:'  || vr_nrseqdig ||
                           ', cdhistor:'  || pr_cdhiscre ||
                           ', vllanmto:'  || pr_vllanmto ||
                           ', cdcoptfn:'  || pr_cdcoptfn ||
                           ', cdagetfn:'  || pr_cdagetfn ||
                           ', nrterfin:'  || pr_nrterfin ||
                           ', cdpesqbb:'  || vr_cdpesqbb ||			   
                           '. ' ||sqlerrm;
          --Levantar Excecao
          RAISE vr_exc_erro;
      END;
      --Numero documento credito recebe sequencia lote
      pr_nrdoccre:= vr_nrseqdig;

      /* Para INTERNET ou em caso de TAA executando em BATCH */
      IF  pr_cdorigem = 3 OR (pr_cdorigem = 4 AND pr_nrterfin = 0) THEN

        --Atualizar tabela lancamentos
        BEGIN
          UPDATE craplcm SET craplcm.nrsequni = vr_nrseqdig
                            ,craplcm.nrautdoc = nvl(vr_nrautdoc,0)
          WHERE craplcm.ROWID = vr_rowid
          RETURNING craplcm.cdcooper
                   ,craplcm.dtmvtolt
                   ,craplcm.hrtransa
                   ,craplcm.nrdconta
                   ,craplcm.nrdocmto
                   ,craplcm.vllanmto
          INTO     rw_craplcm.cdcooper
                  ,rw_craplcm.dtmvtolt
                  ,rw_craplcm.hrtransa
                  ,rw_craplcm.nrdconta
                  ,rw_craplcm.nrdocmto
                  ,rw_craplcm.vllanmto;
        EXCEPTION
          WHEN Others THEN
            -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
            CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
            -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
            vr_cdcritic := 1035;
            vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                           'CRAPLCM(10):' ||
                           ' nrsequni:'   || vr_nrseqdig ||
                           ', nrautdoc:'  || nvl(vr_nrautdoc,0) ||
                           ' com ROWID:'  || vr_rowid|| 
                           '. ' ||sqlerrm;

        END;
      ELSE
        /* TAA, execucao on-line */
        BEGIN
          UPDATE craplcm SET craplcm.nrsequni = pr_nrdocmto
                            ,craplcm.nrautdoc = rw_craptfn.nrultaut
          WHERE craplcm.ROWID = vr_rowid
          RETURNING craplcm.cdcooper
                   ,craplcm.dtmvtolt
                   ,craplcm.hrtransa
                   ,craplcm.nrdconta
                   ,craplcm.nrdocmto
                   ,craplcm.vllanmto
                   ,craplcm.nrautdoc
                   ,craplcm.nrsequni
                   ,craplcm.cdhistor
          INTO     rw_craplcm.cdcooper
                  ,rw_craplcm.dtmvtolt
                  ,rw_craplcm.hrtransa
                  ,rw_craplcm.nrdconta
                  ,rw_craplcm.nrdocmto
                  ,rw_craplcm.vllanmto
                  ,rw_craplcm.nrautdoc
                  ,rw_craplcm.nrsequni
                  ,rw_craplcm.cdhistor;
        EXCEPTION
          WHEN Others THEN
            -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
            CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
            -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
            vr_cdcritic := 1035;
            vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                           'CRAPLCM(11):' ||
                           ' nrsequni:'   || pr_nrdocmto ||
                           ', nrautdoc:'  || rw_craptfn.nrultaut ||
                           ' com ROWID:'  || vr_rowid|| 
                           '. ' ||sqlerrm;
        END;
      END IF;

      /* INTERNET */
      IF pr_cdorigem = 3 THEN
        --Verificar se existe registro autenticacao
        OPEN cr_crapaut (pr_rowid => vr_nrdrecid);
        --Posicionar no proximo registro
        FETCH cr_crapaut INTO rw_crapaut;
        --Se nao encontrar
        IF cr_crapaut%NOTFOUND THEN
          --Fechar Cursor
          CLOSE cr_crapaut;
          --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
          vr_cdcritic := 1086; --Registro da autenticacao nao encontrado
          vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
          --Levantar Excecao
          RAISE vr_exc_erro;
        END IF;
        --Fechar Cursor
        CLOSE cr_crapaut;
        --Atualizar registro autenticacao
        BEGIN
          UPDATE crapaut SET crapaut.dsprotoc = pr_dsprotoc
          WHERE crapaut.ROWID = rw_crapaut.ROWID;
        EXCEPTION
          WHEN OTHERS THEN
            -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
            CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
            -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
            vr_cdcritic := 1035;
            vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                           'CRAPAUT(12):' ||
                           ' dsprotoc:'   || pr_dsprotoc ||
                           ' com ROWID:'  || rw_crapaut.ROWID|| 
                           '. ' ||sqlerrm;
          --Levantar Excecao
          RAISE vr_exc_erro;
        END;
      END IF;

      /* INTERNET */
      IF pr_cdorigem = 3 THEN

        IF rw_crapass.idastcjt = 0 THEN
		
          -- Atualiza o registro de movimento da internet
          paga0001.pc_insere_movimento_internet(pr_cdcooper => pr_cdcooper 
                                               ,pr_nrdconta => pr_nrdconta
                                               ,pr_idseqttl => pr_idseqttl
                                               ,pr_dtmvtolt => pr_dtmvtocd
                                               ,pr_cdoperad => pr_cdoperad
                                               ,pr_inpessoa => rw_crapass.inpessoa
                                               ,pr_tpoperac => 1 -- Transferência
                                               ,pr_vllanmto => pr_vllanmto
                                               ,pr_dscritic => vr_dscritic);
          
                    --Levantar Excecao
          IF vr_dscritic IS NOT NULL THEN
             vr_cdcritic := substr(vr_dscritic,1,5);
             vr_dscritic := substr(vr_dscritic,7);
                    RAISE vr_exc_erro;
              END IF;
	        -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		      GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_executa_transferencia');
            
        ELSE
          FOR rw_crappod IN cr_crappod(pr_cdcooper => pr_cdcooper
                                      ,pr_nrdconta => pr_nrdconta) LOOP

            OPEN cr_crapsnh2(pr_cdcooper => rw_crappod.cdcooper
                            ,pr_nrdconta => rw_crappod.nrdconta
                            ,pr_nrcpfcgc => rw_crappod.nrcpfpro);
                                    
            FETCH cr_crapsnh2 INTO rw_crapsnh2;

            IF cr_crapsnh2%NOTFOUND THEN
              CLOSE cr_crapsnh2;
              CONTINUE;
            ELSE
              CLOSE cr_crapsnh2;
	          END IF;

            -- Atualiza o registro de movimento da internet
            paga0001.pc_insere_movimento_internet(pr_cdcooper => pr_cdcooper 
                                                 ,pr_nrdconta => pr_nrdconta
                                                 ,pr_idseqttl => rw_crapsnh2.idseqttl
                                                 ,pr_dtmvtolt => pr_dtmvtolt
                                                 ,pr_cdoperad => pr_cdoperad
                                                 ,pr_inpessoa => rw_crapass.inpessoa
                                                 ,pr_tpoperac => 1 -- Transferência
                                                 ,pr_vllanmto => pr_vllanmto
                                                 ,pr_dscritic => vr_dscritic);
                                      
                    --Levantar Excecao
            IF vr_dscritic IS NOT NULL THEN
             vr_cdcritic := substr(vr_dscritic,1,5);
             vr_dscritic := substr(vr_dscritic,7);
                    RAISE vr_exc_erro;
              END IF;
            -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
            GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_executa_transferencia');
                        
          END LOOP;  

        END IF;
        --Flag para identificar se há tarifa ou não
        vr_flghbtrf := GENE0001.fn_param_sistema(pr_nmsistem => 'CRED'
                                                ,pr_cdcooper => pr_cdcooper
                                                ,pr_cdacesso => 'FOLHAIB_TARI_TRF_TPSAL');
	      -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		    GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_executa_transferencia');

      	--Se há tarifas
        IF vr_flghbtrf = 1 AND    --Credito Salario 
           pr_cdhisdeb = 771 THEN --Tarifa = Sim
          -- Busca o valor davr_cdhistor tarifa
          TARI0001.pc_carrega_dados_tar_vigente(pr_cdcooper  => pr_cdcooper    --Codigo Cooperativa
                                               ,pr_cdbattar  => 'TRANSTPSAL'   -- Codigo Tarifa 
                                               ,pr_vllanmto  => pr_vllanmto    -- Valor Lancamento
                                               ,pr_cdprogra  => 'PAGA0001'     -- Codigo Programa  
                                               ,pr_cdhistor  => vr_cdhistor    -- Codigo Historico
                                               ,pr_cdhisest  => vr_cdhisest    -- Historico Estorno
                                               ,pr_vltarifa  => vr_vltarifa    -- Valor tarifa
                                               ,pr_dtdivulg  => vr_dtdivulg    -- Data Divulgacao
                                               ,pr_dtvigenc  => vr_dtvigenc    -- Data Vigencia
                                               ,pr_cdfvlcop  => vr_cdfvlcop    -- Codigo faixa valor cooperativa
                                               ,pr_cdcritic  => vr_cdcritic    -- Codigo Critica
                                               ,pr_dscritic  => vr_dscritic    -- Descricao Critica
                                               ,pr_tab_erro  => vr_tab_erro);  -- Tabela erros

          -- Se ocorreu erro
          IF vr_cdcritic IS NOT NULL OR vr_dscritic IS NOT NULL THEN
                    
            -- Se possui erro no vetor
            IF vr_tab_erro.Count >  0   THEN
              vr_cdcritic := vr_tab_erro(vr_tab_erro.FIRST).cdcritic;
              vr_dscritic := vr_tab_erro(vr_tab_erro.FIRST).dscritic;
            ELSE
              --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
              vr_cdcritic := 1058; --Nao foi possivel carregar a tarifa
              vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        END IF;
            -- Levantar Excecao
            RAISE vr_exc_erro;
      END IF;
	        -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		      GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_executa_transferencia');

          -- Criar Lancamento automatico tarifa
          TARI0001.pc_cria_lan_auto_tarifa(pr_cdcooper      => pr_cdcooper
                                          ,pr_nrdconta      => pr_nrdconta
                                          ,pr_dtmvtolt      => pr_dtmvtocd
                                          ,pr_cdhistor      => vr_cdhistor
                                          ,pr_vllanaut      => vr_vltarifa
                                          ,pr_cdoperad      => '1'
                                          ,pr_cdagenci      => 1
                                          ,pr_cdbccxlt      => 100
                                          ,pr_nrdolote      => 10299
                                          ,pr_tpdolote      => 18
                                          ,pr_nrdocmto      => vr_nrseqdig
                                          ,pr_nrdctabb      => pr_nrdconta
                                          ,pr_nrdctitg      => GENE0002.fn_mask(pr_nrdconta,'99999999')
                                          ,pr_cdpesqbb      => 'Fato gerador tarifa:' || TO_CHAR(vr_nrseqdig)
                                          ,pr_cdbanchq      => 0
                                          ,pr_cdagechq      => 0
                                          ,pr_nrctachq      => 0
                                          ,pr_flgaviso      => FALSE
                                          ,pr_tpdaviso      => 0
                                          ,pr_cdfvlcop      => vr_cdfvlcop
                                          ,pr_inproces      => rw_crapdat.inproces
                                          ,pr_rowid_craplat => vr_rowid
                                          ,pr_tab_erro      => vr_tab_erro
                                          ,pr_cdcritic      => vr_cdcritic
                                          ,pr_dscritic      => vr_dscritic);
                                          
          -- Se ocorreu erro
          IF vr_cdcritic IS NOT NULL OR vr_dscritic IS NOT NULL THEN
            -- Se possui erro no vetor
            IF vr_tab_erro.Count > 0 THEN
              vr_cdcritic := vr_tab_erro(vr_tab_erro.FIRST).cdcritic;
              vr_dscritic := vr_tab_erro(vr_tab_erro.FIRST).dscritic;
            ELSE
              --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
              vr_cdcritic := 1091; --Erro no lancamento tarifa de transferencia do tipo credito salario
              vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
            END IF;
            -- Levantar Excecao
            RAISE vr_exc_erro;
          END IF;  
	        -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		      GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_executa_transferencia');
          
        END IF; 

      END IF;

		IF pr_flmobile = 1 THEN
			vr_cdorigem := 9;
		ELSE 
			vr_cdorigem := pr_cdorigem;
		END IF;
			
		-- Geracao de log para operacoes que podem utilizar o cartao ORIGEM	
		CADA0004.pc_gera_log_ope_cartao(pr_cdcooper       => pr_cdcooper    -- Codigo da cooperativa
                                   ,pr_nrdconta       => pr_nrdconta    -- Numero da conta
                                   ,pr_indoperacao    => 4              -- Operacao realizada no log (1-Saque/2-Doc/3-Ted/4-Transferencia/5-Talao de cheque) Alterar Andrino
                                   ,pr_cdorigem       => vr_cdorigem    -- Origem do lancamento (1-Ayllos/2-Caixa/3-Internet/4-Cash/5-Ayllos WEB/6-URA/7-Batch/8-Mensageria)
									                 ,pr_indtipo_cartao => pr_idtipcar    -- Tipo de cartao utilizado. (0-Sem cartao/1-Magnetico/2-Cartao Cecred) Alterar Andrino
                                   ,pr_nrdocmto       => pr_nrdocdeb    -- Numero do documento utilizado no lancamento
                                   ,pr_cdhistor       => pr_cdhisdeb    -- Codigo do historico utilizado no lancamento
                                   ,pr_nrcartao       => to_char(pr_nrcartao) -- Numero do cartao utilizado. Zeros quando nao existe cartao
                                   ,pr_vllanmto       => pr_vllanmto    -- Valor do lancamento
                                   ,pr_cdoperad       => pr_cdoperad    -- Codigo do operador
                                   ,pr_cdbccrcb       => 0              -- Codigo do banco de destino para os casos de TED e DOC
                                   ,pr_cdfinrcb       => 0              -- Codigo da finalidade para operacoes de TED e DOC
																	 ,pr_cdpatrab       => pr_cdagenci 
                                   ,pr_nrseqems       => 0 
                                   ,pr_nmreceptor     => ''
                                   ,pr_nrcpf_receptor => 0
									                 ,pr_dscritic       => vr_dscritic);  -- Descricao do erro quando houver
		IF nvl(vr_cdcritic,0) <> 0 OR trim(vr_dscritic) IS NOT NULL THEN			
			vr_cdcritic:= 0;			
			RAISE vr_exc_erro;
		END IF;

	  -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
    GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);

    EXCEPTION
      -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415      
      -- Disparadores: b1wgen0015.p.executa_transferencia      - Não ativa PAGA0001 no progress
      --               paga0002.pc_InternetBank22              - Não grava TBGEN - Necessario avaliar    
      --               paga0001.pc_debita_agendto_transf       - Não grava TBGEN
      --
      --               Eliminar a gravação do Log aqui quando acertar a paga0002.pc_InternetBank22       
      WHEN vr_exc_erro THEN
        pr_cdcritic:= vr_cdcritic;
        pr_dscritic:= vr_dscritic;
        -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        --> Geração de log                             
        pc_controla_log_programa( pr_cdcooper      => pr_cdcooper
                                 ,pr_dstiplog      => 'E' -- Tipo de Log - E = erro
                                 ,pr_tpocorrencia  => 1   -- 1-Erro de negocio
                                 ,pr_cdcriticidade => 1
                                 ,pr_cdmensagem    => vr_cdcritic -- Codigo do Log
                                 ,pr_dsmensagem    => vr_dscritic || -- Descrição do Log
                                                      vr_dsparame
                                 );  
        BEGIN                          
        --rollback do savepoint
        ROLLBACK TO TRANS_UNDO;
        EXCEPTION
      WHEN OTHERS THEN
            -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
            CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
            --   Foi colocado o tratamento de exception peleo motivo que o programa cada004.pc_gera_log_ope_cartao
            -- quando sai com erro tem um ROLLBACK e entra em conflito com o ROLLBACK TO TRANS_UNDO
            -- desta forma caso aconteça essa situação o programa não sai por erro 
            -- e fica registrado na tbgen_erro_sistema o erro ORA-01086
        END;
	      -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		    GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);
      WHEN OTHERS THEN
        -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
        CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
        -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        pr_cdcritic:= 9999;
        pr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic) ||
                      'PAGA0001.pc_executa_transferencia' || 
                      '. ' || SQLERRM ||
                      '.'  || vr_dsparame;
        --> Geração de log                             
        pc_controla_log_programa( pr_cdcooper      => pr_cdcooper
                                 ,pr_dstiplog      => 'E' -- Tipo de Log - E = erro
                                 ,pr_tpocorrencia  => 2   
                                 ,pr_cdmensagem    => pr_cdcritic  -- Codigo do Log
                                 ,pr_dsmensagem    => pr_dscritic  -- Descrição
                                 ); 
        BEGIN                          
        --rollback do savepoint
        ROLLBACK TO TRANS_UNDO;
        EXCEPTION
          WHEN OTHERS THEN
            -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
            CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
            --   Foi colocado o tratamento de exception peleo motivo que o programa cada004.pc_gera_log_ope_cartao
            -- quando sai com erro tem um ROLLBACK e entra em conflito com o ROLLBACK TO TRANS_UNDO
            -- desta forma caso aconteça essa situação o programa não sai por erro 
            -- e fica registrado na tbgen_erro_sistema o erro ORA-01086
        END;
  
	      -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		    GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);
    END;
  END pc_executa_transferencia;

  /* Procedure para verificar qual o historico para a transferencia */
  PROCEDURE pc_verifica_historico_transf (pr_cdcooper IN crapcop.cdcooper%TYPE  --Código Cooperativa
                                         ,pr_nrdconta IN crapass.nrdconta%TYPE  --Conta associado
                                         ,pr_nrctatrf IN crapcti.nrctatrf%TYPE  --Conta destino
                                         ,pr_cdorigem IN INTEGER                --Identificador Origem
                                         ,pr_cdtiptra IN craplau.cdtiptra%TYPE  --Tipo transacao
                                         ,pr_cdhiscre OUT craphis.cdhistor%TYPE  --Historico Credito
                                         ,pr_cdhisdeb OUT craphis.cdhistor%TYPE  --Historico Debito
                                         ,pr_cdcritic OUT INTEGER  --Código do erro
                                         ,pr_dscritic OUT VARCHAR2) IS --Descricao do erro
    -- ..........................................................................
    --
    --  Programa : pc_verifica_historico_transf        Antiga: B1wgen0015.p/verifica-historico_transferencia
    --  Sistema  : Rotinas Internet
    --  Sigla    : INET
    --  Autor    : Alisson C. Berrido - AMcom
    --  Data     : Junho/2013.                   Ultima atualizacao: 15/12/2017
    --
    --  Dados referentes ao programa:
    --
    --   Frequencia: Sempre que for chamado
    --   Objetivo  : Verificar qual o historico para a transferencia
    --
    --             02/08/2017 - Ajuste para retirar o uso de campos removidos da tabela
    --   		                    crapass, crapttl, crapjur 
    -- 						             (Adriano - P339).
    --
    --             15/12/2017 - Incluido nome do módulo logado
    --                          No caso de erro de programa gravar tabela especifica de log                     
    --                          Ajuste mensagem de erro 
    --                          (Belli - Envolti - Chamado 779415)        
    --
    --
    -- ..........................................................................

  BEGIN
    DECLARE
      --Cursor para buscar o cpf do segundo titular
      CURSOR cr_cpf_titular(pr_cdcooper IN crapttl.cdcooper%TYPE
                           ,pr_nrdconta IN crapttl.nrdconta%TYPE)IS
      SELECT crapttl.nrcpfcgc
        FROM crapttl
       WHERE crapttl.cdcooper = pr_cdcooper
         AND crapttl.nrdconta = pr_nrdconta
         AND crapttl.idseqttl = 2; --Segundo titular
      
      --Tipo de cursor de associados
      rw_crabass  cr_crapass%ROWTYPE;
      --Variaveis de Erro
      vr_cdcritic crapcri.cdcritic%TYPE;
      vr_dscritic VARCHAR2(4000);
      --Variaveis de Excecao
      vr_exc_saida EXCEPTION;
      vr_exc_erro  EXCEPTION;
      
      --Variáveis locais
      vr_nrcpfcgc1 crapttl.nrcpfcgc%TYPE;
      vr_nrcpfcgc2 crapttl.nrcpfcgc%TYPE;      
      --Agrupa os parametros - 15/12/2017 - Chamado 779415 
      vr_dsparame VARCHAR2(4000);     
      
    BEGIN
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_verifica_historico_transf');
      
      --Inicializar variaveis retorno
      pr_cdcritic:= NULL;
      pr_dscritic:= NULL;
      vr_nrcpfcgc1 := 0;
      vr_nrcpfcgc2 := 0;
      
      --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
      vr_dsparame := ' pr_cdcooper:'  || pr_cdcooper ||
                     ', pr_nrdconta:' || pr_nrdconta ||
					           ', pr_nrctatrf:' || pr_nrctatrf ||
				             ', pr_cdorigem:' || pr_cdorigem ||
                     ', pr_cdtiptra:' || pr_cdtiptra;
      
      /** Transferencia de credito de salario pela internet **/
      IF pr_cdorigem = 3 AND pr_cdtiptra = 3 THEN
        --determinar historico de debito e credito
        pr_cdhiscre:= 772;
        pr_cdhisdeb:= 771;
        --Sair
        RAISE vr_exc_saida;
      END IF;
      --Verificar a conta de origem
      OPEN cr_crapass(pr_cdcooper => pr_cdcooper
                     ,pr_nrdconta => pr_nrdconta);
      FETCH cr_crapass INTO rw_crapass;
      CLOSE cr_crapass;
      
      --Busca o CPF do segundo titular
      OPEN cr_cpf_titular(pr_cdcooper => pr_cdcooper
                         ,pr_nrdconta => pr_nrdconta);
                     
      FETCH cr_cpf_titular INTO vr_nrcpfcgc1;
      CLOSE cr_cpf_titular;
      
      --Verificar a conta de destino
      OPEN cr_crapass(pr_cdcooper => pr_cdcooper
                     ,pr_nrdconta => To_Number(pr_nrctatrf));
      FETCH cr_crapass INTO rw_crabass;
      CLOSE cr_crapass;
      
      --Busca o CPF do segundo titular
      OPEN cr_cpf_titular(pr_cdcooper => pr_cdcooper
                         ,pr_nrdconta => To_Number(pr_nrctatrf));
                     
      FETCH cr_cpf_titular INTO vr_nrcpfcgc2;
      CLOSE cr_cpf_titular;
      
      /** Verifica titularidade das contas para ver qual historico utilizar **/
      IF rw_crapass.nrcpfcgc = rw_crabass.nrcpfcgc  AND
         vr_nrcpfcgc1        = vr_nrcpfcgc2        THEN
        IF pr_cdorigem = 3 THEN
          pr_cdhisdeb:= 538;
        ELSE
          pr_cdhisdeb:= 376;
        END IF;
      ELSIF vr_nrcpfcgc1        = vr_nrcpfcgc2  AND
            rw_crapass.nrcpfcgc = vr_nrcpfcgc2  THEN
        IF pr_cdorigem = 3 THEN
          pr_cdhisdeb:= 538;
        ELSE
          pr_cdhisdeb:= 376;
        END IF;
      ELSIF rw_crapass.nrcpfcgc = rw_crabass.nrcpfcgc  AND
            vr_nrcpfcgc2 = 0                           THEN
        IF pr_cdorigem = 3 THEN
          pr_cdhisdeb:= 538;
        ELSE
          pr_cdhisdeb:= 376;
        END IF;
      ELSIF vr_nrcpfcgc1 = rw_crabass.nrcpfcgc  AND
            vr_nrcpfcgc2 = 0                    THEN
        IF pr_cdorigem = 3 THEN
          pr_cdhisdeb:= 538;
        ELSE
          pr_cdhisdeb:= 376;
        END IF;
      ELSE
        IF pr_cdorigem = 3 THEN
          pr_cdhisdeb:= 537;
        ELSE
          pr_cdhisdeb:= 375;
        END IF;
      END IF;
      --Historico de Credito
      IF pr_cdorigem = 3 THEN
        pr_cdhiscre:= 539;
      ELSE
        pr_cdhiscre:= 377;
      END IF;
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);
    EXCEPTION
      -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
      -- Disparadores: paga0002.pc_InternetBank22              - Não grava TBGEN - Necessario avaliar
      --               paga0002.pc_cancelar_agendamento        - Não grava TBGEN
      --               paga0001.pc_debita_agendto_transf       - Não grava TBGEN
      --
      --               Eliminar a gravação do Log aqui quando acertar a paga0002.pc_InternetBank22 
      WHEN vr_exc_saida THEN
        pr_cdcritic:= NULL;
        pr_dscritic:= NULL;
      WHEN vr_exc_erro THEN
        pr_cdcritic:= vr_cdcritic;
        pr_dscritic:= vr_dscritic;
      WHEN OTHERS THEN
        -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
        CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
        -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        pr_cdcritic:= 9999;
        pr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic) ||
                      'PAGA0001.pc_verifica_historico_transf' || 
                      '. ' || SQLERRM ||
                      '.'  || vr_dsparame;		
    END;
  END pc_verifica_historico_transf;

  /* Procedure para debitar os agendamentos de transferencia */
  PROCEDURE pc_debita_agendto_transf (pr_cdcooper IN crapcop.cdcooper%TYPE   --Codigo Cooperativa
                                     ,pr_cdagenci IN crapage.cdagenci%TYPE   --Codigo Agencia
                                     ,pr_nrdcaixa IN craplot.nrdcaixa%TYPE   --Numero Caixa
                                     ,pr_cdoperad IN crapope.cdoperad%TYPE   --Operador
                                     ,pr_nmdatela IN craptel.nmdatela%TYPE   --Nome programa
                                     ,pr_idorigem IN INTEGER                 --origem (TAA ou Internet)
                                     ,pr_dtmvtolt IN crapdat.dtmvtolt%TYPE   --Data pagamento
                                     ,pr_inproces IN crapdat.inproces%TYPE   --Indicador Processo
                                     ,pr_flsgproc IN BOOLEAN                 --Flag segundo processamento
                                     ,pr_cdtiptra IN INTEGER                 --Codigo tipo transferencia
                                     ,pr_craplau_progress_recid IN NUMBER    --Recid lancamento automático
                                     ,pr_cdcritic OUT INTEGER      --Codigo da Critica
                                     ,pr_dscritic OUT VARCHAR2) IS  --Descricao da critica);
    /* ..........................................................................

      Programa : pc_debita_agendto_transf        Antiga: B1wgen0016.p/debita-agendamento-transferencia
      Sistema  : Rotinas Pagamento
      Sigla    : PAGA
      Autor    : Alisson C. Berrido - AMcom
      Data     : Junho/2013.                   Ultima atualizacao: 15/12/2017

      Dados referentes ao programa:

       Frequencia: Sempre que for chamado
       Objetivo  : Efetuar debitos.de agendamento de transferencia

       Alteracoes: 31/01/2014 - Alterar Rowid pelo Progress Recid (Gabriel)

                   21/05/2014 - Ajustes para buscar a descrição da critica caso
                                só tenha o codigo, e ajustado para durante o processamento
                                usar somente as variaveis vr_dscritic e vr_cdcritic (Odirlei/AMcom)

                   10/06/2014 - Ajuste para verificar o tpoperac correto, dependendo da
                                conta destino.
                                (Jorge/Thiago) - Emergencial SD
                   25/07/2014 - Ao efetuar uma transferencia efetuada no TAA e verificar que não
                                havia saldo o suficiente para a operação, um raise era levantado,
                                quando apenas uma flag deveria ser marcada, para que a rotina de transferencias
                                tivesse o mesmo comportamento do pagamento de titulos.
                                ao levantar a exceção, o rollback era feito e o insitlau não era atualizado.
                                (Douglas/Thiago Rodrigues - Chamado 179602)

                   10/02/2015 - Criação de mensagem de notificação no internetbank ao gerar
                                 crítica de insuficiência de saldo para débito (Agend./Pagam./Transf.) (Lunelli - SD. 229251)

                   30/03/2015 - Correção no formato de data das mensagens enviadas por
                                crítica de insuficiência de saldo para débito (Lunelli - SD. 267208)

                   16/09/2015 - Melhoria performace, inclusao do parametro de tipo de busca na chamada do procedimento
                                EXTR0001.pc_obtem_saldo_dia, para utilizar a dtmvtoan como base na busca(Odirlei-AMcom)

                   24/09/2015 - Realizado a inclusão do pr_nmdatela (Adriano - SD 328034).

                   20/11/2015 - Tratamento para nao utilizar inprocess, rotina sera rodada 
                               via job SD358495 (Odirlei-AMcom)

                   21/12/2015 - Incluido verificacao de situação de transacao pendente, Prj. Assinatura
                                Conjunta (Jean Michel).            

                   05/04/2016 - Ajustado conforme solicitação do SD 429445 (Jean Michel).                        
        
                   15/12/2017 - Incluido nome do módulo logado
                                No caso de erro de programa gravar tabela especifica de log                     
                                Ajuste mensagem de erro 
                                (Belli - Envolti - Chamado 779415)        
                            
     ..........................................................................*/


  BEGIN
    DECLARE

      CURSOR cr_crapcti (pr_cdcooper IN crapcop.cdcooper%TYPE
                        ,pr_nrdconta IN crapass.nrdconta%TYPE
                        ,pr_cddbanco IN craplau.cddbanco%TYPE
                        ,pr_nrctatrf IN craplau.nrctadst%TYPE
                        ,pr_cdageban IN craplau.cdageban%TYPE) IS
      SELECT c.nmtitula
        FROM crapcti c
       WHERE c.cdcooper = pr_cdcooper
         AND c.nrdconta = pr_nrdconta
         AND c.cddbanco = pr_cddbanco
         AND c.nrctatrf = pr_nrctatrf
         AND c.cdageban = pr_cdageban;
      rw_crapcti cr_crapcti%ROWTYPE;

      --Tipo da tabela de saldos
      vr_tab_saldo EXTR0001.typ_tab_saldos;
      --Tipo de tabelas de limites
      vr_tab_limite INET0001.typ_tab_limite;
      vr_tab_internet INET0001.typ_tab_internet;
      --Tipo de tabela de erro
      vr_tab_erro GENE0001.typ_tab_erro;

      --Variaveis Locais
      vr_dstransa  VARCHAR2(1000);
      vr_dstrans1  VARCHAR2(1000);
      vr_dsorigem  VARCHAR2(1000);
      vr_dsprotoc  VARCHAR2(1000);
      vr_dscedent  VARCHAR2(1000);
      vr_nmtldest  VARCHAR2(100);
      vr_dssituac  VARCHAR2(20);
      vr_dssituac2 VARCHAR2(20);
      vr_dsdmensg  VARCHAR2(1000);
      vr_insitlau  INTEGER;
      vr_nrdolote  INTEGER;
      vr_cdhiscre  INTEGER;
      vr_cdhisdeb  INTEGER;
      vr_indtrans  INTEGER;
      vr_nrdocdeb  NUMBER;
      vr_nrdoccre  NUMBER;
      vr_cdlantar  craplat.cdlantar%TYPE;
      vr_nrdocmto  NUMBER;
      vr_flgtrans  BOOLEAN;
      vr_flerrtaa  BOOLEAN;
      vr_nrdrowid  ROWID;
      vr_cdcopage  crapcop.cdcooper%TYPE;
      vr_tpoperac  INTEGER;
      vr_flultexe  INTEGER;
      vr_qtdexec   INTEGER;
      
      --Variaveis de Erro
      vr_cdcritic crapcri.cdcritic%TYPE;
      vr_dscritic VARCHAR2(4000);
      vr_dscritic2 VARCHAR2(4000);
      --Variaveis de Excecao
      vr_exc_erro EXCEPTION;
      --Variaveis de Registro
      rw_crabass  cr_crapass%ROWTYPE;
      --Agrupa os parametros - 15/12/2017 - Chamado 779415 
      vr_dsparame VARCHAR2(4000);
    BEGIN
	     -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		   GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_debita_agendto_transf');
      
       --Inicializar variaveis retorno
       pr_cdcritic:= NULL;
       pr_dscritic:= NULL;
      
       --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
       vr_dsparame := ' pr_cdcooper:'  || pr_cdcooper ||
                      ', pr_cdagenci:' || pr_cdagenci ||
                      ', pr_nrdcaixa:' || pr_nrdcaixa ||
                      ', pr_cdoperad:' || pr_cdoperad ||
                      ', pr_nmdatela:' || pr_nmdatela ||
                      ', pr_idorigem:' || pr_idorigem ||
                      ', pr_dtmvtolt:' || pr_dtmvtolt ||
                      ', pr_inproces:' || pr_inproces ||
                      ' ,pr_flsgproc:' || CASE pr_flsgproc
                                            WHEN true 
                                              THEN 'true'
                                              ELSE 'false' 
                                          END || 
                      ', pr_cdtiptra:' || pr_cdtiptra ||
                      ', pr_craplau_progress_recid:' || pr_craplau_progress_recid;		

       --Inicializar variaveis controle
       vr_flgtrans:= FALSE;
       vr_flerrtaa:= FALSE;
       vr_insitlau:= 0;
       --Inicia variavel
       vr_tpoperac:= 1;
       --Determinar tipo transferencia
       IF pr_cdtiptra = 1 THEN
         vr_dstransa:= 'Efetua agendamento para transferencia';
       ELSE
         vr_dstransa:= 'Efetua agendamento para credito de salario';
       END IF;

       --Savepoint para abortar sem alterar
       SAVEPOINT TRANS_UNDO;

       --Determinar a Origem
       vr_dsorigem:= TRIM(GENE0001.vr_vet_des_origens(pr_idorigem));
       --Numero do lote
       vr_nrdolote:= 11000 + pr_nrdcaixa;
       --Verificar se o lancamento automatico existe
       OPEN cr_craplau (pr_progress_recid  => pr_craplau_progress_recid);
       FETCH cr_craplau INTO rw_craplau;
       IF cr_craplau%NOTFOUND THEN
         --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
         vr_cdcritic := 1071; --Registro de agendamento nao encontrado.
         vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
         --Fechar Cursor
         CLOSE cr_craplau;
         --Levantar Excecao
         RAISE vr_exc_erro;
       END IF;

       --Fechar Cursor
       CLOSE cr_craplau;
       --Verificar se a cooperativa existe
       OPEN cr_crapcop (pr_cdcooper => pr_cdcooper);
       FETCH cr_crapcop INTO rw_crapcop;
       IF cr_crapcop%NOTFOUND THEN
         --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
         vr_cdcritic := 1070; --Registro de cooperativa nao encontrado
         vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
         --Fechar Cursor
         CLOSE cr_crapcop;
         --Levantar Excecao
         RAISE vr_exc_erro;
       END IF;
       --Fechar Cursor
       CLOSE cr_crapcop;
       -- Verifica se a data esta cadastrada
       OPEN BTCH0001.cr_crapdat(pr_cdcooper => pr_cdcooper);
       FETCH BTCH0001.cr_crapdat INTO rw_crapdat;
       -- Se não encontrar
       IF BTCH0001.cr_crapdat%NOTFOUND THEN
         -- Fechar o cursor pois haverá raise
         CLOSE BTCH0001.cr_crapdat;
         --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
         -- Montar mensagem de critica
         vr_cdcritic := 1;
         vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
         RAISE vr_exc_erro;
       ELSE
         -- Apenas fechar o cursor
         CLOSE BTCH0001.cr_crapdat;
       END IF;
       
       --> Verificar a execução da DEBNET/DEBSIC 
       SICR0001.pc_controle_exec_deb ( pr_cdcooper  => pr_cdcooper        --> Código da coopertiva
                                      ,pr_cdtipope  => 'C'                         --> Tipo de operacao I-incrementar e C-Consultar
                                      ,pr_dtmvtolt  => rw_crapdat.dtmvtolt         --> Data do movimento                                
                                      ,pr_cdprogra  => pr_nmdatela                 --> Codigo do programa                                  
                                      ,pr_flultexe  => vr_flultexe                 --> Retorna se é a ultima execução do procedimento
                                      ,pr_qtdexec   => vr_qtdexec                  --> Retorna a quantidade
                                      ,pr_cdcritic  => vr_cdcritic                 --> Codigo da critica de erro
                                      ,pr_dscritic  => vr_dscritic);               --> descrição do erro se ocorrer

       IF nvl(vr_cdcritic,0) > 0 OR
          TRIM(vr_dscritic) IS NOT NULL THEN
         RAISE vr_exc_erro; 
       END IF; 
	     -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		   GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_debita_agendto_transf');       
       
       --Selecionar informacoes do associado
       OPEN cr_crapass(pr_cdcooper => pr_cdcooper
                      ,pr_nrdconta => rw_craplau.nrdconta);
       FETCH cr_crapass INTO rw_crapass;
       CLOSE cr_crapass;
       --Inicializar tabela erros e saldos
       vr_tab_erro.DELETE;
       vr_tab_saldo.DELETE;
       --Determinar situacao lancamento
       vr_insitlau:= rw_craplau.insitlau;
       --Se a origem for TAA
       IF pr_idorigem = 4 THEN /* TAA */
         /** Verifica se possui saldo para fazer a operacao **/
         EXTR0001.pc_obtem_saldo_dia (pr_cdcooper   => pr_cdcooper
                                     ,pr_rw_crapdat => rw_crapdat
                                     ,pr_cdagenci   => pr_cdagenci
                                     ,pr_nrdcaixa   => pr_nrdcaixa
                                     ,pr_cdoperad   => pr_cdoperad
                                     ,pr_nrdconta   => rw_craplau.nrdconta
                                     ,pr_vllimcre   => rw_crapass.vllimcre
                                     ,pr_tipo_busca => 'A' --> tipo de busca(A-dtmvtoan)
                                     ,pr_flgcrass   => FALSE
                                     ,pr_dtrefere   => pr_dtmvtolt
                                     ,pr_des_reto   => vr_dscritic
                                     ,pr_tab_sald   => vr_tab_saldo
                                     ,pr_tab_erro   => vr_tab_erro);
         --Se ocorreu erro
         IF vr_dscritic = 'NOK' THEN
           -- Tenta buscar o erro no vetor de erro
           IF vr_tab_erro.COUNT > 0 THEN
             vr_cdcritic:= vr_tab_erro(vr_tab_erro.FIRST).cdcritic;
             vr_dscritic:= vr_tab_erro(vr_tab_erro.FIRST).dscritic|| ' Conta: '||rw_craplau.nrdconta;
           ELSE
             --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
             -- Montar mensagem de critica 
             vr_cdcritic:= 9998; --Retorno "NOK" na extr0001.pc_obtem_saldo_dia e sem informação na pr_tab_erro, Conta: 
             vr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                           ' EXTR0001.pc_obtem_saldo_dia, conta: '||rw_craplau.nrdconta;
           END IF;
           --Levantar Excecao
           RAISE vr_exc_erro;
         ELSE
           vr_dscritic:= NULL;
         END IF;
         --Verificar o saldo retornado
         IF vr_tab_saldo.Count = 0 THEN
           --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
           --Montar mensagem erro
           vr_cdcritic := 1072; --Nao foi possivel consultar o saldo para a operacao.
           vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
           --Levantar Excecao
           RAISE vr_exc_erro;
         ELSE
	         -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		       GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_debita_agendto_transf');
           --Se o saldo nao for suficiente
           IF rw_craplau.vllanaut > (nvl(vr_tab_saldo(vr_tab_saldo.FIRST).vlsddisp,0) +
                                     nvl(vr_tab_saldo(vr_tab_saldo.FIRST).vllimcre,0)) THEN
            --> Se for a primeira execução da DEBNET/CRPS509 
			IF vr_flultexe <> 1 THEN --- Se não for a última execução -- Projeto Debitador
              --Verificar a conta de destino
              OPEN cr_crapcti(pr_cdcooper => pr_cdcooper
                             ,pr_nrdconta => rw_craplau.nrdconta
                             ,pr_cddbanco => rw_craplau.cddbanco
                             ,pr_nrctatrf => rw_craplau.nrctadst
                             ,pr_cdageban => rw_craplau.cdageban);
                               
              FETCH cr_crapcti INTO rw_crapcti;

              vr_nmtldest := '';
                
              IF cr_crapcti%FOUND THEN
                 vr_nmtldest := rw_crapcti.nmtitula;
              END IF;
                
              CLOSE cr_crapcti;
			  --
              vr_dsdmensg := 'Atenção, %23cooperado%23! <br><br><br>' ||
                                   'Informamos que a seguinte transação não foi efetivada: <br><br> ' ||
                                   '<b>Transferência</b> para <b>' || rw_craplau.cdageban || '/' || GENE0002.fn_mask_conta(rw_craplau.nrctadst) ||
                                   ' - ' || vr_nmtldest || '</b> agendada para <b>' ||
                                   to_char(rw_craplau.dtmvtopg, 'DD/MM/YYYY') || '</b> no valor de <b>R$' || To_Char(rw_craplau.vllanaut,'fm999g999g990d00') || ' ' ||
                                   '</b> por insuficiência de saldo.';

              -- Criação de mensagem no internetbank - [TODO] Remover todas as chamadas do pc_gerar_mensagem quando o novo ibank entrar no ar
                    GENE0003.pc_gerar_mensagem (pr_cdcooper   => pr_cdcooper
                                               ,pr_nrdconta   => rw_craplau.nrdconta
                                         --,pr_idseqttl   => GERA PARA TODOS OS USUÁRIOS
                                               ,pr_cdprogra   => pr_nmdatela
                                               ,pr_inpriori   => 0
                                               ,pr_dsdmensg   => vr_dsdmensg
                                               ,pr_dsdassun   => 'Transação não efetivada'
                                               ,pr_dsdremet   => rw_crapcop.nmrescop
                                               ,pr_dsdplchv   => 'Sem Saldo'
                                               ,pr_cdoperad   => '1'
                                               ,pr_cdcadmsg   => '0'
                                               ,pr_dscritic   => vr_dscritic);
	            -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		          GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_debita_agendto_transf');

              vr_variaveis_notif('#dataagendamento') := to_char(rw_craplau.dtmvtopg, 'DD/MM/YYYY');
              vr_variaveis_notif('#valor') := to_char(rw_craplau.vllanaut,'fm999g999g990d00');
              vr_variaveis_notif('#bancodestino') := to_char(rw_craplau.cddbanco);
              vr_variaveis_notif('#agenciadestino') := to_char(rw_craplau.cdageban);
              vr_variaveis_notif('#contadestino') := GENE0002.fn_mask_conta(rw_craplau.nrctadst);
              vr_variaveis_notif('#destinatario') := vr_nmtldest;
              vr_variaveis_notif('#motivo') := 'insuficiência de saldo';
										
              -- Cria uma notificação
              noti0001.pc_cria_notificacao(pr_cdorigem_mensagem => ORIGEM_AGEND_NAO_EFETIVADO
                                          ,pr_cdmotivo_mensagem => MOTIVO_TRANSFERENCIA
                                          --,pr_dhenvio => SYSDATE
                                          ,pr_cdcooper => pr_cdcooper
                                          ,pr_nrdconta => rw_craplau.nrdconta
                                          ,pr_variaveis => vr_variaveis_notif);
	            -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		          GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_debita_agendto_transf');

									END IF;
                  
             --Marcar que ocorreu erro TAA
             vr_flerrtaa:= TRUE;
             --Montar mensagem erro
             --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
             vr_cdcritic := 717; --Nao ha saldo suficiente para a operacao
             vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);

           END IF;
         END IF;
       ELSE -- Se não for TAA
         --Validar operacao com cooperativa destino
         --Seleciona cooperativa atraves de campo cdagectl
         BEGIN
            SELECT crapcop.cdcooper INTO vr_cdcopage FROM crapcop WHERE crapcop.cdagectl = rw_craplau.cdageban;
         EXCEPTION
            WHEN OTHERS THEN
              -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
              CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
              -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
              vr_cdcritic := 1036; -- Problema ao cncontrar agencia destino
              vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                             'CRAPCOP(1):' ||
                             ' com cdagectl:'    || rw_craplau.cdageban ||
                             '. pr_cdcooper:' || pr_cdcooper || 
                             ', pr_cdagenci:' || pr_cdagenci ||
                             ', pr_nrdcaixa:' || pr_nrdcaixa ||
                             ', pr_cdoperad:' || pr_cdoperad ||
                             ', pr_nmdatela:' || pr_nmdatela ||
                             ', pr_idorigem:' || pr_idorigem ||
                             ', pr_dtmvtolt:' || pr_dtmvtolt ||
                             ', pr_inproces:' || pr_inproces ||
                             ' ,pr_flsgproc:' || CASE pr_flsgproc
                                                   WHEN true 
                                                     THEN 'true'
                                                     ELSE 'false' 
                                                 END || 
                             ', pr_cdtiptra:' || pr_cdtiptra ||
                             ', pr_craplau_progress_recid:' || pr_craplau_progress_recid||
                             '. ' || sqlerrm ;
              RAISE vr_exc_erro;
         END;
         IF pr_cdcooper <> vr_cdcopage THEN
            vr_tpoperac:= 5; /* transf. intercooperativa */
         END IF;

         --Verificar Operacao
         INET0001.pc_verifica_operacao (pr_cdcooper => pr_cdcooper          --Código Cooperativa
                                       ,pr_cdagenci => pr_cdagenci          --Agencia do Associado
                                       ,pr_nrdcaixa => pr_nrdcaixa          --Numero caixa
                                       ,pr_nrdconta => rw_craplau.nrdconta  --Numero da conta
                                       ,pr_idseqttl => rw_craplau.idseqttl  --Identificador Sequencial titulo
                                       ,pr_dtmvtolt => pr_dtmvtolt          --Data Movimento
                                       ,pr_idagenda => 1                    --Efetua Debito
                                       ,pr_dtmvtopg => rw_craplau.dtmvtopg  --Data Pagamento
                                       ,pr_vllanmto => rw_craplau.vllanaut  --Valor Lancamento
                                       ,pr_cddbanco => rw_craplau.cddbanco  --Codigo banco
                                       ,pr_cdageban => rw_craplau.cdageban  --Codigo Agencia
                                       ,pr_nrctatrf => rw_craplau.nrctadst  --Numero Conta Transferencia
                                       ,pr_cdtiptra => rw_craplau.cdtiptra  --Tipo transacao
                                       ,pr_cdoperad => pr_cdoperad          --Codigo Operador
                                       ,pr_tpoperac => vr_tpoperac          --Transferencia
                                       ,pr_flgvalid => TRUE                 --Indicador validacoes
                                       ,pr_dsorigem => vr_dsorigem          --Descricao Origem
                                       ,pr_nrcpfope => 0                    --CPF operador
                                       ,pr_flgctrag => FALSE                --controla validacoes na efetivacao de agendamentos */
                                       ,pr_nmdatela => pr_nmdatela          --> Nome da tela
                                       ,pr_dstransa => vr_dstrans1          --Descricao da transacao
                                       ,pr_tab_limite => vr_tab_limite      --Tabelas de retorno de horarios limite
                                       ,pr_tab_internet => vr_tab_internet --Tabelas de retorno de horarios limite
                                       ,pr_cdcritic => vr_cdcritic          --Codigo do erro
                                       ,pr_dscritic => vr_dscritic
                                       ,pr_assin_conjunta => vr_assin_conjunta);        --Descricao do erro;
	       -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		     GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_debita_agendto_transf');

         --Substituicao da condicao fixa por codigo - 15/12/2017 - Chamado 779415               
         IF  vr_dscritic = 'Nao ha saldo suficiente para a operacao.' OR
             vr_cdcritic = 717                                           THEN
          /* Se for a primeira execução da DEBNET/CRPS509 */
          --IF vr_qtdexec < 3 THEN 
          IF vr_flultexe <> 1 THEN --- Se não for a última execução -- Projeto Debitador
              --Verificar a conta de destino
              OPEN cr_crapcti(pr_cdcooper => pr_cdcooper
                             ,pr_nrdconta => rw_craplau.nrdconta
                             ,pr_cddbanco => rw_craplau.cddbanco
                             ,pr_nrctatrf => rw_craplau.nrctadst
                             ,pr_cdageban => rw_craplau.cdageban);
                               
              FETCH cr_crapcti INTO rw_crapcti;

              vr_nmtldest := '';
                
              IF cr_crapcti%FOUND THEN
                 vr_nmtldest := rw_crapcti.nmtitula;
              END IF;
                
              CLOSE cr_crapcti;
			  --
            vr_dsdmensg := 'Atenção, %23cooperado%23! <br><br><br>' ||
                                   'Informamos que a seguinte transação não foi efetivada: <br><br> ' ||
                                   '<b>Transferência</b> para <b>' || rw_craplau.cdageban || '/' || GENE0002.fn_mask_conta(rw_craplau.nrctadst) ||
                                   ' - ' || vr_nmtldest || '</b> agendada para <b>' ||
                                   to_char(rw_craplau.dtmvtopg, 'DD/MM/YYYY') || '</b> no valor de <b>R$' || To_Char(rw_craplau.vllanaut,'fm999g999g990d00') || ' ' ||
                                   '</b> por insuficiência de saldo.';

              -- Criação de mensagem no internetbank - [TODO] Remover todas as chamadas do pc_gerar_mensagem quando o novo ibank entrar no ar
                    GENE0003.pc_gerar_mensagem (pr_cdcooper   => pr_cdcooper
                                               ,pr_nrdconta   => rw_craplau.nrdconta
                                     --,pr_idseqttl   => GERA PARA TODOS OS USUÁRIOS
                                               ,pr_cdprogra   => pr_nmdatela
                                               ,pr_inpriori   => 0
                                               ,pr_dsdmensg   => vr_dsdmensg
                                               ,pr_dsdassun   => 'Transação não efetivada'
                                               ,pr_dsdremet   => rw_crapcop.nmrescop
                                               ,pr_dsdplchv   => 'Sem Saldo'
                                               ,pr_cdoperad   => '1'
                                               ,pr_cdcadmsg   => '0'
                                               ,pr_dscritic   => vr_dscritic2);
	          -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		        GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_debita_agendto_transf');

            vr_variaveis_notif('#dataagendamento') := to_char(rw_craplau.dtmvtopg, 'DD/MM/YYYY');
            vr_variaveis_notif('#valor') := to_char(rw_craplau.vllanaut,'fm999g999g990d00');
            vr_variaveis_notif('#bancodestino') := to_char(rw_craplau.cddbanco);
            vr_variaveis_notif('#agenciadestino') := to_char(rw_craplau.cdageban);
            vr_variaveis_notif('#contadestino') := GENE0002.fn_mask_conta(rw_craplau.nrctadst);
            vr_variaveis_notif('#destinatario') := vr_nmtldest;
            vr_variaveis_notif('#motivo') := 'insuficiência de saldo';
									
            -- Cria uma notificação
            noti0001.pc_cria_notificacao(pr_cdorigem_mensagem => ORIGEM_AGEND_NAO_EFETIVADO
                                        ,pr_cdmotivo_mensagem => MOTIVO_TRANSFERENCIA
                                        --,pr_dhenvio => SYSDATE
                                        ,pr_cdcooper => pr_cdcooper
                                        ,pr_nrdconta => rw_craplau.nrdconta
                                        ,pr_variaveis => vr_variaveis_notif);
	          -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		        GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_debita_agendto_transf');
										
           END IF;
                  
         END IF;

                  END IF;
       --Se origem nao for TAA e nao tem erro ou for TAA e nao deu erro
       IF  (pr_idorigem <> 4 AND vr_dscritic IS NULL)   OR
           (pr_idorigem = 4 AND NOT vr_flerrtaa) THEN
         /* Transf. intracooperativa */
         IF  rw_crapcop.cdagectl = rw_craplau.cdageban THEN
           --Executar rotina verifica-historico-transferencia
           pc_verifica_historico_transf (pr_cdcooper => pr_cdcooper          --Codigo Cooperativa
                                        ,pr_nrdconta => rw_craplau.nrdconta  --Conta associado
                                        ,pr_nrctatrf => rw_craplau.nrctadst  --Conta destino
                                        ,pr_cdorigem => pr_idorigem          --Identificador Origem
                                        ,pr_cdtiptra => rw_craplau.cdtiptra  --Tipo transacao
                                        ,pr_cdhiscre => vr_cdhiscre          --Historico Credito
                                        ,pr_cdhisdeb => vr_cdhisdeb          --Historico Debito
                                        ,pr_cdcritic => vr_cdcritic          --Código do erro
                                        ,pr_dscritic => vr_dscritic);        --Descricao do erro
           --Executar rotina verifica-historico-transferencia
           pc_executa_transferencia (pr_cdcooper => pr_cdcooper          --Codigo Cooperativa
                                    ,pr_dtmvtolt => pr_dtmvtolt          --Data Movimento
                                    ,pr_dtmvtocd => pr_dtmvtolt          --Data Credito
                                    ,pr_cdagenci => pr_cdagenci          --Codigo Agencia
                                    ,pr_cdbccxlt => 11                   --Codigo Banco/Caixa
                                    ,pr_nrdolote => vr_nrdolote          --Numero Lote
                                    ,pr_nrdcaixa => pr_nrdcaixa          --Numero da Caixa
                                    ,pr_nrdconta => rw_craplau.nrdconta  --Numero da conta
                                    ,pr_idseqttl => rw_craplau.idseqttl  --Sequencial titulo
                                    ,pr_nrdocmto => 0                    --Numero documento
                                    ,pr_cdhiscre => vr_cdhiscre          --Historico Credito
                                    ,pr_cdhisdeb => vr_cdhisdeb          --Historico Debito
                                    ,pr_vllanmto => rw_craplau.vllanaut  --Valor Lancamento
                                    ,pr_cdoperad => pr_cdoperad          --Codigo Operador
                                    ,pr_nrctatrf => rw_craplau.nrctadst  --Numero conta transferencia
                                    ,pr_flagenda => TRUE                 --Flag agendado
                                    ,pr_cdcoptfn => 0                    --Codigo cooperativa transf
                                    ,pr_cdagetfn => 0                    --Codigo agencia transf
                                    ,pr_nrterfin => 0                    --Numero terminal
                                    ,pr_dscartao => NULL                 --Descricao do cartao
                                    ,pr_cdorigem => pr_idorigem          --Codigo da Origem
                                    ,pr_nrcpfope => rw_craplau.nrcpfope  --CPF operador
                                    ,pr_flmobile => rw_craplau.flmobile  --> Indicador Mobile
									                  ,pr_idtipcar => rw_craplau.idtipcar  --> Indicador Tipo Cartão Utilizado
									                  ,pr_nrcartao => rw_craplau.nrcartao  --> Numero Cartao
                                    ,pr_dstransa => vr_dstrans1          --Descricao transacao
                                    ,pr_nrdocdeb => vr_nrdocdeb          --Numero documento debito
                                    ,pr_nrdoccre => vr_nrdoccre          --Numero documento credito
                                    ,pr_dsprotoc => vr_dsprotoc          --Descricao protocolo
                                    ,pr_cdcritic => vr_cdcritic          --Codigo do erro
                                    ,pr_dscritic => vr_dscritic);        --Descricao do erro
         ELSE
           /* Executar transferencia intercooperativa */
           pc_executa_transf_intercoop (pr_cdcooper => pr_cdcooper          --Codigo Cooperativa
                                       ,pr_cdagenci => pr_cdagenci          --Codigo Agencia
                                       ,pr_nrdcaixa => pr_nrdcaixa          --Numero da Caixa
                                       ,pr_cdoperad => pr_cdoperad          --Codigo Operador
                                       ,pr_idorigem => pr_idorigem          --Codigo da Origem
                                       ,pr_dtmvtolt => pr_dtmvtolt          --Data Movimento
                                       ,pr_idagenda => 2
                                       ,pr_nrdconta => rw_craplau.nrdconta  --Numero da conta
                                       ,pr_idseqttl => rw_craplau.idseqttl  --Sequencial titulo
                                       ,pr_nrcpfope => rw_craplau.nrcpfope  --CPF operador
                                       ,pr_cddbanco => rw_craplau.cddbanco  --Codigo Banco/Caixa
                                       ,pr_cdagectl => rw_craplau.cdageban  --Codigo agencia centralizadora
                                       ,pr_nrctatrf => rw_craplau.nrctadst  --Conta destino
                                       ,pr_vllanmto => rw_craplau.vllanaut  --Valor Lancamento
                                       ,pr_nrsequni => 0                    --Numero Sequencia
                                       ,pr_cdcoptfn => 0                    --Cooperativa transf.
                                       ,pr_nrterfin => 0                    --Numero terminal
									                     ,pr_flmobile => rw_craplau.flmobile  --Indicador Mobile
									                     ,pr_idtipcar => rw_craplau.idtipcar  --Indicador Tipo Cartão Utilizado
									                     ,pr_nrcartao => rw_craplau.nrcartao  --Numero Cartao
                                       ,pr_dsprotoc => vr_dsprotoc          --Descricao protocolo
                                       ,pr_nrdocmto => vr_nrdocmto          --Numero documento Debito
                                       ,pr_nrdoccre => vr_nrdoccre          --Numero documento Credito
                                       ,pr_nrdoctar => vr_cdlantar          --Numero documento tarifa
                                       ,pr_cdcritic => vr_cdcritic          --Código do erro
                                       ,pr_dscritic => vr_dscritic);        --Descricao do erro
           --Atribuir numero documento ao deb/credito
           vr_nrdocdeb:= vr_nrdocmto;
         END IF;
       END IF;

       --Se ocorreu erro na transferencia
       IF trim(vr_dscritic) IS NOT NULL OR nvl(vr_cdcritic,0) <> 0 OR (pr_idorigem = 4 AND vr_flerrtaa) THEN
         --> Se for a ultima execução da DEBNET/CRPS509         
         IF vr_flultexe = 1 OR 
           (vr_flultexe <> 1 AND NOT pr_flsgproc ) THEN --> não é o ultimo e nao for segundo processo  
           BEGIN
             UPDATE craplau SET craplau.insitlau = 4 /** NAO EFETIVADO **/
                               ,craplau.dtdebito = craplau.dtmvtopg
                               ,craplau.cdcritic = nvl(vr_cdcritic,0)
                               ,craplau.dscritic = vr_dscritic
             WHERE craplau.ROWID = rw_craplau.ROWID;
           EXCEPTION
             WHEN OTHERS THEN
               -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
               CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
               -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
               vr_cdcritic := 1035;
               vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                           'CRAPLAU(14):' ||
                           ' insitlau:'   || '4' ||
                           ', dtdebito:'  || 'craplau.dtmvtopg' ||
                           ' com ROWID:'  || rw_craplau.ROWID || 
                           '. ' ||SQLERRM;
               --> Geração de log - 15/12/2017 - Chamado 779415                             
               pc_controla_log_programa( pr_cdcooper      => pr_cdcooper
                                        ,pr_dstiplog      => 'E' -- Tipo de Log - E = erro
                                        ,pr_tpocorrencia  => 2   -- 1-Erro de negocio/ 2-Erro nao tratado
                                        ,pr_cdmensagem    => vr_cdcritic  -- Codigo do Log
                                        ,pr_dsmensagem    => vr_dscritic  -- Descrição
                                       );                
           END;

           -- Atualiza status da transacao
           IF rw_craplau.cdtrapen > 0 THEN
              BEGIN
                 UPDATE tbgen_trans_pend
                 SET tbgen_trans_pend.idsituacao_transacao = 6 /* Reprovada */
                    ,tbgen_trans_pend.dtalteracao_situacao = SYSDATE
                WHERE tbgen_trans_pend.cdtransacao_pendente = rw_craplau.cdtrapen;
              EXCEPTION
                WHEN OTHERS THEN
                  -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
                  CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
                  -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
                  vr_cdcritic := 1035;
                  vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                           'TBGEN_TRANS_PEND(15):'   ||
                           ' idsituacao_transacao:'   || '6' ||
                           ', dtalteracao_situacao:'  || SYSDATE ||
                           ' com cdtransacao_pendente:'  || rw_craplau.cdtrapen || 
                           '. ' ||SQLERRM;
                  --> Geração de log - 15/12/2017 - Chamado 779415                             
                  pc_controla_log_programa( pr_cdcooper      => pr_cdcooper
                                           ,pr_dstiplog      => 'E' -- Tipo de Log - E = erro
                                           ,pr_tpocorrencia  => 2   -- 1-Erro de negocio/ 2-Erro nao tratado
                                           ,pr_cdmensagem    => vr_cdcritic  -- Codigo do Log
                                           ,pr_dsmensagem    => vr_dscritic  -- Descrição
                                          );              
              END;
         END IF;
         END IF;
       ELSE
         --Montar descricao cedente
         vr_dscedent:= 'Docto.Debito: ' ||
                       gene0002.fn_mask(vr_nrdocdeb,'zzz,zzz,zz9')||
                       ' - Docto.Credito: '||
                       gene0002.fn_mask(vr_nrdoccre,'zzz,zzz,zz9')||
                       ' - Seq.Tarifa: '||
                       gene0002.fn_mask(nvl(vr_cdlantar,0),'zzzzzzzzzz9')||
                       ' - Ag. Origem: '||
                       To_Char(rw_crapcop.cdagectl,'fm0000')||
                       ' - Ag. Destino: '||
                       To_Char(rw_craplau.cdageban,'fm0000');
	       -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		     GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_debita_agendto_transf');
         BEGIN
           UPDATE craplau SET craplau.insitlau = 2 /** EFETIVADO **/
                             ,craplau.dtdebito = craplau.dtmvtopg
                             ,craplau.dscedent = vr_dscedent
           WHERE craplau.ROWID = rw_craplau.ROWID;
         EXCEPTION
           WHEN OTHERS THEN
             -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
             CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
             -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
             vr_cdcritic := 1035;
             vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) || 
                           'CRAPLAU(16):' || 
                           ' insitlau:'   || '2' ||
                           ', dtdebito:'  || 'craplau.dtmvtopg' ||
                           ', dscedent:'  || vr_dscedent || 
                           ' com ROWID:'  || rw_craplau.ROWID ||
                           '. ' || SQLERRM;
             --> Geração de log - 15/12/2017 - Chamado 779415                             
             pc_controla_log_programa( pr_cdcooper      => pr_cdcooper
                                      ,pr_dstiplog      => 'E' -- Tipo de Log - E = erro
                                      ,pr_tpocorrencia  => 2   -- 1-Erro de negocio/ 2-Erro nao tratado
                                      ,pr_cdmensagem    => vr_cdcritic  -- Codigo do Log
                                      ,pr_dsmensagem    => vr_dscritic  -- Descrição
                                     ); 
         END;
         --Marcar transacao como realizada
         vr_flgtrans:= TRUE;
       END IF;
       --Se nao executou a transacao
       IF NOT vr_flgtrans AND vr_dscritic IS NULL THEN
         -- Buscar critica conforme o codigo
         IF NVL(vr_cdcritic,0) > 0 THEN
           pr_dscritic := gene0001.fn_busca_critica(vr_cdcritic);
         ELSE
           --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
           pr_cdcritic := 1073; --Nao foi possivel debitar o agendamento
           pr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic);
         END IF;
       ELSIF NOT vr_flgtrans AND vr_dscritic IS NOT NULL THEN
         pr_dscritic:= vr_dscritic;
       END IF;
       IF vr_flgtrans THEN
         vr_indtrans:= 1;
       ELSE
         vr_indtrans:= 0;
       END IF;
       -- Chamar geracao de LOG
       gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                           ,pr_cdoperad => pr_cdoperad
                           ,pr_dscritic => pr_dscritic
                           ,pr_dsorigem => vr_dsorigem
                           ,pr_dstransa => vr_dstransa
                           ,pr_dttransa => TRUNC(SYSDATE)
                           ,pr_flgtrans => vr_indtrans
                           ,pr_hrtransa => GENE0002.fn_busca_time
                           ,pr_idseqttl => rw_craplau.idseqttl
                           ,pr_nmdatela => pr_nmdatela
                           ,pr_nrdconta => rw_craplau.nrdconta
                           ,pr_nrdrowid => vr_nrdrowid);
	     -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		   GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_debita_agendto_transf');

       IF vr_insitlau > 0 AND vr_insitlau <> rw_craplau.insitlau THEN
         CASE vr_insitlau
           WHEN 1 THEN vr_dssituac:= 'PENDENTE';
           WHEN 2 THEN vr_dssituac:= 'EFETIVADO';
           WHEN 3 THEN vr_dssituac:= 'CANCELADO';
           ELSE        vr_dssituac:= 'NAO EFETIVADO';
         END CASE;

         CASE rw_craplau.insitlau
           WHEN 1 THEN vr_dssituac2:= 'PENDENTE';
           WHEN 2 THEN vr_dssituac2:= 'EFETIVADO';
           WHEN 3 THEN vr_dssituac2:= 'CANCELADO';
           ELSE        vr_dssituac2:= 'NAO EFETIVADO';
         END CASE;

         --Gerar log item
         GENE0001.pc_gera_log_item(pr_nrdrowid => vr_nrdrowid
                                  ,pr_nmdcampo => 'Situacao do Agendamento'
                                  ,pr_dsdadant => vr_dssituac
                                  ,pr_dsdadatu => vr_dssituac2);
       END IF;

       --Se executou transferencia
       IF vr_flgtrans THEN
         --Gerar log item
         GENE0001.pc_gera_log_item(pr_nrdrowid => vr_nrdrowid
                                  ,pr_nmdcampo => 'Conta/dv Destino'
                                  ,pr_dsdadant => NULL
                                  ,pr_dsdadatu => GENE0002.fn_mask_conta(rw_craplau.nrctadst));
         --Gerar log item
         GENE0001.pc_gera_log_item(pr_nrdrowid => vr_nrdrowid
                                  ,pr_nmdcampo => 'Valor da Transferencia'
                                  ,pr_dsdadant => NULL
                                  ,pr_dsdadatu => To_Char(rw_craplau.vllanaut,'fm999g999g990d00'));
       END IF;
	      -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		    GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);
    EXCEPTION
      -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
      -- Quem grava a TBGEN é a Procedurepc_PAGA0001_efetua_debitos     
      -- Disparadores: b1wgen0016.pc_debita_agendto_transf    - Procedure não mais executada
      --               paga0001.pc_efetua_debitos             - Não grava TBGEN
      --
      WHEN vr_exc_erro THEN
        --rollback do savepoint
        ROLLBACK TO TRANS_UNDO;

        pr_cdcritic:= vr_cdcritic;
        pr_dscritic:= vr_dscritic;
      WHEN OTHERS THEN
        -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
        CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
        -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        pr_cdcritic:= 9999;
        pr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic) || 
                      'PAGA0001.pc_debita_agendto_transf' || 
                      '. ' || SQLERRM ||
                      '.'  || vr_dsparame;
        --rollback do savepoint
        ROLLBACK TO TRANS_UNDO;
    END;
  END pc_debita_agendto_transf;

  /* Verificar os titulos */
  PROCEDURE pc_verifica_titulo (pr_cdcooper IN  crapcop.cdcooper%TYPE   --Codigo da cooperativa
                               ,pr_nrdconta IN  crapttl.nrdconta%TYPE   --Numero da conta
                               ,pr_idseqttl IN  crapttl.idseqttl%TYPE   --Sequencial titular
                               ,pr_idagenda IN  INTEGER                 --Indicador agendamento
                               ,pr_lindigi1 IN OUT NUMBER               --Linha digitavel 1
                               ,pr_lindigi2 IN OUT NUMBER               --Linha digitavel 2
                               ,pr_lindigi3 IN OUT NUMBER               --Linha digitavel 3
                               ,pr_lindigi4 IN OUT NUMBER               --Linha digitavel 4
                               ,pr_lindigi5 IN OUT NUMBER               --Linha digitavel 5
                               ,pr_cdbarras IN OUT VARCHAR2             --Codigo de Barras
                               ,pr_vllanmto IN  NUMBER                  --Valor Lancamento
                               ,pr_dtagenda IN OUT DATE                 --Data agendamento
                               ,pr_idorigem IN  INTEGER                 --Indicador de origem
                               ,pr_indvalid IN  INTEGER                 --Indicador se ja foi feito
							   ,pr_flmobile IN  INTEGER                 --Indicador Mobile
                               ,pr_cdctrlcs IN tbcobran_consulta_titulo.cdctrlcs%TYPE DEFAULT NULL --> Numero de controle da consulta no NPC
                               ,pr_nmextbcc OUT VARCHAR2                --Nome do banco
                               ,pr_vlfatura OUT NUMBER                  --Valor fatura
                               ,pr_dtdifere OUT BOOLEAN                 --Indicador data diferente
                               ,pr_vldifere OUT BOOLEAN                 --Indicador valor diferente
                               ,pr_nrctacob OUT INTEGER                 --Numero Conta Cobranca
                               ,pr_insittit OUT INTEGER                 --Indicador Situacao Titulo
                               ,pr_intitcop OUT INTEGER                 --Indicador Titulo Cooperativa
                               ,pr_nrcnvcob OUT NUMBER                  --Numero Convenio Cobranca
                               ,pr_nrboleto OUT NUMBER                  --Numero Boleto
                               ,pr_nrdctabb OUT INTEGER                 --Numero conta
                               ,pr_dstransa OUT VARCHAR2                --Descricao transacao
                               /* parametro de cobranca registrada */
                               ,pr_cobregis OUT BOOLEAN                 --Cobranca Registrada
                               ,pr_msgalert OUT VARCHAR2                --mensagem alerta
                               ,pr_vlrjuros OUT NUMBER                  --Valor Juros
                               ,pr_vlrmulta OUT NUMBER                  --Valor Multa
                               ,pr_vldescto OUT NUMBER                  --Valor desconto
                               ,pr_vlabatim OUT NUMBER                  --Valor Abatimento
                               ,pr_vloutdeb OUT NUMBER                  --Valor saida debito
                               ,pr_vloutcre OUT NUMBER                  --Valor saida credito
                               /* parametros de erro */
                               ,pr_cdcritic OUT INTEGER   --C-odigo da critica
                               ,pr_dscritic OUT VARCHAR2) IS --Descricao critica

    -- ..........................................................................
    --
    --  Programa : pc_verifica_titulo        Antiga: B1wgen0016.p/verifica_titulo
    --  Sistema  : Rotinas Internet
    --  Sigla    : AGEN
    --  Autor    : Alisson C. Berrido - AMcom
    --  Data     : Junho/2013.                   Ultima atualizacao: 15/12/2017
    --
    --  Dados referentes ao programa:
    --
    --   Frequencia: Sempre que for chamado
    --   Objetivo  : Verificar titulos
    --
    --   Alteracoes: 02/07/2014 - Alterado os parametros de boolean para integer na CXON0014
    --                           (Andrino-RKAM)
    --
    --               03/09/2014 - Incluido tratamento para migracao Credimilsul -> Scrcred,
    --                            Concredi -> Viacredi (Jean Michel).
    --    
    --               15/12/2017 - Incluido nome do módulo logado
    --                            No caso de erro de programa gravar tabela especifica de log                     
    --                            Ajuste mensagem de erro 
    --                            (Belli - Envolti - Chamado 779415)        
    --
    -- ..........................................................................

  BEGIN
    DECLARE
      --Cursores Locais

      --Selecionar lancamentos automaticos
      CURSOR cr_craplau (pr_cdcooper IN crapcop.cdcooper%TYPE
                        ,pr_nrdconta IN craplau.nrdconta%TYPE
                        ,pr_dtagenda IN craplau.dtmvtopg%TYPE
                        ,pr_cdagenci IN craplau.cdagenci%TYPE
                        ,pr_cdbarras IN craplau.dscodbar%TYPE) IS
        SELECT craplau.cdcooper
              ,craplau.dtmvtopg
              ,craplau.nrdconta
              ,craplau.cdtiptra
              ,craplau.nrctadst
              ,craplau.dslindig
              ,craplau.dscedent
              ,craplau.vllanaut
              ,craplau.dttransa
              ,craplau.hrtransa
              ,craplau.nrdocmto
              ,craplau.dsorigem
              ,craplau.idseqttl
              ,craplau.cdageban
              ,craplau.ROWID
        FROM craplau craplau
        WHERE craplau.cdcooper = pr_cdcooper
        AND   craplau.nrdconta = pr_nrdconta
        AND   craplau.dtmvtopg = pr_dtagenda
        AND   craplau.cdagenci = pr_cdagenci
        AND   craplau.cdbccxlt = 100
        AND   craplau.nrdolote = 11900
        AND   craplau.dscodbar = pr_cdbarras
        AND   craplau.insitlau IN (1,2)
        ORDER BY craplau.progress_recid ASC;
      rw_craplau cr_craplau%ROWTYPE;

      --Selecionar erros
      CURSOR cr_craperr (pr_cdcooper IN craperr.cdcooper%type
                        ,pr_cdagenci IN craperr.cdagenci%type
                        ,pr_nrdcaixa IN craperr.nrdcaixa%type) IS
        SELECT craperr.nrsequen
              ,craperr.cdcritic
              ,craperr.dscritic
        FROM  craperr
        WHERE craperr.cdcooper = pr_cdcooper
        AND   craperr.cdagenci = pr_cdagenci
        AND   craperr.nrdcaixa = pr_nrdcaixa
        ORDER BY craperr.progress_recid ASC;
      rw_craperr cr_craperr%ROWTYPE;

      --Selecionar transacoes de operações conjuntas			
			CURSOR cr_tbpagto_trans_pend (pr_dtmvtopg IN DATE) IS
				SELECT 1 
					FROM tbpagto_trans_pend,
							 tbgen_trans_pend
				 WHERE tbpagto_trans_pend.cdcooper           = pr_cdcooper
				   AND tbpagto_trans_pend.nrdconta           = pr_nrdconta
				   AND tbpagto_trans_pend.tppagamento        = 2 /* Título */ 
				   AND tbpagto_trans_pend.dtdebito           = pr_dtmvtopg 
				   AND tbpagto_trans_pend.dscodigo_barras    = pr_cdbarras
				   AND tbgen_trans_pend.cdtransacao_pendente =
				       tbpagto_trans_pend.cdtransacao_pendente 
				   AND tbgen_trans_pend.idorigem_transacao   = pr_idorigem
				   AND tbgen_trans_pend.idsituacao_transacao IN (1,5); /* Pendente */
			rw_tbpagto_trans_pend cr_tbpagto_trans_pend%ROWTYPE;

      --> buscar agencia
      CURSOR cr_crapage ( pr_cdcooper crapage.cdcooper%TYPE,
                          pr_cdagenci crapage.cdagenci%TYPE) IS
        SELECT crapage.qtddaglf
          FROM crapage 
         WHERE crapage.cdcooper = pr_cdcooper 
           AND crapage.cdagenci = pr_cdagenci;
      rw_crapage cr_crapage%ROWTYPE;
      --Variaveis Locais
      vr_cdbccxlt INTEGER;
      vr_cdagenci INTEGER;
      vr_idagenda INTEGER;
      vr_flgretor BOOLEAN;
      vr_flgpgdda BOOLEAN:= FALSE;
      vr_data     DATE;
      vr_dtmvtopg DATE;
      vr_datdodia DATE;
      vr_dsoperad VARCHAR2(3);
      vr_dsblqage VARCHAR2(100);
      vr_cobregis PLS_INTEGER;
      vr_dtdifere PLS_INTEGER;
      vr_vldifere PLS_INTEGER;
      vr_dtdialim DATE;
      
      --Variaveis de Erro
      vr_cdcritic crapcri.cdcritic%TYPE;
      vr_dscritic VARCHAR2(4000);
      vr_exc_erro EXCEPTION;
      --Agrupa os parametros - 15/12/2017 - Chamado 779415 
      vr_dsparame VARCHAR2(4000);
    BEGIN
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_verifica_titulo');
      
      --Inicializar variaveis
      pr_cdcritic:= NULL;
      pr_dscritic:= NULL;
      
      --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
      vr_dsparame :=  ' pr_cdcooper:'  || pr_cdcooper || 
                      ', pr_nrdconta:' ||   pr_nrdconta ||
                      ', pr_idseqttl:' ||   pr_idseqttl ||
                      ', pr_idagenda:' ||   pr_idagenda ||
                      ', pr_lindigi1:' ||   pr_lindigi1 ||
                      ', pr_lindigi2:' ||   pr_lindigi2 ||
                      ', pr_lindigi3:' ||   pr_lindigi3 ||
                      ', pr_lindigi4:' ||   pr_lindigi4 ||
                      ', pr_lindigi5:' ||   pr_lindigi5 ||
                      ', pr_cdbarras:' ||   pr_cdbarras ||
                      ', pr_vllanmto:' ||   pr_vllanmto ||
                      ', pr_dtagenda:' ||   pr_dtagenda ||
                      ', pr_idorigem:' ||   pr_idorigem ||
                      ', pr_indvalid:' ||   pr_indvalid ||
					            ', pr_flmobile:' ||   pr_flmobile ||
                      ', pr_cdctrlcs:' ||   pr_cdctrlcs;

      /* IF temporario ate o projeto do TED estar ok - Rafael */
      vr_idagenda:= pr_idagenda;
      IF vr_idagenda = 3 THEN
        vr_idagenda:= 1;
        --Pagamento DDA
        vr_flgpgdda:= TRUE;
      END IF;

      /* tratamento para TAA */
      IF  pr_idorigem = 4  THEN
        vr_cdagenci:= 91;
      ELSE
        vr_cdagenci:= 90;
      END IF;

      IF vr_idagenda = 2 AND pr_idorigem = 4 THEN
        --Verificar se a data do agendamento eh dia util
        vr_data:= GENE0005.fn_valida_dia_util(pr_cdcooper => pr_cdcooper
                                             ,pr_dtmvtolt => pr_dtagenda
                                             ,pr_tipo     => 'P');
        IF Trunc(vr_data) != Trunc(pr_dtagenda) THEN
          --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
          --Se nao for dia util
          vr_cdcritic := 1093; --Data do agendamento deve ser um dia util
          vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
          --Levantar Excecao
          RAISE vr_exc_erro;
        END IF;
	      -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		    GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_verifica_titulo');
      
        --> buscar agencia
        OPEN cr_crapage ( pr_cdcooper => pr_cdcooper,
                          pr_cdagenci => vr_cdagenci);
        FETCH cr_crapage INTO rw_crapage;
        
        IF cr_crapage%NOTFOUND THEN
          CLOSE cr_crapage;
          --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
          vr_cdcritic := 962; --PA nao cadastrado
          vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);		   
          RAISE vr_exc_erro;
      END IF;
        CLOSE cr_crapage;

        vr_dtdialim := trunc(SYSDATE) + rw_crapage.qtddaglf;
        
        --Verificar se a data do agendamento eh dia util
        vr_dtdialim:= GENE0005.fn_valida_dia_util(pr_cdcooper => pr_cdcooper
                                                 ,pr_dtmvtolt => vr_dtdialim
                                                 ,pr_tipo     => 'P');
                          
       
        IF pr_dtagenda > vr_dtdialim  THEN                     
          --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
          vr_cdcritic := 1129; --A data limite para efetuar agendamentos é 
          vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) || 
                         ' ' || to_char(vr_dtdialim,'DD/MM/RRRR');		
          RAISE vr_exc_erro;
        END IF;                      
	      -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		    GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_verifica_titulo');                      
      END IF;

      --Montar a descricao da transacao
      IF vr_idagenda = 1 THEN
        pr_dstransa:= 'Verificacao de titulos para pagamento';
      ELSE
        pr_dstransa:= 'Verificacao de titulos para agendamento de pagamento';
      END IF;

      /** Verificar se a conta pertence a um PAC migrado **/
      OPEN cr_craptco (pr_cdcopant => pr_cdcooper
                      ,pr_nrctaant => pr_nrdconta
                      ,pr_tpctatrf => 1);
      FETCH cr_craptco INTO rw_craptco;
      --Se encontrou e for agenddmento
      IF cr_craptco%FOUND AND vr_idagenda = 2 THEN
        --Fechar Cursor
        CLOSE cr_craptco;
        --Buscar a data do dia
        vr_datdodia:= trunc(sysdate); /*PAGA0001.fn_busca_datdodia(pr_cdcooper => pr_cdcooper); */
        --Buscar data bloqueio contas migradas
        vr_dsblqage:= gene0001.fn_param_sistema('CRED',pr_cdcooper,'DT_BLOQ_AGEN_CTA_MIGRADA');
        --Se nao encontrou parametro
        IF vr_dsblqage IS NULL THEN
          --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
          --Montar mensagem de erro
          vr_cdcritic := 1094; --Não foi encontrado parametro de bloqueio de agendamento de contas migradas
          vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
          --Levantar Exceção
          RAISE vr_exc_erro;
        END IF;
        --Data atual maior limite bloqueio
        IF vr_datdodia > to_date(vr_dsblqage,'DD/MM/YYYY') AND rw_craptco.cdcopant NOT IN (4,15,17) THEN
          /** Bloquear agendamentos para conta migrada **/
          --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
          --Montar Critica
          vr_cdcritic := 1095; --Operacao de agendamento bloqueada. Entre em contato com seu PA
          vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
          --Levantar Excecao
          RAISE vr_exc_erro;
        END IF;
      END IF;
      --Fechar Cursor
      IF cr_craptco%ISOPEN THEN
        CLOSE cr_craptco;
      END IF;

      IF vr_idagenda = 1  THEN
        --Data agendamento
        pr_dtagenda:= NULL;
      END IF;

      --Se a cooperativa nao existir
      OPEN cr_crapcop(pr_cdcooper => pr_cdcooper);
      FETCH cr_crapcop INTO rw_crapcop;
      --Se nao encontrou
      IF cr_crapcop%NOTFOUND THEN
        --Fechar Cursor
        CLOSE cr_crapcop;
        --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        vr_cdcritic := 1070; --Cooperativa nao cadastrada
        vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
      --Fechar Cursor
      CLOSE cr_crapcop;

      --Verificar operador
      IF vr_flgpgdda THEN
        vr_dsoperad:= 'DDA';
      ELSE
        vr_dsoperad:= '996';
      END IF;
      --Buscar valores titulos iptu
      CXON0014.pc_retorna_vlr_titulo_iptu (pr_cooper          => rw_crapcop.cdcooper --Codigo Cooperativa
                                          ,pr_nrdconta        => pr_nrdconta     --Numero da Conta
                                          ,pr_idseqttl        => pr_idseqttl     --Sequencial do titular
                                          ,pr_cod_operador    => vr_dsoperad     --Codigo do operador
                                          ,pr_cod_agencia     => vr_cdagenci     --Codigo da Agencia
                                          ,pr_nro_caixa       => 900             --Numero do Caixa
                                          ,pr_titulo1         => pr_lindigi1     --FORMAT "99999,99999"
                                          ,pr_titulo2         => pr_lindigi2     --FORMAT "99999,999999"
                                          ,pr_titulo3         => pr_lindigi3     --FORMAT "99999,999999"
                                          ,pr_titulo4         => pr_lindigi4     --FORMAT "9"
                                          ,pr_titulo5         => pr_lindigi5     --FORMAT "zz,zzz,zzz,zzz999"
                                          ,pr_codigo_barras   => pr_cdbarras     --Codigo de Barras
                                          ,pr_iptu            => 0               --IPTU
                                          ,pr_valor_informado => pr_vllanmto     --Valor informado
                                          ,pr_cadastro        => 0               --Numero Cadastro
                                          ,pr_cadastro_conf   => 0               --Confirmacao Cadastro
                                          ,pr_dt_agendamento  => pr_dtagenda     --Data Agendamento
                                          ,pr_cdctrlcs        => pr_cdctrlcs     --> Numero de controle da consulta no NPC
                                          ,pr_vlfatura        => pr_vlfatura     --Valor da Fatura
                                          ,pr_outra_data      => vr_dtdifere     --Outra data
                                          ,pr_outro_valor     => vr_vldifere     --Outro valor
                                          ,pr_nrdconta_cob    => pr_nrctacob     --Numero Conta Cobranca
                                          ,pr_insittit        => pr_insittit     --Situacao Titulo
                                          ,pr_intitcop        => pr_intitcop     --Titulo da Cooperativa
                                          ,pr_convenio        => pr_nrcnvcob     --Numero Convenio
                                          ,pr_bloqueto        => pr_nrboleto     --Numero Bloqueto
                                          ,pr_contaconve      => pr_nrdctabb     --Numero Conta Convenio
                                          ,pr_cobregis        => vr_cobregis     --Cobranca Registrada
                                          ,pr_msgalert        => pr_msgalert     --Mensagem de alerta
                                          ,pr_vlrjuros        => pr_vlrjuros     --Valor dos Juros
                                          ,pr_vlrmulta        => pr_vlrmulta     --Valor da Multa
                                          ,pr_vldescto        => pr_vldescto     --Valor do Desconto
                                          ,pr_vlabatim        => pr_vlabatim     --Valor do Abatimento
                                          ,pr_vloutdeb        => pr_vloutdeb     --Valor Saida Debitado
                                          ,pr_vloutcre        => pr_vloutcre     --Valor Saida Creditado
                                          ,pr_cdcritic        => vr_cdcritic     --Codigo do erro
                                          ,pr_dscritic        => vr_dscritic);   --Descricao do erro
      --Se ocorreu erro
      IF nvl(vr_cdcritic,0) <> 0 OR trim(vr_dscritic) IS NOT NULL THEN
        --Selecionar erro
        OPEN cr_craperr (pr_cdcooper => pr_cdcooper
                        ,pr_cdagenci => vr_cdagenci
                        ,pr_nrdcaixa => To_Number(pr_nrdconta||pr_idseqttl));
        --Posicionar no primeiro registro
        FETCH cr_craperr INTO rw_craperr;
        --Se Encontrou erro
        IF cr_craperr%FOUND THEN
          IF rw_craperr.cdcritic = 13 AND vr_idagenda <> 2 THEN
            --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
            vr_cdcritic := 1105; --Titulo vencido
            vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);		   
          ELSIF rw_craperr.cdcritic = 13 AND vr_idagenda = 2 THEN
            --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
            vr_cdcritic := 1106; --Agendamento nao permitido apos vencimento
            vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
          ELSIF rw_craperr.cdcritic = 456 THEN
            --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
            vr_cdcritic := 1107; --Pagamento ja efetuado na cooperativa
            vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
          ELSE
            vr_dscritic:= rw_craperr.dscritic;
          END IF;
        ELSE
          --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
          vr_cdcritic := 1108; --Erro na verificacao do titulo
          vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        END IF;
        --Fechar Cursor
        CLOSE cr_craperr;
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_verifica_titulo');

      -- Atualiza as variaveis booleanas
      IF vr_dtdifere = 1 THEN
        pr_dtdifere := TRUE;
      ELSE
        pr_dtdifere := FALSE;
      END IF;

      IF vr_vldifere = 1 THEN
        pr_vldifere := TRUE;
      ELSE
        pr_vldifere := FALSE;
      END IF;

      IF vr_cobregis = 1 THEN
        pr_cobregis := TRUE;
      ELSE
        pr_cobregis := FALSE;
      END IF;

      IF vr_idagenda = 2  THEN /** Agendamento **/
        --Selecionar informacoes dos lancamentos automaticos
        OPEN cr_craplau (pr_cdcooper => pr_cdcooper
                        ,pr_nrdconta => pr_nrdconta
                        ,pr_dtagenda => pr_dtagenda
                        ,pr_cdagenci => vr_cdagenci
                        ,pr_cdbarras => pr_cdbarras);
        --Posicionar no primeiro registro
        FETCH cr_craplau INTO rw_craplau;
        --Se encontrou
        IF cr_craplau%FOUND THEN
          --Fechar Cursor
          CLOSE cr_craplau;
          --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
          --Mensagem erro
          vr_cdcritic := 1109; --Agendamento ja existe
          vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);		   
          --Levantar Excecao
          RAISE vr_exc_erro;
        END IF;
        --Fechar Cursor
        CLOSE cr_craplau;
      END IF;
      --Codigo banco/caixa
      vr_cdbccxlt:= to_number(SUBSTR(gene0002.fn_mask(pr_lindigi1,'99999,99999'),1,3));

      --Selecionar Banco
      OPEN cr_crapban (pr_cdbccxlt => vr_cdbccxlt);
      --Posicionar no proximo registro
      FETCH cr_crapban INTO rw_crapban;
      --Se nao encontrar
      IF cr_crapban%FOUND THEN
        pr_nmextbcc:= rw_crapban.nmextbcc;
      ELSE
        --Fechar Cursor
        CLOSE cr_crapban;
        --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        --Mensagem erro
        vr_cdcritic := 57; --Banco nao encontrado
        vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);		   
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
      --Fechar Cursor
      CLOSE cr_crapban;

      -- Verifica se a data esta cadastrada
      OPEN BTCH0001.cr_crapdat(pr_cdcooper => pr_cdcooper);
      FETCH BTCH0001.cr_crapdat INTO rw_crapdat;
      -- Se não encontrar
      IF BTCH0001.cr_crapdat%NOTFOUND THEN
        -- Fechar o cursor pois havera raise
        CLOSE BTCH0001.cr_crapdat;
        --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        -- Montar mensagem de critica
        vr_cdcritic := 1; --Registro de controles de data nao encontrado
        vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        RAISE vr_exc_erro;
      ELSE
        -- Apenas fechar o cursor
        CLOSE BTCH0001.cr_crapdat;
      END IF;

      /* Verificar se ja foi feito por algum operador */
      IF pr_indvalid = 0 THEN
        IF vr_idagenda = 1 THEN
          vr_dtmvtopg:= rw_crapdat.dtmvtocd;
        ELSE
          vr_dtmvtopg:= pr_dtagenda;
        END IF;
        --Selecionar transacoes operador juridico
        OPEN cr_tbpagto_trans_pend(pr_dtmvtopg => vr_dtmvtopg);
        --Posicionar no proximo registro
        FETCH cr_tbpagto_trans_pend INTO rw_tbpagto_trans_pend;
        --Se encontrar
        IF cr_tbpagto_trans_pend%FOUND THEN
          --Fechar Cursor
          CLOSE cr_tbpagto_trans_pend;
          --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
          --Mensagem erro
          vr_cdcritic := 1104; --Pagamento ja registrado para aprovacao. Verifique suas transacoes pendentes
          vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);		   			
          --Levantar Excecao
          RAISE vr_exc_erro;
        END IF;
        --Fechar Cursor
        IF cr_tbpagto_trans_pend%ISOPEN THEN
          CLOSE cr_tbpagto_trans_pend;
      END IF;
        END IF;
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);
    EXCEPTION
      -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415      
      -- Disparadores: paga0002.pc_InternetBank26              - Não grava TBGEN - Necessario avaliar
      --               paga0002.pc_InternetBank27              - Não grava TBGEN - Necessario avaliar
      --               pgta0001.pc_processar_arq_pgto          - Não grava TBGEN
      --               b1wgen0016.p.verifica_titulo            - Não grava TBGEN
      --               paga0001.pc_verifica_titulo_prog        - Não grava TBGEN
      --               paga0001.pc_debita_agendto_pagto        - Não grava TBGEN  
      --
      --               Eliminar a gravação do Log aqui quando acertar a paga0002.pc_InternetBank26      
      WHEN vr_exc_erro THEN
        pr_cdcritic:= vr_cdcritic;
        pr_dscritic:= vr_dscritic;
        --> Geração de log                             
        pc_controla_log_programa(  pr_cdcooper      => pr_cdcooper
                                  ,pr_dstiplog      => 'E' -- Tipo de Log - E = erro
                                  ,pr_tpocorrencia  => 1   -- 1-Erro de negocio
                                  ,pr_cdcriticidade => 1
                                  ,pr_cdmensagem    => vr_cdcritic -- Codigo do Log
                                  ,pr_dsmensagem    => vr_dscritic || -- Descrição do Log
                                                       vr_dsparame
                                 );  
      WHEN OTHERS THEN
        -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
        CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
        -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        pr_cdcritic:= 9999;
        pr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic)||
                      'PAGA0001.pc_verifica_titulo' || 
                      '. ' || SQLERRM ||
                      '.'  || vr_dsparame;
        --> Geração de log                             
        pc_controla_log_programa( pr_cdcooper     => pr_cdcooper
                                 ,pr_dstiplog     => 'E' -- E = erro
                                 ,pr_tpocorrencia => 2   -- 1-Erro de negocio/ 2-Erro nao tratado
                                 ,pr_cdmensagem   => pr_cdcritic -- Codigo do Log
                                 ,pr_dsmensagem   => pr_dscritic -- Descrição do Log                                 
                                 );                            
    END;
  END pc_verifica_titulo;

  /* Chamada para utilizar via Progress - Verificar os titulos */
  PROCEDURE pc_verifica_titulo_prog ( pr_cdcooper IN  crapcop.cdcooper%TYPE   --Codigo da cooperativa
                                     ,pr_nrdconta IN  crapttl.nrdconta%TYPE   --Numero da conta
                                     ,pr_idseqttl IN  crapttl.idseqttl%TYPE   --Sequencial titular
                                     ,pr_idagenda IN  INTEGER                 --Indicador agendamento
                                     ,pr_lindigi1 IN OUT NUMBER               --Linha digitavel 1
                                     ,pr_lindigi2 IN OUT NUMBER               --Linha digitavel 2
                                     ,pr_lindigi3 IN OUT NUMBER               --Linha digitavel 3
                                     ,pr_lindigi4 IN OUT NUMBER               --Linha digitavel 4
                                     ,pr_lindigi5 IN OUT NUMBER               --Linha digitavel 5
                                     ,pr_cdbarras IN OUT VARCHAR2             --Codigo de Barras
                                     ,pr_vllanmto IN  NUMBER                  --Valor Lancamento
                                     ,pr_dtagenda IN OUT DATE                 --Data agendamento
                                     ,pr_idorigem IN  INTEGER                 --Indicador de origem
                                     ,pr_indvalid IN  INTEGER                 --Indicador se ja foi feito
                                     ,pr_cdctrlcs IN tbcobran_consulta_titulo.cdctrlcs%TYPE DEFAULT NULL --> Numero de controle da consulta no NPC
                                     ,pr_nmextbcc OUT VARCHAR2                --Nome do banco
                                     ,pr_vlfatura OUT NUMBER                  --Valor fatura
                                     ,pr_dtdifere OUT INTEGER                 --Indicador data diferente
                                     ,pr_vldifere OUT INTEGER                 --Indicador valor diferente
                                     ,pr_nrctacob OUT INTEGER                 --Numero Conta Cobranca
                                     ,pr_insittit OUT INTEGER                 --Indicador Situacao Titulo
                                     ,pr_intitcop OUT INTEGER                 --Indicador Titulo Cooperativa
                                     ,pr_nrcnvcob OUT NUMBER                  --Numero Convenio Cobranca
                                     ,pr_nrboleto OUT NUMBER                  --Numero Boleto
                                     ,pr_nrdctabb OUT INTEGER                 --Numero conta
                                     ,pr_dstransa OUT VARCHAR2                --Descricao transacao
                                     /* parametro de cobranca registrada */
                                     ,pr_cobregis OUT INTEGER                 --Cobranca Registrada
                                     ,pr_msgalert OUT VARCHAR2                --mensagem alerta
                                     ,pr_vlrjuros OUT NUMBER                  --Valor Juros
                                     ,pr_vlrmulta OUT NUMBER                  --Valor Multa
                                     ,pr_vldescto OUT NUMBER                  --Valor desconto
                                     ,pr_vlabatim OUT NUMBER                  --Valor Abatimento
                                     ,pr_vloutdeb OUT NUMBER                  --Valor saida debito
                                     ,pr_vloutcre OUT NUMBER                  --Valor saida credito
                                     /* parametros de erro */
                                     ,pr_cdcritic OUT INTEGER   --C-odigo da critica
                                     ,pr_dscritic OUT VARCHAR2) IS --Descricao critica

    -- ..........................................................................
    --
    --  Programa : pc_verifica_titulo_prog
    --  Sistema  : Rotinas Internet
    --  Sigla    : AGEN
    --  Autor    : Odirlei Busana - AMcom
    --  Data     : Maio/2015.                   Ultima atualizacao: 15/12/2017
    --
    --  Dados referentes ao programa:
    --
    --   Frequencia: Sempre que for chamado
    --   Objetivo  : Verificar titulos
    --
    --   Alteracoes:
    --
    --               15/12/2017 - Incluido nome do módulo logado
    --                            No caso de erro de programa gravar tabela especifica de log                     
    --                            Ajuste mensagem de erro 
    --                            (Belli - Envolti - Chamado 779415)        
    --
    -- ..........................................................................

    vr_dtdifere BOOLEAN;
    vr_vldifere BOOLEAN;
    vr_cobregis BOOLEAN;
    --Agrupa os parametros - 15/12/2017 - Chamado 779415 
    vr_dsparame VARCHAR2(4000);

  BEGIN
	  -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_verifica_titulo_prog');
      
    --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
    vr_dsparame :=  ' - pr_cdcooper:'  || pr_cdcooper ||   
                    ', pr_nrdconta:' ||   pr_nrdconta ||
                    ', pr_idseqttl:' ||   pr_idseqttl ||
                    ', pr_idagenda:' ||   pr_idagenda ||
                    ', pr_lindigi1:' ||   pr_lindigi1 ||
                    ', pr_lindigi2:' ||   pr_lindigi2 ||
                    ', pr_lindigi3:' ||   pr_lindigi3 ||
                    ', pr_lindigi4:' ||   pr_lindigi4 ||
                    ', pr_lindigi5:' ||   pr_lindigi5 ||
                    ', pr_cdbarras:' ||   pr_cdbarras ||
                    ', pr_vllanmto:' ||   pr_vllanmto ||
                    ', pr_dtagenda:' ||   pr_dtagenda ||
                    ', pr_idorigem:' ||   pr_idorigem ||
                    ', pr_indvalid:' ||   pr_indvalid ||
                    ', pr_cdctrlcs:' ||   pr_cdctrlcs;        

    pc_verifica_titulo (pr_cdcooper => pr_cdcooper   --Codigo da cooperativa
                       ,pr_nrdconta => pr_nrdconta   --Numero da conta
                       ,pr_idseqttl => pr_idseqttl   --Sequencial titular
                       ,pr_idagenda => pr_idagenda   --Indicador agendamento
                       ,pr_lindigi1 => pr_lindigi1   --Linha digitavel 1
                       ,pr_lindigi2 => pr_lindigi2   --Linha digitavel 2
                       ,pr_lindigi3 => pr_lindigi3   --Linha digitavel 3
                       ,pr_lindigi4 => pr_lindigi4   --Linha digitavel 4
                       ,pr_lindigi5 => pr_lindigi5   --Linha digitavel 5
                       ,pr_cdbarras => pr_cdbarras   --Codigo de Barras
                       ,pr_vllanmto => pr_vllanmto   --Valor Lancamento
                       ,pr_dtagenda => pr_dtagenda   --Data agendamento
                       ,pr_idorigem => pr_idorigem   --Indicador de origem
                       ,pr_indvalid => pr_indvalid   --nao validar
					   ,pr_flmobile => 0             --Indicador Mobile
                        ,pr_cdctrlcs => pr_cdctrlcs
                       ,pr_nmextbcc => pr_nmextbcc   --Nome do banco
                       ,pr_vlfatura => pr_vlfatura   --Valor fatura
                       ,pr_dtdifere => vr_dtdifere   --Indicador data diferente
                       ,pr_vldifere => vr_vldifere   --Indicador valor diferente
                       ,pr_nrctacob => pr_nrctacob   --Numero Conta Cobranca
                       ,pr_insittit => pr_insittit   --Indicador Situacao Titulo
                       ,pr_intitcop => pr_intitcop   --Indicador Titulo Cooperativa
                       ,pr_nrcnvcob => pr_nrcnvcob   --Numero Convenio Cobranca
                       ,pr_nrboleto => pr_nrboleto   --Numero Boleto
                       ,pr_nrdctabb => pr_nrdctabb   --Numero conta
                       ,pr_dstransa => pr_dstransa   --Descricao transacao
                       ,pr_cobregis => vr_cobregis   --Cobranca Registrada
                       ,pr_msgalert => pr_msgalert   --mensagem alerta
                       ,pr_vlrjuros => pr_vlrjuros   --Valor Juros
                       ,pr_vlrmulta => pr_vlrmulta   --Valor Multa
                       ,pr_vldescto => pr_vldescto   --Valor desconto
                       ,pr_vlabatim => pr_vlabatim   --Valor Abatimento
                       ,pr_vloutdeb => pr_vloutdeb   --Valor saida debito
                       ,pr_vloutcre => pr_vloutcre   --Valor saida credito
                       ,pr_cdcritic => pr_cdcritic   --C-odigo da critica
                       ,pr_dscritic => pr_dscritic);   --Descricao critica
    -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
    IF NVL(pr_cdcritic,0) = 9999 THEN
      pr_dscritic := pr_dscritic ||
                     ' - ' || vr_dsparame ||
                     ', PAGA0001.pc_verifica_titulo_prog';
    END IF;   

    --zerar variaveis
    pr_dtdifere := 0;
    pr_vldifere := 0;
    pr_cobregis := 0;

    IF vr_dtdifere THEN
      pr_dtdifere := 1;
    END IF;

    IF vr_vldifere THEN
      pr_vldifere := 1;
    END IF;

    IF vr_cobregis THEN
      pr_cobregis := 1;
    END IF;

    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
    GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);

  EXCEPTION
    -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415      
    -- Disparadores: b1wgen0016.verifica_titulo              - Não grava TBGEN
    WHEN OTHERS THEN
      -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
      CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
      -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
      pr_cdcritic:= 9999;
      pr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic) ||
                    'PAGA0001.pc_verifica_titulo_prog' || 
                    '. ' || SQLERRM ||
                    '.'  || vr_dsparame;
  END pc_verifica_titulo_prog;

  /* Verificar Dias Tolerancia Scredi */
  PROCEDURE pc_verif_dias_toler_sicredi (pr_cdcooper IN INTEGER --Codigo Cooperativa
                                        ,pr_dtagenda IN DATE    --Data Agendamento
                                        ,pr_cdbarras IN VARCHAR2 --Codigo Barras
                                        ,pr_cdcritic OUT INTEGER   --C-odigo da critica
                                        ,pr_dscritic OUT VARCHAR2) IS --Descricao critica

    -- ..........................................................................
    --
    --  Programa : pc_verif_dias_toler_sicredi        Antiga: B1wgen0016.p/verifica-dias-tolerancia-sicredi
    --  Sistema  : Pagamentos
    --  Sigla    : PAGA
    --  Autor    : Alisson C. Berrido - AMcom
    --  Data     : Junho/2013.                   Ultima atualizacao: 15/12/2017
    --
    --  Dados referentes ao programa:
    --
    --   Frequencia: Sempre que for chamado
    --   Objetivo  : Verificar Dias Tolerancia Scredi
    --
    --   Alterações: 22/07/2015 - Incluir BEGIN com EXCEPTION na conversão da vr_dttolera
    --                            pois caso haja erro na conversão da data não deve fazer nada
    --                            conforme fazia o programa progress (Lucas Ranghetti #304939)
    --    
    --               15/12/2017 - Incluido nome do módulo logado
    --                            No caso de erro de programa gravar tabela especifica de log                     
    --                            Ajuste mensagem de erro 
    --                            (Belli - Envolti - Chamado 779415)        
    --
    -- ..........................................................................

  BEGIN
    DECLARE
      --Selecionar Convenio
      CURSOR cr_crapscn (pr_cdempcon IN crapscn.cdempcon%type
                        ,pr_cdsegmto IN crapscn.cdsegmto%type
                        ,pr_tipo     IN INTEGER) IS
        SELECT crapscn.cdsegmto
              ,crapscn.nrtolera
              ,crapscn.dsdiatol
        FROM crapscn
        WHERE ((pr_tipo = 1 AND crapscn.cdempcon = pr_cdempcon) OR
               (pr_tipo = 2 AND crapscn.cdempco2 = pr_cdempcon) OR
               (pr_tipo = 3 AND crapscn.cdempco3 = pr_cdempcon) OR
               (pr_tipo = 4 AND crapscn.cdempco4 = pr_cdempcon) OR
               (pr_tipo = 5 AND crapscn.cdempco5 = pr_cdempcon)
              )
        AND   crapscn.cdsegmto = pr_cdsegmto
        ORDER BY crapscn.progress_recid ASC;
      rw_crapscn cr_crapscn%ROWTYPE;
      --Variaveis Locais
      vr_dttolera  DATE;
      vr_dtferiado DATE;
      vr_contador  INTEGER;
      vr_flgachou  BOOLEAN;
      --Variaveis de Erro
      vr_cdcritic crapcri.cdcritic%TYPE;
      vr_dscritic VARCHAR2(4000);
      vr_exc_erro EXCEPTION;
      --Agrupa os parametros - 15/12/2017 - Chamado 779415 
      vr_dsparame VARCHAR2(4000);
    BEGIN
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_verif_dias_toler_sicredi');
      
      --Inicializar variaveis
      pr_cdcritic:= NULL;
      pr_dscritic:= NULL;
      
      --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
      vr_dsparame :=  ' pr_cdcooper:'  || pr_cdcooper || 
                      ', pr_dtagenda:' ||   pr_dtagenda ||
                      ', pr_cdbarras:' ||   pr_cdbarras;

      --Nao encontrou convenio
      vr_flgachou:= FALSE;

      FOR idx IN 1..5 LOOP
        /* Procura cod. da empresa do convenio SICREDI em cada campo de Num. do Cod. Barras */
        OPEN cr_crapscn (pr_cdempcon  => TO_NUMBER(SUBSTR(pr_cdbarras,16,4))
                        ,pr_cdsegmto  => SUBSTR(pr_cdbarras,2,1)
                        ,pr_tipo      => idx);
        --Posicionar no proximo registro
        FETCH cr_crapscn INTO rw_crapscn;
        --Verificar se encontrou
        vr_flgachou:= cr_crapscn%FOUND;
        --Fechar Cursor
        CLOSE cr_crapscn;
        --Se achou sai do loop
        IF vr_flgachou THEN
          EXIT;
        END IF;
      END LOOP;

      IF NOT vr_flgachou THEN
        --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
        vr_cdcritic:= 1110; --Documento nao aceito. Procure seu Posto de Atendimento para maiores informacoes
        vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;

      /* Validação referente aos dias de tolerancia */
      IF rw_crapscn.nrtolera <> 99 THEN /* Se não for tolerancia ilimitada */
        BEGIN
          /* Calcula Limite da Data de Tolerancia dependendo se forem dias úteis ou Corridos */
          vr_dttolera:= TO_DATE(TO_CHAR(SUBSTR(pr_cdbarras,26,2),'fm00')|| '/'||
                                TO_CHAR(SUBSTR(pr_cdbarras,24,2),'fm00')|| '/'||
                                TO_CHAR(SUBSTR(pr_cdbarras,20,4),'fm0000'),'DD/MM/YYYY');

          --Iniciar contador
          vr_contador:= 1;
          --Dia toleracia
          IF rw_crapscn.dsdiatol = 'U' THEN /* Dias uteis */
            LOOP
              --Incrementa dia tolerancia
              vr_dttolera:= vr_dttolera + 1;
              --Verifica se eh feriado ou final de semana
              vr_dtferiado:= GENE0005.fn_valida_dia_util(pr_cdcooper => pr_cdcooper --> Cooperativa conectada
                                                        ,pr_dtmvtolt => vr_dttolera --> Data do movimento
                                                        ,pr_tipo     => 'P');       --> Proximo dia util
              --Se for data diferenteeh feriado ou final semana
              IF vr_dtferiado <> vr_dttolera THEN
                --Proxima iteracao loop
                CONTINUE;
              END IF;
              IF vr_contador = rw_crapscn.nrtolera THEN
                --Sair loop
                EXIT;
              END IF;
              --Incrementar contador
              vr_contador:= vr_contador + 1;
            END LOOP;
          ELSE  /* Dias corridos */
            vr_dttolera:= vr_dttolera + rw_crapscn.nrtolera;
            LOOP
              --Verifica se eh feriado ou final de semana
              vr_dtferiado:= GENE0005.fn_valida_dia_util(pr_cdcooper => pr_cdcooper --> Cooperativa conectada
                                                        ,pr_dtmvtolt => vr_dttolera --> Data do movimento
                                                        ,pr_tipo     => 'P');       --> Proximo dia util
              --Se for dia util
              IF vr_dtferiado = vr_dttolera THEN
                --Sair loop
                EXIT;
              END IF;
              --Incrementar data
              vr_dttolera:= vr_dttolera + 1;
            END LOOP;
          END IF;
      --Se data agendamento maior tolerancia
        IF pr_dtagenda > vr_dttolera THEN
            --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
            vr_cdcritic := 1106; --Nao e possivel efetuar agendamento apos o vencimento da fatura
            vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
        EXCEPTION
          -- caso haja erro na conversão da data não faz nada
          WHEN OTHERS THEN
            NULL;
        END;
      END IF;
	      -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		    GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);
    EXCEPTION
      -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415      
      -- Disparadores: paga0001.pc_verifica_convenio           - Não grava TBGEN      
      WHEN vr_exc_erro THEN
        pr_cdcritic:= vr_cdcritic;
        pr_dscritic:= vr_dscritic;
        --> Geração de log                             
        pc_controla_log_programa(  pr_cdcooper      => pr_cdcooper
                                  ,pr_dstiplog      => 'E' -- Tipo de Log - E = erro
                                  ,pr_tpocorrencia  => 1   -- 1-Erro de negocio
                                  ,pr_cdcriticidade => 1
                                  ,pr_cdmensagem    => vr_cdcritic -- Codigo do Log
                                  ,pr_dsmensagem    => vr_dscritic || -- Descrição do Log
                                                       vr_dsparame
                                 ); 
      WHEN OTHERS THEN
        -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
        CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
        -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        pr_cdcritic:= 9999;
        pr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic) ||
                      'PAGA0001.pc_verif_dias_toler_sicredi' || 
                      '. ' || SQLERRM ||
                      '.'  || vr_dsparame;
        --> Geração de log                             
        pc_controla_log_programa( pr_cdcooper     => pr_cdcooper
                                 ,pr_dstiplog     => 'E' -- E = erro
                                 ,pr_tpocorrencia => 2   -- 1-Erro de negocio/ 2-Erro nao tratado
                                 ,pr_cdmensagem   => pr_cdcritic -- Codigo do Log
                                 ,pr_dsmensagem   => pr_dscritic -- Descrição do Log                                 
                                 );                            
    END;
  END pc_verif_dias_toler_sicredi;

  /* Pagar os Convenios */
  PROCEDURE pc_paga_convenio (pr_cdcooper IN  crapcop.cdcooper%TYPE   --Codigo da cooperativa
                             ,pr_nrdconta IN  crapttl.nrdconta%TYPE   --Numero da conta
                             ,pr_idseqttl IN  crapttl.idseqttl%TYPE   --Sequencial titular
                             ,pr_cdbarras IN  VARCHAR2                --Codigo de Barras
                             ,pr_dscedent IN  VARCHAR2 DEFAULT NULL   -- Descrição do cedente
                             ,pr_cdseqfat IN  NUMBER                  --Codigo Sequencial fatura
                             ,pr_vlfatura IN  NUMBER                  --Valor fatura
                             ,pr_nrdigfat IN  INTEGER                 --Numero Digito Fatura
                             ,pr_flgagend IN  INTEGER /*1-True,0-False*/ --Flag agendado
                             ,pr_idorigem IN  INTEGER                 --Indicador de origem
                             ,pr_cdcoptfn IN  INTEGER                 --Codigo cooperativa transacao
                             ,pr_cdagetfn IN  INTEGER                 --Codigo Agencia transacao
                             ,pr_nrterfin IN  INTEGER                 --Numero terminal financeiro
                             ,pr_nrcpfope IN  NUMBER                  --Numero cpf operador
                             ,pr_tpcptdoc IN craptit.tpcptdoc%TYPE DEFAULT 1 --> Tipo de captura do documento (1=Leitora, 2=Linha digitavel).
                             ,pr_flmobile IN INTEGER                  --Indicador Mobile
                             ,pr_iptransa IN VARCHAR2 DEFAULT NULL    -- Ip da transação
                             ,pr_iddispos IN VARCHAR2 DEFAULT NULL    -- id do dispositivo
                             ,pr_dstransa OUT VARCHAR2                --Descricao transacao
                             ,pr_dsprotoc OUT VARCHAR2                --Descricao Protocolo
                             ,pr_cdbcoctl OUT VARCHAR2                --Codigo Banco Centralizador
                             ,pr_cdagectl OUT VARCHAR2                --Codigo Agencia Centralizadora
                             ,pr_cdcritic OUT INTEGER                 --Codigo da critica
                             ,pr_dscritic OUT VARCHAR2                --Descricao critica
                             ,pr_msgofatr OUT VARCHAR2
                             ,pr_cdempcon OUT NUMBER
							 ,pr_cdsegmto OUT VARCHAR2) IS 

    -- ..........................................................................
    --
    --  Programa : pc_paga_convenio              Antiga: B1wgen0016.p/paga_convenio
    --  Sistema  : Rotinas Internet
    --  Sigla    : CRED
    --  Autor    : Alisson C. Berrido - AMcom
    --  Data     : Agosto/2013.                   Ultima atualizacao: 03/09/2018
    --
    --  Dados referentes ao programa:
    --
    --   Frequencia: Sempre que for chamado
    --   Objetivo  : Pagar Convenios
    --
    --   Atualização:    07/05/2015 - Alterado tipo do prm pr_flgagend para integer para
    --                                poder usar a chamada no progress SD280901 (Odirlei-AMcom)
    --
    --                   19/01/2015 - Permitir informar o cedente nos convenios
    --                               (Chamado 235532). (Jonata - RKAM)
    --                   28/05/2015 - Replicado manutenção do dia 19/01/2015 para versão oracle
    --                                (Odirlei-Amcom)
    --
    --                   23/07/2015 - Ajustes para ofertar debito automatico apenas para os convenios permitidos
    --                                conforme no progress SD311393 (Odirlei-Amcom)
    --
    --                   27/07/2015 - Criado rotina pc_insere_lote para controlar a criação do lote
    --                                e tentar diminuir o tempo de lock da tabela SD312759 (Odirlei-AMcom)
    --
    --                   28/07/2015 - Criado procedimento para criar/atualizar lote, controlando se o mesmo esta em lock
    --                                para diminuir lock do banco e tempo de lock SD312759 (Odirlei-Amcom)
    --
    --                   30/07/2015 - Alterado para fazer o atualização do lote qnd for agencia = 90 Internet
    --                                que não foram feitos na cxon0014, diminuindo tempo de lock da tabela (Odirlei-Amcom)
    --
    --                   14/08/2015 - inclusão do parametro pr_tpcptdoc, para identificacao do tipo de captura
    --                               (leitora ou manual(linha digitavel)) (Odirlei-AMcom)
    --
    --                   28/10/2015 - Alterado tamanha da variavel vr_dspagtos de 2500
    --                                para 4000. (Jorge/Elton) SD - 351514
    --
    --                   11/11/2015 - Incluido calculo de modulo 11 para geracao
    --                                de comprovante/protocolo. (Tiago/Fabricio) SD - 334427
    --
    --                   15/12/2017 - Incluido nome do módulo logado
    --                                No caso de erro de programa gravar tabela especifica de log                     
    --                                Ajuste mensagem de erro 
    --                                (Belli - Envolti - Chamado 779415)    
    --							
	--
    --                   04/04/2018 - Adicionada chamada para a proc pc_permite_produto_tipo
    --                                para verificar se o tipo de conta permite a contratação 
    --                                do produto. PRJ366 (Lombardi).
    --
    --                   16/04/2018 - Inclusao da chamada da rotina de Analise de Fraude (pc_criar_analise_antifraude) e
    --                                passagem do ID para rotina cxon0014.pc_gera_fatuas.
    --                                (PRJ381 - Analise de Fraude - Teobaldo Jamunda - AMcom)    
    --		   
    --                   03/09/2018 - Correção para remover lote (Jonata - Mouts).
    -- .........................................................................................................................

  BEGIN
    DECLARE
      --Variaveis Locais
      vr_cdhistor INTEGER;
      vr_cdhisdeb INTEGER;
      vr_sequenci INTEGER;
      vr_nrdigito INTEGER;
    vr_flgachou BOOLEAN;
      vr_flgretor BOOLEAN;
      vr_flgpagto BOOLEAN;
      vr_nrdocmto NUMBER;
      vr_lindigi1 VARCHAR2(12);
      vr_lindigi2 VARCHAR2(12);
      vr_lindigi3 VARCHAR2(12);
      vr_lindigi4 VARCHAR2(12);
      vr_cdcalcul VARCHAR2(100);
      vr_cdpesqbb VARCHAR2(1000);
      vr_lindigit VARCHAR2(1000);
      vr_dslitera VARCHAR2(32000);
      vr_dsinfor1 VARCHAR2(1000);
      vr_dsinfor2 VARCHAR2(1000);
      vr_dsinfor3 VARCHAR2(1000);
      vr_nmextttl VARCHAR2(1000);
      vr_nrseqdig craplcm.nrseqdig%TYPE :=0;
      vr_nrautdoc craplcm.nrautdoc%TYPE;
      vr_nrdrecid ROWID;
      vr_cdagenci INTEGER;
      vr_cdtippro INTEGER;
      vr_nrcpfpre NUMBER;
      vr_nmprepos VARCHAR2(100);
      --Tipo de registro de associado
      rw_cra2ass cr_crapass%ROWTYPE;
      --Variaveis de Erro
      vr_des_erro VARCHAR2(4000);
      vr_cdcritic crapcri.cdcritic%TYPE;
      vr_dscritic VARCHAR2(4000);
      vr_exc_erro EXCEPTION;
	  vr_vllantot NUMBER := 0;

      --Agrupa os parametros - 15/12/2017 - Chamado 779415
      vr_dsparame VARCHAR2(4000);	 

      -- Analise de fraude
      vr_idanalise_fraude tbgen_analise_fraude.idanalise_fraude%TYPE;
      vr_idorigem         INTEGER;
      vr_cdoperac_afra    INTEGER;
      
      --log
      vr_nmarqlog VARCHAR2(500);
      vr_cdprogra VARCHAR2(50) := 'PAGA0001.PC_PAGA_CONVENIO';

      vr_cdprodut INTEGER;
      vr_possuipr VARCHAR2(1);
			vr_tparrecd crapcon.tparrecd%TYPE;

      /* Validar se o convenio pode ser ofertado comoo debito automatico*/
      CURSOR cr_gnconve (pr_cdhistor gnconve.cdhiscxa%TYPE) IS
        SELECT 1
          FROM gnconve
         WHERE gnconve.cdhiscxa = pr_cdhistor
           AND gnconve.flgativo = 1 --TRUE
           AND gnconve.nmarqatu IS NOT NULL
           AND nvl(gnconve.cdhisdeb,0) <> 0;
      rw_gnconve cr_gnconve%ROWTYPE;

      --> Validar se o convenio recorrente
      CURSOR cr_gnconve_2 (pr_cdcooper gnconve.cdcooper%TYPE,
                           pr_cdhistor gnconve.cdhiscxa%TYPE) IS
        SELECT 1
          FROM gnconve cnv,
               gncvcop cop
         WHERE cnv.cdconven = cop.cdconven
           AND cop.cdcooper = pr_cdcooper
           AND cnv.cdhiscxa = pr_cdhistor
           AND cnv.flgativo = 1   
           AND cnv.flgenvpa = 1;
      rw_gnconve_2 cr_gnconve_2%ROWTYPE;      

	CURSOR cr_crapscn (pr_cdempcon IN crapscn.cdempcon%TYPE
                      ,pr_cdsegmto IN crapscn.cdsegmto%TYPE) IS
       SELECT crapscn.cdsegmto
             ,crapscn.cdempcon
			 ,crapscn.dsoparre
			 ,crapscn.cddmoden
         FROM crapscn
     WHERE crapscn.cdempcon = pr_cdempcon 		AND
           crapscn.cdsegmto = pr_cdsegmto   AND
					 crapscn.dsoparre = 'E'     AND
					(crapscn.cddmoden = 'A'     OR
					 crapscn.cddmoden = 'C');
     rw_crapscn cr_crapscn%ROWTYPE;

      rw_crapavt cr_crapavt%ROWTYPE;

      -- Verificar cadasto de senhas
      CURSOR cr_crapsnh2 (pr_cdcooper crapass.cdcooper%TYPE,
                          pr_nrdconta crapass.nrdconta%TYPE,
                          pr_nrcpfcgc crapttl.nrcpfcgc%TYPE) IS
        SELECT crapsnh.cdcooper
              ,crapsnh.nrdconta
              ,crapsnh.idseqttl
          FROM crapsnh
         WHERE crapsnh.cdcooper = pr_cdcooper
           AND crapsnh.nrdconta = pr_nrdconta
           AND crapsnh.tpdsenha = 1
           AND crapsnh.nrcpfcgc = pr_nrcpfcgc;

      rw_crapsnh2 cr_crapsnh2%ROWTYPE;

      CURSOR cr_crappod(pr_cdcooper crapass.cdcooper%TYPE,
                        pr_nrdconta crapass.nrdconta%TYPE)IS
        SELECT pod.cdcooper
              ,pod.nrdconta
              ,pod.nrcpfpro
          FROM crappod pod
         WHERE pod.cdcooper = pr_cdcooper
           AND pod.nrdconta = pr_nrdconta
           AND pod.cddpoder = 10
           AND pod.flgconju = 1;

      rw_crappod cr_crappod%ROWTYPE;

      -- Procedimento para inserir o lote e não deixar tabela lockada
      PROCEDURE pc_insere_lote (pr_cdcooper IN craplot.cdcooper%TYPE,
                                pr_dtmvtolt IN craplot.dtmvtolt%TYPE,
                                pr_cdagenci IN craplot.cdagenci%TYPE,
                                pr_cdbccxlt IN craplot.cdbccxlt%TYPE,
                                pr_nrdolote IN craplot.nrdolote%TYPE,
                                pr_cdoperad IN craplot.cdoperad%TYPE,
                                pr_nrdcaixa IN craplot.nrdcaixa%TYPE,
                                pr_tplotmov IN craplot.tplotmov%TYPE,
                                pr_cdhistor IN craplot.cdhistor%TYPE,
                                pr_craplot  OUT cr_craplot%ROWTYPE,
                                pr_dscritic OUT VARCHAR2)IS

        -- Pragma - abre nova sessao para tratar a atualizacao
        PRAGMA AUTONOMOUS_TRANSACTION;
        -- criar rowtype controle
        rw_craplot_ctl cr_craplot%ROWTYPE;

      BEGIN
        -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
        GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_insere_lote - B');    

        /* Tratamento para buscar registro de lote se o mesmo estiver em lock, tenta por 10 seg. */
        FOR i IN 1..100 LOOP
          BEGIN
            -- Leitura do lote
            OPEN cr_craplot (pr_cdcooper  => pr_cdcooper,
                             pr_dtmvtolt  => pr_dtmvtolt,
                             pr_cdagenci  => pr_cdagenci,
                             pr_cdbccxlt  => pr_cdbccxlt,
                             pr_nrdolote  => pr_nrdolote);
            FETCH cr_craplot INTO rw_craplot_ctl;
            pr_dscritic := NULL;
            EXIT;
          EXCEPTION
            WHEN OTHERS THEN
               IF cr_craplot%ISOPEN THEN
                 CLOSE cr_craplot;
               END IF;

               -- setar critica caso for o ultimo
               IF i = 100 THEN
                 pr_dscritic:= pr_dscritic||'Registro de lote '||pr_nrdolote||' em uso. Tente novamente.';
               END IF;

               -- aguardar 0,5 seg. antes de tentar novamente
               sys.dbms_lock.sleep(0.1);

          END;

        END LOOP;

        -- se encontrou erro ao buscar lote, abortar programa
        IF pr_dscritic IS NOT NULL THEN
          ROLLBACK;
          RETURN;
        END IF;

        IF cr_craplot%NOTFOUND THEN
          -- criar registros de lote na tabela
          BEGIN
          INSERT INTO craplot
                  (craplot.cdcooper
                  ,craplot.dtmvtolt
                  ,craplot.cdagenci
                  ,craplot.cdbccxlt
                  ,craplot.nrdolote
                  ,craplot.tplotmov
                  ,craplot.cdoperad
                  ,craplot.cdhistor
                  ,craplot.nrdcaixa
                  ,craplot.cdopecxa)
          VALUES  (pr_cdcooper
                  ,pr_dtmvtolt
                  ,pr_cdagenci
                  ,pr_cdbccxlt
                  ,pr_nrdolote
                  ,pr_tplotmov
                  ,pr_cdoperad
                  ,pr_cdhistor
                  ,pr_nrdcaixa
                  ,pr_cdoperad)
             RETURNING  craplot.ROWID
                       ,craplot.nrdolote
                       ,craplot.cdbccxlt
                       ,craplot.tplotmov
                       ,craplot.dtmvtolt
                       ,craplot.cdagenci
                       ,craplot.cdhistor
                       ,craplot.cdoperad
                       ,craplot.qtcompln
                       ,craplot.qtinfoln
                       ,craplot.vlcompcr
                       ,craplot.vlinfocr
                   INTO rw_craplot_ctl.ROWID
                      , rw_craplot_ctl.nrdolote
                      , rw_craplot_ctl.cdbccxlt
                      , rw_craplot_ctl.tplotmov
                      , rw_craplot_ctl.dtmvtolt
                      , rw_craplot_ctl.cdagenci
                      , rw_craplot_ctl.cdhistor
                      , rw_craplot_ctl.cdoperad
                      , rw_craplot_ctl.qtcompln
                      , rw_craplot_ctl.qtinfoln
                      , rw_craplot_ctl.vlcompcr
                      , rw_craplot_ctl.vlinfocr;
          EXCEPTION
            WHEN OTHERS THEN
              -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
              CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
              -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
              pr_cdcritic := 1034;
              pr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic) ||
                             'CRAPLOT(10):' ||
                             ' cdcooper:'     || pr_cdcooper ||
                             ', dtmvtolt:'    || pr_dtmvtolt || 
                             ', cdagenci:'    || pr_cdagenci || 
                             ', cdbccxlt:'    || pr_cdbccxlt ||
                             ', nrdolote:'    || pr_nrdolote ||
                             ', nrseqdig:'    || '1'         ||
                             ', tplotmov:'    || pr_tplotmov ||
                             ', cdoperad:'    || pr_cdoperad || 
                             ', cdhistor:'    || pr_cdhistor || 
                             ', nrdcaixa:'    || pr_nrdcaixa ||
                             ', cdopecxa:'    || pr_cdoperad ||
                             '. ' || sqlerrm; 
              RAISE vr_exc_erro;
          END;		  
        	  

        END IF;


        CLOSE cr_craplot;

        -- retornar informações para o programa chamador
        pr_craplot := rw_craplot_ctl;

        COMMIT;
	      -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		    GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);
      EXCEPTION
        WHEN vr_exc_erro THEN
          IF cr_craplot%ISOPEN THEN
            CLOSE cr_craplot;
          END IF;            
          ROLLBACK;
        WHEN OTHERS THEN
          -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
          CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
          IF cr_craplot%ISOPEN THEN
            CLOSE cr_craplot;
          END IF;
          -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
          pr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => 9999)  ||
                    ' PAGA0001.pc_insere_lote. ' || SQLERRM ||
                    '. pr_cdcooper:' || pr_cdcooper || 
                    ', pr_dtmvtolt:' || pr_dtmvtolt ||
                    ', pr_cdagenci:' || pr_cdagenci ||
                    ', pr_cdbccxlt:' || pr_cdbccxlt ||
                    ', pr_nrdolote:' || pr_nrdolote ||
                    ', pr_cdoperad:' || pr_cdoperad ||
                    ', pr_nrdcaixa:' || pr_nrdcaixa ||
                    ', pr_tplotmov:' || pr_tplotmov ||
                    ', pr_cdhistor:' || pr_cdhistor;
          ROLLBACK;

      END pc_insere_lote;


    BEGIN

      --Inicializar variaveis
      pr_cdcritic:= NULL;
      pr_dscritic:= NULL;

	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_paga_convenio');

      --Ajuste Savepoint - 15/12/2017 - Chamado 779415
      --Savepoint para abortar sem alterar
      SAVEPOINT TRANS_UNDO;
      
      --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
      vr_dsparame :=  ' pr_cdcooper:'  || pr_cdcooper || 
                      ', pr_nrdconta:' || pr_nrdconta ||
                      ', pr_idseqttl:' || pr_idseqttl ||
                      ', pr_cdbarras:' || pr_cdbarras ||
                      ', pr_dscedent:' || pr_dscedent ||
                      ', pr_cdseqfat:' || pr_cdseqfat ||
                      ', pr_vlfatura:' || pr_vlfatura ||
                      ', pr_nrdigfat:' || pr_nrdigfat ||
                      ', pr_flgagend:' || pr_flgagend ||
                      ', pr_idorigem:' || pr_idorigem ||
                      ', pr_cdcoptfn:' || pr_cdcoptfn ||
                      ', pr_cdagetfn:' || pr_cdagetfn ||
                      ', pr_nrterfin:' || pr_nrterfin ||
                      ', pr_nrcpfope:' || pr_nrcpfope ||
                      ', pr_tpcptdoc:' || pr_tpcptdoc ||
                      ', pr_flmobile:' || pr_flmobile;
                      
      /* tratamento para TAA */

      IF  pr_idorigem = 4  THEN
        --Codigo agencia
        vr_cdagenci:= 91;
        --Historico Debito
        vr_cdhisdeb:= 856;
      ELSE
        --Codigo agencia
        vr_cdagenci:= 90;
        --Historico Debito
        vr_cdhisdeb:= 508;

      END IF;

      /* Data do sistema */

      OPEN BTCH0001.cr_crapdat(pr_cdcooper => pr_cdcooper);
      FETCH BTCH0001.cr_crapdat INTO rw_crapdat;
      -- Se não encontrar
      IF BTCH0001.cr_crapdat%NOTFOUND THEN
        -- Fechar o cursor pois haverá raise
        CLOSE BTCH0001.cr_crapdat;
        --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
        -- Montar mensagem de critica
        vr_cdcritic := 1;
        vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        RAISE vr_exc_erro;
      ELSE
        -- Apenas fechar o cursor
        CLOSE BTCH0001.cr_crapdat;

      END IF;

      --Descricao da transacao
      pr_dstransa:= 'Pagamento de convenio (fatura)';

      --Verificar cooperativa
      OPEN cr_crapcop(pr_cdcooper => pr_cdcooper);
      FETCH cr_crapcop INTO rw_crapcop;
      --Se nao encontrou
      IF cr_crapcop%NOTFOUND THEN
        --Fechar Cursor
        CLOSE cr_crapcop;
        --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        vr_cdcritic := 1070; --Cooperativa nao cadastrada
        vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;

      --Fechar Cursor
      CLOSE cr_crapcop;

      --Selecionar associado
      OPEN cr_crapass (pr_cdcooper => pr_cdcooper
                      ,pr_nrdconta => pr_nrdconta);
      --Posicionar no proximo registro
      FETCH cr_crapass INTO rw_crapass;
      --Se nao encontrar
      IF cr_crapass%NOTFOUND THEN
        --Fechar Cursor
        CLOSE cr_crapass;
        --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        vr_cdcritic := 9; --Associado nao cadastrado
        vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;

      --Fechar Cursor
      CLOSE cr_crapass;

      --Banco e Agencia centralizadora
      pr_cdbcoctl:= gene0002.fn_mask(rw_crapcop.cdbcoctl,'999');
      pr_cdagectl:= gene0002.fn_mask(rw_crapcop.cdagectl,'9999');

      --Savepoint para abortar sem alterar
      SAVEPOINT TRANS_UNDO;

      /* Pega o nome do convenio */
      OPEN cr_crapcon (pr_cdcooper => pr_cdcooper
                      ,pr_cdempcon => TO_NUMBER(SUBSTR(pr_cdbarras,16,4))
                      ,pr_cdsegmto => TO_NUMBER(SUBSTR(pr_cdbarras,2,1)));
      --Posicionar no proximo registro
      FETCH cr_crapcon INTO rw_crapcon;
      --Se nao encontrar
      IF cr_crapcon%NOTFOUND THEN
        --Fechar Cursor
        CLOSE cr_crapcon;
        vr_cdcritic:= 0;
        vr_dscritic:= 'Convenio nao encontrado.';
        RAISE vr_exc_erro;
      END IF;

      --Fechar Cursor
      CLOSE cr_crapcon;
      
      ---> 16/04/2018 - TEOBALDO
      --> Para convenio de origens InternetBank e Mobile,
      --> deve ser gerado o registro de analise de fraude antes da operacao
      IF pr_idorigem = 3 AND nvl(pr_flgagend,0) = 0 THEN
        
        IF pr_flmobile = 1 THEN
          vr_idorigem := 10; --> MOBILE
        ELSE
          vr_idorigem := 3; --> InternetBank
        END IF;
       
        --> Validar se o convenio recorrente
        OPEN cr_gnconve_2 (pr_cdcooper => rw_crapcon.cdcooper,
                           pr_cdhistor => rw_crapcon.cdhistor);
        FETCH cr_gnconve_2 INTO rw_gnconve_2;
        IF cr_gnconve_2%FOUND THEN
          CLOSE cr_gnconve_2;
          vr_cdoperac_afra :=  6; --> Pagamento de Convenios  Recorrentes        
        ELSE
          CLOSE cr_gnconve_2;
          vr_cdoperac_afra :=  2; --> Pagamento de Convenios Normais         
        END IF;                          
      
        vr_idanalise_fraude := NULL;
        --> Rotina para Inclusao do registro de analise de fraude --- #### TJ
        AFRA0001.pc_Criar_Analise_Antifraude(pr_cdcooper      => pr_cdcooper
                                            ,pr_cdagenci      => vr_cdagenci
                                            ,pr_nrdconta      => pr_nrdconta
                                            ,pr_cdcanal       => vr_idorigem 
                                            ,pr_iptransacao   => pr_iptransa
                                            ,pr_dtmvtolt      => rw_crapdat.dtmvtolt
                                            ,pr_cdproduto     => 43                --> Pagamento Convenio
                                            ,pr_cdoperacao    => vr_cdoperac_afra  --> Pagamento Convenio
                                            ,pr_iddispositivo => pr_iddispos 
                                            ,pr_dstransacao   => pr_dstransa
                                            ,pr_tptransacao   => 1 --> online 2-Agendamento
                                            ,pr_idanalise_fraude => vr_idanalise_fraude
                                            ,pr_dscritic      => vr_dscritic);
        vr_dscritic := NULL;
      END IF;
        

      --Gerar Fatura
      CXON0014.pc_gera_faturas (pr_cdcooper      => pr_cdcooper     --Codigo Cooperativa
                               ,pr_nrdconta      => pr_nrdconta     --Numero da Conta
                               ,pr_idseqttl      => pr_idseqttl     --Sequencial Titular
                               ,pr_cod_operador  => '996'           --Codigo Operador
                               ,pr_cod_agencia   => vr_cdagenci     --Codigo Agencia
                               ,pr_nro_caixa     => 900             --Numero Caixa
                               ,pr_cdbarras      => pr_cdbarras     --Codigo barras
                               ,pr_cdseqfat      => pr_cdseqfat     --Sequencial faturamento
                               ,pr_vlfatura      => pr_vlfatura     --Valor Fatura
                               ,pr_nrdigfat      => pr_nrdigfat     --Digito Faturamento
                               ,pr_valorinf      => pr_vlfatura     --Valor Informado
                               ,pr_cdcoptfn      => pr_cdcoptfn     --Cooperativa do terminal financeiro
                               ,pr_cdagetfn      => pr_cdagetfn     --Agencia do terminal financeiro
                               ,pr_nrterfin      => pr_nrterfin     --Numero Terminal Financeiro
                               ,pr_tpcptdoc      => pr_tpcptdoc     --Tipo de captura do documento (1=Leitora, 2=Linha digitavel).
                               ,pr_idanafrd      => vr_idanalise_fraude -- Identificador de analise de fraude  (incluido em 16/04/2018 - TJ).
                               ,pr_histor        => vr_cdhistor     --Codigo Historico
                               ,pr_pg            => vr_flgpagto     --Indicador Pago
                               ,pr_docto         => vr_nrdocmto     --Numero Documento
                               ,pr_literal       => vr_dslitera     --Literal
                               ,pr_ult_sequencia => vr_sequenci     --Ultima Sequencia
                               ,pr_cdcritic      => vr_cdcritic     --Codigo do erro
                               ,pr_dscritic      => vr_dscritic);   --Descricao do erro
      --Se ocorreu erro
      IF NVL(vr_cdcritic,0) <> 0 OR TRIM(vr_dscritic) IS NOT NULL THEN
        --Selecionar erro
        OPEN cr_craperr (pr_cdcooper => pr_cdcooper
                        ,pr_cdagenci => vr_cdagenci
                        ,pr_nrdcaixa => To_Number(pr_nrdconta||pr_idseqttl));
        --Posicionar no primeiro registro
        FETCH cr_craperr INTO rw_craperr;
        --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
        --Se Encontrou
        IF cr_craperr%FOUND THEN
          IF rw_craperr.cdcritic = 0 THEN
            vr_cdcritic:= 1112;
          vr_dscritic:= rw_craperr.dscritic;
        ELSE
            vr_cdcritic:= rw_craperr.cdcritic;
            vr_dscritic:= rw_craperr.dscritic;
          END IF;
        ELSE
          vr_cdcritic:= 1111; --Erro no pagamento da fatura
          vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        END IF;

        --Fechar Cursor
        CLOSE cr_craperr;
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_paga_convenio');

      /* Pega autenticacao gerada no pagamento para adicionar o protocolo */

      OPEN cr_crapaut_sequen (pr_cdcooper => pr_cdcooper
                             ,pr_cdagenci => vr_cdagenci
                             ,pr_nrdcaixa => 900
                             ,pr_dtmvtolt => rw_crapdat.dtmvtocd
                             ,pr_nrsequen => vr_sequenci);
      --Posicionar no proximo registro
      FETCH cr_crapaut_sequen INTO rw_crapaut;
      --Se nao encontrar
      IF cr_crapaut_sequen%NOTFOUND THEN
        --Fechar Cursor
        CLOSE cr_crapaut_sequen;
        --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        vr_cdcritic:= 1086; --Registro da autenticacao nao encontrado
        vr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;

      --Fechar Cursor
      CLOSE cr_crapaut_sequen;
      --Pessoa Fisica
      IF rw_crapass.inpessoa = 1 THEN
        /* Pega o nome do titular que fez o pagamento */

        OPEN cr_crapttl (pr_cdcooper => pr_cdcooper
                        ,pr_nrdconta => pr_nrdconta
                        ,pr_idseqttl => pr_idseqttl);
        --Posicionar no proximo registro
        FETCH cr_crapttl INTO rw_crapttl;
        --Se nao encontrar
        IF cr_crapttl%NOTFOUND THEN
          --Fechar Cursor
          CLOSE cr_crapttl;
          --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
          vr_cdcritic:= 1082; --Titular nao encontrado
          vr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
          RAISE vr_exc_erro;
        ELSE
          --Nome do titular
          vr_nmextttl:= rw_crapttl.nmextttl;

        END IF;

        --Fechar Cursor
        CLOSE cr_crapttl;
      ELSE
        --Nome do titular
        vr_nmextttl:= rw_crapass.nmprimtl;

      END IF;


      OPEN cr_crapcon (pr_cdcooper => pr_cdcooper
                      ,pr_cdempcon => TO_NUMBER(SUBSTR(pr_cdbarras,16,4))
                      ,pr_cdsegmto => TO_NUMBER(SUBSTR(pr_cdbarras,2,1)));
      --Posicionar no proximo registro
      FETCH cr_crapcon INTO rw_crapcon;
      --Se nao encontrar
      IF cr_crapcon%NOTFOUND THEN
        --Fechar Cursor
        CLOSE cr_crapcon;
        --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        vr_cdcritic:= 563; --Convenio nao encontrado
        vr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        RAISE vr_exc_erro;
      END IF;

      --Fechar Cursor
      CLOSE cr_crapcon;
      -- Capturar tipo de arrecadao
      vr_tparrecd := rw_crapcon.tparrecd;

      IF pr_idorigem IN(1,5) THEN
        vr_cdprodut := 10; -- Débito automático
      ELSE
        vr_cdprodut := 29; -- Débito Automático Fácil
      END IF;
      
      -- Verifica se o tipo de conta permite a contratação do produto
      CADA0006.pc_permite_produto_tipo(pr_cdprodut => vr_cdprodut
                                      ,pr_cdtipcta => rw_crapass.cdtipcta
                                      ,pr_cdcooper => pr_cdcooper
                                      ,pr_inpessoa => rw_crapass.inpessoa
                                      ,pr_possuipr => vr_possuipr
                                      ,pr_cdcritic => vr_cdcritic
                                      ,pr_dscritic => vr_dscritic);
      -- Se ocorrer erro
      IF vr_cdcritic > 0 OR vr_dscritic IS NOT NULL THEN
        RAISE vr_exc_erro;
      END IF;
      
      --Verifica se deve ofertar a inclusao para debito automatico da fatura
      IF rw_crapcop.flgofatr = 1 AND 
         vr_possuipr = 'S'       THEN

        --> Convenio Cecred
			  IF  rw_crapcon.tparrecd = 3 THEN					
        OPEN cr_gnconve(pr_cdhistor => rw_crapcon.cdhistor);
        FETCH cr_gnconve INTO rw_gnconve;
					vr_flgachou := cr_gnconve%FOUND;					
        --> Sicredi  
				ELSIF  rw_crapcon.tparrecd = 1 THEN					
					OPEN cr_crapscn (pr_cdempcon  => rw_crapcon.cdempcon
                          ,pr_cdsegmto  => rw_crapcon.cdsegmto);
					FETCH cr_crapscn INTO rw_crapscn;
					vr_flgachou := cr_crapscn%FOUND;						 
        --> Bancoob
				ELSIF rw_crapcon.tparrecd = 2 THEN		
          /* Bancoob não possui deb.aut */			
          vr_flgachou := FALSE;
         
        ELSE
          vr_dscritic := 'Tipo de arrecadacao invalida.';
          RAISE vr_exc_erro;
        END IF;

        IF vr_flgachou THEN
          IF pr_flmobile = 1 THEN
             pr_msgofatr := 'Deseja incluir sua fatura em débito automático?';
          ELSE
					pr_msgofatr := 'Deseja efetuar o cadastro do debito automático?';
          END IF;
          
            pr_cdempcon := rw_crapcon.cdempcon;
		      pr_cdsegmto := TO_CHAR(rw_crapcon.cdsegmto);
          END IF;

        IF cr_gnconve%ISOPEN THEN
					CLOSE cr_gnconve;
        END IF;

			  IF cr_crapscn%ISOPEN THEN
					CLOSE cr_crapscn;
				END IF;

      ELSE
        pr_msgofatr := '';
        pr_cdempcon := 0;

      END IF;

      /* Pega digito verificador dos campos para montar linha digitavel */

      FOR idx IN 1..4 LOOP
        CASE idx
          WHEN 1 THEN
            vr_lindigi1:= SUBSTR(pr_cdbarras, 1, 11);
            vr_cdcalcul:= TO_NUMBER(vr_lindigi1);

          WHEN 2 THEN
            vr_lindigi2:= SUBSTR(pr_cdbarras, 12, 11);
            vr_cdcalcul:= TO_NUMBER(vr_lindigi2);

          WHEN 3 THEN
            vr_lindigi3:= SUBSTR(pr_cdbarras, 23, 11);
            vr_cdcalcul:= TO_NUMBER(vr_lindigi3);

          WHEN 4 THEN
            vr_lindigi4:= SUBSTR(pr_cdbarras, 34, 11);
            vr_cdcalcul:= TO_NUMBER(vr_lindigi4);

        END CASE;

        IF SUBSTR(pr_cdbarras,3,1) IN ('6','7') THEN
          /*** Calculo digito verificador pelo modulo 10 ***/
          CXON0000.pc_calc_digito_iptu_samae (pr_valor    => vr_cdcalcul       --> Valor Calculado
                                           ,pr_nrdigito => vr_nrdigito    --> Digito Verificador
                                           ,pr_retorno  => vr_flgretor);  --> Retorno digito correto
        ELSE
          /*** Verificacao pelo modulo 11 ***/
          CXON0014.pc_verifica_digito (pr_nrcalcul => vr_cdcalcul  --Numero a ser calculado
					                  ,pr_poslimit => 0            --Utilizado para validação de dígito adicional de DAS
                                      ,pr_nrdigito => vr_nrdigito); --Digito verificador        
        END IF;
        
	      -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		    GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_paga_convenio');
        
        CASE idx
          WHEN 1 THEN
            vr_lindigi1:= TO_NUMBER(gene0002.fn_mask(vr_lindigi1,'99999999999')||gene0002.fn_mask(vr_nrdigito,'9'));

          WHEN 2 THEN
            vr_lindigi2:= TO_NUMBER(gene0002.fn_mask(vr_lindigi2,'99999999999')||gene0002.fn_mask(vr_nrdigito,'9'));

          WHEN 3 THEN
            vr_lindigi3:= TO_NUMBER(gene0002.fn_mask(vr_lindigi3,'99999999999')||gene0002.fn_mask(vr_nrdigito,'9'));

          WHEN 4 THEN
            vr_lindigi4:= TO_NUMBER(gene0002.fn_mask(vr_lindigi4,'99999999999')||gene0002.fn_mask(vr_nrdigito,'9'));

        END CASE;
	      -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		    GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_paga_convenio');

      END LOOP;


      /* Monta linha digitavel */

      vr_lindigit:= SUBSTR(gene0002.fn_mask(vr_lindigi1,'999999999999'),1,11) ||'-'||
                    SUBSTR(gene0002.fn_mask(vr_lindigi1,'999999999999'),12,1) ||' '||
                    SUBSTR(gene0002.fn_mask(vr_lindigi2,'999999999999'),1,11) ||'-'||
                    SUBSTR(gene0002.fn_mask(vr_lindigi2,'999999999999'),12,1) ||' '||
                    SUBSTR(gene0002.fn_mask(vr_lindigi3,'999999999999'),1,11) ||'-'||
                    SUBSTR(gene0002.fn_mask(vr_lindigi3,'999999999999'),12,1) ||' '||
                    SUBSTR(gene0002.fn_mask(vr_lindigi4,'999999999999'),1,11) ||'-'||
                    SUBSTR(gene0002.fn_mask(vr_lindigi4,'999999999999'),12,1);
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_paga_convenio');
	   
      vr_nrseqdig := fn_sequence('CRAPLOT'
                                ,'NRSEQDIG'
                                ,''||rw_crapaut.cdcooper||';'
                                   ||to_char(rw_crapaut.dtmvtolt,'DD/MM/RRRR')||';'
                                   ||rw_crapaut.cdagenci||';'
                                   ||11||';'
                                   ||11900); 

      -- Procedimento para inserir o lote e não deixar tabela lockada
      /*[PROJETO LIGEIRINHO] Esta função retorna verdadeiro, quando o processo foi iniciado pela rotina:
       PAGA0001.pc_efetua_debitos_paralelo, que é chamada na rotina PC_CRPS509. Tem por finalidade definir
       se grava na tabela CRAPLOT no momento em que esta rodando a esta rotina OU somente no final da execucação
       da PC_CRPS509, para evitar o erro de lock da tabela, pois esta gravando a agencia 90,91 ou 1 ao inves de gravar
       a agencia do cooperado*/
      if not fn_exec_paralelo then
      pc_insere_lote (pr_cdcooper => rw_crapaut.cdcooper,
                      pr_dtmvtolt => rw_crapaut.dtmvtolt,
                      pr_cdagenci => rw_crapaut.cdagenci,
                      pr_cdbccxlt => 11,
                      pr_nrdolote => 11900,
                      pr_cdoperad => '996',
                      pr_nrdcaixa => rw_crapaut.nrdcaixa,
                      pr_tplotmov => 1,
                      pr_cdhistor => 0,
                      pr_craplot  => rw_craplot,
                      pr_dscritic => vr_dscritic);
      else
         pc_insere_lote_wrk(pr_cdcooper => rw_crapaut.cdcooper,
                            pr_dtmvtolt => rw_crapaut.dtmvtolt,
                            pr_cdagenci => rw_crapaut.cdagenci,
                            pr_cdbccxlt => 11,
                            pr_nrdolote => 11900,
                            pr_cdoperad => '996',
                            pr_nrdcaixa => rw_crapaut.nrdcaixa,
                            pr_tplotmov => 1,
                            pr_cdhistor => 0,
                            pr_cdbccxpg => null,
                            pr_nmrotina => 'PC_PAGA_CONVENIO');
         
         rw_craplot.cdcooper := rw_crapaut.cdcooper;                   
         rw_craplot.dtmvtolt := rw_crapaut.dtmvtolt;                  
         rw_craplot.cdagenci := rw_crapaut.cdagenci;                   
         rw_craplot.cdbccxlt := 11;                  
         rw_craplot.nrdolote := 11900;                   
         rw_craplot.cdoperad := '996';                                  
         rw_craplot.tplotmov := 1;                   
         rw_craplot.cdhistor := 0;
                                 
      end if;                        

      -- se encontrou erro ao buscar lote, abortar programa
      IF vr_dscritic IS NOT NULL THEN
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_paga_convenio');

      -- guardar valor para atualizar o lote
      vr_vllantot := nvl(rw_crapaut.vldocmto,0);
		  
      /* Campos gravados na crappro para visualizacao na internet */

      vr_dsinfor1:= 'Pagamento';
      vr_dsinfor2:= vr_nmextttl ||'#'||'Convenio: '||rw_crapcon.nmextcon;
      vr_dsinfor3:= 'Codigo de Barras: '||RPad(pr_cdbarras,44,'9')||'#Linha Digitavel: '|| vr_lindigit ||'#Tipo Arrecadao: ' || vr_tparrecd;

      /* Se TAA */

      IF pr_idorigem= 4 THEN
        vr_dsinfor3:= vr_dsinfor3 ||'#TAA: '||gene0002.fn_mask(pr_cdcoptfn,'9999')||'/'||
                                              gene0002.fn_mask(pr_cdagetfn,'9999')||'/'||
                                              gene0002.fn_mask(pr_nrterfin,'9999');
	      -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		    GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_paga_convenio');
      END IF;

      --Nome preposto
      vr_nmprepos:= NULL;
      vr_nrcpfpre:= 0;

      IF pr_idorigem = 3 THEN
        /* busca dados do preposto */

        --selecionar senha
        OPEN cr_crapsnh (pr_cdcooper => pr_cdcooper
                        ,pr_nrdconta => pr_nrdconta
                        ,pr_idseqttl => 1
                        ,pr_tpdsenha => 1);
        --Posicionar no proximo registro
        FETCH cr_crapsnh INTO rw_crapsnh;
        --Se encontrar
        IF cr_crapsnh%FOUND THEN
          --CPF preposto
          vr_nrcpfpre:= rw_crapsnh.nrcpfcgc;
          --Selecionar Avalista
          OPEN cr_crapavt (pr_cdcooper => rw_crapsnh.cdcooper
                          ,pr_nrdconta => rw_crapsnh.nrdconta
                          ,pr_tpctrato => 6
                          ,pr_nrcpfcgc => rw_crapsnh.nrcpfcgc);
          --Posicionar no proximo registro
          FETCH cr_crapavt INTO rw_crapavt;
          --Se encontrar
          IF cr_crapavt%FOUND THEN
            --Selecionar informacoes associado
            OPEN cr_crapass (pr_cdcooper => pr_cdcooper
                            ,pr_nrdconta => rw_crapavt.nrdctato);
            --Posicionar no proximo registro
            FETCH cr_crapass INTO rw_cra2ass;
            --Se encontrar
            IF cr_crapass%FOUND THEN
              --Nome preposto recebe nome avalista
              vr_nmprepos:= rw_cra2ass.nmprimtl;
            ELSE
              --Nome preposto recebe nome avalista
              vr_nmprepos:= rw_crapavt.nmdavali;

            END IF;

            --Fechar Cursor
            CLOSE cr_crapass;
          END IF;

          --Fechar Cursor
          CLOSE cr_crapavt;
        END IF;

        --Fechar Cursor
        CLOSE cr_crapsnh;
      END IF;

      --Tipo de Protocolo
      IF pr_idorigem = 4  THEN
        vr_cdtippro:= 6; /* taa */
      ELSE
        vr_cdtippro:= 2; /* internet */

      END IF;


      /* Gera um protocolo para o pagamento */

      GENE0006.pc_gera_protocolo(pr_cdcooper => rw_crapaut.cdcooper  --> Código da cooperativa
                                ,pr_dtmvtolt => rw_crapaut.dtmvtolt  --> Data movimento
                                ,pr_hrtransa => rw_crapaut.hrautent  --> Hora da transação
                                ,pr_nrdconta => pr_nrdconta          --> Número da conta
                                ,pr_nrdocmto => vr_nrseqdig  --> Número do documento
                                ,pr_nrseqaut => rw_crapaut.nrsequen  --> Número da sequencia
                                ,pr_vllanmto => rw_crapaut.vldocmto  --> Valor lançamento
                                ,pr_nrdcaixa => rw_crapaut.nrdcaixa  --> Número do caixa
                                ,pr_gravapro => TRUE                 --> Controle de gravação do crappro
                                ,pr_cdtippro => vr_cdtippro          --> Código do tipo protocolo
                                ,pr_dsinfor1 => vr_dsinfor1          --> Descrição 1
                                ,pr_dsinfor2 => vr_dsinfor2          --> Descrição 2
                                ,pr_dsinfor3 => vr_dsinfor3          --> Descrição 3
                                ,pr_dscedent => GENE0007.fn_caract_acento((CASE -- se não for informado cedente, utilizar o nome no convenio
                                                  WHEN pr_dscedent IS NULL      OR
                                                       pr_dscedent = rw_crapcon.nmextcon THEN
                                                    rw_crapcon.nmrescon
                                                  ELSE pr_dscedent
                                                END),1)  --> Descritivo Cedente
                                ,pr_flgagend => (pr_flgagend = 1)    --> Controle de agenda
                                ,pr_nrcpfope => pr_nrcpfope          --> Número de operação
                                ,pr_nrcpfpre => vr_nrcpfpre          --> Número pré operação
                                ,pr_nmprepos => vr_nmprepos          --> Nome
                                ,pr_dsprotoc => pr_dsprotoc          --> Descrição do protocolo
                                ,pr_dscritic => vr_dscritic          --> Descrição crítica
                                ,pr_des_erro => vr_des_erro);        --> Descrição dos erros de processo
      --Se ocorreu erro
      IF vr_dscritic IS NOT NULL OR vr_des_erro IS NOT NULL THEN
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_paga_convenio');

      /** Armazena protocolo na autenticacao **/

      BEGIN
        UPDATE crapaut SET crapaut.dsprotoc = pr_dsprotoc
        WHERE crapaut.ROWID = rw_crapaut.ROWID;

      EXCEPTION
        WHEN OTHERS THEN
          -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
          CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);          
          -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
          vr_cdcritic := 1035;
          vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                         'CRAPAUT(18):' ||
                         ' dsprotoc:'   || pr_dsprotoc ||
                         ' com ROWID:'  || rw_crapaut.ROWID || 
                         '. ' ||sqlerrm;
        --Levantar Excecao
        RAISE vr_exc_erro;

      END;

      --Gravar autenticacao Internet
      CXON0000.pc_grava_autenticacao_internet (pr_cooper       => rw_crapcop.cdcooper  --Codigo Cooperativa
                                              ,pr_nrdconta     => pr_nrdconta          --Numero da Conta
                                              ,pr_idseqttl     => pr_idseqttl          --Sequencial do titular
                                              ,pr_cod_agencia  => rw_crapaut.cdagenci  --Codigo Agencia
                                              ,pr_nro_caixa    => rw_crapaut.nrdcaixa  --Numero do caixa
                                              ,pr_cod_operador => rw_crapaut.cdopecxa  --Codigo Operador
                                              ,pr_valor        => rw_crapaut.vldocmto  --Valor da transacao
                                              ,pr_docto        => vr_nrseqdig  --Numero documento
                                              ,pr_operacao     => TRUE                 --Indicador Operacao Debito
                                              ,pr_status       => '1'                  --Status da Operacao - Online
                                              ,pr_estorno      => FALSE                --Indicador Estorno
                                              ,pr_histor       => vr_cdhisdeb          --Historico Debito
                                              ,pr_data_off     => NULL                 --Data Transacao
                                              ,pr_sequen_off   => 0                    --Sequencia
                                              ,pr_hora_off     => 0                    --Hora transacao
                                              ,pr_seq_aut_off  => 0                    --Sequencia automatica
                                              ,pr_cdempres     => NULL                 --Descricao Observacao
                                              ,pr_literal      => vr_dslitera          --Descricao literal lcm
                                              ,pr_sequencia    => vr_nrautdoc          --Sequencia
                                              ,pr_registro     => vr_nrdrecid          --ROWID do registro debito
                                              ,pr_cdcritic     => vr_cdcritic          --Código do erro
                                              ,pr_dscritic     => vr_dscritic);        --Descricao do erro
      --Se ocorreu erro
      IF NVL(vr_cdcritic,0) <> 0 OR TRIM(vr_dscritic) IS NOT NULL THEN
        --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        vr_cdcritic := 1075; --Erro na autenticacao do pagamento
        vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_paga_convenio');

      /* Encontrar registro da autenticacao */

      OPEN cr_crapaut (pr_rowid => vr_nrdrecid);
      --Posicionar no proximo registro
      FETCH cr_crapaut INTO rw_crapaut;
      --Se nao encontrar
      IF cr_crapaut%NOTFOUND THEN
        --Fechar Cursor
        CLOSE cr_crapaut;
        --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        vr_cdcritic:= 1086; --Registro da autenticacao nao encontrado
        vr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;

      --Fechar Cursor
      CLOSE cr_crapaut;

      /** Armazena protocolo na autenticacao **/

      BEGIN
        UPDATE crapaut SET crapaut.dsprotoc = pr_dsprotoc
        WHERE crapaut.ROWID = rw_crapaut.ROWID;
      EXCEPTION
        WHEN OTHERS THEN
          -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
          CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);        
          -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
          vr_cdcritic := 1035;
          vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                         'CRAPAUT(19):' ||
                         ' dsprotoc:'   || pr_dsprotoc ||
                         ' com ROWID:'  || rw_crapaut.ROWID || 
                         '. ' ||sqlerrm;
        --Levantar Excecao
        RAISE vr_exc_erro;
      END;

      --Verificar Origem e determinar codigo pesquisa
      IF pr_idorigem = 4 THEN
        vr_cdpesqbb:= 'TAA - PAGAMENTO ON-LINE ' ||'- CONVENIO ' || rw_crapcon.nmrescon;
      ELSE
        vr_cdpesqbb:= 'INTERNET - PAGAMENTO ON-LINE ' ||'- CONVENIO '|| rw_crapcon.nmrescon;

      END IF;

      /* Cria o lancamento do DEBITO */

      BEGIN
      
         
         -- se não for informado cedente, utilizar o nome no convenio
         if pr_dscedent IS NULL OR pr_dscedent = rw_crapcon.nmextcon THEN
            vr_dscedent := rw_crapcon.nmrescon;
         ELSE 
             vr_dscedent := pr_dscedent;
         end if;
      
         lanc0001.pc_gerar_lancamento_conta(
              pr_cdcooper => rw_crapaut.cdcooper
             ,pr_dtmvtolt => rw_crapaut.dtmvtolt
             ,pr_cdagenci => rw_crapaut.cdagenci
             ,pr_cdbccxlt => 11
             ,pr_nrdolote => 11900
             ,pr_dtrefere => rw_crapaut.dtmvtolt
             ,pr_hrtransa => GENE0002.fn_busca_time
             ,pr_cdoperad => rw_crapaut.cdopecxa
             ,pr_nrdconta => pr_nrdconta
             ,pr_nrdctabb => pr_nrdconta
             ,pr_nrdctitg => gene0002.fn_mask(pr_nrdconta,'99999999')
             ,pr_nrdocmto => vr_nrseqdig
             ,pr_nrsequni => vr_nrseqdig
             ,pr_nrseqdig => vr_nrseqdig
             ,pr_cdhistor => rw_crapaut.cdhistor
             ,pr_vllanmto => rw_crapaut.vldocmto
             ,pr_nrautdoc => rw_crapaut.nrsequen
             ,pr_dscedent => vr_dscedent
             ,pr_cdcoptfn => pr_cdcoptfn
             ,pr_cdagetfn => pr_cdagetfn
             ,pr_nrterfin => pr_nrterfin
             ,pr_cdpesqbb => vr_cdpesqbb
             ,pr_tab_retorno => vr_tab_retorno
             ,pr_incrineg => vr_incrineg
             ,pr_cdcritic => vr_cdcritic
             ,pr_dscritic => vr_dscritic
             );
             
        IF nvl(vr_cdcritic,0) > 0 OR 
           TRIM(vr_dscritic) IS NOT NULL THEN
                
          --Levantar Excecao
          RAISE vr_exc_erro;   
        END IF;

        IF pr_idorigem <> 4 THEN /* TAA */

          IF rw_crapass.idastcjt = 0 THEN

            -- Atualiza o registro de movimento da internet
            paga0001.pc_insere_movimento_internet(pr_cdcooper => pr_cdcooper 
                                                 ,pr_nrdconta => pr_nrdconta
                                                 ,pr_idseqttl => pr_idseqttl
                                                 ,pr_dtmvtolt => rw_crapaut.dtmvtolt
                                                 ,pr_cdoperad => rw_crapaut.cdopecxa
                                                 ,pr_inpessoa => rw_crapass.inpessoa
                                                 ,pr_tpoperac => 2 -- Pagamento
                                                 ,pr_vllanmto => pr_vlfatura
                                                 ,pr_dscritic => vr_dscritic);

                    --Levantar Excecao
            IF vr_dscritic IS NOT NULL THEN
             vr_cdcritic := substr(vr_dscritic,1,5);
             vr_dscritic := substr(vr_dscritic,7);
                    RAISE vr_exc_erro;
            END IF;
	          -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		        GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_paga_convenio');

          ELSE
            FOR rw_crappod IN cr_crappod(pr_cdcooper => pr_cdcooper
                                      ,pr_nrdconta => pr_nrdconta) LOOP

              OPEN cr_crapsnh2(pr_cdcooper => rw_crappod.cdcooper
                              ,pr_nrdconta => rw_crappod.nrdconta
                              ,pr_nrcpfcgc => rw_crappod.nrcpfpro);
                                      
              FETCH cr_crapsnh2 INTO rw_crapsnh2;

              IF cr_crapsnh2%NOTFOUND THEN
                CLOSE cr_crapsnh2;
                CONTINUE;
              ELSE
                CLOSE cr_crapsnh2;
        END IF;

              -- Atualiza o registro de movimento da internet
              paga0001.pc_insere_movimento_internet(pr_cdcooper => pr_cdcooper 
                                                   ,pr_nrdconta => pr_nrdconta
                                                   ,pr_idseqttl => rw_crapsnh2.idseqttl
                                                   ,pr_dtmvtolt => rw_crapaut.dtmvtolt
                                                   ,pr_cdoperad => rw_crapaut.cdopecxa
                                                   ,pr_inpessoa => rw_crapass.inpessoa
                                                   ,pr_tpoperac => 2 -- Pagamento
                                                   ,pr_vllanmto => pr_vlfatura
                                                   ,pr_dscritic => vr_dscritic);

                      --Levantar Excecao
              IF vr_dscritic IS NOT NULL THEN
                vr_cdcritic := substr(vr_dscritic,1,5);
                vr_dscritic := substr(vr_dscritic,7);
                      RAISE vr_exc_erro;
              END IF;
	            -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		          GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_paga_convenio');

            END LOOP;
          END IF;
              END IF;

                  EXCEPTION
        WHEN vr_exc_erro THEN
          RAISE vr_exc_erro;
        WHEN Others THEN
          -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
          CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
          -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
          vr_cdcritic := 1034;
          vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                         'CRAPLCM(11):' ||
                         ' cdcooper:'  || rw_crapaut.cdcooper || 
                         ', dtmvtolt:'  || rw_crapaut.dtmvtolt ||
                         ', cdagenci:'  || rw_crapaut.cdagenci ||
                         ', cdbccxlt:'  || '11' ||
                         ', nrdolote:'  || '11900' ||
                         ', dtrefere:'  || rw_crapaut.dtmvtolt ||
                         ', hrtransa:'  || GENE0002.fn_busca_time ||
                         ', cdoperad:'  || rw_crapaut.cdopecxa ||
                         ', nrdconta:'  || pr_nrdconta ||
                         ', nrdctabb:'  || pr_nrdconta ||
                         ', nrdctitg:'  || gene0002.fn_mask(pr_nrdconta,'99999999') ||
                         ', nrdocmto:'  || vr_nrseqdig ||
                         ', nrsequni:'  || vr_nrseqdig ||
                         ', nrseqdig:'  || vr_nrseqdig ||
                         ', cdhistor:'  || rw_crapaut.cdhistor ||
                         ', vllanmto:'  || rw_crapaut.vldocmto ||
                         ', nrautdoc:'  || rw_crapaut.nrsequen ||
                         ', dscedent:'  || (CASE WHEN pr_dscedent IS NULL OR 
                                                       pr_dscedent = rw_crapcon.nmextcon THEN  
                                                         rw_crapcon.nmrescon
                                                  ELSE 
                                                         pr_dscedent 
                                             END) ||
                         ', cdcoptfn:'  || pr_cdcoptfn ||
                         ', cdagetfn:'  || pr_cdagetfn ||
                         ', nrterfin:'  || pr_nrterfin ||
                         ', cdpesqbb:'  || vr_cdpesqbb ||
                         '. ' ||sqlerrm;
          --Levantar Excecao
          RAISE vr_exc_erro;
      END;

      /** ------------------------------------------------------------- **
       ** Monitoracao Pagamentos - Antes de alterar verificar com David **
       ** ------------------------------------------------------------- **
       ** Envio de monitoracao sera enviado se for pagto via Internet,  **
       ** se nao for pagto via DDA, se nao for pagto proveniente de     **
       ** agendamento, se nao for boleto de cobranca registrada da      **
       ** cooperativa, se o valor individual ou total pago no dia pelo  **
       ** cooperado for maior que o limite estipulado para cooperativa  **
       ** atraves da tela PARMON no ayllos web.                         **
       ** exemplo: valor inicial monitoracao =   700,00                 **
       **          valor monitoracao IP      = 3.000,00                 **
       ** Será enviado email de monitoracao apenas quando:              **
       ** - Valor pago for maior ou igual a 3.000,00 independente do ip **
       ** - Valor pago for maior ou igual a 700,00 até 2.999,99 será    **
       ** verificado o IP anterior, caso seja diferente, envia email.   **
       ** ------------------------------------------------------------- **/
       IF vr_cdagenci = 90 AND pr_flgagend = 0 /*false*/ AND
          Nvl(vr_idanalise_fraude, 0) = 0 THEN
          BEGIN
            AFRA0004.pc_monitora_operacao (pr_cdcooper   => pr_cdcooper   -- Codigo da cooperativa
                                          ,pr_nrdconta   => pr_nrdconta   -- Numero da conta
                                          ,pr_idseqttl   => pr_idseqttl   -- Sequencial titular
                                          ,pr_vlrtotal   => pr_vlfatura   -- Valor fatura
                                          ,pr_flgagend   => pr_flgagend   -- Flag agendado /* 1-True, 0-False */ 
                                          ,pr_idorigem   => pr_idorigem   -- Indicador de origem
                                          ,pr_cdoperacao => 2             -- Codigo operacao (tbcc_dominio_campo-CDOPERAC_ANALISE_FRAUDE)
                                          ,pr_idanalis   => NULL          -- ID Analise Fraude
                                          ,pr_lgprowid   => NULL          -- Rowid craplgp
                                          ,pr_cdcritic   => vr_cdcritic   -- Codigo da critica
                                          ,pr_dscritic   => vr_dscritic); -- Descricao da critica

            IF nvl(vr_cdcritic,0) > 0 OR                                    
               TRIM(vr_dscritic) IS NOT NULL THEN
              RAISE vr_exc_erro;   
                    END IF;

          EXCEPTION
            WHEN vr_exc_erro THEN
                vr_nmarqlog := gene0001.fn_param_sistema(pr_nmsistem => 'CRED', pr_cdacesso => 'NOME_ARQ_LOG_MESSAGE');
                btch0001.pc_gera_log_batch(pr_cdcooper     => 3,
                                           pr_ind_tipo_log => 2, --> erro tratado
                                           pr_des_log      => to_char(SYSDATE,'DD/MM/RRRR hh24:mi:ss') ||
                                                              ' - '||vr_cdprogra ||' --> ' || 
                                                              vr_cdcritic||' -> '||vr_dscritic,
                                           pr_nmarqlog     => vr_nmarqlog);

           vr_cdcritic := NULL;                         
           vr_dscritic := NULL;                         
            WHEN OTHERS THEN
                vr_nmarqlog := gene0001.fn_param_sistema(pr_nmsistem => 'CRED', pr_cdacesso => 'NOME_ARQ_LOG_MESSAGE');
                btch0001.pc_gera_log_batch(pr_cdcooper     => 3,
                                           pr_ind_tipo_log => 2, --> erro tratado
                                           pr_des_log      => to_char(SYSDATE,'DD/MM/RRRR hh24:mi:ss') ||
                                                              ' - '||vr_cdprogra ||' --> ' || SQLERRM,
                                           pr_nmarqlog     => vr_nmarqlog);

                vr_cdcritic := NULL;                         
                vr_dscritic := NULL;                         
          END;

          IF vr_dscritic IS NOT NULL THEN
            vr_cdcritic:= 0;
            --Levantar Excecao
            RAISE vr_exc_erro;
          END IF;				

       END IF;  -- Nao possui Analise de Fraude 
	        -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		      GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_paga_convenio');



      
      /*
      #################################################
      NÃO COLOCAR MAIS NENHUM PROCESSAMENTO NO FIM DESTA PROCEDURE!!!
      Tudo o que for adicionado de novas chamadas de procedure, leitura de cursores, ou qualquer outro
      processo demorado deve ser adicionado antes de efetuar a somatória dos valores da CRAPLOT, para
      evitar locks nesta tabela.
      Favor procutar a linha com o comentário "[INÍCIO DO LOCK DA CRAPLOT]" e aplicar qualquer novo
      processamento antes desta linha.
      - 25/11/2016 - Dionathan Henchel
      #################################################
      */
      
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);      
    EXCEPTION
      -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415      
      -- Disparadores: paga0002.pc_InternetBank27              - Necessário Avaliar
      --               paga0001.pc_paga_convenio_prog          - Não grava TBGEN
      --               paga0001.pc_debita_agendto_pagto        - Não grava TBGEN
      --
      --               Eliminar a gravação do Log aqui quando acertar a paga0002.pc_InternetBank27 
      WHEN vr_exc_erro THEN
        pr_cdcritic:= vr_cdcritic;
        pr_dscritic:= vr_dscritic;
        --> Geração de log                             
        pc_controla_log_programa(  pr_cdcooper      => pr_cdcooper
                                  ,pr_dstiplog      => 'E' -- Tipo de Log - E = erro
                                  ,pr_tpocorrencia  => 1   -- 1-Erro de negocio
                                  ,pr_cdcriticidade => 1
                                  ,pr_cdmensagem    => vr_cdcritic   -- Codigo do Log
                                  ,pr_dsmensagem    => vr_dscritic ||-- Descrição do Log
                                                       vr_dsparame
                                 ); 
        --rollback do savepoint
        ROLLBACK TO TRANS_UNDO;
      WHEN OTHERS THEN
        -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
        CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
        -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        pr_cdcritic:= 9999;
        pr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic) ||
                      'PAGA0001.pc_paga_convenio' || 
                      '. ' || SQLERRM ||
                      '.'  || vr_dsparame;
        --> Geração de log                             
        pc_controla_log_programa( pr_cdcooper     => pr_cdcooper
                                 ,pr_dstiplog     => 'E' -- E = erro
                                 ,pr_tpocorrencia => 2   -- 1-Erro de negocio/ 2-Erro nao tratado
                                 ,pr_cdmensagem   => pr_cdcritic -- Codigo do Log
                                 ,pr_dsmensagem   => pr_dscritic -- Descrição do Log                                 
                                 );                            
        --rollback do savepoint
        ROLLBACK TO TRANS_UNDO;

    END;

  END pc_paga_convenio;

  /* Pagar os titulos */
  PROCEDURE pc_paga_titulo (pr_cdcooper IN crapcop.cdcooper%TYPE    --Codigo da cooperativa
                           ,pr_nrdconta IN crapttl.nrdconta%TYPE    --Numero da conta
                           ,pr_idseqttl IN crapttl.idseqttl%TYPE    --Sequencial titular
                           ,pr_lindigi1 IN NUMBER                   --Linha digitavel 1
                           ,pr_lindigi2 IN NUMBER                   --Linha digitavel 2
                           ,pr_lindigi3 IN NUMBER                   --Linha digitavel 3
                           ,pr_lindigi4 IN NUMBER                   --Linha digitavel 4
                           ,pr_lindigi5 IN NUMBER                   --Linha digitavel 5
                           ,pr_cdbarras IN VARCHAR2                 --Codigo de Barras
                           ,pr_dscedent IN VARCHAR2                 --Descricao do Cedente
                           ,pr_vllanmto IN NUMBER                   --Valor Lancamento
                           ,pr_vlfatura IN NUMBER                   --Valor fatura
                           ,pr_nrctacob IN INTEGER                  --Numero Conta Cobranca
                           ,pr_insittit IN INTEGER                  --Indicador Situacao Titulo
                           ,pr_intitcop IN INTEGER                  --Indicador Titulo Cooperativa
                           ,pr_nrcnvcob IN NUMBER                   --Numero Convenio Cobranca
                           ,pr_nrboleto IN OUT NUMBER               --Numero Boleto
                           ,pr_nrdctabb IN INTEGER                  --Numero conta
                           ,pr_idtitdda IN NUMBER                   --Indicador titulo DDA
                           ,pr_flgagend INTEGER /*1-True,0-False*/  --Flag agendado
                           ,pr_idorigem IN INTEGER                  --Indicador de origem
                           ,pr_cdcoptfn IN INTEGER                  --Codigo cooperativa transacao
                           ,pr_cdagetfn IN INTEGER                  --Codigo Agencia transacao
                           ,pr_nrterfin IN INTEGER                  --Numero terminal financeiro
                           /* parametro de cobranca registrada */
                           ,pr_vlrjuros IN NUMBER                   --Valor Juros
                           ,pr_vlrmulta IN NUMBER                   --Valor Multa
                           ,pr_vldescto IN NUMBER                   --Valor desconto
                           ,pr_vlabatim IN NUMBER                   --Valor Abatimento
                           ,pr_vloutdeb IN NUMBER                   --Valor saida debito
                           ,pr_vloutcre IN NUMBER                   --Valor saida credito
                           ,pr_nrcpfope IN NUMBER                   --Numero cpf operador
                           ,pr_tpcptdoc IN craptit.tpcptdoc%TYPE DEFAULT 1 --> Tipo de captura do documento (1=Leitora, 2=Linha digitavel).
                           ,pr_cdctrlcs IN tbcobran_consulta_titulo.cdctrlcs%TYPE DEFAULT NULL --> Numero de controle da consulta no NPC
                           ,pr_flmobile IN INTEGER DEFAULT 0        --Indicador Mobile
                           ,pr_iptransa IN VARCHAR2 DEFAULT NULL    -- Ip da transação
                           ,pr_iddispos IN VARCHAR2 DEFAULT NULL    -- 
                           ,pr_dstransa OUT VARCHAR2                --Descricao transacao
                           ,pr_dsprotoc OUT VARCHAR2                --Descricao Protocolo
                           ,pr_cdbcoctl OUT VARCHAR2                --Codigo Banco Centralizador
                           ,pr_cdagectl OUT VARCHAR2                --Codigo Agencia Centralizadora
                           /* parametros de erro */
                           ,pr_cdcritic OUT INTEGER   --C-odigo da critica
                           ,pr_dscritic OUT VARCHAR2) IS --Descricao critica
    -- ..........................................................................
    --
    --  Programa : pc_paga_titulo        Antiga: B1wgen0016.p/paga_titulo
    --  Sistema  : Rotinas Internet
    --  Sigla    : AGEN
    --  Autor    : Alisson C. Berrido - AMcom
    --  Data     : Junho/2013.                   Ultima atualizacao: 03/09/2018
    --
    --  Dados referentes ao programa:
    --
    --   Frequencia: Sempre que for chamado
    --   Objetivo  : Pagar titulos
    --
    --   Atualização: Ajustes para retornar do insert da craplot as informações necessarias para o
    --                insert na craplcm (odirlei e Daniel)
    --
    --                13/01/2015 - Remover validação que verifica se eh cobranca
    --                             registrada da cooperativa (Douglas - Chamado 228302)
    --
    --                13/02/2015 - Adicionado nome do operador da conta que agendou o pagamento
    --                             quando houver. (Jorge/Elton) - SD 238239
    --
    --                07/05/2015 - Alterado tipo do prm pr_flgagend para integer para
    --                             poder usar a chamada no progress SD280901 (Odirlei-AMcom)
    --
    --                24/06/2015 - Ajustado a forma de formatar o valor enviado para o e-mail
    --                             de monitoração conforme problema relatado no SD 300467.
    --                             (Kelvin)
    --
    --                23/07/2015 - Ajustado o corpo do email enviado para a monitoração para
    --                             não ocorrer estouro de variavel SD311634 (Odirlei-Amcom)
    --
    --                27/07/2015 - Criado rotina pc_insere_lote para controlar a criação do lote
    --                             e tentar diminuir o tempo de lock da tabela SD312759 (Odirlei-AMcom)
    --
    --                28/07/2015 - Criado procedimento para criar/atualizar lote, controlando se o mesmo esta em lock
    --                             para diminuir lock do banco e tempo de lock SD312759 (Odirlei-Amcom)
    --
    --                30/07/2015 - Alterado para fazer o atualização do lote qnd for agencia = 90 Internet
    --                             que não foram feitos na cxon0014, diminuindo tempo de lock da tabela (Odirlei-Amcom)
    --
    --                13/08/2015 - Ajustar a pesquisa dos últimos três IP's utilizados para acessar o Internet bank
    --                             (Douglas - Chamado 313242)
    --
    --                14/08/2015 - inclusão do parametro pr_tpcptdoc, para identificacao do tipo de captura
    --                            (leitora ou manual(linha digitavel)) (Odirlei-AMcom)
    --
    --                   28/10/2015 - Alterado tamanha da variavel vr_dspagtos de 2500
    --                                para 4000. (Jorge/Elton) SD - 351514
    --
	--                05/02/2016 - Ajuste para efetuar a atualizaçao do titulo DDA somente no final da rotina,
    --                             pois existem casos que é ocorre um erro e é efetuado rollback contudo, a situação do titulo 
    --                             já foi atulizada e enviado a JDDA.
    --                            (Adriano - SD 394710)
    --
    --                28/09/2016 - Incluir ROLLBACK TO undopoint na saida de critica da pc_insere_lote
    --                             (Lucas Ranghetti #511679)                      
    --
    --                15/12/2017 - Incluido nome do módulo logado
    --                             No caso de erro de programa gravar tabela especifica de log                     
    --                             Ajuste mensagem de erro 
    --                             (Belli - Envolti - Chamado 779415)
    --    
    --                23/03/2018 - Incluido validações de valores negativos ou zerados de pagamento (Tiago/Jean INC0010838)                    
    --
    --                28/08/2018 - Incluido monitoração para pagementos DDA tambem com as mesmas reagras dos titulos (Tiago RITM0025395)
    --
    --                03/09/2018 - Correção para remover lote (Jonata - Mouts).
    -- ..........................................................................

  BEGIN
    DECLARE
      --Cursores Locais

      --Selecionar dados dos lancamentos
      CURSOR cr_craplcm IS
        SELECT craplcm.ROWID
        FROM craplcm;
      rw_craplcm cr_craplcm%ROWTYPE;

      --Selecionar informacoes dos titulares da conta
      CURSOR cr_crapttl (pr_cdcooper IN crapttl.cdcooper%TYPE
                        ,pr_nrdconta IN crapttl.nrdconta%TYPE
                        ,pr_idseqttl IN crapttl.idseqttl%type) IS
        SELECT crapttl.cdcooper
              ,crapttl.nrdconta
              ,crapttl.cdempres
              ,crapttl.cdturnos
              ,crapttl.nmextttl
              ,crapttl.idseqttl
        FROM crapttl crapttl
        WHERE crapttl.cdcooper = pr_cdcooper
        AND   crapttl.nrdconta = pr_nrdconta
        AND   (
              (trim(pr_idseqttl) IS NOT NULL AND crapttl.idseqttl = pr_idseqttl) OR
              (trim(pr_idseqttl) IS NULL)
              );
      rw_crapttl cr_crapttl%ROWTYPE;

      rw_crapavt cr_crapavt%ROWTYPE;

      -- Verificar cadasto de senhas
      CURSOR cr_crapsnh2 (pr_cdcooper crapass.cdcooper%TYPE,
                          pr_nrdconta crapass.nrdconta%TYPE,
                          pr_nrcpfcgc crapttl.nrcpfcgc%TYPE) IS
        SELECT crapsnh.cdcooper
              ,crapsnh.nrdconta
              ,crapsnh.idseqttl
          FROM crapsnh
         WHERE crapsnh.cdcooper = pr_cdcooper
           AND crapsnh.nrdconta = pr_nrdconta
           AND crapsnh.tpdsenha = 1
           AND crapsnh.nrcpfcgc = pr_nrcpfcgc;

      rw_crapsnh2 cr_crapsnh2%ROWTYPE;

      CURSOR cr_crappod(pr_cdcooper crapass.cdcooper%TYPE,
                        pr_nrdconta crapass.nrdconta%TYPE)IS
        SELECT pod.cdcooper
              ,pod.nrdconta
              ,pod.nrcpfpro
          FROM crappod pod
         WHERE pod.cdcooper = pr_cdcooper
           AND pod.nrdconta = pr_nrdconta
           AND pod.cddpoder = 10
           AND pod.flgconju = 1;

      rw_crappod cr_crappod%ROWTYPE;

      -- buscar as informacoes do boleto 
      CURSOR cr_npc(pr_cdctrlcs IN tbcobran_consulta_titulo.cdctrlcs%TYPE) IS
       SELECT npc.dsxml 
             ,npc.flgcontingencia 
         FROM tbcobran_consulta_titulo npc
        WHERE npc.cdctrlcs = pr_cdctrlcs;
      rw_npc cr_npc%ROWTYPE;

      -- buscar as informacoes do boleto 085
      CURSOR cr_cob(pr_cdcooper IN crapcob.cdcooper%TYPE,
                    pr_nrdconta IN crapcob.nrdconta%TYPE,
                    pr_nrcnvcob IN crapcob.nrcnvcob%TYPE,
                    pr_nrdocmto IN crapcob.nrdocmto%TYPE) IS
        SELECT cob.vltitulo,
               cob.dtvencto,
               sab.nmdsacad,
               sab.nrinssac,
               sab.cdtpinsc,
               ass.nrcpfcgc,
               ass.inpessoa,
               decode(ass.inpessoa,1,ass.nmprimtl,jur.nmfansia) dsbenefic               
          FROM crapsab sab,
               crapcob cob,
               crapcco cco,
               crapass ass,
               crapjur jur
         WHERE cob.cdcooper = pr_cdcooper
           AND cob.nrdconta = pr_nrdconta
           AND cob.nrcnvcob = pr_nrcnvcob
           AND cob.nrdocmto = pr_nrdocmto
           AND cco.cdcooper = cob.cdcooper
           AND cco.nrconven = cob.nrcnvcob
           AND cob.nrdctabb = cco.nrdctabb
           AND cob.cdbandoc = cco.cddbanco
           AND sab.cdcooper = cob.cdcooper
           AND sab.nrdconta = cob.nrdconta
           AND sab.nrinssac = cob.nrinssac
           AND ass.cdcooper = cob.cdcooper
           AND ass.nrdconta = cob.nrdconta
           AND jur.cdcooper (+) = ass.cdcooper
           AND jur.nrdconta (+) = ass.nrdconta;
      rw_cob cr_cob%ROWTYPE;                                                           

      --Variaveis Locais
      vr_cdhistor INTEGER;
      vr_cdhisdeb INTEGER;
      vr_sequenci INTEGER;
      vr_cdbccxlt INTEGER;
      vr_nrcnvbol INTEGER;
      vr_nrctabol INTEGER;
      vr_nrboleto INTEGER;
      vr_cdagenci INTEGER;
      vr_cdtippro INTEGER;
      vr_cdsittit INTEGER;
      vr_flgpagto BOOLEAN;
      vr_flgpgdda BOOLEAN;
      vr_nrdocmto NUMBER;
      vr_nrcpfpre NUMBER;
      vr_dslitera VARCHAR2(32000);
      vr_lindigit VARCHAR2(1000);
      vr_dsinfor1 VARCHAR2(1000);
      vr_dsinfor2 VARCHAR2(1000);
      vr_dsinfor3 VARCHAR2(1000);
      vr_nmextttl VARCHAR2(1000);
      vr_nmprepos VARCHAR2(1000);
      vr_cdpesqbb VARCHAR2(1000);
      vr_nrseqdig craplcm.nrseqdig%TYPE :=0;
      vr_nrautdoc craplcm.nrautdoc%TYPE;
      vr_nrdrecid ROWID;
      vr_rowidcob ROWID;
      vr_indpagto INTEGER;
      vr_nmdatela VARCHAR2(100);
      vr_tbtitulo npcb0001.typ_reg_TituloCIP;

      --Variaveis de Erro
      vr_des_erro VARCHAR2(4000);
      vr_cdcritic crapcri.cdcritic%TYPE;
      vr_dscritic VARCHAR2(4000);
      --Registro de dados de associado
      rw_cra2ass cr_crapass%ROWTYPE;
      rw_crapass_prot cr_crapass%ROWTYPE;
	  
	  vr_vllantot NUMBER;

      vr_dscedent VARCHAR2(200);
      vr_idorigem INTEGER;
      vr_idanalise_fraude   INTEGER;    
			vr_cdoperacao INTEGER;

      --Variaveis de Excecao
      vr_exc_erro EXCEPTION;

      --Agrupa os parametros - 15/12/2017 - Chamado 779415 
      vr_dsparame VARCHAR2(4000);

      --log
      vr_nmarqlog VARCHAR2(500);
      vr_cdprogra VARCHAR2(50) := 'PAGA0001.PC_PAGA_TITULO';

      -- Procedimento para inserir o lote e não deixar tabela lockada
      PROCEDURE pc_insere_lote (pr_cdcooper IN craplot.cdcooper%TYPE,
                                pr_dtmvtolt IN craplot.dtmvtolt%TYPE,
                                pr_cdagenci IN craplot.cdagenci%TYPE,
                                pr_cdbccxlt IN craplot.cdbccxlt%TYPE,
                                pr_nrdolote IN craplot.nrdolote%TYPE,
                                pr_cdoperad IN craplot.cdoperad%TYPE,
                                pr_nrdcaixa IN craplot.nrdcaixa%TYPE,
                                pr_tplotmov IN craplot.tplotmov%TYPE,
                                pr_cdhistor IN craplot.cdhistor%TYPE,
                                pr_craplot  OUT cr_craplot%ROWTYPE,
                                pr_dscritic OUT VARCHAR2)IS

        -- Pragma - abre nova sessao para tratar a atualizacao
        PRAGMA AUTONOMOUS_TRANSACTION;
        -- criar rowtype controle
        rw_craplot_ctl cr_craplot%ROWTYPE;

      BEGIN
        -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
        GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_insere_lote - C');

        /* Tratamento para buscar registro de lote se o mesmo estiver em lock, tenta por 10 seg. */
        FOR i IN 1..100 LOOP
          BEGIN
            -- Leitura do lote
            OPEN cr_craplot (pr_cdcooper  => pr_cdcooper,
                             pr_dtmvtolt  => pr_dtmvtolt,
                             pr_cdagenci  => pr_cdagenci,
                             pr_cdbccxlt  => pr_cdbccxlt,
                             pr_nrdolote  => pr_nrdolote);
            FETCH cr_craplot INTO rw_craplot_ctl;
            pr_dscritic := NULL;
            EXIT;
          EXCEPTION
            WHEN OTHERS THEN
               IF cr_craplot%ISOPEN THEN
                 CLOSE cr_craplot;
               END IF;

               -- setar critica caso for o ultimo
               IF i = 100 THEN
                 pr_dscritic:= pr_dscritic||'Registro de lote '||pr_nrdolote||' em uso. Tente novamente.';
               END IF;
               -- aguardar 0,5 seg. antes de tentar novamente
               sys.dbms_lock.sleep(0.1);
          END;
        END LOOP;

        -- se encontrou erro ao buscar lote, abortar programa
        IF pr_dscritic IS NOT NULL THEN
          ROLLBACK;
          RETURN;
        END IF;

        IF cr_craplot%NOTFOUND THEN
          BEGIN
          -- criar registros de lote na tabela
          INSERT INTO craplot
                  (craplot.cdcooper
                  ,craplot.dtmvtolt
                  ,craplot.cdagenci
                  ,craplot.cdbccxlt
                  ,craplot.nrdolote
                  ,craplot.tplotmov
                  ,craplot.cdoperad
                  ,craplot.cdhistor
                  ,craplot.nrdcaixa
                  ,craplot.cdopecxa)
          VALUES  (pr_cdcooper
                  ,pr_dtmvtolt
                  ,pr_cdagenci
                  ,pr_cdbccxlt
                  ,pr_nrdolote
                  ,pr_tplotmov
                  ,pr_cdoperad
                  ,pr_cdhistor
                  ,pr_nrdcaixa
                  ,pr_cdoperad)
             RETURNING  craplot.ROWID
                       ,craplot.nrdolote
                       ,craplot.cdbccxlt
                       ,craplot.tplotmov
                       ,craplot.dtmvtolt
                       ,craplot.cdagenci
                       ,craplot.cdhistor
                       ,craplot.cdoperad
                       ,craplot.qtcompln
                       ,craplot.qtinfoln
                       ,craplot.vlcompcr
                       ,craplot.vlinfocr
                   INTO rw_craplot_ctl.ROWID
                      , rw_craplot_ctl.nrdolote
                      , rw_craplot_ctl.cdbccxlt
                      , rw_craplot_ctl.tplotmov
                      , rw_craplot_ctl.dtmvtolt
                      , rw_craplot_ctl.cdagenci
                      , rw_craplot_ctl.cdhistor
                      , rw_craplot_ctl.cdoperad
                      , rw_craplot_ctl.qtcompln
                      , rw_craplot_ctl.qtinfoln
                      , rw_craplot_ctl.vlcompcr
                      , rw_craplot_ctl.vlinfocr;
          EXCEPTION
            WHEN OTHERS THEN
              -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
              CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
              -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
              pr_cdcritic := 1034;
              pr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic) ||
                             'CRAPLOT(12):'  ||
                             ' cdcooper:'     || pr_cdcooper ||
                             ', dtmvtolt:'    || pr_dtmvtolt || 
                             ', cdagenci:'    || pr_cdagenci || 
                             ', cdbccxlt:'    || pr_cdbccxlt ||
                             ', nrdolote:'    || pr_nrdolote ||
                             ', nrseqdig:'    || '1'         ||
                             ', tplotmov:'    || pr_tplotmov ||
                             ', cdoperad:'    || pr_cdoperad || 
                             ', cdhistor:'    || pr_cdhistor || 
                             ', nrdcaixa:'    || pr_nrdcaixa ||
                             ', cdopecxa:'    || pr_cdoperad ||
                             '. ' || sqlerrm; 
              RAISE vr_exc_erro;
          END;		  
         		  

        END IF;

        CLOSE cr_craplot;

        -- retornar informações para o programa chamador
        pr_craplot := rw_craplot_ctl;

        COMMIT;
      EXCEPTION
        WHEN vr_exc_erro THEN
          IF cr_craplot%ISOPEN THEN
            CLOSE cr_craplot;
          END IF;            
          ROLLBACK;
        WHEN OTHERS THEN
          -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
          CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
          IF cr_craplot%ISOPEN THEN
            CLOSE cr_craplot;
          END IF;
          -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
          vr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => 9999)  ||
                    'PAGA0001.pc_insere_lote. ' || SQLERRM ||
                    '. pr_cdcooper:' || pr_cdcooper || 
                    ', pr_dtmvtolt:' || pr_dtmvtolt ||
                    ', pr_cdagenci:' || pr_cdagenci ||
                    ', pr_cdbccxlt:' || pr_cdbccxlt ||
                    ', pr_nrdolote:' || pr_nrdolote ||
                    ', pr_cdoperad:' || pr_cdoperad ||
                    ', pr_nrdcaixa:' || pr_nrdcaixa ||
                    ', pr_tplotmov:' || pr_tplotmov ||
                    ', pr_cdhistor:' || pr_cdhistor;
          ROLLBACK;
      END pc_insere_lote;

    BEGIN
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_paga_titulo');
      
      --Inicializar variaveis
      pr_cdcritic:= NULL;
      pr_dscritic:= NULL;
      
      --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
      vr_dsparame :=  ' pr_cdcooper:'  || pr_cdcooper ||
                      ', pr_nrdconta:' || pr_nrdconta ||
                      ', pr_idseqttl:' || pr_idseqttl ||
                      ', pr_lindigi1:' || pr_lindigi1 ||
                      ', pr_lindigi2:' || pr_lindigi2 ||
                      ', pr_lindigi3:' || pr_lindigi3 ||
                      ', pr_lindigi4:' || pr_lindigi4 ||
                      ', pr_lindigi5:' || pr_lindigi5 ||
                      ', pr_cdbarras:' || pr_cdbarras ||
                      ', pr_dscedent:' || pr_dscedent ||
                      ', pr_vllanmto:' || pr_vllanmto ||
                      ', pr_vlfatura:' || pr_vlfatura ||
                      ', pr_nrctacob:' || pr_nrctacob ||
                      ', pr_insittit:' || pr_insittit ||
                      ', pr_intitcop:' || pr_intitcop ||
                      ', pr_nrcnvcob:' || pr_nrcnvcob ||
                      ', pr_nrboleto:' || pr_nrboleto ||
                      ', pr_nrdctabb:' || pr_nrdctabb ||
                      ', pr_idtitdda:' || pr_idtitdda ||
                      ', pr_flgagend:' || pr_flgagend ||
                      ', pr_idorigem:' || pr_idorigem ||
                      ', pr_cdcoptfn:' || pr_cdcoptfn ||
                      ', pr_cdagetfn:' || pr_cdagetfn ||
                      ', pr_nrterfin:' || pr_nrterfin ||
                      ', pr_vlrjuros:' || pr_vlrjuros ||
                      ', pr_vlrmulta:' || pr_vlrmulta ||
                      ', pr_vldescto:' || pr_vldescto ||
                      ', pr_vlabatim:' || pr_vlabatim ||
                      ', pr_vloutdeb:' || pr_vloutdeb ||
                      ', pr_vloutcre:' || pr_vloutcre ||
                      ', pr_nrcpfope:' || pr_nrcpfope ||
                      ', pr_tpcptdoc:' || pr_tpcptdoc ||
                      ', pr_cdctrlcs:' || pr_cdctrlcs;
      
      /* tratamento para TAA */
      IF  pr_idorigem = 4  THEN
        --Agencia
        vr_cdagenci:= 91;
        --Historico Debito
        vr_cdhisdeb:= 856;
      ELSE
        --Agencia
        vr_cdagenci:= 90;
        --Historico Debito
        vr_cdhisdeb:= 508;
      END IF;
      
      IF NVL(pr_vllanmto,0) <= 0 THEN
        vr_cdcritic := 0;
        vr_dscritic := 'Valor negativo ou zero não permitido.';
        RAISE vr_exc_erro;        
      END IF;
      
      /* Data do sistema */
      -- Verifica se a data esta cadastrada
      OPEN BTCH0001.cr_crapdat(pr_cdcooper => pr_cdcooper);
      FETCH BTCH0001.cr_crapdat INTO rw_crapdat;
      -- Se não encontrar
      IF BTCH0001.cr_crapdat%NOTFOUND THEN
        -- Fechar o cursor pois haverá raise
        CLOSE BTCH0001.cr_crapdat;
        --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
        -- Montar mensagem de critica
        vr_cdcritic := 1;
        vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        RAISE vr_exc_erro;
      ELSE
        -- Apenas fechar o cursor
        CLOSE BTCH0001.cr_crapdat;
      END IF;
      --Descricao da Transacao
      pr_dstransa:= 'Pagamento de titulo';

      --Selecionar a cooperativa
      OPEN cr_crapcop (pr_cdcooper => pr_cdcooper);
      FETCH cr_crapcop INTO rw_crapcop;
      --Se nao encontrou
      IF cr_crapcop%NOTFOUND THEN
        --Fechar Cursor
        CLOSE cr_crapcop;
        --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        --Mensagem Erro
        vr_cdcritic := 1070; --Cooperativa nao cadastrada
        vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
      --Fechar Cursor
      CLOSE cr_crapcop;
      --Selecionar informacoes do associado
      OPEN cr_crapass(pr_cdcooper => pr_cdcooper
                     ,pr_nrdconta => pr_nrdconta);
      --Posicionar no primeiro registro
      FETCH cr_crapass INTO rw_crapass_prot;
      --Se nao encontrou
      IF cr_crapass%NOTFOUND THEN
        --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        --Mensagem Erro
        vr_cdcritic := 9; --Associado nao cadastrado
        vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
      --Fechar Cursor
      CLOSE cr_crapass;
      --Retornar Banco e Agencia centralizadores
      pr_cdbcoctl:= gene0002.fn_mask(rw_crapcop.cdbcoctl,'999');
      pr_cdagectl:= gene0002.fn_mask(rw_crapcop.cdagectl,'9999');

      --Verificar DDA
      vr_flgpgdda:= pr_idtitdda > 0;

      -- Save point
      SAVEPOINT undopoint;

	  IF vr_flgpgdda THEN
		vr_cdoperacao := 8; -- DDA
	  ELSE
		vr_cdoperacao := 1; -- Título
	  END IF;

      --> Para Titulos de origens InternetBank e Mobile,
      --> Deve ser gerado o registro de analise de fraude antes de
      --> realizar a operacao
      IF pr_idorigem = 3 AND nvl(pr_flgagend,0) = 0 THEN
        
        IF pr_flmobile = 1 THEN
          vr_idorigem := 10; --> MOBILE
        ELSE
          vr_idorigem := 3; --> InternetBank
        END IF;
       
        vr_idanalise_fraude := NULL;
        --> Rotina para Inclusao do registro de analise de fraude
        AFRA0001.pc_Criar_Analise_Antifraude(pr_cdcooper    => pr_cdcooper
                                            ,pr_cdagenci    => vr_cdagenci
                                            ,pr_nrdconta    => pr_nrdconta
                                            ,pr_cdcanal     => vr_idorigem 
                                            ,pr_iptransacao => pr_iptransa
                                            ,pr_dtmvtolt    => rw_crapdat.dtmvtocd
                                            ,pr_cdproduto   => 44
                                            ,pr_cdoperacao  => vr_cdoperacao
                                            ,pr_iddispositivo => pr_iddispos 
                                            ,pr_dstransacao => pr_dstransa
                                            ,pr_tptransacao => 1 --> online 2-Agendamento
                                            ,pr_idanalise_fraude => vr_idanalise_fraude
                                            ,pr_dscritic   => vr_dscritic);
        vr_dscritic := NULL;
      END IF;

      --Gerar titulos iptu
      CXON0014.pc_gera_titulos_iptu (pr_cooper          => rw_crapcop.cdcooper --Codigo Cooperativa
                                    ,pr_nrdconta        => pr_nrdconta         --Numero da Conta
                                    ,pr_idseqttl        => pr_idseqttl         --Sequencial do titular
                                    ,pr_cod_operador    => '996'               --Codigo do operador
                                    ,pr_cod_agencia     => vr_cdagenci         --Codigo da Agencia
                                    ,pr_nro_caixa       => 900                 --Numero do Caixa
                                    ,pr_nrinsced        => 0                   -- CPF/CNPJ do Cedente
                                    ,pr_idtitdda        => pr_idtitdda         -- identificador titulo DDA
                                    ,pr_nrinssac        => rw_crapass_prot.nrcpfcgc -- CPF/CNPJ do Sacado
                                    ,pr_fatura4         => 0                   -- Fatura
                                    ,pr_titulo1         => pr_lindigi1         -- FORMAT "99999,99999"
                                    ,pr_titulo2         => pr_lindigi2         -- FORMAT "99999,999999"
                                    ,pr_titulo3         => pr_lindigi3         -- FORMAT "99999,999999"
                                    ,pr_titulo4         => pr_lindigi4         -- FORMAT "9"
                                    ,pr_titulo5         => pr_lindigi5         -- FORMAT "zz,zzz,zzz,zzz999"
                                    ,pr_iptu            => FALSE               --IPTU
                                    ,pr_flgpgdda        => vr_flgpgdda         --Indicador pagto DDA
                                    ,pr_codigo_barras   => pr_cdbarras         --Codigo de Barras
                                    ,pr_valor_informado => pr_vllanmto         --Valor informado
                                    ,pr_vlfatura        => pr_vlfatura         --Valor da Fatura
                                    ,pr_nrdconta_cob    => pr_nrctacob         --Numero Conta Cobranca
                                    ,pr_insittit        => pr_insittit         --Situacao Titulo
                                    ,pr_intitcop        => pr_intitcop         --Titulo da Cooperativa
                                    ,pr_convenio        => pr_nrcnvcob         --Numero Convenio
                                    ,pr_bloqueto        => pr_nrboleto         --Numero Bloqueto
                                    ,pr_contaconve      => pr_nrdctabb         --Numero Conta Convenio
                                    ,pr_cdcoptfn        => pr_cdcoptfn         --Codigo Cooperativa transferencia
                                    ,pr_cdagetfn        => pr_cdagetfn         --Codigo Agencia Transferencia
                                    ,pr_nrterfin        => pr_nrterfin         --Numero terminal Financeiro
                                    ,pr_flgpgchq        => FALSE                --Flag pagamento cheque
                                    ,pr_vlrjuros        => pr_vlrjuros         --Valor dos Juros
                                    ,pr_vlrmulta        => pr_vlrmulta         --Valor da Multa
                                    ,pr_vldescto        => pr_vldescto         --Valor do Desconto
                                    ,pr_vlabatim        => pr_vlabatim         --Valor do Abatimento
                                    ,pr_vloutdeb        => pr_vloutdeb         --Valor Saida Debitado
                                    ,pr_vloutcre        => pr_vloutcre         --Valor Saida Creditado
                                    ,pr_tpcptdoc        => pr_tpcptdoc         --Tipo de captura do documento (1=Leitora, 2=Linha digitavel).
                                    ,pr_cdctrlcs        => pr_cdctrlcs         --> Numero de controle da consulta no NPC
                                    ,pr_tppagmto        => 0         	         --> tipo pagamento
                                    ,pr_idanafrd        => vr_idanalise_fraude -- Identificador de analise de fraude
                                    ,pr_rowidcob        => vr_rowidcob         --ROWID da cobranca
                                    ,pr_indpagto        => vr_indpagto         --Indicador Pagamento
                                    ,pr_nrcnvbol        => vr_nrcnvbol         --Numero Convenio Boleto
                                    ,pr_nrctabol        => vr_nrctabol         --Numero Conta Boleto
                                    ,pr_nrboleto        => vr_nrboleto         --Numero do Boleto
                                    ,pr_histor          => vr_cdhistor         --Historico
                                    ,pr_pg              => vr_flgpagto         --Indicador Pago
                                    ,pr_docto           => vr_nrdocmto         --Numero documento
                                    ,pr_literal         => vr_dslitera         --Descricao Literal
                                    ,pr_ult_sequencia   => vr_sequenci         --Ultima Sequencia
                                    ,pr_cdcritic        => vr_cdcritic         --Codigo do erro
                                    ,pr_dscritic        => vr_dscritic);       --Descricao do erro
      --Se ocorreu erro
      IF nvl(vr_cdcritic,0) <> 0 OR TRIM(vr_dscritic) IS NOT NULL THEN
        --Selecionar erro
        OPEN cr_craperr (pr_cdcooper => pr_cdcooper
                        ,pr_cdagenci => vr_cdagenci
                        ,pr_nrdcaixa => To_Number(pr_nrdconta||pr_idseqttl));
        --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        --Posicionar no primeiro registro
        FETCH cr_craperr INTO rw_craperr;
        --Se Encontrou
        IF cr_craperr%FOUND THEN
          
          IF nvl(rw_craperr.cdcritic,0) <> nvl(vr_cdcritic,0) THEN
            --> Geração de log                             
            pc_controla_log_programa( pr_cdcooper     => pr_cdcooper
                                     ,pr_dstiplog     => 'E' -- E = erro
                                     ,pr_tpocorrencia => 2   -- 1-Erro de negocio/ 2-Erro nao tratado
                                     ,pr_cdmensagem   => nvl(vr_cdcritic,0) -- Codigo do Log
                                     ,pr_dsmensagem   => vr_dscritic        -- Desc Log
                                     );   
          END IF;
          IF nvl(rw_craperr.cdcritic,0) = 0 THEN         
            vr_cdcritic:= 1118; --Erro no pagamento do titulo descricao encontrada em craperr
          ELSE      
            vr_cdcritic:= nvl(rw_craperr.cdcritic,0); 
          END IF;
          vr_dscritic:= rw_craperr.dscritic;
          
        ELSE
          --> Geração de log                             
          pc_controla_log_programa( pr_cdcooper     => pr_cdcooper
                                   ,pr_dstiplog     => 'E' -- E = erro
                                   ,pr_tpocorrencia => 2   -- 1-Erro de negocio/ 2-Erro nao tratado
                                   ,pr_cdmensagem   => nvl(vr_cdcritic,0) -- Codigo do Log
                                   ,pr_dsmensagem   => gene0001.fn_busca_critica
                                                       (nvl(vr_cdcritic,0), vr_dscritic) -- Desc Log
                                   );       
          vr_cdcritic:= 1119; --Erro no pagamento do titulo
          vr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        END IF;
        -- Rollback da transação
        ROLLBACK TO undopoint;

        --Fechar Cursor
        CLOSE cr_craperr;
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_paga_titulo');

      /* Pega autenticacao gerada no pagamento para adicionar o protocolo */
      OPEN cr_crapaut_sequen (pr_cdcooper => pr_cdcooper
                             ,pr_cdagenci => vr_cdagenci
                             ,pr_nrdcaixa => 900
                             ,pr_dtmvtolt => rw_crapdat.dtmvtocd
                             ,pr_nrsequen => vr_sequenci);
      --Posicionar no proximo registro
      FETCH cr_crapaut_sequen INTO rw_crapaut;
      --Se nao encontrar
      IF cr_crapaut_sequen%NOTFOUND THEN
        --Fechar Cursor
        CLOSE cr_crapaut_sequen;
        --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        --Mensagem erro
        vr_cdcritic:= 1086; --Registro da autenticacao nao encontrado
        vr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        -- Rollback da transação
        ROLLBACK TO undopoint;
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
      --Fechar Cursor
      CLOSE cr_crapaut_sequen;

      --Se for pessoal fisica
      IF rw_crapass_prot.inpessoa = 1 THEN
        /* Pega o nome do titular que fez o pagamento */
        OPEN cr_crapttl (pr_cdcooper => pr_cdcooper
                        ,pr_nrdconta => pr_nrdconta
                        ,pr_idseqttl => pr_idseqttl);
        --Posicionar no proximo registro
        FETCH cr_crapttl INTO rw_crapttl;
        --Se nao encontrar
        IF cr_crapttl%NOTFOUND THEN
          --Fechar Cursor
          CLOSE cr_crapttl;
          --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
          --Mensagem erro
          vr_cdcritic:= 1082; --Titular nao encontrado
          vr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
          -- Rollback da transação
          ROLLBACK TO undopoint;
          --Levantar Excecao
          RAISE vr_exc_erro;
        ELSE
          --Nome titular
          vr_nmextttl:= rw_crapttl.nmextttl;
        END IF;
        --Fechar Cursor
        CLOSE cr_crapttl;
      ELSE
        --Nome titular
        vr_nmextttl:= rw_crapass_prot.nmprimtl;
      END IF;

      /* Monta linha digitavel para armazenar no protocolo */
      vr_lindigit:= SUBSTR(gene0002.fn_mask(pr_lindigi1,'9999999999'),1,5)  || '.' ||
                    SUBSTR(gene0002.fn_mask(pr_lindigi1,'9999999999'),6,5)  || ' ' ||
                    SUBSTR(gene0002.fn_mask(pr_lindigi2,'99999999999'),1,5) || '.' ||
                    SUBSTR(gene0002.fn_mask(pr_lindigi2,'99999999999'),6,6) || ' ' ||
                    SUBSTR(gene0002.fn_mask(pr_lindigi3,'99999999999'),1,5) || '.' ||
                    SUBSTR(gene0002.fn_mask(pr_lindigi3,'99999999999'),6,6) || ' ' ||
                           gene0002.fn_mask(pr_lindigi4,'9')||' '||
                           gene0002.fn_mask(pr_lindigi5,'99999999999999');

      --Banco e Caixa
      vr_cdbccxlt:= TO_NUMBER(SUBSTR(gene0002.fn_mask(pr_lindigi1,'99999,99999'),1,3));

	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_paga_titulo');

      --Selecionar Banco
      OPEN cr_crapban (pr_cdbccxlt => vr_cdbccxlt);
      --Posicionar no proximo registro
      FETCH cr_crapban INTO rw_crapban;
      --Se nao encontrar
      IF cr_crapban%NOTFOUND THEN
        --Fechar Cursor
        CLOSE cr_crapban;
        --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        --Mensagem erro
        vr_cdcritic := 57; --Banco nao encontrado
        vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);		   
        -- Rollback da transação
        ROLLBACK TO undopoint;
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
      --Fechar Cursor
      CLOSE cr_crapban;

      vr_nrseqdig := fn_sequence('CRAPLOT'
                                ,'NRSEQDIG'
                                ,''||rw_crapaut.cdcooper||';'
                                   ||to_char(rw_crapaut.dtmvtolt,'DD/MM/RRRR')||';'
                                   ||rw_crapaut.cdagenci||';'
                                   ||11||';'
                                   ||11900); 

      /*[PROJETO LIGEIRINHO] Esta função retorna verdadeiro, quando o processo foi iniciado pela rotina:
       PAGA0001.pc_efetua_debitos_paralelo, que é chamada na rotina PC_CRPS509. Tem por finalidade definir
       se grava na tabela CRAPLOT no momento em que esta rodando a esta rotina OU somente no final da execucação
       da PC_CRPS509, para evitar o erro de lock da tabela, pois esta gravando a agencia 90,91 ou 1 ao inves de gravar
       a agencia do cooperado*/
      if not fn_exec_paralelo then 
      -- Procedimento para inserir o lote e não deixar tabela lockada
      pc_insere_lote (pr_cdcooper => rw_crapaut.cdcooper,
                      pr_dtmvtolt => rw_crapaut.dtmvtolt,
                      pr_cdagenci => rw_crapaut.cdagenci,
                      pr_cdbccxlt => 11,
                      pr_nrdolote => 11900,
                      pr_cdoperad => '996',
                      pr_nrdcaixa => rw_crapaut.nrdcaixa,
                      pr_tplotmov => 1,
                      pr_cdhistor => 0,
                      pr_craplot  => rw_craplot,
                      pr_dscritic => vr_dscritic);

      -- se encontrou erro ao buscar lote, abortar programa
      IF vr_dscritic IS NOT NULL THEN
        -- Rollback da transação
        ROLLBACK TO undopoint;
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;

      else
        pc_insere_lote_wrk(pr_cdcooper => rw_crapaut.cdcooper,
                           pr_dtmvtolt => rw_crapaut.dtmvtolt,
                           pr_cdagenci => rw_crapaut.cdagenci,
                           pr_cdbccxlt => 11,
                           pr_nrdolote => 11900,
                           pr_cdoperad => '996',
                           pr_nrdcaixa => rw_crapaut.nrdcaixa,
                           pr_tplotmov => 1,
                           pr_cdhistor => 0,
                           pr_cdbccxpg => null,
                           PR_NMROTINA => 'PC_PAGA_TITULO');
         
         rw_craplot.cdcooper := rw_crapaut.cdcooper;                   
         rw_craplot.dtmvtolt := rw_crapaut.dtmvtolt;                  
         rw_craplot.cdagenci := rw_crapaut.cdagenci; 
         rw_craplot.cdbccxlt := 11;                  
         rw_craplot.nrdolote := 11900;                   
         rw_craplot.cdoperad := '996';                   
         rw_craplot.tplotmov := 1;                   
         rw_craplot.cdhistor := 0;
         
      end if;
        
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_paga_titulo');

	  -- guardar valor para atualizar o lote
      vr_vllantot := nvl(rw_crapaut.vldocmto,0);

      /* Gera um protocolo para o pagamento */
      vr_dscedent := pr_dscedent;

      /* Campos gravados na crappro para visualizacao na internet */
      vr_dsinfor1:= 'Pagamento';
      vr_dsinfor2:= vr_nmextttl|| '#'||'Banco: ' ||rw_crapban.nmextbcc;
      vr_dsinfor3:= 'Codigo de Barras: '||LPAD(pr_cdbarras,44,'9')||'#Linha Digitavel: '||vr_lindigit;

      /* Se TAA ... */
      IF pr_idorigem = 4 THEN
        vr_dsinfor3:= vr_dsinfor3 ||'#TAA: '|| gene0002.fn_mask(pr_cdcoptfn,'9999')||
                                    '/'|| gene0002.fn_mask(pr_cdagetfn,'9999')||
                                    '/'|| gene0002.fn_mask(pr_nrterfin,'9999');
      ELSE
        vr_dsinfor3:= vr_dsinfor3 ||'#FILLER';                                    
      END IF;
      
      -- se titulo for da cooperativa      
      IF pr_intitcop = 1 THEN
        
        BEGIN
          OPEN cr_cob(pr_cdcooper => pr_cdcooper
                     ,pr_nrdconta => pr_nrctacob
                     ,pr_nrcnvcob => pr_nrcnvcob
                     ,pr_nrdocmto => pr_nrboleto);
          FETCH cr_cob INTO rw_cob;
          CLOSE cr_cob;
          
          IF pr_idorigem = 4 THEN
          vr_dscedent := rw_cob.dsbenefic;
          END IF;
          
          vr_dsinfor3:= vr_dsinfor3 || '#Pagador: '           || trim(rw_cob.nmdsacad)
                                    || '#CPF/CNPJ Pagador: '  || gene0002.fn_mask_cpf_cnpj(rw_cob.nrinssac,rw_cob.cdtpinsc)
                                    || '#Vencimento: '        || to_char(rw_cob.dtvencto,'DD/MM/RRRR') 
                                    || '#Valor Titulo: '      || to_char(rw_cob.vltitulo,'fm999g999g990d00') 
                                    || '#Encargos: '          || trim(to_char((nvl(pr_vlrjuros,0) + nvl(pr_vlrmulta,0)), 'fm999g999g990d00'))  
                                    || '#Descontos: '         || trim(to_char((nvl(pr_vldescto,0) + nvl(pr_vlabatim,0)), 'fm999g999g990d00'))
                                    || '#CPF/CNPJ Beneficiario: ' || gene0002.fn_mask_cpf_cnpj(rw_cob.nrcpfcgc,rw_cob.inpessoa );
          vr_des_erro := NULL;
          vr_dscritic := NULL;
          
        EXCEPTION 
          WHEN OTHERS THEN
            NULL;        
        END;
        
      -- se titulo for NPC/DDA
      ELSIF TRIM(pr_cdctrlcs) IS NOT NULL THEN
        BEGIN
          OPEN cr_npc(pr_cdctrlcs => pr_cdctrlcs);
          FETCH cr_npc INTO rw_npc;
          CLOSE cr_npc;
          
          --> Senao estiver em contigencia
          IF rw_npc.flgcontingencia = 0 THEN
          npcb0003.pc_xmlsoap_extrair_titulo(pr_dsxmltit => rw_npc.dsxml
                                           , pr_tbtitulo => vr_tbtitulo
                                           , pr_des_erro => vr_des_erro
                                           , pr_dscritic => vr_dscritic);
	          -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		        GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_paga_titulo');
                                           
          IF pr_idorigem = 4 THEN
          vr_dscedent := gene0007.fn_caract_acento(
                                       NVL(TRIM(vr_tbtitulo.NomFantsBenfcrioOr)   -- Nome Fantasia do Beneficiário Original
                                          ,TRIM(vr_tbtitulo.Nom_RzSocBenfcrioOr)));-- Razão Social do Beneficiário Original
          END IF;
          
          vr_dsinfor3:= vr_dsinfor3 || '#Pagador: '           || trim(vr_tbtitulo.Nom_RzSocPagdr) 
                                    || '#CPF/CNPJ Pagador: '  || gene0002.fn_mask_cpf_cnpj(vr_tbtitulo.CNPJ_CPFPagdr,(CASE vr_tbtitulo.TpPessoaPagdr 
                                                                                                                           WHEN 'F' THEN 1
                                                                                                                           WHEN 'J' THEN 2
                                                                                                                           ELSE 2
                                                                                                                       END) )
                                    || '#Vencimento: '        || to_char(vr_tbtitulo.DtVencTit,'DD/MM/RRRR') 
                                    || '#Valor Titulo: '      || to_char(vr_tbtitulo.VlrTit,'fm999g999g990d00') 
                                    || '#Encargos: '          || trim(to_char((nvl(vr_tbtitulo.TabCalcTit(1).VlrCalcdJuros,0) + nvl(vr_tbtitulo.TabCalcTit(1).VlrCalcdMulta,0)), 'fm999g999g990d00')) 
                                    || '#Descontos: '         || trim(to_char((nvl(vr_tbtitulo.TabCalcTit(1).VlrCalcdDesct,0) + nvl(vr_tbtitulo.TabCalcTit(1).VlrCalcdAbatt,0)), 'fm999g999g990d00'))
                                    || '#CPF/CNPJ Beneficiario: ' || gene0002.fn_mask_cpf_cnpj(vr_tbtitulo.CNPJ_CPFBenfcrioOr,(CASE vr_tbtitulo.TpPessoaBenfcrioOr 
                                                                                                                                   WHEN 'F' THEN 1
                                                                                                                                   WHEN 'J' THEN 2
                                                                                                                                   ELSE 2
                                                                                                                               END));
          ELSE
            vr_dsinfor3:= vr_dsinfor3 || '#Pagador: '            
                                      || '#CPF/CNPJ Pagador: '   
                                      || '#Vencimento: '         
                                      || '#Valor Titulo: '      || to_char(pr_vlfatura,'fm999g999g990d00') 
                                      || '#Encargos: '          || trim(to_char((nvl(pr_vlrjuros,0) + nvl(pr_vlrmulta,0)), 'fm999g999g990d00'))  
                                      || '#Descontos: '         || trim(to_char((nvl(pr_vldescto,0) + nvl(pr_vlabatim,0)), 'fm999g999g990d00'))
                                      || '#CPF/CNPJ Beneficiario: ' ;   
          
          
          END IF;                                                                                                                   
          vr_des_erro := NULL;
          vr_dscritic := NULL;
	        -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		      GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_paga_titulo');
        EXCEPTION 
          WHEN OTHERS THEN
	          -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		        GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_paga_titulo');
        END;
      ELSE
        vr_dsinfor3:= vr_dsinfor3 || '#Pagador: '            
                                  || '#CPF/CNPJ Pagador: '   
                                  || '#Vencimento: '         
                                  || '#Valor Titulo: '      || to_char(pr_vlfatura,'fm999g999g990d00') 
                                  || '#Encargos: '          || trim(to_char((nvl(pr_vlrjuros,0) + nvl(pr_vlrmulta,0)), 'fm999g999g990d00'))  
                                  || '#Descontos: '         || trim(to_char((nvl(pr_vldescto,0) + nvl(pr_vlabatim,0)), 'fm999g999g990d00'))
                                  || '#CPF/CNPJ Beneficiario: ' ;   
      
      END IF;
      
      --Nome Avalista
      vr_nmprepos:= NULL;
      --Numero cpf
      vr_nrcpfpre:= 0;

      IF pr_idorigem = 3 THEN
      
        --> Busca dados apenas quando nao possui assinatura conjunta 
        IF rw_crapass.idastcjt = 0 THEN
        /* busca dados do preposto */
        OPEN cr_crapsnh (pr_cdcooper => pr_cdcooper
                        ,pr_nrdconta => pr_nrdconta
                        ,pr_idseqttl => 1
                        ,pr_tpdsenha => 1);
        --Posicionar no proximo registro
        FETCH cr_crapsnh INTO rw_crapsnh;
        --Se nao encontrar
        IF cr_crapsnh%FOUND THEN
          --Numero cpf preposto
          vr_nrcpfpre:= rw_crapsnh.nrcpfcgc;
          --Selecionar dados avalista
          OPEN cr_crapavt (pr_cdcooper => rw_crapsnh.cdcooper
                          ,pr_nrdconta => rw_crapsnh.nrdconta
                          ,pr_tpctrato => 6
                          ,pr_nrcpfcgc => rw_crapsnh.nrcpfcgc);
          --Posicionar no proximo registro
          FETCH cr_crapavt INTO rw_crapavt;
          --Se nao encontrar
          IF cr_crapavt%FOUND THEN
            --Selecionar informacoes avalista
            OPEN cr_crapass (pr_cdcooper => pr_cdcooper
                            ,pr_nrdconta => rw_crapavt.nrdctato);
            --Posicionar no proximo registro
            FETCH cr_crapass INTO rw_cra2ass;
            --Se nao encontrar
            IF cr_crapass%FOUND THEN
              --Nome preposto recebe nome avalista
              vr_nmprepos:= rw_cra2ass.nmprimtl;
            ELSE
              --Nome preposto recebe nome avalista
              vr_nmprepos:= rw_crapavt.nmdavali;
            END IF;
            --Fechar Cursor
            CLOSE cr_crapass;
          END IF;
          --Fechar Cursor
          CLOSE cr_crapavt;
        END IF;
        --Fechar Cursor
        CLOSE cr_crapsnh;
      END IF;
      END IF;
      --Tipo Protocolo
      IF pr_idorigem = 4 THEN
        vr_cdtippro:= 6;  /* Pagamento TAA */
      ELSE
        vr_cdtippro:= 2;  /* Pagamento INTERNET */
      END IF;

      --Gerar protocolo
      GENE0006.pc_gera_protocolo(pr_cdcooper => rw_crapaut.cdcooper  --> Codigo da cooperativa
                                ,pr_dtmvtolt => rw_crapaut.dtmvtolt  --> Data movimento
                                ,pr_hrtransa => rw_crapaut.hrautent  --> Hora da transação
                                ,pr_nrdconta => pr_nrdconta          --> Numero da conta
                                ,pr_nrdocmto => vr_nrseqdig  --> Numero do documento
                                ,pr_nrseqaut => rw_crapaut.nrsequen  --> Numero da sequencia
                                ,pr_vllanmto => rw_crapaut.vldocmto  --> Valor lançamento
                                ,pr_nrdcaixa => rw_crapaut.nrdcaixa  --> Numero do caixa
                                ,pr_gravapro => TRUE                 --> Controle de gravação do crappro
                                ,pr_cdtippro => vr_cdtippro                    --> Código do tipo protocolo
                                ,pr_dsinfor1 => vr_dsinfor1          --> Descrição 1
                                ,pr_dsinfor2 => vr_dsinfor2          --> Descrição 2
                                ,pr_dsinfor3 => vr_dsinfor3          --> Descrição 3
                                ,pr_dscedent => vr_dscedent          --> Descritivo Cedente
                                ,pr_flgagend => (pr_flgagend = 1)    --> Controle de agenda
                                ,pr_nrcpfope => pr_nrcpfope          --> Número de operação
                                ,pr_nrcpfpre => vr_nrcpfpre          --> Número pré operação
                                ,pr_nmprepos => vr_nmprepos          --> Nome Preposto
                                ,pr_dsprotoc => pr_dsprotoc          --> Descrição do protocolo
                                ,pr_dscritic => vr_dscritic          --> Descrição crítica
                                ,pr_des_erro => vr_des_erro);        --> Descrição dos erros de processo
      --Se ocorreu erro
      IF vr_dscritic IS NOT NULL OR vr_des_erro IS NOT NULL THEN
        -- Rollback da transação
        ROLLBACK TO undopoint;
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_paga_titulo');
      
      /** Armazena protocolo na autenticacao **/
      BEGIN
        UPDATE crapaut SET crapaut.dsprotoc = pr_dsprotoc
        WHERE crapaut.ROWID = rw_crapaut.ROWID;
      EXCEPTION
        WHEN OTHERS THEN
          -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
          CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
          -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
          vr_cdcritic := 1035;
          vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                           'CRAPAUT(23):' ||
                           ' dsprotoc:'   || pr_dsprotoc ||
                           ' com ROWID:'     || rw_crapaut.ROWID || 
                           '. ' ||sqlerrm;
        -- Rollback da transação
        ROLLBACK TO undopoint;
        --Levantar Excecao
        RAISE vr_exc_erro;
      END;
      /* Grava uma autenticacao para o debido da conta */
      CXON0000.pc_grava_autenticacao_internet (pr_cooper       => rw_crapcop.cdcooper  --Codigo Cooperativa
                                              ,pr_nrdconta     => pr_nrdconta          --Numero da Conta
                                              ,pr_idseqttl     => pr_idseqttl          --Sequencial do titular
                                              ,pr_cod_agencia  => rw_crapaut.cdagenci  --Codigo Agencia
                                              ,pr_nro_caixa    => rw_crapaut.nrdcaixa     --Numero do caixa
                                              ,pr_cod_operador => rw_crapaut.cdopecxa     --Codigo Operador
                                              ,pr_valor        => rw_crapaut.vldocmto     --Valor da transacao
                                              ,pr_docto        => vr_nrseqdig  --Numero documento
                                              ,pr_operacao     => TRUE            --Indicador Operacao Debito
                                              ,pr_status       => '1'             --Status da Operacao - Online
                                              ,pr_estorno      => FALSE           --Indicador Estorno
                                              ,pr_histor       => vr_cdhisdeb     --Historico Debito
                                              ,pr_data_off     => NULL            --Data Transacao
                                              ,pr_sequen_off   => 0               --Sequencia
                                              ,pr_hora_off     => 0               --Hora transacao
                                              ,pr_seq_aut_off  => 0               --Sequencia automatica
                                              ,pr_cdempres     => NULL            --Descricao Observacao
                                              ,pr_literal      => vr_dslitera     --Descricao literal lcm
                                              ,pr_sequencia    => vr_nrautdoc    --Sequencia
                                              ,pr_registro     => vr_nrdrecid    --ROWID do registro debito
                                              ,pr_cdcritic     => vr_cdcritic    --Código do erro
                                              ,pr_dscritic     => vr_dscritic);  --Descricao do erro
      --Se ocorreu erro
      IF NVL(vr_cdcritic,0) <> 0 OR TRIM(vr_dscritic) IS NOT NULL THEN
        --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        vr_cdcritic := 1075; --Erro na autenticacao do pagamento
        vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        -- Rollback da transação
        ROLLBACK TO undopoint;
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_paga_titulo');

      /* Encontrar registro da autenticacao */
      OPEN cr_crapaut (pr_rowid => vr_nrdrecid);
      --Posicionar no proximo registro
      FETCH cr_crapaut INTO rw_crapaut;
      --Se nao encontrar
      IF cr_crapaut%NOTFOUND THEN
        --Fechar Cursor
        CLOSE cr_crapaut;
        --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        --Mensagem erro
        vr_cdcritic:= 1086; --Registro da autenticacao nao encontrado
        vr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        -- Rollback da transação
        ROLLBACK TO undopoint;
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
      --Fechar Cursor
      CLOSE cr_crapaut;

      /** Armazena protocolo na autenticacao **/
      BEGIN
        UPDATE crapaut SET crapaut.dsprotoc = pr_dsprotoc
        WHERE crapaut.ROWID = rw_crapaut.ROWID;
      EXCEPTION
        WHEN OTHERS THEN
          -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
          CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
          -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
          vr_cdcritic := 1035;
          vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                           'CRAPAUT(24):' ||
                           ' dsprotoc: '  || pr_dsprotoc ||
                           ' com ROWID:'  || rw_crapaut.ROWID || 
                           '. ' ||sqlerrm;
        -- Rollback da transação
        ROLLBACK TO undopoint;
        --Levantar Excecao
        RAISE vr_exc_erro;
      END;

      /* Cria o lancamento do DEBITO */

      IF pr_idorigem = 4  THEN
        vr_cdpesqbb:= 'TAA - PAGAMENTO ON-LINE '||'- BANCO ' || rw_crapban.nmextbcc;
      ELSE
        vr_cdpesqbb:= 'INTERNET - PAGAMENTO ON-LINE ' ||'- BANCO '|| rw_crapban.nmextbcc;
      END IF;

      /* Cria o lancamento do DEBITO */
      BEGIN
         lanc0001.pc_gerar_lancamento_conta(
              pr_cdcooper => rw_crapaut.cdcooper
             ,pr_dtmvtolt => rw_crapaut.dtmvtolt
             ,pr_cdagenci => rw_crapaut.cdagenci
             ,pr_cdbccxlt => 11
             ,pr_nrdolote => 11900
             ,pr_dtrefere => rw_crapaut.dtmvtolt
             ,pr_hrtransa => gene0002.fn_busca_time
             ,pr_cdoperad => rw_crapaut.cdopecxa
             ,pr_nrdconta => pr_nrdconta
             ,pr_nrdctabb => pr_nrdconta
             ,pr_nrdctitg => gene0002.fn_mask(pr_nrdconta,'99999999')
             ,pr_nrdocmto => vr_nrseqdig
             ,pr_nrsequni => vr_nrseqdig
             ,pr_nrseqdig => vr_nrseqdig
             ,pr_cdhistor => rw_crapaut.cdhistor
             ,pr_vllanmto => rw_crapaut.vldocmto
             ,pr_nrautdoc => rw_crapaut.nrsequen
             ,pr_dscedent => Upper(GENE0007.fn_caract_acento(pr_dscedent,1))
             ,pr_cdcoptfn => pr_cdcoptfn
             ,pr_cdagetfn => pr_cdagetfn
             ,pr_nrterfin => pr_nrterfin
             ,pr_cdpesqbb => vr_cdpesqbb
             ,pr_tab_retorno => vr_tab_retorno
             ,pr_incrineg => vr_incrineg
             ,pr_cdcritic => vr_cdcritic
             ,pr_dscritic => vr_dscritic
             );
         rw_craplcm.rowid := vr_tab_retorno.rowidlct;
         
        IF nvl(vr_cdcritic,0) > 0 OR 
           trim(vr_dscritic) IS NOT NULL THEN
                
          --Levantar Excecao
          RAISE vr_exc_erro;   
        END IF;
         
      EXCEPTION
        WHEN vr_exc_erro THEN
          declare
            vr_dscomplemento varchar2(4000) := null;
          begin
            vr_dscomplemento := rw_crapaut.cdcooper                              -- cdcooper
                                ||'-'|| rw_crapaut.dtmvtolt 					 -- dtmvtolt
                                ||'-'|| rw_crapaut.cdagenci                      -- cdagenci
                                ||'-'|| 11                                       -- cdbccxlt
                                ||'-'|| 11900                                    -- nrdolote
                                ||'-'|| rw_crapaut.dtmvtolt                      -- dtrefere
                                ||'-'|| gene0002.fn_busca_time                   -- hrtransa
                                ||'-'|| rw_crapaut.cdopecxa                      -- cdoperad
                                ||'-'|| pr_nrdconta                              -- nrdconta
                                ||'-'|| pr_nrdconta                              -- nrdctabb
                                ||'-'|| gene0002.fn_mask(pr_nrdconta,'99999999') -- nrdctitg
                                ||'-'|| vr_nrseqdig                      -- nrdocmto
                                ||'-'|| vr_nrseqdig                      -- nrsequni
                                ||'-'|| vr_nrseqdig                      -- nrseqdig
                                ||'-'|| rw_crapaut.cdhistor                      -- cdhistor
                                ||'-'|| rw_crapaut.vldocmto                      -- vllanmto
                                ||'-'|| rw_crapaut.nrsequen                      -- nrautdoc
                                ||'-'|| Upper(GENE0007.fn_caract_acento(pr_dscedent,1)) -- dscedent
                                ||'-'|| pr_cdcoptfn                              -- cdcoptfn
                                ||'-'|| pr_cdagetfn                              -- cdagetfn
                                ||'-'|| pr_nrterfin                              -- nrterfin
                                ||'-'|| vr_cdpesqbb;                             -- cdpesqbb           
            CECRED.pc_internal_exception (pr_cdcooper => rw_crapcop.cdcooper, pr_compleme => vr_dscomplemento);
          END;
          -- Rollback da transação
          ROLLBACK TO undopoint;
          
          RAISE vr_exc_erro; 
        WHEN Others THEN  
          declare
            vr_dscomplemento varchar2(4000) := null;
          begin
            vr_dscomplemento := rw_crapaut.cdcooper                              -- cdcooper
                                ||'-'|| rw_crapaut.dtmvtolt 					 -- dtmvtolt
                                ||'-'|| rw_crapaut.cdagenci                      -- cdagenci
                                ||'-'|| 11                                       -- cdbccxlt
                                ||'-'|| 11900                                    -- nrdolote
                                ||'-'|| rw_crapaut.dtmvtolt                      -- dtrefere
                                ||'-'|| gene0002.fn_busca_time                   -- hrtransa
                                ||'-'|| rw_crapaut.cdopecxa                      -- cdoperad
                                ||'-'|| pr_nrdconta                              -- nrdconta
                                ||'-'|| pr_nrdconta                              -- nrdctabb
                                ||'-'|| gene0002.fn_mask(pr_nrdconta,'99999999') -- nrdctitg
                                ||'-'|| vr_nrseqdig                      -- nrdocmto
                                ||'-'|| vr_nrseqdig                      -- nrsequni
                                ||'-'|| vr_nrseqdig                      -- nrseqdig
                                ||'-'|| rw_crapaut.cdhistor                      -- cdhistor
                                ||'-'|| rw_crapaut.vldocmto                      -- vllanmto
                                ||'-'|| rw_crapaut.nrsequen                      -- nrautdoc
                                ||'-'|| Upper(GENE0007.fn_caract_acento(pr_dscedent,1)) -- dscedent
                                ||'-'|| pr_cdcoptfn                              -- cdcoptfn
                                ||'-'|| pr_cdagetfn                              -- cdagetfn
                                ||'-'|| pr_nrterfin                              -- nrterfin
                                ||'-'|| vr_cdpesqbb;                             -- cdpesqbb           
            CECRED.pc_internal_exception (pr_cdcooper => rw_crapcop.cdcooper, pr_compleme => vr_dscomplemento);
          end;
          vr_cdcritic:= 0;
          vr_dscritic:= 'PAGA0001 - Erro ao inserir na tabela craplcm. '||sqlerrm;
          -- Rollback da transação
          ROLLBACK TO undopoint;
          --Levantar Excecao
         RAISE vr_exc_erro;
      END;
      /* Cria o registro do movimento da internet */
      IF  pr_idorigem <> 4  THEN /* TAA */

        IF rw_crapass_prot.idastcjt = 0 THEN

          -- Atualiza o registro de movimento da internet
          paga0001.pc_insere_movimento_internet(pr_cdcooper => pr_cdcooper 
                                               ,pr_nrdconta => pr_nrdconta
                                               ,pr_idseqttl => pr_idseqttl
                                               ,pr_dtmvtolt => rw_crapaut.dtmvtolt
                                               ,pr_cdoperad => rw_crapaut.cdopecxa
                                               ,pr_inpessoa => rw_crapass_prot.inpessoa
                                               ,pr_tpoperac => 2 -- Pagamento
                                               ,pr_vllanmto => pr_vllanmto
                                               ,pr_dscritic => vr_dscritic);
                       
                  --Levantar Excecao
          IF vr_dscritic IS NOT NULL THEN
            vr_cdcritic := substr(vr_dscritic,1,5);
            vr_dscritic := substr(vr_dscritic,7);
                  RAISE vr_exc_erro;
            END IF;
	        -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		      GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_paga_titulo');
          
        ELSE
          FOR rw_crappod IN cr_crappod(pr_cdcooper => pr_cdcooper
                                      ,pr_nrdconta => pr_nrdconta) LOOP

            OPEN cr_crapsnh2(pr_cdcooper => rw_crappod.cdcooper
                            ,pr_nrdconta => rw_crappod.nrdconta
                            ,pr_nrcpfcgc => rw_crappod.nrcpfpro);
                                    
            FETCH cr_crapsnh2 INTO rw_crapsnh2;

            IF cr_crapsnh2%NOTFOUND THEN
              CLOSE cr_crapsnh2;
              CONTINUE;
            ELSE
              CLOSE cr_crapsnh2;
	          END IF;
            
            -- Atualiza o registro de movimento da internet
            paga0001.pc_insere_movimento_internet(pr_cdcooper => pr_cdcooper 
                                                 ,pr_nrdconta => pr_nrdconta
                                                 ,pr_idseqttl => rw_crapsnh2.idseqttl
                                                 ,pr_dtmvtolt => rw_crapaut.dtmvtolt
                                                 ,pr_cdoperad => rw_crapaut.cdopecxa
                                                 ,pr_inpessoa => rw_crapass_prot.inpessoa
                                                 ,pr_tpoperac => 2 -- Pagamento
                                                 ,pr_vllanmto => pr_vllanmto
                                                 ,pr_dscritic => vr_dscritic);
            
                    --Levantar Excecao
            IF vr_dscritic IS NOT NULL THEN
              vr_cdcritic := substr(vr_dscritic,1,5);
              vr_dscritic := substr(vr_dscritic,7);
                    RAISE vr_exc_erro;
              END IF;
      	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		        GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_paga_titulo');

          END LOOP;

        END IF;

      END IF;
	  
      /** ------------------------------------------------------------- **
       ** Monitoracao Pagamentos - Antes de alterar verificar com David **
       ** ------------------------------------------------------------- **
       ** Envio de monitoracao sera enviado se for pagto via Internet ou**
       ** se nao for pagto via DDA, se nao for pagto proveniente de     **
       ** agendamento, se nao for boleto de cobranca registrada da      **
       ** cooperativa, se o valor individual ou total pago no dia pelo  **
       ** cooperado for maior que o limite estipulado para cooperativa  **
       ** atraves da tela PARMON no ayllos web.                         **
       ** exemplo: valor inicial monitoracao =   700,00                 **
       **          valor monitoracao IP      = 3.000,00                 **
       ** Será enviado email de monitoracao apenas quando:              **
       ** - Valor pago for maior ou igual a 3.000,00 independente do ip **
       ** - Valor pago for maior ou igual a 700,00 até 2.999,99 será    **
       ** verificado o IP anterior, caso seja diferente, envia email.   **
       ** ------------------------------------------------------------- **/

      IF vr_cdagenci = 90 AND pr_flgagend = 0 /*false*/ AND
         nvl(vr_idanalise_fraude,0) = 0 THEN
          BEGIN
         AFRA0004.pc_monitora_operacao (pr_cdcooper   => pr_cdcooper   -- Codigo da cooperativa
                                       ,pr_nrdconta   => pr_nrdconta   -- Numero da conta
                                       ,pr_idseqttl   => pr_idseqttl   -- Sequencial titular
                                       ,pr_vlrtotal   => pr_vlfatura   -- Valor fatura
                                       ,pr_flgagend   => pr_flgagend   -- Flag agendado /* 1-True, 0-False */ 
                                       ,pr_idorigem   => pr_idorigem   -- Indicador de origem
                                       ,pr_cdoperacao => vr_cdoperacao -- Codigo operacao (tbcc_dominio_campo-CDOPERAC_ANALISE_FRAUDE)
                                       ,pr_idanalis   => NULL          -- ID Analise Fraude
                                       ,pr_lgprowid   => NULL          -- Rowid craplgp
                                       ,pr_cdcritic   => vr_cdcritic   -- Codigo da critica
                                       ,pr_dscritic   => vr_dscritic); -- Descricao da critica
          IF nvl(vr_cdcritic,0) > 0 OR                                    
             TRIM(vr_dscritic) IS NOT NULL THEN
            RAISE vr_exc_erro;   
                  END IF;

          EXCEPTION
          WHEN vr_exc_erro THEN
            vr_nmarqlog := gene0001.fn_param_sistema(pr_nmsistem => 'CRED', pr_cdacesso => 'NOME_ARQ_LOG_MESSAGE');
            btch0001.pc_gera_log_batch(pr_cdcooper     => 3,
                                       pr_ind_tipo_log => 2, --> erro tratado
                                       pr_des_log      => to_char(SYSDATE,'DD/MM/RRRR hh24:mi:ss') ||
                                                          ' - '||vr_cdprogra ||' --> ' || 
                                                          vr_cdcritic||' -> '||vr_dscritic,
                                       pr_nmarqlog     => vr_nmarqlog);

            vr_cdcritic := NULL;                         
            vr_dscritic := NULL;    
            WHEN OTHERS THEN
              vr_nmarqlog := gene0001.fn_param_sistema(pr_nmsistem => 'CRED', pr_cdacesso => 'NOME_ARQ_LOG_MESSAGE');
              btch0001.pc_gera_log_batch(pr_cdcooper     => 3,
                                         pr_ind_tipo_log => 2, --> erro tratado
                                         pr_des_log      => to_char(SYSDATE,'DD/MM/RRRR hh24:mi:ss') ||
                                                          ' - '||vr_cdprogra ||' --> ' || sqlerrm,
                                         pr_nmarqlog     => vr_nmarqlog);
                                              
              vr_cdcritic := NULL;                         
              vr_dscritic := NULL;                         
          END;

          IF vr_dscritic IS NOT NULL THEN
            vr_cdcritic:= 0;
            --Levantar Excecao
            RAISE vr_exc_erro;
          END IF;
        END IF;

      IF vr_indpagto <> 0 THEN

        --> Caso possua analise de fraude, baixa efetiva será retida 
        --> até a conclusao da analise de fraude
        IF nvl(vr_idanalise_fraude,0) <> 0 THEN
          BEGIN
            --> incluir campos complementares para aauxliar na aopvacao/estorno da operacao
            UPDATE tbgen_analise_fraude frd
               SET frd.dscomplementar = 'indpagto;'||vr_indpagto||
                                        '|rowidcob;'||vr_rowidcob
             WHERE frd.idanalise_fraude = vr_idanalise_fraude;
          EXCEPTION
            WHEN OTHERS THEN
              vr_nmarqlog := gene0001.fn_param_sistema(pr_nmsistem => 'CRED', pr_cdacesso => 'NOME_ARQ_LOG_MESSAGE');
              btch0001.pc_gera_log_batch(pr_cdcooper     => 3,
                                         pr_ind_tipo_log => 2, --> erro tratado
                                         pr_des_log      => to_char(SYSDATE,'DD/MM/RRRR hh24:mi:ss') ||
                                                            ' - '||vr_cdprogra ||' --> ' || sqlerrm,
                                         pr_nmarqlog     => vr_nmarqlog);
                                                
              vr_cdcritic := NULL;                         
              vr_dscritic := NULL;  
          END;
        ELSE
        
        /* Procedure para gravar solicitação de envio da jdda */
        pc_solicita_crapdda ( pr_cdcooper  => pr_cdcooper         -- Codigo Cooperativa
                             ,pr_dtmvtolt  => rw_crapdat.dtmvtolt -- Data pagamento
                             ,pr_cobrowid  => vr_rowidcob         -- rowid de cobranca
                             ,pr_dscritic  => vr_dscritic);       -- Descricao da critica

        IF TRIM(vr_dscritic) IS NOT NULL THEN
	        -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
          --Nao mostrar erro para usuario., somente gerar log
          -- excluido btch0001.pc_gera_log_batch - erro ao gravar crapdda(crapcob.rowid
          -- Geração de log                             
          pc_controla_log_programa(pr_cdcooper      => pr_cdcooper
                                  ,pr_dstiplog      => 'E' -- Tipo de Log - E = erro
                                  ,pr_tpocorrencia  => 1   -- 1-Erro de negocio
                                  ,pr_cdcriticidade => 1
                                  ,pr_cdmensagem    => vr_cdcritic -- Codigo do Log
                                  ,pr_dsmensagem    => vr_dscritic || -- Descrição do Log
                                                       ' - dtmvtolt:' || rw_crapdat.dtmvtolt ||
                                                       ',  rowidcob:' || vr_rowidcob ||
                                                       ' - ' ||  vr_dsparame  ||
                                                       ', PAGA0001.pc_paga_titulo'
                                 ); 

          vr_dscritic := null;
        END IF;	  

        END IF;
	      -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		    GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_paga_titulo');

        /* Processo de liquidação intrabancaria será executado ao final de todos os lançamentos
           na pc_efetua_debitos
        --Executar Liquidacao Intrabancaria DDA
        ddda0001.pc_liquid_intrabancaria_dda (pr_rowid_cob => vr_rowidcob    --ROWID da Cobranca
                                             ,pr_cdcritic  => vr_cdcritic    --Codigo de Erro
                                             ,pr_dscritic  => vr_dscritic);  --Descricao de Erro
        --Se ocorreu erro
        IF vr_cdcritic IS NOT NULL OR vr_dscritic IS NOT NULL THEN
          --Nao mostrar erro para usuario.
          NULL;
        END IF;*/
      END IF;

	  IF pr_idtitdda > 0 OR TRIM(pr_cdctrlcs) IS NOT NULL THEN
        --Determinar situacao titulo
        IF pr_intitcop = 1 THEN
          vr_cdsittit:= 3;  /* Pg.IntraBanc. */
        ELSE
          vr_cdsittit:= 4; /* Pg.InterBanc. */
        END IF;
        --Determinar o nome da tela
        IF pr_idorigem = 4 THEN
          vr_nmdatela:= 'TAA';
        ELSE
          vr_nmdatela:= 'INTERNETBANK';
        END IF;
        --Atualizar situacao titulo
        DDDA0001.pc_atualz_situac_titulo_sacado (pr_cdcooper => pr_cdcooper   --Codigo da Cooperativa
                                                ,pr_cdagecxa => vr_cdagenci   --Codigo da Agencia
                                                ,pr_nrdcaixa => 900           --Numero do Caixa
                                                ,pr_cdopecxa => '996'         --Codigo Operador Caixa
                                                ,pr_nmdatela => vr_nmdatela   --Nome da tela
                                                ,pr_idorigem => pr_idorigem   --Indicador Origem
                                                ,pr_nrdconta => pr_nrdconta   --Numero da Conta
                                                ,pr_idseqttl => pr_idseqttl   --Sequencial do titular
                                                ,pr_idtitdda => pr_idtitdda   --Indicador Titulo DDA
                                                ,pr_cdsittit => vr_cdsittit   --Situacao Titulo
                                                ,pr_flgerlog => 0             --Gerar Log
                                                ,pr_dtmvtolt => rw_crapdat.dtmvtocd   --data de movimento
                                                ,pr_dscodbar => pr_cdbarras   --Codigo de barra
                                                ,pr_cdctrlcs => pr_cdctrlcs   --Identificador da consulta
                                                ,pr_cdcritic => vr_cdcritic   --Codigo de critica
                                                ,pr_dscritic => vr_dscritic); --Descrição de critica
        
        --Se ocorreu erro
        IF nvl(vr_cdcritic,0) > 0 OR 
           TRIM(vr_dscritic) IS NOT NULL THEN        
           
          -- Rollback da transação
          ROLLBACK TO undopoint;
          --Levantar Excecao
          RAISE vr_exc_erro;
        END IF;
	      -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		    GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_paga_titulo');
        
      END IF;

      /*
      #################################################
      NÃO COLOCAR MAIS NENHUM PROCESSAMENTO NO FIM DESTA PROCEDURE!!!
      Tudo o que for adicionado de novas chamadas de procedure, leitura de cursores, ou qualquer outro
      processo demorado deve ser adicionado antes de efetuar a somatória dos valores da CRAPLOT, para
      evitar locks nesta tabela.
      Favor procutar a linha com o comentário "[INÍCIO DO LOCK DA CRAPLOT]" e aplicar qualquer novo
      processamento antes desta linha.
      - 25/11/2016 - Dionathan Henchel
      #################################################
      */

	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);
    EXCEPTION
      -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415      
      -- Disparadores: b1wgen0016.paga_titulo                  - Não grava TBGEN - Necessario Avaliar
      --               paga0002.pc_InternetBank27              - Necessário Avaliar
      --               paga0001.pc_debita_agendto_pagto        - Não grava TBGEN
      --
      --               Eliminar a gravação do Log aqui quando acertar a paga0002.pc_InternetBank27 
      WHEN vr_exc_erro THEN
        pr_cdcritic:= vr_cdcritic;
        pr_dscritic:= vr_dscritic;
        --> Geração de log                             
        pc_controla_log_programa(  pr_cdcooper      => pr_cdcooper
                                  ,pr_dstiplog      => 'E' -- Tipo de Log - E = erro
                                  ,pr_tpocorrencia  => 1   -- 1-Erro de negocio
                                  ,pr_cdcriticidade => 1
                                  ,pr_cdmensagem    => vr_cdcritic -- Codigo do Log
                                  ,pr_dsmensagem    => vr_dscritic || -- Descrição do Log
                                                       vr_dsparame
                                 ); 
      WHEN OTHERS THEN
        -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
        CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
        -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        pr_cdcritic:= 9999;
        pr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic) ||
                      'PAGA0001.pc_paga_titulo. ' || SQLERRM || '.' || vr_dsparame;
        --> Geração de log                             
        pc_controla_log_programa( pr_cdcooper     => pr_cdcooper
                                 ,pr_dstiplog     => 'E' -- E = erro
                                 ,pr_tpocorrencia => 2   -- 1-Erro de negocio/ 2-Erro nao tratado
                                 ,pr_cdmensagem   => pr_cdcritic -- Codigo do Log
                                 ,pr_dsmensagem   => pr_dscritic -- Descrição do Log                                 
                                 );                            
    END;
  END pc_paga_titulo;

  /* Verificar os Convenios */
  PROCEDURE pc_verifica_convenio (pr_cdcooper IN  crapcop.cdcooper%TYPE   --Codigo da cooperativa
                                 ,pr_nrdconta IN  crapttl.nrdconta%TYPE   --Numero da conta
                                 ,pr_idseqttl IN  crapttl.idseqttl%TYPE   --Sequencial titular
                                 ,pr_idagenda IN  INTEGER                 --Indicador agendamento
                                 ,pr_lindigi1 IN OUT NUMBER               --Linha digitavel 1
                                 ,pr_lindigi2 IN OUT NUMBER               --Linha digitavel 2
                                 ,pr_lindigi3 IN OUT NUMBER               --Linha digitavel 3
                                 ,pr_lindigi4 IN OUT NUMBER               --Linha digitavel 4
                                 ,pr_cdbarras IN OUT VARCHAR2             --Codigo de Barras
                                 ,pr_dtvencto IN OUT DATE                 --Data Vencimento
                                 ,pr_vllanmto IN  NUMBER                  --Valor Lancamento
                                 ,pr_dtagenda IN OUT DATE                 --Data agendamento
                                 ,pr_idorigem IN  INTEGER                 --Indicador de origem
                                 ,pr_indvalid IN  INTEGER                 --Indicador se ja foi feito
								 ,pr_flmobile IN  INTEGER                 --Indicador Mobile
                                 ,pr_nmextcon OUT VARCHAR2                --Nome do banco
                                 ,pr_cdseqfat OUT NUMBER                  --Codigo Sequencial fatura
                                 ,pr_vlfatura OUT NUMBER                  --Valor fatura
                                 ,pr_nrdigfat OUT INTEGER                 --Numero Digito Fatura
                                 ,pr_dstransa OUT VARCHAR2                --Descricao transacao
                                 ,pr_cdcritic OUT INTEGER                 --Codigo da critica
                                 ,pr_dscritic OUT VARCHAR2) IS            --Descricao critica

    -- ..........................................................................
    --
    --  Programa : pc_verifica_convenio        Antiga: B1wgen0016.p/verifica_convenio
    --  Sistema  : Rotinas Internet
    --  Sigla    : AGEN
    --  Autor    : Alisson C. Berrido - AMcom
    --  Data     : Junho/2013.                   Ultima atualizacao: 15/12/2017
    --
    --  Dados referentes ao programa:
    --
    --   Frequencia: Sempre que for chamado
    --   Objetivo  : Verificar Convenios
    --
    --   Alterações: 03/09/2014 - Incluido tratamento para migracao Credimilsul -> Scrcred,
    --                            Concredi -> Viacredi (Jean Michel).
    --
    --               30/03/2017 - Incluir validacao para faturas vencidas para agendamentos conforme
    --                            ja faz a rotina de pagamento (Lucas Ranghetti #637996)
    --
    --               12/04/2017 - Incluir validacao para faturas vencidas para agendamentos conforme
    --                            ja faz a rotina de pagamento PM.AGROLANDIA (Tiago #647174)    
    --
    --               22/05/2017 - Incluido validacao para nao agendar faturas vencidas
    --                            para PM.TROMBUDO CENTRAL e FMS.TROMBUDO CENTRAL
    --                            (Tiago/Fabricio #653830)
    --
    --               26/05/2017 - Incluido validacao para nao agendar faturas vencidas
    --                            para PM.AGROLANDIA (Tiago/Fabricio #647174)    
    --
    --               10/07/2017 - Adicionar tratamento para validar o vencimento dos tributos
    --                            sicredi (Lucas Ranghetti #653552)    
    --
    --               28/07/2017 - Alterar a verificacao de vencimento das faturas de convenio, para que 
    --                             seja feito atraves de parametrizacao na crapprm (Douglas - Chamado 711440)
    --												   
    --               02/10/2017 - Alteração da mensagem de validação de pagamento GPS (prj 356.2 - Ricardo Linhares)
    --
    --               25/10/2017 - Alterar o armazenamento da pr_dscritic quando encontrar erros
    --                            para utilizar a vr_dscritic pois no raise utilizamos o vr_dscritic
    --                            para gravar no pr_dscritic (Lucas Ranghetti / Fabricio)
    --
    --               15/12/2017 - Incluido nome do módulo logado
    --                            No caso de erro de programa gravar tabela especifica de log                     
    --                            Ajuste mensagem de erro 
    --                            (Belli - Envolti - Chamado 779415)    
    --
    --               05/01/2018 - Adicionado tratativas para arrecadacao de FGTS/DAE.
    --                            PRJ406-FGTS(Odirlei-AMcom) 
    -- ..........................................................................

  BEGIN
    DECLARE
      --Selecionar contas migradas
      CURSOR cr_craptco (pr_cdcopant IN craptco.cdcopant%type
                        ,pr_nrctaant IN craptco.nrctaant%type
                        ,pr_tpctatrf IN craptco.tpctatrf%type) IS
        SELECT craptco.cdcopant
        FROM craptco
        WHERE craptco.cdcopant = pr_cdcopant
        AND   craptco.nrctaant = pr_nrctaant
        AND   craptco.tpctatrf = pr_tpctatrf;
      rw_craptco cr_craptco%ROWTYPE;

      --Selecionar erro
      CURSOR cr_craperr (pr_cdcooper IN craperr.cdcooper%type
                        ,pr_cdagenci IN craperr.cdagenci%type
                        ,pr_nrdcaixa IN craperr.nrdcaixa%type) IS
        SELECT craperr.dscritic
        FROM  craperr
        WHERE craperr.cdcooper = pr_cdcooper
        AND   craperr.cdagenci = pr_cdagenci
        AND   craperr.nrdcaixa = pr_nrdcaixa
        ORDER BY craperr.progress_recid ASC;
      rw_craperr cr_craperr%ROWTYPE;

      --Selecionar transacoes de operações conjuntas			
			CURSOR cr_tbpagto_trans_pend (pr_dtmvtopg IN DATE) IS
				SELECT 1 
					FROM tbpagto_trans_pend,
							 tbgen_trans_pend
				 WHERE tbpagto_trans_pend.cdcooper           = pr_cdcooper
				   AND tbpagto_trans_pend.nrdconta           = pr_nrdconta
				   AND tbpagto_trans_pend.tppagamento        = 1 /* Convênio */ 
				   AND tbpagto_trans_pend.dtdebito           = pr_dtmvtopg 
				   AND tbpagto_trans_pend.dscodigo_barras    = pr_cdbarras
				   AND tbgen_trans_pend.cdtransacao_pendente =
				       tbpagto_trans_pend.cdtransacao_pendente 
				   AND tbgen_trans_pend.idorigem_transacao   = pr_idorigem
				   AND tbgen_trans_pend.idsituacao_transacao IN (1,5); /* Pendente */
			rw_tbpagto_trans_pend cr_tbpagto_trans_pend%ROWTYPE;
			
      --Selecionar lancamentos automaticos
      CURSOR cr_craplau (pr_cdcooper IN craplau.cdcooper%type
                        ,pr_nrdconta IN craplau.nrdconta%type
                        ,pr_dtmvtopg IN craplau.dtmvtopg%type
                        ,pr_cdagenci IN craplau.cdagenci%type
                        ,pr_cdbccxlt IN craplau.cdbccxlt%type
                        ,pr_nrdolote IN craplau.nrdolote%type
                        ,pr_dscodbar IN craplau.dscodbar%type) IS
        SELECT craplau.cdcooper
              ,craplau.dscodbar
              ,craplau.dslindig
        FROM craplau
        WHERE craplau.cdcooper = pr_cdcooper
        AND   craplau.nrdconta = pr_nrdconta
        AND   craplau.dtmvtopg = pr_dtmvtopg
        AND   craplau.cdagenci = pr_cdagenci
        AND   craplau.cdbccxlt = pr_cdbccxlt
        AND   craplau.nrdolote = pr_nrdolote
        AND   craplau.dscodbar = pr_dscodbar
        AND   craplau.insitlau IN (1,2)
        ORDER BY craplau.progress_recid ASC;
      rw_craplau cr_craplau%ROWTYPE;

      --Selecionar lancamentos automaticos
      CURSOR cr_craplau2 (pr_cdcooper IN craplau.cdcooper%type
                         ,pr_dtmvtopg IN craplau.dtmvtopg%type
                         ,pr_cdagenci IN craplau.cdagenci%type
                         ,pr_cdbccxlt IN craplau.cdbccxlt%type
                         ,pr_nrdolote IN craplau.nrdolote%type) IS
        SELECT craplau.cdcooper
              ,craplau.dscodbar
              ,craplau.dslindig
        FROM craplau
        WHERE craplau.cdcooper = pr_cdcooper
        AND   craplau.dtmvtopg = pr_dtmvtopg
        AND   craplau.cdagenci = pr_cdagenci
        AND   craplau.cdbccxlt = pr_cdbccxlt
        AND   craplau.nrdolote = pr_nrdolote
        AND   craplau.insitlau IN (1,2)
        AND   LENGTH(craplau.dslindig) = 55;
        
      -- Efetuar a busca do valor na tabela
      CURSOR cr_crapprm_dias_tolera (pr_cdacesso IN VARCHAR) IS
        SELECT to_number(prm.dsvlrprm) dsvlrprm
          FROM crapprm prm
         WHERE prm.nmsistem = 'CRED'
           AND prm.cdcooper = 0 --> Busca tanto da passada, quanto da geral (se existir)
           AND prm.cdacesso = pr_cdacesso; --> Trará a cooperativa passada primeiro, e caso não encontre nela, trará da 0(zero)

      -- Acesso a quantidade de dias de tolerancia
      vr_cdacesso      VARCHAR2(24);
      vr_qtdias_tolera INTEGER;
        
      --Variaveis Locais
      vr_flagiptu  BOOLEAN;
      vr_lindigit  NUMBER;
      vr_nrdigito  INTEGER;
      vr_cdoperad  VARCHAR2(100);
      vr_dsblqage  VARCHAR2(100);
      vr_flgretor  BOOLEAN;
      vr_cdseqfat  NUMBER;
      vr_cdagenci  INTEGER;
      vr_dtmvtopg  DATE;
      vr_dtferiado DATE;
      vr_datdodia  DATE;
      vr_nmoperad  VARCHAR2(100);
      vr_dttolera  DATE;

      --Variaveis de Erro
      vr_cdcritic crapcri.cdcritic%TYPE;
      vr_dscritic VARCHAR2(4000);
      vr_exc_erro EXCEPTION;
      --Agrupa os parametros - 15/12/2017 - Chamado 779415 
      vr_dsparame VARCHAR2(4000);

    BEGIN
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_verifica_convenio');
      
      --Inicializar variaveis
      pr_cdcritic:= NULL;
      pr_dscritic:= NULL;
      
      --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
      vr_dsparame :=  ' pr_cdcooper:' || pr_cdcooper || 
                      ', pr_nrdconta:' || pr_nrdconta ||
                      ', pr_idseqttl:' || pr_idseqttl ||
                      ', pr_idagenda:' || pr_idagenda ||
                      ', pr_lindigi1:' || pr_lindigi1 ||
                      ', pr_lindigi2:' || pr_lindigi2 ||
                      ', pr_lindigi3:' || pr_lindigi3 ||
                      ', pr_lindigi4:' || pr_lindigi4 ||
                      ', pr_cdbarras:' || pr_cdbarras ||
                      ', pr_dtvencto:' || pr_dtvencto ||
                      ', pr_vllanmto:' || pr_vllanmto ||
                      ', pr_dtagenda:' || pr_dtagenda ||
                      ', pr_idorigem:' || pr_idorigem ||
                      ', pr_indvalid:' || pr_indvalid ||
					            ', pr_flmobile:' || pr_flmobile;
      
      /* tratamento para TAA */
      IF pr_idorigem = 4  THEN
        vr_cdagenci:= 91;
      ELSE
        vr_cdagenci:= 90;
      END IF;

      IF pr_idagenda = 2 THEN
        IF pr_idorigem = 4 THEN
          vr_dtferiado:= GENE0005.fn_valida_dia_util(pr_cdcooper => pr_cdcooper --> Cooperativa conectada
                                                    ,pr_dtmvtolt => pr_dtagenda --> Data do movimento
                                                    ,pr_tipo     => 'P');       --> Proximo dia util
          --Verificar se eh dia util
          vr_flgretor:= Trunc(vr_dtferiado) = Trunc(pr_dtagenda);
          --Se nao for dia util
          IF NOT vr_flgretor THEN
            --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
            vr_cdcritic := 1093; --Data do agendamento deve ser um dia util
            vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
            --Levantar Excecao
            RAISE vr_exc_erro;
          END IF;
	        -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		      GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_verifica_convenio');
        END IF;
      END IF;

      --Descricao da transacao
      IF pr_idagenda = 1 THEN
        pr_dstransa:= 'Verificacao de convenio (fatura) para pagamento.';
      ELSE
        pr_dstransa:= 'Verificacao de convenio (fatura) para agendamento de pagamento.';
      END IF;

      /** Verificar se a conta pertence a um PAC migrado **/
      OPEN cr_craptco (pr_cdcopant => pr_cdcooper
                      ,pr_nrctaant => pr_nrdconta
                      ,pr_tpctatrf => 1);
      --Posicionar no proximo registro
      FETCH cr_craptco INTO rw_craptco;
      --Se encontrar e for agendamento
      IF cr_craptco%FOUND AND pr_idagenda = 2  THEN
        --Fechar Cursor
        CLOSE cr_craptco;
        --Buscar data do dia
        vr_datdodia:= trunc(sysdate); /*PAGA0001.fn_busca_datdodia(pr_cdcooper => pr_cdcooper);*/
        /** Bloquear agendamentos para conta migrada **/
        vr_dsblqage:= gene0001.fn_param_sistema('CRED',pr_cdcooper,'DT_BLOQ_AGEN_CTA_MIGRADA');
        --Se nao encontrou
        IF vr_dsblqage IS NULL THEN
          --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
          --Montar Critica
          vr_cdcritic := 1094; --Parametro de Data de Bloqueio de agendamento de conta migrada não encontrado
          vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
          --Levantar Excecao
          RAISE vr_exc_erro;
        END IF;
        --Data do dia maior limite
        IF  vr_datdodia >= to_date(vr_dsblqage,'DD/MM/YYYY') AND rw_craptco.cdcopant NOT IN (4,15,17) THEN
          --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
          --Montar Critica
          vr_cdcritic := 1095; --Operacao de agendamento bloqueada. Entre em contato com seu PA
          vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
          --Levantar Excecao
          RAISE vr_exc_erro;
        END IF;
      END IF;
      --Fechar Cursor
      IF cr_craptco%ISOPEN THEN
        CLOSE cr_craptco;
      END IF;
      --Agendamento
      IF pr_idagenda = 1 THEN
        pr_dtagenda:= NULL;
      END IF;

      --Verificar cooperativa
      OPEN cr_crapcop(pr_cdcooper => pr_cdcooper);
      FETCH cr_crapcop INTO rw_crapcop;
      --Se nao encontrou
      IF cr_crapcop%NOTFOUND THEN
        --Fechar Cursor
        CLOSE cr_crapcop;
        --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        vr_cdcritic := 1070; --Registro de cooperativa nao encontrado
        vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
      --Fechar Cursor
      CLOSE cr_crapcop;

      /* Verifica se foi digitado manualmente ou via leitora de cod. barras */
      IF trim(pr_cdbarras) IS NULL AND nvl(pr_lindigi1,0) <> 0 AND nvl(pr_lindigi2,0) <> 0 THEN
        --Montar Codigo Barras
        pr_cdbarras:= SUBSTR(gene0002.fn_mask(pr_lindigi1,'999999999999'),1,11)||
                      SUBSTR(gene0002.fn_mask(pr_lindigi2,'999999999999'),1,11)||
                      SUBSTR(gene0002.fn_mask(pr_lindigi3,'999999999999'),1,11)||
                      SUBSTR(gene0002.fn_mask(pr_lindigi4,'999999999999'),1,11);
	      -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		    GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_verifica_convenio');
      ELSIF trim(pr_cdbarras) IS NOT NULL AND nvl(pr_lindigi1,0) = 0 AND nvl(pr_lindigi2,0) = 0 AND
            nvl(pr_lindigi3,0) = 0 AND nvl(pr_lindigi4,0) = 0 THEN

        /* Monta os campos manuais e pega o digito */
        FOR idx IN 1..4 LOOP

          --Retornar o valor de cada parametro
          CASE idx
            WHEN 1 THEN
              pr_lindigi1:= TO_NUMBER(SUBSTR(pr_cdbarras,1,11));
              vr_lindigit:= pr_lindigi1;
            WHEN 2 THEN
              pr_lindigi2:= TO_NUMBER(SUBSTR(pr_cdbarras,12,11));
              vr_lindigit:= pr_lindigi2;
            WHEN 3 THEN
              pr_lindigi3:= TO_NUMBER(SUBSTR(pr_cdbarras,23,11));
              vr_lindigit:= pr_lindigi3;
            WHEN 4 THEN
              pr_lindigi4:= TO_NUMBER(SUBSTR(pr_cdbarras,34,11));
              vr_lindigit:= pr_lindigi4;
          END CASE;

          --Verificar qual o modulo de calculo do digito
          IF SUBSTR(pr_cdbarras,3,1) IN ('6','7') THEN
            /** Verificacao pelo modulo 10**/
            CXON0000.pc_calc_digito_iptu_samae (pr_valor    => vr_lindigit   --> Valor Calculado
                                               ,pr_nrdigito => vr_nrdigito   --> Digito Verificador
                                               ,pr_retorno  => vr_flgretor); --> Retorno digito correto
          ELSE
            /** Verificacao pelo modulo 11 **/
            CXON0014.pc_verifica_digito (pr_nrcalcul => vr_lindigit  --Numero a ser calculado
						                ,pr_poslimit => 0            --Utilizado para validação de dígito adicional de DAS
                                        ,pr_nrdigito => vr_nrdigito); --Digito verificador
          END IF;
	        -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		      GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_verifica_convenio');

          --Retornar parametro digitavel
          CASE idx
            WHEN 1 THEN
              pr_lindigi1:= TO_NUMBER(gene0002.fn_mask(pr_lindigi1,'99999999999')||gene0002.fn_mask(vr_nrdigito,'9'));
            WHEN 2 THEN
              pr_lindigi2:= TO_NUMBER(gene0002.fn_mask(pr_lindigi2,'99999999999')||gene0002.fn_mask(vr_nrdigito,'9'));
            WHEN 3 THEN
              pr_lindigi3:= TO_NUMBER(gene0002.fn_mask(pr_lindigi3,'99999999999')||gene0002.fn_mask(vr_nrdigito,'9'));
            WHEN 4 THEN
              pr_lindigi4:= TO_NUMBER(gene0002.fn_mask(pr_lindigi4,'99999999999')||gene0002.fn_mask(vr_nrdigito,'9'));
          END CASE;
        END LOOP;
      END IF;

      /* Verifica se o codigo de barras esta correto */
      CXON0014.pc_valida_codigo_barras (pr_cooper         => rw_crapcop.cdcooper --Codigo Cooperativa
                                       ,pr_nrdconta       => pr_nrdconta         --Numero da Conta
                                       ,pr_idseqttl       => pr_idseqttl         --Sequencial Titular
                                       ,pr_cod_operador   => '996'               --Codigo Operador
                                       ,pr_cod_agencia    => vr_cdagenci         --Codigo Agencia
                                       ,pr_nro_caixa      => 900                 --Numero Caixa
                                       ,pr_codigo_barras  => pr_cdbarras         --Codigo Barras
                                       ,pr_cdcritic       => vr_cdcritic         --Codigo do erro
                                       ,pr_dscritic       => vr_dscritic);       --Descricao do erro
      --Se Ocorreu erro
      IF nvl(vr_cdcritic,0) <> 0 OR TRIM(vr_dscritic) IS NOT NULL THEN
        --Selecionar primeiro erro
        OPEN cr_craperr (pr_cdcooper => pr_cdcooper
                        ,pr_cdagenci => vr_cdagenci
                        ,pr_nrdcaixa => To_Number(pr_nrdconta||pr_idseqttl));
        --Posicionar no proximo registro
        FETCH cr_craperr INTO rw_craperr;
        --Se nao encontrar
        IF cr_craperr%NOTFOUND THEN
          --Fechar Cursor
          CLOSE cr_craperr;
          --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
          vr_cdcritic := 1096; --Codigo de barras invalido
          vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
          --Levantar Excecao
          RAISE vr_exc_erro;
        ELSE
          --Retornar descricao critica
          vr_dscritic:= rw_craperr.dscritic;
        END IF;
        --Fechar Cursor
        CLOSE cr_craperr;
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_verifica_convenio');

      IF pr_indvalid <> 3 THEN /* Débito Automático */

      /* Agendamento */
      IF pr_idagenda = 2 THEN
        --Codigo Operador
        vr_cdoperad:= '1000';
      ELSIF pr_indvalid = 2 THEN /* Pagto. agendamento */
        --Codigo Operador
        vr_cdoperad:= '1001';
      ELSE
        --Codigo Operador
        vr_cdoperad:= '996';
      END IF;

      IF pr_idorigem = 3  THEN				
          IF SUBSTR(pr_cdbarras,2,1) = '5' THEN
            --Verificação para pagamento de GPS
            IF SUBSTR(pr_cdbarras,16,4) = '0270' THEN
              vr_cdcritic := 0;
              IF pr_flmobile = 1 THEN -- Canal Mobile
                --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
                vr_cdcritic := 1097; --Pagamento de GPS deve ser pago na opção ''Pagamentos - GPS
                vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
              ELSE -- Conta Online							
                --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
                vr_cdcritic := 1098; --GPS deve ser paga na opção ''Transações - GPS'' do menu de serviços
                vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
              END IF;
              RAISE vr_exc_erro;
              END IF;						
            
            --> validar se esta pagando tributo na opcao correta. 
            PAGA0003.pc_valid_pag_menu_trib 
                                   ( pr_cdbarras  => pr_cdbarras   -- Código de barras da guia
                                    ,pr_flmobile  => pr_flmobile   -- Indicador Mobile
                                    ,pr_tpdaguia  => 0             -- Tipo da guia (1  DARF, 2  DAS, 3-FGTS, 4-DAE)  
                                    ,pr_dscritic  => vr_dscritic); -- retorna critica
                                    
            IF vr_dscritic IS NOT NULL THEN
              RAISE vr_exc_erro;
            END IF;
          END IF;
        END IF;


      /* Retornar valores fatura */
      CXON0014.pc_retorna_valores_fatura (pr_cdcooper      => rw_crapcop.cdcooper  --Codigo Cooperativa
                                         ,pr_nrdconta      => pr_nrdconta     --Numero da Conta
                                         ,pr_idseqttl      => pr_idseqttl     --Sequencial Titular
                                         ,pr_cod_operador  => vr_cdoperad     --Codigo Operador
                                         ,pr_cod_agencia   => vr_cdagenci     --Codigo Agencia
                                         ,pr_nro_caixa     => 900             --Numero Caixa
                                         ,pr_fatura1       => pr_lindigi1     --Parte 1 fatura
                                         ,pr_fatura2       => pr_lindigi2     --Parte 2 fatura
                                         ,pr_fatura3       => pr_lindigi3     --Parte 3 fatura
                                         ,pr_fatura4       => pr_lindigi4     --Parte 4 fatura
                                         ,pr_codigo_barras => pr_cdbarras     --Codigo barras
                                         ,pr_cdseqfat      => pr_cdseqfat     --Sequencial faturamento
                                         ,pr_vlfatura      => pr_vlfatura     --Valor Fatura
                                         ,pr_nrdigfat      => pr_nrdigfat     --Digito Faturamento
                                         ,pr_iptu          => vr_flagiptu     --Indicador IPTU
                                         ,pr_cdcritic      => vr_cdcritic     --Codigo do erro
                                         ,pr_dscritic      => vr_dscritic);   --Descricao do erro
      --Se Ocorreu erro
      IF NVL(vr_cdcritic,0) <> 0 OR TRIM(vr_dscritic) IS NOT NULL THEN
        /* verifica o erro retornado */
        --Selecionar primeiro erro
        OPEN cr_craperr (pr_cdcooper => pr_cdcooper
                        ,pr_cdagenci => vr_cdagenci
                        ,pr_nrdcaixa => To_Number(pr_nrdconta||pr_idseqttl));
        --Posicionar no proximo registro
        FETCH cr_craperr INTO rw_craperr;
        --Se nao encontrar
        IF cr_craperr%NOTFOUND THEN
          --Fechar Cursor
          CLOSE cr_craperr;
          --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
          vr_cdcritic := 1096; --Codigo de barras invalido
          vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
          --Levantar Excecao
          RAISE vr_exc_erro;
        ELSE
          --Retornar descricao critica
          vr_dscritic:= rw_craperr.dscritic;
        END IF;
        --Fechar Cursor
        CLOSE cr_craperr;
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
      END IF; /* Débito Automático */
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_verifica_convenio');

      /* Pega o nome do convenio */
      OPEN cr_crapcon (pr_cdcooper => pr_cdcooper
                      ,pr_cdempcon => TO_NUMBER(SUBSTR(pr_cdbarras,16,4))
                      ,pr_cdsegmto => TO_NUMBER(SUBSTR(pr_cdbarras,2,1)));
      --Posicionar no proximo registro
      FETCH cr_crapcon INTO rw_crapcon;
      --Se nao encontrar
      IF cr_crapcon%NOTFOUND THEN
        --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        vr_cdcritic:= 563; --Convenio nao encontrado
        vr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        --Fechar Cursor
        CLOSE cr_crapcon;
        --Levantar Excecao
        RAISE vr_exc_erro;
      ELSE
        --Fechar Cursor
        CLOSE cr_crapcon;
        IF rw_crapcon.flginter = 0 THEN --false
          --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
          vr_cdcritic := 1103; --Convenio nao habilitado para internet
          vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
          --Levantar Excecao
          RAISE vr_exc_erro;
        END IF;
        --Retornar nome convenio
        pr_nmextcon:= rw_crapcon.nmextcon;
      END IF;

      -- Verifica se a data esta cadastrada
      OPEN BTCH0001.cr_crapdat(pr_cdcooper => pr_cdcooper);
      FETCH BTCH0001.cr_crapdat INTO rw_crapdat;
      -- Se não encontrar
      IF BTCH0001.cr_crapdat%NOTFOUND THEN
        -- Fechar o cursor pois haverá raise
        CLOSE BTCH0001.cr_crapdat;
        --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        -- Montar mensagem de critica
        vr_cdcritic := 1; --Registro de controles de data nao encontrado
        vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        RAISE vr_exc_erro;
      ELSE
        -- Apenas fechar o cursor
        CLOSE BTCH0001.cr_crapdat;
      END IF;
      /* Verificar se ja foi feito por algum operador */
      IF  pr_indvalid = 0 THEN
        IF pr_idagenda = 1 THEN
          --Data pagamento
          vr_dtmvtopg:= rw_crapdat.dtmvtocd;
        ELSE
          --Data pagamento recebe agendamento
          vr_dtmvtopg:= pr_dtagenda;
        END IF;
        --Selecionar transacoes operador juridico
        OPEN cr_tbpagto_trans_pend(pr_dtmvtopg => vr_dtmvtopg);
        --Posicionar no proximo registro
        FETCH cr_tbpagto_trans_pend INTO rw_tbpagto_trans_pend;
        --Se encontrar
        IF cr_tbpagto_trans_pend%FOUND THEN
          --Fechar Cursor
          CLOSE cr_tbpagto_trans_pend;
          --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
            --Mensagem erro
          vr_cdcritic := 1104; --Pagamento ja registrado para aprovacao. Verifique suas transacoes pendentes
          vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);		   			
          --Levantar Excecao
          RAISE vr_exc_erro;
        END IF;
        --Fechar Cursor
        IF cr_tbpagto_trans_pend%ISOPEN THEN
          CLOSE cr_tbpagto_trans_pend;
        END IF;
      END IF;

      IF pr_idagenda = 2 THEN /** Agendamento **/
      
        -- Se for convenio 1-sicredi 2-Bancoob
        IF rw_crapcon.tparrecd IN (1,2) THEN 
          /* Validação referente aos dias de tolerancia */
          cxon0014.pc_verifica_dtlimite_tributo(pr_cdcooper      => pr_cdcooper
                                               ,pr_cdagenci      => vr_cdagenci
                                               ,pr_cdempcon      => rw_crapcon.cdempcon
                                               ,pr_cdsegmto      => rw_crapcon.cdsegmto
                                               ,pr_codigo_barras => pr_cdbarras
                                               ,pr_dtmvtopg      => pr_dtagenda
                                               ,pr_flnrtole      => TRUE                                    
                                               ,pr_dttolera      => vr_dttolera
                                               ,pr_cdcritic      => vr_cdcritic
                                               ,pr_dscritic      => vr_dscritic);

          IF nvl(vr_cdcritic,0) <> 0 OR TRIM(vr_dscritic) IS NOT NULL THEN
            --Levantar Excecao
            RAISE vr_exc_erro;
          END IF;
	        -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		      GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_verifica_convenio');
        END IF;

        -- Montar a chave de acesso para buscar os dias de tolerando do convenio
        -- e identificar se o Convenio pode ser pago vencido
        vr_cdacesso:= 'VALIDA_PAGTO_' ||
                      to_char(rw_crapcon.cdempcon) || '_' ||
                      to_char(rw_crapcon.cdsegmto);
                      
        -- Buscar os dias de tolerancia
        OPEN cr_crapprm_dias_tolera(pr_cdacesso => vr_cdacesso);
        FETCH cr_crapprm_dias_tolera INTO vr_qtdias_tolera;
        
        -- Identifica se existe a chave para validar o vencimento do convenio
        -- Validar se fatura esta vencida
        IF cr_crapprm_dias_tolera%FOUND THEN

          -- Apenas fecha o cursor
          CLOSE cr_crapprm_dias_tolera;

          -- Validar vencimento - DIAS DE TOLERANCIA dias
          IF To_Number(SUBSTR(pr_cdbarras,20,8)) < To_Number(To_Char(pr_dtagenda - vr_qtdias_tolera,'YYYYMMDD')) THEN
            --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
            vr_cdcritic := 1106; --Agendamento nao permitido apos o vencimento
            vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
            --Levantar Excecao
            RAISE vr_exc_erro;            
          END IF;

        ELSE
          -- Como essa chave nao existe, nao validamos o vencimento
          -- Apenas fecha o cursor
          CLOSE cr_crapprm_dias_tolera;
        END IF;
        
        --Selecionar lancamentos automaticos
        OPEN cr_craplau (pr_cdcooper => pr_cdcooper
                        ,pr_nrdconta => pr_nrdconta
                        ,pr_dtmvtopg => pr_dtagenda
                        ,pr_cdagenci => vr_cdagenci
                        ,pr_cdbccxlt => 100
                        ,pr_nrdolote => 11900
                        ,pr_dscodbar => pr_cdbarras);
        --Posicionar no proximo registro
        FETCH cr_craplau INTO rw_craplau;
        --Se encontrar
        IF cr_craplau%FOUND THEN
          --Fechar Cursor
          CLOSE cr_craplau;
          --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
          --Mensagem erro 
          vr_cdcritic := 1109; --Agendamento ja existe
          vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);	
          --Levantar Excecao
          RAISE vr_exc_erro;
        END IF;
        --Fechar Cursor
        CLOSE cr_craplau;

        /* Validacao referente aos dias de tolerancia ao agendar pgto. de Convenio SICREDI */
        IF  rw_crapcon.tparrecd = 1 THEN
          pc_verif_dias_toler_sicredi (pr_cdcooper => pr_cdcooper    --Codigo Cooperativa
                                      ,pr_dtagenda => pr_dtagenda    --Data Agendamento
                                      ,pr_cdbarras => pr_cdbarras    --Codigo Barras
                                      ,pr_cdcritic => vr_cdcritic    --C-odigo da critica
                                      ,pr_dscritic => vr_dscritic);  --Descricao critica);
          --Se Ocorreu erro
          IF NVL(vr_cdcritic,0) <> 0 OR TRIM(vr_dscritic) IS NOT NULL THEN
            --Levantar Excecao
            RAISE vr_exc_erro;
          END IF;
	        -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		      GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_verifica_convenio');
        END IF;
        /** Verifica se ja existe fatura agendada com o sequencial **/
        --Selecionar lancamentos automaticos
        FOR rw_craplau IN cr_craplau2 (pr_cdcooper => pr_cdcooper
                                      ,pr_dtmvtopg => pr_dtagenda
                                      ,pr_cdagenci => vr_cdagenci
                                      ,pr_cdbccxlt => 100
                                      ,pr_nrdolote => 11900) LOOP
          --Se a linha digitavel tiver tamanho 55
          IF LENGTH(rw_craplau.dslindig) = 55 THEN
            --Buscar sequencial fatura
            CXON0014.pc_busca_sequencial_fatura(pr_cdhistor      => rw_crapcon.cdhistor --Codigo historico
                                               ,pr_codigo_barras => rw_craplau.dscodbar --Codigo Barras
                                               ,pr_cdseqfat      => vr_cdseqfat         --Numero Sequencial Fatura
                                               ,pr_cdcritic      => vr_cdcritic         --C-odigo da critica
                                               ,pr_dscritic      => vr_dscritic);       --Descricao critica
            --Se Ocorreu erro
            IF NVL(vr_cdcritic,0) <> 0 OR TRIM(vr_dscritic) IS NOT NULL THEN
              --Levantar Excecao
              RAISE vr_exc_erro;
            END IF;
            --Se a sequencia encontrada = passada como parametro
            IF vr_cdseqfat = pr_cdseqfat THEN
              --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
              --Mensagem erro
              vr_cdcritic := 1109; --Agendamento ja existe
              vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);	
              --Levantar Excecao
              RAISE vr_exc_erro;
            END IF;
          END IF;
	        -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		      GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_verifica_convenio');
        END LOOP;
      END IF;
      -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
      GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);
    EXCEPTION
      -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415      
      -- Disparadores: paga0002.pc_InternetBank26              - Necessario avaliar    
      --               paga0002.pc_InternetBank27              - Necessario avaliar    
      --               paga0001.pc_debita_agendto_pagto        - Não grava TBGEN
      --               paga0001.pc_verifica_convenio_prog      - Não grava TBGEN
      --                     
      --               Eliminar a gravação do Log aqui quando acertar a paga0002.pc_InternetBank26
      --                                                                        ,pc_InternetBank27  
      WHEN vr_exc_erro THEN
        pr_cdcritic:= vr_cdcritic;
        pr_dscritic:= vr_dscritic;
      WHEN OTHERS THEN
        -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
        CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
        -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        pr_cdcritic:= 9999;
        pr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic) ||
                      'PAGA0001.pc_verifica_convenio. ' || SQLERRM || '.' || vr_dsparame;
    END;
  END pc_verifica_convenio;

  /* Chamada para ser utilizada no progress
     Verificar os Convenios */
  PROCEDURE pc_verifica_convenio_prog(pr_cdcooper IN  crapcop.cdcooper%TYPE   --Codigo da cooperativa
                                     ,pr_nrdconta IN  crapttl.nrdconta%TYPE   --Numero da conta
                                     ,pr_idseqttl IN  crapttl.idseqttl%TYPE   --Sequencial titular
                                     ,pr_idagenda IN  INTEGER                 --Indicador agendamento
                                     ,pr_lindigi1 IN OUT NUMBER               --Linha digitavel 1
                                     ,pr_lindigi2 IN OUT NUMBER               --Linha digitavel 2
                                     ,pr_lindigi3 IN OUT NUMBER               --Linha digitavel 3
                                     ,pr_lindigi4 IN OUT NUMBER               --Linha digitavel 4
                                     ,pr_cdbarras IN OUT VARCHAR2             --Codigo de Barras
                                     ,pr_dtvencto IN OUT DATE                 --Data Vencimento
                                     ,pr_vllanmto IN  NUMBER                  --Valor Lancamento
                                     ,pr_dtagenda IN OUT DATE                 --Data agendamento
                                     ,pr_idorigem IN  INTEGER                 --Indicador de origem
                                     ,pr_indvalid IN  INTEGER                 --Indicador se ja foi feito
                                     ,pr_nmextcon OUT VARCHAR2                --Nome do banco
                                     ,pr_cdseqfat OUT VARCHAR2                  --Codigo Sequencial fatura
                                     ,pr_vlfatura OUT NUMBER                  --Valor fatura
                                     ,pr_nrdigfat OUT INTEGER                 --Numero Digito Fatura
                                     ,pr_dstransa OUT VARCHAR2                --Descricao transacao
                                     ,pr_cdcritic OUT INTEGER                 --Codigo da critica
                                     ,pr_dscritic OUT VARCHAR2) IS            --Descricao critica

    -- ..........................................................................
    --
    --  Programa : pc_verifica_convenio_prog        Antiga: B1wgen0016.p/verifica_convenio
    --  Sistema  : Rotinas Internet
    --  Sigla    : AGEN
    --  Autor    : Odirlei Busana - AMcom
    --  Data     : Maio/2015.                   Ultima atualizacao: 15/12/2017
    --
    --  Dados referentes ao programa:
    --
    --   Frequencia: Sempre que for chamado
    --   Objetivo  : Verificar Convenios
    --
    --   Atualização:      
    --               15/12/2017 - Incluido nome do módulo logado
    --                            No caso de erro de programa gravar tabela especifica de log                     
    --                            Ajuste mensagem de erro 
    --                            (Belli - Envolti - Chamado 779415)    
    --
    -- ..........................................................................
    vr_cdseqfat varchar2(50);
    --Agrupa os parametros - 15/12/2017 - Chamado 779415 
    vr_dsparame VARCHAR2(4000);
  BEGIN
	  -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_verifica_convenio_prog');
    
    --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
    vr_dsparame :=  ' pr_cdcooper:' || pr_cdcooper || 
                    ', pr_nrdconta:' || pr_nrdconta ||
                    ', pr_idseqttl:' || pr_idseqttl ||
                    ', pr_idagenda:' || pr_idagenda ||
                    ', pr_lindigi1:' || pr_lindigi1 ||
                    ', pr_lindigi2:' || pr_lindigi2 ||
                    ', pr_lindigi3:' || pr_lindigi3 ||
                    ', pr_lindigi4:' || pr_lindigi4 ||
                    ', pr_cdbarras:' || pr_cdbarras ||
                    ', pr_dtvencto:' || pr_dtvencto ||
                    ', pr_vllanmto:' || pr_vllanmto ||
                    ', pr_dtagenda:' || pr_dtagenda ||
                    ', pr_idorigem:' || pr_idorigem ||
                    ', pr_indvalid:' || pr_indvalid;
    
    pc_verifica_convenio (pr_cdcooper => pr_cdcooper  --Codigo da cooperativa
                         ,pr_nrdconta => pr_nrdconta  --Numero da conta
                         ,pr_idseqttl => pr_idseqttl  --Sequencial titular
                         ,pr_idagenda => pr_idagenda  --Indicador agendamento
                         ,pr_lindigi1 => pr_lindigi1  --Linha digitavel 1
                         ,pr_lindigi2 => pr_lindigi2  --Linha digitavel 2
                         ,pr_lindigi3 => pr_lindigi3  --Linha digitavel 3
                         ,pr_lindigi4 => pr_lindigi4  --Linha digitavel 4
                         ,pr_cdbarras => pr_cdbarras  --Codigo de Barras
                         ,pr_dtvencto => pr_dtvencto  --Data Vencimento
                         ,pr_vllanmto => pr_vllanmto  --Valor Lancamento
                         ,pr_dtagenda => pr_dtagenda  --Data agendamento
                         ,pr_idorigem => pr_idorigem  --Indicador de origem
                         ,pr_indvalid => pr_indvalid  --Nao validar horario limite
						 ,pr_flmobile => 0            --Indicador Mobile
                         ,pr_nmextcon => pr_nmextcon  --Nome do banco
                         ,pr_cdseqfat => vr_cdseqfat  --Codigo Sequencial fatura
                         ,pr_vlfatura => pr_vlfatura  --Valor fatura
                         ,pr_nrdigfat => pr_nrdigfat  --Numero Digito Fatura
                         ,pr_dstransa => pr_dstransa  --Descricao transacao
                         ,pr_cdcritic => pr_cdcritic  --C-odigo da critica
                         ,pr_dscritic => pr_dscritic);  --Descricao critica
     -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
     IF NVL(pr_cdcritic,0) = 9999 THEN
       pr_dscritic := pr_dscritic ||
                      ' - ' || vr_dsparame ||
                      ', PAGA0001.pc_verifica_convenio_prog';
     END IF;
     -- transformar o number em char pois ultrapassa o limite do oracle,
     -- transformando esse em hexa
     pr_cdseqfat := to_char(vr_cdseqfat);
     -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		 GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);
  EXCEPTION
      -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415      
      -- Disparadores: b1wgen0016.verifica_convenio            - Não grava TBGEN - Necessario Avaliar
    WHEN OTHERS THEN
      -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
      CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
      -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
      pr_cdcritic:= 9999;
      pr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic) ||
                    'PAGA0001.pc_verifica_convenio_prog. ' || SQLERRM || '.' || vr_dsparame;
  END;

  /* Chamada para utilizar no progress
     Pagar os Convenios */
  PROCEDURE pc_paga_convenio_prog ( pr_cdcooper IN  crapcop.cdcooper%TYPE  -- Codigo da cooperativa
                                   ,pr_nrdconta IN  crapttl.nrdconta%TYPE  -- Numero da conta
                                   ,pr_idseqttl IN  crapttl.idseqttl%TYPE  -- Sequencial titular
                                   ,pr_cdbarras IN  VARCHAR2               -- Codigo de Barras
                                   ,pr_dscedent IN  VARCHAR2 DEFAULT NULL  -- descrição do cedente
                                   ,pr_cdseqfat IN  VARCHAR2               -- Codigo Sequencial fatura
                                   ,pr_vlfatura IN  NUMBER                 -- Valor fatura
                                   ,pr_nrdigfat IN  INTEGER                -- Numero Digito Fatura
                                   ,pr_flgagend IN  INTEGER /*1-True,0-Fals*/-- Flag agendado
                                   ,pr_idorigem IN  INTEGER                -- Indicador de origem
                                   ,pr_cdcoptfn IN  INTEGER                -- Codigo cooperativa transacao
                                   ,pr_cdagetfn IN  INTEGER                -- Codigo Agencia transacao
                                   ,pr_nrterfin IN  INTEGER                -- Numero terminal financeiro
                                   ,pr_nrcpfope IN  NUMBER                 -- Numero cpf operador
                                   ,pr_flmobile IN INTEGER                  --Indicador Mobile
                                   ,pr_iptransa IN VARCHAR2 DEFAULT NULL   -- Ip da transação
                                   ,pr_iddispos IN VARCHAR2 DEFAULT NULL   -- id do dispositivo                                   
                                   ,pr_dstransa OUT VARCHAR2               -- Descricao transacao
                                   ,pr_dsprotoc OUT VARCHAR2               -- Descricao Protocolo
                                   ,pr_cdbcoctl OUT VARCHAR2               -- Codigo Banco Centralizador
                                   ,pr_cdagectl OUT VARCHAR2               -- Codigo Agencia Centralizadora
                                   ,pr_cdcritic OUT INTEGER                -- Codigo da critica
                                   ,pr_dscritic OUT VARCHAR2               -- Descricao critica
                                   ,pr_msgofatr OUT VARCHAR2
                                   ,pr_cdempcon OUT NUMBER
								   ,pr_cdsegmto OUT VARCHAR2) IS             

    -- ..........................................................................
    --
    --  Programa : pc_paga_convenio_prog              Antiga: B1wgen0016.p/paga_convenio
    --  Sistema  : Rotinas Internet
    --  Sigla    : CRED
    --  Autor    : Odirlei Busana - AMcom
    --  Data     : Maio/2015.                   Ultima atualizacao: 15/12/2017
    --
    --  Dados referentes ao programa:
    --
    --   Frequencia: Sempre que for chamado
    --   Objetivo  : Pagar Convenios
    --
    --   Atualização:  14/05/2015 - Criado procedimento para ser utilizado pelo progress
    --                              (Odirlei-AMcom)
    --
    --                 15/12/2017 - Incluido nome do módulo logado
    --                              No caso de erro de programa gravar tabela especifica de log                     
    --                              Ajuste mensagem de erro 
    --                              (Belli - Envolti - Chamado 779415)    
    --
    -- ..........................................................................

    --Agrupa os parametros - 15/12/2017 - Chamado 779415 
    vr_dsparame VARCHAR2(4000);
  BEGIN
	  -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_paga_convenio_prog');
    
    --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
    vr_dsparame :=    ' pr_cdcooper:' || pr_cdcooper ||
                      ', pr_nrdconta:' || pr_nrdconta ||
                      ', pr_idseqttl:' || pr_idseqttl ||
                      ', pr_cdbarras:' || pr_cdbarras ||
                      ', pr_dscedent:' || pr_dscedent ||
                      ', pr_cdseqfat:' || pr_cdseqfat ||
                      ', pr_vlfatura:' || pr_vlfatura ||
                      ', pr_nrdigfat:' || pr_nrdigfat ||
                      ', pr_flgagend:' || pr_flgagend ||
                      ', pr_idorigem:' || pr_idorigem ||
                      ', pr_cdcoptfn:' || pr_cdcoptfn ||
                      ', pr_cdagetfn:' || pr_cdagetfn ||
                      ', pr_nrterfin:' || pr_nrterfin ||
                      ', pr_nrcpfope:' || pr_nrcpfope ||
                      ', pr_flmobile:' || pr_flmobile;
    
    pc_paga_convenio (pr_cdcooper => pr_cdcooper            -- Codigo da cooperativa
                     ,pr_nrdconta => pr_nrdconta            -- Numero da conta
                     ,pr_idseqttl => pr_idseqttl            -- Sequencial titular
                     ,pr_cdbarras => pr_cdbarras            -- Codigo de Barras
                     ,pr_dscedent => pr_dscedent            -- Descrição de cedente
                     ,pr_cdseqfat => to_number(pr_cdseqfat) -- Codigo Sequencial fatura
                     ,pr_vlfatura => pr_vlfatura            -- Valor fatura
                     ,pr_nrdigfat => pr_nrdigfat            -- Numero Digito Fatura
                     ,pr_flgagend => pr_flgagend            -- Flag agendado
                     ,pr_idorigem => pr_idorigem            -- Indicador de origem
                     ,pr_cdcoptfn => pr_cdcoptfn            -- Codigo cooperativa transacao
                     ,pr_cdagetfn => pr_cdagetfn            -- Codigo Agencia transacao
                     ,pr_nrterfin => pr_nrterfin            -- Numero terminal financeiro
                     ,pr_nrcpfope => pr_nrcpfope            -- Numero cpf operador
                     ,pr_flmobile => pr_flmobile            -- Indicador Mobile
                     ,pr_iptransa => pr_iptransa            -- Ip da transação
                     ,pr_iddispos => pr_iddispos            -- id do dispositivo                                                                      
                     ,pr_dstransa => pr_dstransa            -- Descricao transacao
                     ,pr_dsprotoc => pr_dsprotoc            -- Descricao Protocolo
                     ,pr_cdbcoctl => pr_cdbcoctl            -- Codigo Banco Centralizador
                     ,pr_cdagectl => pr_cdagectl            -- Codigo Agencia Centralizadora
                     ,pr_cdcritic => pr_cdcritic            -- Codigo da critica
                     ,pr_dscritic => pr_dscritic            -- Descricao critica
                     ,pr_msgofatr => pr_msgofatr
                     ,pr_cdempcon => pr_cdempcon
					 ,pr_cdsegmto => pr_cdsegmto);          
    -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
    IF NVL(pr_cdcritic,0) = 9999 THEN
      pr_dscritic := pr_dscritic ||
                     ' - ' || vr_dsparame ||
                     ', PAGA0001.pc_paga_convenio_prog';
    END IF;   
	  -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);   
  EXCEPTION
    -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415      
    -- Disparadores: b1wgen0016.paga_convenio     - Não grava TBGEN - Necessario Avaliar
    WHEN OTHERS THEN
      -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
      CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
      IF pr_dscritic IS NULL THEN
        -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        pr_cdcritic:= 9999;
        pr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic) ||
                      'PAGA0001.pc_paga_convenio_prog. ' || SQLERRM ||
                      '.' || vr_dsparame;
      END IF;
  END pc_paga_convenio_prog;

  /* Procedure para debitar os agendamentos de pagamentos */
  PROCEDURE pc_debita_agendto_pagto  (pr_cdcooper IN crapcop.cdcooper%TYPE   --Codigo Cooperativa
                                     ,pr_cdagenci IN crapage.cdagenci%TYPE   --Codigo Agencia
                                     ,pr_nrdcaixa IN craplot.nrdcaixa%TYPE   --Numero Caixa
                                     ,pr_cdoperad IN crapope.cdoperad%TYPE   --Operador
                                     ,pr_nmdatela IN craptel.nmdatela%TYPE   --Nome programa
                                     ,pr_idorigem IN INTEGER                 --origem (TAA ou Internet)
                                     ,pr_dtmvtolt IN crapdat.dtmvtolt%TYPE   --Data pagamento
                                     ,pr_inproces IN crapdat.inproces%TYPE   --Indicador Processo
                                     ,pr_flsgproc IN PLS_INTEGER             --Flag segundo processamento
                                     ,pr_craplau_progress_recid IN NUMBER    --Recid lancamento automático
                                     ,pr_cdcritic OUT INTEGER      --Codigo da Critica
                                     ,pr_dscritic OUT VARCHAR2) IS  --Descricao da critica);
    /* ..........................................................................

     Programa : pc_debita_agendto_pagto        Antiga: B1wgen0016.p/debita-agendamento-pagamento
     Sistema  : Rotinas Internet
     Sigla    : INET
     Autor    : Alisson C. Berrido - AMcom
     Data     : Junho/2013.                   Ultima atualizacao: 15/12/2017

     Dados referentes ao programa:

      Frequencia: Sempre que for chamado
      Objetivo  : Efetuar debitos.de agendamento de pagamentos

      Alteracoes: 31/01/2014 - Alterar Rowid pelo Progress Recid (Gabriel)

                  19/05/2014 - Alterado para ignorar o erro caso não consiga mudar o
                               titulo sacado dda para "em aberto" (Odirlei/AMcom)

                  21/05/2014 - Ajustes para buscar a descrição da critica caso
                               só tenha o codigo, e ajustado para durante o processamento
                               usar somente as variaveis vr_dscritic e vr_cdcritic (Odirlei/AMcom)

                  29/10/2014 - Ajustado para quando atualizar craplau.insitlau = 4,
                               atualizar o campo dtdebito = craplau.dtmvtop em vez de
                               rw_craplau.dtmvtopg. (Jorge/Elton - SD 192000)

                  10/02/2015 - Criação de mensagem de notificação no internetbank ao gerar
                               crítica de insuficiência de saldo para débito (Agend./Pagam.) (Lunelli - SD. 229251)

                   30/03/2015 - Correção no formato de data das mensagens enviadas por
                               crítica de insuficiência de saldo para débito (Lunelli - SD. 267208)

                  16/09/2015 - Melhoria performace, inclusao do parametro de tipo de busca na chamada do procedimento
                               EXTR0001.pc_obtem_saldo_dia, para utilizar a dtmvtoan como base na busca(Odirlei-AMcom)

                  24/09/2015 - Realizado a inclusão do pr_nmdatela (Adriano - SD 328034).
                  
                  20/11/2015 - Tratamento para nao utilizar inprocess, rotina sera rodada 
                               via job SD358495 (Odirlei-AMcom)

                  21/12/2015 - Incluido verificacao de situação de transacao pendente, Prj. Assinatura
                               Conjunta (Jean Michel).             

                  05/04/2016 - Ajustado conforme solicitação do SD 429445 (Jean Michel).            
                  
                  03/08/2017 - Incluir tratamento para atualizar a situação do lancamento para
                               4 caso a fatura ja tenha sido arrecadada  e não for no ultimo 
                               processo (Lucas Ranghetti #711123)       
                               
                  15/12/2017 - Incluido nome do módulo logado
                               No caso de erro de programa gravar tabela especifica de log                     
                               Ajuste mensagem de erro 
                               (Belli - Envolti - Chamado 779415)    
                               
                  21/12/2017 - Ajuste na chamada da procedure pc_verifica_titulo  para que o 
                               codigo de controle de consulta na CIP (craplau.cdctrlcs)
                               seja passado como parametro, dessa forma o titulo é validado 
                               com os mesmos dados que permitiram agendar o pagamento 
                               (Douglas - Chamado 815286)

				  10/01/2018 - Ajustes para arrecadacao de convenios FGTS/DAE.
                               PRJ406 - FGTS(Odirlei-AMcom) 
                               
                  05/06/2018 - Ajustes para correta passagem de parametor na
                               arrecadacao de convenios FGTS/DAE.
                               PRJ406 - FGTS(Odirlei-AMcom)              
                               
                  08/01/2019 - Inclusão da flag "pr_flgagend" na chamada da rotina 
                               "paga0003.pc_paga_tributos". Isso para evitar a validação
                               anti-fraude no OFSAA na efetivação de agendamentos,
                               que já tiveram a validaçaõ no momento zero.
                               Wagner  - Sustentação -  #INC0029563.
                               
     ..........................................................................*/

  BEGIN
    DECLARE
      --Tipo da tabela de saldos
      vr_tab_saldo EXTR0001.typ_tab_saldos;
      --Tipo de tabelas de limites
      vr_tab_limite INET0001.typ_tab_limite;
      vr_tab_internet INET0001.typ_tab_internet;
      --Tipo de tabela de erro
      vr_tab_erro GENE0001.typ_tab_erro;

      -- Busca os Lancamentos Automaticos
      CURSOR cr_craplau(pr_progress_recid craplau.progress_recid%TYPE) IS
      SELECT lau.nrdconta
            ,lau.insitlau
            ,lau.vllanaut
            ,lau.idseqttl
            ,lau.dtmvtopg
            ,lau.cdtiptra
            ,lau.nrcpfope
            ,decode(lau.cdtiptra,10,darf_das.dslinha_digitavel,lau.dslindig) dslindig
            ,decode(lau.cdtiptra,10,darf_das.dscod_barras     ,lau.dscodbar) dscodbar
            ,lau.dscedent
            ,lau.idtitdda
            ,lau.nrseqagp
            ,lau.ROWID
            ,lau.cdtrapen
            --> utilizar campo da darf_das apenas se for tipo 10
            ,decode(lau.cdtiptra,10,darf_das.tpcaptura,1) tpcaptura 
			      ,decode(lau.cdtiptra,10,darf_das.tppagamento
                                ,12,trib.tppagamento
                                ,13,trib.tppagamento)      tppagamento
			,DECODE(darf_das.tppagamento,1,'DARF',2,'DAS') dsdarfdas
            ,decode(lau.cdtiptra,10,darf_das.dtapuracao
                                ,12,trib.dtcompetencia
                                ,13,trib.dtcompetencia)    dtapuracao
            ,decode(lau.cdtiptra,10,darf_das.nrcpfcgc
                                ,12,trib.nridentificacao
                                ,13,trib.nridentificacao)  nrcpfcgc
            ,decode(lau.cdtiptra,10,darf_das.cdtributo
                                ,12,trib.cdtributo
                                ,13,trib.cdtributo)        cdtributo
            ,decode(lau.cdtiptra,10,darf_das.nrrefere
                                ,12,trib.nridentificador
                                ,13,trib.nridentificador)  nrrefere
            ,decode(lau.cdtiptra,10,darf_das.dtvencto
                                ,12,trib.dtvalidade
                                ,13,trib.dtvalidade)       dtvencto
            ,decode(lau.cdtiptra,10,darf_das.dsidentif_pagto
                                ,12,trib.dsidenti_pagto
                                ,13,trib.dsidenti_pagto) dsidentif_pagto
            ,darf_das.vlprincipal
            ,darf_das.vlmulta
            ,darf_das.vljuros
            ,darf_das.vlreceita_bruta
            ,darf_das.vlpercentual
            ,darf_das.dsnome_fone
            --> utilizar campo conforme tipo de transacao
            ,decode(lau.cdtiptra,10,darf_das.tpleitura_docto
                                ,12,trib.tpleitura_docto
                                ,13,trib.tpleitura_docto) tpleitura_docto            
            ,cxon0041.fn_busca_sequencial_darf(pr_dtapurac => darf_das.dtapuracao -- Data da Apuracao
                                              ,pr_nrcpfcgc => darf_das.nrcpfcgc -- CPF/CNPJ
                                              ,pr_cdtribut => darf_das.cdtributo -- Codigo do Tributo
                                              ,pr_dtlimite => darf_das.dtvencto -- Data de Limite
                                              ,pr_vlrtotal => lau.vllanaut -- Valor Total
                                              ) cdseqfat
            ,REPLACE(REPLACE(REPLACE(REPLACE(
                    'Pagamento de #TIPO# para #IDENTIF# agendado para #DATADEB# no valor de R$ #VALOR#.'
                   ,'#TIPO#',DECODE(darf_das.tppagamento,1,'DARF',2,'DAS'))
                   ,'#IDENTIF#',darf_das.dsidentif_pagto)
                   ,'#DATADEB#',to_char(darf_das.dtapuracao, 'DD/MM/YYYY'))
                   ,'#VALOR#',to_char(lau.vllanaut, 'FM999G999G990D00')) dsmsgsaldo --[TODO] Utilizar isto aqui na hora de gerar a mensagem - Não precisa implementar para TAA
            ,lau.cdctrlcs
        FROM craplau lau
            ,tbpagto_agend_darf_das darf_das
            ,tbpagto_agend_tributos trib
       WHERE lau.idlancto = darf_das.idlancto(+)
         AND lau.idlancto = trib.idlancto(+)
         AND lau.progress_recid = pr_progress_recid;
      rw_craplau cr_craplau%ROWTYPE;

      --Variaveis Locais
      vr_dstransa  VARCHAR2(100);
      vr_dstrans1  VARCHAR2(100);
      vr_dsorigem  VARCHAR2(100);
      vr_nmconban  VARCHAR2(100);
      vr_dsdmensg  VARCHAR2(1000);
      vr_nmconven  VARCHAR2(200);
      vr_dscodbar  VARCHAR2(100);
      vr_dsprotoc  VARCHAR2(100);
      vr_cdbcoctl  VARCHAR2(100);
      vr_cdagectl  VARCHAR2(100);
      vr_cdseqfat  VARCHAR2(100);
      vr_vllanaut  NUMBER;
      vr_vlrdocum  NUMBER;
      vr_nrcnvcob  NUMBER;
      vr_nrboleto  NUMBER;
      vr_lindigi1  NUMBER;
      vr_lindigi2  NUMBER;
      vr_lindigi3  NUMBER;
      vr_lindigi4  NUMBER;
      vr_lindigi5  NUMBER;
      vr_dtvencto  DATE;
      vr_contador  INTEGER;
      vr_nrdigfat  INTEGER;
      vr_nrctacob  INTEGER;
      vr_insittit  INTEGER;
      vr_intitcop  INTEGER;
      vr_nrdctabb  INTEGER;
      vr_insitlau  INTEGER;
      vr_indtrans  INTEGER;
      vr_flgtrans  BOOLEAN;
      vr_flerrtaa  BOOLEAN;
      vr_dtdifere  BOOLEAN;
      vr_vldifere  BOOLEAN;
      vr_idpaggps  BOOLEAN; -- Indicar pagamento de GPS
      vr_nrdrowid  ROWID;
      vr_indsaldo  NUMBER;
      vr_cdmotivo_mensagem tbgen_notif_automatica_prm.cdmotivo_mensagem%TYPE;
      
      --Variaveis cobranca registrada
      vr_cobregis  BOOLEAN;
      vr_dssituac  VARCHAR2(100);
      vr_dssituac2 VARCHAR2(100);
      vr_msgalert  VARCHAR2(100);
      vr_vlrjuros  NUMBER;
      vr_vlrmulta  NUMBER;
      vr_vldescto  NUMBER;
      vr_vlabatim  NUMBER;
      vr_vloutdeb  NUMBER;
      vr_vloutcre  NUMBER;
      vr_flultexe  INTEGER;
      vr_qtdexec   INTEGER;
      
      -- variaveis debito facil
      vr_msgofatr  VARCHAR2(100);
      vr_cdempcon NUMBER;
      vr_cdsegmto VARCHAR2(100);
      --Variaveis de Erro
      vr_des_erro  VARCHAR2(3);
      vr_cdcritic  crapcri.cdcritic%TYPE;
      vr_dscritic  VARCHAR2(4000);
      vr_dscritic2  VARCHAR2(4000);
      vr_exc_erro  EXCEPTION;
      --Agrupa os parametros - 15/12/2017 - Chamado 779415 
      vr_dsparame VARCHAR2(4000);
    BEGIN
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_debita_agendto_pagto');
      
      --Inicializar variaveis retorno erro
      pr_cdcritic:= NULL;
      pr_dscritic:= NULL;
      
      --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
      vr_dsparame :=  ' pr_cdcooper:' || pr_cdcooper || 
                      ', pr_cdagenci:' || pr_cdagenci ||
                      ', pr_nrdcaixa:' || pr_nrdcaixa ||
                      ', pr_cdoperad:' || pr_cdoperad ||
                      ', pr_nmdatela:' || pr_nmdatela ||
                      ', pr_idorigem:' || pr_idorigem ||
                      ', pr_dtmvtolt:' || pr_dtmvtolt ||
                      ', pr_inproces:' || pr_inproces ||
                      ', pr_flsgproc:' || pr_flsgproc;
      
      --Atribuir false para transacao e erro taa
      vr_flgtrans:= FALSE;
      vr_flerrtaa:= FALSE;
      --Descricao da transacao
      vr_dstransa:= 'Efetua agendamento para pagamento';
      --Descricao da origem
      vr_dsorigem:= TRIM(GENE0001.vr_vet_des_origens(pr_idorigem));

      --Savepoint para abortar sem alterar
      SAVEPOINT TRANS_UNDO;

      --Verificar se o lancamento automatico existe
      OPEN cr_craplau (pr_progress_recid => pr_craplau_progress_recid);
      FETCH cr_craplau INTO rw_craplau;
      IF cr_craplau%NOTFOUND THEN
         --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
         vr_cdcritic := 1071; --Registro de agendamento nao encontrado.
         vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        --Fechar Cursor
        CLOSE cr_craplau;
        --Levantar Excecao
        RAISE vr_exc_erro;
      ELSE
        --Situacao lancamento
        vr_insitlau:= rw_craplau.insitlau;
      END IF;
      --Fechar Cursor
      CLOSE cr_craplau;

	  --Verificar se a cooperativa existe
	  OPEN cr_crapcop (pr_cdcooper => pr_cdcooper);
	  FETCH cr_crapcop INTO rw_crapcop;
	  IF cr_crapcop%NOTFOUND THEN				
      --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
      vr_cdcritic := 1070; --Registro de cooperativa nao encontrado
      vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
	    --Fechar Cursor
	    CLOSE cr_crapcop;
	    --Levantar Excecao
	    RAISE vr_exc_erro;
	  END IF;
	  --Fechar Cursor
	  CLOSE cr_crapcop;

      -- Verifica se a data esta cadastrada
      OPEN BTCH0001.cr_crapdat(pr_cdcooper => pr_cdcooper);
      FETCH BTCH0001.cr_crapdat INTO rw_crapdat;
      -- Se não encontrar
      IF BTCH0001.cr_crapdat%NOTFOUND THEN
        -- Fechar o cursor pois haverá raise
        CLOSE BTCH0001.cr_crapdat;
        --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
        -- Montar mensagem de critica
        vr_cdcritic := 1;
        vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        RAISE vr_exc_erro;
      ELSE
        -- Apenas fechar o cursor
        CLOSE BTCH0001.cr_crapdat;
      END IF;
      --Selecionar informacoes do associado
      OPEN cr_crapass(pr_cdcooper => pr_cdcooper
                     ,pr_nrdconta => rw_craplau.nrdconta);
      FETCH cr_crapass INTO rw_crapass;
      --Fechar Cursor
      CLOSE cr_crapass;

      --> Verificar a execução da DEBNET/DEBSIC 
      SICR0001.pc_controle_exec_deb ( pr_cdcooper  => pr_cdcooper        --> Código da coopertiva
                                      ,pr_cdtipope  => 'C'                         --> Tipo de operacao I-incrementar e C-Consultar
                                      ,pr_dtmvtolt  => rw_crapdat.dtmvtolt         --> Data do movimento                                
                                      ,pr_cdprogra  => pr_nmdatela                 --> Codigo do programa                                  
                                      ,pr_flultexe  => vr_flultexe                 --> Retorna se é a ultima execução do procedimento
                                      ,pr_qtdexec   => vr_qtdexec                  --> Retorna a quantidade
                                      ,pr_cdcritic  => vr_cdcritic                 --> Codigo da critica de erro
                                      ,pr_dscritic  => vr_dscritic);               --> descrição do erro se ocorrer

      IF nvl(vr_cdcritic,0) > 0 OR
         TRIM(vr_dscritic) IS NOT NULL THEN
        RAISE vr_exc_erro; 
      END IF;
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_debita_agendto_pagto');

      IF pr_idorigem = 4  THEN /* TAA */
        --Limpar tabela erros e saldos
        vr_tab_erro.DELETE;
        vr_tab_saldo.DELETE;
        --Popular registro crapdat

        /** Verifica se possui saldo para fazer a operacao **/
        EXTR0001.pc_obtem_saldo_dia (pr_cdcooper   => pr_cdcooper
                                    ,pr_rw_crapdat => rw_crapdat
                                    ,pr_cdagenci   => pr_cdagenci
                                    ,pr_nrdcaixa   => pr_nrdcaixa
                                    ,pr_cdoperad   => pr_cdoperad
                                    ,pr_nrdconta   => rw_craplau.nrdconta
                                    ,pr_vllimcre   => rw_crapass.vllimcre
                                    ,pr_tipo_busca => 'A' --> tipo de busca(A-dtmvtoan)
                                    ,pr_flgcrass   => FALSE
                                    ,pr_dtrefere   => pr_dtmvtolt
                                    ,pr_des_reto   => vr_dscritic
                                    ,pr_tab_sald   => vr_tab_saldo
                                    ,pr_tab_erro   => vr_tab_erro);
        --Se ocorreu erro
        IF vr_dscritic = 'NOK' THEN
          -- Tenta buscar o erro no vetor de erro
          IF vr_tab_erro.COUNT > 0 THEN
            vr_cdcritic:= vr_tab_erro(vr_tab_erro.FIRST).cdcritic;
            vr_dscritic:= vr_tab_erro(vr_tab_erro.FIRST).dscritic|| ' Conta: '||rw_craplau.nrdconta;
          ELSE
            --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
            -- Montar mensagem de critica 
            vr_cdcritic:= 9998; --Retorno "NOK" na extr0001.pc_obtem_saldo_dia e sem informação na pr_tab_erro, Conta: 
            vr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                          ' EXTR0001.pc_obtem_saldo_dia(2), conta: '||rw_craplau.nrdconta;
          END IF;
          --Levantar Excecao
          RAISE vr_exc_erro;
        ELSE
          vr_dscritic:= NULL;
        END IF;
	      -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		    GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_debita_agendto_pagto');

        --Verificar o saldo retornado
        IF vr_tab_saldo.Count = 0 THEN
           --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
          --Montar mensagem erro
           vr_cdcritic := 1072; --Nao foi possivel consultar o saldo para a operacao.
           vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
          --Levantar Excecao
          RAISE vr_exc_erro;
        ELSE
          -- Posiciona no primeiro registro da tabela temporária
          vr_indsaldo := vr_tab_saldo.first;
          --Se o saldo nao for suficiente
          IF rw_craplau.vllanaut > (vr_tab_saldo(vr_indsaldo).vlsddisp + vr_tab_saldo(vr_indsaldo).vllimcre) THEN

            --> Se for a primeira execução da DEBNET/CRPS509 
            --IF vr_qtdexec < 3 THEN
            IF vr_flultexe <> 1 THEN --- Se não for a última execução -- Projeto Debitador
                OPEN cr_crapcon (pr_cdcooper => pr_cdcooper
                                ,pr_cdempcon => TO_NUMBER(SUBSTR(rw_craplau.dscodbar,16,4))
                                ,pr_cdsegmto => TO_NUMBER(SUBSTR(rw_craplau.dscodbar,2,1)));
                --Posicionar no proximo registro
                FETCH cr_crapcon INTO rw_crapcon;
                --Se nao encontrar
                IF cr_crapcon%FOUND THEN
                   vr_nmconven := rw_crapcon.nmextcon;
                END IF;
                CLOSE cr_crapcon;

										IF  LENGTH(rw_craplau.dslindig) = 55  THEN /** Convenio **/
                vr_dsdmensg := 'Atenção, %23cooperado%23! <br><br><br>' ||
                                       'Informamos que a seguinte transação não foi efetivada: <br><br> ' ||
                                       '<b>Pagamento de Convênio ' || vr_nmconven || '</b> agendado para <b>' ||
                                       to_char(rw_craplau.dtmvtopg, 'DD/MM/YYYY') || '</b> no valor de <b>R$' || To_Char(rw_craplau.vllanaut,'fm999g999g990d00') || ' ' ||
                                       '</b> por insuficiência de saldo.';

                vr_cdmotivo_mensagem := MOTIVO_PAGAMENTO_CONVENIO;
                vr_variaveis_notif('#convenio') := vr_nmconven;
                    
										ELSIF LENGTH(rw_craplau.dslindig) = 54  THEN /** Titulo **/

                vr_dsdmensg := 'Atenção, %23cooperado%23! <br><br><br>' ||
																		 'Informamos que a seguinte transação não foi efetivada: <br><br> ' ||
																		 '<b>Pagamento de Título</b> de <b>' || rw_craplau.dscedent  || '</b> agendado para <b>' ||
																		 to_char(rw_craplau.dtmvtopg, 'DD/MM/YYYY') || '</b> no valor de <b>R$' || To_Char(rw_craplau.vllanaut,'fm999g999g990d00') || ' ' ||
																		 '</b> por insuficiência de saldo.';

                vr_cdmotivo_mensagem := MOTIVO_PAGAMENTO_TITULO;
                vr_variaveis_notif('#cedente') := rw_craplau.dscedent;
										END IF;

										IF vr_dsdmensg <> ' ' THEN
                -- Criação de mensagem no internetbank - [TODO] Remover todas as chamadas do pc_gerar_mensagem quando o novo ibank entrar no ar
											GENE0003.pc_gerar_mensagem (pr_cdcooper   => pr_cdcooper
                                                 ,pr_nrdconta   => rw_craplau.nrdconta
                                         --,pr_idseqttl   => GERA PARA TODOS OS USUÁRIOS
																								 ,pr_cdprogra   => pr_nmdatela
																								 ,pr_inpriori   => 0
																								 ,pr_dsdmensg   => vr_dsdmensg
																								 ,pr_dsdassun   => 'Transação não efetivada'
																								 ,pr_dsdremet   => rw_crapcop.nmrescop
																								 ,pr_dsdplchv   => 'Sem Saldo'
																								 ,pr_cdoperad   => '1'
																								 ,pr_cdcadmsg   => '0'
																								 ,pr_dscritic   => vr_dscritic);
       	        -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
          		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_debita_agendto_pagto');

                vr_variaveis_notif('#dataagendamento') := to_char(rw_craplau.dtmvtopg, 'DD/MM/YYYY');
                vr_variaveis_notif('#valor') := to_char(rw_craplau.vllanaut,'fm999g999g990d00');
                vr_variaveis_notif('#motivo') := 'insuficiência de saldo';

                -- Cria uma notificação
                noti0001.pc_cria_notificacao(pr_cdorigem_mensagem => ORIGEM_AGEND_NAO_EFETIVADO
                                            ,pr_cdmotivo_mensagem => vr_cdmotivo_mensagem
                                            --,pr_dhenvio => SYSDATE
                                            ,pr_cdcooper => pr_cdcooper
                                            ,pr_nrdconta => rw_craplau.nrdconta
                                            ,pr_variaveis => vr_variaveis_notif);
          	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
          		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_debita_agendto_pagto');

											END IF;																									

            END IF;

            --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
            --Montar mensagem erro
            vr_cdcritic := 717; --Nao ha saldo suficiente para a operacao
            vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
            --Marcar que ocorreu erro TAA
            vr_flerrtaa:= TRUE;

          END IF;
        END IF;
      ELSE  -- Não é TAA
        --Verificar Operacao
        INET0001.pc_verifica_operacao (pr_cdcooper => pr_cdcooper          --Código Cooperativa
                                      ,pr_cdagenci => pr_cdagenci          --Agencia do Associado
                                      ,pr_nrdcaixa => pr_nrdcaixa          --Numero caixa
                                      ,pr_nrdconta => rw_craplau.nrdconta  --Numero da conta
                                      ,pr_idseqttl => rw_craplau.idseqttl  --Identificador Sequencial titulo
                                      ,pr_dtmvtolt => pr_dtmvtolt          --Data Movimento
                                      ,pr_idagenda => 1                    --Indicador agenda
                                      ,pr_dtmvtopg => rw_craplau.dtmvtopg  --Data Pagamento
                                      ,pr_vllanmto => rw_craplau.vllanaut  --Valor Lancamento
                                      ,pr_cddbanco => 0                    --Codigo banco destino
                                      ,pr_cdageban => 0                    --Codigo Agencia destino
                                      ,pr_nrctatrf => 0                    --Numero Conta Destino
                                      ,pr_cdtiptra => 0                    --Tipo transacao
                                      ,pr_cdoperad => pr_cdoperad          --Codigo Operador
                                      ,pr_tpoperac => rw_craplau.cdtiptra  --Pagamento
                                      ,pr_flgvalid => TRUE                 --Indicador validacoes
                                      ,pr_dsorigem => vr_dsorigem          --Descricao Origem
                                      ,pr_nrcpfope => 0                    --CPF operador
                                      ,pr_flgctrag => FALSE                --controla validacoes na efetivacao de agendamentos */
                                      ,pr_nmdatela => pr_nmdatela          -- Nome da tela
                                      ,pr_dstransa => vr_dstrans1          --Descricao da transacao
                                      ,pr_tab_limite => vr_tab_limite      --Tabelas de retorno de horarios limite
                                      ,pr_tab_internet => vr_tab_internet --Tabelas de retorno de horarios limite
                                      ,pr_cdcritic => vr_cdcritic          --Código do erro
                                      ,pr_dscritic => vr_dscritic
                                      ,pr_assin_conjunta => vr_assin_conjunta);        --Descricao do erro;
	      -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		    GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_debita_agendto_pagto');
        --Substituicao da condicao fixa por codigo - 15/12/2017 - Chamado 779415
        IF  vr_dscritic = 'Nao ha saldo suficiente para a operacao.' OR
            vr_cdcritic = 717                                           THEN
          --> Se for a primeira execução da DEBNET/CRPS509 DEBSIC/CRPS642
          --IF vr_qtdexec < 3 THEN           
          IF vr_flultexe <> 1 THEN --- Se não for a última execução -- Projeto Debitador
					IF  rw_craplau.cdtiptra = 10 THEN --DARF/DAS
               vr_dsdmensg := 'Atenção, %23cooperado%23! <br><br><br>' ||
                                     'Informamos que a seguinte transação não foi efetivada: <br><br> ' ||
                                     '<b>Pagamento de ' || rw_craplau.dsdarfdas || ' </b> com identificação <b>' || rw_craplau.dscedent  || '</b> agendado para <b>' ||
                                     to_char(rw_craplau.dtmvtopg, 'DD/MM/YYYY') || '</b> no valor de <b>R$' || To_Char(rw_craplau.vllanaut,'fm999g999g990d00') || ' ' ||
                                     '</b> por insuficiência de saldo.';

               vr_cdmotivo_mensagem := MOTIVO_PAGAMENTO_DARFDAS;
               vr_variaveis_notif('#darfdas') := UPPER(rw_craplau.dsdarfdas);
               vr_variaveis_notif('#cedente') := rw_craplau.dscedent;

                      ELSIF NVL(rw_craplau.nrseqagp,0) > 0 THEN -- GPS INSS
               vr_dsdmensg := 'Atenção, %23cooperado%23! <br><br><br>' ||
                                       'Informamos que a seguinte transação não foi efetivada: <br><br> ' ||
                                       '<b>Pagamento de Guia Previdência Social</b> de <b>' || rw_craplau.dscedent  || '</b> agendado para <b>' ||
                                       to_char(rw_craplau.dtmvtopg, 'DD/MM/YYYY') || '</b> no valor de <b>R$' || To_Char(rw_craplau.vllanaut,'fm999g999g990d00') || ' ' ||
                                       '</b> por insuficiência de saldo.';
                      
               vr_cdmotivo_mensagem := MOTIVO_PAGAMENTO_GPS;
               vr_variaveis_notif('#cedente') := rw_craplau.dscedent;
           
                      ELSIF  LENGTH(rw_craplau.dslindig) = 55  THEN -- Convenio

               OPEN cr_crapcon (pr_cdcooper => pr_cdcooper
                               ,pr_cdempcon => TO_NUMBER(SUBSTR(rw_craplau.dscodbar,16,4))
                               ,pr_cdsegmto => TO_NUMBER(SUBSTR(rw_craplau.dscodbar,2,1)));
               --Posicionar no proximo registro
               FETCH cr_crapcon INTO rw_crapcon;
               --Se nao encontrar
               IF cr_crapcon%FOUND THEN
                  vr_nmconven := rw_crapcon.nmextcon;
                END IF;
               CLOSE cr_crapcon;

               vr_dsdmensg := 'Atenção, %23cooperado%23! <br><br><br>' ||
                                           'Informamos que a seguinte transação não foi efetivada: <br><br> ' ||
                                           '<b>Pagamento de Convênio ' || vr_nmconven || '</b> agendado para <b>' ||
                                           rw_craplau.dtmvtopg || '</b> no valor de <b>R$' || To_Char(rw_craplau.vllanaut,'fm999g999g990d00') || ' ' ||
                                           '</b> por insuficiência de saldo.';

               vr_cdmotivo_mensagem := MOTIVO_PAGAMENTO_CONVENIO;
               vr_variaveis_notif('#convenio') := vr_nmconven;
           
                          ELSIF LENGTH(rw_craplau.dslindig) = 54  THEN -- Titulo
               vr_dsdmensg := 'Atenção, %23cooperado%23! <br><br><br>' ||
                                           'Informamos que a seguinte transação não foi efetivada: <br><br> ' ||
                                           '<b>Pagamento de Título</b> de <b>' || rw_craplau.dscedent  || '</b> agendado para <b>' ||
                                           to_char(rw_craplau.dtmvtopg, 'DD/MM/YYYY') || '</b> no valor de <b>R$' || To_Char(rw_craplau.vllanaut,'fm999g999g990d00') || ' ' ||
                                           '</b> por insuficiência de saldo.';

               vr_cdmotivo_mensagem := MOTIVO_PAGAMENTO_TITULO;
               vr_variaveis_notif('#cedente') := rw_craplau.dscedent;

              END IF;

                          IF vr_dsdmensg <> ' ' THEN
              -- Criação de mensagem no internetbank - [TODO] Remover todas as chamadas do pc_gerar_mensagem quando o novo ibank entrar no ar
                            GENE0003.pc_gerar_mensagem (pr_cdcooper   => pr_cdcooper
                                                       ,pr_nrdconta   => rw_craplau.nrdconta
                                        --,pr_idseqttl   => GERA PARA TODOS OS USUÁRIOS
                                                       ,pr_cdprogra   => pr_nmdatela
                                                       ,pr_inpriori   => 0
                                                       ,pr_dsdmensg   => vr_dsdmensg
                                                       ,pr_dsdassun   => 'Transação não efetivada'
                                                       ,pr_dsdremet   => rw_crapcop.nmrescop
                                                       ,pr_dsdplchv   => 'Sem Saldo'
                                                       ,pr_cdoperad   => '1'
                                                       ,pr_cdcadmsg   => '0'
                                                       ,pr_dscritic   => vr_dscritic2);
	             -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		           GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_debita_agendto_pagto');

               vr_variaveis_notif('#dataagendamento') := to_char(rw_craplau.dtmvtopg, 'DD/MM/YYYY');
               vr_variaveis_notif('#valor') := to_char(rw_craplau.vllanaut,'fm999g999g990d00');
               vr_variaveis_notif('#motivo') := 'insuficiência de saldo';

               -- Cria uma notificação
               noti0001.pc_cria_notificacao(pr_cdorigem_mensagem => ORIGEM_AGEND_NAO_EFETIVADO
                                           ,pr_cdmotivo_mensagem => vr_cdmotivo_mensagem
                                           --,pr_dhenvio => SYSDATE
                                           ,pr_cdcooper => pr_cdcooper
                                           ,pr_nrdconta => rw_craplau.nrdconta
                                           ,pr_variaveis => vr_variaveis_notif);
	             -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		           GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_debita_agendto_pagto');
           END IF;
         END IF;
           END IF;

      END IF;

      -- Inicializar variável que indica o pagamento GPS como false
      vr_idpaggps := FALSE;

      --Se origem nao for TAA e nao tem erro ou for TAA e nao deu erro
      IF  (pr_idorigem <> 4 AND vr_dscritic IS NULL)   OR
         (pr_idorigem = 4 AND NOT vr_flerrtaa) THEN
        --Se for pagamento de darf/das,FGTS,DAE
        IF rw_craplau.cdtiptra IN (10,12,13) THEN
          
          --Executar verificacao de DARF/DAS
          paga0003.pc_verifica_tributos(pr_cdcooper => pr_cdcooper -- Código da cooperativa
                                       ,pr_nrdconta => rw_craplau.nrdconta -- Número da conta
                                       ,pr_idseqttl => rw_craplau.idseqttl -- Sequencial de titularidade
                                       ,pr_idorigem => pr_idorigem -- Canal de origem da operação
									                     ,pr_tpdaguia => rw_craplau.tppagamento -- Tipo da guia (1  DARF / 2  DAS / 3 - FGTS / 4 - DAE)
                                       ,pr_tpcaptur => rw_craplau.tpcaptura -- Tipo de captura da guia (1-Código Barras / 2-Manual)									   
                                       ,pr_lindigi1 => vr_lindigi1 -- Primeiro campo da linha digitável da guia
                                       ,pr_lindigi2 => vr_lindigi2 -- Segundo campo da linha digitável da guia
                                       ,pr_lindigi3 => vr_lindigi3 -- Terceiro campo da linha digitável da guia
                                       ,pr_lindigi4 => vr_lindigi4 -- Quarto campo da linha digitável da guia
                                       ,pr_cdbarras => rw_craplau.dscodbar -- Código de barras da guia  [TODO] Conferir se este parâmetro está sendo utilizado da maneira correta
                                       ,pr_vlrtotal => rw_craplau.vllanaut -- Valor total do pagamento da guia
                                       ,pr_dtapurac => rw_craplau.dtapuracao -- Período de apuração da guia
                                       ,pr_nrcpfcgc => rw_craplau.nrcpfcgc -- CPF/CNPJ da guia
                                       ,pr_cdtribut => rw_craplau.cdtributo -- Código de tributação da guia
                                       ,pr_nrrefere => rw_craplau.nrrefere -- Número de referência da guia
                                       ,pr_dtvencto => rw_craplau.dtvencto -- Data de vencimento da guia
                                       ,pr_vlrprinc => rw_craplau.vlprincipal -- Valor principal da guia
                                       ,pr_vlrmulta => rw_craplau.vlmulta -- Valor da multa da guia
                                       ,pr_vlrjuros => rw_craplau.vljuros -- Valor dos juros da guia
                                       ,pr_vlrecbru => rw_craplau.vlreceita_bruta -- Valor da receita bruta acumulada da guia
                                       ,pr_vlpercen => rw_craplau.vlpercentual -- Valor do percentual da guia
                                       ,pr_idagenda => 1 -- Indicador de agendamento (1-Nesta Data/2-Agendamento)
                                       ,pr_dtagenda => rw_craplau.dtmvtopg -- Data de agendamento
                                       ,pr_indvalid => 2 -- Indicador de controle de validações (1-Operação Online/2-Operação Batch)
									   ,pr_flmobile => 0 --Indicador Mobile
                                       ,pr_cdseqfat => vr_cdseqfat -- Código sequencial da guia
                                       ,pr_vldocmto => vr_vlrdocum -- Valor da guia
                                       ,pr_nrdigfat => vr_nrdigfat -- Digito do faturamento
                                       ,pr_cdcritic => vr_cdcritic -- Código do erro
                                       ,pr_dscritic => vr_dscritic); -- Descriçao do erro
	        -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		      GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_debita_agendto_pagto');
          --Se nao ocorreu erro
          IF NVL(vr_cdcritic,0) = 0 AND TRIM(vr_dscritic) IS NULL THEN
            --Executar rotina paga_convenio
            paga0003.pc_paga_tributos(pr_cdcooper => pr_cdcooper -- Código da cooperativa
                                     ,pr_nrdconta => rw_craplau.nrdconta -- Número da conta
                                     ,pr_idseqttl => rw_craplau.idseqttl -- Sequencial de titularidade
                                     ,pr_nrcpfope => rw_craplau.nrcpfope -- CPF do operador PJ
                                     ,pr_idorigem => pr_idorigem -- Canal de origem da operação
									                   ,pr_tpdaguia => rw_craplau.tppagamento -- Tipo da guia (1  DARF / 2  DAS / 3 - FGTS / 4 - DAE)
                                     ,pr_tpcaptur => rw_craplau.tpcaptura -- Tipo de captura da guia (1  Código Barras / 2  Manual)									 
                                     ,pr_cdseqfat => TO_NUMBER(vr_cdseqfat) -- Código sequencial da guia
                                     ,pr_nrdigfat => vr_nrdigfat -- Dígito do faturamento
                                     ,pr_lindigi1 => vr_lindigi1 -- Primeiro campo da linha digitável da guia
                                     ,pr_lindigi2 => vr_lindigi2 -- Segundo campo da linha digitável da guia
                                     ,pr_lindigi3 => vr_lindigi3 -- Terceiro campo da linha digitável da guia
                                     ,pr_lindigi4 => vr_lindigi4 -- Quarto campo da linha digitável da guia
                                     ,pr_cdbarras => rw_craplau.dscodbar -- Código de barras da guia
                                     ,pr_dsidepag => rw_craplau.dsidentif_pagto -- Descrição da identificação do pagamento
                                     ,pr_vlrtotal => rw_craplau.vllanaut -- Valor total do pagamento da guia
                                     ,pr_dsnomfon => NVL(rw_craplau.dsnome_fone,' ') -- Nome e telefone da guia
                                     ,pr_dtapurac => rw_craplau.dtapuracao -- Período de apuração da guia
                                     ,pr_nrcpfcgc => rw_craplau.nrcpfcgc -- CPF/CNPJ da guia
                                     ,pr_cdtribut => rw_craplau.cdtributo -- Código de tributação da guia
                                     ,pr_nrrefere => rw_craplau.nrrefere -- Número de referência da guia
                                     ,pr_dtvencto => rw_craplau.dtvencto -- Data de vencimento da guia
                                     ,pr_vlrprinc => rw_craplau.vlprincipal -- Valor principal da guia
                                     ,pr_vlrmulta => rw_craplau.vlmulta -- Valor da multa da guia
                                     ,pr_vlrjuros => rw_craplau.vljuros -- Valor dos juros da guia
                                     ,pr_vlrecbru => rw_craplau.vlreceita_bruta -- Valor da receita bruta acumulada da guia
                                     ,pr_vlpercen => rw_craplau.vlpercentual -- Valor do percentual da guia
                                     ,pr_vldocmto => rw_craplau.vllanaut -- Valor da guia
                                     ,pr_idagenda => 1 -- Indicador de agendamento (1  Nesta Data / 2  Agendamento)
                                     ,pr_flgagend => 1 /*TRUE*/ --Flag agendado -- Wagner - Sustentação - 08/01/2019
                                     ,pr_tpleitor => rw_craplau.tpleitura_docto -- Indicador de captura através de leitora de código de barras (1  Leitora / 2  Manual)
                                     ,pr_dsprotoc => vr_dsprotoc -- Descricao Protocolo
                                     ,pr_cdcritic => vr_cdcritic -- Código do erro
                                     ,pr_dscritic => vr_dscritic); -- Descriçao do erro
	         -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		       GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_debita_agendto_pagto'); 
          END IF;
        
        --Se for titulo
        ELSIF LENGTH(rw_craplau.dslindig) = 54  THEN /** Titulo **/
          --Codigo de Barras
          vr_dscodbar:= rw_craplau.dscodbar;
          --Verificar titulo
          pc_verifica_titulo (pr_cdcooper => pr_cdcooper           --Codigo da cooperativa
                             ,pr_nrdconta => rw_craplau.nrdconta   --Numero da conta
                             ,pr_idseqttl => rw_craplau.idseqttl   --Sequencial titular
                             ,pr_idagenda => 1                     --Indicador agendamento
                             ,pr_lindigi1 => vr_lindigi1           --Linha digitavel 1
                             ,pr_lindigi2 => vr_lindigi2           --Linha digitavel 2
                             ,pr_lindigi3 => vr_lindigi3           --Linha digitavel 3
                             ,pr_lindigi4 => vr_lindigi4           --Linha digitavel 4
                             ,pr_lindigi5 => vr_lindigi5           --Linha digitavel 5
                             ,pr_cdbarras => vr_dscodbar           --Codigo de Barras
                             ,pr_vllanmto => rw_craplau.vllanaut   --Valor Lancamento
                             ,pr_dtagenda => rw_craplau.dtmvtopg   --Data agendamento
                             ,pr_idorigem => pr_idorigem           --Indicador de origem
                             ,pr_indvalid => 1                     --nao validar
							 ,pr_flmobile => 0                     --Indicador Mobile
                             ,pr_cdctrlcs => rw_craplau.cdctrlcs   -- Numero de controle da consulta na CIP
                             ,pr_nmextbcc => vr_nmconban           --Nome do banco
                             ,pr_vlfatura => vr_vlrdocum           --Valor fatura
                             ,pr_dtdifere => vr_dtdifere           --Indicador data diferente
                             ,pr_vldifere => vr_vldifere           --Indicador valor diferente
                             ,pr_nrctacob => vr_nrctacob           --Numero Conta Cobranca
                             ,pr_insittit => vr_insittit           --Indicador Situacao Titulo
                             ,pr_intitcop => vr_intitcop           --Indicador Titulo Cooperativa
                             ,pr_nrcnvcob => vr_nrcnvcob           --Numero Convenio Cobranca
                             ,pr_nrboleto => vr_nrboleto           --Numero Boleto
                             ,pr_nrdctabb => vr_nrdctabb           --Numero conta
                             ,pr_dstransa => vr_dstrans1           --Descricao transacao
                             ,pr_cobregis => vr_cobregis           --Cobranca Registrada
                             ,pr_msgalert => vr_msgalert           --mensagem alerta
                             ,pr_vlrjuros => vr_vlrjuros           --Valor Juros
                             ,pr_vlrmulta => vr_vlrmulta           --Valor Multa
                             ,pr_vldescto => vr_vldescto           --Valor desconto
                             ,pr_vlabatim => vr_vlabatim           --Valor Abatimento
                             ,pr_vloutdeb => vr_vloutdeb           --Valor saida debito
                             ,pr_vloutcre => vr_vloutcre           --Valor saida credito
                             ,pr_cdcritic => vr_cdcritic           --C-odigo da critica
                             ,pr_dscritic => vr_dscritic);         --Descricao critica
	        -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		      GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_debita_agendto_pagto');
          --Se nao ocorreu erro
          IF NVL(vr_cdcritic,0) = 0 AND TRIM(vr_dscritic) IS NULL THEN
            --Executar Rotina Pagamento titulo
            pc_paga_titulo (pr_cdcooper => pr_cdcooper          --Codigo da cooperativa
                           ,pr_nrdconta => rw_craplau.nrdconta  --Numero da conta
                           ,pr_idseqttl => rw_craplau.idseqttl  --Sequencial titular
                           ,pr_lindigi1 => vr_lindigi1          --Linha digitavel 1
                           ,pr_lindigi2 => vr_lindigi2          --Linha digitavel 2
                           ,pr_lindigi3 => vr_lindigi3          --Linha digitavel 3
                           ,pr_lindigi4 => vr_lindigi4          --Linha digitavel 4
                           ,pr_lindigi5 => vr_lindigi5          --Linha digitavel 5
                           ,pr_cdbarras => vr_dscodbar          --Codigo de Barras
                           ,pr_dscedent => rw_craplau.dscedent  --Descricao do Cedente
                           ,pr_vllanmto => rw_craplau.vllanaut  --Valor Lancamento
                           ,pr_vlfatura => vr_vlrdocum          --Valor fatura
                           ,pr_nrctacob => vr_nrctacob          --Numero Conta Cobranca
                           ,pr_insittit => vr_insittit          --Indicador Situacao Titulo
                           ,pr_intitcop => vr_intitcop          --Indicador Titulo Cooperativa
                           ,pr_nrcnvcob => vr_nrcnvcob          --Numero Convenio Cobranca
                           ,pr_nrboleto => vr_nrboleto          --Numero Boleto
                           ,pr_nrdctabb => vr_nrdctabb          --Numero conta
                           ,pr_idtitdda => rw_craplau.idtitdda  --Indicador titulo DDA
                           ,pr_flgagend => 1 /*TRUE*/           --Flag agendado
                           ,pr_idorigem => pr_idorigem          --Indicador de origem
                           ,pr_cdcoptfn => 0                    --Codigo cooperativa transacao
                           ,pr_cdagetfn => 0                    --Codigo Agencia transacao
                           ,pr_nrterfin => 0                    --Numero terminal financeiro
                           ,pr_vlrjuros => vr_vlrjuros          --Valor Juros
                           ,pr_vlrmulta => vr_vlrmulta          --Valor Multa
                           ,pr_vldescto => vr_vldescto          --Valor desconto
                           ,pr_vlabatim => vr_vlabatim          --Valor Abatimento
                           ,pr_vloutdeb => vr_vloutdeb          --Valor saida debito
                           ,pr_vloutcre => vr_vloutcre          --Valor saida credito
                           ,pr_nrcpfope => rw_craplau.nrcpfope  --Numero cpf operador
                           ,pr_cdctrlcs => rw_craplau.cdctrlcs
                           ,pr_dstransa => vr_dstrans1          --Descricao transacao
                           ,pr_dsprotoc => vr_dsprotoc          --Descricao Protocolo
                           ,pr_cdbcoctl => vr_cdbcoctl          --Codigo Banco Centralizador
                           ,pr_cdagectl => vr_cdagectl          --Codigo Agencia Centralizadora
                           ,pr_cdcritic => vr_cdcritic          --C-odigo da critica
                           ,pr_dscritic => vr_dscritic);        --Descricao da critica
	         -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		       GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_debita_agendto_pagto');
          END IF;
        ELSIF LENGTH(rw_craplau.dslindig) = 55  THEN /** Convenio **/
          --Codigo de Barras
          vr_dscodbar:= rw_craplau.dscodbar;
          --Valor Lancamento automatico
          vr_vllanaut:= rw_craplau.vllanaut;
          --Executar verificacao do convenio
          pc_verifica_convenio (pr_cdcooper => pr_cdcooper            --Codigo da cooperativa
                               ,pr_nrdconta => rw_craplau.nrdconta    --Numero da conta
                               ,pr_idseqttl => rw_craplau.idseqttl    --Sequencial titular
                               ,pr_idagenda => 1                      --Indicador agendamento
                               ,pr_lindigi1 => vr_lindigi1            --Linha digitavel 1
                               ,pr_lindigi2 => vr_lindigi2            --Linha digitavel 2
                               ,pr_lindigi3 => vr_lindigi3            --Linha digitavel 3
                               ,pr_lindigi4 => vr_lindigi4            --Linha digitavel 4
                               ,pr_cdbarras => vr_dscodbar            --Codigo de Barras
                               ,pr_dtvencto => vr_dtvencto            --Data Vencimento
                               ,pr_vllanmto => vr_vllanaut            --Valor Lancamento
                               ,pr_dtagenda => rw_craplau.dtmvtopg    --Data agendamento
                               ,pr_idorigem => pr_idorigem            --Indicador de origem
                               ,pr_indvalid => 2                      --Nao validar horario limite
							   ,pr_flmobile => 0                    --Indicador Mobile
                               ,pr_nmextcon => vr_nmconban            --Nome do banco
                               ,pr_cdseqfat => vr_cdseqfat            --Codigo Sequencial fatura
                               ,pr_vlfatura => vr_vlrdocum            --Valor fatura
                               ,pr_nrdigfat => vr_nrdigfat            --Numero Digito Fatura
                               ,pr_dstransa => vr_dstrans1            --Descricao transacao
                               ,pr_cdcritic => vr_cdcritic            --C-odigo da critica
                               ,pr_dscritic => vr_dscritic);          --Descricao critica
	        -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		      GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_debita_agendto_pagto');
          --Se nao ocorreu erro
          IF NVL(vr_cdcritic,0) = 0 AND TRIM(vr_dscritic) IS NULL THEN
            --Executar rotina paga_convenio
            pc_paga_convenio (pr_cdcooper => pr_cdcooper            --Codigo da cooperativa
                             ,pr_nrdconta => rw_craplau.nrdconta    --Numero da conta
                             ,pr_idseqttl => rw_craplau.idseqttl    --Sequencial titular
                             ,pr_cdbarras => vr_dscodbar            --Codigo de Barras
                             ,pr_dscedent => rw_craplau.dscedent    --Identificação do Pagamento
                             ,pr_cdseqfat => TO_NUMBER(vr_cdseqfat) --Codigo Sequencial fatura
                             ,pr_vlfatura => vr_vllanaut            --Valor fatura
                             ,pr_nrdigfat => vr_nrdigfat            --Numero Digito Fatura
                             ,pr_flgagend => 1 /*TRUE*/             --Flag agendado
                             ,pr_idorigem => pr_idorigem            --Indicador de origem
                             ,pr_cdcoptfn => 0                      --Codigo cooperativa transacao
                             ,pr_cdagetfn => 0                      --Codigo Agencia transacao
                             ,pr_nrterfin => 0                      --Numero terminal financeiro
                             ,pr_nrcpfope => rw_craplau.nrcpfope    --Numero cpf operador
                             ,pr_flmobile => 0                      --Indicador Mobile
                             ,pr_dstransa => vr_dstrans1            --Descricao transacao
                             ,pr_dsprotoc => vr_dsprotoc            --Descricao Protocolo
                             ,pr_cdbcoctl => vr_cdbcoctl            --Codigo Banco Centralizador
                             ,pr_cdagectl => vr_cdagectl            --Codigo Agencia Centralizadora
                             ,pr_cdcritic => vr_cdcritic            --Codigo da critica
                             ,pr_dscritic => vr_dscritic            --Descricao critica
                             ,pr_msgofatr => vr_msgofatr
                             ,pr_cdempcon => vr_cdempcon
							 ,pr_cdsegmto => vr_cdsegmto);        
	         -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		       GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_debita_agendto_pagto');
          END IF;

        -- Se for GPS
        ELSIF NVL(rw_craplau.nrseqagp,0) > 0 THEN

          -- Indicar pagamento GPS
          vr_idpaggps := TRUE;

          -- Chamar a procedure para validar pagamento do GPS
          INSS0002.pc_gps_validar_pagar(pr_cdcooper => pr_cdcooper
                                       ,pr_nrdconta => rw_craplau.nrdconta
                                       ,pr_nrseqagp => rw_craplau.nrseqagp
                                       ,pr_dtmvtolt => rw_craplau.dtmvtopg
                                       ,pr_cdcritic => vr_cdcritic
                                       ,pr_dscritic => vr_dscritic);
	        -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		      GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_debita_agendto_pagto');
        END IF;
      END IF;

      IF (NVL(vr_cdcritic,0) <> 0 OR TRIM(vr_dscritic) IS NOT NULL ) OR
         (pr_idorigem = 4 AND vr_flerrtaa) THEN
        --> Se for a ultima execução da DEBNET/CRPS509         
        IF (vr_flultexe = 1 OR 
          --> ou não é o ultimo e nao for segundo processo   
          (vr_flultexe <> 1 AND pr_flsgproc = 0 ) OR 
          --> ou não é o ultimo e ja arrecadou a fatura
          (vr_flultexe <> 1 AND upper(vr_dscritic) LIKE 'FATURA JA ARRECADADA DIA%')) THEN
           BEGIN
             UPDATE craplau SET craplau.insitlau = 4 /** NAO EFETIVADO **/
                               ,craplau.dtdebito = craplau.dtmvtopg
                               ,craplau.cdcritic = nvl(vr_cdcritic,0)
                               ,craplau.dscritic = vr_dscritic                               
             WHERE craplau.ROWID = rw_craplau.ROWID;
           EXCEPTION
             WHEN OTHERS THEN
               -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
               CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
               -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
               vr_cdcritic := 1035;
               vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                              'CRAPLAU(27):' ||
                              ' insitlau:'   || '4' ||
                              ', dtdebito:'  || 'craplau.dtmvtopg' ||
                              ' com ROWID:'  || rw_craplau.ROWID || 
                              '. ' || SQLERRM;
               --> Geração de log - 15/12/2017 - Chamado 779415                             
               pc_controla_log_programa( pr_cdcooper      => pr_cdcooper
                                        ,pr_dstiplog      => 'E' -- Tipo de Log - E = erro
                                        ,pr_tpocorrencia  => 2   -- 1-Erro de negocio/ 2-Erro nao tratado
                                        ,pr_cdmensagem    => vr_cdcritic  -- Codigo do Log
                                        ,pr_dsmensagem    => vr_dscritic  -- Descrição
                                       );           
           END;

           -- Atualiza status da transacao
           IF rw_craplau.cdtrapen > 0 THEN
             BEGIN
                UPDATE tbgen_trans_pend
                SET tbgen_trans_pend.idsituacao_transacao = 6 /* Reprovada */
                   ,tbgen_trans_pend.dtalteracao_situacao = SYSDATE
               WHERE tbgen_trans_pend.cdtransacao_pendente = rw_craplau.cdtrapen;
             EXCEPTION
               WHEN OTHERS THEN
                 -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
                 CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
                 -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
                 vr_cdcritic := 1035;
                 vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                           'TBGEN_TRANS_PEND(28):' ||
                           ' idsituacao_transacao:'     || '6' ||
                           ', dtalteracao_situacao:'    || 'SYSDATE' ||
                           ' com cdtransacao_pendente:' || rw_craplau.cdtrapen || 
                           '. ' || SQLERRM;
                 --> Geração de log - 15/12/2017 - Chamado 779415                             
                 pc_controla_log_programa( pr_cdcooper      => pr_cdcooper
                                          ,pr_dstiplog      => 'E' -- Tipo de Log - E = erro
                                          ,pr_tpocorrencia  => 2   -- 1-Erro de negocio/ 2-Erro nao tratado
                                          ,pr_cdmensagem    => vr_cdcritic  -- Codigo do Log
                                          ,pr_dsmensagem    => vr_dscritic  -- Descrição
                                         );           
             END;
           END IF;

           /* Os títulos DDA agendados para pagamento, quando não efetivados,
              o status do título precisa retornar para "Em Aberto". */
           IF rw_craplau.idtitdda > 0 THEN
             --Atualizar situacao titulo
             DDDA0001.pc_atualz_situac_titulo_sacado (pr_cdcooper => pr_cdcooper   --Codigo da Cooperativa
                                                     ,pr_cdagecxa => pr_cdagenci   --Codigo da Agencia
                                                     ,pr_nrdcaixa => 900           --Numero do Caixa
                                                     ,pr_cdopecxa => '996'         --Codigo Operador Caixa
                                                     ,pr_nmdatela => 'INTERNETBANK'   --Nome da tela
                                                     ,pr_idorigem => 3             --Indicador Origem Internet
                                                     ,pr_nrdconta => rw_craplau.nrdconta   --Numero da Conta
                                                     ,pr_idseqttl => rw_craplau.idseqttl   --Sequencial do titular
                                                     ,pr_idtitdda => rw_craplau.idtitdda   --Indicador Titulo DDA
                                                     ,pr_cdsittit => 1             --Situacao Titulo em aberto
                                                     ,pr_flgerlog => 0                --Gerar Log
                                                     ,pr_cdcritic => vr_cdcritic      --Codigo de critica
                                                     ,pr_dscritic => vr_dscritic);    --Descrição de critica
             --Se ocorreu erro
             --Se ocorreu erro
             IF nvl(vr_cdcritic,0) > 0 OR 
                 TRIM(vr_dscritic) IS NOT NULL THEN        
               -- Mensagem de erro pode ser ignorada, semelhante no progress
               -- pois se não conseguiu alterar é provavel que seja o mesmo problema que não conseguiu
               -- colocar como pago no DDA
               vr_des_erro :=  'OK';
               vr_tab_erro.delete;

               --Mensagem de erro
               /*vr_cdcritic:= 0;
               vr_dscritic:= vr_tab_erro(vr_tab_erro.first).dscritic;
               --Levantar Excecao
               RAISE vr_exc_erro;*/
             END IF;
	           -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		         GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_debita_agendto_pagto');                          
           END IF;

           -- Se for pagamento de GPS
           IF NVL(rw_craplau.nrseqagp,0) > 0 THEN
             
             -- Chamar a procedure para CANCELAR o Agendamento
             BEGIN
               -- Excluir
               UPDATE craplgp lgp
                  SET lgp.flgativo = 0 -- Guia GPS Inativa
                WHERE lgp.cdcooper = pr_cdcooper
                  AND lgp.nrctapag = rw_craplau.nrdconta
                  AND lgp.nrseqagp = rw_craplau.nrseqagp
                  AND lgp.flgpagto = 0;     -- FIXO    -- Pagto não efetuado
             EXCEPTION
               WHEN OTHERS THEN
                 -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
                 CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
                 -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
                 pr_cdcritic := 1035;
                 pr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic) ||
                             'CRAPLGP(29):' ||
                             ' flgativo: '  || '0' ||
                             ' com cdcooper: ' || pr_cdcooper ||
                             ', nrctapag: ' || rw_craplau.nrdconta || 
                             ', nrseqagp: ' || rw_craplau.nrseqagp || 
                             ', flgpagto: ' || '0' || 
                             '. ' || SQLERRM;
                 --> Geração de log - 15/12/2017 - Chamado 779415                             
                  pc_controla_log_programa( pr_cdcooper      => pr_cdcooper
                                          ,pr_dstiplog      => 'E' -- Tipo de Log - E = erro
                                          ,pr_tpocorrencia  => 2   -- 1-Erro de negocio/ 2-Erro nao tratado
                                          ,pr_cdmensagem    => vr_cdcritic  -- Codigo do Log
                                          ,pr_dsmensagem    => vr_dscritic  -- Descrição
                                         );           
             END;

             -- Atualizar os registros da GPS
             BEGIN
               -- Atualizar
               UPDATE tbinss_agendamento_gps gps
                  SET gps.insituacao        = 1  -- Fixo -- Cancelada
                    , gps.dtcancelamento    = rw_crapdat.dtmvtocd
                    , gps.cdoperador_cancel = pr_cdoperad
                WHERE gps.cdcooper = pr_cdcooper
                  AND gps.nrdconta = rw_craplau.nrdconta
                  AND gps.nrseqagp = rw_craplau.nrseqagp; 
             EXCEPTION
               WHEN OTHERS THEN
                 -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
                 CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
                 -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
                 pr_cdcritic := 1035;
                 pr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic) ||
                             'TBINSS_AGENDAMENTO_GPS(30):' ||
                             ' insituacao:'         || '1' ||
                             ', dtcancelamento:'    || rw_crapdat.dtmvtocd ||
                             ', cdoperador_cancel:' || pr_cdoperad ||
                             ' com cdcooper:' || pr_cdcooper ||
                             ', nrdconta:'    || rw_craplau.nrdconta || 
                             ', nrseqagp:'    || rw_craplau.nrseqagp || 
                             '. ' || SQLERRM;
                 --> Geração de log - 15/12/2017 - Chamado 779415                             
                 pc_controla_log_programa( pr_cdcooper      => pr_cdcooper
                                          ,pr_dstiplog      => 'E' -- Tipo de Log - E = erro
                                          ,pr_tpocorrencia  => 2   -- 1-Erro de negocio/ 2-Erro nao tratado
                                          ,pr_cdmensagem    => vr_cdcritic  -- Codigo do Log
                                          ,pr_dsmensagem    => vr_dscritic  -- Descrição
                                         );           
             END;
             
             -- Verificar se houveram erros na rotina
             IF (TRIM(pr_dscritic) IS NOT NULL) THEN
               -- Complementar o erro
               vr_dscritic := pr_dscritic;
             END IF;
           END IF;           
           
        END IF;
      ELSE
        BEGIN
          UPDATE craplau SET craplau.insitlau = 2 /** EFETIVADO **/
                            ,craplau.dtdebito = craplau.dtmvtopg
          WHERE craplau.ROWID = rw_craplau.ROWID;
          --Marcar que atualizou transacao
          vr_flgtrans:= TRUE;
        EXCEPTION
          WHEN OTHERS THEN
            -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
            CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
            -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
            vr_cdcritic := 1035;
            vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) || 
                           'CRAPLAU(31):' ||
                           ' insitlau:'     || '2' ||
                           ', dtdebito:'    || 'craplau.dtmvtopg' ||
                           ' com ROWID:'       || rw_craplau.ROWID ||
                           '. ' || SQLERRM;
            --> Geração de log - 15/12/2017 - Chamado 779415                             
            pc_controla_log_programa( pr_cdcooper      => pr_cdcooper
                                      ,pr_dstiplog      => 'E' -- Tipo de Log - E = erro
                                      ,pr_tpocorrencia  => 2   -- 1-Erro de negocio/ 2-Erro nao tratado
                                      ,pr_cdmensagem    => vr_cdcritic  -- Codigo do Log
                                      ,pr_dsmensagem    => vr_dscritic  -- Descrição
                                     );           
        END;

        -- Se for pagamento de GPS
        IF vr_idpaggps THEN

          -- Chamar a procedure para atualizar o pagamento do GPS
          INSS0002.pc_gps_atualiza_pagto(pr_rowidlau => rw_craplau.rowid
                                        ,pr_dtmvtolt => rw_crapdat.dtmvtolt
                                        ,pr_cdcritic => vr_cdcritic
                                        ,pr_dscritic => vr_dscritic);
	        -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		      GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_debita_agendto_pagto');  
          -- Verificar se houveram erros na rotina
          IF (NVL(vr_cdcritic,0) <> 0 OR TRIM(vr_dscritic) IS NOT NULL) THEN
            -- Localizar mensagem de critica conforme o codigo
            IF NVL(vr_cdcritic,0) > 0 THEN
              vr_dscritic := gene0001.fn_busca_critica(vr_cdcritic);
            END IF;
            vr_cdcritic := 1035;
            -- Complementar o erro
            vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic)||
                           'pagto GPS: '||vr_dscritic;
          END IF;
        END IF;

      END IF;
      --Se nao conseguiu realizar transacao
      IF NOT vr_flgtrans AND (vr_dscritic IS NULL OR vr_dscritic = '')THEN
        --Localizar mensagem de critica conforme o codigo
        IF NVL(vr_cdcritic,0) > 0 THEN
          vr_dscritic := gene0001.fn_busca_critica(vr_cdcritic);
        ELSE
           --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
           vr_cdcritic := 1073; --Nao foi possivel debitar o agendamento
           vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        END IF;
      END IF;
      --Transformar boolean em integer
      IF vr_flgtrans THEN
        vr_indtrans:= 1;
      ELSE
        vr_indtrans:= 0;
      END IF;
      -- Chamar geracao de LOG
      gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                          ,pr_cdoperad => pr_cdoperad
                          ,pr_dscritic => substr(vr_dscritic,1,245)
                          ,pr_dsorigem => vr_dsorigem
                          ,pr_dstransa => vr_dstransa
                          ,pr_dttransa => TRUNC(SYSDATE)
                          ,pr_flgtrans => vr_indtrans
                          ,pr_hrtransa => GENE0002.fn_busca_time
                          ,pr_idseqttl => rw_craplau.idseqttl
                          ,pr_nmdatela => pr_nmdatela
                          ,pr_nrdconta => rw_craplau.nrdconta
                          ,pr_nrdrowid => vr_nrdrowid);
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
	    GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_debita_agendto_pagto');  
      IF vr_insitlau > 0 AND vr_insitlau <> rw_craplau.insitlau THEN
        CASE vr_insitlau
          WHEN 1 THEN vr_dssituac:= 'PENDENTE';
          WHEN 2 THEN vr_dssituac:= 'EFETIVADO';
          WHEN 3 THEN vr_dssituac:= 'CANCELADO';
          ELSE        vr_dssituac:= 'NAO EFETIVADO';
        END CASE;
        CASE rw_craplau.insitlau
          WHEN 1 THEN vr_dssituac2:= 'PENDENTE';
          WHEN 2 THEN vr_dssituac2:= 'EFETIVADO';
          WHEN 3 THEN vr_dssituac2:= 'CANCELADO';
          ELSE        vr_dssituac2:= 'NAO EFETIVADO';
        END CASE;
         --Gerar log item
        GENE0001.pc_gera_log_item(pr_nrdrowid => vr_nrdrowid
                                 ,pr_nmdcampo => 'Situacao do Agendamento'
                                 ,pr_dsdadant => vr_dssituac
                                 ,pr_dsdadatu => vr_dssituac2);
      END IF;

      --Se executou transferencia
      IF vr_flgtrans THEN
        
        --Tipo da transação
        GENE0001.pc_gera_log_item(pr_nrdrowid => vr_nrdrowid
                                 ,pr_nmdcampo => 'Tipo da Transacao'
                                 ,pr_dsdadant => NULL
                                 ,pr_dsdadatu => rw_craplau.cdtiptra);
        
      -- Se for pagamento de DARF/DAS
        IF rw_craplau.cdtiptra = 10 THEN
        --Gerar log item
          GENE0001.pc_gera_log_item(pr_nrdrowid => vr_nrdrowid
                                   ,pr_nmdcampo => 'Tipo da Captura'
                                   ,pr_dsdadant => NULL
                                   ,pr_dsdadatu => CASE rw_craplau.cdtiptra
                                                   WHEN 1 THEN 'Codigo de barras'
                                                   WHEN 2 THEN 'Manual'
                                                   END);
        
          --Gerar log item
          GENE0001.pc_gera_log_item(pr_nrdrowid => vr_nrdrowid
                                   ,pr_nmdcampo => 'Representacao Numerica'
                                   ,pr_dsdadant => NULL
                                   ,pr_dsdadatu => CASE rw_craplau.tpcaptura
                                                   WHEN 2 THEN vr_cdseqfat
                                                   ELSE rw_craplau.dslindig
                                                   END);
        ELSE
        
        --Gerar log item
        GENE0001.pc_gera_log_item(pr_nrdrowid => vr_nrdrowid
                                 ,pr_nmdcampo => 'Representacao Numerica'
                                 ,pr_dsdadant => NULL
                                 ,pr_dsdadatu => rw_craplau.dslindig);
        END IF;
        
        --Gerar Log Item
        GENE0001.pc_gera_log_item(pr_nrdrowid => vr_nrdrowid
                                 ,pr_nmdcampo => 'Valor Pago'
                                 ,pr_dsdadant => NULL
                                 ,pr_dsdadatu => To_Char(rw_craplau.vllanaut,'fm999g999g990d00'));

        --Gerar log item
        GENE0001.pc_gera_log_item(pr_nrdrowid => vr_nrdrowid
                                 ,pr_nmdcampo => 'Protocolo'
                                 ,pr_dsdadant => NULL
                                 ,pr_dsdadatu => vr_dsprotoc);
      END IF;

      --Retornando valores
      pr_cdcritic:= vr_cdcritic;
      pr_dscritic:= vr_dscritic;
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);

    EXCEPTION
      -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415      
      -- Quem grava a TBGEN é a Procedure pc_PAGA0001_efetua_debitos
      -- Disparadores: paga0001.pc_efetua_debitos      - Não grava TBGEN
      --               sicr0001.pc_efetua_debitos      - Não grava TBGEN  
      --               crps509.i                       - Programa não utiliza esta Procedure      
      WHEN vr_exc_erro THEN
        --rollback do savepoint
        ROLLBACK TO TRANS_UNDO;

        pr_cdcritic:= vr_cdcritic;
        pr_dscritic:= vr_dscritic;
      WHEN OTHERS THEN
        -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
        CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
        -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        pr_cdcritic:= 9999;
        pr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic)||
                      'PAGA0001.pc_debita_agendto_pagto. ' || SQLERRM ||
                      '.' || vr_dsparame;
        --rollback do savepoint
        ROLLBACK TO TRANS_UNDO;
    END;
  END pc_debita_agendto_pagto;

  /* Procedure para efetuar debitos de agendamentos */
  PROCEDURE pc_efetua_debitos (pr_cdcooper    IN crapcop.cdcooper%TYPE      --Cooperativa
                              ,pr_tab_agendto IN OUT NOCOPY typ_tab_agendto --tabela de agendamento
                              ,pr_cdprogra    IN crapprg.cdprogra%TYPE      --Codigo programa
                              ,pr_dtmvtopg    IN crapdat.dtmvtolt%TYPE      --Data Pagamento
                              ,pr_inproces    IN crapdat.inproces%TYPE      --Indicador processo
                              ,pr_flsgproc    IN BOOLEAN                    --Flag segundo processamento
							  ,pr_execucao    IN INTEGER DEFAULT 0          --Ordem de execução no dia
                              ,pr_cdcritic    OUT INTEGER     --Codigo da Critica
                              ,pr_dscritic    OUT VARCHAR2) IS --Descricao da critica
    -- ..........................................................................
    --
    --  Programa : pc_efetua_debitos        Antiga: crps509.i/efetua-debitos
    --  Sistema  : Rotinas Internet
    --  Sigla    : CRED
    --  Autor    : Alisson C. Berrido - AMcom
    --  Data     : Junho/2013.                   Ultima atualizacao: 15/12/2017
    --
    --  Dados referentes ao programa:
    --
    --   Frequencia: Sempre que for chamado
    --   Objetivo  : Efetuar debitos.de agendamentos
    --
    --  Alteracoes: 11/07/2013 - Reordenar a temptable, para processar na mesma ordem que o progress
    --                           (Odirlei - AMcom).
    --
    --              16/05/2016 - Ajuste para ajustar a condição que identifica o tipo de transação
    --                           e efetua a chamada da respectiva rotina de efetivação
    --                           (Adriano - M117).                               
    --
    --               15/12/2017 - Incluido nome do módulo logado
    --                            No caso de erro de programa gravar tabela especifica de log                     
    --                            Ajuste mensagem de erro 
    --                            (Belli - Envolti - Chamado 779415)        
    --
    --               12/04/2019 - Adequar o processamento de transferencias para o fluxo 
    --                            relacionado à portabilidade de Salário ( Renato Darosci - Supero - P485)
    -- ..........................................................................
  BEGIN
    DECLARE
      --Variaveis Locais
      vr_index_agendto VARCHAR2(300);
      vr_cdagenci crapage.cdagenci%TYPE;
      vr_idorigem INTEGER;
      vr_exc_erro EXCEPTION;
      --Variaveis de Erro
      vr_cdcritic crapcri.cdcritic%TYPE;
      vr_dscritic VARCHAR2(4000);
      vr_aux_cdcritic crapcri.cdcritic%TYPE;
      vr_aux_dscritic VARCHAR2(4000);
      vr_flsgproc PLS_INTEGER;
      vr_newindex VARCHAR2(80);
      vr_index    VARCHAR2(300);
      
      -- Objetos para armazenar as variáveis da notificação
      vr_variaveis_notif NOTI0001.typ_variaveis_notif;
      vr_notif_origem   tbgen_notif_automatica_prm.cdorigem_mensagem%TYPE;
      vr_notif_motivo   tbgen_notif_automatica_prm.cdmotivo_mensagem%TYPE; 
      
      --Armazenar a temptable ordenada
      vr_tab_agendto typ_tab_agendto;
      --Agrupa os parametros - 15/12/2017 - Chamado 779415 
      vr_dsparame VARCHAR2(4000);

      --Armazenar os deparas de index para atualizar corretamente as informações
      -- na temptable de retorno
      TYPE typ_depara_agendto IS TABLE OF varchar2(300) INDEX BY VARCHAR2(300);
      vr_depara_agendto typ_depara_agendto;

      --Selecionar informacoes dos lancamentos automaticos
      CURSOR cr_craplau_2 (pr_progress_recid IN NUMBER) IS
        SELECT craplau.nrdconta
              ,craplau.idtitdda
              ,craplau.ROWID
        FROM craplau
        WHERE progress_recid = pr_progress_recid;
      rw_craplau_2 cr_craplau_2%ROWTYPE;
    BEGIN
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_efetua_debitos'); 
      
      --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
      vr_dsparame :=  ' pr_cdcooper:' || pr_cdcooper || 
                      ', pr_cdprogra:' || pr_cdprogra ||
                      ', pr_dtmvtopg:' || pr_dtmvtopg ||
                      ', pr_inproces:' || pr_inproces ||
                      ' ,pr_flsgproc:' || CASE pr_flsgproc
                                            WHEN true 
                                              THEN 'true'
                                              ELSE 'false' 
                                          END;

       --ordenar a temptable conforme a ordenação do progress
       vr_index:= pr_tab_agendto.FIRST;
       WHILE vr_index IS NOT NULL LOOP
         --Montar novo indice agendamento
          vr_newindex := lpad(pr_tab_agendto(vr_index).cdcooper,5,'0')||         -- cdcooper
                         lpad(pr_tab_agendto(vr_index).nrdconta,10,'0')||        -- nrdconta
                         to_char(pr_tab_agendto(vr_index).dttransa,'RRRRMMDD')|| -- dttransa
                         lpad(pr_tab_agendto(vr_index).nrdocmto,15,'0')||          -- nrdocmto
                         lpad(vr_tab_agendto.count,15,'0');                    -- SEQ
         --atribuir registro para a temptable ordenada
         vr_tab_agendto(vr_newindex)    := pr_tab_agendto(vr_index);
         --armazenar depara de index
         vr_depara_agendto(vr_newindex) := vr_index;
         --buscar proximo registro
         vr_index:= pr_tab_agendto.next(vr_index);
       END LOOP;
       --- fim reordenação

       /* Conexao com a JD */

       --Percorrer todos agendamentos
       vr_index_agendto:= vr_tab_agendto.FIRST;
       WHILE vr_index_agendto IS NOT NULL LOOP
         --Inicializar variavel erro
         vr_cdcritic:= NULL;
         vr_dscritic:= NULL;

         --Se a origem for Internet
         IF vr_tab_agendto(vr_index_agendto).dsorigem = 'INTERNET' THEN
           vr_cdagenci:= 90;
           vr_idorigem:= 3;  /*Internet*/
         ELSIF vr_tab_agendto(vr_index_agendto).dsorigem = 'TAA' THEN
           vr_cdagenci:= 91;
           vr_idorigem:= 4;  /*TAA*/
         ELSIF vr_tab_agendto(vr_index_agendto).dsorigem = 'PORTABILIDAD' THEN -- P485
           vr_cdagenci:= 0;
           vr_idorigem:= 4;  /*Seguir o mesmo fluxo do TAA, para que não sejam validados limites de internet*/
         ELSE
           vr_cdagenci:= vr_tab_agendto(vr_index_agendto).cdagenci;
           vr_idorigem:= 2;  /*CAIXA*/
         END IF;

         --Se for TED
         IF vr_tab_agendto(vr_index_agendto).cdtiptra = 4 THEN /* TED */
           pc_debita_agendto_ted(pr_cdcooper => pr_cdcooper
                                ,pr_cdagenci => vr_cdagenci
                                ,pr_nrdcaixa => 900
                                ,pr_cdoperad => '996'
                                ,pr_nmdatela => pr_cdprogra
                                ,pr_idorigem => vr_idorigem
                                ,pr_dtmvtolt => pr_dtmvtopg
                                ,pr_inproces => pr_inproces
                                ,pr_flsgproc => pr_flsgproc
                                ,pr_cdtiptra => vr_tab_agendto(vr_index_agendto).cdtiptra
                                ,pr_craplau_progress_recid => vr_tab_agendto(vr_index_agendto).prorecid
								,pr_execucao => pr_execucao
                                ,pr_cdcritic => vr_cdcritic
                                ,pr_dscritic => vr_dscritic);
         --Se for transferencia
         ELSIF vr_tab_agendto(vr_index_agendto).fltiptra THEN
           --Executar rotina debito agendamento transferencias
           pc_debita_agendto_transf (pr_cdcooper => vr_tab_agendto(vr_index_agendto).cdcooper        --Codigo Cooperativa
                                    ,pr_cdagenci => vr_cdagenci        --Codigo Agencia
                                    ,pr_nrdcaixa => 900                --Numero Caixa
                                    ,pr_cdoperad => '996'              --Operador
                                    ,pr_nmdatela => pr_cdprogra        --Nome programa
                                    ,pr_idorigem => vr_idorigem        --origem (TAA ou Internet)
                                    ,pr_dtmvtolt => pr_dtmvtopg        --Data pagamento
                                    ,pr_inproces => pr_inproces        --Indicador Processo
                                    ,pr_flsgproc => pr_flsgproc        --Flag segundo processamento
                                    ,pr_cdtiptra => vr_tab_agendto(vr_index_agendto).cdtiptra --Codigo tipo transferencia
                                    ,pr_craplau_progress_recid => vr_tab_agendto(vr_index_agendto).prorecid --Recid lancamento automático
                                    ,pr_cdcritic => vr_cdcritic        --Codigo da Critica
                                    ,pr_dscritic => vr_dscritic);      --Descricao da critica);
         ELSIF vr_tab_agendto(vr_index_agendto).dsorigem = 'DEBAUT' THEN
           -- Executar rotina de debito de convenios nossos (CECRED)
           pc_debita_convenio_cecred(pr_cdcooper => vr_tab_agendto(vr_index_agendto).cdcooper --Codigo Cooperativa
                                    ,pr_cdagenci => vr_cdagenci        --Codigo Agencia
                                    ,pr_nrdcaixa => 900                --Numero Caixa
                                    ,pr_cdoperad => '996'              --Operador
                                    ,pr_nmdatela => pr_cdprogra        --Nome programa
                                    ,pr_idorigem => vr_idorigem        --origem (TAA ou Internet)
                                    ,pr_dtmvtolt => pr_dtmvtopg        --Data pagamento
                                    ,pr_inproces => pr_inproces        --Indicador Processo
                                    ,pr_craplau_progress_recid => vr_tab_agendto(vr_index_agendto).prorecid --Recid lancamento automático
                                    ,pr_cdcritic => vr_cdcritic        --Codigo da Critica
                                    ,pr_dscritic => vr_dscritic);      --Descricao da critica);

         ELSE

           --Flag segundo processamento
           IF  pr_flsgproc  THEN
             vr_flsgproc := 1;
           ELSE
             vr_flsgproc := 0;
           END IF;

             --Executar rotina debito agendamento pagamentos
             pc_debita_agendto_pagto  (pr_cdcooper => vr_tab_agendto(vr_index_agendto).cdcooper        --Codigo Cooperativa
                                      ,pr_cdagenci => vr_cdagenci        --Codigo Agencia
                                      ,pr_nrdcaixa => 900                --Numero Caixa
                                      ,pr_cdoperad => '996'              --Operador
                                      ,pr_nmdatela => pr_cdprogra        --Nome programa
                                      ,pr_idorigem => vr_idorigem        --origem (TAA ou Internet)
                                      ,pr_dtmvtolt => pr_dtmvtopg        --Data pagamento
                                      ,pr_inproces => pr_inproces        --Indicador Processo
                                      ,pr_flsgproc => vr_flsgproc        --Flag segundo processamento
                                      ,pr_craplau_progress_recid  => vr_tab_agendto(vr_index_agendto).prorecid --Recid lancamento automático                                      ,
                                      ,pr_cdcritic => vr_cdcritic        --Codigo da Critica
                                      ,pr_dscritic => vr_dscritic);      --Descricao da critica);

         END IF;
	       -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		     GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_efetua_debitos'); 
          
         --Se ocorreu erro atualiza a tabela de agendamento
         IF NVL(vr_cdcritic,0) <> 0 OR TRIM(vr_dscritic) IS NOT NULL THEN
           --atualizar informação na temptable que retornará para o programa chamador conforme o index do depara
           pr_tab_agendto(vr_depara_agendto(vr_index_agendto)).dscritic:= vr_dscritic;
         ELSE
           pr_tab_agendto(vr_depara_agendto(vr_index_agendto)).fldebito:= TRUE;
           --
           vr_notif_origem   := 10;
           vr_notif_motivo   := 1;
           
		   vr_variaveis_notif('#valordebito') := TRIM(TO_CHAR(vr_tab_agendto(vr_index_agendto).vllanaut,'fm999G999G999G990D00'));
           vr_variaveis_notif('#datadebito')  := TO_CHAR(pr_dtmvtopg,'dd/mm/yyyy');
           vr_variaveis_notif('#tipodebito')  := vr_tab_agendto(vr_index_agendto).dstiptra||'-'||vr_tab_agendto(vr_index_agendto).dstransa;
           -- Cria uma notificação
           noti0001.pc_cria_notificacao(pr_cdorigem_mensagem => vr_notif_origem
                                       ,pr_cdmotivo_mensagem => vr_notif_motivo
                                       ,pr_cdcooper => vr_tab_agendto(vr_index_agendto).cdcooper
                                       ,pr_nrdconta => vr_tab_agendto(vr_index_agendto).nrdconta
                                       ,pr_variaveis => vr_variaveis_notif);              
           --
         END IF;

         --efetuar commit a cada lançamento
         commit;

         --Buscar o proximo registro do vetor
         vr_index_agendto:= vr_tab_agendto.NEXT(vr_index_agendto);
       END LOOP;

       if nvl(vr_idlote_sms,0) <> 0 then
          ESMS0001.pc_conclui_lote_sms(pr_idlote_sms  => vr_idlote_sms
                                    	,pr_dscritic    => vr_dscritic);
       end if;   
	     -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		   GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);     

    EXCEPTION
      -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415      
      -- Disparadores: pc_crps509.prc                         - Não grava TBGEN - Necessario Avaliar
      --               pc_crps705.prc                         - Não grava TBGEN - Necessario Avaliar
      --               paga0001.pc_PAGA0001_efetua_debitos    - Grava TBGEN
      --
      WHEN vr_exc_erro THEN
        pr_cdcritic:= vr_cdcritic;
        pr_dscritic:= vr_dscritic;
      WHEN OTHERS THEN
        -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415
        -- Exclusão da rotina btch0001.pc_log_internal_exception(pr_cdcooper => pr_cdcooper);
        CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
        -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        pr_cdcritic:= 9999;
        pr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic) || 
                      'PAGA0001.pc_efetua_debitos. ' || SQLERRM ||
                      '.' || vr_dsparame;
    END;
  END pc_efetua_debitos;


  /* Procedure para obter agendamento debitos */
  PROCEDURE pc_obtem_agend_debitos (pr_cdcooper IN crapcop.cdcooper%TYPE    --Cooperativa
                                   ,pr_dtmvtopg IN crapdat.dtmvtolt%TYPE    --Data de pagamento
                                   ,pr_inproces IN crapdat.inproces%TYPE    --Indicador processo
                                   ,pr_cdprogra IN VARCHAR2                 --Nome do programa
  																 ,pr_inpriori IN VARCHAR2 DEFAULT 'T'     --Indicador de prioridade para o debitador unico ("S"= agua/luz, "N"=outros, "T"=todos) 
                                   ,pr_tab_agendto OUT typ_tab_agendto      --tabela de agendamento
                                   ,pr_cdcritic OUT INTEGER   --Codigo da Critica
                                   ,pr_dscritic OUT VARCHAR2) IS --Descricao da critica
    /* ..........................................................................
    
      Programa : pc_obtem_agend_debitos        Antiga: crps509.i -- obtem-agendamentos-debito
      Sistema  : Rotinas Internet
      Sigla    : INET
      Autor    : Alisson C. Berrido - AMcom
      Data     : Junho/2013.                   Ultima atualizacao: 05/11/2018
    
      Dados referentes ao programa:
    
       Frequencia: Sempre que for chamado
       Objetivo  : Obter agendamentos de debitos.

       Alteracoes: 11/07/2013 - Alterada procedure 'obtem-agendamentos-debito' para
                                informar cooperativa de origem da conta da transferencia
                               (Lucas).
    
                   03/09/2014 - Implementado ajusta para migracao da Concredi -> Viacredi,
                                Credimilsul -> Scrcred (Jean Michel).
    
                   15/01/2015 - Tratamento para considerar os lancamentos de debitos de
                                convenios CECRED (apenas quando o processo nao estiver
                                rodando).
                                (Chamado 229249 # PRJ Melhoria) - (Fabricio)
    
                   16/09/2015 - Melhoria de performace, buscar dados do cooperado junto
                                com a qury da craplau(Odirlei-Amcom)
    
                   03/11/2015 - Ajsutado cursor cr_craplau para mehorar performance
                                Adicionado parametro de entrada pr_dtmovini.
                                (Jorge/Fabricio) SD - 331331
    
                   18/11/2015 - Removido tratamento usando inproces, pois deve pegar todos
                                os registros independente do inproces SD358495 (Odirlei-AMcom)
    
                   25/05/2016 - Ajuste para inclusão de novo parametro e ajustado leitura
                                da craplau
                                (Adriano - M117).
    
                   02/06/2016 - Corrigido leitura da craplau para buscar agendamentos 
                                por tipo de acordo com programa origem
                                (Adriano - M117).
                
                   13/09/2016 - Ajuste para buscar corretamente o registro de favorecidos
                               (Adriano - SD 495293).       
    
                   15/12/2017 - Incluido nome do módulo logado
                                No caso de erro de programa gravar tabela especifica de log                     
                                Ajuste mensagem de erro 
                                (Belli - Envolti - Chamado 779415)     

	                 26/03/2018 - Incluido pr_inpriori para o "debitador unico" (Fabiano B. Dias - AMcom)
	
                   12/09/2018 - Busca de convenios prioritarios - Debitador Unico - Fabiano B. Dias (AMcom)

                   12/04/2019 - Considerar os lançamentos de origem da portabilidade para 
                                realizar a transferencias de valores, relacionados à 
                                portabilidade de Salário ( Renato Darosci - Supero - P485)
    -----------------------------------------------------------------------------*/
  BEGIN
    DECLARE
      --Cursores Locais

      --Informacoes da cooperativa
      CURSOR cr_crabcop (pr_cdageban IN crapcop.cdagectl%type) IS
        SELECT crapcop.cdagectl
              ,crapcop.cdcooper
              ,crapcop.nmrescop
        FROM crapcop
        WHERE crapcop.cdagectl = pr_cdageban;
      rw_crabcop cr_crabcop%ROWTYPE;

      --Informacoes da cooperativa
      CURSOR cr_crapcop (pr_cdcooper IN crapcop.cdcooper%type) IS
        SELECT crapcop.cdagectl
              ,crapcop.cdcooper
              ,crapcop.nmrescop
        FROM crapcop
        WHERE crapcop.cdcooper = pr_cdcooper;
      rw_crapcop cr_crapcop%ROWTYPE;

      --Informacoes dos associados
      CURSOR cr_crapass  (pr_cdcooper IN crapcop.cdcooper%TYPE
                         ,pr_nrdconta IN crapass.nrdconta%type) IS
        SELECT crapass.nmprimtl
              ,crapass.cdagenci
              ,crapass.nrdconta
        FROM crapass
        WHERE crapass.cdcooper = pr_cdcooper
        AND   crapass.nrdconta = pr_nrdconta;

      rw_crabass cr_crapass%ROWTYPE;

      --Informacoes dos lancamentos automaticos
      CURSOR cr_craplau (pr_cdcooper IN crapcop.cdcooper%TYPE
                        ,pr_dtmvtopg IN craplau.dtmvtopg%TYPE
                        ,pr_dtmovini IN craplau.dtmvtopg%TYPE
                        ,pr_cdprogra IN VARCHAR2) IS
        SELECT craplau.cdcooper
              ,craplau.dtmvtopg
              ,craplau.nrdconta
              ,craplau.cdtiptra
              ,craplau.nrctadst
              ,craplau.cddbanco
              ,craplau.dslindig
              ,craplau.dscedent
			  ,craplau.dscodbar
              ,craplau.vllanaut
              ,craplau.dttransa
              ,craplau.hrtransa
              ,craplau.nrdocmto
              ,craplau.dsorigem
              ,craplau.idseqttl
              ,craplau.cdageban
              ,craplau.ROWID
              ,craplau.progress_recid
              ,crapass.nmprimtl
              ,crapass.cdagenci
              ,craplau.nrseqagp
              ,craphis.cdhistor||'-'||craphis.dshistor dshistor
              ,craplau.cdctrlcs
			  ,craphis.cdhistor
        FROM craplau craplau
            ,crapass crapass
            ,craphis craphis 
        WHERE craplau.cdcooper = crapass.cdcooper
          AND craplau.nrdconta = crapass.nrdconta
          AND craplau.cdcooper = craphis.cdcooper
          AND craplau.cdhistor = craphis.cdhistor
          AND crapass.cdcooper = pr_cdcooper  
          AND ((pr_cdprogra = 'CRPS705' AND 
                craplau.cdtiptra = 4)   OR
               (pr_cdprogra <> 'CRPS705' AND 
                craplau.cdtiptra <> 4 ))                           
          AND ((    craplau.cdcooper = pr_cdcooper
              AND   craplau.dtmvtopg = pr_dtmvtopg
              AND   craplau.insitlau = 1
              AND   craplau.dsorigem IN ('INTERNET','TAA', 'PORTABILIDAD')  -- P485 - Considerar também Portabilidade
              AND    craplau.tpdvalor = 0)
              OR
             (    craplau.cdcooper  = pr_cdcooper
              AND craplau.dtmvtopg BETWEEN pr_dtmovini AND pr_dtmvtopg
              AND craplau.insitlau  = 1
              AND craplau.dsorigem  = 'DEBAUT'));

      --Selecionar transferencias de conta
      CURSOR cr_craptco (pr_cdcopant IN craptco.cdcopant%type
                        ,pr_nrctaant IN craptco.nrctaant%type
                        ,pr_tpctatrf IN craptco.tpctatrf%type) IS
        SELECT craptco.cdcopant
        FROM craptco craptco
        WHERE craptco.cdcopant = pr_cdcopant
        AND   craptco.nrctaant = pr_nrctaant
        AND   craptco.tpctatrf = pr_tpctatrf;
      rw_craptco cr_craptco%ROWTYPE;

      --Cursor responsável por buscar contas favorecidas referente ao processo de TED
      CURSOR cr_crapcti (pr_cdcooper IN crapcop.cdcooper%TYPE
                        ,pr_nrdconta IN crapass.nrdconta%TYPE
                        ,pr_cddbanco IN craplau.cddbanco%TYPE
                        ,pr_nrctatrf IN craplau.nrctadst%TYPE
                        ,pr_cdageban IN craplau.cdageban%TYPE) IS
      SELECT c.nmtitula
        FROM crapcti c
       WHERE c.cdcooper = pr_cdcooper
         AND c.nrdconta = pr_nrdconta
         AND c.cddbanco = pr_cddbanco
         AND c.nrctatrf = pr_nrctatrf
         AND c.cdageban = pr_cdageban;
      rw_crapcti cr_crapcti%ROWTYPE;

      --Variaveis Locais
      vr_sequencia INTEGER;
      vr_fltiptra  BOOLEAN;
      vr_fltipdoc  BOOLEAN;
      vr_idtipdoc  VARCHAR2(20);
      vr_idtiptra  VARCHAR2(20);
      vr_dstiptra  VARCHAR2(100);
      vr_dstransa  VARCHAR2(1000);
      vr_dtmovini craplau.dtmvtopg%TYPE;
      --Variaveis de indice
      vr_index_agendto VARCHAR2(300);
      vr_cdcritic crapcri.cdcritic%TYPE;
      --Variaveis de erro
      vr_des_erro     VARCHAR2(4000);
      --Variaveis de Excecao
      vr_exc_erro EXCEPTION;  
      --Agrupa os parametros - 15/12/2017 - Chamado 779415 
      vr_dsparame VARCHAR2(4000);

			vr_agua_luz     varchar2(1);
      vr_inconsiderar_lancto varchar2(1);
			
    BEGIN
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_obtem_agend_debitos');
      
      --Inicializar retorno erro
      pr_cdcritic:= NULL;
      pr_dscritic:= NULL;
      
      --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
      vr_dsparame :=  ' pr_cdcooper:' || pr_cdcooper || 
                      ', pr_dtmvtopg:' || pr_dtmvtopg ||
                      ', pr_inproces:' || pr_inproces ||
                      ', pr_cdprogra:' || pr_cdprogra;

      --Limpar tabela memoria agendamentos
      pr_tab_agendto.DELETE;

      -- Data anterior util
      vr_dtmovini := gene0005.fn_valida_dia_util(pr_cdcooper,
                                                 (pr_dtmvtopg - 1), -- 1 dia anterior
                                                 'A',    -- Anterior
                                                 TRUE,   -- Feriado
                                                 FALSE); -- Desconsiderar 31/12
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_obtem_agend_debitos');
      -- Adiciona mais um 1 dia na data inicial, para pegar finais de semana e feriados
      vr_dtmovini := vr_dtmovini + 1;

      --Selecionar Cooperativa
      OPEN cr_crapcop (pr_cdcooper => pr_cdcooper);
      --Posicionar no primeiro registro
      FETCH cr_crapcop INTO rw_crapcop;
      --Se encontrou
      IF cr_crapcop%NOTFOUND THEN
        --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        --Mensagem Erro
        vr_cdcritic := 1070; --Cooperativa nao cadastrada
        vr_des_erro := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
      --Fechar Cursor
      CLOSE cr_crapcop;
      --Selecionar informacoes dos lancamentos Automaticos
      FOR rw_craplau IN cr_craplau (pr_cdcooper => pr_cdcooper
                                   ,pr_dtmvtopg => pr_dtmvtopg
                                   ,pr_dtmovini => vr_dtmovini
                                   ,pr_cdprogra => pr_cdprogra) LOOP

		------------------------------
        -- Debitador Unico - inicio.
		------------------------------
        IF pr_inpriori = 'T' THEN 
		  -- Deve considerar "todos" os lancamentos (agua, energia eletrica, demais).
		  vr_inconsiderar_lancto := 'S';

		ELSE						

		  -- Verifica se o lancamento eh agua/luz.					
		  vr_agua_luz := 'N';
		  BEGIN
			SELECT DISTINCT 'S'
			INTO vr_agua_luz
			FROM gnconve a
				,crapcon b
           WHERE a.cdhisdeb = rw_craplau.cdhistor 
             AND a.cdhiscxa = b.cdhistor  
             AND b.cdsegmto in (2,3) -- 2=agua/ 3=energia.
			 AND b.cdcooper = pr_cdcooper
           UNION
            SELECT 'S' FROM crapcon
             WHERE crapcon.flgcnvsi = 0 -- indica que eh Proprio
               AND crapcon.cdsegmto IN (2,3) -- 2=agua / 3=energia.
               AND crapcon.cdempcon = TO_NUMBER(SUBSTR(NVL(TRIM(rw_craplau.dscodbar),'0'),16,4))
               AND crapcon.cdsegmto = TO_NUMBER(SUBSTR(NVL(TRIM(rw_craplau.dscodbar),'0'),2,1))
               AND TO_NUMBER(SUBSTR(NVL(TRIM(rw_craplau.dscodbar),'0'),1,1)) = 8 -- 8=fatura, 2=titulo. -- 05/11/2018.
               AND crapcon.cdcooper = pr_cdcooper;
 		  EXCEPTION
			WHEN OTHERS THEN
			  vr_agua_luz := 'N';
		  END;
					
		  IF pr_inpriori = 'S' THEN 
			-- Deve priorizar e pagar somente agua e energia eletrica.
			IF vr_agua_luz = 'S' THEN
			  vr_inconsiderar_lancto := 'S';
			ELSE
			  vr_inconsiderar_lancto := 'N';
			END IF;
		  ELSIF pr_inpriori = 'N' THEN
			-- Deve priorizar e pagar somente OS QUE NAO SAO agua e energia eletrica.
			IF vr_agua_luz = 'S' THEN
			  vr_inconsiderar_lancto := 'N';
			ELSE
			  vr_inconsiderar_lancto := 'S';
			END IF;			  
		  END IF;
					
        END IF; -- pr_inpriori = 'T' 

		------------------------------
        -- Debitador Unico - fim.
		------------------------------
        IF vr_inconsiderar_lancto = 'S' THEN 

        vr_dstransa:= vr_dstransa || ' - '||rw_craplau.nmprimtl;

        /** Transferencia, Credito Salario, Transferencia inter. **/
        IF rw_craplau.cdtiptra IN (1,3,5) THEN
          --Tipo transacao recebe true
          vr_fltiptra:= TRUE;
          --Se for transferencia
          IF rw_craplau.cdtiptra IN (1,5) THEN
            --Descricao da transacao
            vr_dstiptra:= 'Transferencia';          
          ELSE
            vr_dstiptra:= 'Cred.Salario';
          END IF;
          --Tipo de Documento
          vr_fltipdoc:= (rw_craplau.cdtiptra = 1 OR rw_craplau.cdtiptra = 5);
          --Descricao da transacao
          vr_dstransa:= gene0002.fn_mask(rw_craplau.cdageban,'9999')||'/'||
                        ltrim(gene0002.fn_mask_conta(rw_craplau.nrctadst));
	        -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		      GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_obtem_agend_debitos');
          --Selecionar a cooperativa
          OPEN cr_crabcop (pr_cdageban => rw_craplau.cdageban);
          FETCH cr_crabcop INTO rw_crabcop;
          --Se nao encontrou
          IF cr_crabcop%NOTFOUND THEN
            --Fechar Cursor
            CLOSE cr_crabcop;
            --Proximo registro
            CONTINUE;
          END IF;
          --Fechar Cursor
          CLOSE cr_crabcop;
          --Selecionar o associado conta destino
          OPEN cr_crapass (pr_cdcooper => rw_crapcop.cdcooper
                          ,pr_nrdconta => rw_craplau.nrctadst);
          FETCH cr_crapass INTO rw_crabass;
          --Se encontrou
          IF cr_crapass%FOUND THEN
            --Descricao da transacao
            vr_dstransa:= vr_dstransa || ' - '||rw_crabass.nmprimtl;
          END IF;
          --Fechar Cursor
          CLOSE cr_crapass;
        ELSIF rw_craplau.cdtiptra = 2  THEN /** Pagamento **/
          --Tipo transacao recebe false
          vr_fltiptra:= FALSE;
          --Descricao da transacao
          vr_dstiptra:= 'Pagamento';
          --Tipo de Documento
          vr_fltipdoc:= LENGTH(rw_craplau.dslindig) = 55;
          --Descricao da transacao
          vr_dstransa:= rw_craplau.dscedent;
        ELSIF rw_craplau.cdtiptra = 4 THEN /** TED **/
            
            --Tipo transação
            vr_fltiptra := false;
            
            --Descrição da transação
            vr_dstiptra := 'TED';
            
            --Tipo de Documento
            vr_fltipdoc := false;
            
            --Descrição da transação
            vr_dstransa := gene0002.fn_mask(rw_craplau.cdageban,'9999') || '/' ||
                           ltrim(gene0002.fn_mask_conta(rw_craplau.nrctadst));
	          -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		        GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_obtem_agend_debitos');
            
            --Verificar a conta de destino
            OPEN cr_crapcti(pr_cdcooper => rw_crapcop.cdcooper
                           ,pr_nrdconta => rw_craplau.nrdconta
                           ,pr_cddbanco => rw_craplau.cddbanco
                           ,pr_nrctatrf => rw_craplau.nrctadst
                           ,pr_cdageban => rw_craplau.cdageban);
                                                        
            FETCH cr_crapcti INTO rw_crapcti;
            
            --Se encontrou
            IF cr_crapcti%FOUND THEN
              --Descrição da transação
              vr_dstransa := vr_dstransa || ' - ' || rw_crapcti.nmtitula;
            END IF;
            
            CLOSE cr_crapcti;
        ELSIF rw_craplau.cdtiptra = 6 THEN /* Debito Automatico */
          -- Tipo transacao
          vr_fltiptra := FALSE;
          -- Descricao tipo transacao
          vr_dstiptra := 'Debito Autom.';
          -- Descricao transacao
          vr_dstransa := rw_craplau.dscedent;
          -- Indicador de convenio
          vr_fltipdoc := TRUE;
        END IF;

        -- Verificar se é Agendamento Guia GPS
        IF rw_craplau.nrseqagp <> 0 THEN
          vr_idtipdoc:= 'GPS';
        ELSIF vr_fltipdoc THEN         --Verificar se é true ou false
          vr_idtipdoc:= 'CONVENIO';
        ELSE
          vr_idtipdoc:= 'TITULO';
        END IF;

        IF vr_fltiptra THEN
          vr_idtiptra:= 'SIM';
        ELSE
          vr_idtiptra:= 'NAO';
        END IF;
        --Encontrar proxima sequencia
        vr_sequencia:= 1;
        WHILE TRUE LOOP
          --Montar indice agendamento
          vr_index_agendto:= rpad(rw_craplau.dsorigem,20,'#')||  --dsorigem
                             vr_idtiptra||                       --fltiptra
                             vr_idtipdoc||                       --fltipdoc
                             lpad(pr_cdcooper,5,'0')||           --cdcooper
                             lpad(rw_craplau.cdagenci,10,'0')||  --cdagenci
                             lpad(rw_craplau.nrdconta,10,'0')||  --nrdconta
                             lpad(vr_sequencia,10,'0');          --Sequencia
          --Se nao existir registro
          IF NOT pr_tab_agendto.EXISTS(vr_index_agendto) THEN
            --Sair loop
            EXIT;
          ELSE
            --Incrementar Sequencia
            vr_sequencia:= vr_sequencia + 1;
          END IF;
        END LOOP;

        --Inserir dados tabela memoria agendamento
        pr_tab_agendto(vr_index_agendto).cdcooper:= pr_cdcooper;
        pr_tab_agendto(vr_index_agendto).dscooper:= rw_crapcop.nmrescop;
        pr_tab_agendto(vr_index_agendto).nrdconta:= rw_craplau.nrdconta;
        pr_tab_agendto(vr_index_agendto).nmprimtl:= rw_craplau.nmprimtl;
        pr_tab_agendto(vr_index_agendto).cdagenci:= rw_craplau.cdagenci;
        pr_tab_agendto(vr_index_agendto).cdtiptra:= rw_craplau.cdtiptra;
        pr_tab_agendto(vr_index_agendto).fltiptra:= vr_fltiptra;
        pr_tab_agendto(vr_index_agendto).dstiptra:= vr_dstiptra;
        pr_tab_agendto(vr_index_agendto).fltipdoc:= vr_fltipdoc;
        pr_tab_agendto(vr_index_agendto).dstransa:= vr_dstransa;
        pr_tab_agendto(vr_index_agendto).vllanaut:= rw_craplau.vllanaut;
        pr_tab_agendto(vr_index_agendto).dttransa:= rw_craplau.dttransa;
        pr_tab_agendto(vr_index_agendto).hrtransa:= GENE0002.fn_converte_time_data(rw_craplau.hrtransa,'S');
        pr_tab_agendto(vr_index_agendto).nrdocmto:= rw_craplau.nrdocmto;
        pr_tab_agendto(vr_index_agendto).dslindig:= rw_craplau.dslindig;
        pr_tab_agendto(vr_index_agendto).dscritic:= NULL;
        pr_tab_agendto(vr_index_agendto).nrdrecid:= rw_craplau.ROWID;
        pr_tab_agendto(vr_index_agendto).fldebito:= FALSE;
        pr_tab_agendto(vr_index_agendto).dsorigem:= rw_craplau.dsorigem;
        pr_tab_agendto(vr_index_agendto).idseqttl:= rw_craplau.idseqttl;
        pr_tab_agendto(vr_index_agendto).prorecid:= rw_craplau.progress_recid;
        pr_tab_agendto(vr_index_agendto).dshistor:= rw_craplau.dshistor;
        pr_tab_agendto(vr_index_agendto).cdctrlcs:= rw_craplau.cdctrlcs;
        END IF; -- vr_inconsiderar_lancto = 'S'.
      END LOOP;
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);
    EXCEPTION
      -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415      
      -- Disparadores: pc_crps509.prc                         - Não grava TBGEN - Necessario Avaliar
      --               pc_crps705.prc                         - Não grava TBGEN - Necessario Avaliar
      --               paga0001.pc_PAGA0001_obtem_agen_deb    - Grava TBGEN
      --               paga0001.pc_PAGA0001_efetua_debitos    - Grava TBGEN
      WHEN vr_exc_erro THEN
        pr_cdcritic:= vr_cdcritic;
        pr_dscritic:= vr_des_erro;
      WHEN OTHERS THEN
        -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
        CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
        -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        pr_cdcritic:= 9999;
        pr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic) ||
                      'PAGA0001.pc_obtem_agend_debitos. ' || SQLERRM ||
                      '.' || vr_dsparame;
    END;
  END pc_obtem_agend_debitos;

  /* Procedure para efetuar alteracao no registro auxiliar*/
  PROCEDURE pc_altera_situac_trans(pr_cdcooper IN crapcop.cdcooper%type --Cooperativa
                                  ,pr_nrdconta IN crapass.nrdconta%TYPE  --Conta do associado
                                  ,pr_dssgproc IN VARCHAR2 --Indicador segundo processo
                                  ,pr_dtmvtolt IN crapdat.dtmvtolt%type  --Data do movimento
                                  ,pr_tab_limite_pend IN INET0002.typ_tab_limite_pend
                                  ,pr_flgalter OUT BOOLEAN  --flag de efetuou alteracao
                                  ,pr_cdcritic OUT INTEGER  --Codigo erro
                                  ,pr_dscritic OUT VARCHAR2) IS --Descricao erro
    -- ..........................................................................
    --
    --  Programa : pc_altera_situac_trans        Antiga: b1wgen0016.p/altera_situacao_transacao
    --  Sistema  : Rotinas Internet
    --  Sigla    : INET
    --  Autor    : Alisson C. Berrido - AMcom
    --  Data     : Junho/2013.                   Ultima atualizacao: 15/12/2017
    --
    --  Dados referentes ao programa:
    --
    --   Frequencia: Sempre que for chamado
    --   Objetivo  : Atualizar transação para não efetivada.
    --
    --   Alterações: Melhoria de performace, caso vir zero como pr_nrdconta, buscar
    --               todas as operações pendentes (Odirlei-Amcom)
    --
    --               21/12/2015 - Ajustes para o proj. Assinatura Multipla.
    --                            (Jorge/David). Proj. 131.
	--
	--	             18/07/2016 - Ajuste para incluir end if perdido no merge
	--							 (Adriano)
    --
	--               19/07/2016 - Ajustes para Prj. 338, Pagamento de DARF/DAS (Jean Michel).
    --                            
    --               03/08/2016 - Ajustar a validação de agendamento de folha de pagamento
    --                            (Douglas - Chamado 488327)
    --
    --               21/11/2016 - Incluido tratamento para transacao: 
    --                             16 - Contrato SMS Cobrança
    --                             17 - Cancelamento Contrato SMS Cobrança
    --                            para expirar 30 dias apos criação.
    --                            PRJ319 - SMS Cobrança (Odirlei-AMcom)
    --
    --               20/03/2017 - Ajustes para Prj. 321, Recarga de Celular (Lombardi).
    --
    --               14/12/2016 - Incluido tratamento para transacao: 
    --                             12 - Desconto de Cheque
    --                            para expirar 7 dias apos criação.
    --                            PRJ300 - Desconto de Cheque (Lombardi)
    --
    --               11/10/2017 - Adicionado valição para identificar se a 
    --                            transação de folha de pagamento possui apenas
    --                            contas da cooperativa, ou se possui CTASAL, para 
    --                            que utilize o horário correto (Douglas - Chamado 707072)
    --
    --               15/12/2017 - Incluido nome do módulo logado
    --                            No caso de erro de programa gravar tabela especifica de log                     
    --                            Ajuste mensagem de erro 
    --                            (Belli - Envolti - Chamado 779415)    
    --
    --               05/01/2018 - Adicionado tratativas para arrecadacao de FGTS/DAE.
    --                            PRJ406-FGTS(Odirlei-AMcom) 
    --
    --               29/10/2018 - Ajuste critica/ mensagem / continuação do processo
    --                            ( Belli - Envolti - PRB0040400)
    --
    --               24/01/2019 - Aumentar o período para a expiração das transações pendentes para 15 dias
    --                            Tipo da transacao 20 - Autorizacao de contratos por senha
    --                            Projeto 470 -- Marcelo Telles Coelho - Mouts
    --
    --               12/03/2018 - (AMCOM - P438) add tptransa = 21 e fn_proposta_n_aprovada 
    --
    -----------------------------------------------------------------------------
  BEGIN
    DECLARE
      --Cursores Locais
      
      -- Buscar nome da cooperativa
      CURSOR cr_crapcop (pr_cdcooper IN crapcop.cdcooper%TYPE) IS
      SELECT cop.nmrescop
      FROM   crapcop cop
      WHERE  cop.cdcooper = pr_cdcooper;
      
      CURSOR cr_crapass (pr_cdcooper IN crapass.cdcooper%TYPE
                        ,pr_nrdconta IN crapass.nrdconta%TYPE) IS
      SELECT ass.nmprimtl
      FROM   crapass ass
      WHERE  ass.cdcooper = pr_cdcooper
      AND    ass.nrdconta = pr_nrdconta;
      rw_crapass cr_crapass%ROWTYPE;
      
      --Selecionar informacoes de senhas
      CURSOR cr_crapsnh (pr_cdcooper IN crapsnh.cdcooper%type
                        ,pr_nrdconta IN crapsnh.nrdconta%type
                        ,pr_nrcpfcgc IN crapsnh.nrcpfcgc%TYPE) IS
      SELECT crapsnh.idseqttl
      FROM   crapsnh
      WHERE  crapsnh.cdcooper = pr_cdcooper
      AND    crapsnh.nrdconta = pr_nrdconta
      AND    crapsnh.nrcpfcgc = pr_nrcpfcgc
      AND    crapsnh.tpdsenha = 1; -- Internet
      rw_crapsnh cr_crapsnh%ROWTYPE;
      
      -- Tabela Pai generica
      CURSOR cr_tbgen_trans_pend (pr_cdcooper IN crapcop.cdcooper%type
                                 ,pr_nrdconta IN crapass.nrdconta%type) IS
      SELECT tbgen_trans_pend.cdtransacao_pendente
            ,tbgen_trans_pend.tptransacao
            ,tbgen_trans_pend.dtmvtolt
            ,tbgen_trans_pend.ROWID
      FROM   tbgen_trans_pend
      WHERE  tbgen_trans_pend.cdcooper = pr_cdcooper
      AND    tbgen_trans_pend.nrdconta = DECODE(pr_nrdconta,0,tbgen_trans_pend.nrdconta,pr_nrdconta)
      AND    tbgen_trans_pend.idsituacao_transacao IN (1,5);
      rw_tbgen_trans_pend cr_tbgen_trans_pend%ROWTYPE;
      
      --Tabela Transferencia pend. (1,3,5)
      CURSOR cr_tbtransf_trans_pend (pr_cdtrapen IN tbtransf_trans_pend.cdtransacao_pendente%TYPE) IS
      SELECT tbtransf_trans_pend.idagendamento
            ,tbtransf_trans_pend.dtdebito
      FROM   tbtransf_trans_pend
      WHERE  tbtransf_trans_pend.cdtransacao_pendente = pr_cdtrapen;
      rw_tbtransf_trans_pend cr_tbtransf_trans_pend%ROWTYPE;
      
      --Tabela TED pend. (4)
      CURSOR cr_tbspb_trans_pend (pr_cdtrapen IN tbspb_trans_pend.cdtransacao_pendente%TYPE) IS
      SELECT tbspb_trans_pend.idagendamento
            ,tbspb_trans_pend.dtdebito
      FROM   tbspb_trans_pend
      WHERE  tbspb_trans_pend.cdtransacao_pendente = pr_cdtrapen;
      rw_tbspb_trans_pend cr_tbspb_trans_pend%ROWTYPE;
      
      --Recarga de Celular
      CURSOR cr_tbrecarga_trans_pend (pr_cdtrapen IN tbrecarga_trans_pend.cdtransacao_pendente%TYPE) IS
      SELECT tbrecarga_trans_pend.tprecarga
            ,tbrecarga_operacao.dtrecarga
            ,tbrecarga_trans_pend.idoperacao
      FROM   tbrecarga_trans_pend
            ,tbrecarga_operacao
      WHERE  tbrecarga_trans_pend.idoperacao = tbrecarga_operacao.idoperacao
      AND    tbrecarga_trans_pend.cdtransacao_pendente = pr_cdtrapen;
      rw_tbrecarga_trans_pend cr_tbrecarga_trans_pend%ROWTYPE;
       
      --Tabela Aplicacao pend. (7)
      CURSOR cr_tbcapt_trans_pend (pr_cdtrapen IN tbcapt_trans_pend.cdtransacao_pendente%TYPE) IS
      SELECT tbcapt_trans_pend.tpoperacao 
            ,tbcapt_trans_pend.dtinicio_agendamento
            ,tbcapt_trans_pend.idperiodo_agendamento
            ,tbcapt_trans_pend.nrdia_agendamento
      FROM   tbcapt_trans_pend
      WHERE  tbcapt_trans_pend.cdtransacao_pendente = pr_cdtrapen;
      rw_tbcapt_trans_pend cr_tbcapt_trans_pend%ROWTYPE;      
      
      --Tabela Folha de Pagamento pend. (9)
      CURSOR cr_tbfolha_trans_pend (pr_cdtrapen IN tbfolha_trans_pend.cdtransacao_pendente%TYPE) IS
      SELECT tbfolha_trans_pend.idestouro
            ,tbfolha_trans_pend.idopcao_debito
            ,tbfolha_trans_pend.dtdebito
            ,tbfolha_trans_pend.cdcooper
            ,tbfolha_trans_pend.cdempres
            ,tbfolha_trans_pend.nrsequencia_folha
      FROM   tbfolha_trans_pend
      WHERE  tbfolha_trans_pend.cdtransacao_pendente = pr_cdtrapen;
      rw_tbfolha_trans_pend cr_tbfolha_trans_pend%ROWTYPE;      
      
      -- Quantidade de folha de pagamento para a Cooperativa e para a CTASAL
      CURSOR cr_qtd_folha(pr_cdcooper IN craplfp.cdcooper%TYPE
                         ,pr_cdempres IN craplfp.cdempres%TYPE
                         ,pr_nrseqpag IN craplfp.nrseqpag%TYPE) IS
      SELECT NVL(SUM( DECODE(idtpcont, 'C', 1, 0)), 0) qtd_coop,
             NVL(SUM( DECODE(idtpcont, 'T', 1, 0)), 0) qtd_ctasal
        FROM craplfp lfp
       WHERE lfp.cdcooper = pr_cdcooper
         AND lfp.cdempres = pr_cdempres
         AND lfp.nrseqpag = pr_nrseqpag;
      rw_qtd_folha cr_qtd_folha%ROWTYPE;
      
      --Cursor de aprovacao
      CURSOR cr_tbgen_aprova_trans_pend( pr_cddoitem IN tbgen_aprova_trans_pend.cdtransacao_pendente%TYPE) IS  
      SELECT * 
      FROM   tbgen_aprova_trans_pend
      WHERE  tbgen_aprova_trans_pend.cdtransacao_pendente = pr_cddoitem;
      rw_tbgen_aprova_trans_pend cr_tbgen_aprova_trans_pend%ROWTYPE;
      
      --Tabela Pagamento pend. (2)
      CURSOR cr_tbpagto_trans_pend (pr_cdtrapen IN tbpagto_trans_pend.cdtransacao_pendente%TYPE) IS
      SELECT tbpagto_trans_pend.idagendamento
            ,tbpagto_trans_pend.dtdebito
            ,tbpagto_trans_pend.vlpagamento
      FROM   tbpagto_trans_pend
      WHERE  tbpagto_trans_pend.cdtransacao_pendente = pr_cdtrapen;
      rw_tbpagto_trans_pend cr_tbpagto_trans_pend%ROWTYPE;

      --Tabela Pagamento DARF/DAS pend. (11)
      CURSOR cr_tbpagto_darf_das_trans_pend (pr_cdtrapen IN tbpagto_darf_das_trans_pend.cdtransacao_pendente%TYPE) IS
	    SELECT *
	      FROM   tbpagto_darf_das_trans_pend
	     WHERE  tbpagto_darf_das_trans_pend.cdtransacao_pendente = pr_cdtrapen;
	  rw_tbpagto_darf_das_trans_pend cr_tbpagto_darf_das_trans_pend%ROWTYPE;
    
      --Tabela Pagamento Tributos(FGTS/DAE) pend. (14-FGTS, 15-DAE)
      CURSOR cr_tbtrib_trans_pend (pr_cdtrapen IN tbpagto_tributos_trans_pend.cdtransacao_pendente%TYPE) IS
	    SELECT trib.idagendamento,
             trib.dtdebito,
             trib.vlpagamento
	      FROM tbpagto_tributos_trans_pend trib
	     WHERE trib.cdtransacao_pendente = pr_cdtrapen;
  	  rw_tbtrib_trans_pend cr_tbtrib_trans_pend%ROWTYPE;
    
      --Tabela Contratos pend.
      CURSOR cr_tbctd_trans_pend (pr_cdtrapen IN tbgen_trans_pend.cdtransacao_pendente%TYPE) IS
      SELECT 0                                  idagendamento
            ,TRUNC(tbctd_trans_pend.dhcontrato) dtdebito
            ,tbctd_trans_pend.vlcontrato        vlpagamento
      FROM   tbctd_trans_pend
      WHERE  tbctd_trans_pend.cdtransacao_pendente = pr_cdtrapen;
      rw_tbctd_trans_pend cr_tbctd_trans_pend%ROWTYPE;

      --Variaveis Locais
      vr_nmrescop crapcop.nmrescop%TYPE;
      vr_hratual  INTEGER;
      vr_hrlimite INTEGER;
      vr_idagenda INTEGER;
      vr_flgalter BOOLEAN;
      vr_datdodia DATE;
      vr_dtmvtopg DATE;
      vr_dtauxili DATE;
      vr_cdcritic crapcri.cdcritic%TYPE;
      vr_dscritic crapcri.dscritic%TYPE;
      vr_dsdmensg VARCHAR2(32000) := ' ';
      vr_nmprimtl crapass.nmprimtl%TYPE;
      vr_idseqttl crapsnh.idseqttl%TYPE;
      vr_cdtransa tbgen_trans_pend.cdtransacao_pendente%TYPE;
      vr_tptransa tbgen_trans_pend.tptransacao%TYPE;
      vr_nrctarep crapavt.nrdctato%TYPE;
      
      vr_tab_crapavt CADA0001.typ_tab_crapavt_58; --Tabela Avalistas
      vr_tab_bens CADA0001.typ_tab_bens;          --Tabela bens
      vr_tab_erro gene0001.typ_tab_erro;          --Tabela Erro
      
      --Variaveis de erro
      vr_des_erro     VARCHAR2(4000);
      --Variaveis de Excecao
      vr_exc_erro EXCEPTION;
      vr_exc_continua EXCEPTION; -- 
      --Agrupa os parametros - 15/12/2017 - Chamado 779415 
      vr_dsparame VARCHAR2(4000);
      vr_dsparlp1 VARCHAR2(4000);
      vr_dsparlp2 VARCHAR2(4000);
      vr_dsparlp3 VARCHAR2(4000);
      vr_dsparlp4 VARCHAR2(4000);
      vr_dscriti2 VARCHAR2(4000);
      vr_qthoras number(15,5); -- SM 454.1
      
      -- Objetos para armazenar as variáveis da notificação
      vr_variaveis_notif NOTI0001.typ_variaveis_notif;
      vr_notif_origem   tbgen_notif_automatica_prm.cdorigem_mensagem%TYPE := 6;
      vr_notif_motivo   tbgen_notif_automatica_prm.cdmotivo_mensagem%TYPE := 3; 
      vr_notif_dsdmensg VARCHAR2(32000) := ' '; 
      --
      --/
      FUNCTION fn_proposta_n_aprovada(pr_cdtransacao_pendente IN tbgen_trans_pend.cdtransacao_pendente%TYPE)
        RETURN BOOLEAN IS
       --/
       vr_n_aprovada NUMBER;
       --/
      BEGIN
       SELECT COUNT(*)
         INTO vr_n_aprovada
         FROM tbepr_trans_pend_efet_proposta p,
              crawepr wpr
        WHERE wpr.nrdconta = p.nrdconta
          AND wpr.nrctremp = p.nrctremp
          AND wpr.cdcooper = p.cdcooper
          AND wpr.insitapr <> 1
          AND p.cdtransacao_pendente = pr_cdtransacao_pendente;
         --/  
         RETURN ( vr_n_aprovada > 0 );  
         --/
      END fn_proposta_n_aprovada;
            
            
    BEGIN
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_altera_situac_trans');
      --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
      vr_dsparame :=  ' pr_cdcooper:' || pr_cdcooper || 
                      ', pr_nrdconta:' || pr_nrdconta ||
                      ', pr_dssgproc:' || pr_dssgproc ||
                      ', pr_dtmvtolt:' || pr_dtmvtolt;    
      
      --Inicializar retorno erro
      pr_cdcritic:= NULL;
      pr_dscritic:= NULL;
      vr_dsparlp1 := NULL;
      vr_dsparlp2 := NULL;

      --Buscar a data do processamento
      vr_datdodia:= trunc(sysdate); /*PAGA0001.fn_busca_datdodia(pr_cdcooper => pr_cdcooper); */
      
      --Dados da Cooperativa
      OPEN cr_crapcop(pr_cdcooper => pr_cdcooper);
      FETCH cr_crapcop INTO vr_nmrescop;
      close cr_crapcop;

      vr_dsparame := vr_dsparlp1; -- Posiciona parãmetros - 29/10/2018 - INC0099999 
      --Selecionar transacoes operador juridico
      FOR rw_tbgen_trans_pend IN cr_tbgen_trans_pend (pr_cdcooper => pr_cdcooper
                                                     ,pr_nrdconta => pr_nrdconta) LOOP
        -- Posiciona parãmetros - 29/10/2018 - INC0099999  
        vr_dsparlp2 := ', cdtransacao_pendente:' || rw_tbgen_trans_pend.cdtransacao_pendente ||
                       ', tptransacao:' || rw_tbgen_trans_pend.tptransacao ||
                       ', dtmvtolt:'    || rw_tbgen_trans_pend.dtmvtolt ||
                       ', ROWID:'       || rw_tbgen_trans_pend.ROWID;                                     
        vr_dsparame := vr_dsparlp1 || 
                       vr_dsparlp2; 
        --Atribuir FALSE para flag altera
        vr_flgalter:= FALSE;
        vr_cdtransa:= rw_tbgen_trans_pend.cdtransacao_pendente;
        vr_tptransa:= rw_tbgen_trans_pend.tptransacao;

        --Determinar a hora atual
        vr_hratual:= GENE0002.fn_busca_time;

        IF  vr_tptransa = 1 OR   /* Transf.Intracoop. */
            vr_tptransa = 3 OR   /* Credito Salario */
            vr_tptransa = 5 THEN /* Transf.Intercoop. */
            
            --Selecionar transacao pendente
            OPEN cr_tbtransf_trans_pend (pr_cdtrapen => vr_cdtransa);
            --Posicionar no primeiro registro
            FETCH cr_tbtransf_trans_pend INTO rw_tbtransf_trans_pend;
            --Se encontrou
            IF cr_tbtransf_trans_pend%NOTFOUND THEN
              --Fechar Cursor
              CLOSE cr_tbtransf_trans_pend;
              --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
              --Montar mensagem de erro
              vr_cdcritic:= 1121; --Transacao pendente não cadastrada
              vr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
              --Levantar Excecao
              RAISE vr_exc_erro;
            END IF;
            --Fechar Cursor
            CLOSE cr_tbtransf_trans_pend;
              
            vr_idagenda := rw_tbtransf_trans_pend.idagendamento;
            vr_dtmvtopg := rw_tbtransf_trans_pend.dtdebito;
                  
            --Pagamento
        ELSIF vr_tptransa = 2 THEN
            --Selecionar transacao pendente
            OPEN cr_tbpagto_trans_pend (pr_cdtrapen => vr_cdtransa);
            --Posicionar no primeiro registro
            FETCH cr_tbpagto_trans_pend INTO rw_tbpagto_trans_pend;
            --Se encontrou
            IF cr_tbpagto_trans_pend%NOTFOUND THEN
              --Fechar Cursor
              CLOSE cr_tbpagto_trans_pend;
              --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
              --Montar mensagem de erro
              vr_cdcritic:= 1121; --Transacao pendente não cadastrada
              vr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
              --Levantar Excecao
              RAISE vr_exc_erro;
            END IF;
            --Fechar Cursor
            CLOSE cr_tbpagto_trans_pend;
              
            vr_idagenda := rw_tbpagto_trans_pend.idagendamento;
            vr_dtmvtopg := rw_tbpagto_trans_pend.dtdebito; 
        --Pagamento DARF/DAS
        ELSIF vr_tptransa = 11 THEN
            --Selecionar transacao pendente
            OPEN cr_tbpagto_darf_das_trans_pend (pr_cdtrapen => vr_cdtransa);
            --Posicionar no primeiro registro
            FETCH cr_tbpagto_darf_das_trans_pend INTO rw_tbpagto_darf_das_trans_pend;
            --Se encontrou
            IF cr_tbpagto_darf_das_trans_pend%NOTFOUND THEN
              --Fechar Cursor
              CLOSE cr_tbpagto_darf_das_trans_pend;
              --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
              --Montar mensagem de erro
              vr_cdcritic:= 1121; --Transacao pendente não cadastrada
              vr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
              --Levantar Excecao
              RAISE vr_exc_erro;
            END IF;
            --Fechar Cursor
            CLOSE cr_tbpagto_darf_das_trans_pend;
            
            vr_idagenda := rw_tbpagto_darf_das_trans_pend.idagendamento;
            vr_dtmvtopg := rw_tbpagto_darf_das_trans_pend.dtdebito;
            --TED
        ELSIF vr_tptransa = 4 THEN    
            --Selecionar transacao pendente
            OPEN cr_tbspb_trans_pend (pr_cdtrapen => vr_cdtransa);
            --Posicionar no primeiro registro
            FETCH cr_tbspb_trans_pend INTO rw_tbspb_trans_pend;
            --Se encontrou
            IF cr_tbspb_trans_pend%NOTFOUND THEN
              --Fechar Cursor
              CLOSE cr_tbspb_trans_pend;
              --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
              --Montar mensagem de erro
              vr_cdcritic:= 1121; --Transacao pendente não cadastrada
              vr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
              --Levantar Excecao
              RAISE vr_exc_erro;
            END IF;
            --Fechar Cursor
            CLOSE cr_tbspb_trans_pend;
              
            vr_idagenda := rw_tbspb_trans_pend.idagendamento;
            vr_dtmvtopg := rw_tbspb_trans_pend.dtdebito;                
        ELSIF vr_tptransa = 13 THEN
            --Selecionar transacao pendente
            OPEN cr_tbrecarga_trans_pend (pr_cdtrapen => vr_cdtransa);
            --Posicionar no primeiro registro
            FETCH cr_tbrecarga_trans_pend INTO rw_tbrecarga_trans_pend;
            --Se encontrou
            IF cr_tbrecarga_trans_pend%NOTFOUND THEN
              --Fechar Cursor
              CLOSE cr_tbrecarga_trans_pend;
              --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
              --Montar mensagem de erro
              vr_cdcritic:= 1121; --Transacao pendente não cadastrada 2
              vr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
              --Levantar Excecao
              RAISE vr_exc_erro;
            END IF;
            --Fechar Cursor
            CLOSE cr_tbrecarga_trans_pend;
              
            vr_idagenda := rw_tbrecarga_trans_pend.tprecarga;
            vr_dtmvtopg := rw_tbrecarga_trans_pend.dtrecarga;
        --Pagamento tributos
        ELSIF vr_tptransa IN (14,       --> FGTS
                              15) THEN  --> DAE
            --Selecionar transacao pendente
            OPEN cr_tbtrib_trans_pend (pr_cdtrapen => vr_cdtransa);
            --Posicionar no primeiro registro
            FETCH cr_tbtrib_trans_pend INTO rw_tbtrib_trans_pend;
            --Se encontrou
            IF cr_tbtrib_trans_pend%NOTFOUND THEN
              --Fechar Cursor
              CLOSE cr_tbtrib_trans_pend;
              --Erro
              vr_cdcritic:= 0;
              vr_dscritic:= 'Transacao pendente não cadastrada.';
              --Levantar Excecao
              RAISE vr_exc_erro;
            END IF;
            --Fechar Cursor
            CLOSE cr_tbtrib_trans_pend;
            
            vr_idagenda := rw_tbtrib_trans_pend.idagendamento;
            vr_dtmvtopg := rw_tbtrib_trans_pend.dtdebito;
        --Contratos
        -- Projeto 470 - Marcelo Telles Coeljho - Mouts
        ELSIF vr_tptransa = 20 THEN	--> Autorizacao de contratos por senha
            --Selecionar transacao pendente
            OPEN cr_tbctd_trans_pend (pr_cdtrapen => vr_cdtransa);
            --Posicionar no primeiro registro
            FETCH cr_tbctd_trans_pend INTO rw_tbtrib_trans_pend;
            --Se encontrou
            IF cr_tbctd_trans_pend%NOTFOUND THEN
              --Fechar Cursor
              CLOSE cr_tbctd_trans_pend;
              --Erro
              vr_cdcritic:= 0;
              vr_dscritic:= 'Transacao pendente não cadastrada - Contrato.';
              --Levantar Excecao
              RAISE vr_exc_erro;
            END IF;
            --Fechar Cursor
            CLOSE cr_tbctd_trans_pend;

            vr_idagenda := rw_tbctd_trans_pend.idagendamento;
            vr_dtmvtopg := rw_tbtrib_trans_pend.dtdebito;
        -- Fim Projeto 470
        ELSE
			-- Adesão de pacote de tarifas(10), contrao de SMS(16,17) e Desconto de cheque(12)
      -- não permite agendamento
			IF vr_tptransa NOT IN(10,12,16,17,18) THEN -- SM 454.1 - Foi inclusa a transação 18
				vr_idagenda := 1;
				vr_dtmvtopg := rw_tbgen_trans_pend.dtmvtolt;
			END IF;
        
		END IF;

        vr_dsparame := vr_dsparlp1 ||
                       vr_dsparlp2 ||
                       ', vr_idagenda:' || vr_idagenda ||
                       ', vr_dtmvtopg:' || vr_dtmvtopg;

        -- Atribuicao dos horarios conforme tipo de transacao
        -- tptransa 1,3,5 Transferencia          
        -- tptransa 2     Pagamento
        -- tptransa 4     TED
        -- tptransa 6     Creduti Pre-Aprovado
        -- tptransa 7     Aplicacao
        -- tptransa 8     Debito Automatico
        -- tptransa 9     Folha Pagamento
        -- tptransa 11     DARF/DAS
        -- tptransa 12    Desconto de Cheque
        -- tptransa 13    Recarga de Celular
        -- tptransa 14    Pagamento FGTS
        -- tptransa 15    Pagamento DAE
        -- Codigo Horario
        -- 1 - Transferencia, 2 - Pagamento,        3 - Cobranca
        -- 4 - TED,           5 - Intercooperativa, 6 - VRBoleto
        -- 7 - Cred.Pre-Apr., 8 - Aplicacao,        11 - Debito Auto. Facil
        -- 12 - Folha Paga. (Agendamento),
        -- 13 - Folha Paga. (Portabilidade),
        -- 14 - Folha Paga. (Solicitacao Estouro).
        -- 15 - DARF/DAS
        -- 16 - Contrato SMS Cobrança
        -- 17 - Cancelamento Contrato SMS Cobrança
        -- 18 - Resgate Cheque -- SM 454.1        
        -- 21 - Pagamento FGTS
        -- 22 - Pagamento DAE
        
        IF vr_tptransa = 9 THEN /* Folha de Pagamento */
           OPEN cr_tbfolha_trans_pend (pr_cdtrapen => vr_cdtransa);
           FETCH cr_tbfolha_trans_pend INTO rw_tbfolha_trans_pend;
           IF cr_tbfolha_trans_pend%NOTFOUND THEN
              --Fechar Cursor
              CLOSE cr_tbfolha_trans_pend;
              --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
              --Montar mensagem de erro
              vr_cdcritic:= 1122; --Transacao pendente Folha Pagamento não cadastrada
              vr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
              --Levantar Excecao
              RAISE vr_exc_erro;
           END IF;
           --Fechar Cursor
           CLOSE cr_tbfolha_trans_pend;
           
           -- Se solicita estouro
           IF rw_tbfolha_trans_pend.idestouro = 1 THEN
              -- Vamos utiliar o horario limite para solicitação do estouro
              vr_hrlimite := TO_CHAR(TO_DATE(pr_tab_limite_pend(14).hrfimpag,'hh24:mi'),'sssss'); --Horário Limite Folha 'FOLHAIB_HOR_LIM_SOL_EST';
           ELSIF rw_tbfolha_trans_pend.dtdebito > vr_datdodia THEN
              -- Se for para o dia seguinte seguinte, utilizar o horario de agendamento
              vr_hrlimite := TO_CHAR(TO_DATE(pr_tab_limite_pend(12).hrfimpag,'hh24:mi'),'sssss'); --Horário Limite Folha 'FOLHAIB_HOR_LIM_AGENDA';
           ELSE
              -- Verificar se a folha de pagamento em questão possui apenas contas da cooperativa
              -- ou se possui também CTASAL
              OPEN cr_qtd_folha(pr_cdcooper => rw_tbfolha_trans_pend.cdcooper
                               ,pr_cdempres => rw_tbfolha_trans_pend.cdempres
                               ,pr_nrseqpag => rw_tbfolha_trans_pend.nrsequencia_folha);
              FETCH cr_qtd_folha INTO rw_qtd_folha;
              -- Fecha cursor
              CLOSE cr_qtd_folha;
              
              -- verificar se existe apenas CTASAL
              IF rw_qtd_folha.qtd_ctasal > 0 AND rw_qtd_folha.qtd_coop = 0 THEN           
                -- Se possui apenas CTASAL, utilizar o horario da portabilidade
              vr_hrlimite := TO_CHAR(TO_DATE(pr_tab_limite_pend(13).hrfimpag,'hh24:mi'),'sssss'); --Horário Limite Folha 'FOLHAIB_HOR_LIM_PORTAB';
              ELSE
                -- Caso contrário, utilizar o horario limite da cooperativa
                vr_hrlimite := TO_CHAR(TO_DATE(pr_tab_limite_pend(19).hrfimpag,'hh24:mi'),'sssss'); --Horário Limite Folha 'FOLHAIB_HOR_LIM_PAG_COOP';
           END IF;   
           END IF;   
        ELSIF vr_tptransa = 8 THEN -- Débito Fácil
           vr_hrlimite := TO_CHAR(TO_DATE(pr_tab_limite_pend(11).hrfimpag,'hh24:mi'),'sssss');
        ELSIF vr_tptransa = 7 THEN -- Aplicações
           vr_hrlimite := TO_CHAR(TO_DATE(pr_tab_limite_pend(8).hrfimpag,'hh24:mi'),'sssss');
        ELSIF vr_tptransa IN (6,21) THEN -- Crédito Pré-Aprovado / emprestimos/financiamentos
           vr_hrlimite := TO_CHAR(TO_DATE(pr_tab_limite_pend(7).hrfimpag,'hh24:mi'),'sssss');
        ELSIF vr_tptransa = 4 THEN -- TED
           vr_hrlimite := TO_CHAR(TO_DATE(pr_tab_limite_pend(4).hrfimpag,'hh24:mi'),'sssss');
        ELSIF vr_tptransa = 2 THEN -- Pagamento
           OPEN cr_tbpagto_trans_pend (pr_cdtrapen => vr_cdtransa);
           FETCH cr_tbpagto_trans_pend INTO rw_tbpagto_trans_pend;
           IF cr_tbpagto_trans_pend%NOTFOUND THEN
              --Fechar Cursor
              CLOSE cr_tbpagto_trans_pend;
              --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
              --Montar mensagem de erro
              vr_cdcritic:= 1122; --Transacao pendente Pagamento não cadastrada
              vr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
              --Levantar Excecao
              RAISE vr_exc_erro;
           END IF;
           --Fechar Cursor
           CLOSE cr_tbpagto_trans_pend;

           IF rw_tbpagto_trans_pend.vlpagamento >= 250000 THEN
              vr_hrlimite := TO_CHAR(TO_DATE(pr_tab_limite_pend(6).hrfimpag,'hh24:mi'),'sssss'); -- VR-Boleto
          ELSE
              vr_hrlimite := TO_CHAR(TO_DATE(pr_tab_limite_pend(2).hrfimpag,'hh24:mi'),'sssss'); -- Pagamento
           END IF;
        ELSIF vr_tptransa = 11 THEN -- Pagamento DARF/DAS
           OPEN cr_tbpagto_darf_das_trans_pend (pr_cdtrapen => vr_cdtransa);
           FETCH cr_tbpagto_darf_das_trans_pend INTO rw_tbpagto_darf_das_trans_pend;
           IF cr_tbpagto_darf_das_trans_pend%NOTFOUND THEN
              --Fechar Cursor
              CLOSE cr_tbpagto_darf_das_trans_pend;
              --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
              --Montar mensagem de erro
              vr_cdcritic:= 1123; --Transacao pendente Pagamento DARF/DAS não cadastrada
              vr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
              --Levantar Excecao
              RAISE vr_exc_erro;
           END IF;
           --Fechar Cursor
           CLOSE cr_tbpagto_darf_das_trans_pend;
           
           vr_hrlimite := TO_CHAR(TO_DATE(pr_tab_limite_pend(15).hrfimpag,'hh24:mi'),'sssss');

        ELSIF vr_tptransa IN (14,15) THEN -- Pagamento FGTS, DAe
           OPEN cr_tbtrib_trans_pend (pr_cdtrapen => vr_cdtransa);
           FETCH cr_tbtrib_trans_pend INTO rw_tbtrib_trans_pend;
           IF cr_tbtrib_trans_pend%NOTFOUND THEN
              --Fechar Cursor
              CLOSE cr_tbtrib_trans_pend;
              --Erro
              vr_cdcritic:= 0;
              vr_dscritic:= 'Transacao pendente Pagamento de tributos não cadastrada.';
              --Levantar Excecao
              RAISE vr_exc_erro;
           END IF;
           --Fechar Cursor
           CLOSE cr_tbtrib_trans_pend;
           
           -- FGTS
           IF vr_tptransa = 14 THEN
             vr_hrlimite := TO_CHAR(TO_DATE(pr_tab_limite_pend(20).hrfimpag,'hh24:mi'),'sssss');
           -- DAE
           ELSIF vr_tptransa = 15 THEN
             vr_hrlimite := TO_CHAR(TO_DATE(pr_tab_limite_pend(21).hrfimpag,'hh24:mi'),'sssss');
           END IF;

        ELSE /* Transferencias */
           vr_hrlimite := TO_CHAR(TO_DATE(pr_tab_limite_pend(1).hrfimpag,'hh24:mi'),'sssss'); 
        END IF;

        vr_dsparame := vr_dsparlp1 ||
                       vr_dsparlp2 ||
                       ', vr_idagenda:' || vr_idagenda ||
                       ', vr_dtmvtopg:' || vr_dtmvtopg ||
                       ', vr_hrlimite:' || vr_hrlimite;

        IF vr_idagenda = 1  THEN /* Debito nesta data */
          --Se data pagamento menor data movimento
          IF Trunc(vr_dtmvtopg) < Trunc(pr_dtmvtolt)  AND
             (Trunc(vr_dtmvtopg) < Trunc(SYSDATE) OR vr_hratual > vr_hrlimite) THEN
            --Atualiza flag alterar para true
            vr_flgalter := TRUE;
            pr_flgalter := TRUE;
          END IF;
        ELSE 
		      IF vr_tptransa = 10 THEN /* Pacote de Tarifas */
					   IF TO_CHAR(rw_tbgen_trans_pend.dtmvtolt, 'MM') <> TO_CHAR(SYSDATE, 'MM') THEN
  							--Atualizar flag para true
								vr_flgalter := TRUE;
								pr_flgalter := TRUE;							 
						 END IF;							 
          ELSIF  vr_tptransa = 12 THEN --> Desconto de Cheque
            --> Verificar se ja se passou 7 dias desde a criação da pendencia
            IF rw_tbgen_trans_pend.dtmvtolt + 7 < pr_dtmvtolt THEN
              --Atualizar flag para true
						  vr_flgalter := TRUE;
						  pr_flgalter := TRUE;
            END IF;           
					ELSIF  vr_tptransa IN (16,17) THEN --> Contrato SMS cobrança
            --> Verificar se ja se passou 30 dias desde a criação da pendencia
            IF rw_tbgen_trans_pend.dtmvtolt + 30 < pr_dtmvtolt THEN
              --Atualizar flag para true
						  vr_flgalter := TRUE;
						  pr_flgalter := TRUE;
            END IF;           
-- Início SM 454.1
					ELSIF  vr_tptransa = 18 THEN --> Resgate Cheque
            --> Verificar se ja se passou 24 horas desde a criação da pendencia
            --Busca o dia e hora de criação da transação
            BEGIN
              select 
                    (sysdate - t.dtmvtolt) * 24
                into
                    vr_qthoras
                from
                    tbcst_trans_pend t
               where
                    t.cdtransacao_pendente = rw_tbgen_trans_pend.cdtransacao_pendente;
            EXCEPTION
              WHEN NO_DATA_FOUND THEN
                --Erro
                vr_cdcritic:= 0;
                vr_dscritic:= 'Transacao pendente Resgate de Cheque não cadastrada.';
                --Levantar Excecao
                RAISE vr_exc_erro;
            END;
            IF vr_qthoras > 24 THEN
              --Atualizar flag para true
						  vr_flgalter := TRUE;
						  pr_flgalter := TRUE;
            END IF;           
-- Fim  SM 454.1          
					-- Projeto 470 - Marcelo Telles Coeljho - Mouts
          ELSIF  vr_tptransa = 20 THEN --> Contratos
            --> Verificar se ja se passou 15 dias desde a criação da pendencia
            IF rw_tbgen_trans_pend.dtmvtolt + 15 < pr_dtmvtolt THEN
              --Atualizar flag para true
						  vr_flgalter := TRUE;
						  pr_flgalter := TRUE;
            END IF;
					-- Fim Projeto 470
										 

            ELSIF  vr_tptransa IN (21) THEN --> Emprestimos/financiamentos
              --> Verificar se ja se passou 7 dias desde a criação da pendencia
              IF rw_tbgen_trans_pend.dtmvtolt + 7 < pr_dtmvtolt THEN
              --Atualizar flag para true
						  vr_flgalter := TRUE;
						  pr_flgalter := TRUE;

              END IF;           

					ELSE
						--Debito por agendamento
						vr_dtauxili := GENE0005.fn_valida_dia_util(pr_cdcooper => pr_cdcooper --> Cooperativa conectada
																											,pr_dtmvtolt => TRUNC(SYSDATE) --> Data do movimento
																											,pr_tipo     => 'P');
						IF Trunc(vr_dtmvtopg) < Trunc(SYSDATE) OR
							 (Trunc(pr_dtmvtolt) > Trunc(SYSDATE)      AND
								Trunc(vr_dtmvtopg) < Trunc(pr_dtmvtolt) AND
								vr_dtmvtopg <> vr_dtauxili               AND --Verificarcao de final de semana ou feriado
											pr_dssgproc = 'NAO') THEN
							--Atualizar flag para true
								vr_flgalter := TRUE;
								pr_flgalter := TRUE;
					END IF;
        END IF;
        END IF;
        --
        -- EMPRESITMOS/FINANCIAMENTOS (AMCOM - P438)
        IF vr_tptransa = 21 AND fn_proposta_n_aprovada(rw_tbgen_trans_pend.cdtransacao_pendente)
          THEN
						vr_flgalter := TRUE;
 					  pr_flgalter := TRUE;
        END IF;           
        --/
        vr_dsparlp3 := ', vr_dtmvtopg:' || vr_dtmvtopg  ||
                       ', pr_dtmvtolt:' || pr_dtmvtolt  ||
                       ', SYSDATE:'     || SYSDATE      ||
                       ', vr_dtauxili:' || vr_dtauxili  ||
                       ', vr_qthoras:'  || vr_qthoras   ||
                       ', vr_idagenda:' || vr_idagenda  ||
                       ', vr_dtmvtopg:' || vr_dtmvtopg  ||
                       ', vr_hrlimite:' || vr_hrlimite  ||
                       ', vr_flgalter:' || CASE vr_flgalter WHEN true 
                                           THEN 'true'
                                           ELSE 'false' END ||
                       ', pr_flgalter:' || CASE pr_flgalter WHEN true 
                                           THEN 'true'
                                           ELSE 'false' END;                                         
        vr_dsparame := vr_dsparlp1 ||
                       vr_dsparlp2 ||
                       vr_dsparlp3;

        --Se deve alterar
        IF vr_flgalter THEN
           -- Excluido BEGIN Generico intermediario - 15/12/2017 - Chamado 779415 
           -- Foi colocado BEGIN EXCEPTION em cada situacao especifica necessario
            IF vr_tptransa = 13 THEN
              BEGIN
              UPDATE tbrecarga_operacao
                 SET insit_operacao = 7
               WHERE idoperacao = rw_tbrecarga_trans_pend.idoperacao;
              EXCEPTION
                WHEN OTHERS THEN
                  -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
                  CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
                  -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
                  vr_cdcritic := 1035;
                  vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                                 'TBRECARGA_OPERACAO(32):'  ||
                                 ' insit_operacao:'  || '7' ||
                                 ' com idoperacao:'  || rw_tbrecarga_trans_pend.idoperacao || 
                                 '. ' || sqlerrm;
                  --Levantar Excecao
                  RAISE vr_exc_erro;
              END;               
            END IF;
            
            BEGIN
            UPDATE tbgen_trans_pend 
            SET    tbgen_trans_pend.idsituacao_transacao = 4 /* Expirada */
                  ,tbgen_trans_pend.dtalteracao_situacao = trunc(SYSDATE)
            WHERE  tbgen_trans_pend.ROWID = rw_tbgen_trans_pend.ROWID;
            EXCEPTION
              WHEN OTHERS THEN
                -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
                CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
                -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
                vr_cdcritic := 1035;
                vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                               'TBGEN_TRANS_PEND(33):'   ||
                               ' idsituacao_transacao:'  || '4' ||
                               ', dtalteracao_situacao:' || trunc(SYSDATE) ||
                               ' com ROWID:'             || rw_tbgen_trans_pend.ROWID || 
                               '. ' || sqlerrm;
                --Levantar Excecao
                RAISE vr_exc_erro;
            END;   
            
            BEGIN
            UPDATE tbgen_aprova_trans_pend
            SET    tbgen_aprova_trans_pend.idsituacao_aprov = 4 /* Expirada */
                  ,tbgen_aprova_trans_pend.dtalteracao_situacao = trunc(SYSDATE)
                  ,tbgen_aprova_trans_pend.hralteracao_situacao = GENE0002.fn_busca_time
            WHERE  tbgen_aprova_trans_pend.cdtransacao_pendente = vr_cdtransa
            AND    tbgen_aprova_trans_pend.idsituacao_aprov = 1; /* Pendente */
            EXCEPTION
              WHEN OTHERS THEN
                -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
                CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
                -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
                vr_cdcritic := 1035;
                vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                               'TBGEN_APROVA_TRANS_PEND(35):' ||
                               ' idsituacao_aprov:'         || '4' ||
                               ', dtalteracao_situacao:'    || 'trunc(SYSDATE)' ||
                               ', hralteracao_situacao:'    || 'GENE0002.fn_busca_time' ||
                               ' com cdtransacao_pendente:' || vr_cdtransa || 
                               ', idsituacao_aprov:'        || '1' || 
                               '. ' || sqlerrm;
                --Levantar Excecao
                RAISE vr_exc_erro;
            END;   
            
            FOR rw_tbgen_aprova_trans_pend IN cr_tbgen_aprova_trans_pend 
                (pr_cddoitem  => rw_tbgen_trans_pend.cdtransacao_pendente) LOOP -- buscar registro do cpf informado

              BEGIN
        
                vr_dsparame := vr_dsparlp1 ||
                               vr_dsparlp2 ||
                               vr_dsparlp3 ||
                               ', rw_tbgen_aprova_trans_pend.nrcpf_responsavel_aprov:';
                       
                OPEN cr_crapavt(pr_cdcooper => pr_cdcooper
							                 ,pr_nrdconta => pr_nrdconta
                               ,pr_tpctrato => 6
                               ,pr_nrcpfcgc => rw_tbgen_aprova_trans_pend.nrcpf_responsavel_aprov);
				        FETCH cr_crapavt INTO vr_nrctarep
                                     ,vr_nmprimtl;
                --Se nao encontrou 
                IF cr_crapavt%NOTFOUND THEN
                   --Fechar Cursor
                   CLOSE cr_crapavt;
                   --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
                   vr_cdcritic:= 1124; --Registro do representante nao encontrado
                   vr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
                   --Levantar Excecao - 29/10/2018 - INC0099999
					         RAISE vr_exc_continua;
				        END IF;
                --Fechar Cursor
                CLOSE cr_crapavt;
                
                vr_dsparame := vr_dsparlp1 ||
                               vr_dsparlp2 ||
                               vr_dsparlp3 ||
                               ', rw_tbgen_aprova_trans_pend.nrcpf_responsavel_aprov:' ||
                               ', vr_nrctarep:' || vr_nrctarep ||
                               ', vr_nmprimtl:' || vr_nmprimtl;
                
                IF vr_nrctarep > 0 THEN
                    OPEN cr_crapass(pr_cdcooper => pr_cdcooper
                                   ,pr_nrdconta => vr_nrctarep);
                    FETCH cr_crapass INTO vr_nmprimtl;
                    --Se nao encontrou 
                    IF cr_crapass%NOTFOUND THEN
                       --Fechar Cursor
                       CLOSE cr_crapass;
                       --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
                       vr_cdcritic:= 1124; --Registro do representante nao encontrado
                       vr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
                       --Levantar Excecao - 29/10/2018 - INC0099999
                       RAISE vr_exc_continua;
                    END IF;
                    --Fechar Cursor
                    CLOSE cr_crapass;
        
                    vr_dsparame := vr_dsparlp1 ||
                                   vr_dsparlp2 ||
                                   vr_dsparlp3 ||
                                   ', rw_tbgen_aprova_trans_pend.nrcpf_responsavel_aprov:' ||
                                   ', vr_nrctarep:' || vr_nrctarep ||
                                   ', vr_nmprimtl:' || vr_nmprimtl ||
                                   ', vr_nrctarep:' || vr_nrctarep;
                END IF;
                
                --Consulta do idseqttl do representante na crapsnh
                OPEN cr_crapsnh(pr_cdcooper => pr_cdcooper
                               ,pr_nrdconta => rw_tbgen_aprova_trans_pend.nrdconta
                               ,pr_nrcpfcgc => rw_tbgen_aprova_trans_pend.nrcpf_responsavel_aprov);
                FETCH cr_crapsnh INTO vr_idseqttl;
                
                --Se nao encontrou 
                IF cr_crapsnh%NOTFOUND THEN  
                   --Fechar Cursor
                   CLOSE cr_crapsnh;  
                   --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
                   vr_cdcritic:= 1125; --Registro de senha nao encontrado
                   vr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
                   --Levantar Excecao - 29/10/2018 - INC0099999 
                   RAISE vr_exc_continua;
                END IF;
                --Fechar Cursor
                CLOSE cr_crapsnh;              
                -- Prepara mensagem - 29/10/2018 - PRB0040400                    
                vr_dsparlp4 := ', rw_tbgen_aprova_trans_pend.nrcpf_responsavel_aprov:' ||
                               ', vr_nrctarep:' || vr_nrctarep ||
                               ', vr_nmprimtl:' || vr_nmprimtl ||
                               ', vr_nrctarep:' || vr_nrctarep ||
                               ', vr_idseqttl :' || vr_idseqttl;             
                vr_dsparame := vr_dsparlp1 ||
                               vr_dsparlp2 ||
                               vr_dsparlp3 ||
                               vr_dsparlp4;       
                
                -- Criacao de mensagens de transacao
                INET0002.pc_cria_msgs_trans (pr_cdcooper => pr_cdcooper   -- Codigo Cooperativa
                                            ,pr_nrdconta => pr_nrdconta   -- Conta do Associado
                                            ,pr_nrdcaixa => 900   -- Numero do caixa
                                            ,pr_cdagenci => 90  -- Numero da agencia
                                            ,pr_cdoperad => '996'   -- Numero do operador
                                            ,pr_dtmvtolt => pr_dtmvtolt   -- Data da operacao
                                            ,pr_cdorigem => 3             -- Codigo Origem
                                            ,pr_nmdatela => 'INTERNETBANK'-- Nome da tela
                                            ,pr_cdtranpe => vr_cdtransa             -- Codigo da Transacao Principal
                                            ,pr_tptransa => vr_tptransa   -- Tipo de Transacao
                                            ,pr_dsdmensg => vr_dsdmensg		-- Descricao da mensagem
                                            ,pr_cdcritic => vr_cdcritic   -- Codigo do erro
                                            ,pr_dscritic => vr_dscritic); -- Descricao do erro
                -- Prepara mensagem - 29/10/2018 - PRB0040400                        
                IF NVL(vr_cdcritic,0) > 0 OR vr_dscritic IS NOT NULL THEN 
                  vr_dsparame := vr_dsparlp1 ||
                                 vr_dsparlp2 ||
                                 vr_dsparlp3 ||
                                 vr_dsparlp4 ||
                                 ', INET0002.pc_cria_msgs_trans'  ||
                                 ': vr_dsdmensg: ' || SUBSTR(vr_dsdmensg,1,100) || 
                                 ', vr_dscritic: ' || SUBSTR(vr_dscritic,1,100) || 
                                 ', vr_cdcritic: ' || vr_cdcritic;  
                  -- Ajusta descrção
                  vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic
                                                          ,pr_dscritic => vr_dscritic) ||
                                                          'PAGA0001.pc_altera_situac_trans. Continua. ' || 
                                                          vr_dsparame;    
                  --> Geração de log                             
                  pc_controla_log_programa(pr_cdcooper      => pr_cdcooper
                                          ,pr_dstiplog      => 'E' -- Tipo de Log - E = erro
                                          ,pr_tpocorrencia  => 2   -- 1-Erro de negocio/ 2-Erro nao tratado
                                          ,pr_cdmensagem    => vr_cdcritic  -- Codigo do Log
                                          ,pr_dsmensagem    => vr_dscritic  -- Descrição
                                     );      
                  vr_cdcritic := NULL;     
                  vr_dscritic := NULL;
                  vr_dscriti2 := NULL; 
                END IF;
	              -- Retorna nome do módulo logado - 15/12/2017 - Chamado 779415
		            GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_altera_situac_trans');
           
                vr_notif_dsdmensg := vr_dsdmensg;           
                vr_dsdmensg := 'Atenção, ' || vr_nmprimtl || '!<br><br>' ||
                               'Informamos que a seguinte transação expirou:<br><br>' || 
                               vr_dsdmensg;
                                   
                -- Gerar mensagem
                gene0003.pc_gerar_mensagem(pr_cdcooper => pr_cdcooper
                                          ,pr_nrdconta => pr_nrdconta
                                          ,pr_idseqttl => vr_idseqttl
                                          ,pr_cdprogra => 'PAGA0001'
                                          ,pr_inpriori => 0
                                          ,pr_dsdmensg => vr_dsdmensg
                                          ,pr_dsdassun => 'Transação expirada'
                                          ,pr_dsdremet => vr_nmrescop
                                          ,pr_dsdplchv => 'Transação expirada'
                                          ,pr_cdoperad => 1
                                          ,pr_cdcadmsg => 0
                                          ,pr_dscritic => vr_dscriti2);
                -- Prepara mensagem - 29/10/2018 - PRB0040400    
                IF vr_dscriti2 IS NOT NULL THEN 
                  vr_dsparame := vr_dsparlp1 ||
                                 vr_dsparlp2 ||
                                 vr_dsparlp3 ||
                                 vr_dsparlp4 ||
                                 ', INET0002.pc_cria_msgs_trans'  ||
                                 ': vr_dsdmensg: ' || SUBSTR(vr_dsdmensg,1,100) || 
                                 ', vr_dscritic: ' || SUBSTR(vr_dscritic,1,100) || 
                                 ', vr_cdcritic: ' || vr_cdcritic ||
                                 ', gene0003.pc_gerar_mensagem'  ||
                                 ': vr_dscriti2: ' || SUBSTR(vr_dscriti2,1,100);  
                  -- Ajusta descrção
                  vr_cdcritic := 0;
                  vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic
                                                          ,pr_dscritic => vr_dscritic) ||
                                                          'PAGA0001.pc_altera_situac_trans. Continua. ' || 
                                                          vr_dsparame;    
                  --> Geração de log                             
                  pc_controla_log_programa(pr_cdcooper      => pr_cdcooper
                                          ,pr_dstiplog      => 'E' -- Tipo de Log - E = erro
                                          ,pr_tpocorrencia  => 2   -- 1-Erro de negocio/ 2-Erro nao tratado
                                          ,pr_cdmensagem    => vr_cdcritic  -- Codigo do Log
                                          ,pr_dsmensagem    => vr_dscritic  -- Descrição
                                     );      
                  vr_cdcritic := NULL;     
                  vr_dscritic := NULL;
                  vr_dscriti2 := NULL;   
                END IF;
	              -- Retorna nome do módulo logado - 15/12/2017 - Chamado 779415
		            GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_altera_situac_trans');
                vr_variaveis_notif('#dsdmensg') := vr_notif_dsdmensg;
                -- Cria uma notificação
                noti0001.pc_cria_notificacao(pr_cdorigem_mensagem => vr_notif_origem
                                            ,pr_cdmotivo_mensagem => vr_notif_motivo
                                            ,pr_cdcooper => pr_cdcooper
                                            ,pr_nrdconta => pr_nrdconta
                                            ,pr_idseqttl => vr_idseqttl
                                            ,pr_variaveis => vr_variaveis_notif);                 
	              -- Retorna nome do módulo logado - 15/12/2017 - Chamado 779415
		            GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_altera_situac_trans');                                
                --                    
              EXCEPTION                
               -- Gera Log e continua rotina - 29/10/2018 - PRB0040400                  
                WHEN vr_exc_continua THEN
                  -- Ajusta descrção
                  vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic
                                                          ,pr_dscritic => vr_dscritic) ||
                                                          'PAGA0001.pc_altera_situac_trans. Continua. ' || 
                                                          vr_dsparame;    
                  --> Geração de log                             
                  pc_controla_log_programa(pr_cdcooper      => pr_cdcooper
                                          ,pr_dstiplog      => 'E' -- Tipo de Log - E = erro
                                          ,pr_tpocorrencia  => 1   -- 1-Erro de negocio/ 2-Erro nao tratado
                                          ,pr_cdmensagem    => vr_cdcritic  -- Codigo do Log
                                          ,pr_dsmensagem    => vr_dscritic  -- Descrição
                                     );      
                  vr_cdcritic := NULL;     
                  vr_dscritic := NULL;
                  vr_dscriti2 := NULL; 
                WHEN OTHERS THEN       
                  -- No caso de erro de programa gravar tabela especifica de log 
                  CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);               
                  -- Ajuste mensagem de erro 
                  vr_cdcritic := 9999;
                  vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                      'PAGA0001.pc_altera_situac_trans. Continua. ' || SQLERRM ||
                      '.' || vr_dsparame;
                  --> Geração de log                             
                  pc_controla_log_programa(pr_cdcooper      => pr_cdcooper
                                          ,pr_dstiplog      => 'E' -- Tipo de Log - E = erro
                                          ,pr_tpocorrencia  => 2   -- 1-Erro de negocio/ 2-Erro nao tratado
                                          ,pr_cdmensagem    => vr_cdcritic  -- Codigo do Log
                                          ,pr_dsmensagem    => vr_dscritic  -- Descrição
                                     );      
                  vr_cdcritic := NULL;
                  vr_dscritic := NULL;
                  vr_dscriti2 := NULL; 
              END;
            END LOOP;
        END IF; -- If vr_flgalter
      END LOOP;
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);
    EXCEPTION
      -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415      
      -- Disparadores: paga0001.pc_atualiza_trans_nao_efetiv   - Grava TBEGN
      WHEN vr_exc_erro THEN
        pr_cdcritic:= vr_cdcritic;
        pr_dscritic:= vr_dscritic ||
                      vr_dsparame;       
      WHEN OTHERS THEN
        -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
        CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
        -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        pr_cdcritic:= 9999;
        pr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic) ||
                      'PAGA0001.pc_altera_situac_trans. ' || SQLERRM ||
                      '.' || vr_dsparame;
    END;
  END pc_altera_situac_trans;


  /* Procedure para atualizar o registro de transacao para nao efetivado */
  PROCEDURE pc_atualiza_trans_nao_efetiv (pr_cdcooper IN crapcop.cdcooper%type  --Código da Cooperativa
                                         ,pr_nrdconta IN crapass.nrdconta%TYPE  --Numero da Conta
                                         ,pr_cdagenci IN crapass.cdagenci%TYPE  --Código da Agencia
                                         ,pr_dtmvtolt IN crapdat.dtmvtolt%type  --Data Proximo Pagamento
                                         ,pr_dstransa OUT VARCHAR2              --Msg Transação
                                         ,pr_cdcritic OUT INTEGER               --Código de erro
                                         ,pr_dscritic OUT varchar2) IS          --Retorno de Erro
    -- ..........................................................................
    --
    --  Programa : pc atualiza trans nao efetiv  Antiga: b1wgen0016.p/atualiza_transacoes_nao_efetivadas
    --  Sistema  : Rotinas Internet
    --  Sigla    : INET
    --  Autor    : Alisson C. Berrido - AMcom
    --  Data     : Junho/2013.                   Ultima atualizacao: 11/03/2019
    --
    --  Dados referentes ao programa:
    --
    --   Frequencia: Sempre que for chamado
    --   Objetivo  : Atualizar transação para não efetivada.
    --
    --   Alterações: 16/09/2015 - Melhorias de performace retirar a leitura da crapass
    --                            visto que existe poucos cooperados que utilizam craptoj e
    --                            e que possuem registros pendentes(Odirlei-AMcom)
    --
    --               17/12/2015 - Ajustes para o proje. 131 Assinatura Multipla.
    --                            (Jorge/David)
    --
    --               11/03/2019 - Quando der erro na rotina pc atualiza trans nao efetiv, 
    --                            gerar Log pois as rotinas chamadoras iram ignorar o erro.
    --                            (Belli - Envolti - INC0034476)
    --
  BEGIN
    DECLARE
      --Cursores Locais
      CURSOR cr_crapass (pr_cdcooper IN crapcop.cdcooper%type
                        ,pr_nrdconta IN crapass.nrdconta%type) IS
        SELECT crapass.nrdconta
        FROM   crapass crapass
        WHERE  crapass.cdcooper = pr_cdcooper
        AND    crapass.nrdconta = Decode(pr_nrdconta,0,crapass.nrdconta,pr_nrdconta);
      
      --Variaveis Locais
      vr_hrlimtrf     INTEGER;
      vr_hrlimpag     INTEGER;
      vr_hrlimted     INTEGER;
      vr_cdcritic     crapcri.cdcritic%TYPE;
      vr_index_limite INTEGER;
      vr_flgalter     BOOLEAN;
      --Variaveis de erro
      vr_des_erro     VARCHAR2(4000);
      --Tabela de memória de limites de horario
      vr_tab_limite_pend INET0002.typ_tab_limite_pend;
      --Variaveis de Excecao
      vr_exc_erro EXCEPTION;
      
      --Agrupa os parametros - 11/03/2019 - INC0034476 
      vr_dsparame VARCHAR2(4000);
      vr_cdprogra VARCHAR2 (100) := 'PAGA0001';
      vr_dsaction VARCHAR2 (100) := vr_cdprogra || '.pc_atualiza_trans_nao_efetiv';

    -- Trata email  - 11/03/2019 - INC0034476                
    PROCEDURE PC_EMAIL
    IS
    BEGIN
      -- Envia o email
      GENE0003.pc_solicita_email(pr_cdprogra    => vr_cdprogra
                                ,pr_des_destino => GENE0001.fn_param_sistema(
                                                    pr_nmsistem => 'CRED'
                                                   ,pr_cdacesso => 'EMAIL_CANC_DEBSIC')  
                                ,pr_des_assunto => 'ERRO NA EXECUCAO DO PROGRAMA '|| vr_dsaction
                                ,pr_des_corpo   => pr_dscritic 
                                ,pr_des_anexo   => NULL
                                ,pr_flg_enviar  => 'N'
                                ,pr_des_erro    => vr_des_erro); 
      GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);
    EXCEPTION       
      WHEN OTHERS THEN
        -- No caso de erro de programa gravar tabela especifica de log
        CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper
                                     ,pr_compleme => vr_dsaction || vr_dsparame );    
    END PC_EMAIL;
    -- 
    
    BEGIN                                           --  INICIO ROTINA PRINCIPAL
      
      -- Incluido nome do módulo logado - 11/03/2019 - INC0034476 
      GENE0001.pc_set_modulo(pr_module => NULL, pr_action => vr_dsaction);
      --Ajuste mensagem de erro - 11/03/2019 - INC0034476 
      vr_dsparame :=  ' pr_cdcooper:' || pr_cdcooper || 
                      ', pr_nrdconta:' || pr_nrdconta ||
                      ', pr_cdagenci:' || pr_cdagenci ||
                      ', pr_dtmvtolt:' || pr_dtmvtolt;  
                      
                              
      --Inicializar retorno erro
      pr_cdcritic:= NULL;
      pr_dscritic:= NULL;
      vr_flgalter:= FALSE;
      --Limpar tabela de memória
      vr_tab_limite_pend.DELETE;
      
      --Savepoint para abortar sem alterar
      SAVEPOINT TRANS_UNDO;

            --Buscar Horario Operacao
      INET0002.pc_horario_trans_pend (pr_cdcooper => pr_cdcooper  --Código Cooperativa
                                     ,pr_cdagenci => pr_cdagenci  --Agencia do Associado
                                     ,pr_cdoperad => '996'        --Operador
                                     ,pr_nrdcaixa => 900          --Nr do caixa
                                     ,pr_nmdatela => ''           --Nome da tela
                                     ,pr_idorigem => 3            --Id de Origem
                                     ,pr_tab_limite_pend => vr_tab_limite_pend --Tabelas de retorno de horarios limite
                                     ,pr_cdcritic => vr_cdcritic    --Código do erro
                                     ,pr_dscritic => vr_des_erro);  --Descricao do erro                            

      --Se ocorreu erro
      IF NVL(vr_cdcritic,0) <> 0 OR TRIM(vr_des_erro) IS NOT NULL THEN
        --levantar Excecao
        RAISE vr_exc_erro;
      END IF;
      -- Retorna nome do módulo logado - 11/03/2019 - INC0034476 
      GENE0001.pc_set_modulo(pr_module => NULL, pr_action => vr_dsaction);
      
      --Alterar situacao transacao
      pc_altera_situac_trans (pr_cdcooper => pr_cdcooper          --Cooperativa
                             ,pr_nrdconta => pr_nrdconta          --Conta do associado
                             ,pr_dssgproc => NULL                 --Indicador segundo processo
                             ,pr_dtmvtolt => pr_dtmvtolt          --Data do movimento
                             ,pr_tab_limite_pend => vr_tab_limite_pend --Tabelas de retorno de horarios limite
                             ,pr_flgalter => vr_flgalter          --Efetuou alteracao
                             ,pr_cdcritic => vr_cdcritic          --Codigo erro
                             ,pr_dscritic => vr_des_erro);        --Descricao erro
                             
      --Se ocorreu erro
      IF NVL(vr_cdcritic,0) <> 0 OR TRIM(vr_des_erro) IS NOT NULL THEN
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
      -- Retorna nome do módulo logado - 11/03/2019 - INC0034476 
      GENE0001.pc_set_modulo(pr_module => NULL, pr_action => vr_dsaction);
      
      pr_dstransa:= '';
        --Se deve alterar
      IF vr_flgalter THEN
         pr_dstransa:= 'O prazo para aprovar alguma(s) transação(ões) foi excedido. ' ||
                       'Por esse motivo o status será alterado para EXPIRADA.';
      END IF;

      -- Limpa nome do módulo logado - 11/03/2019 - INC0034476 
      GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);
    EXCEPTION -- - 11/03/2019 - INC0034476 
      WHEN vr_exc_erro THEN

        pr_cdcritic:= vr_cdcritic;
        pr_dscritic:= vr_des_erro ||
                      vr_dsparame;                      
        -- Geração de log                           
        pc_controla_log_programa( pr_cdcooper      => pr_cdcooper
                                 ,pr_dstiplog      => 'E' -- Tipo de Log - E = erro
                                 ,pr_tpocorrencia  => 1   
                                 ,pr_cdcriticidade => 1   
                                 ,pr_cdmensagem    => pr_cdcritic  -- Codigo do Log
                                 ,pr_dsmensagem    => pr_dscritic  -- Descrição
                                 ,pr_tpexecucao    => 0 -- 0-Outro, 1-Batch, 2-Job, 3-Online
                                 ); 

        --rollback do savepoint
        ROLLBACK TO TRANS_UNDO;

        -- Envia o email
        PC_EMAIL; 
        
      WHEN OTHERS THEN
        -- No caso de erro de programa gravar tabela especifica de log
        CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
        -- Ajuste mensagem de erro 
        pr_cdcritic:= 9999;
        pr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic) ||
                      ' ' || SQLERRM ||
                      '.' || vr_dsparame;	
        -- Geração de log                           
        pc_controla_log_programa( pr_cdcooper      => pr_cdcooper
                                 ,pr_dstiplog      => 'E'          -- Tipo de Log, E - erro
                                 ,pr_tpocorrencia  => 2            -- Erro não tratado  
                                 ,pr_cdcriticidade => 2 
                                 ,pr_cdmensagem    => pr_cdcritic  -- Codigo do Log
                                 ,pr_dsmensagem    => pr_dscritic  -- Descrição
                                 ,pr_tpexecucao    => 0            -- 0-Outro, 1-Batch, 2-Job, 3-Online
                                 ); 
        --rollback do savepoint
        ROLLBACK TO TRANS_UNDO;

        -- Envia o email
        PC_EMAIL; 
    END;
  END pc_atualiza_trans_nao_efetiv;


  /* Procedure para Efetuar lancamentos da baixa de titulo que esta em emprestimo */
  PROCEDURE pc_baixa_epr_titulo (pr_cdcooper IN INTEGER  --Codigo Cooperativa
                                ,pr_cdagenci IN INTEGER  --Codigo Agencia
                                ,pr_nrdcaixa IN INTEGER  --Numero do Caixa
                                ,pr_cdoperad IN VARCHAR2 --Codigo Operador
                                ,pr_nrdconta IN INTEGER  --Numero da Conta
                                ,pr_idseqttl IN INTEGER  --Sequencial do Titular
                                ,pr_idorigem IN INTEGER  --Identificador Origem pagamento
                                ,pr_nmdatela IN VARCHAR2 --Nome do programa chamador
                                ,pr_dtmvtolt IN DATE     --Data do Movimento
                                ,pr_nrctremp IN INTEGER  --Numero Contrato Emprestimo
                                ,pr_nrctasac IN INTEGER  --Numero da Conta do Sacado
                                ,pr_nrboleto IN INTEGER  --Numero do Boleto
                                ,pr_dtvencto IN DATE     --Data Vencimento
                                ,pr_vlboleto IN NUMBER   --Valor boleto
                                ,pr_vllanmto IN NUMBER   --Valor Lancamento
                                ,pr_flgerlog IN BOOLEAN  --Gerar erro log
                                ,pr_tab_erro OUT GENE0001.typ_tab_erro --Tabela de erro
                                ,pr_cdcritic OUT INTEGER --Código de erro
                                ,pr_dscritic OUT VARCHAR2) IS --Retorno de Erro
    -- .........................................................................
    --
    --  Programa : pc_baixa_epr_titulo           Antigo: b1wgen0023.p/baixa_epr_titulo
    --  Sistema  : Cred
    --  Sigla    : PAGA0001
    --  Autor    : Alisson C. Berrido - AMcom
    --  Data     : Julho/2013.                   Ultima atualizacao: 04/12/2014
    --
    --  Dados referentes ao programa:
    --
    --   Frequencia: Sempre que for chamado
    --   Objetivo  : Efetuar lancamentos da baixa de titulo que esta em emprestimo
    --
    --  Alterações
    --
    --        04/12/2014 - De acordo com a circula 3.656 do Banco Central,substituir
    --                     nomenclaturas Cedente por Beneficiário e  Sacado por Pagador
    --                      Chamado 229313 (Jean Reddiga - RKAM).

  BEGIN
    DECLARE
      --Selecionar emprestimos
      CURSOR cr_crapepr (pr_cdcooper IN crapepr.cdcooper%type
                        ,pr_nrctremp IN crapepr.nrctremp%type
                        ,pr_nrdconta IN crapepr.nrdconta%type) IS
        SELECT crapepr.cdcooper
              ,crapepr.nrdconta
              ,crapepr.nrctremp
              ,crapepr.dtdpagto
              ,crapepr.indpagto
              ,crapepr.inliquid
              ,crapepr.cdlcremp
              ,crapepr.txjuremp
              ,crapepr.vlpreemp
              ,crapepr.vlsdeved
              ,crapepr.ROWID
        FROM crapepr
        WHERE crapepr.cdcooper = pr_cdcooper
        AND   crapepr.nrctremp = pr_nrctremp
        AND   crapepr.nrdconta = pr_nrdconta;
      rw_crapepr cr_crapepr%ROWTYPE;
      --Selecionar lancamento
      CURSOR cr_craplcm (pr_cdcooper IN craplcm.cdcooper%type
                        ,pr_dtmvtolt IN craplcm.dtmvtolt%type
                        ,pr_cdagenci IN craplcm.cdagenci%type
                        ,pr_cdbccxlt IN craplcm.cdbccxlt%type
                        ,pr_nrdolote IN craplcm.nrdolote%type
                        ,pr_nrdctabb IN craplcm.nrdctabb%type
                        ,pr_nrdocmto IN craplcm.nrdocmto%type
                        ,pr_cdhistor IN craplcm.cdhistor%type) IS
        SELECT craplcm.ROWID
              ,craplcm.vllanmto
        FROM craplcm
        WHERE craplcm.cdcooper = pr_cdcooper
        AND   craplcm.dtmvtolt = pr_dtmvtolt
        AND   craplcm.cdagenci = pr_cdagenci
        AND   craplcm.cdbccxlt = pr_cdbccxlt
        AND   craplcm.nrdolote = pr_nrdolote
        AND   craplcm.nrdctabb = pr_nrdctabb
        AND   craplcm.nrdocmto = pr_nrdocmto
        AND   craplcm.cdhistor = pr_cdhistor;
      rw_craplcm cr_craplcm%ROWTYPE;
      --Selecionar lancamentos emprestimo
      CURSOR cr_craplem (pr_cdcooper IN craplem.cdcooper%type
                        ,pr_dtmvtolt IN craplem.dtmvtolt%type
                        ,pr_cdagenci IN craplem.cdagenci%type
                        ,pr_cdbccxlt IN craplem.cdbccxlt%type
                        ,pr_nrdolote IN craplem.nrdolote%type
                        ,pr_nrdconta IN craplem.nrdconta%type
                        ,pr_nrdocmto IN craplem.nrdocmto%type
                        ,pr_cdhistor IN craplem.cdhistor%type) IS
        SELECT craplem.ROWID
              ,craplem.vllanmto
        FROM craplem
        WHERE craplem.cdcooper = pr_cdcooper
        AND   craplem.dtmvtolt = pr_dtmvtolt
        AND   craplem.cdagenci = pr_cdagenci
        AND   craplem.cdbccxlt = pr_cdbccxlt
        AND   craplem.nrdolote = pr_nrdolote
        AND   craplem.nrdconta = pr_nrdconta
        AND   craplem.nrdocmto = pr_nrdocmto
        AND   craplem.cdhistor = pr_cdhistor;
      rw_craplem cr_craplem%ROWTYPE;
      --Selecionar informacoes Cobranca
      CURSOR cr_crapcob (pr_cdcooper IN crapcob.cdcooper%type
                        ,pr_nrctasac IN crapcob.nrctasac%type
                        ,pr_nrctremp IN crapcob.nrctremp%type
                        ,pr_nrdocmto IN crapcob.nrdocmto%type) IS
        SELECT crapcob.dtvencto
        FROM crapcob
        WHERE crapcob.cdcooper = pr_cdcooper
        AND   crapcob.nrctasac = pr_nrctasac
        AND   crapcob.nrctremp = pr_nrctremp
        AND   crapcob.nrdocmto = pr_nrdocmto;
      rw_crapcob cr_crapcob%ROWTYPE;
      --Selecionar informacoes cobranca
      CURSOR cr_crapcob2 (pr_cdcooper IN crapcob.cdcooper%type
                         ,pr_nrctasac IN crapcob.nrctasac%type
                         ,pr_nrctremp IN crapcob.nrctremp%type) IS
        SELECT crapcob.dtvencto
        FROM crapcob
        WHERE crapcob.cdcooper = pr_cdcooper
        AND   crapcob.nrctasac = pr_nrctasac
        AND   crapcob.nrctremp = pr_nrctremp
        AND   crapcob.dtdbaixa IS NULL;
      --Selecionar ultimo lancamentos emprestimo
      CURSOR cr_craplem2 (pr_cdcooper IN craplem.cdcooper%type
                         ,pr_nrdconta IN craplem.nrdconta%type
                         ,pr_nrctremp IN craplem.nrctremp%type) IS
        SELECT craplem.dtpagemp
        FROM craplem
        WHERE craplem.cdcooper = pr_cdcooper
        AND   craplem.nrdconta = pr_nrdconta
        AND   craplem.nrctremp = pr_nrctremp
        ORDER BY craplem.progress_recid DESC;
      rw_craplem2 cr_craplem2%ROWTYPE;
      --Selecionar as linhas de credito
      CURSOR cr_craplcr (pr_cdcooper IN craplcr.cdcooper%type
                        ,pr_cdlcremp IN craplcr.cdlcremp%type) IS
        SELECT craplcr.txdiaria
        FROM craplcr
        WHERE craplcr.cdcooper = pr_cdcooper
        AND   craplcr.cdlcremp = pr_cdlcremp;
      rw_craplcr cr_craplcr%ROWTYPE;
      --Variaveis Locais
      vr_contador INTEGER;
      vr_liquida  INTEGER;
      vr_dsorigem VARCHAR2(100);
      vr_nrdocmto VARCHAR2(100);
      vr_dstransa VARCHAR2(100);
      vr_flg_notfound BOOLEAN;
      vr_dtultpag DATE;
      vr_dtdpagto DATE;
      vr_flgderro BOOLEAN;
      vr_inusatab BOOLEAN;
      vr_dtmvtopr DATE;
      vr_nrdrowid ROWID;
      vr_inliquid crapepr.inliquid%type;
      vr_indpagto crapepr.indpagto%type;
      vr_dstextab craptab.dstextab%TYPE;
      vr_txdjuros craplcr.txdiaria%type;
      --Variaveis de erro
      vr_des_erro VARCHAR2(4000);
      vr_des_reto VARCHAR2(4000);
      vr_cdcritic crapcri.cdcritic%TYPE;
      vr_dscritic VARCHAR2(4000);
      --tabela de memoria de erro
      vr_tab_erro GENE0001.typ_tab_erro;
      --Variaveis de Excecao
      vr_exc_erro  EXCEPTION;
      vr_exc_saida EXCEPTION;
    BEGIN
      --Inicializar variaveis erro
      pr_cdcritic:= NULL;
      pr_dscritic:= NULL;
      --Descricao Origem
      vr_dsorigem:= GENE0001.vr_vet_des_origens(pr_idorigem);
      --Inicializar variaveis critica
      vr_cdcritic:= 0;
      vr_dscritic:= NULL;
      --Descricao transacao
      vr_dstransa:= 'Lancamentos de titulo pago que esta em emprestimo.';
      --Flag erro
      vr_flgderro:= FALSE;
      --Selecionar emprestimos
      OPEN cr_crapepr (pr_cdcooper => pr_cdcooper
                      ,pr_nrctremp => pr_nrctremp
                      ,pr_nrdconta => pr_nrctasac);
      --Posicionar no proximo registro
      FETCH cr_crapepr INTO rw_crapepr;
      --Se nao encontrar
      IF cr_crapepr%NOTFOUND THEN
        --Fechar Cursor
        CLOSE cr_crapepr;
        --Mensagem de erro
        vr_dscritic:= 'Registro de emprestimo nao encontrado.';
        vr_cdcritic:= 0;
        --Gerar erro
        GENE0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                             ,pr_cdagenci => pr_cdagenci
                             ,pr_nrdcaixa => pr_nrdcaixa
                             ,pr_nrsequen => 1 /** Sequencia **/
                             ,pr_cdcritic => vr_cdcritic
                             ,pr_dscritic => vr_dscritic
                             ,pr_tab_erro => vr_tab_erro);
        --Se for para gerar log
        IF pr_flgerlog THEN
          --gerar log
          GENE0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                              ,pr_cdoperad => pr_cdoperad
                              ,pr_dscritic => vr_dscritic
                              ,pr_dsorigem => vr_dsorigem
                              ,pr_dstransa => vr_dstransa
                              ,pr_dttransa => SYSDATE
                              ,pr_flgtrans => 0
                              ,pr_hrtransa => GENE0002.fn_busca_time
                              ,pr_idseqttl => pr_idseqttl
                              ,pr_nmdatela => pr_nmdatela
                              ,pr_nrdconta => pr_nrdconta
                              ,pr_nrdrowid => vr_nrdrowid);
          --gerar log item
          GENE0001.pc_gera_log_item(pr_nrdrowid => vr_nrdrowid
                                   ,pr_nmdcampo => 'nrctasac'
                                   ,pr_dsdadant => NULL
                                   ,pr_dsdadatu => pr_nrctasac);

          --gerar log item
          GENE0001.pc_gera_log_item(pr_nrdrowid => vr_nrdrowid
                                   ,pr_nmdcampo => 'nrctremp'
                                   ,pr_dsdadant => NULL
                                   ,pr_dsdadatu => pr_nrctremp);

        END IF;
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
      --Fechar Cursor
      IF cr_crapepr%ISOPEN THEN
        CLOSE cr_crapepr;
      END IF;

      --Selecionar taxa da tabela
      vr_dstextab:= TABE0001.fn_busca_dstextab(pr_cdcooper => pr_cdcooper
                                              ,pr_nmsistem => 'CRED'
                                              ,pr_tptabela => 'USUARI'
                                              ,pr_cdempres => 11
                                              ,pr_cdacesso => 'TAXATABELA'
                                              ,pr_tpregist => 0);
      --Se nao encontrou
      IF vr_dstextab IS NULL THEN
        vr_inusatab:= FALSE;
      ELSE
        vr_inusatab:= SUBSTR(vr_dstextab,1,1) != '0';
      END IF;

      --Se usa tabela
      IF vr_inusatab THEN
        OPEN cr_craplcr (pr_cdcooper => pr_cdcooper
                        ,pr_cdlcremp => rw_crapepr.cdlcremp);
        --Posicionar no proximo registro
        FETCH cr_craplcr INTO rw_craplcr;
        --Se nao encontrar
        IF cr_craplcr%NOTFOUND THEN
          --Fechar Cursor
          CLOSE cr_craplcr;
          --Gerar erro
          GENE0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                               ,pr_cdagenci => pr_cdagenci
                               ,pr_nrdcaixa => pr_nrdcaixa
                               ,pr_nrsequen => 1 /** Sequencia **/
                               ,pr_cdcritic => vr_cdcritic
                               ,pr_dscritic => vr_dscritic
                               ,pr_tab_erro => vr_tab_erro);
          --Se for para gerar log
          IF pr_flgerlog THEN
            --gerar log
            GENE0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                                ,pr_cdoperad => pr_cdoperad
                                ,pr_dscritic => vr_dscritic
                                ,pr_dsorigem => vr_dsorigem
                                ,pr_dstransa => vr_dstransa
                                ,pr_dttransa => SYSDATE
                                ,pr_flgtrans => 0
                                ,pr_hrtransa => GENE0002.fn_busca_time
                                ,pr_idseqttl => pr_idseqttl
                                ,pr_nmdatela => pr_nmdatela
                                ,pr_nrdconta => pr_nrdconta
                                ,pr_nrdrowid => vr_nrdrowid);
            --gerar log item
            GENE0001.pc_gera_log_item(pr_nrdrowid => vr_nrdrowid
                                     ,pr_nmdcampo => 'cdlcremp'
                                     ,pr_dsdadant => NULL
                                     ,pr_dsdadatu => rw_crapepr.cdlcremp);
          END IF;
          --Levantar Excecao
          RAISE vr_exc_erro;
        ELSE
          vr_txdjuros:= rw_craplcr.txdiaria;
        END IF;
        --Fechar Cursor
        IF cr_craplcr%ISOPEN THEN
          CLOSE cr_craplcr;
        END IF;
      ELSE
        vr_txdjuros:= rw_crapepr.txjuremp;
      END IF;

      --Numero do documento
      vr_nrdocmto:= pr_nrctremp||To_Char(pr_dtvencto,'MMYY');

      /* Caso a chamada vier pelo includes/crps375.i faz o credito de cobranca
         na conta corrente da cooperativa */

      IF pr_idorigem = 1 THEN
        --Selecionar Lote
        OPEN cr_craplot (pr_cdcooper => pr_cdcooper
                        ,pr_dtmvtolt => pr_dtmvtolt
                        ,pr_cdagenci => 1
                        ,pr_cdbccxlt => 100
                        ,pr_nrdolote => 9600);
        --Posicionar no proximo registro
        FETCH cr_craplot INTO rw_craplot;
        --Se encontrou registro
        IF cr_craplot%NOTFOUND THEN
          --Fechar Cursor
          CLOSE cr_craplot;
          --Criar lote
          BEGIN
            INSERT INTO craplot
                    (craplot.cdcooper
                    ,craplot.dtmvtolt
                    ,craplot.cdagenci
                    ,craplot.cdbccxlt
                    ,craplot.nrdolote
                    ,craplot.cdhistor
                    ,craplot.nrdcaixa
                    ,craplot.cdoperad
                    ,craplot.cdopecxa
                    ,craplot.tplotmov)
            VALUES  (pr_cdcooper
                    ,pr_dtmvtolt
                    ,1
                    ,100
                    ,9600
                    ,266
                    ,pr_nrdcaixa
                    ,pr_cdoperad
                    ,pr_cdoperad
                    ,1)
            RETURNING ROWID
                     ,craplot.cdcooper
                     ,craplot.dtmvtolt
                     ,craplot.cdagenci
                     ,craplot.cdbccxlt
                     ,craplot.nrdolote
                     ,craplot.nrseqdig
            INTO rw_craplot.ROWID
                ,rw_craplot.cdcooper
                ,rw_craplot.dtmvtolt
                ,rw_craplot.cdagenci
                ,rw_craplot.cdbccxlt
                ,rw_craplot.nrdolote
                ,rw_craplot.nrseqdig;

          EXCEPTION
            WHEN Dup_Val_On_Index THEN
              vr_cdcritic:= 0;
              vr_dscritic:= 'Lote ja cadastrado.';
              RAISE vr_exc_erro;
            WHEN OTHERS THEN
              vr_cdcritic:= 0;
              vr_dscritic:= 'Erro ao inserir na tabela de lotes. '||sqlerrm;
              RAISE vr_exc_erro;
          END;
        END IF;
        --Fechar Cursor
        IF cr_craplot%ISOPEN THEN
          CLOSE cr_craplot;
        END IF;

        /* Credita na conta da cooperativa o valor do pagamento do boleto */
        BEGIN
         lanc0001.pc_gerar_lancamento_conta(
              pr_dtmvtolt => rw_craplot.dtmvtolt
             ,pr_cdagenci => rw_craplot.cdagenci
             ,pr_cdbccxlt => rw_craplot.cdbccxlt
             ,pr_nrdolote => rw_craplot.nrdolote
             ,pr_nrdconta => pr_nrdconta
             ,pr_nrdctabb => pr_nrdconta
             ,pr_cdcooper => pr_cdcooper
             ,pr_nrdocmto => vr_nrdocmto
             ,pr_cdhistor => 266
             ,pr_nrseqdig => Nvl(rw_craplot.nrseqdig,0) + 1
             ,pr_vllanmto => pr_vllanmto
             ,pr_cdpesqbb => 'Pagador '||pr_nrctasac
             ,pr_tab_retorno => vr_tab_retorno
             ,pr_incrineg => vr_incrineg
             ,pr_cdcritic => vr_cdcritic
             ,pr_dscritic => vr_dscritic
             );
             
             rw_craplcm.vllanmto := pr_vllanmto;
             
          IF nvl(vr_cdcritic,0) > 0 OR 
           trim(vr_dscritic) IS NOT NULL THEN
                
            --Levantar Excecao
            RAISE vr_exc_erro;   
          END IF;
           
        EXCEPTION
          WHEN vr_exc_erro THEN
            RAISE vr_exc_erro;
          WHEN Others THEN
            vr_cdcritic:= 0;
            vr_dscritic:= 'Erro ao inserir na tabela craplcm. '||sqlerrm;
            --Levantar Excecao
            RAISE vr_exc_erro;
        END;
        --Atualizar lote
        BEGIN
          UPDATE craplot SET craplot.vlinfodb = Nvl(craplot.vlinfodb,0) + rw_craplcm.vllanmto
                            ,craplot.vlcompdb = Nvl(craplot.vlcompdb,0) + rw_craplcm.vllanmto
                            ,craplot.qtinfoln = Nvl(craplot.qtinfoln,0) + 1
                            ,craplot.qtcompln = Nvl(craplot.qtcompln,0) + 1
                            ,craplot.nrseqdig = Nvl(craplot.nrseqdig,0) + 1
          WHERE craplot.ROWID = rw_craplot.ROWID
          RETURNING craplot.nrseqdig INTO rw_craplot.nrseqdig;
        EXCEPTION
          WHEN OTHERS THEN
            pr_cdcritic:= 0;
            pr_dscritic:= 'Erro ao atualizar tabela craplot. '||SQLERRM;
            --Levantar Excecao
            RAISE vr_exc_erro;
        END;
      END IF;

      /* Debitar na conta da cooperativa */

      --Selecionar Lote
      OPEN cr_craplot (pr_cdcooper => pr_cdcooper
                      ,pr_dtmvtolt => pr_dtmvtolt
                      ,pr_cdagenci => 1
                      ,pr_cdbccxlt => 100
                      ,pr_nrdolote => 9601);
      --Posicionar no proximo registro
      FETCH cr_craplot INTO rw_craplot;
      --Se encontrou registro
      IF cr_craplot%NOTFOUND THEN
        --Fechar Cursor
        CLOSE cr_craplot;

        --Criar lote
        BEGIN
          INSERT INTO craplot
                  (craplot.cdcooper
                  ,craplot.dtmvtolt
                  ,craplot.cdagenci
                  ,craplot.cdbccxlt
                  ,craplot.nrdolote
                  ,craplot.cdoperad
                  ,craplot.cdhistor
                  ,craplot.nrseqdig
                  ,craplot.tplotmov)
          VALUES  (pr_cdcooper
                  ,pr_dtmvtolt
                  ,1
                  ,100
                  ,9601
                  ,pr_cdoperad
                  ,302
                  ,1
                  ,1)
          RETURNING ROWID
                   ,craplot.cdcooper
                   ,craplot.dtmvtolt
                   ,craplot.cdagenci
                   ,craplot.cdbccxlt
                   ,craplot.nrdolote
                   ,craplot.nrseqdig
          INTO rw_craplot.ROWID
              ,rw_craplot.cdcooper
              ,rw_craplot.dtmvtolt
              ,rw_craplot.cdagenci
              ,rw_craplot.cdbccxlt
              ,rw_craplot.nrdolote
              ,rw_craplot.nrseqdig;

        EXCEPTION
          WHEN Dup_Val_On_Index THEN
            vr_cdcritic:= 0;
            vr_dscritic:= 'Lote ja cadastrado.';
            RAISE vr_exc_erro;
          WHEN OTHERS THEN
            vr_cdcritic:= 0;
            vr_dscritic:= 'Erro ao inserir na tabela de lotes. '||sqlerrm;
            RAISE vr_exc_erro;
        END;
      END IF;
      --Fechar Cursor
      IF cr_craplot%ISOPEN THEN
        CLOSE cr_craplot;
      END IF;

      /* Debita na conta da cooperativa o valor do pagamento do boleto */
      BEGIN
         lanc0001.pc_gerar_lancamento_conta(
              pr_dtmvtolt => rw_craplot.dtmvtolt
             ,pr_cdagenci => rw_craplot.cdagenci
             ,pr_cdbccxlt => rw_craplot.cdbccxlt
             ,pr_nrdolote => rw_craplot.nrdolote
             ,pr_nrdconta => pr_nrdconta	
             ,pr_nrdctitg => gene0002.fn_mask(rw_crapepr.nrdconta,'99999999')
             ,pr_nrdctabb => pr_nrdconta
             ,pr_cdcooper => pr_cdcooper
             ,pr_nrdocmto => vr_nrdocmto
             ,pr_cdhistor => 302
             ,pr_nrseqdig => Nvl(rw_craplot.nrseqdig,0) + 1
             ,pr_vllanmto => pr_vllanmto
             ,pr_cdpesqbb => gene0002.fn_mask(pr_nrctasac,'99999999')
             ,pr_tab_retorno => vr_tab_retorno
             ,pr_incrineg => vr_incrineg
             ,pr_cdcritic => vr_cdcritic
             ,pr_dscritic => vr_dscritic
             );
             rw_craplcm.vllanmto := pr_vllanmto;
             
        IF nvl(vr_cdcritic,0) > 0 OR 
          trim(vr_dscritic) IS NOT NULL THEN
                
          --Levantar Excecao
          RAISE vr_exc_erro;   
        END IF;
           
      EXCEPTION
        WHEN vr_exc_erro THEN
          RAISE vr_exc_erro;
        WHEN Others THEN
          vr_cdcritic:= 0;
          vr_dscritic:= 'Erro ao inserir na tabela craplcm. '||sqlerrm;
          --Levantar Excecao
          RAISE vr_exc_erro;
      END;
      --Atualizar lote
      BEGIN
        UPDATE craplot SET craplot.vlinfodb = Nvl(craplot.vlinfodb,0) + rw_craplcm.vllanmto
                          ,craplot.vlcompdb = Nvl(craplot.vlcompdb,0) + rw_craplcm.vllanmto
                          ,craplot.qtinfoln = Nvl(craplot.qtinfoln,0) + 1
                          ,craplot.qtcompln = Nvl(craplot.qtcompln,0) + 1
                          ,craplot.nrseqdig = Nvl(craplot.nrseqdig,0) + 1
        WHERE craplot.ROWID = rw_craplot.ROWID
        RETURNING craplot.nrseqdig INTO rw_craplot.nrseqdig;
      EXCEPTION
        WHEN OTHERS THEN
          vr_cdcritic:= 0;
          vr_dscritic:= 'Erro ao atualizar tabela craplot. '||SQLERRM;
          --Levantar Excecao
          RAISE vr_exc_erro;
      END;

      /* Fazer o pagamento do emprestimo */

      --Selecionar Lote
      OPEN cr_craplot (pr_cdcooper => pr_cdcooper
                      ,pr_dtmvtolt => pr_dtmvtolt
                      ,pr_cdagenci => 1
                      ,pr_cdbccxlt => 100
                      ,pr_nrdolote => 9062);
      --Posicionar no proximo registro
      FETCH cr_craplot INTO rw_craplot;
      --Se encontrou registro
      IF cr_craplot%NOTFOUND THEN
        --Fechar Cursor
        CLOSE cr_craplot;
        --Criar lote
        BEGIN
          INSERT INTO craplot
                  (craplot.cdcooper
                  ,craplot.dtmvtolt
                  ,craplot.cdagenci
                  ,craplot.cdbccxlt
                  ,craplot.nrdolote
                  ,craplot.cdhistor
                  ,craplot.cdoperad
                  ,craplot.nrseqdig
                  ,craplot.tplotmov)
          VALUES  (pr_cdcooper
                  ,pr_dtmvtolt
                  ,1
                  ,100
                  ,9062
                  ,91
                  ,pr_cdoperad
                  ,1
                  ,1)
          RETURNING ROWID
                   ,craplot.cdcooper
                   ,craplot.dtmvtolt
                   ,craplot.cdagenci
                   ,craplot.cdbccxlt
                   ,craplot.nrdolote
                   ,craplot.nrseqdig
            INTO rw_craplot.ROWID
                ,rw_craplot.cdcooper
                ,rw_craplot.dtmvtolt
                ,rw_craplot.cdagenci
                ,rw_craplot.cdbccxlt
                ,rw_craplot.nrdolote
                ,rw_craplot.nrseqdig;

        EXCEPTION
          WHEN Dup_Val_On_Index THEN
            vr_cdcritic:= 0;
            vr_dscritic:= 'Lote ja cadastrado.';
            RAISE vr_exc_erro;
          WHEN OTHERS THEN
            vr_cdcritic:= 0;
            vr_dscritic:= 'Erro ao inserir na tabela de lotes. '||sqlerrm;
            RAISE vr_exc_erro;
        END;
      END IF;
      IF cr_craplot%ISOPEN THEN
        --Fechar Cursor
        CLOSE cr_craplot;
      END IF;
      --Marcar liquidacao
      vr_liquida:= 1;

      /* se encontrar algum boleto em aberto significa que ainda nao deve liquidar o emprestimo */
      FOR rw_crapcob IN cr_crapcob2 (pr_cdcooper => rw_crapepr.cdcooper
                                    ,pr_nrctasac => rw_crapepr.nrdconta
                                    ,pr_nrctremp => rw_crapepr.nrctremp) LOOP
        vr_liquida:= 0;
      END LOOP;

      --Selecionar Cobranca
      OPEN cr_crapcob (pr_cdcooper => rw_crapepr.cdcooper
                      ,pr_nrctasac => rw_crapepr.nrdconta
                      ,pr_nrctremp => rw_crapepr.nrctremp
                      ,pr_nrdocmto => pr_nrboleto);
      --Posicionar no primeiro registro
      FETCH cr_crapcob INTO rw_crapcob;
      --Se nao encontrou
      IF cr_crapcob%NOTFOUND THEN
        --Fechar Cursor
        CLOSE cr_crapcob;
        --Mensagem de erro
        vr_dscritic:= 'Registro de boleto nao encontrado.';
        vr_cdcritic:= 0;
        --Gerar erro
        GENE0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                             ,pr_cdagenci => pr_cdagenci
                             ,pr_nrdcaixa => pr_nrdcaixa
                             ,pr_nrsequen => 1 /** Sequencia **/
                             ,pr_cdcritic => vr_cdcritic
                             ,pr_dscritic => vr_dscritic
                             ,pr_tab_erro => vr_tab_erro);
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
      --Fechar Cursor
      CLOSE cr_crapcob;

      --Selecionar lancamentos emprestimo
      OPEN cr_craplem (pr_cdcooper => pr_cdcooper
                      ,pr_dtmvtolt => pr_dtmvtolt
                      ,pr_cdagenci => 1
                      ,pr_cdbccxlt => 100
                      ,pr_nrdolote => 9062
                      ,pr_nrdconta => pr_nrctasac
                      ,pr_nrdocmto => TO_NUMBER(vr_nrdocmto)
                      ,pr_cdhistor => 91);
      --Posicionar no proximo registro
      FETCH cr_craplem INTO rw_craplem;
      --Se nao encontrar
      IF cr_craplem%FOUND THEN
        --Fechar Cursor
        CLOSE cr_craplem;
        vr_cdcritic:= 0;
        vr_dscritic:= 'Lancamento de emprestimo ja exite.';
        --Gerar erro
        GENE0001.pc_gera_erro(pr_cdcooper => pr_cdcooper
                             ,pr_cdagenci => pr_cdagenci
                             ,pr_nrdcaixa => pr_nrdcaixa
                             ,pr_nrsequen => 1 /** Sequencia **/
                             ,pr_cdcritic => vr_cdcritic
                             ,pr_dscritic => vr_dscritic
                             ,pr_tab_erro => vr_tab_erro);
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
      --Fechar Cursor
      CLOSE cr_craplem;

      --Data pagamento
      vr_dtdpagto:= GENE0005.fn_calc_data(pr_dtmvtolt  => rw_crapepr.dtdpagto --> Data do movimento
                                         ,pr_qtmesano  => 1                   --> Quantidade a acumular
                                         ,pr_tpmesano  => 'M'                 --> Tipo Mes ou Ano
                                         ,pr_des_erro  => vr_dscritic);
      --Se Ocorreu erro
      IF vr_dscritic IS NOT NULL THEN
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;

      /* Fazer o lancamento de pagamento de emprestimo */
      BEGIN
        INSERT INTO craplem
          (craplem.dtmvtolt
          ,craplem.cdagenci
          ,craplem.cdbccxlt
          ,craplem.nrdolote
          ,craplem.nrdconta
          ,craplem.nrctremp
          ,craplem.nrdocmto
          ,craplem.cdhistor
          ,craplem.nrseqdig
          ,craplem.vllanmto
          ,craplem.txjurepr
          ,craplem.dtpagemp
          ,craplem.vlpreemp
          ,craplem.cdcooper)
        VALUES
          (rw_craplot.dtmvtolt
          ,rw_craplot.cdagenci
          ,rw_craplot.cdbccxlt
          ,rw_craplot.nrdolote
          ,pr_nrctasac
          ,rw_crapepr.nrctremp
          ,vr_nrdocmto
          ,91
          ,Nvl(rw_craplot.nrseqdig,0) + 1
          ,pr_vllanmto
          ,vr_txdjuros
          ,pr_dtmvtolt
          ,rw_crapepr.vlpreemp
          ,pr_cdcooper)
        RETURNING craplem.vllanmto
        INTO rw_craplem.vllanmto;
      EXCEPTION
        WHEN Others THEN
          vr_cdcritic:= 0;
          vr_dscritic:= 'Erro ao inserir na tabela craplem. '||sqlerrm;
          --Levantar Excecao
          RAISE vr_exc_erro;
      END;
      --Atualizar Emprestimo
      BEGIN
        IF rw_crapcob.dtvencto = rw_crapepr.dtdpagto THEN
          vr_indpagto:= 1;
        ELSE
          vr_indpagto:= 0;
          vr_dtdpagto:= rw_crapepr.dtdpagto;
        END IF;
        --Atualizar Emprestimo
        UPDATE crapepr set crapepr.indpagto = vr_indpagto
                          ,crapepr.dtdpagto = vr_dtdpagto
                          ,crapepr.dtultpag = pr_dtmvtolt
                          ,crapepr.inliquid = vr_liquida
        WHERE ROWID = rw_crapepr.ROWID;
      EXCEPTION
        WHEN OTHERS THEN
          vr_cdcritic:= 0;
          vr_dscritic:= 'Erro ao atualizar tabela crapepr. '||SQLERRM;
          --Levantar Excecao
          RAISE vr_exc_erro;
      END;
      --Atualizar lote
      BEGIN
        UPDATE craplot SET craplot.vlinfodb = Nvl(craplot.vlinfodb,0) + rw_craplem.vllanmto
                          ,craplot.vlcompdb = Nvl(craplot.vlcompdb,0) + rw_craplem.vllanmto
                          ,craplot.qtinfoln = Nvl(craplot.qtinfoln,0) + 1
                          ,craplot.qtcompln = Nvl(craplot.qtcompln,0) + 1
                          ,craplot.nrseqdig = Nvl(craplot.nrseqdig,0) + 1
        WHERE craplot.ROWID = rw_craplot.ROWID
        RETURNING craplot.nrseqdig INTO rw_craplot.nrseqdig;
      EXCEPTION
        WHEN OTHERS THEN
          vr_cdcritic:= 0;
          vr_dscritic:= 'Erro ao atualizar tabela craplot. '||SQLERRM;
          --Levantar Excecao
          RAISE vr_exc_erro;
      END;
      --Valor Lancamento maior boleto
      IF pr_vllanmto > pr_vlboleto THEN
        --Selecionar Lote
        OPEN cr_craplot (pr_cdcooper => pr_cdcooper
                        ,pr_dtmvtolt => pr_dtmvtolt
                        ,pr_cdagenci => 1
                        ,pr_cdbccxlt => 100
                        ,pr_nrdolote => 9063);
        --Posicionar no proximo registro
        FETCH cr_craplot INTO rw_craplot;
        --Se encontrou registro
        IF cr_craplot%NOTFOUND THEN
          --Fechar Cursor
          CLOSE cr_craplot;
          --Criar lote
          BEGIN
            INSERT INTO craplot
                    (craplot.cdcooper
                    ,craplot.dtmvtolt
                    ,craplot.cdagenci
                    ,craplot.cdbccxlt
                    ,craplot.nrdolote
                    ,craplot.cdhistor
                    ,craplot.cdoperad
                    ,craplot.nrseqdig
                    ,craplot.tplotmov)
            VALUES  (pr_cdcooper
                    ,pr_dtmvtolt
                    ,1
                    ,100
                    ,9063
                    ,441
                    ,pr_cdoperad
                    ,1
                    ,1)
            RETURNING ROWID
                     ,craplot.cdcooper
                     ,craplot.dtmvtolt
                     ,craplot.cdagenci
                     ,craplot.cdbccxlt
                     ,craplot.nrdolote
                     ,craplot.nrseqdig
            INTO rw_craplot.ROWID
                ,rw_craplot.cdcooper
                ,rw_craplot.dtmvtolt
                ,rw_craplot.cdagenci
                ,rw_craplot.cdbccxlt
                ,rw_craplot.nrdolote
                ,rw_craplot.nrseqdig;
          EXCEPTION
            WHEN Dup_Val_On_Index THEN
              vr_cdcritic:= 0;
              vr_dscritic:= 'Lote ja cadastrado.';
              RAISE vr_exc_erro;
            WHEN OTHERS THEN
              vr_cdcritic:= 0;
              vr_dscritic:= 'Erro ao inserir na tabela de lotes. '||sqlerrm;
              RAISE vr_exc_erro;
          END;
        END IF;
        IF cr_craplot%ISOPEN THEN
          --Fechar Cursor
          CLOSE cr_craplot;
        END IF;
        /* Fazer lancamento para titulo pago a maior da parcela */
        BEGIN
          INSERT INTO craplem
            (craplem.dtmvtolt
            ,craplem.cdagenci
            ,craplem.cdbccxlt
            ,craplem.nrdolote
            ,craplem.nrdconta
            ,craplem.nrctremp
            ,craplem.nrdocmto
            ,craplem.cdhistor
            ,craplem.nrseqdig
            ,craplem.vllanmto
            ,craplem.txjurepr
            ,craplem.dtpagemp
            ,craplem.vlpreemp
            ,craplem.cdcooper)
          VALUES
            (rw_craplot.dtmvtolt
            ,rw_craplot.cdagenci
            ,rw_craplot.cdbccxlt
            ,rw_craplot.nrdolote
            ,pr_nrctasac
            ,rw_crapepr.nrctremp
            ,vr_nrdocmto
            ,441
            ,Nvl(rw_craplot.nrseqdig,0) + 1
            ,pr_vllanmto - pr_vlboleto
            ,vr_txdjuros
            ,pr_dtmvtolt
            ,rw_crapepr.vlpreemp
            ,pr_cdcooper)
          RETURNING craplem.vllanmto
          INTO rw_craplem.vllanmto;
        EXCEPTION
          WHEN Others THEN
            vr_cdcritic:= 0;
            vr_dscritic:= 'Erro ao inserir na tabela craplem. '||sqlerrm;
            --Levantar Excecao
            RAISE vr_exc_erro;
        END;
        --Atualizar lote
        BEGIN
          UPDATE craplot SET craplot.vlinfodb = Nvl(craplot.vlinfodb,0) + rw_craplem.vllanmto
                            ,craplot.vlcompdb = Nvl(craplot.vlcompdb,0) + rw_craplem.vllanmto
                            ,craplot.qtinfoln = Nvl(craplot.qtinfoln,0) + 1
                            ,craplot.qtcompln = Nvl(craplot.qtcompln,0) + 1
                            ,craplot.nrseqdig = Nvl(craplot.nrseqdig,0) + 1
          WHERE craplot.ROWID = rw_craplot.ROWID
          RETURNING craplot.nrseqdig INTO rw_craplot.nrseqdig;
        EXCEPTION
          WHEN OTHERS THEN
            vr_cdcritic:= 0;
            vr_dscritic:= 'Erro ao atualizar tabela craplot. '||SQLERRM;
            --Levantar Excecao
            RAISE vr_exc_erro;
        END;
      END IF;

      /* Liquida o emprestimo */
      IF rw_crapepr.vlsdeved <= pr_vllanmto THEN
        rw_crapepr.inliquid:= 1;
      ELSE
        rw_crapepr.inliquid:= 0;
      END IF;
      --Atualizar emprestimo
      BEGIN
        UPDATE crapepr SET crapepr.inliquid = rw_crapepr.inliquid
        WHERE crapepr.ROWID = rw_crapepr.ROWID;
      EXCEPTION
        WHEN OTHERS THEN
          vr_cdcritic:= 0;
          vr_dscritic:= 'Erro ao atualizar tabela crapepr. '||SQLERRM;
          --Levantar Excecao
          RAISE vr_exc_erro;
      END;
      --Selecionar dados da data
      OPEN BTCH0001.cr_crapdat(pr_cdcooper => pr_cdcooper);
      FETCH BTCH0001.cr_crapdat INTO rw_crapdat;
      -- Se encontrar
      IF BTCH0001.cr_crapdat%FOUND THEN
        vr_dtmvtopr:= rw_crapdat.dtmvtopr;
      END IF;
      -- Apenas fechar o cursor
      CLOSE BTCH0001.cr_crapdat;

      /* Desativa/ativa Rating dependendo o inliquid do Emprestimo */
      RATI0001.pc_verifica_contrato_rating (pr_cdcooper => pr_cdcooper         --Codigo Cooperativa
                                           ,pr_cdagenci => pr_cdagenci         --Codigo Agencia
                                           ,pr_nrdcaixa => pr_nrdcaixa         --Numero Caixa
                                           ,pr_cdoperad => pr_cdoperad         --Codigo Operador
                                           ,pr_dtmvtolt => pr_dtmvtolt         --Data Movimentacao
                                           ,pr_dtmvtopr => vr_dtmvtopr         --Data proxima operacao
                                           ,pr_nrdconta => rw_crapepr.nrdconta --Numero da Conta
                                           ,pr_tpctrrat => 90                  --Tipo Contrato Rating
                                           ,pr_nrctrrat => rw_crapepr.nrctremp --Numero Contrato Rating
                                           ,pr_idseqttl => pr_idseqttl         --Sequencial do Titular
                                           ,pr_idorigem => pr_idorigem         --Identificador Origem
                                           ,pr_nmdatela => pr_nmdatela         --Nome da tela
                                           ,pr_inproces => 0                   --Indicador do Processo
                                           ,pr_flgerlog => FALSE               --Gravar erro log
                                           ,pr_tab_erro => vr_tab_erro         --Tabela de retorno de erro
                                           ,pr_des_erro => vr_des_erro         --Indicador erro
                                           ,pr_dscritic => vr_dscritic);       --Descricao do erro
      --Se ocorreu erro
      IF nvl(vr_cdcritic,0) <> 0 OR vr_dscritic IS NOT NULL THEN
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;

      --- GRAVAMES
      IF  rw_crapepr.inliquid = 1 THEN
        GRVM0001.pc_solicita_baixa_automatica(pr_cdcooper => pr_cdcooper          -- Código da cooperativa
                                             ,pr_nrdconta => rw_crapepr.nrdconta  -- Numero da conta do contrato
                                             ,pr_nrctrpro => rw_crapepr.nrctremp  -- Numero do contrato
                                             ,pr_dtmvtolt => rw_crapdat.dtmvtolt  -- Data de movimento para baixa
                                             ,pr_des_reto => vr_des_reto          -- Retorno OK ou NOK
                                             ,pr_tab_erro => vr_tab_erro          -- Retorno de erros em PlTable
                                             ,pr_cdcritic => vr_cdcritic          -- Retorno de codigo de critica
                                             ,pr_dscritic => vr_dscritic);        -- Retorno de descricao de critica
        -- No progress não é verificado retorno de erro no procedimento acima.
      END IF;


      --Se deve gerar log
      IF pr_flgerlog THEN
        --gerar log
        GENE0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                            ,pr_cdoperad => pr_cdoperad
                            ,pr_dscritic => NULL
                            ,pr_dsorigem => vr_dsorigem
                            ,pr_dstransa => vr_dstransa
                            ,pr_dttransa => SYSDATE
                            ,pr_flgtrans => 1
                            ,pr_hrtransa => GENE0002.fn_busca_time
                            ,pr_idseqttl => pr_idseqttl
                            ,pr_nmdatela => pr_nmdatela
                            ,pr_nrdconta => pr_nrdconta
                            ,pr_nrdrowid => vr_nrdrowid);

      END IF;
    EXCEPTION
      WHEN vr_exc_erro THEN
        pr_cdcritic:= vr_cdcritic;
        pr_dscritic:= vr_des_erro;
      WHEN OTHERS THEN
        -- Erro
        pr_dscritic:= 'Erro na rotina PAGA0001.pc_baixa_epr_titulo. '||sqlerrm;
    END;
  END pc_baixa_epr_titulo;

  /* Procedure para gravar retorno */
  PROCEDURE pc_grava_retorno (pr_cdcooper IN INTEGER                    --Codigo Cooperativa
                             ,pr_nrcnvcob IN INTEGER                    --Numero Convenio Cobranca
                             ,pr_nrdconta IN INTEGER                    --Numero da Conta
                             ,pr_nrdocmto IN NUMBER                     --Numero documento
                             ,pr_nrnosnum IN VARCHAR2                   --Nosso Numero
                             ,pr_cdocorre IN INTEGER                    --Codigo Ocorrencia
                             ,pr_dsmotivo IN VARCHAR2                   --Descricao Motivo
                             ,pr_nrremret IN INTEGER                    --Numero remessa retorno
                             ,pr_nrseqreg IN INTEGER                    --Sequencial do registro
                             ,pr_nrispbrc IN NUMBER DEFAULT 99999999    --Numero ISPB do recebedor
                             ,pr_cdbcorec IN INTEGER                    --Codigo banco recebedor
                             ,pr_cdagerec IN INTEGER                    --Codigo Agencia recebedora
                             ,pr_cdbcocor IN INTEGER                    --Codigo Banco
                             ,pr_nrretcoo IN INTEGER                    --Numero retorno cooperativa
                             ,pr_dtcredit IN DATE                       --Data Credito
                             ,pr_flcredit IN BOOLEAN                    --Flag Creditado
                             ,pr_vlabatim IN NUMBER                     --Valor abatimentos
                             ,pr_vldescto IN NUMBER                     --Valor descontos
                             ,pr_vljurmul IN NUMBER                     --Valor Juros
                             ,pr_vloutcre IN NUMBER                     --Valor saida credito
                             ,pr_vloutdes IN NUMBER                     --Valor saida debito
                             ,pr_vlrliqui IN NUMBER                     --Valor liquidacao
                             ,pr_vlrpagto IN NUMBER                     --Valor Pagamento
                             ,pr_vltarifa IN NUMBER                     --Valor tarifa
                             ,pr_vltitulo IN NUMBER                     --Valor titulo
                             ,pr_cdoperad IN VARCHAR2                   --Codigo operador
                             ,pr_dtmvtolt IN DATE                       --Data Movimento
                             ,pr_dtocorre IN DATE                       --Data Ocorrencia
                             ,pr_inestcri IN INTEGER DEFAULT 0          --Estado crise
                             ,pr_cdcritic OUT INTEGER                   --Codigo erro
                             ,pr_dscritic OUT VARCHAR2) IS              --Descricao erro
    -- .........................................................................
    --
    --  Programa : pc_grava_retorno           Antigo: b1wgen0089.p/grava-retorno
    --  Sistema  : Cred
    --  Sigla    : PAGA0001
    --  Autor    : Alisson C. Berrido - AMcom
    --  Data     : Julho/2013.                   Ultima atualizacao: 15/12/2017
    --
    --  Dados referentes ao programa:
    --
    --   Frequencia: Sempre que for chamado
    --   Objetivo  : Procedure para gravar retorno
    --
    --   Atualização: 09/05/2014 - Ajustado para somente buscar tarifa se for
    --                             inpessoa <> 3 (sem fins lucartivos) (Odirlei/AMcom)
    --
    --                12/08/2015 - Adicionar tratamento para validar o código do banco de acordo com a avalidação
    --                             realizada pela pc_processa_liquidacao, antes da chamada da pc_prep_tt_lcm_consolidada
    --                             (Douglas - Chamado 316517)
    --
    --                29/10/2015 - Inclusao do indicador estado de crise. (Jaison/Andrino)
    --
    --                30/12/2015 - Ajuste para não desconsiderar o motivo quando for
    --                             titulos do banco do brasil com ocorrencia 28
    --                             (Adriano).
    --
    --                15/02/2016 - Inclusao do parametro conta na chamada da
    --                             TARI0001.pc_carrega_dados_tarifa_cobr. (Jaison/Marcos)
    --
    --                15/12/2017 - Incluido nome do módulo logado
    --                             No caso de erro de programa gravar tabela especifica de log                     
    --                             Ajuste mensagem de erro 
    --                             (Belli - Envolti - Chamado 779415)    
    --
    --
  BEGIN
    DECLARE
      --Selecionar parametros cobranca
      CURSOR cr_crapcco(pr_cdcooper IN crapcco.cdcooper%type
                       ,pr_nrconven IN crapcco.nrconven%type
                       ,pr_cddbanco IN crapcco.cddbanco%type) IS
        SELECT crapcco.cdcooper
        FROM crapcco
        WHERE crapcco.cdcooper = pr_cdcooper
        AND   crapcco.nrconven = pr_nrconven
        AND   crapcco.cddbanco = pr_cddbanco;
      rw_crapcco cr_crapcco%ROWTYPE;
      --Variaveis Locais
      vr_vltarass     NUMBER;
      vr_dtaltera     DATE;
      vr_tar_cdhistor INTEGER;
      vr_tar_cdhisest INTEGER;
      vr_tar_vltarifa NUMBER;
      vr_tar_dtdivulg DATE;
      vr_tar_dtvigenc DATE;
      vr_tar_cdfvlcop INTEGER;
      vr_inpessoa     INTEGER;
      vr_cdhistbb     INTEGER;
      vr_dsmotivo     VARCHAR2(4000);
      vr_cdmotivo     craptar.cdmotivo%TYPE;
      vr_flcredit     NUMBER;
      --tabela de memoria de erros
      vr_tab_erro GENE0001.typ_tab_erro;
      --Variaveis de erro
      vr_des_erro     VARCHAR2(4000);
      vr_cdcritic     crapcri.cdcritic%TYPE;
      vr_dscritic     VARCHAR2(4000);
      --Variaveis de Excecao
      vr_exc_erro     EXCEPTION;
      --Agrupa os parametros - 15/12/2017 - Chamado 779415 
      vr_dsparame VARCHAR2(4000);

    BEGIN
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_grava_retorno');
      --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
      vr_dsparame :=  ' pr_cdcooper:' || pr_cdcooper || 
                      ', pr_nrcnvcob:' || pr_nrcnvcob || 
                      ', pr_nrdconta:' || pr_nrdconta || 
                      ', pr_nrdocmto:' || pr_nrdocmto || 
                      ', pr_nrnosnum:' || pr_nrnosnum || 
                      ', pr_cdocorre:' || pr_cdocorre || 
                      ', pr_dsmotivo:' || pr_dsmotivo || 
                      ', pr_nrremret:' || pr_nrremret || 
                      ', pr_nrseqreg:' || pr_nrseqreg || 
                      ', pr_nrispbrc:' || pr_nrispbrc || 
                      ', pr_cdbcorec:' || pr_cdbcorec || 
                      ', pr_cdagerec:' || pr_cdagerec || 
                      ', pr_cdbcocor:' || pr_cdbcocor || 
                      ', pr_nrretcoo:' || pr_nrretcoo || 
                      ', pr_dtcredit:' || pr_dtcredit || 
                      ', pr_flcredit:' || CASE pr_flcredit
                                            WHEN true 
                                              THEN 'true'
                                              ELSE 'false' 
                                          END || 
                      ', pr_vlabatim:' || pr_vlabatim || 
                      ', pr_vldescto:' || pr_vldescto || 
                      ', pr_vljurmul:' || pr_vljurmul || 
                      ', pr_vloutcre:' || pr_vloutcre || 
                      ', pr_vloutdes:' || pr_vloutdes || 
                      ', pr_vlrliqui:' || pr_vlrliqui || 
                      ', pr_vlrpagto:' || pr_vlrpagto || 
                      ', pr_vltarifa:' || pr_vltarifa || 
                      ', pr_vltitulo:' || pr_vltitulo || 
                      ', pr_cdoperad:' || pr_cdoperad || 
                      ', pr_dtmvtolt:' || pr_dtmvtolt || 
                      ', pr_dtocorre:' || pr_dtocorre || 
                      ', pr_inestcri:' || pr_inestcri;      
      --Inicializar variaveis retorno
      pr_cdcritic:= NULL;
      pr_dscritic:= NULL;

      --Selecionar associado
      OPEN cr_crapass (pr_cdcooper => pr_cdcooper
                      ,pr_nrdconta => pr_nrdconta);
      --Posicionar no proximo registro
      FETCH cr_crapass INTO rw_crapass;
      --Se nao encontrar
      IF cr_crapass%NOTFOUND THEN
        /* Caso nao encontre associado, assume como pessoa juridica*/
        vr_inpessoa:= 2;
      ELSE
        vr_inpessoa:= rw_crapass.inpessoa;
      END IF;
      --Fechar Cursor
      CLOSE cr_crapass;

      --Selecionar parametros cobranca
      OPEN cr_crapcco(pr_cdcooper => pr_cdcooper
                     ,pr_nrconven => pr_nrcnvcob
                     ,pr_cddbanco => 1);
      --Posicionar no proximo registro
      FETCH cr_crapcco INTO rw_crapcco;

      --Se ocorrencia nao for debito tarifas
      IF cr_crapcco%FOUND THEN
        IF pr_cdocorre <> 28 THEN
          vr_dsmotivo:= NULL;
        ELSE
          vr_dsmotivo:= pr_dsmotivo;
        END IF;
      ELSE
        vr_dsmotivo := pr_dsmotivo;
      END IF;
      CLOSE cr_crapcco;

      -- só buscar tarifa se for inpessoa <> 3(sem fins lucartivos)
      -- se for 3 pr_vltarifa ficará zero
      IF vr_inpessoa <> 3 THEN

        vr_cdmotivo := 0;
        
        IF pr_cdbcorec = 85                      OR
          (pr_cdbcorec = 1 AND pr_cdocorre = 28) THEN
           vr_cdmotivo := pr_dsmotivo;
        END IF;

        --Carregar tarifas de cobranca
        TARI0001.pc_carrega_dados_tarifa_cobr (pr_cdcooper  => pr_cdcooper     --Codigo Cooperativa
                                              ,pr_nrdconta  => pr_nrdconta     --Numero Conta
                                              ,pr_nrconven  => pr_nrcnvcob     --Numero Convenio
                                              ,pr_dsincide  => 'RET'           --Descricao Incidencia
                                              ,pr_cdocorre  => pr_cdocorre     --Codigo Ocorrencia
                                              ,pr_cdmotivo  => vr_cdmotivo     --Codigo Motivo
                                              ,pr_inpessoa  => vr_inpessoa     --Tipo Pessoa
                                              ,pr_vllanmto  => 1               --Valor Lancamento
                                              ,pr_cdprogra  => NULL            --Nome Programa
                                              ,pr_flaputar  => 0               --Nao apurar
                                              ,pr_cdhistor  => vr_tar_cdhistor --Codigo Historico
                                              ,pr_cdhisest  => vr_tar_cdhisest --Historico Estorno
                                              ,pr_vltarifa  => vr_tar_vltarifa --Valor Tarifa
                                              ,pr_dtdivulg  => vr_tar_dtdivulg --Data Divulgacao
                                              ,pr_dtvigenc  => vr_tar_dtvigenc --Data Vigencia
                                              ,pr_cdfvlcop  => vr_tar_cdfvlcop --Codigo Cooperativa
                                              ,pr_cdcritic  => vr_cdcritic     --Codigo Critica
                                              ,pr_dscritic  => vr_dscritic);   --Descricao Critica
	      -- Retorno nome do módulo logado - 15/12/2017 - Chamado 779415
		    GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_grava_retorno');
        --Se ocorreu erro
        IF NVL(vr_cdcritic,0) <> 0 OR TRIM(vr_dscritic) IS NOT NULL THEN
          --Zerar tarifa
          vr_vltarass:= 0;
        ELSE
          --Tarifa associado
          vr_vltarass:= vr_tar_vltarifa;
        END IF;
      ELSE
        --Zerar tarifa
        vr_vltarass:= 0;
      END IF;  -- FIM IF inpessoa <> 3

      --Selecionar parametros cobranca
      OPEN cr_crapcco(pr_cdcooper => pr_cdcooper
                     ,pr_nrconven => pr_nrcnvcob
                     ,pr_cddbanco => 1);
      --Posicionar no proximo registro
      FETCH cr_crapcco INTO rw_crapcco;
      --Se nao encontrar
      IF cr_crapcco%NOTFOUND THEN
        vr_cdhistbb:= 0;
      ELSE
        IF pr_cdocorre = 2 THEN
          vr_cdhistbb:= 936;
        ELSIF pr_cdocorre IN (6,17,76,77) AND (pr_vltarifa > 0 OR pr_vloutdes > 0) THEN
          vr_cdhistbb:= 966;
        ELSIF pr_cdocorre = 19 AND (pr_vltarifa > 0 OR pr_vloutdes > 0) THEN
          vr_cdhistbb:= 939;
        ELSIF pr_cdocorre IN (20,24) THEN
          vr_cdhistbb:= 940;
        ELSIF pr_cdocorre = 09 AND pr_dsmotivo <> '14' THEN
          vr_cdhistbb:= 937;
        ELSIF pr_cdocorre = 28 AND pr_dsmotivo = '02' THEN
          vr_cdhistbb:= 938;
        ELSIF pr_cdocorre IN (07,08,12,13,14,27,29,42,43) THEN
          vr_cdhistbb:= 965;
        ELSIF pr_cdocorre = 09 AND pr_dsmotivo = '14' THEN
          vr_cdhistbb:= 973;
        ELSIF pr_cdocorre = 28 AND pr_dsmotivo <> '02' THEN
          vr_cdhistbb:= 973;
        ELSIF pr_cdocorre = 23 THEN
          vr_cdhistbb:= 973;
        ELSE
          vr_cdhistbb:= 0;
        END IF;
      END IF;
      --Fechar Cursor
      CLOSE cr_crapcco;
      --Determinar Data
      IF pr_dtmvtolt < pr_dtocorre THEN
        vr_dtaltera:= pr_dtocorre;
      ELSE
        vr_dtaltera:= pr_dtmvtolt;
      END IF;

      IF pr_flcredit = TRUE THEN
        vr_flcredit := 1;
      ELSE
        vr_flcredit := 0;
      END IF;

      --Criar movimento retorno titulos bancarios
      BEGIN
        INSERT INTO crapret
          (crapret.cdcooper
          ,crapret.nrcnvcob
          ,crapret.nrremret
          ,crapret.nrseqreg
          ,crapret.nrdconta
          ,crapret.nrdocmto
          ,crapret.nrnosnum
          ,crapret.cdocorre
          ,crapret.cdmotivo
          ,crapret.nrretcoo
          ,crapret.dtcredit
          ,crapret.nrispbrc
          ,crapret.cdbcorec
          ,crapret.cdagerec
          ,crapret.cdbcocor
          ,crapret.dtocorre
          ,crapret.vlabatim
          ,crapret.vldescto
          ,crapret.vljurmul
          ,crapret.vloutcre
          ,crapret.vloutdes
          ,crapret.vlrliqui
          ,crapret.vlrpagto
          ,crapret.vltarcus
          ,crapret.vltarass
          ,crapret.vltitulo
          ,crapret.cdoperad
          ,crapret.dtaltera
          ,crapret.hrtransa
          ,crapret.cdhistbb
          ,crapret.flcredit
          ,crapret.inestcri)
        VALUES
          (pr_cdcooper /* CHAVE */
          ,pr_nrcnvcob /* CHAVE */
          ,pr_nrremret /* CHAVE */
          ,pr_nrseqreg /* CHAVE */
          ,pr_nrdconta
          ,pr_nrdocmto
          ,pr_nrnosnum
          ,pr_cdocorre
          ,pr_dsmotivo
          ,pr_nrretcoo
          ,pr_dtcredit
          ,pr_nrispbrc
          ,pr_cdbcorec
          ,pr_cdagerec
          ,pr_cdbcocor
          ,pr_dtocorre
          ,pr_vlabatim
          ,pr_vldescto
          ,pr_vljurmul
          ,pr_vloutcre
          ,pr_vloutdes
          ,pr_vlrliqui
          ,pr_vlrpagto
          ,pr_vltarifa
          ,vr_vltarass
          ,pr_vltitulo
          ,pr_cdoperad
          ,vr_dtaltera
          ,gene0002.fn_busca_time
          ,vr_cdhistbb
          ,vr_flcredit
          ,pr_inestcri);
      EXCEPTION
        WHEN Others THEN
          -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
          CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);   
          -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
          vr_cdcritic := 1034;
          vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                             'CRAPRET(23):' ||
                             ' cdcooper:'   || pr_cdcooper  ||
                             ', nrcnvcob:'  || pr_nrcnvcob ||
                             ', nrremret:'  || pr_nrremret ||
                             ', nrseqreg:'  || pr_nrseqreg ||
                             ', nrdconta:'  || pr_nrdconta ||
                             ', nrdocmto:'  || pr_nrdocmto ||
                             ', nrnosnum:'  || pr_nrnosnum ||
                             ', cdocorre:'  || pr_cdocorre ||
                             ', cdmotivo:'  || pr_dsmotivo ||
                             ', nrretcoo:'  || pr_nrretcoo ||
                             ', dtcredit:'  || pr_dtcredit ||
                             ', nrispbrc:'  || pr_nrispbrc ||
                             ', cdbcorec:'  || pr_cdbcorec ||
                             ', cdagerec:'  || pr_cdagerec ||
                             ', cdbcocor:'  || pr_cdbcocor ||
                             ', dtocorre:'  || pr_dtocorre ||
                             ', vlabatim:'  || pr_vlabatim ||
                             ', vldescto:'  || pr_vldescto ||
                             ', vljurmul:'  || pr_vljurmul ||
                             ', vloutcre:'  || pr_vloutcre ||
                             ', vloutdes:'  || pr_vloutdes ||
                             ', vlrliqui:'  || pr_vlrliqui ||
                             ', vlrpagto:'  || pr_vlrpagto ||
                             ', vltarcus:'  || pr_vltarifa ||
                             ', vltarass:'  || vr_vltarass ||
                             ', vltitulo:'  || pr_vltitulo ||
                             ', cdoperad:'  || pr_cdoperad ||
                             ', dtaltera:'  || vr_dtaltera ||
                             ', hrtransa:'  || gene0002.fn_busca_time ||
                             ', cdhistbb:'  || vr_cdhistbb ||
                             ', flcredit:'  || vr_flcredit ||
                             ', inestcri:'  || pr_inestcri ||
                             '. ' ||sqlerrm;
          --Levantar Excecao
          RAISE vr_exc_erro;
      END;
	      -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		    GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);
    EXCEPTION
      -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415   
      -- Quem grava a TBGEN é a Procedure pc_proc_liquid_apos_baixa	  
      -- Disparadores: pc_crps594.pcr                          - Não grava TBGEN - Necessario Avaliar                          -
      --               paga0001.pc_prepara_retorno_cooperativa - Não grava TBGEN
      WHEN vr_exc_erro THEN
        pr_cdcritic:= vr_cdcritic;
        pr_dscritic:= vr_dscritic ||
                      vr_dsparame;
      WHEN OTHERS THEN
        -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
        CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper); 
        -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        pr_cdcritic:= 9999;
        pr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic)|| 
                      'PAGA0001.pc_grava_retorno. ' || SQLERRM ||
                      '.' || vr_dsparame;
    END;
  END pc_grava_retorno;


  /* Procedure para gerar motivos de ocorrencia  */
  PROCEDURE pc_proc_motivos_retorno (pr_idtabcob IN ROWID  --Rowid da cobranca
                                    ,pr_cdocorre IN INTEGER --Codigo Ocorrencia
                                    ,pr_dsmotivo IN VARCHAR2 --Descricao Motivo
                                    ,pr_dtmvtolt IN DATE     --Data Movimentacao
                                    ,pr_cdoperad IN VARCHAR2 --Codigo Operador
                                    ,pr_cdcritic OUT INTEGER --Codigo Critica
                                    ,pr_dscritic OUT VARCHAR2) IS --Descricao Critica
    -- .........................................................................
    --
    --  Programa : pc_proc_motivos_retorno           Antigo: b1wgen0089.p/proc-motivos-retorno
    --  Sistema  : Cred
    --  Sigla    : PAGA0001
    --  Autor    : Alisson C. Berrido - AMcom
    --  Data     : Julho/2013.                   Ultima atualizacao: 15/12/2017
    --
    --  Dados referentes ao programa:
    --
    --   Frequencia: Sempre que for chamado
    --   Objetivo  : Procedure para gerar motivos de ocorrencia
    --
    --   15/12/2017 - Incluido nome do módulo logado
    --                No caso de erro de programa gravar tabela especifica de log                     
    --                Ajuste mensagem de erro 
    --               (Belli - Envolti - Chamado 779415)    
    --
  BEGIN
    DECLARE
      --Selecionar Ocorrencias
      CURSOR cr_crapoco (pr_cdcooper IN crapoco.cdcooper%type
                        ,pr_cddbanco IN crapoco.cddbanco%type
                        ,pr_cdocorre IN crapoco.cdocorre%type
                        ,pr_tpocorre IN crapoco.tpocorre%type) IS
        SELECT crapoco.dsocorre
        FROM crapoco
        WHERE crapoco.cdcooper = pr_cdcooper
        AND   crapoco.cddbanco = pr_cddbanco
        AND   crapoco.cdocorre = pr_cdocorre
        AND   crapoco.tpocorre = pr_tpocorre
        ORDER BY crapoco.progress_recid ASC;
      rw_crapoco cr_crapoco%ROWTYPE;
      --Selecionar os motivos da ocorrencia
      CURSOR cr_crapmot (pr_cdcooper IN crapmot.cdcooper%type
                        ,pr_cddbanco IN crapmot.cddbanco%type
                        ,pr_cdocorre IN crapmot.cdocorre%type
                        ,pr_tpocorre IN crapmot.tpocorre%type /* Mot. do retorno */
                        ,pr_cdmotivo IN crapmot.cdmotivo%type) IS
        SELECT crapmot.dsmotivo
        FROM crapmot
        WHERE crapmot.cdcooper = pr_cdcooper
        AND   crapmot.cddbanco = pr_cddbanco
        AND   crapmot.cdocorre = pr_cdocorre
        AND   crapmot.tpocorre = pr_tpocorre /* Mot. do retorno */
        AND   crapmot.cdmotivo = pr_cdmotivo
        ORDER BY crapmot.progress_recid ASC;
      rw_crapmot cr_crapmot%ROWTYPE;
      --Variaveis Locais
      vr_cdmotivo VARCHAR2(1000);
      vr_dsmotivo VARCHAR2(1000);
      vr_contador INTEGER;
      vr_cdnrmoti INTEGER:= 0;
      vr_cdposini INTEGER:= 1;
      --Variaveis de erro
      vr_des_erro     VARCHAR2(4000);
      vr_cdcritic crapcri.cdcritic%TYPE;
      vr_dscritic VARCHAR2(4000);
      --Variaveis de Excecao
      vr_exc_erro EXCEPTION;
      --Agrupa os parametros - 15/12/2017 - Chamado 779415 
      vr_dsparame VARCHAR2(4000);
    BEGIN
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_proc_motivos_retorno');
      
      --Inicializar variaveis retorno
      pr_cdcritic:= NULL;
      pr_dscritic:= NULL;
      --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
      vr_dsparame :=  ' pr_idtabcob:' || pr_idtabcob || 
                      ', pr_cdocorre:' || pr_cdocorre || 
                      ', pr_dsmotivo:' || pr_dsmotivo || 
                      ', pr_dtmvtolt:' || pr_dtmvtolt || 
                      ', pr_cdoperad:' || pr_cdoperad;
      --Selecionar registro cobranca
      OPEN cr_crapcob (pr_rowid => pr_idtabcob);
      --Posicionar no proximo registro
      FETCH cr_crapcob INTO rw_crapcob;
      --Se nao encontrar
      IF cr_crapcob%NOTFOUND THEN
        --Fechar Cursor
        CLOSE cr_crapcob;
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
      --Fechar Cursor
      CLOSE cr_crapcob;
      /* buscar ocorrencia */
      OPEN cr_crapoco (pr_cdcooper => rw_crapcob.cdcooper
                      ,pr_cddbanco => rw_crapcob.cdbandoc
                      ,pr_cdocorre => pr_cdocorre
                      ,pr_tpocorre => 2);
      --Posicionar no proximo registro
      FETCH cr_crapoco INTO rw_crapoco;
      --Se encontrar
      IF cr_crapoco%FOUND THEN
        --Fechar Cursor
        CLOSE cr_crapoco;
        FOR vr_contador IN 1..5 LOOP
          --Codigo Motivo
          vr_cdmotivo:= TRIM(SUBSTR(pr_dsmotivo,vr_cdposini,2));
          --Incrementar posicao inicial
          vr_cdposini:= vr_cdposini+2;
          --Descricao motivo
          vr_dsmotivo:= NULL;
          --Ignorar se motivo for nulo
          IF TRIM(vr_cdmotivo) IS NULL THEN
            CONTINUE;
          ELSIF TRIM(vr_cdmotivo) IS NOT NULL THEN
            --Incrementar numero motivo
            vr_cdnrmoti:= Nvl(vr_cdnrmoti,0) + 1;
            /* nao logar no titulo, entrada rejeitada e motivos 38,39,00,60 */
            IF pr_cdocorre = 3 AND to_number(trim(vr_cdmotivo)) IN (38,39,00,60) THEN
              CONTINUE;
            END IF;
            /* buscar os motivos da ocorrencia */
            OPEN cr_crapmot (pr_cdcooper => rw_crapcob.cdcooper
                            ,pr_cddbanco => rw_crapcob.cdbandoc
                            ,pr_cdocorre => pr_cdocorre
                            ,pr_tpocorre => 2 /* Mot. do retorno */
                            ,pr_cdmotivo => vr_cdmotivo);
            --Posicionar no proximo registro
            FETCH cr_crapmot INTO rw_crapmot;
            --Se nao encontrar
            IF cr_crapmot%FOUND THEN
              --Fechar Cursor
              CLOSE cr_crapmot;
              IF pr_cdocorre <> 28 THEN
                vr_dsmotivo:= rw_crapoco.dsocorre;
              ELSE
                vr_dsmotivo:= NULL;
              END IF;
              IF TRIM(rw_crapmot.dsmotivo) IS NOT NULL THEN
                --Debito Tarifas
                IF pr_cdocorre = 28 THEN
                  vr_dsmotivo:= vr_dsmotivo || rw_crapmot.dsmotivo;
                ELSE
                  vr_dsmotivo:= vr_dsmotivo || ' - '|| rw_crapmot.dsmotivo;
                END IF;
              END IF;
            ELSE
              --Fechar Cursor
              CLOSE cr_crapmot;
              --Entrada rejeitada
              IF pr_cdocorre <> 3 THEN
                --Descricao Motivo
                vr_dsmotivo:= rw_crapoco.dsocorre;
              ELSE
                --Proximo registro
                CONTINUE;
              END IF;
            END IF;
            --Fechar Cursor
            IF cr_crapmot%ISOPEN THEN
              CLOSE cr_crapmot;
            END IF;
            --Cria log cobranca
            PAGA0001.pc_cria_log_cobranca(pr_idtabcob => pr_idtabcob   --ROWID da Cobranca
                                         ,pr_cdoperad => pr_cdoperad   --Operador
                                         ,pr_dtmvtolt => pr_dtmvtolt   --Data movimento
                                         ,pr_dsmensag => vr_dsmotivo   --Descricao Mensagem
                                         ,pr_des_erro => vr_des_erro   --Indicador erro
                                         ,pr_dscritic => vr_dscritic); --Descricao erro
            --Se ocorreu erro
            IF vr_des_erro = 'NOK' THEN
              --Levantar Excecao
              RAISE vr_exc_erro;
            END IF;
	          -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		        GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_proc_motivos_retorno');
          END IF;
        END LOOP;
        --Se o codigo motivo igual zero
        IF vr_cdnrmoti = 0 THEN
          vr_dsmotivo:= rw_crapoco.dsocorre;
        END IF;
      END IF;
      --Fechar Cursor
      IF cr_crapoco%ISOPEN THEN
        CLOSE cr_crapoco;
      END IF;

      --Se codigo motivo=0 e dscricao motivo estiver preenchido
      IF vr_cdnrmoti = 0 AND TRIM(vr_dsmotivo) IS NOT NULL THEN
        --Cria log cobranca
        PAGA0001.pc_cria_log_cobranca(pr_idtabcob => pr_idtabcob   --ROWID da Cobranca
                                     ,pr_cdoperad => pr_cdoperad   --Operador
                                     ,pr_dtmvtolt => pr_dtmvtolt   --Data movimento
                                     ,pr_dsmensag => vr_dsmotivo   --Descricao Mensagem
                                     ,pr_des_erro => vr_des_erro   --Indicador erro
                                     ,pr_dscritic => vr_dscritic); --Descricao erro
        --Se ocorreu erro
        IF vr_des_erro = 'NOK' THEN
          --Levantar Excecao
          RAISE vr_exc_erro;
        END IF;
      END IF;
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);
    EXCEPTION
      -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415   
      -- Disparadores: paga0001.pc_processa_liquidacao         - Grava TBGEN
      --               paga0001.pc_proc_liquid_apos_baixa      - Grava TBGEN
      --               paga0002.pc_ent_confirmada              - Necessario avaliar
      --               paga0002.pc_ent_rejeitada               - Necessario avaliar
      --               paga0002.pc_proc_baixa                  - Necessario avaliar
      --               paga0002.pc_proc_conf_instrucao         - Necessario avaliar
      --               paga0002.pc_proc_remessa_cartorio       - Necessario avaliar
      --               paga0002.pc_proc_retirada_cartorio      - Necessario avaliar
      --               paga0002.pc_proc_protestado             - Necessario avaliar
      --               paga0002.pc_proc_deb_tarifas_custas     - Necessario avaliar
      --               paga0002.pc_proc_retorno_qualquer       - Necessario avaliar
      --               pc_crps594.prc                          - Não grava TBGEN - Necessario Avaliar
      WHEN vr_exc_erro THEN
        pr_cdcritic:= vr_cdcritic;
        pr_dscritic:= vr_dscritic ||
                      vr_dsparame;
      WHEN OTHERS THEN
        -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
        CECRED.pc_internal_exception (pr_cdcooper => rw_crapcob.cdcooper); 
        -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        pr_cdcritic:= 9999;
        pr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic) || 
                      'PAGA0001.pc_proc_motivos_retorno. ' || SQLERRM ||
                      '.' || vr_dsparame;
    END;
  END pc_proc_motivos_retorno;

  /* Procedure que gera dados para tt-lcm-consolidada  */
  PROCEDURE pc_prep_tt_lcm_consolidada (pr_idtabcob IN ROWID --ROWID da cobranca
                                       ,pr_cdocorre IN INTEGER --Codigo Ocorrencia
                                       ,pr_tplancto IN VARCHAR --Tipo Lancamento
                                       ,pr_vltarifa IN NUMBER  --Valor Tarifa
                                       ,pr_cdhistor IN INTEGER --Codigo Historico
                                       ,pr_cdmotivo IN craptar.cdmotivo%TYPE --Codigo motivo
                                       ,pr_tab_lcm_consolidada IN OUT PAGA0001.typ_tab_lcm_consolidada
                                       ,pr_cdcritic OUT INTEGER --Codigo Critica
                                       ,pr_dscritic OUT VARCHAR2) IS --Descricao Critica
    -- .........................................................................
    --
    --  Programa : pc_prep_tt_lcm_consolidada           Antigo: b1wgen0089.p/prep-tt-lcm-consolidada
    --  Sistema  : Cred
    --  Sigla    : PAGA0001
    --  Autor    : Alisson C. Berrido - AMcom
    --  Data     : Julho/2013.                   Ultima atualizacao: 15/12/2017
    --
    --  Dados referentes ao programa:
    --
    --   Frequencia: Sempre que for chamado
    --   Objetivo  : Procedure que gera dados para tt-lcm-consolidada
    --
    --   24/08/2015 - Ajuste no indice de lancamento para adequar ao pagamento de
    --                emprestimo com boleto ref. ao projeto 210. (Rafael)
	--
	--   15/02/2016 - Inclusao do parametro para apuração na chamada da
    --                TARI0001.pc_busca_dados_tarifa. (Jaison/Marcos)
    --
    --   13/04/2017 - Inclusao do campo cdpesqbb para registrar as informacoes do
    --                titulo, caso precise estornar a tarifa (P340 - Rafael);
    --	 
    --   15/12/2017 - Incluido nome do módulo logado
    --                No caso de erro de programa gravar tabela especifica de log                     
    --                Ajuste mensagem de erro 
    --               (Belli - Envolti - Chamado 779415)    
    --
    --   31/07/2018 - Adicionado tratativa para buscar o número da conta do convênio 
    --                da COBTIT (Paulo Penteado GFT)
    -- .........................................................................
  BEGIN
    DECLARE
      /* Cursores Locais */

      --Selecionar Parametros Cadastro Cobranca
      CURSOR cr_crapcco (pr_cdcooper IN crapcco.cdcooper%type
                        ,pr_nrconven IN crapcco.nrconven%TYPE) IS
        SELECT crapcco.cdhistor,
               crapcco.dsorgarq
        FROM crapcco crapcco
        WHERE crapcco.cdcooper = pr_cdcooper
        AND   crapcco.nrconven = pr_nrconven
        ORDER BY crapcco.progress_recid ASC;
      rw_crapcco cr_crapcco%ROWTYPE;

      -- selecionar conta do cooperado do contrato de emprestimo
      CURSOR cr_cde (pr_cdcooper  IN tbrecup_cobranca.cdcooper%TYPE
                    ,pr_nrctacob  IN tbrecup_cobranca.nrdconta_cob%TYPE
                    ,pr_nrcnvcob  IN tbrecup_cobranca.nrcnvcob%TYPE
                    ,pr_nrdocmto  IN tbrecup_cobranca.nrboleto%TYPE
                    ,pr_tpproduto IN tbrecup_cobranca.tpproduto%TYPE) IS
        SELECT cde.nrdconta, cde.tpparcela
          FROM tbrecup_cobranca cde
         WHERE cde.cdcooper     = pr_cdcooper
           AND cde.nrdconta_cob = pr_nrctacob
           AND cde.nrcnvcob     = pr_nrcnvcob
           AND cde.nrboleto     = pr_nrdocmto
           AND cde.tpproduto    = pr_tpproduto;
      rw_cde cr_cde%ROWTYPE;
      
      -- Buscar o número da conta do cooperado no qual foi feito o acordo
      CURSOR cr_acordo_parcela(pr_cdcooper IN tbrecup_cobranca.cdcooper%TYPE
                      	      ,pr_nrctacob IN tbrecup_cobranca.nrdconta_cob%TYPE
                              ,pr_nrcnvcob IN tbrecup_cobranca.nrcnvcob%TYPE
                              ,pr_nrdocmto IN tbrecup_cobranca.nrboleto%TYPE)  IS
        SELECT aco.nrdconta
          FROM tbrecup_acordo_parcela acp
             , tbrecup_acordo         aco
         WHERE aco.cdcooper     = pr_cdcooper
           AND aco.nracordo     = acp.nracordo
           AND acp.nrdconta_cob = pr_nrctacob
           AND acp.nrconvenio   = pr_nrcnvcob
           AND acp.nrboleto     = pr_nrdocmto;
      rw_acordo_parcela    cr_acordo_parcela%ROWTYPE;
      
      --Variaveis Locais
      vr_vltarifa NUMBER;
      vr_cdhistor INTEGER;
      --Variaveis rotina tarifa
      vr_tar_cdhistor INTEGER;
      vr_tar_cdhisest INTEGER;
      vr_tar_vltarifa NUMBER;
      vr_tar_dtdivulg DATE;
      vr_tar_dtvigenc DATE;
      vr_tar_cdfvlcop INTEGER;
      vr_inpessoa     INTEGER;
      vr_cdmotivo     craptar.cdmotivo%TYPE;
	  vr_dsorgarq     crapcco.dsorgarq%TYPE;
      --Variavel Indice tabela
      vr_index VARCHAR2(40);
      --Tabela de memoria de erros
      vr_tab_erro GENE0001.typ_tab_erro;
      --Variaveis de erro
      vr_des_erro     VARCHAR2(4000);
      vr_cdcritic crapcri.cdcritic%TYPE;
      vr_dscritic VARCHAR2(4000);
      --Variaveis de Excecao
      vr_exc_erro EXCEPTION;
      --Agrupa os parametros - 15/12/2017 - Chamado 779415 
      vr_dsparame VARCHAR2(4000);
    BEGIN
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_prep_tt_lcm_consolidada');
      
      --Inicializar variaveis retorno
      pr_cdcritic:= NULL;
      pr_dscritic:= NULL;
      --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
      vr_dsparame :=  ' pr_idtabcob:' || pr_idtabcob || 
                      ', pr_cdocorre:' || pr_cdocorre || 
                      ', pr_tplancto:' || pr_tplancto || 
                      ', pr_vltarifa:' || pr_vltarifa || 
                      ', pr_cdhistor:' || pr_cdhistor || 
                      ', pr_cdmotivo:' || pr_cdmotivo;
	  vr_dsorgarq:= NULL;
      --Selecionar registro cobranca
      OPEN cr_crapcob (pr_rowid => pr_idtabcob);
      --Posicionar no proximo registro
      FETCH cr_crapcob INTO rw_crapcob;
      --Se nao encontrar
      IF cr_crapcob%NOTFOUND THEN
        --Fechar Cursor
        CLOSE cr_crapcob;
        --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        --Montar mensagem de erro
        vr_cdcritic:= 1078; --Registro de Cobranca nao encontrado
        vr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
      --Fechar Cursor
      CLOSE cr_crapcob;

      OPEN BTCH0001.cr_crapdat(pr_cdcooper => rw_crapcob.cdcooper);
      FETCH BTCH0001.cr_crapdat INTO rw_crapdat;
      -- Se não encontrar
      IF BTCH0001.cr_crapdat%NOTFOUND THEN
        -- Fechar o cursor pois haverá raise
        CLOSE BTCH0001.cr_crapdat;
        --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
        -- Montar mensagem de critica
        vr_cdcritic := 1;
        vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        RAISE vr_exc_erro;
      ELSE
        -- Apenas fechar o cursor
        CLOSE BTCH0001.cr_crapdat;
      END IF;      

      --Se for lancamento tarifa
      IF  pr_tplancto = 'T' THEN

        vr_cdmotivo := 0;

        IF pr_cdmotivo IS NOT NULL THEN
           vr_cdmotivo := pr_cdmotivo;
        END IF;

        --Buscar dados tarifa
        TARI0001.pc_busca_dados_tarifa (pr_cdcooper  => rw_crapcob.cdcooper    --Codigo Cooperativa
                                       ,pr_nrdconta  => rw_crapcob.nrdconta    --Codigo da Conta
                                       ,pr_nrconven  => rw_crapcob.nrcnvcob    --Numero Convenio
                                       ,pr_dsincide  => 'RET'                  --Descricao Incidencia
                                       ,pr_cdocorre  => pr_cdocorre            --Codigo Ocorrencia
                                       ,pr_cdmotivo  => vr_cdmotivo            --Codigo Motivo
                                       ,pr_idtabcob  => pr_idtabcob            --Tipo Pessoa
                                       ,pr_flaputar  => 1                      --Apuração Sim 
                                       ,pr_cdhistor  => vr_tar_cdhistor        --Codigo Historico
                                       ,pr_cdhisest  => vr_tar_cdhisest        --Historico Estorno
                                       ,pr_vltarifa  => vr_tar_vltarifa        --Valor Tarifa
                                       ,pr_dtdivulg  => vr_tar_dtdivulg        --Data Divulgacao
                                       ,pr_dtvigenc  => vr_tar_dtvigenc        --Data Vigencia
                                       ,pr_cdfvlcop  => vr_tar_cdfvlcop        --Codigo Cooperativa
                                       ,pr_cdcritic  => vr_cdcritic            --Codigo Critica
                                       ,pr_dscritic  => vr_dscritic            --Descricao Critica
                                       ,pr_tab_erro  => vr_tab_erro); --Tabela erros
	      -- Retorna nome do módulo logado - 15/12/2017 - Chamado 779415
		    GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_prep_tt_lcm_consolidada');
        --Se ocorreu erro
        IF NVL(vr_cdcritic,0) <> 0 OR TRIM(vr_dscritic) IS NOT NULL THEN
          --Zerar tarifa e historico
          vr_vltarifa:= 0;
          vr_cdhistor:= 0;
        ELSE
          vr_vltarifa:= vr_tar_vltarifa;
          vr_cdhistor:= vr_tar_cdhistor;
        END IF;
      ELSIF pr_tplancto = 'L' THEN
        --Selecionar Parametros Cadastro Cobranca
        OPEN cr_crapcco (pr_cdcooper => rw_crapcob.cdcooper
                        ,pr_nrconven => rw_crapcob.nrcnvcob);
        --Posicionar no proximo registro
        FETCH cr_crapcco INTO rw_crapcco;
        --Se nao encontrar
        IF cr_crapcco%NOTFOUND THEN
          --Zerar tarifa e historico
          vr_vltarifa:= 0;
          vr_cdhistor:= 0;
        ELSE
		  vr_dsorgarq:= rw_crapcco.dsorgarq;
          vr_vltarifa:= pr_vltarifa;
          --Se historico passado = 0
          IF nvl(pr_cdhistor,0) = 0 THEN
            vr_cdhistor:= rw_crapcco.cdhistor;
          ELSE
            vr_cdhistor:= pr_cdhistor;
          END IF;

          -- Boleto da COBTIT
          IF rw_crapcco.dsorgarq = 'DESCONTO DE TITULO' THEN

             OPEN cr_cde(pr_cdcooper => rw_crapcob.cdcooper
                        ,pr_nrctacob => rw_crapcob.nrdconta
                        ,pr_nrcnvcob => rw_crapcob.nrcnvcob
                        ,pr_nrdocmto => rw_crapcob.nrdocmto
                        ,pr_tpproduto => 3);
             FETCH cr_cde INTO rw_cde;

             /* atribuir a conta do cooperado para pagto de emprestimo */
             IF cr_cde%FOUND THEN
                rw_crapcob.nrdconta := rw_cde.nrdconta;
             END IF;

             CLOSE cr_cde;

          ELSIF nvl(rw_crapcob.nrctremp,0) > 0 THEN -- boleto de contrato de emprestimo

             OPEN cr_cde(pr_cdcooper  => rw_crapcob.cdcooper
                        ,pr_nrctacob  => rw_crapcob.nrdconta
                        ,pr_nrcnvcob  => rw_crapcob.nrcnvcob
                        ,pr_nrdocmto  => rw_crapcob.nrdocmto
                        ,pr_tpproduto => 0);
             FETCH cr_cde INTO rw_cde;

             /* atribuir a conta do cooperado para pagto de emprestimo */
             IF cr_cde%FOUND THEN
                rw_crapcob.nrdconta := rw_cde.nrdconta;
             END IF;

             CLOSE cr_cde;
          
          -- Boleto de Acordo
          ELSIF rw_crapcco.dsorgarq = 'ACORDO' THEN
            -- Buscar o número da conta do acordo
            OPEN  cr_acordo_parcela(pr_cdcooper => rw_crapcob.cdcooper
                                   ,pr_nrctacob => rw_crapcob.nrdconta
                                   ,pr_nrcnvcob => rw_crapcob.nrcnvcob
                                   ,pr_nrdocmto => rw_crapcob.nrdocmto);
            FETCH cr_acordo_parcela INTO rw_acordo_parcela;
            
            /* atribuir a conta do cooperado para pagto de acordo */
            IF cr_acordo_parcela%FOUND THEN
              rw_crapcob.nrdconta := rw_acordo_parcela.nrdconta;
          END IF;

            CLOSE cr_acordo_parcela;
        END IF;

        END IF;
        --Fechar Cursor
        CLOSE cr_crapcco;
      ELSE /* "C" - Tarifas Cartorarias */
        vr_vltarifa:= pr_vltarifa;
        vr_cdhistor:= pr_cdhistor;
      END IF;

      --Se Encontrou tarifa
      IF vr_vltarifa > 0 THEN
        --Montar indice para acessar tabela
        IF nvl(rw_crapcob.nrctremp,0) > 0 OR vr_dsorgarq = 'ACORDO' OR vr_dsorgarq = 'DESCONTO DE TITULO' THEN
           vr_index:= LPad(rw_crapcob.cdcooper,3,'0')||
                      LPad(rw_crapcob.nrdconta,10,'0')||
                      LPad(rw_crapcob.nrcnvcob,7,'0')||
                      LPad(pr_cdocorre,5,'0')||
                      LPad(vr_cdhistor,5,'0')||
                      Lpad(rw_crapcob.nrdocmto,10);
        ELSE
           vr_index:= LPad(rw_crapcob.cdcooper,3,'0')||
                      LPad(rw_crapcob.nrdconta,10,'0')||
                      LPad(rw_crapcob.nrcnvcob,7,'0')||
                      LPad(pr_cdocorre,5,'0')||
                      Lpad(vr_cdhistor,5,'0');
        END IF;

        --Verificar se a chave existe na tabela
        IF NOT pr_tab_lcm_consolidada.EXISTS(vr_index) THEN
          --Criar registro tabela lancamentos consolidada
          pr_tab_lcm_consolidada(vr_index).cdcooper:= rw_crapcob.cdcooper;
          pr_tab_lcm_consolidada(vr_index).nrdconta:= rw_crapcob.nrdconta;
          pr_tab_lcm_consolidada(vr_index).nrconven:= rw_crapcob.nrcnvcob;
          pr_tab_lcm_consolidada(vr_index).cdocorre:= pr_cdocorre;
          pr_tab_lcm_consolidada(vr_index).cdhistor:= vr_cdhistor;
          pr_tab_lcm_consolidada(vr_index).vllancto:= vr_vltarifa;
          pr_tab_lcm_consolidada(vr_index).tplancto:= pr_tplancto;
          pr_tab_lcm_consolidada(vr_index).qtdregis:= 1;
          pr_tab_lcm_consolidada(vr_index).cdfvlcop:= vr_tar_cdfvlcop;

          IF vr_dsorgarq = 'DESCONTO DE TITULO' THEN
             pr_tab_lcm_consolidada(vr_index).nrdocmto:= rw_crapcob.nrdocmto;
          -- Adicionar campo nrctremp (contrato de emprestimo) e o boleto na
          -- estrutura tab_lcm_consolidada, e atribuir o valor abaixo
          ELSIF rw_crapcob.nrctremp > 0 THEN
             pr_tab_lcm_consolidada(vr_index).nrctremp:= rw_crapcob.nrctremp;
             pr_tab_lcm_consolidada(vr_index).nrdocmto:= rw_crapcob.nrdocmto;
          END IF;

          -- P340 - campo para buscar registro de tarifa, caso precise estornar
          IF pr_tplancto = 'T' THEN 
            -- se processo online, registrar o boleto no cdpesqbb
            IF rw_crapdat.inproces = 1 and rw_crapcob.indpagto > 0 THEN
              pr_tab_lcm_consolidada(vr_index).cdpesqbb := to_char(rw_crapcob.cdcooper)||';'||
                                                           to_char(rw_crapcob.nrdconta)||';'||
                                                           to_char(rw_crapcob.nrcnvcob)||';'||
                                                           to_char(rw_crapcob.nrdocmto);
        ELSE
              -- caso contrario, registrar o convenio de cobranca no cdpesqbb
              pr_tab_lcm_consolidada(vr_index).cdpesqbb := to_char(rw_crapcob.nrcnvcob);
            END IF;
          END IF;

        ELSE
          --Incrementar valor tarifa
          pr_tab_lcm_consolidada(vr_index).vllancto:= Nvl(pr_tab_lcm_consolidada(vr_index).vllancto,0) + vr_vltarifa;
          --Incrementar quantidade registros
          pr_tab_lcm_consolidada(vr_index).qtdregis:= Nvl(pr_tab_lcm_consolidada(vr_index).qtdregis,0) + 1;
        END IF;
      END IF;
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);
    EXCEPTION
      -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415  
      -- Disparadores: pc_crps330.prc                          - Não grava TBGEN - Necessario Avaliar 
      --               pc_crps331.prc                          - Não grava TBGEN - Necessario Avaliar
      --               paga0002.pc_ent_confirmada              - Não grava TBGEN - Necessario Avaliar
      --               paga0002.                  - Não grava TBGEN - Necessario Avaliar
      --               paga0002.                  - Não grava TBGEN - Necessario Avaliar
      --               paga0002.                  - Não grava TBGEN - Necessario Avaliar
      --               paga0002.                  - Não grava TBGEN - Necessario Avaliar
      --               paga0002.                  - Não grava TBGEN - Necessario Avaliar
      --               paga0002.                  - Não grava TBGEN - Necessario Avaliar
      --               paga0002.pc_proc_deb_tarifas_custas      - Não grava TBGEN - Necessario Avaliar
      --               SSPC0002.pc_negativa_serasa              - Não grava TBGEN
      --               SSPC0002.pc_cancelar_neg_serasa
      --               paga0001.pc_processa_liquidacao          - Grava TBGEN
      --               paga0001.pc_proc_liquid_apos_baixa       - Grava TBGEN
      --               paga0001.pc_valores_a_creditar           - Grava TBGEN
      WHEN vr_exc_erro THEN
        pr_cdcritic:= vr_cdcritic;
        pr_dscritic:= vr_dscritic || vr_dsparame;
      WHEN OTHERS THEN
        -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
        CECRED.pc_internal_exception (pr_cdcooper => rw_crapcob.cdcooper);   
        -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        pr_cdcritic:= 9999;
        pr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic) || 
                      'PAGA0001.pc_prep_tt_lcm_consolidada. ' || SQLERRM ||
                      '.' || vr_dsparame;
    END;
  END pc_prep_tt_lcm_consolidada;

  /* Procedure que prepara retorno para cooperado  */
  PROCEDURE pc_prep_retorno_cooperado (pr_idregcob IN ROWID --ROWID da cobranca
                                      ,pr_cdocorre IN INTEGER --Codigo Ocorrencia
                                      ,pr_dsmotivo IN VARCHAR --Descricao Motivo
                                      ,pr_dtmvtolt IN DATE    --Data Movimento
                                      ,pr_cdoperad IN VARCHAR2 --Codigo Operador
                                      ,pr_nrremret OUT INTEGER --Numero Remessa
                                      ,pr_cdcritic OUT INTEGER --Codigo Critica
                                      ,pr_dscritic OUT VARCHAR2) IS --Descricao Critica
    -- .........................................................................
    --
    --  Programa : pc_prep_retorno_cooperado           Antigo: b1wgen0089.p/prep-retorno-cooperado
    --  Sistema  : Cred
    --  Sigla    : PAGA0001
    --  Autor    : Alisson C. Berrido - AMcom
    --  Data     : Julho/2013.                   Ultima atualizacao: 15/05/2019
    --
    --  Dados referentes ao programa:
    --
    --   Frequencia: Sempre que for chamado
    --   Objetivo  : Procedure que prepara retorno para cooperado
    --
    --   Alterações: 17/09/2015 - Ajustes melhoria performace no cursor cr_craprtc(Odirlei-AMcom)
	  --
	  --               29/01/2016 - Ajuste para utilizar sequence na geração do nrremret ao criar
    --                            a craprtc
    --                           (Adriano - SD 391157).
    --
	  --               03/02/2016 - Alimentar a variavel vr_nrremrtc
    --                            (Adriano)                  
    -- 
    --               15/12/2017 - Incluido nome do módulo logado
    --                            No caso de erro de programa gravar tabela especifica de log                     
    --                            Ajuste mensagem de erro 
    --                           (Belli - Envolti - Chamado 779415)    
    --
    --				 15/05/2019 - Merge branch P433 - API de Cobrança (Cechet)
    --                          - Tratamento de exceção caso o rowid do cursor cr_crapcob seja inválido.
  BEGIN
    DECLARE
      --Selecionar retorno titulo cooperado
      CURSOR cr_craprtc (pr_cdcooper IN craprtc.cdcooper%type
                        ,pr_nrcnvcob IN craprtc.nrcnvcob%type
                        ,pr_nrdconta IN craprtc.nrdconta%type
                        ,pr_dtmvtolt IN craprtc.dtmvtolt%type
                        ,pr_intipmvt IN craprtc.intipmvt%TYPE
                        ,pr_tipo     IN INTEGER) IS
      SELECT craprtc.nrremret
        FROM craprtc
        WHERE craprtc.cdcooper = pr_cdcooper
        AND   craprtc.nrcnvcob = pr_nrcnvcob
        AND   craprtc.nrdconta = pr_nrdconta
        AND   ((pr_tipo = 1 AND craprtc.dtmvtolt = pr_dtmvtolt) OR pr_tipo = 2)
         AND craprtc.intipmvt = pr_intipmvt;
      rw_craprtc cr_craprtc%ROWTYPE;

      --Variaveis Locais
      vr_nmarquiv VARCHAR2(100);
      vr_nmarqcre VARCHAR2(100);
      vr_nrremrtc INTEGER;
      vr_nrremcre INTEGER;
      vr_nrseqreg INTEGER;
      vr_vltarifa NUMBER;
      --Variaveis de erro
      vr_des_erro     VARCHAR2(4000);
      vr_cdcritic crapcri.cdcritic%TYPE;
      vr_dscritic VARCHAR2(4000);
      --Variaveis de Excecao
      vr_exc_erro EXCEPTION;
      --Agrupa os parametros - 15/12/2017 - Chamado 779415 
      vr_dsparame VARCHAR2(4000);
    BEGIN
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_prep_retorno_cooperado');
      
      --Inicializar variaveis retorno
      pr_cdcritic:= NULL;
      pr_dscritic:= NULL;
      --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
      vr_dsparame :=  ' pr_idregcob:' || pr_idregcob || 
                      ', pr_cdocorre:' || pr_cdocorre || 
                      ', pr_dsmotivo:' || pr_dsmotivo || 
                      ', pr_dtmvtolt:' || pr_dtmvtolt || 
                      ', pr_cdoperad:' || pr_cdoperad; 
      
	  BEGIN
      --Selecionar registro cobranca
      OPEN cr_crapcob (pr_rowid => pr_idregcob);
      --Posicionar no proximo registro
          FETCH cr_crapcob
              INTO rw_crapcob;
      EXCEPTION
          WHEN OTHERS THEN
              vr_dscritic := SQLERRM;
              IF cr_crapcob%ISOPEN THEN
                  CLOSE cr_crapcob;
              END IF;
          
              RAISE vr_exc_erro;
      END;

      --Se nao encontrar
      IF cr_crapcob%NOTFOUND THEN
        --Fechar Cursor
        CLOSE cr_crapcob;
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
      --Fechar Cursor
      CLOSE cr_crapcob;
      --Nome arquivo
      vr_nmarquiv:= 'cobret'||To_Char(pr_dtmvtolt,'MMDD');
      /*** Localiza o ultimo RTC desta data ***/
      OPEN cr_craprtc (pr_cdcooper => rw_crapcob.cdcooper
                      ,pr_nrcnvcob => rw_crapcob.nrcnvcob
                      ,pr_nrdconta => rw_crapcob.nrdconta
                      ,pr_dtmvtolt => pr_dtmvtolt
                      ,pr_intipmvt => 2
                      ,pr_tipo     => 1);

        --Posicionar no proximo registro
        FETCH cr_craprtc INTO rw_craprtc;

        --Se nao encontrar
        IF cr_craprtc%NOTFOUND THEN

        --Fechar Cursor
        CLOSE cr_craprtc;

        vr_nrremrtc := fn_sequence(pr_nmtabela => 'CRAPRTC', pr_nmdcampo => 'NRREMRET',pr_dsdchave => rw_crapcob.cdcooper|| ';' || rw_crapcob.nrdconta ||';' || rw_crapcob.nrcnvcob || ';2');
        
        --Criar retorno titulo cooperado
        BEGIN
          INSERT INTO craprtc
            (craprtc.cdcooper
            ,craprtc.nrdconta
            ,craprtc.nrcnvcob
            ,craprtc.dtmvtolt
            ,craprtc.nrremret
            ,craprtc.nmarquiv
            ,craprtc.flgproce
            ,craprtc.dtdenvio
            ,craprtc.qtreglot
            ,craprtc.cdoperad
            ,craprtc.dtaltera
            ,craprtc.hrtransa
            ,craprtc.intipmvt)
          VALUES
            (rw_crapcob.cdcooper
            ,rw_crapcob.nrdconta
            ,rw_crapcob.nrcnvcob
            ,pr_dtmvtolt
            ,vr_nrremrtc
            ,vr_nmarquiv
            ,0 --false
            ,NULL
            ,1
            ,pr_cdoperad
            ,pr_dtmvtolt
            ,gene0002.fn_busca_time
            ,2);
        EXCEPTION
          WHEN Others THEN
            -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
            CECRED.pc_internal_exception (pr_cdcooper => rw_crapcob.cdcooper);  
            -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
            vr_cdcritic := 1034;
            vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                             'CRAPRTC(24):' ||	
                             ' cdcooper:'   || rw_crapcob.cdcooper ||
                             ', nrdconta:'  || rw_crapcob.nrdconta ||
                             ', nrcnvcob:'  || rw_crapcob.nrcnvcob ||
                             ', dtmvtolt:'  || pr_dtmvtolt ||
                             ', nrremret:'  || vr_nrremrtc ||
                             ', nmarquiv:'  || vr_nmarquiv ||
                             ', flgproce:'  || '0' ||
                             ', dtdenvio:'  || 'NULL' ||
                             ', qtreglot:'  || '1' ||
                             ', cdoperad:'  || pr_cdoperad ||
                             ', dtaltera:'  || pr_dtmvtolt ||
                             ', hrtransa:'  || gene0002.fn_busca_time ||
                             ', intipmvt:'  || '2' ||
                             '. ' ||sqlerrm;	
            --Levantar Excecao
            RAISE vr_exc_erro;
        END;
      ELSE
        vr_nrremrtc:= rw_craprtc.nrremret;
      END IF;
      --Fechar Cursor
      IF cr_craprtc%ISOPEN THEN
        CLOSE cr_craprtc;
      END IF;
      --Retornar remessa
      pr_nrremret:= vr_nrremrtc;
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);
    EXCEPTION
      -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415  
      -- Disparadores: pc_crps694.prc                          - Não grava TBGEN - Necessario Avaliar 
      --               paga0001.pc_processa_liquidacao         - Grava TBGEN
      --               paga0001.pc_proc_liquid_apos_baixa      - Grava TBGEN
      --               paga0002.pc_ent_confirmada              - Necessario avaliar
      --               paga0002.pc_ent_rejeitada               - Necessario avaliar
      --               paga0002.pc_proc_baixa                  - Necessario avaliar
      --               paga0002.pc_proc_conf_instrucao         - Necessario avaliar
      --               paga0002.pc_proc_remessa_cartorio       - Necessario avaliar
      --               paga0002.pc_proc_retirada_cartorio      - Necessario avaliar
      --               paga0002.pc_proc_protestado             - Necessario avaliar
      --               paga0002.pc_proc_deb_tarifas_custas     - Necessario avaliar
      --               paga0002.pc_proc_retorno_qualquer       - Necessario avaliar
      WHEN vr_exc_erro THEN
        pr_cdcritic:= vr_cdcritic;
        pr_dscritic:= vr_dscritic ||
                      vr_dsparame;
      WHEN OTHERS THEN
        -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
        CECRED.pc_internal_exception (pr_cdcooper => rw_crapcob.cdcooper);   
        -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        pr_cdcritic:= 9999;
        pr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic) || 
                      'PAGA0001.pc_prep_retorno_cooperado. ' || SQLERRM ||
                      '.' || vr_dsparame ;
    END;
  END pc_prep_retorno_cooperado;



  /* Procedure que prepara retorno para cooperativa */
  PROCEDURE pc_prepara_retorno_cooperativa (pr_idtabcob IN ROWID    --ROWID da cobranca
                                           ,pr_dtmvtolt IN DATE     --Data Movimento
                                           ,pr_dtocorre IN DATE     --Data Ocorrencia
                                           ,pr_cdoperad IN VARCHAR2 --Codigo Operador
                                           ,pr_vlabatim IN NUMBER   --Valor Abatimento
                                           ,pr_vldescto IN NUMBER   --Valor Desconto
                                           ,pr_vljurmul IN NUMBER   --Valor juros multa
                                           ,pr_vlrpagto IN NUMBER   --Valor pagamento
                                           ,pr_vltarifa IN NUMBER DEFAULT 0  --Valor tarifa
                                           ,pr_vloutcre IN NUMBER DEFAULT 0 --Valor outros creditos
																					 ,pr_vloutdes IN NUMBER DEFAULT 0 -- Valor de outras despesas
                                           ,pr_flgdesct IN BOOLEAN  --Flag para titulo descontado
                                           ,pr_flcredit IN BOOLEAN  --Flag credito já efetuado
                                           ,pr_nrretcoo IN NUMBER   --Numero Retorno Cooperativa
                                           ,pr_cdmotivo IN VARCHAR  --Codigo Motivo
                                           ,pr_cdocorre IN INTEGER  --Codigo Ocorrencia
                                           ,pr_nrispbpg IN INTEGER DEFAULT 99999999  --Numero ISPB do pagador
                                           ,pr_cdbanpag IN INTEGER  --Codigo banco pagamento
                                           ,pr_cdagepag IN INTEGER  --Codigo Agencia pagamento
                                           ,pr_inestcri IN INTEGER DEFAULT 0 --Estado crise
                                           ,pr_cdcritic OUT INTEGER --Codigo Critica
                                           ,pr_dscritic OUT VARCHAR2) IS --Descricao Critica
    /* .........................................................................
    --
    --  Programa : pc_prepara_retorno_cooperativa           Antigo: b1wgen0089.p/prepara-retorno-cooperativa
    --  Sistema  : Cred
    --  Sigla    : PAGA0001
    --  Autor    : Alisson C. Berrido - AMcom
    --  Data     : Julho/2013.                   Ultima atualizacao: 15/12/2017
    --
    --  Dados referentes ao programa:
    --
    --   Frequencia: Sempre que for chamado
    --   Objetivo  : Procedure que prepara retorno para cooperativa
    --
    --   Alteracoes: 17/03/2015 - Incluido novos parametros para a procedure
    --                            do banco e da agência pagante SD - 248642
    --                            (Kelvin)
    --
    --               29/10/2015 - Inclusao do indicador estado de crise. (Jaison/Andrino)
    --
    --               24/11/2015 - Alterado calculo de data de credito do float, 
    --                            desconsiderar ultimo dia util do ano como feriado para o cooperado pode ocorrer neste dia
    --
    --               24/02/2016 - Alterado para buscar o campo qtdfloat da tabela crapcco 
    --                            para a tabela crapceb. Projeto 213 - Reciprocidade (Lombardi)
    --
    --               15/12/2017 - Incluido nome do módulo logado
    --                            No caso de erro de programa gravar tabela especifica de log                     
    --                            Ajuste mensagem de erro 
    --                           (Belli - Envolti - Chamado 779415)    
    --
    --
    -- .........................................................................*/
    
    
    
  BEGIN
    DECLARE

      CURSOR cr_crapceb (pr_cdcooper IN crapcco.cdcooper%TYPE
                        ,pr_nrconven IN crapcco.nrconven%TYPE
                        ,pr_nrdconta IN crapceb.nrdconta%TYPE) IS

      SELECT crapceb.qtdfloat
        FROM crapceb crapceb
       WHERE crapceb.cdcooper = pr_cdcooper
         AND crapceb.nrconven = pr_nrconven
         AND crapceb.nrdconta = pr_nrdconta;
      rw_crapceb cr_crapceb%ROWTYPE;

      -- Selecionar controle retorno titulos bancarios
      CURSOR cr_crapcre1 (pr_cdcooper IN crapcre.cdcooper%type
                         ,pr_nrcnvcob IN crapcre.nrcnvcob%type
                         ,pr_dtmvtolt IN crapcre.dtmvtolt%type
                         ,pr_intipmvt IN crapcre.intipmvt%TYPE) IS
        SELECT crapcre.nrremret
        FROM crapcre
        WHERE crapcre.cdcooper = pr_cdcooper
        AND   crapcre.nrcnvcob = pr_nrcnvcob
        AND   crapcre.dtmvtolt = pr_dtmvtolt
        AND   crapcre.intipmvt = pr_intipmvt
        ORDER BY crapcre.progress_recid DESC;
      rw_crapcre cr_crapcre1%ROWTYPE;

      -- Selecionar controle retorno titulos bancarios
      CURSOR cr_crapcre2 (pr_cdcooper IN crapcre.cdcooper%type
                         ,pr_nrcnvcob IN crapcre.nrcnvcob%type
                         ,pr_nrremret IN crapcre.nrremret%type
                         ,pr_intipmvt IN crapcre.intipmvt%TYPE) IS
        SELECT crapcre.nrremret
        FROM crapcre
        WHERE crapcre.cdcooper = pr_cdcooper
        AND   crapcre.nrcnvcob = pr_nrcnvcob
        AND   crapcre.nrremret > pr_nrremret
        AND   crapcre.intipmvt = pr_intipmvt
        ORDER BY crapcre.progress_recid DESC;

      -- Selecionar controle retorno titulos bancarios
      CURSOR cr_crapcre3 (pr_cdcooper IN crapcre.cdcooper%type
                         ,pr_nrcnvcob IN crapcre.nrcnvcob%type
                         ,pr_intipmvt IN crapcre.intipmvt%TYPE) IS
        SELECT NVL(MAX(crapcre.nrremret),0) + 1  -- Próximo código por convenio
          FROM crapcre
         WHERE crapcre.cdcooper = pr_cdcooper
           AND crapcre.nrcnvcob = pr_nrcnvcob
           AND crapcre.intipmvt = pr_intipmvt;

      --Variaveis Locais
      vr_nrremret INTEGER;
      vr_nrseqreg INTEGER;
      vr_nmarquiv VARCHAR2(50);
      vr_dtcredit DATE;
      --Variaveis de erro
      vr_des_erro     VARCHAR2(4000);
      vr_cdcritic crapcri.cdcritic%TYPE;
      vr_dscritic VARCHAR2(4000);
      --Variaveis de Excecao
      vr_exc_erro EXCEPTION; 
      --Agrupa os parametros - 15/12/2017 - Chamado 779415 
      vr_dsparame VARCHAR2(4000);

----------------

  -- Procedimento para inserir ou atualizar a crapmvi e não deixar tabela lockada
  PROCEDURE pc_insere_crapcre(pr_cdcooper IN crapcob.cdcooper%TYPE
                             ,pr_nrcnvcob IN crapcre.nrcnvcob%TYPE
                             ,pr_dtmvtolt IN crapcre.dtmvtolt%TYPE
                             ,pr_nrremret IN crapcre.nrremret%TYPE
                             ,pr_intipmvt IN crapcre.intipmvt%TYPE
                             ,pr_nmarquiv IN crapcre.nmarquiv%TYPE
                             ,pr_flgproce IN crapcre.flgproce%TYPE
                             ,pr_cdoperad IN crapcre.cdoperad%TYPE
                             ,pr_dtaltera IN crapcre.dtaltera%TYPE
                             ,pr_dscritic OUT VARCHAR2) IS
  
    -- Pragma - abre nova sessao para tratar a atualizacao
    PRAGMA AUTONOMOUS_TRANSACTION;
    
    BEGIN
    pr_dscritic := null;  
  
    --Criar movimento retorno
    BEGIN
      INSERT INTO crapcre
                 (crapcre.cdcooper
                 ,crapcre.nrcnvcob
                 ,crapcre.dtmvtolt
                 ,crapcre.nrremret
                 ,crapcre.intipmvt
                 ,crapcre.nmarquiv
                 ,crapcre.flgproce
                 ,crapcre.cdoperad
                 ,crapcre.dtaltera)
          VALUES
                 (pr_cdcooper
                 ,pr_nrcnvcob
                 ,pr_dtmvtolt
                 ,pr_nrremret
                 ,pr_intipmvt
                 ,pr_nmarquiv
                 ,pr_flgproce
                 ,pr_cdoperad
                 ,pr_dtaltera);
    EXCEPTION
      WHEN Dup_val_on_index THEN

        -- buscar o ultimo movimento de retorno do convenio do dia
        OPEN cr_crapcre1 (pr_cdcooper => pr_cdcooper
                         ,pr_nrcnvcob => pr_nrcnvcob
                         ,pr_dtmvtolt => pr_dtmvtolt
                         ,pr_intipmvt => 2);   --Retorno
        --Posicionar no proximo registro
        FETCH cr_crapcre1 INTO rw_crapcre;
        --Se nao encontrar
        IF cr_crapcre1%NOTFOUND THEN
          
          --Selecionar movimento retorno
          pr_dscritic:= 'Erro ao buscar ultimo movimento de retorno do convenio: '|| pr_nrcnvcob ||'.';
        END IF;
        
        --Fechar Cursor       
        CLOSE cr_crapcre1;

      WHEN Others THEN
        pr_dscritic:= 'Erro ao inserir na tabela crapcre. '||sqlerrm;
    END;

    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      -- se ocorreu algum erro durante a criac?o
      pr_dscritic := 'Erro ao gravar crapcre i(Convenio: ' || pr_nrcnvcob || ', Data: '|| to_char(pr_dtmvtolt,'dd/mm/yyyy') ||'): ' ||
                     SQLERRM;
  END pc_insere_crapcre;

    BEGIN	  
      -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
      GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_prepara_retorno_cooperativa');
      
      --Inicializar variaveis retorno
      pr_cdcritic:= NULL;
      pr_dscritic:= NULL;
      --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
      vr_dsparame :=  ' pr_idtabcob:' || pr_idtabcob || 
                      ', pr_dtmvtolt:' || pr_dtmvtolt || 
                      ', pr_dtocorre:' || pr_dtocorre || 
                      ', pr_cdoperad:' || pr_cdoperad || 
                      ', pr_vlabatim:' || pr_vlabatim || 
                      ', pr_vldescto:' || pr_vldescto || 
                      ', pr_vljurmul:' || pr_vljurmul || 
                      ', pr_vlrpagto:' || pr_vlrpagto || 
                      ', pr_flgdesct:' || CASE pr_flgdesct
                                            WHEN true 
                                              THEN 'true'
                                              ELSE 'false' 
                                          END || 
                      ', pr_flcredit:' || CASE pr_flcredit
                                            WHEN true 
                                              THEN 'true'
                                              ELSE 'false' 
                                          END || 
                      ', pr_nrretcoo:' || pr_nrretcoo || 
                      ', pr_cdmotivo:' || pr_cdmotivo || 
                      ', pr_cdocorre:' || pr_cdocorre || 
                      ', pr_nrispbpg:' || pr_nrispbpg || 
                      ', pr_cdbanpag:' || pr_cdbanpag || 
                      ', pr_cdagepag:' || pr_cdagepag || 
                      ', pr_inestcri:' || pr_inestcri;
      --Selecionar registro cobranca
      OPEN cr_crapcob (pr_rowid => pr_idtabcob);
      --Posicionar no proximo registro
      FETCH cr_crapcob INTO rw_crapcob;
      --Se nao encontrar
      IF cr_crapcob%NOTFOUND THEN
        --Fechar Cursor
        CLOSE cr_crapcob;
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
      --Fechar Cursor
      CLOSE cr_crapcob;
      /* buscar o ultimo movimento de retorno do convenio do dia */
      OPEN cr_crapcre1 (pr_cdcooper => rw_crapcob.cdcooper
                       ,pr_nrcnvcob => rw_crapcob.nrcnvcob
                       ,pr_dtmvtolt => pr_dtmvtolt
                       ,pr_intipmvt => 2);   --Retorno
      --Posicionar no proximo registro
      FETCH cr_crapcre1 INTO rw_crapcre;
      --Se nao encontrar
      IF cr_crapcre1%NOTFOUND THEN
        --Fechar Cursor
        CLOSE cr_crapcre1;
        /* tratamento especial para titulos cobranca com registro BB */
        IF rw_crapcob.cdbandoc = 1 THEN
          --Selecionar movimento retorno
          OPEN cr_crapcre2 (pr_cdcooper => rw_crapcob.cdcooper
                           ,pr_nrcnvcob => rw_crapcob.nrcnvcob
                           ,pr_nrremret => 999999
                           ,pr_intipmvt => 2);   --Retorno
          --Posicionar no proximo registro
          FETCH cr_crapcre2 INTO rw_crapcre;
          /* numeracao BB quando gerado pelo sistema, comecar
                 a partir de 999999 para nao confundir com o numero
                 de controle do arquivo de retorno BB */
          --Se nao encontrar
          IF cr_crapcre2%NOTFOUND THEN
            --Numero remessa
            vr_nrremret:= 999999;
          ELSE
            --Numero remessa
            vr_nrremret:= nvl(rw_crapcre.nrremret,0) + 1;
          END IF;
          --Fechar Cursor
          CLOSE cr_crapcre2;
        ELSE
          --Selecionar movimento retorno
          OPEN cr_crapcre3 (pr_cdcooper => rw_crapcob.cdcooper
                           ,pr_nrcnvcob => rw_crapcob.nrcnvcob
                           ,pr_intipmvt => 2);   --Retorno
          FETCH cr_crapcre3 INTO vr_nrremret;
          CLOSE cr_crapcre3;
        END IF;
        --Montar Nome arquivo
        vr_nmarquiv:= 'ret085_'||To_Char(pr_dtmvtolt,'DDMM')||'_'||To_Char(rw_crapcob.nrcnvcob,'fm000000');
       
        --Inserir movimento retorno
        --Ajuste no INC0017437 - falha na inserção do crapcre no paralelismo
        pc_insere_crapcre(pr_cdcooper => rw_crapcob.cdcooper
                         ,pr_nrcnvcob => rw_crapcob.nrcnvcob
                         ,pr_dtmvtolt => pr_dtmvtolt
                         ,pr_nrremret => vr_nrremret
                         ,pr_intipmvt => 2 /* retorno */
                         ,pr_nmarquiv => vr_nmarquiv
                         ,pr_flgproce => 0 --FALSE
                         ,pr_cdoperad => pr_cdoperad
                         ,pr_dtaltera => pr_dtmvtolt
                         ,pr_dscritic => vr_dscritic);

        if vr_dscritic is not null then
            vr_cdcritic:= 0;
            --Levantar Excecao
            RAISE vr_exc_erro;
        end if;
      ELSE
        --Numero remessa
        vr_nrremret:= rw_crapcre.nrremret;
      END IF;
      --Fechar Cursor
      IF cr_crapcre1%ISOPEN THEN
        CLOSE cr_crapcre1;
      END IF;

      -- Inicializar data de crédito como NULO;
      vr_dtcredit := NULL;
      -- Se o título não está descontado, então informar data do crédito;
      IF NOT pr_flgdesct AND pr_cdocorre IN (6,17,76,77) THEN
         -- Calcular data do crédito em função do float somente para convênio 085;
         IF rw_crapcob.cdbandoc = 085 THEN
               -- Abrir cursor cr_crapcco e buscar o float (qtdfloat);
               OPEN cr_crapceb(pr_cdcooper => rw_crapcob.cdcooper
                              ,pr_nrconven => rw_crapcob.nrcnvcob
                              ,pr_nrdconta => rw_crapcob.nrdconta);
               FETCH cr_crapceb INTO rw_crapceb;
			   CLOSE cr_crapceb;
               -- O cálculo da data do crédito será:
               vr_dtcredit := pr_dtocorre;
               IF rw_crapceb.qtdfloat > 0 AND pr_vlrpagto < 250000 THEN
                  FOR i IN 1..rw_crapceb.qtdfloat LOOP
                      vr_dtcredit := vr_dtcredit + 1;
                      vr_dtcredit := GENE0005.fn_valida_dia_util(pr_cdcooper => rw_crapcob.cdcooper
                                                                ,pr_dtmvtolt => vr_dtcredit
                                                                ,pr_tipo     => 'P'
                                                                -- Desconsiderar ultimo dia util do ano como feriado
                                                                -- para credito para o cooperado pode ocorrer neste dia
                                                                ,pr_excultdia => TRUE); 
                  END LOOP;
               END IF; -- se Float > 0
         END IF; -- se titulo 085
      END IF; -- se titulo não está descontado;

      vr_nrseqreg := fn_sequence('CRAPRET','NRSEQREG', rw_crapcob.cdcooper||';'||
                                                       rw_crapcob.nrcnvcob||';'||
                                                       vr_nrremret);

      --Gravar retorno
      PAGA0001.pc_grava_retorno (pr_cdcooper => rw_crapcob.cdcooper   --Codigo Cooperativa
                                ,pr_nrcnvcob => rw_crapcob.nrcnvcob   --Numero Convenio Cobranca
                                ,pr_nrdconta => rw_crapcob.nrdconta   --Numero da Conta
                                ,pr_nrdocmto => rw_crapcob.nrdocmto   --Numero documento
                                ,pr_nrnosnum => rw_crapcob.nrnosnum   --Nosso Numero
                                ,pr_cdocorre => pr_cdocorre           --Codigo Ocorrencia
                                ,pr_dsmotivo => pr_cdmotivo           --Descricao Motivo
                                ,pr_nrremret => vr_nrremret           --Numero remessa retorno
                                ,pr_nrseqreg => vr_nrseqreg           --Sequencial do registro
                                ,pr_nrispbrc => pr_nrispbpg           --Numero do ISPB do recebedor
                                ,pr_cdbcorec => pr_cdbanpag           --Codigo banco recebedor
                                ,pr_cdagerec => pr_cdagepag           --Codigo Agencia recebedora
                                ,pr_cdbcocor => 0                     --Codigo Banco
                                ,pr_nrretcoo => pr_nrretcoo           --Numero retorno cooperativa
                                ,pr_dtcredit => vr_dtcredit           --Data Credito
                                ,pr_flcredit => pr_flcredit           --Flag Creditado
                                ,pr_vlabatim => pr_vlabatim           --Valor abatimentos
                                ,pr_vldescto => pr_vldescto           --Valor descontos
                                ,pr_vljurmul => pr_vljurmul           --Valor Juros
                                ,pr_vloutcre => pr_vloutcre           --Valor saida credito
                                ,pr_vloutdes => pr_vloutdes           --Valor saida debito
                                ,pr_vlrliqui => pr_vlrpagto           --Valor liquidacao   -- Alterado de rw_crapcob.vltitulo para pr_vlrpagto (SD 183392)
                                ,pr_vlrpagto => pr_vlrpagto           --Valor Pagamento
                                ,pr_vltarifa => pr_vltarifa           --Valor tarifa
                                ,pr_vltitulo => rw_crapcob.vltitulo   --Valor titulo
                                ,pr_cdoperad => pr_cdoperad           --Codigo operador
                                ,pr_dtmvtolt => pr_dtmvtolt           --Data Movimento
                                ,pr_dtocorre => pr_dtmvtolt           --Data Ocorrencia
                                ,pr_inestcri => pr_inestcri           --Estado crise
                                ,pr_cdcritic => vr_cdcritic           --Codigo erro
                                ,pr_dscritic => vr_dscritic);         --Descricao erro
      --Se Ocorreu erro
      IF NVL(vr_cdcritic,0) <> 0 OR TRIM(vr_dscritic) IS NOT NULL THEN
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);
    EXCEPTION
      -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
      -- Disparadores: pc_crps694.prc                          - Não grava TBGEN - Necessario Avaliar
      --               paga0001.pc_processa_liquidacao         - Grava TBGEN
      --               paga0001.pc_proc_liquid_apos_baixa      - Grava TBGEN
      WHEN vr_exc_erro THEN
        pr_cdcritic:= vr_cdcritic;
        pr_dscritic:= vr_dscritic ||
                      vr_dsparame;
      WHEN OTHERS THEN
        -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
        CECRED.pc_internal_exception (pr_cdcooper => rw_crapcob.cdcooper);   
        -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        pr_cdcritic:= 9999;
        pr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic)  || 
                      'PAGA0001.pc_prepara_retorno_cooperativa. ' || SQLERRM ||
                      '.' || vr_dsparame;	
    END;
  END pc_prepara_retorno_cooperativa;

  /* Procedure para processar liquidacao de titulos */
  PROCEDURE pc_processa_liquidacao (pr_idtabcob IN ROWID    --Rowid da Cobranca
                                   ,pr_nrnosnum IN VARCHAR2 --Nosso Numero
                                   ,pr_nrispbpg IN INTEGER DEFAULT 99999999  --Numero ISPB do pagador
                                   ,pr_cdbanpag IN INTEGER  --Codigo banco pagamento
                                   ,pr_cdagepag IN INTEGER  --Codigo Agencia pagamento
                                   ,pr_vltitulo IN NUMBER   --Valor do titulo
                                   ,pr_vlliquid IN NUMBER   --Valor Liquidacao
                                   ,pr_vlrpagto IN NUMBER   --Valor pagamento
                                   ,pr_vlabatim IN NUMBER   --Valor abatimento
                                   ,pr_vldescto IN NUMBER   --Valor desconto
                                   ,pr_vlrjuros IN NUMBER   --Valor juros
                                   ,pr_vloutdeb IN NUMBER   --Valor saida debito
                                   ,pr_vloutcre IN NUMBER   --Valor saida credito
                                   ,pr_dtocorre IN DATE     --Data Ocorrencia
                                   ,pr_dtcredit IN DATE     --Data Credito
                                   ,pr_cdocorre IN INTEGER  --Codigo Ocorrencia
                                   ,pr_dsmotivo IN VARCHAR2 --Descricao Motivo
                                   ,pr_dtmvtolt IN DATE     --Data movimento
                                   ,pr_cdoperad IN VARCHAR2 --Codigo Operador
                                   ,pr_indpagto IN INTEGER  --Indicador pagamento /* 0-COMPE 1-Caixa On-Line 3-Internet 4-TAA */
                                   ,pr_inestcri IN INTEGER DEFAULT 0 --Estado crise
                                   ,pr_ret_nrremret OUT INTEGER --Numero remetente
                                   ,pr_nmtelant IN VARCHAR2 DEFAULT NULL -- somente para COMPEFORA
                                   ,pr_cdcritic OUT INTEGER --Codigo Critica
                                   ,pr_dscritic OUT VARCHAR2 --Descricao Critica
                                   ,pr_tab_lcm_consolidada IN OUT PAGA0001.typ_tab_lcm_consolidada --Tabela lancamentos consolidada
                                   ,pr_tab_descontar       IN OUT PAGA0001.typ_tab_titulos) IS   --Tabela de titulos descontar
    /* .........................................................................
    --
    --  Programa : pc_processa_liquidacao           Antigo: b1wgen0089.p/proc-liquidacao
    --  Sistema  : Cred
    --  Sigla    : PAGA0001
    --  Autor    : Alisson C. Berrido - AMcom
    --  Data     : Julho/2013.                   Ultima atualizacao: 27/03/2018
    --
    --  Dados referentes ao programa:
    --
    --   Frequencia: Sempre que for chamado
    --   Objetivo  : Procedure para processar liquidacao de titulos
    --
    --   Alteração: 02/01/2015 - Alterado para quando deletar registro da tabela craptdb
    --                           deletar tbm registros filhos nas tabela crapljt e crapabt
    --                           SD237726 (Odirlei-AMcom)
    --
    --              29/10/2015 - Inclusao do indicador estado de crise. (Jaison/Andrino)
    --
    --              29/12/2016 - Tratamento Nova Plataforma de cobrança PRJ340 - NPC (Odirlei-AMcom)
    --
    --              29/11/2017 - Ajustado para carregar as informações da tarifa 
    --                           após o UPDATE da cob devido ao indpagto ser atualizado 
    --                           nesse update (Douglas - Chamado 799851)
    --
    --              27/03/2018 - Ajustes referente ao PRJ352
    --
    --              10/06/2018 - Ajustado para alimentar a lista de titulos a serem baixados. Quando se tratar da nova versão da 
    --                           funcionalidade do borderô, não precisa verificar as regras de data de vencimento ser em feriado 
    --                           ou fds (Paulo Penteado (GFT)  
    --
    --              15/12/2017 - Incluido nome do módulo logado
    --                           No caso de erro de programa gravar tabela especifica de log                     
    --                           Ajuste mensagem de erro 
    --                          (Belli - Envolti - Chamado 779415)   
    --
    --              13/11/2018 - Caso o sistema identifique o pagamento de um título descontado após o vencimento e o mesmo estiver dentro de 
    --                           um acordo, deverá ser realizado o crédito do valor pago direto na conta corrente do cooperado. (Paulo Penteado GFT) 
    --
    -- .........................................................................*/

  BEGIN
    DECLARE
      --Selecionar informacoes dos titulos do bordero
      CURSOR cr_craptdb (pr_cdcooper IN craptdb.cdcooper%type
                        ,pr_cdbandoc IN craptdb.cdbandoc%type
                        ,pr_nrdctabb IN craptdb.nrdctabb%type
                        ,pr_nrcnvcob IN craptdb.nrcnvcob%type
                        ,pr_nrdconta IN craptdb.nrdconta%type
                        ,pr_nrdocmto IN craptdb.nrdocmto%type
                        ,pr_insittit IN craptdb.insittit%type) IS
        SELECT craptdb.dtvencto
              ,craptdb.vltitulo
              ,craptdb.nrdconta
              ,craptdb.nrdocmto
              ,craptdb.cdcooper
              ,craptdb.insittit
              ,craptdb.dtdpagto
              ,craptdb.nrborder
              ,craptdb.dtlibbdt
              ,craptdb.cdbandoc
              ,craptdb.nrdctabb
              ,craptdb.nrcnvcob
              ,craptdb.nrctrlim
              ,craptdb.vlliquid
              ,craptdb.nrinssac
              ,craptdb.rowid
              ,crapbdt.flverbor
              ,craptdb.nrtitulo
        FROM crapbdt
            ,craptdb
        WHERE crapbdt.cdcooper = craptdb.cdcooper
        AND   crapbdt.nrborder = craptdb.nrborder
        AND   craptdb.cdcooper = pr_cdcooper
        AND   craptdb.cdbandoc = pr_cdbandoc
        AND   craptdb.nrdctabb = pr_nrdctabb
        AND   craptdb.nrcnvcob = pr_nrcnvcob
        AND   craptdb.nrdconta = pr_nrdconta
        AND   craptdb.nrdocmto = pr_nrdocmto
        AND   craptdb.insittit = pr_insittit
        ORDER BY craptdb.progress_recid DESC;
      rw_craptdb cr_craptdb%ROWTYPE;

      -- selecionar conta do cooperado do contrato de emprestimo
      CURSOR cr_cde (pr_cdcooper IN tbrecup_cobranca.cdcooper%TYPE
                    ,pr_nrctacob IN tbrecup_cobranca.nrdconta_cob%TYPE
                    ,pr_nrcnvcob IN tbrecup_cobranca.nrcnvcob%TYPE
                    ,pr_nrdocmto IN tbrecup_cobranca.nrboleto%TYPE
                    ,pr_nrctremp IN tbrecup_cobranca.nrctremp%TYPE) IS
        SELECT cde.nrdconta, cde.tpparcela
          FROM tbrecup_cobranca cde
         WHERE cde.cdcooper     = pr_cdcooper
           AND cde.nrdconta_cob = pr_nrctacob
           AND cde.nrcnvcob     = pr_nrcnvcob
           AND cde.nrboleto     = pr_nrdocmto
           AND cde.tpproduto    = 0;
      rw_cde cr_cde%ROWTYPE;
      
      CURSOR cr_acordoctr(pr_cdcooper IN tbdsct_titulo_cyber.cdcooper%TYPE
                         ,pr_nrdconta IN tbdsct_titulo_cyber.nrdconta%TYPE
                         ,pr_nrborder IN tbdsct_titulo_cyber.nrborder%TYPE
                         ,pr_nrtitulo IN tbdsct_titulo_cyber.nrtitulo%TYPE) IS
        SELECT ttc.cdcooper, ttc.nrborder
          FROM tbdsct_titulo_cyber ttc
         INNER JOIN tbrecup_acordo ta ON ta.cdcooper = ttc.cdcooper 
                                     AND ta.nrdconta = ttc.nrdconta
         INNER JOIN tbrecup_acordo_contrato tac ON ttc.nrctrdsc = tac.nrctremp 
                                               AND tac.nracordo = ta.nracordo
         WHERE ttc.cdcooper = pr_cdcooper
           AND ttc.nrdconta = pr_nrdconta
           AND ttc.nrborder = pr_nrborder
           AND ttc.nrtitulo = pr_nrtitulo
           AND tac.nrgrupo  = 1
           AND tac.cdorigem = 4   -- Desconto de Títulos
           AND ta.cdsituacao <> 3; -- Diferente de Cancelado 
      rw_acordoctr cr_acordoctr%ROWTYPE;

      --Variaveis Locais
      vr_cdhistor        INTEGER;
      vr_index           INTEGER;
      vr_nrremret        INTEGER;
      vr_index_descontar VARCHAR2(20);
      vr_ret_dsinserr    VARCHAR2(1000);
      vr_feriafds        BOOLEAN;
      vr_flgdesct        BOOLEAN:= FALSE;
      vr_dtprvenc        DATE;
      vr_dtferiado       DATE;
      vr_flcredit        BOOLEAN:= FALSE;
      vr_cdmotivo        craptar.cdmotivo%TYPE;

      --Variaveis de erro
      vr_des_erro     VARCHAR2(4000);
      vr_cdcritic crapcri.cdcritic%TYPE;
      vr_dscritic VARCHAR2(4000);
      --Variaveis de Excecao
      vr_exc_erro EXCEPTION;
      --Agrupa os parametros - 15/12/2017 - Chamado 779415 
      vr_dsparame VARCHAR2(4000);
    BEGIN
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_processa_liquidacao');
      
      --Inicializar variaveis retorno
      pr_cdcritic:= NULL;
      pr_dscritic:= NULL;
      --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
      vr_dsparame :=  ' pr_idtabcob:' || pr_idtabcob || 
                      ', pr_nrnosnum:' || pr_nrnosnum || 
                      ', pr_nrispbpg:' || pr_nrispbpg || 
                      ', pr_cdbanpag:' || pr_cdbanpag || 
                      ', pr_cdagepag:' || pr_cdagepag || 
                      ', pr_vltitulo:' || pr_vltitulo || 
                      ', pr_vlliquid:' || pr_vlliquid || 
                      ', pr_vlrpagto:' || pr_vlrpagto || 
                      ', pr_vlabatim:' || pr_vlabatim || 
                      ', pr_vldescto:' || pr_vldescto || 
                      ', pr_vlrjuros:' || pr_vlrjuros || 
                      ', pr_vloutdeb:' || pr_vloutdeb || 
                      ', pr_vloutcre:' || pr_vloutcre || 
                      ', pr_dtocorre:' || pr_dtocorre || 
                      ', pr_dtcredit:' || pr_dtcredit ||  
                      ', pr_cdocorre:' || pr_cdocorre || 
                      ', pr_dsmotivo:' || pr_dsmotivo || 
                      ', pr_dtmvtolt:' || pr_dtmvtolt || 
                      ', pr_cdoperad:' || pr_cdoperad || 
                      ', pr_indpagto:' || pr_indpagto || 
                      ', pr_inestcri:' || pr_inestcri || 
                      ', pr_nmtelant:' || pr_nmtelant;
      --Selecionar registro cobranca
      OPEN cr_crapcob (pr_rowid => pr_idtabcob);
      --Posicionar no proximo registro
      FETCH cr_crapcob INTO rw_crapcob;
      --Se nao encontrar
      IF cr_crapcob%NOTFOUND THEN
        --Fechar Cursor
        CLOSE cr_crapcob;
        --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        vr_cdcritic := 1179;
        vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
      --Fechar Cursor
      CLOSE cr_crapcob;
      --Verificar cooperativa
      OPEN cr_crapcop(pr_cdcooper => rw_crapcob.cdcooper);
      FETCH cr_crapcop INTO rw_crapcop;
      --Se nao encontrou
      IF cr_crapcop%NOTFOUND THEN
        --Fechar Cursor
        CLOSE cr_crapcop;
        --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        vr_cdcritic := 1076; --Registro de cooperativa origem nao encontrado
        vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
      --Fechar Cursor
      CLOSE cr_crapcop;
      /* Gerar motivos de ocorrencia  */
      PAGA0001.pc_proc_motivos_retorno (pr_idtabcob => pr_idtabcob  --Rowid da cobranca
                                       ,pr_cdocorre => pr_cdocorre  --Codigo Ocorrencia
                                       ,pr_dsmotivo => pr_dsmotivo  --Descricao Motivo
                                       ,pr_dtmvtolt => pr_dtmvtolt  --Data Movimentacao
                                       ,pr_cdoperad => pr_cdoperad  --Codigo Operador
                                       ,pr_cdcritic => vr_cdcritic  --Codigo Critica
                                       ,pr_dscritic => vr_dscritic); --Descricao Critica
      --Se ocorreu erro
      IF NVL(vr_cdcritic,0) <> 0 OR TRIM(vr_dscritic) IS NOT NULL THEN
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
	    -- Retorno nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_processa_liquidacao');

      --Historico de Pagamento
      IF pr_indpagto = 0 THEN
        --
        IF pr_dsmotivo = '08' THEN
          --
					IF rw_crapcob.cdbandoc = 85 THEN
						--
          vr_cdhistor := 2631;
          --
        ELSE
          --
        vr_cdhistor:= 0;
          --
        END IF;
        --
      ELSE
          --
        vr_cdhistor:= 0;
          --
        END IF;
        --
      ELSE
        vr_cdhistor:= 987;
      END IF;

      /* buscar titulo descontado - EM ESTUDO */
      --Selecionar titulos do bordero
      OPEN cr_craptdb (pr_cdcooper => rw_crapcob.cdcooper
                      ,pr_cdbandoc => rw_crapcob.cdbandoc
                      ,pr_nrdctabb => rw_crapcob.nrdctabb
                      ,pr_nrcnvcob => rw_crapcob.nrcnvcob
                      ,pr_nrdconta => rw_crapcob.nrdconta
                      ,pr_nrdocmto => rw_crapcob.nrdocmto
                      ,pr_insittit => 0);
      --Posicionar no proximo registro
      FETCH cr_craptdb INTO rw_craptdb;
      --Se nao encontrar
      IF cr_craptdb%FOUND THEN
        --Fechar Cursor
        CLOSE cr_craptdb;
        --Excluir registro
        BEGIN
          DELETE craptdb
          WHERE craptdb.ROWID = rw_craptdb.ROWID;
        EXCEPTION
          WHEN Others THEN
            -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
            CECRED.pc_internal_exception (pr_cdcooper => rw_crapcob.cdcooper);  
            -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
            vr_cdcritic := 1037;
            vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                             ' craptdb:' ||
                             ', ROWID:'  || rw_craptdb.ROWID ||
                             '. ' ||sqlerrm;
            --Levantar Excecao
            RAISE vr_exc_erro;
        END;

        -- Quando é eliminado o registro da craptdb, é necessario eliminar registros filhos
        -- nas tabelas crapljt e crapabt
        --Excluir registro crapljt
        BEGIN
          DELETE crapljt
          WHERE cdcooper = rw_craptdb.cdcooper
            AND cdbandoc = rw_craptdb.cdbandoc
            AND nrdctabb = rw_craptdb.nrdctabb
            AND nrcnvcob = rw_craptdb.nrcnvcob
            AND nrdconta = rw_craptdb.nrdconta
            AND nrdocmto = rw_craptdb.nrdocmto
            AND NRBORDER = rw_craptdb.nrborder;
        EXCEPTION
          WHEN Others THEN
            -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
            CECRED.pc_internal_exception (pr_cdcooper => rw_craptdb.cdcooper);   
            -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
            vr_cdcritic := 1037;
            vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                             ' crapljt:' ||
                             ' cdcooper:'  || rw_craptdb.cdcooper ||
                             ', cdbandoc:'  || rw_craptdb.cdbandoc ||
                             ', nrdctabb:'  || rw_craptdb.nrdctabb ||
                             ', nrcnvcob:'  || rw_craptdb.nrcnvcob ||
                             ', nrdconta:'  || rw_craptdb.nrdconta ||
                             ', nrdocmto:'  || rw_craptdb.nrdocmto ||
                             ', NRBORDER:'  || rw_craptdb.nrborder ||
                             '. ' ||sqlerrm;
            --Levantar Excecao
            RAISE vr_exc_erro;
        END;

        --Excluir registro crapabt
        BEGIN
          DELETE crapabt
          WHERE cdcooper = rw_craptdb.cdcooper
            AND cdbandoc = rw_craptdb.cdbandoc
            AND nrdctabb = rw_craptdb.nrdctabb
            AND nrcnvcob = rw_craptdb.nrcnvcob
            AND nrdconta = rw_craptdb.nrdconta
            AND nrdocmto = rw_craptdb.nrdocmto
            AND NRBORDER = rw_craptdb.nrborder;
        EXCEPTION
          WHEN Others THEN
            -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
            CECRED.pc_internal_exception (pr_cdcooper => rw_craptdb.cdcooper);   
            -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
            vr_cdcritic := 1037;
            vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                             ' crapabt:' ||
                             ' cdcooper:'  || rw_craptdb.cdcooper ||
                             ', cdbandoc:'  || rw_craptdb.cdbandoc ||
                             ', nrdctabb:'  || rw_craptdb.nrdctabb ||
                             ', nrcnvcob:'  || rw_craptdb.nrcnvcob ||
                             ', nrdconta:'  || rw_craptdb.nrdconta ||
                             ', nrdocmto:'  || rw_craptdb.nrdocmto ||
                             ', NRBORDER:'  || rw_craptdb.nrborder ||
                             '. ' ||sqlerrm;
            --Levantar Excecao
            RAISE vr_exc_erro;
        END;

      END IF;
      --Fechar Cursor
      IF cr_craptdb%ISOPEN THEN
        CLOSE cr_craptdb;
      END IF;
      /* buscar titulo descontado */
      OPEN cr_craptdb (pr_cdcooper => rw_crapcob.cdcooper
                      ,pr_cdbandoc => rw_crapcob.cdbandoc
                      ,pr_nrdctabb => rw_crapcob.nrdctabb
                      ,pr_nrcnvcob => rw_crapcob.nrcnvcob
                      ,pr_nrdconta => rw_crapcob.nrdconta
                      ,pr_nrdocmto => rw_crapcob.nrdocmto
                      ,pr_insittit => 4);
      --Posicionar no proximo registro
      FETCH cr_craptdb INTO rw_craptdb;
      --Se nao encontrar
      IF cr_craptdb%FOUND THEN
        --Fechar Cursor
        CLOSE cr_craptdb;
        -- Verificar se o título foi incluso na versão antiga da funcionalidade do borderô. Se sim, verifica as
        -- regras de data do vencimento sendo feriado ou fds. Se foi incluso na nova versão, então não precisa
        -- passar pelas regras de data.
        IF rw_craptdb.flverbor = 0 THEN
        --Verificar se eh feriado
        vr_dtferiado:= GENE0005.fn_valida_dia_util(pr_cdcooper => rw_crapcob.cdcooper
                                                  ,pr_dtmvtolt => rw_craptdb.dtvencto
                                                  ,pr_tipo     => 'P');
        --Determinar feriado ou fim de semana
        vr_feriafds:= vr_dtferiado <> rw_craptdb.dtvencto;
        /* POSTERGACAO DA DATA */
        IF rw_craptdb.dtvencto < pr_dtmvtolt AND NOT vr_feriafds THEN
          --Nao Descontado
          vr_flgdesct:= FALSE;
        ELSE
          --Descontado
          vr_flgdesct:= TRUE;
        END IF;
        --Nao Descontado
        IF vr_flgdesct THEN
          /* 1o Dia util apos o vencto */
          vr_dtprvenc:= GENE0005.fn_valida_dia_util(pr_cdcooper => rw_crapcob.cdcooper
                                                   ,pr_dtmvtolt => rw_craptdb.dtvencto + 1
                                                   ,pr_tipo     => 'P');
          /*
          Fazer a baixa de desconto de titulo somente se for no 1o. dia util apos o vencimento
          caso contrario da NEXT.
          */
          IF vr_feriafds AND    /* venceu em feriado/fds */
             rw_craptdb.dtvencto <= pr_dtmvtolt AND pr_dtmvtolt <> vr_dtprvenc  THEN
            --Nao Descontado
            vr_flgdesct:= FALSE;
          END IF;
        END IF;
        ELSE
          -- Verificar se o titulo descontado está presente em um contrato de acordo, se sim não realizar a baixa do titulo descontado.
          OPEN cr_acordoctr(pr_cdcooper => rw_craptdb.cdcooper
                           ,pr_nrdconta => rw_craptdb.nrdconta
                           ,pr_nrborder => rw_craptdb.nrborder
                           ,pr_nrtitulo => rw_craptdb.nrtitulo);
          FETCH cr_acordoctr INTO rw_acordoctr;
          IF cr_acordoctr%NOTFOUND THEN
            vr_flgdesct := TRUE;
          END IF;
          CLOSE cr_acordoctr;
        END IF;
        --Se tiver descontado
        IF vr_flgdesct THEN
          /* Grava titulos com desconto para efetuar baixa no final do processo */
          --Montar o indice com 20 posicoes (10 para conta e 10 para contador)
          vr_index_descontar:= lpad(rw_craptdb.nrdconta,10,'0')||
                               lpad(pr_tab_descontar.Count+1,10,'0');

          pr_tab_descontar(vr_index_descontar).nrdconta:= rw_craptdb.nrdconta;
          pr_tab_descontar(vr_index_descontar).dtvencto:= rw_craptdb.dtvencto;
          pr_tab_descontar(vr_index_descontar).nrdocmto:= rw_craptdb.nrdocmto;
          pr_tab_descontar(vr_index_descontar).nrctrlim:= rw_craptdb.nrctrlim;
          pr_tab_descontar(vr_index_descontar).nrborder:= rw_craptdb.nrborder;
          pr_tab_descontar(vr_index_descontar).vlliquid:= rw_craptdb.vlliquid;
          pr_tab_descontar(vr_index_descontar).dtlibbdt:= rw_craptdb.dtlibbdt;
          pr_tab_descontar(vr_index_descontar).cdbandoc:= rw_craptdb.cdbandoc;
          pr_tab_descontar(vr_index_descontar).nrdctabb:= rw_craptdb.nrdctabb;
          pr_tab_descontar(vr_index_descontar).nrcnvcob:= rw_craptdb.nrcnvcob;
          pr_tab_descontar(vr_index_descontar).vltitulo:= pr_vlrpagto;
          pr_tab_descontar(vr_index_descontar).flgregis:= rw_crapcob.flgregis = 1;
          pr_tab_descontar(vr_index_descontar).nrinssac:= rw_craptdb.nrinssac;
        END IF;
      END IF;
      --Fechar Cursor
      IF cr_craptdb%ISOPEN THEN
        CLOSE cr_craptdb;
      END IF;

      vr_flcredit := FALSE; /* Marcar retorno como não creditado */

      -- Utilizar rotina para alimentar pr_tab_lcm_consolidada apenas para títulos Banco do Brasil
      IF (rw_crapcob.cdbandoc = 001 OR pr_vlrpagto >= 250000 ) THEN
        --Nao descontado
        IF NOT vr_flgdesct THEN

          -- pagto de VR Boleto 085 via STR0026
          IF pr_vlrpagto >= 250000 AND
             pr_dsmotivo = '04' AND
             rw_crapcob.cdbandoc = 085 THEN
             vr_cdhistor := 1688;
          END IF;

          -- pagto de VR Boleto 085 via Caixa/Internet/TAA
          IF pr_vlrpagto >= 250000 AND
             pr_dsmotivo <> '04' AND
             rw_crapcob.cdbandoc = 085 THEN
             vr_cdhistor := 1689;
          END IF;

          /* Gerar dados para tt-lcm-consolidada */
          PAGA0001.pc_prep_tt_lcm_consolidada (pr_idtabcob => pr_idtabcob --ROWID da cobranca
                                              ,pr_cdocorre => pr_cdocorre --Codigo Ocorrencia
                                              ,pr_tplancto => 'L'         --Tipo Lancamento
                                              ,pr_vltarifa => pr_vlrpagto --Valor Tarifa
                                              ,pr_cdhistor => vr_cdhistor --Codigo Historico
                                              ,pr_cdmotivo => 0 --Codigo Motivo
                                              ,pr_tab_lcm_consolidada => pr_tab_lcm_consolidada --Tabela de Lancamentos
                                              ,pr_cdcritic => vr_cdcritic   --Codigo Critica
                                              ,pr_dscritic => vr_dscritic); --Descricao Critica
          --Se ocorreu erro
          IF NVL(vr_cdcritic,0) <> 0 OR TRIM(vr_dscritic) IS NOT NULL THEN
            --Levantar Excecao
            RAISE vr_exc_erro;
          END IF;
	        -- Retorno nome do módulo logado - 15/12/2017 - Chamado 779415
	    	  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_processa_liquidacao');
          vr_flcredit := TRUE; /* Marcar retorno como creditado */
        END IF;

      END IF;

      /* Alterar situacao do Titulo */
      BEGIN
        UPDATE crapcob SET crapcob.incobran = 5 /* Liquidado/Pago */
                          ,crapcob.dtdpagto = pr_dtocorre
                          ,crapcob.vldpagto = pr_vlrpagto
                          ,crapcob.cdagepag = pr_cdagepag
                          ,crapcob.cdbanpag = pr_cdbanpag
                          ,crapcob.indpagto = pr_indpagto
                          ,crapcob.vljurpag = pr_vlrjuros
                          ,crapcob.vloutdeb = pr_vloutdeb
                          ,crapcob.vloutcre = pr_vloutcre
                          ,crapcob.nrispbrc = pr_nrispbpg
        WHERE crapcob.ROWID = pr_idtabcob;
      EXCEPTION
        WHEN Others THEN
          -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
          CECRED.pc_internal_exception (pr_cdcooper => rw_crapcob.cdcooper); 
          -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
          vr_cdcritic := 1035;
          vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                           'CRAPCOB(42):' ||
                           ' incobran:'   || '5' ||
                           ', dtdpagto:'  || pr_dtocorre ||
                           ', vldpagto:'  || pr_vlrpagto ||
                           ', cdagepag:'  || pr_cdagepag ||
                           ', cdbanpag:'  || pr_cdbanpag ||
                           ', indpagto:'  || pr_indpagto ||
                           ', vljurpag:'  || pr_vlrjuros ||
                           ', vloutdeb:'  || pr_vloutdeb ||
                           ', vloutcre:'  || pr_vloutcre ||
                           ', nrispbrc:'  || pr_nrispbpg ||
                           ' com ROWID:'  || pr_idtabcob || 
                           '. ' ||sqlerrm;
          --Levantar Excecao
          RAISE vr_exc_erro;
      END;

	  -- Deve ser feito após o  UPDATE da cob devido ao indpagto ser atualizado nesse update
      vr_cdmotivo := 0;

      IF pr_cdbanpag = 85 THEN
         vr_cdmotivo := pr_dsmotivo;
      END IF;
      
      /* Gerar dados para tt-lcm-consolidada */
      PAGA0001.pc_prep_tt_lcm_consolidada (pr_idtabcob => pr_idtabcob --ROWID da cobranca
                                          ,pr_cdocorre => pr_cdocorre --Codigo Ocorrencia
                                          ,pr_tplancto => 'T'         --Tipo Lancamento
                                          ,pr_vltarifa => 0           --Valor Tarifa
                                          ,pr_cdhistor => 0           --Codigo Historico
                                          ,pr_cdmotivo => vr_cdmotivo --Codigo motivo
                                          ,pr_tab_lcm_consolidada => pr_tab_lcm_consolidada --Tabela de Lancamentos
                                          ,pr_cdcritic => vr_cdcritic   --Codigo Critica
                                          ,pr_dscritic => vr_dscritic); --Descricao Critica
      --Se ocorreu erro
      IF NVL(vr_cdcritic,0) <> 0 OR TRIM(vr_dscritic) IS NOT NULL THEN
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
	    -- Retorno nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_processa_liquidacao');
      
      /* Cancela Negativação Serasa */
      OPEN cr_crapcob (pr_rowid => pr_idtabcob);
      --Posicionar no proximo registro
      FETCH cr_crapcob INTO rw_crapcob;
      --Se nao encontrar
      IF cr_crapcob%NOTFOUND THEN
        --Fechar Cursor
        CLOSE cr_crapcob;
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
      --Fechar Cursor
      CLOSE cr_crapcob;
      
      IF rw_crapcob.inserasa IN (1,2,5,7) THEN
         SSPC0002.pc_cancelar_neg_serasa(pr_cdcooper => rw_crapcob.cdcooper,
                                         pr_nrcnvcob => rw_crapcob.nrcnvcob,
                                         pr_nrdconta => rw_crapcob.nrdconta,
                                         pr_nrdocmto => rw_crapcob.nrdocmto,
                                         pr_nrremass => 0,
                                         pr_cdoperad => pr_cdoperad,
                                         pr_cdcritic => vr_cdcritic,
                                         pr_dscritic => vr_dscritic );
        --Se Ocorreu erro
        IF NVL(vr_cdcritic,0) <> 0 OR TRIM(vr_dscritic) IS NOT NULL THEN
          --Levantar Excecao
          RAISE vr_exc_erro;
        END IF;                             
	      -- Retorno nome do módulo logado - 15/12/2017 - Chamado 779415
		    GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_processa_liquidacao');                           
      END IF;
      
      /* Preparar Lote de Retorno Cooperado */
      PAGA0001.pc_prep_retorno_cooperado (pr_idregcob => pr_idtabcob     --ROWID da cobranca
                                         ,pr_cdocorre => 6               --Codigo Ocorrencia
                                         ,pr_dsmotivo => NULL            --Descricao Motivo
                                         ,pr_dtmvtolt => pr_dtmvtolt     --Data Movimento
                                         ,pr_cdoperad => pr_cdoperad     --Codigo Operador
                                         ,pr_nrremret => pr_ret_nrremret --Numero Remessa
                                         ,pr_cdcritic => vr_cdcritic     --Codigo Critica
                                         ,pr_dscritic => vr_dscritic);   --Descricao Critica
      --Se Ocorreu erro
      IF NVL(vr_cdcritic,0) <> 0 OR TRIM(vr_dscritic) IS NOT NULL THEN
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
	    -- Retorno nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_processa_liquidacao');
      --Se banco cobranca igual cooperativa
      IF rw_crapcob.cdbandoc = rw_crapcop.cdbcoctl  THEN
        /* Preparar Lote de Retorno Cooperativa */
        PAGA0001.pc_prepara_retorno_cooperativa (pr_idtabcob => pr_idtabcob   --ROWID da cobranca
                                                ,pr_dtmvtolt => pr_dtmvtolt   --Data Movimento
                                                ,pr_dtocorre => pr_dtocorre   --Data Ocorrencia
                                                ,pr_cdoperad => pr_cdoperad   --Codigo Operador
                                                ,pr_vlabatim => pr_vlabatim   --Valor Abatimento
                                                ,pr_vldescto => pr_vldescto   --Valor Desconto
                                                ,pr_vljurmul => pr_vlrjuros   --Valor juros multa
                                                ,pr_vlrpagto => pr_vlrpagto   --Valor pagamento
																								,pr_vloutcre => pr_vloutcre   --Valor outros creditos
                                                ,pr_flgdesct => vr_flgdesct   --Flag para titulo descontado
                                                ,pr_flcredit => vr_flcredit   --Flag Credito
                                                ,pr_nrretcoo => pr_ret_nrremret --Numero Retorno Cooperativa
                                                ,pr_cdmotivo => pr_dsmotivo   --Codigo Motivo
                                                ,pr_cdocorre => pr_cdocorre   --Codigo Ocorrencia
												,pr_nrispbpg => pr_nrispbpg   --Numero ISPB do pagador
                                                ,pr_cdbanpag => pr_cdbanpag   --Codigo banco pagamento
                                                ,pr_cdagepag => pr_cdagepag   --Codigo Agencia pagamento
                                                ,pr_inestcri => pr_inestcri   --Estado crise
                                                ,pr_cdcritic => vr_cdcritic   --Codigo Critica
                                                ,pr_dscritic => vr_dscritic); --Descricao Critica
        --Se Ocorreu erro
        IF NVL(vr_cdcritic,0) <> 0 OR TRIM(vr_dscritic) IS NOT NULL THEN
          --Levantar Excecao
          RAISE vr_exc_erro;
        END IF;
	      -- Retorno nome do módulo logado - 15/12/2017 - Chamado 779415
		    GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_processa_liquidacao');
      END IF;
      
      --> Realizar baixa operacional
      IF rw_crapcob.nrdident > 0 THEN
        BEGIN
          UPDATE tbcobran_baixa_operac o
             SET o.flgbaixa_efetiva = 1
           WHERE o.nrdident = rw_crapcob.nrdident
             AND o.tpoperac_jd = 'BO';
    EXCEPTION
          WHEN OTHERS THEN
            -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
            CECRED.pc_internal_exception (pr_cdcooper => rw_crapcob.cdcooper);  
            -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
            vr_cdcritic := 1035;
            vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                           'TBCOBRAN_BAIXA_OPERAC(43):' ||
                           ' flgbaixa_efetiva:'  || '1' ||
                           ' com nrdident:'      || rw_crapcob.nrdident ||
                           ', tpoperac_jd:'      || 'BO' ||
                           '. ' ||sqlerrm;
            --Levantar Excecao
            RAISE vr_exc_erro;
        END;        
      END IF;
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);            
    EXCEPTION
      -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
      -- Esta Procedure grava TBGEN
      -- Disparadores: pc_crps538.prc                          - Não grava TBGEN - Necessario Avaliar
      --               pc_crps594.prc                          - Não grava TBGEN - Necessario Avaliar
      --               cxon0014.pc_gera_titulos_iptu           - Não grava TBGEN
      WHEN vr_exc_erro THEN
        pr_cdcritic:= vr_cdcritic;
        pr_dscritic:= vr_dscritic ||
                      vr_dsparame;
        --> Geração de log                             
        pc_controla_log_programa( pr_cdcooper     => rw_crapcob.cdcooper
                                 ,pr_dstiplog     => 'E'              -- E = erro
                                 ,pr_tpocorrencia => 2                -- 1-Erro de negocio/ 2-Erro nao tratado
                                 ,pr_cdmensagem   => pr_cdcritic      -- Codigodo Log
                                 ,pr_dsmensagem   => pr_dscritic      -- Descrição do Log
                                 ,pr_tpexecucao   => CASE pr_indpagto -- 0-COMPE 1-Caixa On-Line 3-Internet 4-TAA
                                                       WHEN 0 THEN 1
                                                       WHEN 1 THEN 3
                                                       WHEN 3 THEN 3
                                                       WHEN 4 THEN 3
                                                       ELSE 0
                                                     END              -- 0-Outro, 1-Batch, 2-Job, 3-Online
                                 );                                                      
      WHEN OTHERS THEN
        -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
        CECRED.pc_internal_exception (pr_cdcooper => rw_crapcob.cdcooper);   
        -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        pr_cdcritic:= 9999;
        pr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic)  || 
                      'PAGA0001.pc_processa_liquidacao. ' || SQLERRM ||
                      '.' || vr_dsparame;	
        --> Geração de log                             
        pc_controla_log_programa( pr_cdcooper     => rw_crapcob.cdcooper
                                 ,pr_dstiplog     => 'E'              -- E = erro
                                 ,pr_tpocorrencia => 2                -- 1-Erro de negocio/ 2-Erro nao tratado
                                 ,pr_cdmensagem   => pr_cdcritic      -- Codigodo Log
                                 ,pr_dsmensagem   => pr_dscritic      -- Descrição do Log
                                 ,pr_tpexecucao   => CASE pr_indpagto -- 0-COMPE 1-Caixa On-Line 3-Internet 4-TAA
                                                       WHEN 0 THEN 1
                                                       WHEN 1 THEN 3
                                                       WHEN 3 THEN 3
                                                       WHEN 4 THEN 3
                                                       ELSE 0
                                                     END              -- 0-Outro, 1-Batch, 2-Job, 3-Online
                                 );                    
    END;
  END pc_processa_liquidacao;

  /* Procedure para realizar lancamento na conta do cooperado */
  PROCEDURE pc_realiza_lancto_cooperado (pr_cdcooper IN INTEGER   --Codigo Cooperativa
                                        ,pr_dtmvtolt IN DATE      --Data Movimento
                                        ,pr_cdagenci IN INTEGER   --Codigo Agencia
                                        ,pr_cdbccxlt IN INTEGER   --Codigo banco caixa
                                        ,pr_nrdolote IN INTEGER   --Numero do Lote
                                        ,pr_cdpesqbb IN VARCHAR2  --Codigo Pesquisa
                                        ,pr_tab_lcm_consolidada IN PAGA0001.typ_tab_lcm_consolidada --Tabela lancamentos consolidada
                                        ,pr_cdcritic OUT INTEGER      --Codigo Critica
                                        ,pr_dscritic OUT VARCHAR2) IS --Descricao Critica

    -- .........................................................................
    --
    --  Programa : pc_realiza_lancto_cooperado           Antigo: b1wgen0089.p/realiza-lancto-cooperado
    --  Sistema  : Cred
    --  Sigla    : PAGA0001
    --  Autor    : Alisson C. Berrido - AMcom
    --  Data     : Julho/2013.                   Ultima atualizacao: 13/04/2017
    --
    --  Dados referentes ao programa:
    --
    --   Frequencia: Sempre que for chamado
    --   Objetivo  : Procedure para realizar lancamento na conta do cooperado
    --
    --   13/04/2017 - Adicionado campo cdpesqbb na record, com o objetivo de
    --                localizar o boleto que gerou o lancamento da tarifa,
    --                caso precise estornar (P340 - Rafael)
    --
    --   11/07/2018 - Inclusão de pc_internal_exception nas exceptions others
    --                e tratamento na validação da tabela vr_tab_erro INC0018458 (AJFink)
    --
    --   15/12/2017 - Incluido nome do módulo logado
    --                No caso de erro de programa gravar tabela especifica de log                     
    --                Ajuste mensagem de erro 
    --                (Belli - Envolti - Chamado 779415)    
    --
    -- .........................................................................    
  BEGIN
    DECLARE
      --Cursores Locais
      CURSOR cr_craplcm (pr_cdcooper IN craplcm.cdcooper%type
                        ,pr_dtmvtolt IN craplcm.dtmvtolt%type
                        ,pr_cdagenci IN craplcm.cdagenci%type
                        ,pr_cdbccxlt IN craplcm.cdbccxlt%type
                        ,pr_nrdolote IN craplcm.nrdolote%type
                        ,pr_nrdctabb IN craplcm.nrdctabb%type
                        ,pr_nrdocmto IN craplcm.nrdocmto%type) IS
        SELECT craplcm.nrseqdig
        FROM craplcm craplcm
        WHERE craplcm.cdcooper = pr_cdcooper
        AND   craplcm.dtmvtolt = pr_dtmvtolt
        AND   craplcm.cdagenci = pr_cdagenci
        AND   craplcm.cdbccxlt = pr_cdbccxlt
        AND   craplcm.nrdolote = pr_nrdolote
        AND   craplcm.nrdctabb = pr_nrdctabb
        AND   craplcm.nrdocmto = pr_nrdocmto
        ORDER BY craplcm.progress_recid DESC;
      rw_craplcm cr_craplcm%ROWTYPE;

      --Variaveis Locais
      vr_index      VARCHAR2(40);
      vr_index_erro PLS_INTEGER;
      vr_nrdocmto   INTEGER;
      vr_intseque   INTEGER:= 1;
      --Variaveis de erro
      vr_des_erro     VARCHAR2(4000);
      vr_cdcritic crapcri.cdcritic%TYPE := null;
      vr_dscritic VARCHAR2(4000) := null;
      --Tabela de memoria de erros
      vr_tab_erro GENE0001.typ_tab_erro;
      --Variavel ROWID craplat
      vr_rowid_craplat ROWID;
      --Variaveis de Excecao
      vr_exc_erro  EXCEPTION;
      vr_exc_saida EXCEPTION;
      --Agrupa os parametros - 15/12/2017 - Chamado 779415 
      vr_dsparame VARCHAR2(4000);
    BEGIN
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_realiza_lancto_cooperado');
      
      --Inicializar variavel retorno erro
      pr_cdcritic:= NULL;
      pr_dscritic:= NULL;
      --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
      vr_dsparame :=  ' pr_cdcooper:' || pr_cdcooper || 
                      ', pr_dtmvtolt:' || pr_dtmvtolt || 
                      ', pr_cdagenci:' || pr_cdagenci || 
                      ', pr_cdbccxlt:' || pr_cdbccxlt || 
                      ', pr_nrdolote:' || pr_nrdolote ||  
                      ', pr_cdpesqbb:' || pr_cdpesqbb; 
      --Verificar se a data existe
      OPEN BTCH0001.cr_crapdat(pr_cdcooper => pr_cdcooper);
      FETCH BTCH0001.cr_crapdat INTO rw_crapdat;
      -- Se não encontrar
      IF BTCH0001.cr_crapdat%NOTFOUND THEN
        -- Fechar o cursor pois haverá raise
        CLOSE BTCH0001.cr_crapdat;
        --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        -- Montar mensagem de critica
        vr_cdcritic := 1; --Registro de controles de data nao encontrado
        vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        RAISE vr_exc_saida;
      ELSE
        -- Apenas fechar o cursor
        CLOSE BTCH0001.cr_crapdat;
      END IF;
      --Percorrer todos os lancamentos
      vr_index:= pr_tab_lcm_consolidada.FIRST;
      WHILE vr_index IS NOT NULL LOOP
        IF pr_tab_lcm_consolidada(vr_index).nrconven = to_number(pr_cdpesqbb) THEN
          --Se for tarifa
          IF pr_tab_lcm_consolidada(vr_index).tplancto <> 'T' THEN /* Tarifa */
            --Buscar lote
            OPEN cr_craplot (pr_cdcooper => pr_cdcooper
                            ,pr_dtmvtolt => pr_dtmvtolt
                            ,pr_cdagenci => pr_cdagenci
                            ,pr_cdbccxlt => pr_cdbccxlt
                            ,pr_nrdolote => pr_nrdolote);
            --Posicionar no primeiro registro
            FETCH cr_craplot INTO rw_craplot;
            --Verificar se encontrou
            IF cr_craplot%NOTFOUND THEN
              --Fechar Cursor
              CLOSE cr_craplot;
              BEGIN
                INSERT INTO craplot
                  (craplot.cdcooper
                  ,craplot.dtmvtolt
                  ,craplot.cdagenci
                  ,craplot.cdbccxlt
                  ,craplot.nrdolote
                  ,craplot.tplotmov)
                VALUES
                  (pr_cdcooper
                  ,pr_dtmvtolt
                  ,pr_cdagenci
                  ,pr_cdbccxlt
                  ,pr_nrdolote
                  ,1)
                RETURNING
                   craplot.cdcooper
                  ,craplot.dtmvtolt
                  ,craplot.cdagenci
                  ,craplot.cdbccxlt
                  ,craplot.nrdolote
                  ,craplot.tplotmov
                  ,craplot.nrseqdig
                  ,craplot.rowid
                INTO
                   rw_craplot.cdcooper
                  ,rw_craplot.dtmvtolt
                  ,rw_craplot.cdagenci
                  ,rw_craplot.cdbccxlt
                  ,rw_craplot.nrdolote
                  ,rw_craplot.tplotmov
                  ,rw_craplot.nrseqdig
                  ,rw_craplot.rowid;
              EXCEPTION
                WHEN OTHERS THEN
                  -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
                  CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
                  -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
                  vr_cdcritic := 1034;
                  vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                             'CRAPLOT(26):' ||	
                             ' cdcooper:'   || pr_cdcooper ||
                             ', dtmvtolt:'  || pr_dtmvtolt ||
                             ', cdagenci:'  || pr_cdagenci ||
                             ', cdbccxlt:'  || pr_cdbccxlt ||
                             ', nrdolote:'  || pr_nrdolote ||
                             ', tplotmov:'  || '1' ||
                             '. ' ||sqlerrm;	
                  --Levantar Excecao
                  RAISE vr_exc_erro;
              END;
            END IF;
            --Fechar Cursor
            IF cr_craplot%ISOPEN THEN
              CLOSE cr_craplot;
            END IF;
            --Numero do Convenio existe
            IF pr_tab_lcm_consolidada(vr_index).nrconven > 0 THEN
              vr_nrdocmto:= pr_tab_lcm_consolidada(vr_index).nrconven;
            ELSE
              vr_nrdocmto:= 1;
            END IF;
            --Iniciar Sequencial
            vr_intseque:= 1;

            WHILE TRUE LOOP
              --Selecionar ultimo lancamento
              OPEN cr_craplcm (pr_cdcooper => rw_craplot.cdcooper
                              ,pr_dtmvtolt => rw_craplot.dtmvtolt
                              ,pr_cdagenci => rw_craplot.cdagenci
                              ,pr_cdbccxlt => rw_craplot.cdbccxlt
                              ,pr_nrdolote => rw_craplot.nrdolote
                              ,pr_nrdctabb => pr_tab_lcm_consolidada(vr_index).nrdconta
                              ,pr_nrdocmto => vr_nrdocmto);
              --Posicionar no primeiro registro
              FETCH cr_craplcm INTO rw_craplcm;
              --Se encontrou
              IF cr_craplcm%FOUND THEN
                --Fechar Cursor
                CLOSE cr_craplcm;
                --Incrementa Sequencia
                vr_intseque:= nvl(vr_intseque,0) + 1;
                --Numero Documento
                vr_nrdocmto:= to_number(pr_tab_lcm_consolidada(vr_index).nrconven ||
                                       gene0002.fn_mask(vr_intseque,'9999'));
                IF vr_intseque > 9999 THEN
                  vr_nrdocmto:= vr_intseque;
                END IF;
                --Proximo registro
                CONTINUE;
              ELSE
                --Fechar Cursor
                CLOSE cr_craplcm;
                --Sair loop
                EXIT;
              END IF;
              --Fechar Cursor
              IF cr_craplcm%ISOPEN THEN
                CLOSE cr_craplcm;
              END IF;
            END LOOP;

            --Criar Lancamento
            BEGIN
             lanc0001.pc_gerar_lancamento_conta(
                  pr_dtmvtolt => rw_craplot.dtmvtolt
                 ,pr_cdagenci => rw_craplot.cdagenci
                 ,pr_cdbccxlt => rw_craplot.cdbccxlt
                 ,pr_nrdolote => rw_craplot.nrdolote
                 ,pr_nrdconta => pr_tab_lcm_consolidada(vr_index).nrdconta
                 ,pr_nrdctabb => pr_tab_lcm_consolidada(vr_index).nrdconta
                 ,pr_nrdctitg => gene0002.fn_mask(pr_tab_lcm_consolidada(vr_index).nrdconta,'99999999')
                 ,pr_nrdocmto => vr_nrdocmto
                 ,pr_cdhistor => pr_tab_lcm_consolidada(vr_index).cdhistor
                 ,pr_nrseqdig => nvl(rw_craplot.nrseqdig,0) + 1
                 ,pr_vllanmto => pr_tab_lcm_consolidada(vr_index).vllancto
                 ,pr_cdpesqbb => nvl(pr_tab_lcm_consolidada(vr_index).cdpesqbb,pr_cdpesqbb) -- (P340 - adicionado campo cdpesqbb na record)
                 ,pr_cdcooper => pr_tab_lcm_consolidada(vr_index).cdcooper
                 ,pr_hrtransa => gene0002.fn_busca_time
                 ,pr_tab_retorno => vr_tab_retorno
                 ,pr_incrineg => vr_incrineg
                 ,pr_cdcritic => vr_cdcritic
                 ,pr_dscritic => vr_dscritic
                 );
              rw_craplcm.nrseqdig := nvl(rw_craplot.nrseqdig,0) + 1; 
              
              IF nvl(vr_cdcritic,0) > 0 OR 
                trim(vr_dscritic) IS NOT NULL THEN
                      
                --Levantar Excecao
                RAISE vr_exc_erro;   
              END IF;
                 
            EXCEPTION
              WHEN vr_exc_erro THEN
                cecred.pc_internal_exception(pr_cdcooper => pr_cdcooper); --INC0018458
                RAISE vr_exc_erro;
                
              WHEN OTHERS THEN
                -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
                CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);   
                -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
                vr_cdcritic := 1034;
                vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                             'CRAPLCM(27):' ||	
                             ' dtmvtolt:'   || rw_craplot.dtmvtolt ||
                             ', cdagenci:'  || rw_craplot.cdagenci ||
                             ', cdbccxlt:'  || rw_craplot.cdbccxlt ||
                             ', nrdolote:'  || rw_craplot.nrdolote ||
                             ', nrdconta:'  || pr_tab_lcm_consolidada(vr_index).nrdconta ||
                             ', nrdctabb:'  || pr_tab_lcm_consolidada(vr_index).nrdconta ||
                             ', nrdctitg:'  || gene0002.fn_mask(pr_tab_lcm_consolidada(vr_index).nrdconta,'99999999') ||
                             ', nrdocmto:'  || vr_nrdocmto ||
                             ', cdhistor:'  || pr_tab_lcm_consolidada(vr_index).cdhistor ||
                             ', nrseqdig:'  || nvl(rw_craplot.nrseqdig,0) || ' + 1 ' ||
                             ', vllanmto:'  || pr_tab_lcm_consolidada(vr_index).vllancto ||
                             ', cdpesqbb:'  || nvl(pr_tab_lcm_consolidada(vr_index).cdpesqbb,pr_cdpesqbb) ||
                             ', cdcooper:'  || pr_tab_lcm_consolidada(vr_index).cdcooper ||
                             ', hrtransa:'  || gene0002.fn_busca_time ||
                             '. ' ||sqlerrm;	
                --Levantar Excecao
                RAISE vr_exc_erro;
            END;
            --Atualizar Lote
            BEGIN
              UPDATE craplot SET craplot.qtinfoln = nvl(craplot.qtinfoln,0) + 1
                                ,craplot.qtcompln = nvl(craplot.qtcompln,0) + 1
                                ,craplot.vlinfodb = nvl(craplot.vlinfodb,0) + pr_tab_lcm_consolidada(vr_index).vllancto
                                ,craplot.vlcompdb = nvl(craplot.vlcompdb,0) + pr_tab_lcm_consolidada(vr_index).vllancto
                                ,craplot.nrseqdig = nvl(rw_craplcm.nrseqdig,0)
              WHERE craplot.rowid = rw_craplot.rowid;
            EXCEPTION
              WHEN OTHERS THEN
                -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
                CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper); 
                -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
                vr_cdcritic := 1035;
                vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                             'CRAPLOT(44):'  ||	
                             ' qtinfoln:'    || 'nvl(craplot.qtinfoln,0) + 1' ||
                             ', qtcompln:'   || 'nvl(craplot.qtcompln,0) + 1' ||
                             ', vlinfodb:'   || 'nvl(craplot.vlinfodb,0) + ' || pr_tab_lcm_consolidada(vr_index).vllancto ||
                             ', vlcompdb:'   || 'nvl(craplot.vlcompdb,0) + ' || pr_tab_lcm_consolidada(vr_index).vllancto ||
                             ', nrseqdig:'   || 'nvl(rw_craplcm.nrseqdig,0)' ||
                             ' com craplot:' || rw_craplot.rowid ||
                             '. ' ||sqlerrm;
                --Levantar Excecao
                RAISE vr_exc_erro; --INC0018458
            END;
          ELSE

            -- Verifica se a data esta cadastrada
            OPEN BTCH0001.cr_crapdat(pr_cdcooper => pr_cdcooper);
            FETCH BTCH0001.cr_crapdat INTO rw_crapdat;
            -- Se nao encontrar
            IF BTCH0001.cr_crapdat%NOTFOUND THEN
              -- Fechar o cursor pois havera raise
              CLOSE BTCH0001.cr_crapdat;
              --Proximo registro
              CONTINUE;
            ELSE
              -- Apenas fechar o cursor
              CLOSE BTCH0001.cr_crapdat;
            END IF;

            --Criar lancamento automatico
            TARI0001.pc_cria_lan_auto_tarifa (pr_cdcooper => pr_cdcooper           --Codigo Cooperativa
                                             ,pr_nrdconta => pr_tab_lcm_consolidada(vr_index).nrdconta   --Numero da Conta
                                             ,pr_dtmvtolt => rw_crapdat.dtmvtolt   --Data Lancamento
                                             ,pr_cdhistor => pr_tab_lcm_consolidada(vr_index).cdhistor   --Codigo Historico
                                             ,pr_vllanaut => pr_tab_lcm_consolidada(vr_index).vllancto   --Valor lancamento automatico
                                             ,pr_cdoperad => '1'                   --Codigo Operador
                                             ,pr_cdagenci => 1                     --Codigo Agencia
                                             ,pr_cdbccxlt => pr_cdbccxlt           --Codigo banco caixa
                                             ,pr_nrdolote => pr_nrdolote           --Numero do lote
                                             ,pr_tpdolote => 1                     --Tipo do lote
                                             ,pr_nrdocmto => 0                     --Numero do documento
                                             ,pr_nrdctabb => pr_tab_lcm_consolidada(vr_index).nrdconta   --Numero da conta
                                             ,pr_nrdctitg => gene0002.fn_mask(pr_tab_lcm_consolidada(vr_index).nrdconta,'99999999')   --Numero da conta integracao
                                             ,pr_cdpesqbb => pr_tab_lcm_consolidada(vr_index).cdpesqbb                  --Codigo pesquisa
                                             ,pr_cdbanchq => 0                     --Codigo Banco Cheque
                                             ,pr_cdagechq => 0                     --Codigo Agencia Cheque
                                             ,pr_nrctachq => 0                     --Numero Conta Cheque
                                             ,pr_flgaviso => FALSE                 --Flag aviso
                                             ,pr_tpdaviso => 0                     --Tipo aviso
                                             ,pr_cdfvlcop => pr_tab_lcm_consolidada(vr_index).cdfvlcop   --Codigo cooperativa
                                             ,pr_inproces => rw_crapdat.inproces   --Indicador processo
                                             ,pr_rowid_craplat => vr_rowid_craplat --Rowid do lancamento tarifa
                                             ,pr_tab_erro => vr_tab_erro           --Tabela retorno erro
                                             ,pr_cdcritic => vr_cdcritic           --Codigo Critica
                                             ,pr_dscritic => vr_dscritic);         --Descricao Critica
	          -- Retorno nome do módulo logado - 15/12/2017 - Chamado 779415
		        GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_realiza_lancto_cooperado');
            --Se ocorreu erro
            IF NVL(vr_cdcritic,0) <> 0 OR TRIM(vr_dscritic) IS NOT NULL OR nvl(vr_tab_erro.count,0) <> 0 THEN
              --Se retornou erro

              -- Caso houver erro, envia email
              IF vr_tab_erro.count > 0 THEN
                FOR i IN 1..vr_tab_erro.last LOOP
                BEGIN
                  INSERT INTO crapcol
                    (crapcol.cdcooper
                    ,crapcol.nrdconta
                    ,crapcol.nrdocmto
                    ,crapcol.nrcnvcob
                    ,crapcol.dslogtit
                    ,crapcol.cdoperad
                    ,crapcol.dtaltera
                    ,crapcol.hrtransa)
                  VALUES
                    (pr_cdcooper
                    ,pr_tab_lcm_consolidada(vr_index).nrdconta
                    ,0
                    ,pr_tab_lcm_consolidada(vr_index).nrconven
                      ,TRIM(SUBSTR(TRIM(vr_tab_erro(i).dscritic),1,350))
                    ,'TARIFA'
                    ,SYSDATE
                    ,GENE0002.fn_busca_time);
                EXCEPTION
                  WHEN OTHERS THEN
                    -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
                    CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);   
                    -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
                    vr_cdcritic := 1034;
                    vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                             'CRAPCOL(28):' ||
                             ' cdcooper:'  || pr_cdcooper ||
                             ', nrdconta:' || pr_tab_lcm_consolidada(vr_index).nrdconta ||
                             ', nrdocmto:' || '0' ||
                             ', nrcnvcob:' || pr_tab_lcm_consolidada(vr_index).nrconven ||
                             ', dslogtit:' || vr_tab_erro(vr_index_erro).dscritic ||
                             ', cdoperad:' || 'TARIFA' ||
                             ', dtaltera:' || 'SYSDATE' ||
                             ', hrtransa:' || GENE0002.fn_busca_time ||
                             '. ' ||sqlerrm;
                    --Levantar Excecao
                    RAISE vr_exc_erro;
                END;
                END LOOP;
              END IF;

              IF NVL(vr_cdcritic,0) <> 0 OR TRIM(vr_dscritic) IS NOT NULL THEN
                BEGIN
                  INSERT INTO crapcol
                    (crapcol.cdcooper
                    ,crapcol.nrdconta
                    ,crapcol.nrdocmto
                    ,crapcol.nrcnvcob
                    ,crapcol.dslogtit
                    ,crapcol.cdoperad
                    ,crapcol.dtaltera
                    ,crapcol.hrtransa)
                  VALUES
                    (pr_cdcooper
                    ,pr_tab_lcm_consolidada(vr_index).nrdconta
                    ,0
                    ,pr_tab_lcm_consolidada(vr_index).nrconven
                    ,TRIM(SUBSTR(TRIM(NVL(vr_cdcritic,0)||'-'||TRIM(vr_dscritic)),1,350))
                    ,'TARIFA2'
                    ,SYSDATE
                    ,GENE0002.fn_busca_time);
                EXCEPTION
                  WHEN OTHERS THEN
                    cecred.pc_internal_exception(pr_cdcooper => pr_cdcooper); --INC0018458
                    vr_cdcritic:= 0;
                    vr_dscritic:= 'Erro ao inserir na tabela crapcol2. '||sqlerrm;
                    --Levantar Excecao
                    RAISE vr_exc_erro;
                END;
              END IF;
              
            END IF;
          END IF;
        END IF;
        --Buscar proximo registro
        vr_index:= pr_tab_lcm_consolidada.NEXT(vr_index);
      END LOOP;
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);
    EXCEPTION
      -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
      -- Disparadores: cxon0014.pc_gera_titulos_iptu           - Não grava TBGEN
      --               SSPC0002.pc_negativa_serasa             - Não grava TBGEN
      --               pc_crps330.prc                          - Não grava TBGEN - Necessario Avaliar
      --               pc_crps331.prc                          - Não grava TBGEN - Necessario Avaliar
      --               pc_crps538.prc                          - Não grava TBGEN - Necessario Avaliar
      --               pc_crps594.prc                          - Não grava TBGEN - Necessario Avaliar
      --               pc_crps693.prc                          - Não grava TBGEN - Necessario Avaliar
      WHEN vr_exc_saida THEN
        -- Excluido comando NULL;  - 15/12/2017 - Chamado 779415
	      -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		    GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);
      WHEN vr_exc_erro THEN
        pr_cdcritic:= vr_cdcritic;
        pr_dscritic:= vr_dscritic ||
                      vr_dsparame;
      WHEN OTHERS THEN
        -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
        CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper); 
        -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        pr_cdcritic:= 9999;
        pr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic) || 
                      'PAGA0001.pc_realiza_lancto_cooperado. ' || SQLERRM ||
                      '.' || vr_dsparame;	
    END;
  END pc_realiza_lancto_cooperado;

  /* Procedure para Criar log de Cobranca */
  PROCEDURE pc_cria_log_cobranca(pr_idtabcob IN ROWID       --ROWID da Cobranca
                                ,pr_cdoperad IN VARCHAR2    --Operador
                                ,pr_dtmvtolt IN DATE        --Data movimento
                                ,pr_dsmensag IN VARCHAR2    --Descricao Mensagem
                                ,pr_des_erro OUT VARCHAR2   --Indicador erro
                                ,pr_dscritic OUT VARCHAR2) IS --Descricao erro
    -- .........................................................................
    --
    --  Programa : pc_cria_log_cobranca           Antigo: b1wgen0088.p/cria-log-cobranca
    --  Sistema  : Cred
    --  Sigla    : PAGA0001
    --  Autor    : Alisson C. Berrido - AMcom
    --  Data     : Julho/2013.                   Ultima atualizacao: 15/12/2017
    --
    --  Dados referentes ao programa:
    --
    --   Frequencia: Sempre que for chamado
    --   Objetivo  : Procedure para Criar log de Cobranca
    --
    --               15/12/2017 - Incluido nome do módulo logado
    --                            No caso de erro de programa gravar tabela especifica de log                     
    --                            Ajuste mensagem de erro 
    --                           (Belli - Envolti - Chamado 779415)    
    --
  BEGIN
    DECLARE
      --Selecionar informacoes cobranca
      CURSOR cr_crapcob (pr_rowid IN ROWID) IS
        SELECT crapcob.cdcooper
              ,crapcob.nrdconta
              ,crapcob.nrdocmto
              ,crapcob.nrcnvcob
        FROM crapcob
        WHERE crapcob.ROWID = pr_rowid;
      rw_crapcob cr_crapcob%ROWTYPE;

      --Variaveis de erro
      vr_des_erro     VARCHAR2(4000);
      vr_cdcritic crapcri.cdcritic%TYPE;
      vr_dscritic VARCHAR2(4000);
      --Tipo de registro para datas
      rw_crapdat BTCH0001.cr_crapdat%ROWTYPE;
      --Registro de memoria do tipo lancamento
      rw_craplcm craplcm%ROWTYPE;
      --Variaveis de Excecao
      vr_exc_erro    EXCEPTION;
      vr_exc_proximo EXCEPTION;
      --Agrupa os parametros - 15/12/2017 - Chamado 779415 
      vr_dsparame VARCHAR2(4000);
    BEGIN
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_cria_log_cobranca');
      
      --Inicializa variaveis erro
      pr_des_erro:= 'OK';
      pr_dscritic:= NULL;
      --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
      vr_dsparame :=  ' pr_idtabcob:' || pr_idtabcob || 
                      ', pr_cdoperad:' || pr_cdoperad || 
                      ', pr_dtmvtolt:' || pr_dtmvtolt || 
                      ', pr_dsmensag:' || pr_dsmensag;

      --Selecionar informacoes cobranca
      OPEN cr_crapcob (pr_rowid => pr_idtabcob);
      --Posicionar no proximo registro
      FETCH cr_crapcob INTO rw_crapcob;
      --Se encontrar
      IF cr_crapcob%FOUND THEN
        --Fechar Cursor
        CLOSE cr_crapcob;
        --Inserir log
        BEGIN
          INSERT INTO crapcol
            (crapcol.cdcooper
            ,crapcol.nrdconta
            ,crapcol.nrdocmto
            ,crapcol.nrcnvcob
            ,crapcol.dslogtit
            ,crapcol.cdoperad
            ,crapcol.dtaltera
            ,crapcol.hrtransa)
          VALUES
            (rw_crapcob.cdcooper
            ,rw_crapcob.nrdconta
            ,rw_crapcob.nrdocmto
            ,rw_crapcob.nrcnvcob
            ,pr_dsmensag
            ,pr_cdoperad
            ,SYSDATE
            ,GENE0002.fn_busca_time);
        EXCEPTION
          WHEN OTHERS THEN
            -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
            CECRED.pc_internal_exception (pr_cdcooper => rw_crapcob.cdcooper);   
            -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
            vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => 1034) ||
                             'CRAPCOL(29):' ||
                             ' cdcooper:'  || rw_crapcob.cdcooper ||
                             ', nrdconta:' || rw_crapcob.nrdconta ||
                             ', nrdocmto:' || rw_crapcob.nrdocmto ||
                             ', nrcnvcob:' || rw_crapcob.nrcnvcob ||
                             ', dslogtit:' || pr_dsmensag ||
                             ', cdoperad:' || pr_cdoperad ||
                             ', dtaltera:' || 'SYSDATE' ||
                             ', hrtransa:' || GENE0002.fn_busca_time ||
                             '. ' ||sqlerrm;
            --Levantar Excecao
            RAISE vr_exc_erro;
        END;
      END IF;
      IF cr_crapcob%ISOPEN THEN
        --Fechar Cursor
        CLOSE cr_crapcob;
      END IF;
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
	    GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);
    EXCEPTION
      -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
      -- Quem grava a TBGEN é a Procedure pc_proc_liquid_apos_baixa	
      -- Disparadores: paga0001.pc_proc_motivos_retorno        - Não grava TBGEN  
      --               São "Mais" 22 fontes então precisa mapear cada 
      --               um deles78 PONTOS de dispare desta rotina
      WHEN vr_exc_erro THEN
        pr_des_erro:= 'NOK';
        pr_dscritic:= vr_dscritic ||
                      vr_dsparame;
      WHEN OTHERS THEN
        -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
        CECRED.pc_internal_exception (pr_cdcooper => rw_crapcob.cdcooper);   
        -- Erro
        pr_des_erro:= 'NOK';
        -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        pr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => 9999) ||
                      '.PAGA0001.pc_cria_log_cobranca. ' || SQLERRM
                      ||'. '||vr_dsparame;
    END;
  END pc_cria_log_cobranca;



  /* Procedure para preparar a remessa para banco */
  PROCEDURE pc_prep_remessa_banco (pr_cdcooper IN crapcob.cdcooper%TYPE  --Codigo Cooperativa
                                  ,pr_nrcnvcob IN crapcob.nrcnvcob%TYPE  --Numero Convenio
                                  ,pr_dtmvtolt IN crapdat.dtmvtolt%TYPE  --Data movimento
                                  ,pr_cdoperad IN crapope.cdoperad%TYPE  --Codigo Operador
																	,pr_idregcob IN ROWID DEFAULT '0'      --ROWID da cobranca
                                  ,pr_nrremret OUT INTEGER               --Numero Remessa Retorno
                                  ,pr_rowid_ret OUT ROWID                --ROWID Remessa Retorno
                                  ,pr_nrseqreg OUT INTEGER               --Numero Sequencial
                                  ,pr_cdcritic OUT INTEGER               --Codigo Critica
                                  ,pr_dscritic OUT VARCHAR2) IS          --Descricao Critica
    -- .........................................................................
    --
    --  Programa : pc_prep_remessa_banco           Antigo: b1wgen0088.p/prep-remessa-banco
    --  Sistema  : Cred
    --  Sigla    : PAGA0001
    --  Autor    : Alisson C. Berrido - AMcom
    --  Data     : Novembro/2013.                   Ultima atualizacao: 05/06/2018
    --
    --  Dados referentes ao programa:
    --
    --   Frequencia: Sempre que for chamado
    --   Objetivo  : Procedure para preparar remessa para banco
	--	   
    --               15/12/2017 - Incluido nome do módulo logado
    --                            No caso de erro de programa gravar tabela especifica de log                     
    --                            Ajuste mensagem de erro 
    --                           (Belli - Envolti - Chamado 779415)    
    --
		--   Alteração : 03/05/2018 - Ajustes para atender ao PRJ352
  BEGIN
    DECLARE
      -- Selecionar controle retorno titulos bancarios
      CURSOR cr_crapcre (pr_cdcooper IN crapcre.cdcooper%type
                        ,pr_nrcnvcob IN crapcre.nrcnvcob%type
                        ,pr_dtmvtolt IN crapcre.dtmvtolt%type
                        ,pr_intipmvt IN crapcre.intipmvt%type
                        ,pr_flgproce IN crapcre.flgproce%type) IS
        SELECT crapcre.nrremret
              ,crapcre.rowid
        FROM crapcre
        WHERE crapcre.cdcooper = pr_cdcooper
        AND   crapcre.nrcnvcob = pr_nrcnvcob
        AND   crapcre.dtmvtolt = pr_dtmvtolt
        AND   crapcre.intipmvt = pr_intipmvt
        AND   crapcre.flgproce = pr_flgproce
        ORDER BY crapcre.progress_recid DESC;
      rw_crapcre cr_crapcre%ROWTYPE;
      -- Selecionar controle retorno titulos bancarios
      CURSOR cr_crapcre2 (pr_cdcooper IN crapcre.cdcooper%type
                         ,pr_nrcnvcob IN crapcre.nrcnvcob%type
                         ,pr_intipmvt IN crapcre.intipmvt%type) IS
        SELECT crapcre.nrremret
              ,crapcre.rowid
        FROM crapcre
        WHERE crapcre.cdcooper = pr_cdcooper
        AND   crapcre.nrcnvcob = pr_nrcnvcob
        AND   crapcre.intipmvt = pr_intipmvt
        ORDER BY crapcre.progress_recid DESC;
      rw_crapcre2 cr_crapcre2%ROWTYPE;
      --Encontrar ultima remessa
      CURSOR cr_craprem (pr_cdcooper IN craprem.cdcooper%type
                        ,pr_nrcnvcob IN craprem.nrcnvcob%type
                        ,pr_nrremret IN craprem.nrremret%type) IS
        SELECT craprem.nrseqreg
        FROM craprem
        WHERE craprem.cdcooper = pr_cdcooper
        AND   craprem.nrcnvcob = pr_nrcnvcob
        AND   craprem.nrremret = pr_nrremret
        ORDER BY craprem.progress_recid DESC;
      rw_craprem cr_craprem%ROWTYPE;
      --Variaveis Locais
      vr_nmarquiv VARCHAR2(100);
      --Variaveis de erro
      vr_des_erro VARCHAR2(4000);
      vr_cdcritic crapcri.cdcritic%TYPE;
      vr_dscritic VARCHAR2(4000);
			vr_dtmvtolt DATE;
      --Variaveis de Excecao
      vr_exc_erro EXCEPTION;
      --Trata othres interno - 15/12/2017 - Chamado 779415 
      vr_exc_others_erro EXCEPTION;
      --Agrupa os parametros - 15/12/2017 - Chamado 779415 
      vr_dsparame VARCHAR2(4000);
    BEGIN
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_prep_remessa_banco');
      --Inicializar variaveis retorno
      pr_cdcritic:= NULL;
      pr_dscritic:= NULL;
      --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
      vr_dsparame :=  ' pr_cdcooper:' || pr_cdcooper || 
                      ', pr_nrcnvcob:' || pr_nrcnvcob || 
                      ', pr_dtmvtolt:' || pr_dtmvtolt || 
                      ', pr_cdoperad:' || pr_cdoperad;   

			IF pr_idregcob <> '0' THEN
				--Selecionar registro cobranca
				OPEN cr_crapcob (pr_rowid => pr_idregcob);
				--Posicionar no proximo registro
				FETCH cr_crapcob INTO rw_crapcob;
				--Se nao encontrar
				IF cr_crapcob%FOUND THEN
					-- Valida se usa o serviço de protesto do IEPTB, se usar, valida o horário para gerar na data de movimento correta -- PRJ352
					IF rw_crapcob.cdbandoc = 85 AND
						 rw_crapcob.insrvprt = 1 THEN
						--
						vr_dtmvtolt := cobr0011.fn_busca_dtmvtolt(pr_cdcooper => rw_crapcob.cdcooper);
						--
					ELSE
						--
						vr_dtmvtolt := pr_dtmvtolt;
						--
					END IF;
					--
				END IF;
				--Fechar Cursor
				CLOSE cr_crapcob;
				--
			ELSE
				--
				vr_dtmvtolt := pr_dtmvtolt;
				--
			END IF;

      --Selecionar Dados da Cooperativa
      OPEN cr_crapcop(pr_cdcooper => pr_cdcooper);
      FETCH cr_crapcop INTO rw_crapcop;
      --Se nao encontrou
      IF cr_crapcop%NOTFOUND THEN
        --Fechar Cursor
        CLOSE cr_crapcop;
        --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        vr_cdcritic := 1070; --Registro de cooperativa nao encontrado
        vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
      --Fechar Cursor
      CLOSE cr_crapcop;

      /*** Localiza o ultimo CRE desta data ***/
      OPEN cr_crapcre (pr_cdcooper => pr_cdcooper
                      ,pr_nrcnvcob => pr_nrcnvcob
                      ,pr_dtmvtolt => vr_dtmvtolt --pr_dtmvtolt
                      ,pr_intipmvt => 1
                      ,pr_flgproce => 0);
      --Posicionar no proximo registro
      FETCH cr_crapcre INTO rw_crapcre;
      --Se nao encontrar
      IF cr_crapcre%NOTFOUND THEN
        --Fechar Cursor
        CLOSE cr_crapcre;
        /***** Localiza ultima sequencia *****/
        OPEN cr_crapcre2 (pr_cdcooper => pr_cdcooper
                         ,pr_nrcnvcob => pr_nrcnvcob
                         ,pr_intipmvt => 1);
        --Posicionar no proximo registro
        FETCH cr_crapcre2 INTO rw_crapcre;
        --Se nao encontrou
        IF cr_crapcre2%NOTFOUND THEN
          --Numero remessa
          pr_nrremret:= 1;
        ELSE
          pr_nrremret:= nvl(rw_crapcre.nrremret,0) + 1;
        END IF;
        --Fechar Cursor
        CLOSE cr_crapcre2;

        --Montar Nome Arquivo
        vr_nmarquiv:= 'CBR'||to_char(vr_dtmvtolt/*pr_dtmvtolt*/,'MMDD')||
                      '_'||gene0002.fn_mask(rw_crapcop.cdagectl,'9999')||
                      '_'||gene0002.fn_mask(pr_nrcnvcob,'9999999')||
                      '_'||gene0002.fn_mask(pr_nrremret,'99999')||'.REM';
        --Criar Controle
        BEGIN
          INSERT INTO crapcre
             (crapcre.cdcooper
             ,crapcre.nrcnvcob
             ,crapcre.dtmvtolt
             ,crapcre.nrremret
             ,crapcre.intipmvt
             ,crapcre.nmarquiv
             ,crapcre.flgproce
             ,crapcre.cdoperad
             ,crapcre.dtaltera
             ,crapcre.hrtranfi)
          VALUES
             (pr_cdcooper
             ,pr_nrcnvcob
             ,vr_dtmvtolt -- pr_dtmvtolt
             ,pr_nrremret
             ,1
             ,vr_nmarquiv
             ,0
             ,pr_cdoperad
             ,pr_dtmvtolt
             ,gene0002.fn_busca_time)
           RETURNING crapcre.nrremret
                    ,crapcre.rowid
           INTO pr_nrremret
               ,pr_rowid_ret;
        EXCEPTION
          WHEN OTHERS THEN
            -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
            CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);
            -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
            vr_cdcritic := 1034;
            vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                             'CRAPCRE(30):' ||	
                             ' cdcooper:'   || pr_cdcooper ||
                             ', nrcnvcob:'  || pr_nrcnvcob ||
                             ', dtmvtolt:'  || pr_dtmvtolt ||
                             ', nrremret:'  || pr_nrremret ||
                             ', intipmvt:'  || '1' ||
                             ', nmarquiv:'  || vr_nmarquiv ||
                             ', flgproce:'  || '0' ||
                             ', cdoperad:'  || pr_cdoperad ||
                             ', dtaltera:'  || pr_dtmvtolt ||
                             ', hrtranfi:'  || gene0002.fn_busca_time ||
                             '. ' ||sqlerrm;	
            --Levantar Excecao
            RAISE vr_exc_others_erro;
        END;
      ELSE
        --Numero Remessa retorno
        pr_nrremret:= rw_crapcre.nrremret;
        pr_rowid_ret:= rw_crapcre.rowid;
      END IF;
      --Fechar Cursor
      IF cr_crapcre%ISOPEN THEN
        CLOSE cr_crapcre;
      END IF;

      --Encontrar ultima remessa
      OPEN cr_craprem (pr_cdcooper => pr_cdcooper
                      ,pr_nrcnvcob => pr_nrcnvcob
                      ,pr_nrremret => pr_nrremret);
      FETCH cr_craprem INTO rw_craprem;
      --Se encontrou
      IF cr_craprem%FOUND THEN
        --Numero Sequencial
        pr_nrseqreg:= rw_craprem.nrseqreg;
      ELSE
        pr_nrseqreg:= 1;
      END IF;
      --Fechar Cursor
      CLOSE cr_craprem;
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);
    EXCEPTION
      -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
      -- Disparadores: cobr0005.                              - Necessario Avaliar
      --               cobr0007.                              - Necessario Avaliar
      --               cobr0007.                              - Necessario Avaliar
      --               cobr0007.                              - Necessario Avaliar
      --               cobr0007.                              - Necessario Avaliar
      --               cobr0007.                              - Necessario Avaliar
      --               cobr0007.                              - Necessario Avaliar
      --               cobr0007.                              - Necessario Avaliar
      --               cobr0007.                              - Necessario Avaliar
      --               cobr0007.                              - Necessario Avaliar
      --               cobr0007.                              - Necessario Avaliar
      --               cobr0007.                              - Necessario Avaliar
      --               cobr0007.                              - Necessario Avaliar
      --               paga0002.                              - Necessario Avaliar
      --               paga0002.                              - Necessario Avaliar
      --               paga0002.                              - Necessario Avaliar
      --               paga0002.                              - Necessario Avaliar
      --               paga0002.                              - Necessario Avaliar
      --               paga0002.                              - Necessario Avaliar
      WHEN vr_exc_erro THEN
        pr_cdcritic:= vr_cdcritic;
        pr_dscritic:= vr_dscritic;
      WHEN vr_exc_others_erro THEN
        pr_cdcritic:= vr_cdcritic;
        pr_dscritic:= vr_dscritic ||
                      vr_dsparame;	
        --> Geração de log - 15/12/2017 - Chamado 779415                                           
        pc_controla_log_programa( pr_cdcooper      => pr_cdcooper
                                 ,pr_dstiplog      => 'E' -- Tipo de Log - E = erro
                                 ,pr_tpocorrencia  => 2
                                 ,pr_cdmensagem    => pr_cdcritic -- Codigo do Log
                                 ,pr_dsmensagem    => pr_dscritic
                                );     	
      WHEN OTHERS THEN
        -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
        CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);   
        -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        pr_cdcritic:= 9999;
        pr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic)|| 
                      'PAGA0001.pc_prep_remessa_banco. ' || SQLERRM  ||
                      '.' || vr_dsparame;	
        --> Geração de log - 15/12/2017 - Chamado 779415                                           
        pc_controla_log_programa( pr_cdcooper      => pr_cdcooper
                                 ,pr_dstiplog      => 'E' -- Tipo de Log - E = erro
                                 ,pr_tpocorrencia  => 2
                                 ,pr_cdmensagem    => pr_cdcritic -- Codigo do Log
                                 ,pr_dsmensagem    => pr_dscritic
                                );     	
    END;
  END pc_prep_remessa_banco;

  /* Procedure para criar tabela remessa */
  PROCEDURE pc_cria_tab_remessa (pr_idregcob IN ROWID            --ROWID da cobranca
                                ,pr_nrremret IN INTEGER          --Numero Remessa
                                ,pr_nrseqreg IN INTEGER          --Numero Sequencial
                                ,pr_cdocorre IN INTEGER          --Codigo Ocorrencia
                                ,pr_cdmotivo IN VARCHAR2             --Codigo Motivo
                                ,pr_dtdprorr IN DATE                 --Data Prorrogacao
                                ,pr_vlabatim IN NUMBER               --Valor Abatimento
                                ,pr_cdoperad IN crapope.cdoperad%TYPE --Codigo Operador
                                ,pr_dtmvtolt IN crapdat.dtmvtolt%TYPE --Data Movimento
                                ,pr_cdcritic OUT INTEGER            --Codigo Critica
                                ,pr_dscritic OUT VARCHAR2) IS      --Descricao Critica
    -- .........................................................................
    --
    --  Programa : pc_cria_tab_remessa           Antigo: b1wgen0088.p/cria-tab-remessa
    --  Sistema  : Cred
    --  Sigla    : PAGA0001
    --  Autor    : Alisson C. Berrido - AMcom
    --  Data     : Novembro/2013.                   Ultima atualizacao: 15/12/2017
    --
    --  Dados referentes ao programa:
    --
    --   Frequencia: Sempre que for chamado
    --   Objetivo  : Procedure para criat tabela remessa para banco
	--												   
    --               15/12/2017 - Incluido nome do módulo logado
    --                            No caso de erro de programa gravar tabela especifica de log                     
    --                            Ajuste mensagem de erro 
    --                           (Belli - Envolti - Chamado 779415) 
    --
		--   Alterações: 03/05/2018 - Ajustes para atender ao PRJ352
		--
  BEGIN
    DECLARE
      --Variaveis Locais
      --Variaveis de erro
      vr_des_erro     VARCHAR2(4000);
      vr_cdcritic crapcri.cdcritic%TYPE;
      vr_dscritic VARCHAR2(4000);
      --Variaveis de Excecao
      vr_exc_erro EXCEPTION;
      --Agrupa os parametros - 15/12/2017 - Chamado 779415 
      vr_dsparame VARCHAR2(4000);
    BEGIN
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_cria_tab_remessa');
      --Inicializar variaveis retorno
      pr_cdcritic:= NULL;
      pr_dscritic:= NULL;
      --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
      vr_dsparame :=  ' pr_idregcob:' || pr_idregcob || 
                      ', pr_nrremret:' || pr_nrremret || 
                      ', pr_nrseqreg:' || pr_nrseqreg || 
                      ', pr_cdocorre:' || pr_cdocorre || 
                      ', pr_cdmotivo:' || pr_cdmotivo || 
                      ', pr_dtdprorr:' || pr_dtdprorr || 
                      ', pr_vlabatim:' || pr_vlabatim || 
                      ', pr_cdoperad:' || pr_cdoperad || 
                      ', pr_dtmvtolt:' || pr_dtmvtolt; 
      --Selecionar registro cobranca
      OPEN cr_crapcob (pr_rowid => pr_idregcob);
      --Posicionar no proximo registro
      FETCH cr_crapcob INTO rw_crapcob;
      --Se nao encontrar
      IF cr_crapcob%FOUND THEN
        --Fechar Cursor
        CLOSE cr_crapcob;
        --Inserir Remessa
        BEGIN
          INSERT INTO CRAPREM
             (craprem.cdcooper
             ,craprem.nrcnvcob
             ,craprem.nrdconta
             ,craprem.nrdocmto
             ,craprem.nrremret
             ,craprem.nrseqreg
             ,craprem.cdocorre
             ,craprem.dtdprorr
             ,craprem.cdmotivo
             ,craprem.vlabatim
             ,craprem.cdoperad
             ,craprem.dtaltera
             ,craprem.hrtransa)
          VALUES
             (rw_crapcob.cdcooper
             ,rw_crapcob.nrcnvcob
             ,rw_crapcob.nrdconta
             ,rw_crapcob.nrdocmto
             ,pr_nrremret
             ,pr_nrseqreg
             ,pr_cdocorre
             ,pr_dtdprorr
             ,pr_cdmotivo
             ,pr_vlabatim
             ,pr_cdoperad
             ,pr_dtmvtolt
             ,gene0002.fn_busca_time);
        EXCEPTION
          WHEN OTHERS THEN
            -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
            CECRED.pc_internal_exception (pr_cdcooper => rw_crapcob.cdcooper);  
            -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
            vr_cdcritic := 1034;
            vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                             'CRAPREM(31):' ||
                             ' cdcooper:'   || rw_crapcob.cdcooper ||
                             ', nrcnvcob:'  || rw_crapcob.nrcnvcob ||
                             ', nrdconta:'  || rw_crapcob.nrdconta ||
                             ', nrdocmto:'  || rw_crapcob.nrdocmto ||
                             ', nrremret:'  || pr_nrremret ||
                             ', nrseqreg:'  || pr_nrseqreg ||
                             ', cdocorre:'  || pr_cdocorre ||
                             ', dtdprorr:'  || pr_dtdprorr ||
                             ', cdmotivo:'  || pr_cdmotivo ||
                             ', vlabatim:'  || pr_vlabatim ||
                             ', cdoperad:'  || pr_cdoperad ||
                             ', dtaltera:'  || pr_dtmvtolt ||
                             ', hrtransa:'  || gene0002.fn_busca_time ||
                             '. ' ||sqlerrm;
            RAISE vr_exc_erro;
        END;
      END IF;
      --Fechar Cursor
      IF cr_crapcob%ISOPEN THEN
        CLOSE cr_crapcob;
      END IF;
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);
    EXCEPTION
      -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
      -- Disparadores: cobr0005.                              - Necessario Avaliar
      --               cobr0007.                              - Necessario Avaliar
      --               cobr0007.                              - Necessario Avaliar
      --               cobr0007.                              - Necessario Avaliar
      --               cobr0007.                              - Necessario Avaliar
      --               cobr0007.                              - Necessario Avaliar
      --               cobr0007.                              - Necessario Avaliar
      --               cobr0007.                              - Necessario Avaliar
      --               cobr0007.                              - Necessario Avaliar
      --               cobr0007.                              - Necessario Avaliar
      --               cobr0007.                              - Necessario Avaliar
      --               cobr0007.                              - Necessario Avaliar
      --               cobr0007.                              - Necessario Avaliar
      --               cobr0007.                              - Necessario Avaliar
      --               cobr0007.                              - Necessario Avaliar
      --               cobr0007.                              - Necessario Avaliar
      --               cobr0007.                              - Necessario Avaliar
      --               cobr0007.                              - Necessario Avaliar
      --               cobr0007.                              - Necessario Avaliar
      --               paga0002.                              - Necessario Avaliar
      --               paga0002.                              - Necessario Avaliar
      --               paga0002.                              - Necessario Avaliar
      --               paga0002.                              - Necessario Avaliar
      --               paga0002.                              - Necessario Avaliar
      --               paga0002.                              - Necessario Avaliar
      --               paga0002.                              - Necessario Avaliar
      --               paga0002.                              - Necessario Avaliar
      --               paga0002.                              - Necessario Avaliar
      --               paga0002.                              - Necessario Avaliar
      WHEN vr_exc_erro THEN
        pr_cdcritic:= vr_cdcritic;
        pr_dscritic:= vr_dscritic ||
                      vr_dsparame;
        --> Geração de log - 15/12/2017 - Chamado 779415                                           
        pc_controla_log_programa( pr_cdcooper      => rw_crapcob.cdcooper
                                 ,pr_dstiplog      => 'E' -- Tipo de Log - E = erro
                                 ,pr_tpocorrencia  => 2
                                 ,pr_cdmensagem    => pr_cdcritic -- Codigo do Log
                                 ,pr_dsmensagem    => pr_dscritic
                                );     	
      WHEN OTHERS THEN
        -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
        CECRED.pc_internal_exception (pr_cdcooper => rw_crapcob.cdcooper);   
        -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        pr_cdcritic:= 9999;
        pr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic) || 
                      'PAGA0001.pc_cria_tab_remessa. ' || SQLERRM  ||
                      '.' || vr_dsparame;	
        --> Geração de log - 15/12/2017 - Chamado 779415                                           
        pc_controla_log_programa( pr_cdcooper      => rw_crapcob.cdcooper
                                 ,pr_dstiplog      => 'E' -- Tipo de Log - E = erro
                                 ,pr_tpocorrencia  => 2
                                 ,pr_cdmensagem    => pr_cdcritic -- Codigo do Log
                                 ,pr_dsmensagem    => pr_dscritic
                                );     	
    END;
  END pc_cria_tab_remessa;



  /* Procedure para processar liquidacao de titulos apos baixa */
  PROCEDURE pc_proc_liquid_apos_baixa (pr_idtabcob IN ROWID    --Rowid da Cobranca
                                      ,pr_nrnosnum IN VARCHAR2 --Nosso Numero
                                      ,pr_nrispbpg IN INTEGER DEFAULT 99999999  --Numero ISPB do pagador
                                      ,pr_cdbanpag IN INTEGER  --Codigo banco pagamento
                                      ,pr_cdagepag IN INTEGER  --Codigo Agencia pagamento
                                      ,pr_vltitulo IN NUMBER   --Valor do titulo
                                      ,pr_vlliquid IN NUMBER   --Valor Liquidacao
                                      ,pr_vlrpagto IN NUMBER   --Valor pagamento
                                      ,pr_vlabatim IN NUMBER   --Valor abatimento
                                      ,pr_vldescto IN NUMBER   --Valor desconto
                                      ,pr_vlrjuros IN NUMBER   --Valor juros
                                      ,pr_vloutdeb IN NUMBER   --Valor saida debito
                                      ,pr_vloutcre IN NUMBER   --Valor saida credito
                                      ,pr_dtocorre IN DATE     --Data Ocorrencia
                                      ,pr_dtcredit IN DATE     --Data Credito
                                      ,pr_cdocorre IN INTEGER  --Codigo Ocorrencia
                                      ,pr_dsmotivo IN VARCHAR2 --Descricao Motivo
                                      ,pr_dtmvtolt IN DATE     --Data movimento
                                      ,pr_cdoperad IN VARCHAR2 --Codigo Operador
                                      ,pr_indpagto IN INTEGER  --Indicador pagamento /* 0-COMPE 1-Caixa On-Line 3-Internet 4-TAA */
                                      ,pr_inestcri IN INTEGER DEFAULT 0 --Estado crise
                                      ,pr_ret_nrremret OUT INTEGER --Numero remetente
                                      ,pr_cdcritic OUT INTEGER --Codigo Critica
                                      ,pr_dscritic OUT VARCHAR2 --Descricao Critica
                                      ,pr_tab_lcm_consolidada IN OUT PAGA0001.typ_tab_lcm_consolidada) IS --Tabela lancamentos consolidada
    -- .........................................................................
    --
    --  Programa : pc_proc_liquid_apos_baixa           Antigo: b1wgen0089.p/proc-liquidacao-apos-bx
    --  Sistema  : Cred
    --  Sigla    : PAGA0001
    --  Autor    : Alisson C. Berrido - AMcom
    --  Data     : Julho/2013.                   Ultima atualizacao: 15/12/2017
    --
    --  Dados referentes ao programa:
    --
    --   Frequencia: Sempre que for chamado
    --   Objetivo  : Procedure para processar liquidacao de titulos apos baixa
    --
    --   Alteracoes: 29/10/2015 - Inclusao do indicador estado de crise. (Jaison/Andrino)
    --
    --               29/12/2016 - Tratamento Nova Plataforma de cobrança PRJ340 - NPC (Odirlei-AMcom)
    --
    --               29/11/2017 - Ajustado para carregar as informações da tarifa 
    --                            após o UPDATE da cob devido ao indpagto ser atualizado 
    --                            nesse update (Douglas - Chamado 799851)
    --
    --              15/12/2017 - Incluido nome do módulo logado
    --                           No caso de erro de programa gravar tabela especifica de log                     
    --                           Ajuste mensagem de erro 
    --                          (Belli - Envolti - Chamado 779415)    
    -- .........................................................................
  BEGIN
    DECLARE
      -- selecionar conta do cooperado do contrato de emprestimo
      CURSOR cr_cde (pr_cdcooper IN tbrecup_cobranca.cdcooper%TYPE
                    ,pr_nrctacob IN tbrecup_cobranca.nrdconta_cob%TYPE
                    ,pr_nrcnvcob IN tbrecup_cobranca.nrcnvcob%TYPE
                    ,pr_nrdocmto IN tbrecup_cobranca.nrboleto%TYPE
                    ,pr_nrctremp IN tbrecup_cobranca.nrctremp%TYPE) IS
        SELECT cde.nrdconta, cde.tpparcela
          FROM tbrecup_cobranca cde
         WHERE cde.cdcooper     = pr_cdcooper
           AND cde.nrdconta_cob = pr_nrctacob
           AND cde.nrcnvcob     = pr_nrcnvcob
           AND cde.nrboleto     = pr_nrdocmto
           AND cde.tpproduto    = 0;
      rw_cde cr_cde%ROWTYPE;

      --Variaveis Locais
      vr_cdhistor      INTEGER;
      vr_index         INTEGER;
      vr_ret_dsinserr  VARCHAR2(1000);
      vr_feriafds      BOOLEAN;
      vr_flgdesct      BOOLEAN:= FALSE;
      vr_dtprvenc      DATE;
      vr_dtferiado     DATE;
      vr_flcredit      BOOLEAN:= FALSE;
      vr_cdmotivo      craptar.cdmotivo%TYPE;
      --Variaveis de erro
      vr_des_erro     VARCHAR2(4000);
      vr_cdcritic crapcri.cdcritic%TYPE;
      vr_dscritic VARCHAR2(4000);
      --Variaveis de Excecao
      vr_exc_erro EXCEPTION;
      --Agrupa os parametros - 15/12/2017 - Chamado 779415 
      vr_dsparame VARCHAR2(4000);
    BEGIN
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_proc_liquid_apos_baixa');
      
      --Inicializar variaveis retorno
      pr_cdcritic:= NULL;
      pr_dscritic:= NULL;
      --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
      vr_dsparame :=  ' pr_idtabcob:' || pr_idtabcob || 
                      ', pr_nrnosnum:' || pr_nrnosnum || 
                      ', pr_nrispbpg:' || pr_nrispbpg || 
                      ', pr_cdbanpag:' || pr_cdbanpag || 
                      ', pr_cdagepag:' || pr_cdagepag || 
                      ', pr_vltitulo:' || pr_vltitulo || 
                      ', pr_vlliquid:' || pr_vlliquid || 
                      ', pr_vlrpagto:' || pr_vlrpagto || 
                      ', pr_vlabatim:' || pr_vlabatim || 
                      ', pr_vldescto:' || pr_vldescto || 
                      ', pr_vlrjuros:' || pr_vlrjuros || 
                      ', pr_vloutdeb:' || pr_vloutdeb || 
                      ', pr_vloutcre:' || pr_vloutcre || 
                      ', pr_dtocorre:' || pr_dtocorre || 
                      ', pr_dtcredit:' || pr_dtcredit ||  
                      ', pr_cdocorre:' || pr_cdocorre || 
                      ', pr_dsmotivo:' || pr_dsmotivo || 
                      ', pr_dtmvtolt:' || pr_dtmvtolt || 
                      ', pr_cdoperad:' || pr_cdoperad || 
                      ', pr_indpagto:' || pr_indpagto || 
                      ', pr_inestcri:' || pr_inestcri; 
      --Selecionar registro cobranca
      OPEN cr_crapcob (pr_rowid => pr_idtabcob);
      --Posicionar no proximo registro
      FETCH cr_crapcob INTO rw_crapcob;
      --Se nao encontrar
      IF cr_crapcob%NOTFOUND THEN
        --Fechar Cursor
        CLOSE cr_crapcob;
        --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        vr_cdcritic := 1179;
        vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
      --Fechar Cursor
      CLOSE cr_crapcob;
      --Verificar cooperativa
      OPEN cr_crapcop(pr_cdcooper => rw_crapcob.cdcooper);
      FETCH cr_crapcop INTO rw_crapcop;
      --Se nao encontrou
      IF cr_crapcop%NOTFOUND THEN
        --Fechar Cursor
        CLOSE cr_crapcop;
        --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        vr_cdcritic := 1070; --Registro de cooperativa nao encontrado
        vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
      --Fechar Cursor
      CLOSE cr_crapcop;
      /* Gerar motivos de ocorrencia  */
      PAGA0001.pc_proc_motivos_retorno (pr_idtabcob => pr_idtabcob  --Rowid da cobranca
                                       ,pr_cdocorre => pr_cdocorre  --Codigo Ocorrencia
                                       ,pr_dsmotivo => pr_dsmotivo  --Descricao Motivo
                                       ,pr_dtmvtolt => pr_dtmvtolt  --Data Movimentacao
                                       ,pr_cdoperad => pr_cdoperad  --Codigo Operador
                                       ,pr_cdcritic => vr_cdcritic  --Codigo Critica
                                       ,pr_dscritic => vr_dscritic); --Descricao Critica
      --Se ocorreu erro
      IF NVL(vr_cdcritic,0) <> 0 OR TRIM(vr_dscritic) IS NOT NULL THEN
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
	    -- Retorno nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_proc_liquid_apos_baixa');

      /* Alterar situacao do Titulo */
      IF rw_crapcob.incobran <> 5 THEN
        BEGIN
          UPDATE crapcob SET crapcob.incobran = 5 /* Liquidado/Pago */
                            ,crapcob.dtdpagto = pr_dtocorre
                            ,crapcob.vldpagto = pr_vlrpagto
                            ,crapcob.nrispbrc = pr_nrispbpg
                            ,crapcob.cdagepag = pr_cdagepag
                            ,crapcob.cdbanpag = pr_cdbanpag
                            ,crapcob.indpagto = pr_indpagto
                            ,crapcob.vljurpag = pr_vlrjuros
                            ,crapcob.vloutdeb = pr_vloutdeb
                            ,crapcob.vloutcre = pr_vloutcre
          WHERE crapcob.ROWID = pr_idtabcob;
        EXCEPTION
          WHEN OTHERS THEN
            -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
            CECRED.pc_internal_exception (pr_cdcooper => rw_crapcob.cdcooper);  
            -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
            vr_cdcritic := 1035;
            vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                             'CRAPCOB(45):' ||
                             ' incobran:'   || '5' ||
                             ', dtdpagto:'  || pr_dtocorre ||
                             ', vldpagto:'  || pr_vlrpagto ||
                             ', nrispbrc:'  || pr_nrispbpg ||
                             ', cdagepag:'  || pr_cdagepag ||
                             ', cdbanpag:'  || pr_cdbanpag ||
                             ', indpagto:'  || pr_indpagto ||
                             ', vljurpag:'  || pr_vlrjuros ||
                             ', vloutdeb:'  || pr_vloutdeb ||
                             ', vloutcre:'  || pr_vloutcre ||
                             ' com ROWID:'  || pr_idtabcob ||
                             '. ' ||sqlerrm;
            --Levantar Excecao
            RAISE vr_exc_erro;
        END;
      END IF;

      -- Deve ser feito após o  UPDATE da cob devido ao indpagto ser atualizado nesse update
      vr_cdmotivo := 0;

      IF pr_cdbanpag = 85 THEN
         vr_cdmotivo := pr_dsmotivo;
      END IF;

      -- Utilizar rotina para alimentar pr_tab_lcm_consolidada apenas para títulos Banco do Brasil
      -- * VR Boleto
      /* Gerar dados para tt-lcm-consolidada */
      PAGA0001.pc_prep_tt_lcm_consolidada (pr_idtabcob => pr_idtabcob --ROWID da cobranca
                                          ,pr_cdocorre => pr_cdocorre --Codigo Ocorrencia
                                          ,pr_tplancto => 'T'         --Tipo Lancamento
                                          ,pr_vltarifa => 0           --Valor Tarifa
                                          ,pr_cdhistor => 0           --Codigo Historico
                                          ,pr_cdmotivo => vr_cdmotivo --Codigo motivo
                                          ,pr_tab_lcm_consolidada => pr_tab_lcm_consolidada --Tabela de Lancamentos
                                          ,pr_cdcritic => vr_cdcritic   --Codigo Critica
                                          ,pr_dscritic => vr_dscritic); --Descricao Critica
      --Se ocorreu erro
      IF NVL(vr_cdcritic,0) <> 0 OR TRIM(vr_dscritic) IS NOT NULL THEN
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
	    -- Retorno nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_proc_liquid_apos_baixa');     

      /* Preparar Lote de Retorno Cooperado */
      PAGA0001.pc_prep_retorno_cooperado (pr_idregcob => pr_idtabcob     --ROWID da cobranca
                                         ,pr_cdocorre => pr_cdocorre     --Codigo Ocorrencia
                                         ,pr_dsmotivo => NULL            --Descricao Motivo
                                         ,pr_dtmvtolt => pr_dtmvtolt     --Data Movimento
                                         ,pr_cdoperad => pr_cdoperad     --Codigo Operador
                                         ,pr_nrremret => pr_ret_nrremret --Numero Remessa
                                         ,pr_cdcritic => vr_cdcritic     --Codigo Critica
                                         ,pr_dscritic => vr_dscritic);   --Descricao Critica
      --Se Ocorreu erro
      IF NVL(vr_cdcritic,0) <> 0 OR TRIM(vr_dscritic) IS NOT NULL THEN
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
	    -- Retorno nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_proc_liquid_apos_baixa');

      --Determinar Codigo Historico
      CASE rw_crapcob.cdbandoc
        WHEN 1 THEN /* BB */
          vr_cdhistor:= 1088; /* D-1257 e C-4112 (contab) */
        WHEN 85 THEN /* CECRED */
          IF pr_indpagto = 0 THEN
             vr_cdhistor := 1089; /* D-1455 e C-4112 (contab) */
          ELSE
             vr_cdhistor := 987; /* D-caixa e C-4112 (contab) */
          END IF;
        ELSE NULL;
      END CASE;

      IF nvl(rw_crapcob.nrctremp,0) > 0 THEN
        OPEN cr_cde(pr_cdcooper => rw_crapcob.cdcooper
                   ,pr_nrctacob => rw_crapcob.nrdconta
                   ,pr_nrcnvcob => rw_crapcob.nrcnvcob
                   ,pr_nrdocmto => rw_crapcob.nrdocmto
                   ,pr_nrctremp => rw_crapcob.nrctremp);
        FETCH cr_cde INTO rw_cde;

        /* atribuir a conta do cooperado para pagto de emprestimo */
        IF cr_cde%FOUND THEN
           vr_cdhistor := 2001; -- CREDITO BOLETO CONTRATO MOTIVO XXX
        END  IF;

        CLOSE cr_cde;
      END IF;

      /* Gerar dados para tt-lcm-consolidada */
      vr_flcredit := FALSE; /* Marcar retorno como não creditado */

      -- Utilizar rotina para alimentar pr_tab_lcm_consolidada apenas para títulos Banco do Brasil
      IF (rw_crapcob.cdbandoc = 001 OR pr_vlrpagto >= 250000 ) THEN

          -- pagto de VR Boleto 085 via STR0026
          IF pr_vlrpagto >= 250000 AND
             pr_dsmotivo = '04' AND
             rw_crapcob.cdbandoc = 085 THEN
             vr_cdhistor := 1688;
          END IF;

          -- pagto de VR Boleto 085 via Caixa/Internet/TAA
          IF pr_vlrpagto >= 250000 AND
             pr_dsmotivo <> '04' AND
             rw_crapcob.cdbandoc = 085 THEN
             vr_cdhistor := 1689;
          END IF;

          PAGA0001.pc_prep_tt_lcm_consolidada (pr_idtabcob => pr_idtabcob --ROWID da cobranca
                                              ,pr_cdocorre => pr_cdocorre --Codigo Ocorrencia
                                              ,pr_tplancto => 'L'         --Tipo Lancamento
                                              ,pr_vltarifa => pr_vlrpagto --Valor Tarifa
                                              ,pr_cdhistor => vr_cdhistor --Codigo Historico
                                              ,pr_cdmotivo => 0           --Codigo motivo
                                              ,pr_tab_lcm_consolidada => pr_tab_lcm_consolidada --Tabela de Lancamentos
                                              ,pr_cdcritic => vr_cdcritic   --Codigo Critica
                                              ,pr_dscritic => vr_dscritic); --Descricao Critica
          --Se ocorreu erro
          IF NVL(vr_cdcritic,0) <> 0 OR TRIM(vr_dscritic) IS NOT NULL THEN
            --Levantar Excecao
            RAISE vr_exc_erro;
          END IF;
	        -- Retorno nome do módulo logado - 15/12/2017 - Chamado 779415
		      GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_proc_liquid_apos_baixa');

          /* Marcar retorno como creditado */
          vr_flcredit := TRUE;
      END IF;
      /* Preparar Lote de Retorno Cooperado */
      PAGA0001.pc_prep_retorno_cooperado (pr_idregcob => pr_idtabcob     --ROWID da cobranca
                                         ,pr_cdocorre => 17              --Codigo Ocorrencia
                                         ,pr_dsmotivo => NULL            --Descricao Motivo
                                         ,pr_dtmvtolt => pr_dtmvtolt     --Data Movimento
                                         ,pr_cdoperad => pr_cdoperad     --Codigo Operador
                                         ,pr_nrremret => pr_ret_nrremret --Numero Remessa
                                         ,pr_cdcritic => vr_cdcritic     --Codigo Critica
                                         ,pr_dscritic => vr_dscritic);   --Descricao Critica
      --Se Ocorreu erro
      IF NVL(vr_cdcritic,0) <> 0 OR TRIM(vr_dscritic) IS NOT NULL THEN
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
	    -- Retorno nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_proc_liquid_apos_baixa');

      -- Quando liquidação após baixa ou liquidação de título não registrado,
      -- não haverá título descontado;
      vr_flgdesct:= FALSE; -- ou false

      --Se for Cooperativa
      IF  rw_crapcob.cdbandoc = rw_crapcop.cdbcoctl THEN
        /* Preparar Lote de Retorno Cooperativa */
        PAGA0001.pc_prepara_retorno_cooperativa (pr_idtabcob => pr_idtabcob   --ROWID da cobranca
                                                ,pr_dtmvtolt => pr_dtmvtolt   --Data Movimento
                                                ,pr_dtocorre => pr_dtocorre   --Data Ocorrencia
                                                ,pr_cdoperad => pr_cdoperad   --Codigo Operador
                                                ,pr_vlabatim => pr_vlabatim   --Valor Abatimento
                                                ,pr_vldescto => pr_vldescto   --Valor Desconto
                                                ,pr_vljurmul => pr_vlrjuros   --Valor juros multa
                                                ,pr_vlrpagto => pr_vlrpagto   --Valor pagamento
                                                ,pr_flgdesct => vr_flgdesct   --Flag para titulo descontado
                                                ,pr_flcredit => vr_flcredit   --Flag para titulo creditado
                                                ,pr_nrretcoo => pr_ret_nrremret   --Numero Retorno Cooperativa
                                                ,pr_cdmotivo => pr_dsmotivo   --Codigo Motivo
                                                ,pr_cdocorre => pr_cdocorre   --Codigo Ocorrencia
                                                ,pr_nrispbpg => pr_nrispbpg   --> Numero ISPB do pagador
                                                ,pr_cdbanpag => pr_cdbanpag   --Codigo banco pagamento
                                                ,pr_cdagepag => pr_cdagepag   --Codigo Agencia pagamento
                                                ,pr_inestcri => pr_inestcri   --Estado crise
                                                ,pr_cdcritic => vr_cdcritic   --Codigo Critica
                                                ,pr_dscritic => vr_dscritic); --Descricao Critica
        --Se Ocorreu erro
        IF NVL(vr_cdcritic,0) <> 0 OR TRIM(vr_dscritic) IS NOT NULL THEN
          --Levantar Excecao
          RAISE vr_exc_erro;
        END IF;
	      -- Retorno nome do módulo logado - 15/12/2017 - Chamado 779415
	  	  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_proc_liquid_apos_baixa');
      END IF;
      
      --> Realizar baixa operacional
      IF rw_crapcob.nrdident > 0 THEN
        BEGIN
          UPDATE tbcobran_baixa_operac o
             SET o.flgbaixa_efetiva = 1
           WHERE o.nrdident = rw_crapcob.nrdident
             AND o.tpoperac_jd = 'BO';
    EXCEPTION
          WHEN OTHERS THEN
            -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
            CECRED.pc_internal_exception (pr_cdcooper => rw_crapcob.cdcooper);   
            -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
            vr_cdcritic := 1035;
            vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                             'TBCOBRAN_BAIXA_OPERAC(46):' ||
                             ' flgbaixa_efetiva:'  || '1' ||
                             ' com nrdident:'      || rw_crapcob.nrdident ||
                             ', tpoperac_jd:'      || 'BO' ||
                             '. ' ||sqlerrm;
        END;        
      END IF;
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);
      
    EXCEPTION
      -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
      -- Esta Procedure grava TBGEN
      -- Disparadores: cxon0014.pc_gera_titulos_iptu           -
      --               pc_crps538.prc                          -
      --               pc_crps594.prc                          -
      WHEN vr_exc_erro THEN
        pr_cdcritic:= vr_cdcritic;
        pr_dscritic:= vr_dscritic ||
                      vr_dsparame;
        --> Geração de log                             
        pc_controla_log_programa( pr_cdcooper     => rw_crapcob.cdcooper
                                 ,pr_dstiplog     => 'E'              -- E = erro
                                 ,pr_tpocorrencia => 2                -- 1-Erro de negocio/ 2-Erro nao tratado
                                 ,pr_cdmensagem   => pr_cdcritic      -- Codigodo Log
                                 ,pr_dsmensagem   => pr_dscritic      -- Descrição do Log
                                 ,pr_tpexecucao   => 0                -- 0-Outro, 1-Batch, 2-Job, 3-Online                                                       
                                 );                        
      WHEN OTHERS THEN
        -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
        CECRED.pc_internal_exception (pr_cdcooper => rw_crapcob.cdcooper);   
        -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        pr_cdcritic:= 9999;
        pr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic) || 
                      'PAGA0001.pc_proc_liquid_apos_baixa. ' || SQLERRM ||
                      '.' || vr_dsparame;	
        --> Geração de log                             
        pc_controla_log_programa( pr_cdcooper     => rw_crapcob.cdcooper
                                 ,pr_dstiplog     => 'E'              -- E = erro
                                 ,pr_tpocorrencia => 2                -- 1-Erro de negocio/ 2-Erro nao tratado
                                 ,pr_cdmensagem   => pr_cdcritic      -- Codigodo Log
                                 ,pr_dsmensagem   => pr_dscritic      -- Descrição do Log
                                 ,pr_tpexecucao   => 0                -- 0-Outro, 1-Batch, 2-Job, 3-Online                                                      
                                 );                        
    END;
  END pc_proc_liquid_apos_baixa;



  /* Procedure para Gerar arquivo para cooperado cnab240 */
  PROCEDURE pc_gera_arq_coop_cnab240 (pr_cdcooper IN crapcop.cdcooper%TYPE   --Codigo Cooperativa
                                     ,pr_nrcnvcob IN crapcob.nrcnvcob%TYPE   --Numero Convenio
                                     ,pr_nrdconta IN crapcob.nrdconta%TYPE   --Numero da Conta
                                     ,pr_dtmvtoan IN crapdat.dtmvtolt%TYPE   --Data anterior
                                     ,pr_idorigem IN INTEGER                 --Identificador Origem
                                     ,pr_flgproce IN INTEGER                 --Flag Processo
                                     ,pr_cdprogra IN crapprg.cdprogra%TYPE   --Nome Programa
                                     ,pr_nrremret IN craprtc.nrremret%TYPE   --Num Rem/Ret Cobranca
                                     ,pr_tab_arq_cobranca  OUT PAGA0001.typ_tab_arq_cobranca --Tabela Cobranca
                                     ,pr_cdcritic OUT INTEGER                --Codigo da Critica
                                     ,pr_dscritic OUT VARCHAR2) IS           --Descricao da critica
    -- .........................................................................
    --
    --  Programa : pc_gera_arq_coop_cnab240           Antigo: b1wgen0090.p/gera_arq_cooperado_cnab240
    --  Sistema  : Cred
    --  Sigla    : PAGA0001
    --  Autor    : Alisson C. Berrido - AMcom
    --  Data     : Novembro/2013.                   Ultima atualizacao: 27/08/2018
    --
    --  Dados referentes ao programa:
    --
    --   Frequencia: Sempre que for chamado
    --   Objetivo  : Procedure para gerar arquivo cobranca cooperado
    --
    --   Alteracoes: 09/01/2014 - substituido campo crapret.nrremret por
    --                        craprtc.nrremret nas procedures
    --                        gera_arq_cooperado_cnab240 e
    --                        gera_arq_cooperado_cnab400 (Tiago)
    --
    --               20/01/2014 - Melhoria processo leitura crapcob e craprtc (Gabriel).
    --
    --               13/03/2014 - Converter arquivos ux2dos antes de enviar por e-mail
    --                            (Gabriel)
    --
    --               19/05/2014 - Incluido nvl para geração correta da linha T (Odirlei/Amcom)
    --
    --               29/05/2014 - Incluso CHR(10) no final linhas a serem geradas e
    --                            alterado uso do DBMS_XSLPROCESSOR.CLOB2FILE pelo
    --                            gene0002.pc_clob_para_arquivo conforme solicitacao
    --                            Marcos. (Daniel Z.)
    --
    --               27/06/2014 - Incluir o CLOSE para o cursor cr_crapcco antes de
    --                            executar o CONTINUE.  ( Renato - Supero )
    --
    --               06/08/2014 - Retirar caracteres acentuados do arquivo de retorno
    --                            (Odirlei - AMcom SD185976)
    --
    --               08/01/2015 - Alterar a tabela na qual o campo nrremret é lido, de forma a
    --                            ser lido como no progress. SoftDesk 225722 (Renato - Supero)
    --
    --               21/01/2015 - Ajustar pc_gera_arq_coop_cnab240 para carregar o
    --                            campo crapcob.dsdoccop no Segmento T, posição 59-73
    --                            Ajustar o format do vr_ccdartei para ser identico ao progress
    --                            (Douglas - Chamado 235429)
    --
    --               09/07/2015 - Ajustado bloco de títulos baixados, após a rotina que gera o
    --                            registro header do arquivo de retorno. (Rafael)
    --
    --               26/10/2015 - Ajustado format ao inserir a informação de "Código do motivo"
    --                            no arquivo
    --                            (Adriano - SD 335749).
    --
    --               13/11/2015 - Incluido tratamento para remover acentuacao na pc_escreve_tab 
    --                            SD358050 (Odirlei-AMcom))    
    --
    --               08/01/2016 - Adicionado NVL para o campo rw_craprtc.cdmotivo, pois existem
    --                            registros com valor NULL nesse campo e o RPAD nao coloca
    --                            os espacos em branco, gerando as linhas do arquivo fora do padrao
    --                            (Douglas - Chamado 384140)
	--
	--               29/01/2016 - Ajuste que seja considerado no relacionamento entre
    --                            as tabelas craprtc e crapret as datas de movimento e ocorrencia
    --                            (Adriano - SD 391157).
    --
    --		         22/09/2016 - Ajuste nos cursores que buscam títulos em aberto para arquivo de retorno (Rodrigo)
    --
    --               23/03/2017 - Adicionar NVL no campo de nosso numero (Douglas - Chamado 629181)
    --
    --               15/12/2017 - Incluido nome do módulo logado
    --                            No caso de erro de programa gravar tabela especifica de log                     
    --                            Ajuste mensagem de erro 
    --                           (Belli - Envolti - Chamado 779415) 
    --
    --               27/08/2018 - Adicionar NVL nos campos cdbcorec e cdagerec. Incluir pc_internal_exception
    --                            e informações da conta na exception when others. (PRB0040285-AJFink)
    --
    --               29/08/2018 - Revitalização Sistemas - Ajuste para update unico (Andreatta-Mouts)

	--               09/05/2019 - Incluído tratamento dentro da pc_gera_arq_coop_cnab240  excluido o antigo tratamento. 
	                              (Daniel Lombardi - Mouts'S)
    -- .........................................................................

  BEGIN
    DECLARE
      --Cursores Locais
      CURSOR cr_craprtc (pr_cdcooper IN craprtc.cdcooper%type
                        ,pr_nrcnvcob IN craprtc.nrcnvcob%type
                        ,pr_nrdconta IN craprtc.nrdconta%type
                        ,pr_dtmvtolt IN craprtc.dtmvtolt%type
                        ,pr_nrremret IN craprtc.nrremret%TYPE
                        ,pr_intipmvt IN craprtc.intipmvt%TYPE) IS
        SELECT craprtc.cdcooper
              ,craprtc.nrcnvcob
              ,craprtc.nrdconta
              ,craprtc.dtmvtolt
              ,craprtc.nmarquiv
              ,crapret.cdocorre
              ,crapret.cdmotivo
              ,craprtc.nrremret
              ,crapret.vltarass
              ,nvl(crapret.cdagerec,0) cdagerec
              ,crapret.nrdocmto
              ,crapret.nrnosnum
              ,crapret.vltitulo
              ,nvl(crapret.cdbcorec,0) cdbcorec
              ,crapret.dtocorre
              ,crapret.dtcredit
              ,crapret.vljurmul
              ,crapret.vldescto
              ,crapret.vlabatim
              ,crapret.vlrpagto
              ,crapret.vlrliqui
              ,crapret.vloutdes
              ,crapret.vloutcre
              ,Count(1) OVER (PARTITION BY craprtc.nrdconta) nrtotcta
              ,Row_Number() OVER (PARTITION BY craprtc.nrdconta
                                  ORDER BY craprtc.nrdconta
                                          ,crapret.cdocorre
                                          ,craprtc.nrremret
                                          ,crapret.nrretcoo
                                          ,crapret.nrseqreg) nrseqcta
        FROM craprtc
            ,crapret
        WHERE craprtc.cdcooper = pr_cdcooper
        AND   craprtc.nrcnvcob = pr_nrcnvcob
        AND   craprtc.nrdconta = pr_nrdconta
        AND   craprtc.dtmvtolt = pr_dtmvtolt
        AND   craprtc.nrremret = pr_nrremret
        AND   craprtc.intipmvt = pr_intipmvt
        AND   crapret.cdcooper = craprtc.cdcooper
        AND   crapret.nrdconta = craprtc.nrdconta
        AND   crapret.nrcnvcob = craprtc.nrcnvcob
		AND   crapret.dtocorre = craprtc.dtmvtolt
		AND   crapret.nrremret = (SELECT MAX(ret.nrremret)
                                  FROM crapret ret
                                  WHERE ret.cdcooper = craprtc.cdcooper
                                  AND ret.nrdconta = craprtc.nrdconta
                                  AND ret.nrcnvcob = craprtc.nrcnvcob
                                  AND ret.dtocorre = craprtc.dtmvtolt
                                  AND ret.nrretcoo = craprtc.nrremret);

      --Selecionar Cadastro Convenio
      CURSOR cr_crapcco (pr_cdcooper IN crapcco.cdcooper%type
                        ,pr_nrconven IN crapcco.nrconven%type) IS
        SELECT crapcco.dsorgarq
              ,crapcco.cddbanco
              ,crapcco.cdcartei
              ,crapcco.nrdctabb
        FROM crapcco
        WHERE crapcco.cdcooper = pr_cdcooper
        AND   crapcco.nrconven = pr_nrconven;
      rw_crapcco cr_crapcco%ROWTYPE;
      --Selecionar Cadastro Convenio
      CURSOR cr_crapcco2 (pr_cdcooper IN crapcco.cdcooper%type
                         ,pr_nrconven IN crapcco.nrconven%type) IS
        SELECT cco.cddbanco
              ,cco.nrdctabb
         FROM crapcco cco
        WHERE cco.cdcooper = pr_cdcooper
          AND cco.nrconven = pr_nrconven;
      rw_crabcco cr_crapcco2%ROWTYPE;

      --Selecionar informacoes Cobranca
      CURSOR cr_crapcob (pr_cdcooper IN crapcob.cdcooper%type
                        ,pr_cdbandoc IN crapcco.cddbanco%type
                        ,pr_nrdctabb IN crapcco.nrdctabb%type
                        ,pr_nrdconta IN crapcob.nrdconta%type
                        ,pr_nrcnvcob IN crapcob.nrcnvcob%type
                        ,pr_nrdocmto IN crapcob.nrdocmto%type) IS
        SELECT crapcob.dtvencto
              ,crapcob.cdcooper
              ,crapcob.nrdconta
              ,crapcob.nrinssac
              ,crapcob.dsusoemp
              ,crapcob.cdtitprt
              ,crapcob.cdbandoc
              ,crapcob.nrnosnum
              ,crapcob.dsdoccop
        FROM crapcob
        WHERE crapcob.cdcooper = pr_cdcooper
        AND   crapcob.cdbandoc = pr_cdbandoc
        AND   crapcob.nrdctabb = pr_nrdctabb
        AND   crapcob.nrdconta = pr_nrdconta
        AND   crapcob.nrcnvcob = pr_nrcnvcob
        AND   crapcob.nrdocmto = pr_nrdocmto
        ORDER BY crapcob.progress_recid ASC;
      rw_crapcob cr_crapcob%ROWTYPE;
      rw_crabcob cr_crapcob%ROWTYPE;
      --Selecionar Cobrancas
      CURSOR cr_crapcob2 (pr_cdcooper IN crapcob.cdcooper%type
                         ,pr_nrdconta IN crapcob.nrdconta%type
                         ,pr_nrcnvcob IN crapcob.nrcnvcob%TYPE
                         ,pr_incobran IN crapcob.incobran%type) IS
        SELECT  count(*) qtdreg
               ,nvl(sum(nvl(crapcob.vltitulo,0)),0) vltitulo
        FROM crapcob
        WHERE crapcob.cdcooper = pr_cdcooper
        AND   crapcob.nrdconta = pr_nrdconta
        AND   crapcob.nrcnvcob = pr_nrcnvcob
        AND   crapcob.dtdpagto IS NULL
        AND   crapcob.incobran = pr_incobran;
      --Selecionar Cadastro Email
      CURSOR cr_crapcem (pr_cdcooper IN crapcem.cdcooper%type
                        ,pr_nrdconta IN crapcem.nrdconta%type
                        ,pr_idseqttl IN crapcem.idseqttl%type
                        ,pr_cddemail IN crapcem.cddemail%type) IS
        SELECT crapcem.dsdemail
        FROM crapcem
        WHERE crapcem.cdcooper = pr_cdcooper
        AND   crapcem.nrdconta = pr_nrdconta
        AND   crapcem.idseqttl = pr_idseqttl
        AND   crapcem.cddemail = pr_cddemail;
      rw_crapcem cr_crapcem%ROWTYPE;

      --Variaveis Locais
      vr_inarqcbr crapceb.inarqcbr%type;
      vr_nmarqind VARCHAR2(1000);
      vr_qtregist INTEGER;
      vr_vltarifa NUMBER;
      vr_cddbanco VARCHAR2(1000);
      vr_nrdctabb NUMBER;
      vr_cdcartei VARCHAR2(1000);
      vr_cdageman NUMBER;
      vr_cdagerec NUMBER;
      vr_horagera VARCHAR2(1000);
      vr_qtcobsim INTEGER;
      vr_vlcobsim NUMBER;
      vr_dtocorre VARCHAR2(1000);
      vr_dtcredit VARCHAR2(1000);
      vr_dsdemail crapcem.dsdemail%TYPE;
      vr_dsdctitg VARCHAR2(1000);
      vr_dtvencto crapcob.dtvencto%TYPE;
      vr_dsusoemp crapcob.dsusoemp%TYPE;
      vr_cdtpinsc crapsab.cdtpinsc%TYPE;
      vr_nrinssac crapsab.nrinssac%TYPE;
      vr_nmdsacad crapsab.nmdsacad%TYPE;
      vr_dsdoccop crapcob.dsdoccop%TYPE;
      vr_dslinha  VARCHAR2(1000);
      vr_cdseqlin INTEGER;
      vr_flgdigok BOOLEAN;
      vr_flgcrapcob BOOLEAN;
      vr_flgcrapceb BOOLEAN;
      vr_typ_saida VARCHAR2(3);
      vr_nmarqcnv VARCHAR2(1000);
      vr_correspo VARCHAR2(1000);
      vr_dsvencto VARCHAR2(1000);
      vr_comando  VARCHAR2(1000);
      vr_caminho  VARCHAR2(1000);
      vr_caminho_salvar VARCHAR2(1000);
			vr_nmarqzip VARCHAR2(1000);
			vr_remanexo VARCHAR2(1);
			vr_arqanexo VARCHAR2(1000);
      vr_boleto_protestado BOOLEAN;
      --Variaveis de erro
      vr_des_erro VARCHAR2(4000);
      vr_cdcritic crapcri.cdcritic%TYPE;
      vr_dscritic VARCHAR2(4000);
      -- Variavel para armazenar as informacoes em XML
      vr_des_xml      CLOB;
      --Variaveis de Arquivo
      vr_setlinha    VARCHAR2(1000);
      vr_input_file  utl_file.file_type;
      --Variaveis de Excecao
      vr_exc_erro EXCEPTION;

			-- Variáveis para comando ftp
			vr_dir_coop VARCHAR2(4000);	    
			vr_serv_ftp VARCHAR2(100);
			vr_user_ftp VARCHAR2(100);
			vr_pass_ftp VARCHAR2(100);       
			vr_dir_retorno varchar2(4000);	    
			vr_script_cobr varchar2(4000);
      --Agrupa os parametros - 15/12/2017 - Chamado 779415 
      vr_dsparame VARCHAR2(4000);

      --Escrever no arquivo CLOB
     PROCEDURE pc_escreve_xml(pr_des_dados IN VARCHAR2) IS
       vr_des_dados VARCHAR2(32767);
     BEGIN
       -- retirar caracteres acentuados
       vr_des_dados := gene0007.fn_caract_acento(pr_des_dados);
       --Escrever no arquivo XML
       dbms_lob.writeappend(vr_des_xml,length(vr_des_dados),vr_des_dados);
     END;

      --Escrever na tabela Cobranca
     PROCEDURE pc_escreve_tab(pr_idorigem  IN INTEGER
                             ,pr_des_dados IN VARCHAR2) IS
       vr_index PLS_INTEGER;
       vr_des_dados VARCHAR2(32767);
     BEGIN
       --Se for TAA
       IF pr_idorigem = 3 THEN
         -- retirar caracteres acentuados
         vr_des_dados := gene0007.fn_caract_acento(pr_des_dados);
         --Encontrar proximo registro
         vr_index:= pr_tab_arq_cobranca.count+1;
         pr_tab_arq_cobranca(vr_index):= vr_des_dados;
       END IF;
     END;

    BEGIN
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_gera_arq_coop_cnab240');
      --Inicializar variaveis retorno
      pr_cdcritic:= NULL;
      pr_dscritic:= NULL;
      --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
      vr_dsparame :=  ' pr_cdcooper:'  || pr_cdcooper ||
                      ', pr_nrcnvcob:' || pr_nrcnvcob || 
                      ', pr_nrdconta:' || pr_nrdconta || 
                      ', pr_dtmvtoan:' || pr_dtmvtoan || 
                      ', pr_idorigem:' || pr_idorigem || 
                      ', pr_flgproce:' || pr_flgproce || 
                      ', pr_cdprogra:' || pr_cdprogra || 
                      ', pr_nrremret:' || pr_nrremret;
      --Verificar cooperativa
      OPEN cr_crapcop(pr_cdcooper => pr_cdcooper);
      FETCH cr_crapcop INTO rw_crapcop;
      --Se nao encontrou
      IF cr_crapcop%NOTFOUND THEN
        --Fechar Cursor
        CLOSE cr_crapcop;
        --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        vr_cdcritic := 1070; --Registro de cooperativa nao encontrado
        vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
      --Fechar Cursor
      CLOSE cr_crapcop;
      --Selecionar remessas/retorno titulos dos cooperados
      FOR rw_craprtc IN cr_craprtc (pr_cdcooper => pr_cdcooper
                                   ,pr_nrcnvcob => pr_nrcnvcob
                                   ,pr_nrdconta => pr_nrdconta
                                   ,pr_dtmvtolt => pr_dtmvtoan
                                   ,pr_nrremret => pr_nrremret
                                   ,pr_intipmvt => 2) LOOP
        --Selecionar cadastro emissao bloquetos
        OPEN cr_crapceb (pr_cdcooper => rw_craprtc.cdcooper
                        ,pr_nrdconta => rw_craprtc.nrdconta
                        ,pr_nrconven => rw_craprtc.nrcnvcob);
        FETCH cr_crapceb INTO rw_crapceb;
        --Verificar se encontrou
        vr_flgcrapceb:= cr_crapceb%FOUND;
        --Se encontrou
        IF vr_flgcrapceb THEN
          --Fechar Cursor
          CLOSE cr_crapceb;
          --Indicador arquivo Cobranca
          vr_inarqcbr:= rw_crapceb.inarqcbr;
        ELSE
          --Fechar Cursor
          CLOSE cr_crapceb;
          --Indicador arquivo Cobranca
          vr_inarqcbr:= 0;
        END IF;
        /* Recebe Arq.Retorno ? (2 Sim) */
        IF vr_inarqcbr <> 2 THEN
          --Proximo registro
          CONTINUE;
        END IF;

        /* Localiza o banco */
        OPEN cr_crapcco (pr_cdcooper => rw_craprtc.cdcooper
                        ,pr_nrconven => rw_craprtc.nrcnvcob);
        FETCH cr_crapcco INTO rw_crapcco;
        IF cr_crapcco%FOUND THEN
          --Recuperar Banco e Carteira
          vr_cddbanco:= gene0002.fn_mask(rw_crapcco.cddbanco,'999');
          vr_cdcartei:= rw_crapcco.cdcartei;
          vr_nrdctabb:= rw_crapcco.nrdctabb;
        ELSE
          vr_cddbanco:= '000';
          vr_cdcartei:= '0';
          vr_nrdctabb:= 0;
        END IF;
        --Fechar Cursor
        IF cr_crapcco%ISOPEN THEN
          CLOSE cr_crapcco;
        END IF;

        --Primeiro registro conta --FIRST-OF(craprtc.nrdconta)
        IF rw_craprtc.nrseqcta = 1 THEN
          --Limpar tabela memoria
          pr_tab_arq_cobranca.DELETE;
          --Nome Arquivo Convenio
          vr_nmarqcnv:= rw_craprtc.nmarquiv || '_'||
                        gene0002.fn_mask(rw_craprtc.nrdconta,'99999999')||'_'||
                        gene0002.fn_mask(rw_craprtc.nrcnvcob,'99999999')||'_'||
                        gene0002.fn_busca_time || '.ret';
          --Buscar diretorio arquivos
          vr_caminho:= gene0001.fn_diretorio(pr_tpdireto => 'C' --> Usr/Coop
                                            ,pr_cdcooper => pr_cdcooper
                                            ,pr_nmsubdir => 'arq');
	        -- Retornar nome do módulo logado - 15/12/2017 - Chamado 779415
		      GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_gera_arq_coop_cnab240');
          --Nome arquivo
          vr_nmarqind:= vr_caminho ||'/'|| vr_nmarqcnv;
          --Zerar quantidade registro
          vr_qtregist:= 0;

          /* Localizar  Pessoa */
          OPEN cr_crapass (pr_cdcooper => rw_craprtc.cdcooper
                          ,pr_nrdconta => rw_craprtc.nrdconta);
          FETCH cr_crapass INTO rw_crapass;
          --Fechar Cursor
          CLOSE cr_crapass;
          /* Verifica Digito da Conta Mantenedora */
          vr_cdageman:= to_number(gene0002.fn_mask(rw_crapcop.cdagectl,'9999')||'0');
          vr_flgdigok:= GENE0005.fn_calc_digito (pr_nrcalcul => vr_cdageman);
	        -- Retornar nome do módulo logado - 15/12/2017 - Chamado 779415
		      GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_gera_arq_coop_cnab240');

          --Hora geracao
          vr_horagera:= to_char(SYSDATE,'HH24MISS');

          -- Inicializar o CLOB
          dbms_lob.createtemporary(vr_des_xml, TRUE);
          dbms_lob.open(vr_des_xml, dbms_lob.lob_readwrite);

          /******** HEADER DO ARQUIVO ************/
          vr_setlinha:= gene0002.fn_mask(vr_cddbanco,'999') ||   /* Banco*/
                        '0000'||                                 /* Lote */
                        '0' ||                                   /* Tp Registro */
                        '         '||                            /* Brancos (9) */
                        rw_crapass.inpessoa||                    /* Tp Inscricao */
                        gene0002.fn_mask(rw_crapass.nrcpfcgc,'99999999999999')|| /* CNPJ/CPF */
                        gene0002.fn_mask(rw_craprtc.nrcnvcob,'999999999')||
                        '0000'||
                        '       '||                            /* Nr Convenio (20) */
                        gene0002.fn_mask(vr_cdageman,'999999')|| /* Age Mantenedora*/
                        gene0002.fn_mask(rw_crapass.nrdconta,'9999999999999')|| /* Cta+Dig */
                        ' '||                                /* Dig Verf Age/Cta */
                        substr(rpad(rw_crapass.nmprimtl,30,' '),1,30)||  /* Nome Empresa */
                        substr(rpad(rw_crapcop.nmextcop,30,' '),1,30)||  /* Nome Banco */
                        '          '||                       /* 15.0 */
                        '2'||                                /* 16.0 */
                        to_char(SYSDATE,'DDMMYYYY')||        /* 17.0 */
                        gene0002.fn_mask(vr_horagera,'999999')||     /* 18.0 */
                        gene0002.fn_mask(rw_craprtc.nrremret,'999999')||     /* 19.0 */
                        '084'||                                  /* 20.0 */
                        '00000'||                                /* 21.0 */
                        LPAD(' ',20,' ')||                       /* 22.0 */
                        LPAD(' ',20,' ')||                       /* 23.0 */
                        LPAD(' ',29,' ')||                       /* 24.0 */
                        chr(13) || chr(10);
          --Escrever Header no arquivo
          pc_escreve_xml(vr_setlinha);
          pc_escreve_tab(pr_idorigem,vr_setlinha);
          /******** HEADER DO LOTE ************/
          vr_setlinha:= gene0002.fn_mask(vr_cddbanco,'999')||    /* Banco*/
                        '0000'||                                 /* Lote */
                        '1'||                                    /* Tp Registro */
                        'T'||                                    /* Tp Operacao */
                        '01'||                                   /* Tp Servico */
                        '  '||                                   /* FEBRABAN (2) */
                        '043'||                                  /* Versao Layout */
                        ' '||                                    /* FEBRABAN (1) */
                        rw_crapass.inpessoa||                    /* Tp Inscricao */
                        gene0002.fn_mask(rw_crapass.nrcpfcgc,'999999999999999')|| /* Nr Insc */
                        gene0002.fn_mask(rw_craprtc.nrcnvcob,'999999999')||
                        '0000'||
                        '       '||                              /* Nr Convenio (20) */
                        gene0002.fn_mask(vr_cdageman,'999999')|| /* Age Mantenedora*/
                        gene0002.fn_mask(rw_crapass.nrdconta,'9999999999999')|| /* Cta+Dig */
                        ' '||                                    /* Dig Verf Age/Cta */
                        substr(rpad(rw_crapass.nmprimtl,30,' '),1,30)||  /* Nome Empresa */
                        lpad(' ',40,' ')||                       /* Mensagem 1 */
                        lpad(' ',40,' ')||                       /* Mensagem 2 */
                        gene0002.fn_mask(rw_craprtc.nrremret,'99999999')|| /* Nr Rem/Ret */
                        to_char(SYSDATE,'DDMMYYYY')||                        /* Dt Gravacao */
                        to_char(rw_craprtc.dtmvtolt,'DDMMYYYY')||            /* Dt Credito */
                        lpad(' ',33,' ')||                                 /* FEBRABAN (33) */
                        chr(13) || chr(10);
          --Escrever Header no arquivo
          pc_escreve_xml(vr_setlinha);
          pc_escreve_tab(pr_idorigem,vr_setlinha);
        END IF; --FIRST-OF
	      -- Retornar nome do módulo logado - 15/12/2017 - Chamado 779415
		    GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_gera_arq_coop_cnab240');

        /* condicao especifica ref. aos boletos 085 baixados
          para envio "PROTESTO" - os cooperados nao receberao
          o retorno destes titulos baixados com motivo "09" */
        vr_boleto_protestado := 
           rw_crapcco.dsorgarq = 'IMPRESSO PELO SOFTWARE' AND
           rw_crapcco.cddbanco = 085                      AND
           rw_craprtc.cdocorre = 9                        AND
           rw_craprtc.cdmotivo = '09';

        if not vr_boleto_protestado then
        --Valor da tarifa
        vr_vltarifa:= rw_craprtc.vltarass;

        /* Verifica Digito da Conta Mantenedora */
        vr_cdagerec:= to_number(gene0002.fn_mask(rw_craprtc.cdagerec,'9999')||'0');
        vr_flgdigok:= GENE0005.fn_calc_digito (pr_nrcalcul => vr_cdagerec);

        --Inicializar variaveis
        vr_dtvencto:= NULL;
        vr_dsusoemp:= NULL;
        vr_dsdoccop:= NULL;
        vr_cdtpinsc:= 0;
        vr_nrinssac:= 0;
        vr_nmdsacad:= NULL;

        --Selecionar Cobrancas
        OPEN cr_crapcob (pr_cdcooper => rw_craprtc.cdcooper
                        ,pr_cdbandoc => rw_crapcco.cddbanco
                        ,pr_nrdctabb => rw_crapcco.nrdctabb
                        ,pr_nrdconta => rw_craprtc.nrdconta
                        ,pr_nrcnvcob => rw_craprtc.nrcnvcob
                        ,pr_nrdocmto => rw_craprtc.nrdocmto);
        FETCH cr_crapcob INTO rw_crapcob;
        vr_flgcrapcob:= cr_crapcob%FOUND;
        --Se Encontrou
        IF vr_flgcrapcob THEN
          --Data Vencimento
          vr_dtvencto:= rw_crapcob.dtvencto;
          --Descricao Uso
          vr_dsusoemp:= rw_crapcob.dsusoemp;
          --Documento do Cooperado
          vr_dsdoccop:= rw_crapcob.dsdoccop;
          --Selecionar Sacados da Cobranca
          OPEN cr_crapsab (pr_cdcooper => rw_crapcob.cdcooper
                          ,pr_nrdconta => rw_crapcob.nrdconta
                          ,pr_nrinssac => rw_crapcob.nrinssac);
          FETCH cr_crapsab INTO rw_crapsab;
          --Se Encontrou
          IF cr_crapsab%FOUND THEN
            --Informacoes Sacado
            vr_cdtpinsc:= rw_crapsab.cdtpinsc;
            vr_nrinssac:= rw_crapsab.nrinssac;
            vr_nmdsacad:= REPLACE(rw_crapsab.nmdsacad,'&','E');
          END IF;
          --Fechar Cursor
          CLOSE cr_crapsab;
        END IF;
        --Fechar Cursor
        CLOSE cr_crapcob;
        --Incrementar qdade registros
        vr_qtregist:= nvl(vr_qtregist,0) + 1;
        --Data Vencimento
        IF vr_dtvencto IS NULL THEN
          vr_dsvencto:= '00000000';
        ELSE
          vr_dsvencto:= TO_CHAR(vr_dtvencto,'DDMMYYYY');
        END IF;
        /******** SEGMENTO "T" ************/
        vr_setlinha:= gene0002.fn_mask(rw_crapcco.cddbanco,'999')||           /* 01.3T */
                      '0000'||                                     /* Lote Servico */
                      '3'||                                          /* Tp Registro */
                      gene0002.fn_mask(vr_qtregist,'99999')||         /* Qtde Reg Lote */
                      'T'||                                            /* Cod Regis. Det. */
                      ' '||                                           /* 06.3T */
                      gene0002.fn_mask(rw_craprtc.cdocorre,'99')||            /* Cod Retorno */
                      gene0002.fn_mask(vr_cdageman,'999999')||        /* 08.3T / 09.3T */
                      gene0002.fn_mask(rw_craprtc.nrdconta,'9999999999999')|| /* 10.3T / 11.3T */
                      '0'||                                            /* 12.3T */
                      SUBSTR(rpad(NVL(rw_craprtc.nrnosnum, ' '),20,' '),1,20)||         /* 13.3T */
                      gene0002.fn_mask(SubStr(to_char(vr_cdcartei),1,1),'9')|| /* Cod. Carteira */
                      gene0002.fn_mask(vr_dsdoccop,'999999999999999')|| /* Nr Doc Cobr. */
                      substr(rpad(vr_dsvencto,8,' '),1,8)||           /* Dt Vencto */
                      gene0002.fn_mask(rw_craprtc.vltitulo * 100,'999999999999999')|| /* 17.3T */
                      gene0002.fn_mask(rw_craprtc.cdbcorec,'999')||             /* 18.3T */
                      gene0002.fn_mask(vr_cdagerec,'999999')||          /* 19.3T + 20.3T */
                      substr(rpad(nvl(vr_dsusoemp,' '),25,' '),1,25)||           /* 21.3T */
                      '9'||                                              /* 22.3T */
                      gene0002.fn_mask(vr_cdtpinsc,'99')||              /* 23.3T */
                      gene0002.fn_mask(vr_nrinssac,'999999999999999')|| /* 24.3T SAB */
                      substr(rpad(nvl(vr_nmdsacad,' '),40,' '),1,40)||           /* 25.3T */
                      LPAD('0',10,'0')||                                /* 26.3T */
                      gene0002.fn_mask(vr_vltarifa * 100,'999999999999999')|| /* 27.3T */
                      substr(rpad(NVL(rw_craprtc.cdmotivo,' '),10,' '),1,10)||     /* 28.3T */
                      rpad(' ',17,' ')||                                  /* 29.3T */
                      chr(13) || chr(10);
	      -- Retornar nome do módulo logado - 15/12/2017 - Chamado 779415
		    GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_gera_arq_coop_cnab240');
        --Escrever no arquivo
        pc_escreve_xml(vr_setlinha);
        pc_escreve_tab(pr_idorigem,vr_setlinha);

        --Incrementar qdade registro
        vr_qtregist:= nvl(vr_qtregist,0) + 1;
        --Data Ocorrencia Nula
        IF rw_craprtc.dtocorre IS NULL THEN
           vr_dtocorre:= '00000000';
        ELSE
           vr_dtocorre:= TO_CHAR(rw_craprtc.dtocorre,'DDMMYYYY');
        END IF;
        --Data Credito Nula
        IF rw_craprtc.dtcredit IS NULL THEN
           vr_dtcredit:= '00000000';
        ELSE
           vr_dtcredit:= TO_CHAR(rw_craprtc.dtcredit,'DDMMYYYY');
        END IF;
        --Preencher Correspondencia com zeros
        vr_correspo:= rpad('0',23,'0');

        /* Informacao quando houver banco correspondente */
        IF vr_flgcrapcob AND TRIM(rw_crapcob.cdtitprt) IS NOT NULL AND
           rw_crapcob.cdbandoc = 085 THEN

          -- Buscar cddbanco e nrdctabb para agilizar a pesquisa na crapcob
          OPEN cr_crapcco2 (pr_cdcooper => to_number(gene0002.fn_busca_entrada(1,rw_crapcob.cdtitprt, ';'))
                           ,pr_nrconven => to_number(gene0002.fn_busca_entrada(3,rw_crapcob.cdtitprt, ';')));
          --Posicionar primeiro registro
          FETCH cr_crapcco2 INTO rw_crabcco;
          --Se encontrou
          IF cr_crapcco2%FOUND  THEN
             --Selecionar Cobranca
            OPEN cr_crapcob (pr_cdcooper => to_number(gene0002.fn_busca_entrada(1,rw_crapcob.cdtitprt, ';'))
                            ,pr_cdbandoc => rw_crabcco.cddbanco
                            ,pr_nrdctabb => rw_crabcco.nrdctabb
                            ,pr_nrdconta => to_number(gene0002.fn_busca_entrada(2,rw_crapcob.cdtitprt, ';'))
                            ,pr_nrcnvcob => to_number(gene0002.fn_busca_entrada(3,rw_crapcob.cdtitprt, ';'))
                            ,pr_nrdocmto => to_number(gene0002.fn_busca_entrada(4,rw_crapcob.cdtitprt, ';')));
            FETCH cr_crapcob INTO rw_crabcob;
            --Se Encontrou
            IF cr_crapcob%FOUND THEN
              --Correspondente
              vr_correspo:= gene0002.fn_mask(rw_crabcob.cdbandoc,'999')||
                            lpad(rw_crabcob.nrnosnum,20,'0');
            END IF;
            --Fechar Cursor
            CLOSE cr_crapcob;

          END IF;
          --Fechar Cursor
          CLOSE cr_crapcco2;
        END IF;

        /******** SEGMENTO "U" ************/
        vr_setlinha:= gene0002.fn_mask(rw_crapcco.cddbanco,'999')||             /* 01.3U */
                      '0000'||                                           /* 02.3U */
                      '3'||                                              /* 03.3U */
                      gene0002.fn_mask(vr_qtregist,'99999')||           /* 04.3U */
                      'U'||                                              /* 05.3U */
                      ' '||                                              /* 06.3U */
                      gene0002.fn_mask(rw_craprtc.cdocorre,'99')||              /* 07.3U */
                      gene0002.fn_mask(rw_craprtc.vljurmul * 100,'999999999999999')|| /* 08.3U */
                      gene0002.fn_mask(rw_craprtc.vldescto * 100,'999999999999999')|| /* 09.3U */
                      gene0002.fn_mask(rw_craprtc.vlabatim * 100,'999999999999999')|| /* 10.3U */
                      lpad('0',15,'0')||                                         /* 11.3U */
                      gene0002.fn_mask(rw_craprtc.vlrpagto * 100,'999999999999999')|| /* 12.3U */
                      gene0002.fn_mask(rw_craprtc.vlrliqui * 100,'999999999999999')|| /* 13.3U */
                      gene0002.fn_mask(rw_craprtc.vloutdes * 100,'999999999999999')|| /* 14.3U */
                      gene0002.fn_mask(rw_craprtc.vloutcre * 100,'999999999999999')|| /* 15.3U */
                      vr_dtocorre||                                    /* 16.3U */
                      vr_dtcredit||                                    /* 17.3U */
                      LPAD(' ',4,' ')||                                /* 18.3U */
                      LPAD(' ',8,' ')||                                /* 19.3U */
                      LPAD('0',15,'0')||                               /* 20.3U */
                      LPAD(' ',30,' ')||                               /* 21.3U */
                      rpad(vr_correspo,23,' ')||                       /* 22.3 e 23.3U */
                      LPAD(' ',7,' ')||                                /* 24.3U */
                      chr(13) || chr(10);
	      -- Retornar nome do módulo logado - 15/12/2017 - Chamado 779415
		    GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_gera_arq_coop_cnab240');
        --Escrever no arquivo
        pc_escreve_xml(vr_setlinha);
        pc_escreve_tab(pr_idorigem,vr_setlinha);
        end if;

        --Ultimo registro conta --LAST-OF(craprtc.nrdconta)
        IF rw_craprtc.nrseqcta = rw_craprtc.nrtotcta THEN
          --Contar as cobrancas e somar
          FOR rw_crapcob2 IN cr_crapcob2 (pr_cdcooper => rw_craprtc.cdcooper
                                         ,pr_nrdconta => rw_craprtc.nrdconta
                                         ,pr_nrcnvcob => rw_craprtc.nrcnvcob
                                         ,pr_incobran => 0) LOOP
            --Incrementar quantidade e valor
            vr_qtcobsim:= nvl(vr_qtcobsim,0) + rw_crapcob2.qtdreg;
            vr_vlcobsim:= nvl(vr_vlcobsim,0) + rw_crapcob2.vltitulo;
          END LOOP;
          /******** TRAILER DO LOTE ************/
          vr_setlinha:= gene0002.fn_mask(rw_crapcco.cddbanco,'999')||          /* Bco Compens */
                        '0000'||                                    /* Lote Servico */
                        '5'||                                       /* Tp Registro */
                        '         '||                               /* FEBRABAN (9) */
                        gene0002.fn_mask(vr_qtregist + 2,'999999')||       /* Qtde Reg Lote */
                        gene0002.fn_mask(vr_qtcobsim,'999999')||            /* 06.5 */
                        gene0002.fn_mask(vr_vlcobsim * 100,'99999999999999999')|| /* 07.5 */
                        lpad('0',6,'0')||              /* 08.5 */
                        lpad('0',17,'0')||             /* 09.5 */
                        lpad('0',6,'0')||              /* 10.5 */
                        lpad('0',17,'0')||             /* 11.5 */
                        lpad('0',6,'0')||              /* 12.5 */
                        lpad('0',17,'0')||             /* 13.5 */
                        lpad(' ',8,' ')||              /* 14.5 */
                        lpad(' ',117,' ')||            /* 15.5 */
                        chr(13) || chr(10);
	        -- Retornar nome do módulo logado - 15/12/2017 - Chamado 779415
		      GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_gera_arq_coop_cnab240');
          --Escrever no arquivo
          pc_escreve_xml(vr_setlinha);
          pc_escreve_tab(pr_idorigem,vr_setlinha);
          /******** TRAILER DO ARQUIVO ************/
          vr_setlinha:= gene0002.fn_mask(rw_crapcco.cddbanco,'999')||     /* Bco Compens */
                        '9999'||                                       /* Lote */
                        '9'||                                          /* Tp Registro */
                        LPAD(' ',9,' ')||                              /* FEBRABAN (9) */
                        '000001'||                                     /* Lotes no Arquivo */
                        gene0002.fn_mask(vr_qtregist + 4,'999999')||   /* Qtde Reg. Arq. */
                        '000000'||                                     /* Qtde Cta Concil. */
                        LPAD(' ',205,' ')||                            /* FEBRABAN (205) */
                        chr(10);   -- Retirado caracter 13 para não pular duas linhas ( Renato - Supero )
          --Escrever no arquivo
          pc_escreve_xml(vr_setlinha);
          pc_escreve_tab(pr_idorigem,vr_setlinha);

          /** Fim do Arquivo */
          /*
          DBMS_XSLPROCESSOR.CLOB2FILE(vr_des_xml, vr_caminho, vr_nmarqcnv, 0);
          */

          --Criar o arquivo no diretorio especificado
          gene0002.pc_clob_para_arquivo(pr_clob     => vr_des_xml
                                       ,pr_caminho  => vr_caminho
                                       ,pr_arquivo  => vr_nmarqcnv
                                       ,pr_des_erro => vr_dscritic);
          IF trim(vr_dscritic) IS NOT NULL THEN
            RAISE vr_exc_erro;
          END IF;
	        -- Retornar nome do módulo logado - 15/12/2017 - Chamado 779415
		      GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_gera_arq_coop_cnab240');

          --Buscar path diretorio salvar
          vr_caminho_salvar:= gene0001.fn_diretorio(pr_tpdireto => 'C' --> Usr/Coop
                                                   ,pr_cdcooper => pr_cdcooper
                                                   ,pr_nmsubdir => 'salvar');
	        -- Retornar nome do módulo logado - 15/12/2017 - Chamado 779415
		      GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_gera_arq_coop_cnab240');

          -- Liberando a mem?ria alocada pro CLOB
          dbms_lob.close(vr_des_xml);
          dbms_lob.freetemporary(vr_des_xml);

          -- Se origem não for IB ou for envio de arquivo via FTP
          IF pr_idorigem <> 3         OR 
						 rw_crapceb.inenvcob = 2  THEN
						 
	          -- Se origem não for IB e for envio de arquivo via FTP
					  IF (pr_idorigem <> 3 AND 
						    rw_crapceb.inenvcob = 2) THEN
								
							-- Diretório da Cooperativa
							vr_dir_coop := gene0001.fn_diretorio(pr_tpdireto => 'C' --> /usr/coop
																			            ,pr_cdcooper => pr_cdcooper);
								 
			        -- Caminho script que envia/recebe via FTP os arquivos de cobrança
							vr_script_cobr := GENE0001.fn_param_sistema(pr_nmsistem => 'CRED'
																												 ,pr_cdcooper => '0'
																												 ,pr_cdacesso => 'SCRIPT_ENV_REC_ARQ_CUST');
				      
							vr_serv_ftp := GENE0001.fn_param_sistema(pr_nmsistem => 'CRED'
																											,pr_cdcooper => '0'
																											,pr_cdacesso => 'CUST_CHQ_ARQ_SERV_FTP'); 
				                                                
							vr_user_ftp := GENE0001.fn_param_sistema(pr_nmsistem => 'CRED'
																											,pr_cdcooper => '0'
																											,pr_cdacesso => 'CUST_CHQ_ARQ_USER_FTP');
				                                              
							vr_pass_ftp := GENE0001.fn_param_sistema(pr_nmsistem => 'CRED'
																											,pr_cdcooper => '0'
																											,pr_cdacesso => 'CUST_CHQ_ARQ_PASS_FTP');   

	            -- Retornar nome do módulo logado - 15/12/2017 - Chamado 779415
		          GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_gera_arq_coop_cnab240');  

							vr_dir_retorno := '/' ||TRIM(rw_crapcop.dsdircop)   ||
																'/' || TRIM(to_char(pr_nrdconta)) || '/RETORNO';                                                                              

							-- Copia Arquivo de cobrança para Servidor FTP
							vr_comando := vr_script_cobr                                 || ' ' ||
							'-envia'                                                     || ' ' || 
							'-srv '         || vr_serv_ftp                               || ' ' || -- Servidor
							'-usr '         || vr_user_ftp                               || ' ' || -- Usuario
							'-pass '        || vr_pass_ftp                               || ' ' || -- Senha
							'-arq '         || CHR(39) || vr_nmarqcnv || CHR(39)         || ' ' || -- Arquivo de cobrança
							'-dir_local '   || vr_dir_coop || '/arq'                  || ' ' || -- /usr/coop/<cooperativa>/arq
							'-dir_remoto '  || vr_dir_retorno                            || ' ' || -- /<conta do cooperado>/RETORNO 
							'-salvar '      || vr_dir_coop || '/salvar'                  || ' ' || -- /usr/coop/<cooperativa>/salvar  
							'-log '         || vr_dir_coop || '/log/envio_arq_cob_ftp.log';          -- /usr/coop/<cooperativa>/log/cst_por_arquivo.log

							GENE0001.pc_OScommand(pr_typ_comando => 'S'
																	 ,pr_des_comando => vr_comando
																	 ,pr_typ_saida   => vr_typ_saida
																	 ,pr_des_saida   => vr_dscritic
																	 ,pr_flg_aguard  => 'S');
							-- Se ocorreu erro dar RAISE
							IF vr_typ_saida = 'ERR' THEN
                --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
                --Montar mensagem de erro
                vr_cdcritic:= 1114; --Nao foi possivel executar comando unix
                vr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic)||' '||vr_comando;
								RAISE vr_exc_erro;
          END IF;
	            -- Retornar nome do módulo logado - 15/12/2017 - Chamado 779415
		          GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_gera_arq_coop_cnab240');

   					ELSE
						 
            --Se possui cadastro emissao bloquetos
            IF vr_flgcrapceb THEN
              --Selecionar Cadastro email
              OPEN cr_crapcem (pr_cdcooper => pr_cdcooper
                              ,pr_nrdconta => rw_crapceb.nrdconta
                              ,pr_idseqttl => 1
                              ,pr_cddemail => rw_crapceb.cddemail);
              --Primeiro registro
              FETCH cr_crapcem INTO rw_crapcem;
              --Se Encontrou
              IF cr_crapcem%FOUND THEN
                --Fechar Cursor
                CLOSE cr_crapcem;

                -- ux2dos
                GENE0003.pc_converte_arquivo(pr_cdcooper => pr_cdcooper                  --> Cooperativa
                                            ,pr_nmarquiv => vr_caminho||'/'||vr_nmarqcnv --> Caminho e nome do arquivo a ser convertido
                                            ,pr_nmarqenv => vr_nmarqcnv                  --> Nome desejado para o arquivo convertido
                                            ,pr_des_erro => vr_dscritic);                --> Retorno da critica
                --Se ocorreu erro
                IF vr_dscritic IS NOT NULL THEN
                  --Levantar Excecao
                  RAISE vr_exc_erro;
                END IF;
	              -- Retornar nome do módulo logado - 15/12/2017 - Chamado 779415
		            GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_gera_arq_coop_cnab240');

                -- Obter caminho do /converte
                vr_caminho := gene0001.fn_diretorio(pr_tpdireto => 'C' --> Usr/Coop
                                                   ,pr_cdcooper => pr_cdcooper
                                                   ,pr_nmsubdir => 'converte');
									vr_remanexo := 'N';
									vr_arqanexo := vr_caminho ||'/'||vr_nmarqcnv;
									-- Se for envio via ftp
									IF (pr_idorigem = 3 AND 
											rw_crapceb.inenvcob = 2) THEN

										vr_nmarqzip := REPLACE(vr_nmarqcnv, '.ret', '') || '.zip';

										vr_remanexo := 'S';

										-- Compactar arquivo
										gene0002.pc_zipcecred(pr_cdcooper => pr_cdcooper   --> Cooperativa
																				 ,pr_tpfuncao => 'A'           --> Função a ser executada pela rotina
																				 ,pr_dsorigem => vr_caminho||'/'||vr_nmarqcnv --> Lista de arquivos para zipar (sep. por espaço)
																				 ,pr_dsdestin => vr_caminho_salvar||'/'||vr_nmarqzip --> Arquivo final .zip
																				 ,pr_dspasswd => NULL          --> Password a incluir
																				 ,pr_des_erro => vr_dscritic); --> Retorno da critica
										--Se ocorreu erro
										IF vr_dscritic IS NOT NULL THEN
											--Levantar Excecao
											RAISE vr_exc_erro;
										END IF;
	                  -- Retornar nome do módulo logado - 15/12/2017 - Chamado 779415
		                GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_gera_arq_coop_cnab240');
										
										-- Passa o nome do arquivo zipado
										vr_arqanexo := vr_caminho_salvar||'/'||vr_nmarqzip;
									
									END IF;

                --Enviar Email
                gene0003.pc_solicita_email(pr_cdcooper        => pr_cdcooper
                                          ,pr_cdprogra        => pr_cdprogra
                                          ,pr_des_destino     => rw_crapcem.dsdemail
                                          ,pr_des_assunto     => 'ARQUIVO DE COBRANCA DA '|| rw_crapcop.nmrescop
                                          ,pr_des_corpo       => NULL
																						,pr_des_anexo       => vr_arqanexo
																						,pr_flg_remove_anex => vr_remanexo --> Remover os anexos passados
                                          ,pr_flg_remete_coop => 'N' --> Se o envio serÃÂ¡ do e-mail da Cooperativa
                                          ,pr_flg_enviar      => 'N' --> Enviar o e-mail na hora
                                          ,pr_flg_log_batch   => 'N' --> Incluir inf. no log
                                          ,pr_des_erro        => vr_dscritic);
                --Se ocorreu erro
									IF trim(vr_dscritic) IS NOT NULL THEN
                  --Levantar Excecao
                  RAISE vr_exc_erro;
                END IF;
	              -- Retornar nome do módulo logado - 15/12/2017 - Chamado 779415
		            GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_gera_arq_coop_cnab240');
              END IF;
              --Fechar Cursor
              IF cr_crapcem%ISOPEN THEN
                CLOSE cr_crapcem;
              END IF;
            END IF;
          END IF;
          END IF;
          -- Comando para remover arquivos no diretorio integracao
          vr_comando:= 'mv '||vr_nmarqind||' '||vr_caminho_salvar||' 2> /dev/null';

          --Executar o comando no unix
          GENE0001.pc_OScommand(pr_typ_comando => 'S'
                               ,pr_des_comando => vr_comando
                               ,pr_typ_saida   => vr_typ_saida
                               ,pr_des_saida   => vr_dscritic);
          --Se ocorreu erro dar RAISE
          IF vr_typ_saida = 'ERR' THEN
            --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
            --Montar mensagem de erro
            vr_cdcritic:= 1114; --Nao foi possivel executar comando unix
            vr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic)||' '||vr_comando;
            RAISE vr_exc_erro;
          END IF;
	        -- Retornar nome do módulo logado - 15/12/2017 - Chamado 779415
		      GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_gera_arq_coop_cnab240');
        END IF; --LAST-OF
      END LOOP;

          --Se processou nao for nulo
          IF pr_flgproce IN (0,1) THEN
            /** Define o registro como "Processado" **/
            BEGIN
          UPDATE craprtc 
             SET craprtc.flgproce = 1
           WHERE craprtc.cdcooper = pr_cdcooper
             AND craprtc.nrcnvcob = pr_nrcnvcob
             AND craprtc.nrdconta = pr_nrdconta
             AND craprtc.dtmvtolt = pr_dtmvtoan
             AND craprtc.nrremret = pr_nrremret
             AND craprtc.intipmvt = 2
             AND EXISTS(SELECT 1
                          FROM crapret
                         WHERE crapret.cdcooper = craprtc.cdcooper
                           AND crapret.nrdconta = craprtc.nrdconta
                           AND crapret.nrcnvcob = craprtc.nrcnvcob
                           AND crapret.dtocorre = craprtc.dtmvtolt
                           AND crapret.nrremret = (SELECT MAX(ret.nrremret)                           
                                                     FROM crapret ret
                                                    WHERE ret.cdcooper = craprtc.cdcooper
                                                      AND ret.nrdconta = craprtc.nrdconta
                                                      AND ret.nrcnvcob = craprtc.nrcnvcob
                                                      AND ret.dtocorre = craprtc.dtmvtolt
                                                      AND ret.nrretcoo = craprtc.nrremret)); 
            EXCEPTION
              WHEN OTHERS THEN
                -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
                CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);   
                -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
                vr_cdcritic := 1035;
                vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                             'CRAPRTC(47):' ||
                             ' flgproce:'   || '1' ||
                             '. ' ||sqlerrm;
                RAISE vr_exc_erro;
            END;
          END IF;
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);
    EXCEPTION
      -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
      -- Disparadores: paga0001.pc_gera_arq_cooperado          - Grava TBGEN
      WHEN vr_exc_erro THEN
        pr_cdcritic:= vr_cdcritic;
        pr_dscritic:= vr_dscritic||
                      vr_dsparame;
      WHEN OTHERS THEN
        -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
        CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);   
        -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        pr_cdcritic:= 9999;
        pr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic)|| 
                      'PAGA0001.pc_gera_arq_coop_cnab240. ' || SQLERRM ||
                      '.' || vr_dsparame;
    END;
  END pc_gera_arq_coop_cnab240;

  /* Procedure para Gerar arquivo para cooperado cnab400 */
  PROCEDURE pc_gera_arq_coop_cnab400 (pr_cdcooper IN crapcop.cdcooper%TYPE   --Codigo Cooperativa
                                     ,pr_nrcnvcob IN crapcob.nrcnvcob%TYPE   --Numero Convenio
                                     ,pr_nrdconta IN crapcob.nrdconta%TYPE   --Numero da Conta
                                     ,pr_dtmvtoan IN crapdat.dtmvtolt%TYPE   --Data anterior
                                     ,pr_idorigem IN INTEGER                 --Identificador Origem
                                     ,pr_flgproce IN INTEGER                 --Flag Processo
                                     ,pr_cdprogra IN crapprg.cdprogra%TYPE   --Nome Programa
                                     ,pr_nrremret IN craprtc.nrremret%TYPE   --Num Rem/Ret Cobranca
                                     ,pr_tab_arq_cobranca OUT PAGA0001.typ_tab_arq_cobranca --Tabela Cobranca
                                     ,pr_cdcritic OUT INTEGER                --Codigo da Critica
                                     ,pr_dscritic OUT VARCHAR2) IS           --Descricao da critica
    -- .........................................................................
    --
    --  Programa : pc_gera_arq_coop_cnab400           Antigo: b1wgen0090.p/gera_arq_cooperado_cnab400
    --  Sistema  : Cred
    --  Sigla    : PAGA0001
    --  Autor    : Alisson C. Berrido - AMcom
    --  Data     : Novembro/2013.                   Ultima atualizacao: 27/08/2018
    --
    --  Dados referentes ao programa:
    --
    --   Frequencia: Sempre que for chamado
    --   Objetivo  : Procedure para gerar arquivo cobranca cooperado
    --
    --   Alteracoes: 14/03/2014 - Converter o arquivo ux2dos antes de enviar por e-mail
    --                            (Gabriel).
    --
    --               29/05/2014 - Incluso CHR(10) no final linhas a serem geradas e
    --                            alterado uso do DBMS_XSLPROCESSOR.CLOB2FILE pelo
    --                            gene0002.pc_clob_para_arquivo conforme solicitacao
    --                            Marcos. (Daniel Z.)
    --
    --               06/08/2014 - Retirar caracteres acentuados do arquivo de retorno
    --                            (Odirlei - AMcom SD185976)
    --
    --               27/11/2014 - Ajustado tratamento apos a leitura na tabela crapceb
    --                            conforme no progress, arquivo não estava sendo gerado (SD 226883 - Odilei/Amcom)
    --
    --               08/01/2015 - Alterar a tabela na qual o campo nrremret é lido, de forma a
    --                            ser lido como no progress. SoftDesk 225722 (Renato - Supero)
    --
    --               25/03/2015 - Foi adicionado a função NVL nos campos (vr_dsusoemp e vr_dsseunum)
    --                            e também foi removido dois caracters na hora de popular os campos
    --                            (vr_dtcredit e vr_dtocorre). SD 267561 (Kelvin)
    --
    --               09/07/2015 - Ajustado bloco de títulos baixados, após a rotina que gera o
    --                            registro header do arquivo de retorno. (Rafael)
    --
    --               13/11/2015 - Incluido tratamento para remover acentuacao na pc_escreve_tab 
    --                            SD358050 (Odirlei-AMcom))
	--
    --               29/01/2016 - Ajuste que seja considerado no relacionamento entre
    --                            as tabelas craprtc e crapret as datas de movimento e ocorrencia
    --                            (Adriano - SD 391157).
    --
    --		         22/09/2016 - Ajuste nos cursores que buscam títulos em aberto para arquivo de retorno (Rodrigo)
    --
    --               23/03/2017 - Adicionar NVL no campo de nosso numero (Douglas - Chamado 629181)
    --				
    --               15/12/2017 - Incluido nome do módulo logado
    --                            No caso de erro de programa gravar tabela especifica de log                     
    --                            Ajuste mensagem de erro 
    --                           (Belli - Envolti - Chamado 779415)
	--
    --               27/08/2018 - Adicionar NVL nos campos cdbcorec e cdagerec. Incluir pc_internal_exception
    --                            e informações da conta na exception when others. (PRB0040285-AJFink)
    --
    --               29/08/2018 - Revitalização Sistemas - Ajuste para update unico (Andreatta-Mouts)    
    -- .........................................................................

  BEGIN
    DECLARE
      --Cursores Locais
      CURSOR cr_craprtc (pr_cdcooper IN craprtc.cdcooper%type
                        ,pr_nrcnvcob IN craprtc.nrcnvcob%type
                        ,pr_nrdconta IN craprtc.nrdconta%type
                        ,pr_dtmvtolt IN craprtc.dtmvtolt%type
                        ,pr_nrremret IN craprtc.nrremret%TYPE
                        ,pr_intipmvt IN craprtc.intipmvt%TYPE) IS
        SELECT craprtc.cdcooper
              ,craprtc.nrcnvcob
              ,craprtc.nrdconta
              ,craprtc.dtmvtolt
              ,craprtc.nmarquiv
              ,crapret.cdocorre
              ,crapret.cdmotivo
              ,craprtc.nrremret
              ,crapret.vltarass
              ,nvl(crapret.cdagerec,0) cdagerec
              ,crapret.nrdocmto
              ,crapret.nrnosnum
              ,crapret.vltitulo
              ,nvl(crapret.cdbcorec,0) cdbcorec
              ,crapret.dtocorre
              ,crapret.dtcredit
              ,crapret.vljurmul
              ,crapret.vldescto
              ,crapret.vlabatim
              ,crapret.vlrpagto
              ,crapret.vlrliqui
              ,crapret.vloutdes
              ,crapret.vloutcre
              ,Count(1) OVER (PARTITION BY craprtc.nrdconta) nrtotcta
              ,Row_Number() OVER (PARTITION BY craprtc.nrdconta
                                  ORDER BY craprtc.nrdconta
                                          ,crapret.cdocorre
                                          ,craprtc.nrremret
                                          ,crapret.nrretcoo
                                          ,crapret.nrseqreg) nrseqcta
        FROM craprtc
            ,crapret
        WHERE  craprtc.cdcooper = pr_cdcooper
        AND    craprtc.nrcnvcob = pr_nrcnvcob
        AND    craprtc.nrdconta = pr_nrdconta
        AND    craprtc.dtmvtolt = pr_dtmvtolt
        AND    craprtc.nrremret = pr_nrremret
        AND    craprtc.intipmvt = pr_intipmvt
        AND   crapret.cdcooper = craprtc.cdcooper
        AND   crapret.nrdconta = craprtc.nrdconta
        AND   crapret.nrcnvcob = craprtc.nrcnvcob
        AND   crapret.cdocorre <> 27 /* alt de outros dados */
        AND   crapret.dtocorre = craprtc.dtmvtolt
		AND   crapret.nrremret = (SELECT MAX(ret.nrremret)
                                   FROM crapret ret
                                  WHERE ret.cdcooper = craprtc.cdcooper
                                  AND ret.nrdconta = craprtc.nrdconta
                                  AND ret.nrcnvcob = craprtc.nrcnvcob
                                  AND ret.dtocorre = craprtc.dtmvtolt
                                  AND ret.nrretcoo = craprtc.nrremret);

      --Selecionar Controle Cobranca
      CURSOR cr_crapceb (pr_cdcooper IN crapceb.cdcooper%type
                        ,pr_nrdconta IN crapceb.nrdconta%type
                        ,pr_nrconven IN crapceb.nrconven%type) IS
        SELECT crapceb.inarqcbr
              ,crapceb.nrdconta
              ,crapceb.cddemail
							,crapceb.inenvcob
        FROM crapceb
        WHERE crapceb.cdcooper = pr_cdcooper
        AND   crapceb.nrdconta = pr_nrdconta
        AND   crapceb.nrconven = pr_nrconven
        ORDER BY crapceb.progress_recid ASC;
      rw_crapceb cr_crapceb%ROWTYPE;
      --Selecionar Cadastro Convenio
      CURSOR cr_crapcco (pr_cdcooper IN crapcco.cdcooper%type
                        ,pr_nrconven IN crapcco.nrconven%type) IS
        SELECT crapcco.dsorgarq
              ,crapcco.cddbanco
              ,crapcco.cdcartei
              ,crapcco.nrdctabb
        FROM crapcco
        WHERE crapcco.cdcooper = pr_cdcooper
        AND   crapcco.nrconven = pr_nrconven;
      rw_crapcco cr_crapcco%ROWTYPE;
      --Selecionar informacoes Cobranca
      CURSOR cr_crapcob (pr_cdcooper IN crapcob.cdcooper%type
                        ,pr_nrdconta IN crapcob.nrdconta%type
                        ,pr_nrcnvcob IN crapcob.nrcnvcob%type
                        ,pr_nrdocmto IN crapcob.nrdocmto%TYPE
                        ,pr_nrdctabb IN crapcob.nrdctabb%TYPE
                        ,pr_cdbandoc IN crapcob.cdbandoc%TYPE) IS
        SELECT crapcob.dtvencto
              ,crapcob.cdcooper
              ,crapcob.nrdconta
              ,crapcob.nrinssac
              ,crapcob.dsusoemp
              ,crapcob.cdtitprt
              ,crapcob.cdbandoc
              ,crapcob.nrnosnum
              ,crapcob.dsdoccop
              ,crapcob.cddespec
        FROM crapcob
        WHERE crapcob.cdcooper = pr_cdcooper
        AND   crapcob.nrdconta = pr_nrdconta
        AND   crapcob.nrcnvcob = pr_nrcnvcob
        AND   crapcob.nrdocmto = pr_nrdocmto
        AND   crapcob.nrdctabb = pr_nrdctabb
        AND   crapcob.cdbandoc = pr_cdbandoc;
      rw_crapcob cr_crapcob%ROWTYPE;
      rw_crabcob cr_crapcob%ROWTYPE;
      --Selecionar Cobrancas
      CURSOR cr_crapcob2 (pr_cdcooper IN crapcob.cdcooper%type
                         ,pr_nrdconta IN crapcob.nrdconta%type
                         ,pr_nrcnvcob IN crapcob.nrcnvcob%TYPE
                         ,pr_incobran IN crapcob.incobran%type) IS
        SELECT crapcob.vltitulo
        FROM crapcob
        WHERE crapcob.cdcooper = pr_cdcooper
        AND   crapcob.nrdconta = pr_nrdconta
        AND   crapcob.nrcnvcob = pr_nrcnvcob
        AND   crapcob.dtdpagto IS NULL
        AND   crapcob.incobran = pr_incobran;
      --Selecionar Cadastro Email
      CURSOR cr_crapcem (pr_cdcooper IN crapcem.cdcooper%type
                        ,pr_nrdconta IN crapcem.nrdconta%type
                        ,pr_idseqttl IN crapcem.idseqttl%type
                        ,pr_cddemail IN crapcem.cddemail%type) IS
        SELECT crapcem.dsdemail
        FROM crapcem
        WHERE crapcem.cdcooper = pr_cdcooper
        AND   crapcem.nrdconta = pr_nrdconta
        AND   crapcem.idseqttl = pr_idseqttl
        AND   crapcem.cddemail = pr_cddemail;
      rw_crapcem cr_crapcem%ROWTYPE;

      --Variaveis Locais
      vr_inarqcbr crapceb.inarqcbr%type;
      vr_nmarqind VARCHAR2(1000);
      vr_qtregist INTEGER;
      vr_cdlocpag INTEGER;
      vr_vltarifa NUMBER;
      vr_cddbanco VARCHAR2(1000);
      vr_cdcartei VARCHAR2(1000);
      vr_cdageman NUMBER;
      vr_cdagerec NUMBER;
      vr_horagera VARCHAR2(1000);
      vr_qtcobsim INTEGER;
      vr_vlcobsim NUMBER;
      vr_dtocorre VARCHAR2(1000);
      vr_dtcredit VARCHAR2(1000);
      vr_dsdemail crapcem.dsdemail%TYPE;
      vr_dsdctitg VARCHAR2(1000);
      vr_dtvencto crapcob.dtvencto%TYPE;
      vr_dsusoemp crapcob.dsusoemp%TYPE;
      vr_cdtpinsc crapsab.cdtpinsc%TYPE;
      vr_nrinssac crapsab.nrinssac%TYPE;
      vr_nmdsacad crapsab.nmdsacad%TYPE;
      vr_dslinha  VARCHAR2(1000);
      vr_cddespec VARCHAR2(100);
      vr_dsseunum VARCHAR2(100);
      vr_cdseqlin INTEGER;
      vr_cdmot400 INTEGER;
      vr_cdret400 INTEGER;
      vr_flgdigok BOOLEAN;
      vr_flgcrapcob BOOLEAN;
      vr_flgcrapceb BOOLEAN;
      vr_typ_saida VARCHAR2(3);
      vr_nmarqcnv VARCHAR2(1000);
			vr_nmarqzip VARCHAR2(1000);
      vr_correspo VARCHAR2(1000);
      vr_dsvencto VARCHAR2(1000);
      vr_comando  VARCHAR2(1000);
      vr_caminho  VARCHAR2(1000);
      vr_caminho_salvar VARCHAR2(1000);
			vr_remanexo VARCHAR2(1) := 'N';
      --Variaveis de erro
      vr_des_erro VARCHAR2(4000);
      vr_cdcritic crapcri.cdcritic%TYPE;
      vr_dscritic VARCHAR2(4000);
      -- Variavel para armazenar as informacoes em XML
      vr_des_xml CLOB;
      --Variaveis de Arquivo
      vr_setlinha VARCHAR2(1000);
      vr_input_file  utl_file.file_type;
		 -- Variáveis para comando ftp
			vr_dir_coop VARCHAR2(4000);	    
			vr_serv_ftp VARCHAR2(100);
			vr_user_ftp VARCHAR2(100);
			vr_pass_ftp VARCHAR2(100);       
			vr_dir_retorno varchar2(4000);	    
			vr_script_cobr varchar2(4000);
			
      --Variaveis de Excecao
      vr_exc_erro EXCEPTION;
      --Agrupa os parametros - 15/12/2017 - Chamado 779415 
      vr_dsparame VARCHAR2(4000);

      --Escrever no arquivo CLOB
      PROCEDURE pc_escreve_xml(pr_des_dados IN VARCHAR2) IS
        vr_des_dados VARCHAR2(32767);
      BEGIN
        -- retirar caracteres acentuados
        vr_des_dados := gene0007.fn_caract_acento(pr_des_dados);
	      -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		    GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_gera_arq_coop_cnab400');      
        --Escrever no arquivo XML
        dbms_lob.writeappend(vr_des_xml,length(vr_des_dados),vr_des_dados);
      EXCEPTION
        WHEN OTHERS THEN
          -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
          CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);  
          -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
          vr_cdcritic := 1139; -- Erro ao gravar clob
          vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                         ' Tabela dbms_lob' ||
                         ', length(vr_des_dados:' || length(vr_des_dados) ||
                         ', vr_des_dados 100 caracteres:'    || SUBSTR(vr_des_dados,1,100) ||
                         ', ' ||sqlerrm;
          --Levantar Excecao
          RAISE vr_exc_erro;
      END;

      --Escrever na tabela Cobranca
      PROCEDURE pc_escreve_tab(pr_idorigem  IN INTEGER
                              ,pr_des_dados IN VARCHAR2) IS
        vr_index PLS_INTEGER;
       vr_des_dados VARCHAR2(32767);
      BEGIN
        --Se for TAA
        IF pr_idorigem = 3 THEN
         -- retirar caracteres acentuados
         vr_des_dados := gene0007.fn_caract_acento(pr_des_dados);
	       -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		     GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_gera_arq_coop_cnab400');      
          --Encontrar proximo registro
          vr_index:= pr_tab_arq_cobranca.count+1;
         pr_tab_arq_cobranca(vr_index):= vr_des_dados;
        END IF;
      EXCEPTION
        WHEN OTHERS THEN
          -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
          CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);  
          -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
          vr_cdcritic := 1044; -- Erro ao gravar arquivo cobranca
          vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                         ' pr_tab_arq_cobranca ' ||
                         ', vr_index:'                     || vr_index ||
                         ', length(vr_des_dados:'         || length(vr_des_dados) ||
                         ', vr_des_dados 100 caracteres:' || SUBSTR(vr_des_dados,1,100) ||
                         ', ' ||sqlerrm;
          --Levantar Excecao
          RAISE vr_exc_erro;
      END;

    BEGIN
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_gera_arq_coop_cnab400');
      --Inicializar variaveis retorno
      pr_cdcritic:= NULL;
      pr_dscritic:= NULL;
      --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
      vr_dsparame :=  ' pr_cdcooper:'  || pr_cdcooper ||
                      ', pr_nrcnvcob:' || pr_nrcnvcob || 
                      ', pr_nrdconta:' || pr_nrdconta || 
                      ', pr_dtmvtoan:' || pr_dtmvtoan || 
                      ', pr_idorigem:' || pr_idorigem || 
                      ', pr_flgproce:' || pr_flgproce || 
                      ', pr_cdprogra:' || pr_cdprogra || 
                      ', pr_nrremret:' || pr_nrremret;
      --Verificar cooperativa
      OPEN cr_crapcop(pr_cdcooper => pr_cdcooper);
      FETCH cr_crapcop INTO rw_crapcop;
      --Se nao encontrou
      IF cr_crapcop%NOTFOUND THEN
        --Fechar Cursor
        CLOSE cr_crapcop;
        --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        vr_cdcritic := 1070; --Registro de cooperativa nao encontrado
        vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
      --Fechar Cursor
      CLOSE cr_crapcop;
      --Selecionar remessas/retorno titulos dos cooperados
      FOR rw_craprtc IN cr_craprtc (pr_cdcooper => pr_cdcooper
                                   ,pr_nrcnvcob => pr_nrcnvcob
                                   ,pr_nrdconta => pr_nrdconta
                                   ,pr_dtmvtolt => pr_dtmvtoan
                                   ,pr_nrremret => pr_nrremret
                                   ,pr_intipmvt => 2) LOOP
        BEGIN
          vr_cdmot400:= TO_NUMBER(SUBSTR(rw_craprtc.cdmotivo,1,2));
        EXCEPTION
          WHEN OTHERS THEN
          vr_cdmot400:= 0;
        END;
        --Codigo retorno
        vr_cdret400:= rw_craprtc.cdocorre;

        /* de CNAB240 -> CNAB400 */
        CASE rw_craprtc.cdocorre
          WHEN 2 THEN /* Entrada */
            /* ent. confirmada DDA */
            IF SUBSTR(rw_craprtc.cdmotivo,1,2) = 'A4' THEN
              vr_cdmot400:= 50;
            ELSE
              vr_cdmot400:= 00;
            END IF;
          WHEN 03 THEN /* entrada rejeitada */
            CASE SUBSTR(rw_craprtc.cdmotivo,1,2)
              WHEN '08' THEN vr_cdmot400:= 01;
              WHEN '29' THEN vr_cdmot400:= 04;
              WHEN '21' THEN vr_cdmot400:= 05;
              WHEN '20' THEN vr_cdmot400:= 08;
              WHEN '16' THEN vr_cdmot400:= 09;
              WHEN '47' THEN vr_cdmot400:= 18;
              WHEN '33' THEN vr_cdmot400:= 24;
              WHEN '45' THEN vr_cdmot400:= 27;
              WHEN '16' THEN vr_cdmot400:= 28;
              WHEN '45' THEN vr_cdmot400:= 30;
              WHEN '38' THEN vr_cdmot400:= 36;
              WHEN '24' THEN vr_cdmot400:= 37;
              WHEN '17' THEN vr_cdmot400:= 38;
              WHEN '04' THEN vr_cdmot400:= 39;
              WHEN '33' THEN vr_cdmot400:= 41;
              WHEN '48' THEN vr_cdmot400:= 42;
              WHEN '34' THEN vr_cdmot400:= 52;
              WHEN '57' THEN vr_cdmot400:= 68;
              WHEN '59' THEN vr_cdmot400:= 69;
              WHEN '08' THEN vr_cdmot400:= 80;
              WHEN '48' THEN vr_cdmot400:= 82;
              WHEN '60' THEN vr_cdmot400:= 84;
              ELSE vr_cdmot400:= 99;
            END CASE;
          WHEN 06 THEN /* Liquidacao */
            CASE SUBSTR(rw_craprtc.cdmotivo,1,2)
              WHEN '08' THEN
                vr_cdret400:= 15;
                vr_cdmot400:= 09;
              ELSE vr_cdmot400:= 01;
            END CASE;
          WHEN 07 THEN /* Conceder desconto */
            vr_cdret400:= 31;
            vr_cdmot400:= 00;
          WHEN 08 THEN /* Cancelar desconto */
            vr_cdret400:= 32;
            vr_cdmot400:= 00;
          WHEN 09 THEN /* Baixa */
            CASE SUBSTR(rw_craprtc.cdmotivo,1,2)
              WHEN '09' THEN /* Baixa automatica */
                vr_cdret400:= 09;
                vr_cdmot400:= 90;
              WHEN '10' THEN /* Baixa por solicitacao */
                vr_cdret400:= 10;
                vr_cdmot400:= 00;
              WHEN '11' THEN /* Baixa por solicitacao */
                vr_cdret400:= 10;
                vr_cdmot400:= 00;
              WHEN '13' THEN /* Baixa por decurso de prazo */
                vr_cdret400:= 09;
                vr_cdmot400:= 90;
              WHEN '14' THEN /* Protestado */
                vr_cdret400:= 09;
                vr_cdmot400:= 15;
              ELSE vr_cdmot400:= 00;
            END CASE;
          WHEN 26 THEN /* instrucao rejeitada */
            CASE SUBSTR(rw_craprtc.cdmotivo,1,2)
              WHEN '08' THEN vr_cdmot400:= 01;
              WHEN '29' THEN vr_cdmot400:= 04;
              WHEN '21' THEN vr_cdmot400:= 05;
              WHEN '20' THEN vr_cdmot400:= 08;
              WHEN '16' THEN vr_cdmot400:= 09;
              WHEN '47' THEN vr_cdmot400:= 18;
              WHEN '33' THEN vr_cdmot400:= 24;
              WHEN '45' THEN vr_cdmot400:= 27;
              WHEN '16' THEN vr_cdmot400:= 28;
              WHEN '45' THEN vr_cdmot400:= 30;
              WHEN '38' THEN vr_cdmot400:= 36;
              WHEN '24' THEN vr_cdmot400:= 37;
              WHEN '17' THEN vr_cdmot400:= 38;
              WHEN '04' THEN vr_cdmot400:= 39;
              WHEN '33' THEN vr_cdmot400:= 41;
              WHEN '48' THEN vr_cdmot400:= 42;
              WHEN '34' THEN vr_cdmot400:= 52;
              WHEN '57' THEN vr_cdmot400:= 68;
              WHEN '59' THEN vr_cdmot400:= 69;
              WHEN '08' THEN vr_cdmot400:= 80;
              WHEN '48' THEN vr_cdmot400:= 82;
              WHEN '60' THEN vr_cdmot400:= 84;
              ELSE vr_cdmot400:= 99;
            END CASE;
          WHEN 28 THEN /* debito de tarifa/custas */
            vr_cdmot400:= 00;
            CASE SUBSTR(rw_craprtc.cdmotivo,1,2)
              WHEN '02' THEN /* Manutencao de titulo vencido */
                vr_cdret400:= 28;
              WHEN '03' THEN /* Despesas de sustacao de protesto */
                vr_cdret400:= 97;
              WHEN '04' THEN /* Despesas de protesto */
                vr_cdret400:= 96;
              WHEN '08' THEN /* Despesas de protesto */
                vr_cdret400:= 96;
              WHEN '09' THEN /* Despesas de sustacao de protesto */
                vr_cdret400:= 97;
              ELSE /* Debito de custas antecipadas */
                vr_cdret400:= 98;
            END CASE;
          WHEN 76 THEN /* Liquidacao */
            CASE SUBSTR(rw_craprtc.cdmotivo,1,2)
              WHEN '08' THEN
                vr_cdret400:= 15;
                vr_cdmot400:= 09;
              ELSE vr_cdmot400:= 01;
            END CASE;
          ELSE NULL;
        END CASE;
        --Selecionar cadastro emissao bloquetos
        OPEN cr_crapceb (pr_cdcooper => rw_craprtc.cdcooper
                        ,pr_nrdconta => rw_craprtc.nrdconta
                        ,pr_nrconven => rw_craprtc.nrcnvcob);
        FETCH cr_crapceb INTO rw_crapceb;
        --Verificar se encontrou
        vr_flgcrapceb:= cr_crapceb%FOUND;
        --Se encontrou
        IF vr_flgcrapceb THEN
          --Fechar Cursor
          CLOSE cr_crapceb;
          --Indicador arquivo Cobranca
          vr_inarqcbr:= rw_crapceb.inarqcbr;
        ELSE
          --Fechar Cursor
          CLOSE cr_crapceb;
          --Indicador arquivo Cobranca
          vr_inarqcbr:= 0;
        END IF;
        /* Recebe Arq.Retorno ? (3 Sim) */
        IF vr_inarqcbr <> 3 THEN
          --Proximo registro
          CONTINUE;
        END IF;

        /* Localiza o banco */
        OPEN cr_crapcco (pr_cdcooper => rw_craprtc.cdcooper
                        ,pr_nrconven => rw_craprtc.nrcnvcob);
        FETCH cr_crapcco INTO rw_crapcco;
        IF cr_crapcco%FOUND THEN
          --Recuperar Banco e Carteira
          vr_cddbanco:= gene0002.fn_mask(rw_crapcco.cddbanco,'999');
          vr_cdcartei:= rw_crapcco.cdcartei;
        ELSE
          vr_cddbanco:= '000';
          vr_cdcartei:= '0';
        END IF;
        --Fechar Cursor
        IF cr_crapcco%ISOPEN THEN
          CLOSE cr_crapcco;
        END IF;

        --Primeiro registro conta --FIRST-OF(craprtc.nrdconta)
        IF rw_craprtc.nrseqcta = 1 THEN
          --Limpar tabela memoria
          pr_tab_arq_cobranca.DELETE;
          --Nome Arquivo Convenio
          vr_nmarqcnv:= rw_craprtc.nmarquiv || '_'||
                        gene0002.fn_mask(rw_craprtc.nrdconta,'99999999')||'_'||
                        gene0002.fn_mask(rw_craprtc.nrcnvcob,'99999999')||'_'||
                        gene0002.fn_busca_time || '.ret';
          --Buscar diretorio arquivos
          vr_caminho:= gene0001.fn_diretorio(pr_tpdireto => 'C' --> Usr/Coop
                                            ,pr_cdcooper => pr_cdcooper
                                            ,pr_nmsubdir => 'arq');
	        -- Retorna nome do módulo logado - 15/12/2017 - Chamado 779415
		      GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_gera_arq_coop_cnab400');
          --Nome arquivo
          vr_nmarqind:= vr_caminho ||'/'|| vr_nmarqcnv;
          --Inicializar quantidade registro
          vr_qtregist:= 1;

          /* Localizar  Pessoa */
          OPEN cr_crapass (pr_cdcooper => rw_craprtc.cdcooper
                          ,pr_nrdconta => rw_craprtc.nrdconta);
          FETCH cr_crapass INTO rw_crapass;
          --Fechar Cursor
          CLOSE cr_crapass;

          /* Verifica Digito da Conta Mantenedora */
          vr_cdageman:= to_number(gene0002.fn_mask(rw_crapcop.cdagectl,'9999')||'0');
          vr_flgdigok:= GENE0005.fn_calc_digito (pr_nrcalcul => vr_cdageman);

          --Hora geracao
          vr_horagera:= to_char(SYSDATE,'HH24MISS');

          -- Inicializar o CLOB
          dbms_lob.createtemporary(vr_des_xml, TRUE);
          dbms_lob.open(vr_des_xml, dbms_lob.lob_readwrite);

          /******** HEADER DO ARQUIVO - CNAB400 ************/
          vr_setlinha:= '0'||                      /* Ident registro header */
                        '2'||                      /* Operacao "2" */
                        'RETORNO'||                /* Fixo "RETORNO" */
                        '01'||                     /* Tipo de servico */
                        'COBRANCA'||               /* Fixo "COBRANCA" */
                        LPAD(' ',7,' ')||          /* Brancos */
                        gene0002.fn_mask(vr_cdageman,'99999')||  /* Age Mantenedora*/
                        gene0002.fn_mask(rw_crapass.nrdconta,'999999999')|| /* Cta+Dig */
                        LPAD('0',6,'0')||          /* ZEROS */
                        substr(rpad(rw_crapass.nmprimtl,30,' '),1,30)||  /* Nome do Cooperado */
                        '085'||                    /* Codigo IF */
                        substr(rpad(rw_crapcop.nmextcop,15,' '),1,15)||   /* Nome Banco */
                        TO_CHAR(SYSDATE,'DDMMYY')|| /* Data da gravacao */
                        gene0002.fn_mask(rw_craprtc.nrremret,'9999999')|| /* Sequencial de retorno */
                        RPAD(' ',42,' ')||         /* BRANCOS */
                        gene0002.fn_mask(rw_craprtc.nrcnvcob,'9999999')|| /* Numero do convenio */
                        RPAD(' ',238,' ')||        /* BRANCOS */
                        '000001'||                 /* Nr sequencial */
                        chr(13) || chr(10);
	        -- Retorna nome do módulo logado - 15/12/2017 - Chamado 779415
		      GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_gera_arq_coop_cnab400');
          --Escrever Header no arquivo
          pc_escreve_xml(vr_setlinha);
          pc_escreve_tab(pr_idorigem,vr_setlinha);
        END IF; --FIRST-OF

        /* condicao especifica ref. aos boletos 085 baixados
          para envio "PROTESTO" - os cooperados nao receberao
          o retorno destes titulos baixados com motivo "09" */
        IF rw_crapcco.dsorgarq = 'IMPRESSO PELO SOFTWARE' AND
           rw_crapcco.cddbanco = 085                      AND
           rw_craprtc.cdocorre = 9                        AND
           rw_craprtc.cdmotivo = '09' THEN
          --Proximo registro loop
          CONTINUE;
        END IF;

        --Valor da tarifa
        vr_vltarifa:= rw_craprtc.vltarass;

        /* Verifica Digito da Conta Mantenedora */
        vr_cdagerec:= to_number(gene0002.fn_mask(rw_craprtc.cdagerec,'9999')||'0');
        vr_flgdigok:= GENE0005.fn_calc_digito (pr_nrcalcul => vr_cdagerec);
	      -- Retorna nome do módulo logado - 15/12/2017 - Chamado 779415
		    GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_gera_arq_coop_cnab400');

        --Inicializar variaveis
        vr_dtvencto:= NULL;
        vr_dsusoemp:= NULL;
        vr_cdtpinsc:= 0;
        vr_nrinssac:= 0;
        vr_nmdsacad:= NULL;
        vr_cddespec:= '99';

        --Selecionar Cobrancas
        OPEN cr_crapcob (pr_cdcooper => rw_craprtc.cdcooper
                        ,pr_nrdconta => rw_craprtc.nrdconta
                        ,pr_nrcnvcob => rw_craprtc.nrcnvcob
                        ,pr_nrdocmto => rw_craprtc.nrdocmto
                        ,pr_nrdctabb => rw_crapcco.nrdctabb
                        ,pr_cdbandoc => rw_crapcco.cddbanco);
        FETCH cr_crapcob INTO rw_crapcob;
        vr_flgcrapcob:= cr_crapcob%FOUND;
        -- Fechar Cursor pois o Found foi atribuido a variável
        CLOSE cr_crapcob;
        --Se Encontrou
        IF vr_flgcrapcob THEN
          --Data Vencimento
          vr_dtvencto:= rw_crapcob.dtvencto;
          --Descricao Uso
          vr_dsusoemp:= rw_crapcob.dsusoemp;
          --Descricao Seu Numero
          vr_dsseunum:= rw_crapcob.dsdoccop;
          --Codigo Especifico
          CASE rw_crapcob.cddespec
            WHEN 01 THEN vr_cddespec:= '01'; /* DM */
            WHEN 02 THEN vr_cddespec:= '12'; /* DS */
            WHEN 03 THEN vr_cddespec:= '02'; /* NP */
            WHEN 06 THEN vr_cddespec:= '05'; /* Recibo */
            ELSE  vr_cddespec:= '99'; /* Outros */
          END CASE;
          --Selecionar Sacados da Cobranca
          OPEN cr_crapsab (pr_cdcooper => rw_crapcob.cdcooper
                          ,pr_nrdconta => rw_crapcob.nrdconta
                          ,pr_nrinssac => rw_crapcob.nrinssac);
          FETCH cr_crapsab INTO rw_crapsab;
          --Se Encontrou
          IF cr_crapsab%FOUND THEN
            --Informacoes Sacado
            vr_cdtpinsc:= rw_crapsab.cdtpinsc;
            vr_nrinssac:= rw_crapsab.nrinssac;
            vr_nmdsacad:= REPLACE(rw_crapsab.nmdsacad,'&','E');
          END IF;
          --Fechar Cursor
          CLOSE cr_crapsab;
        ELSE
          vr_dsusoemp:= NULL;
          vr_dtvencto:= NULL;
          vr_dsseunum:= NULL;
        END IF;
        --Data Vencimento
        IF vr_dtvencto IS NULL THEN
          vr_dsvencto:= '000000';
        ELSE
          vr_dsvencto:= TO_CHAR(vr_dtvencto,'DDMMYY');
        END IF;
        --Data Ocorrencia Nula
        IF rw_craprtc.dtocorre IS NULL THEN
           vr_dtocorre:= '000000';
        ELSE
           vr_dtocorre:= TO_CHAR(rw_craprtc.dtocorre,'DDMMYY');
        END IF;
        --Data Credito Nula
        IF rw_craprtc.dtcredit IS NULL THEN
           vr_dtcredit:= '000000';
        ELSE
           vr_dtcredit:= TO_CHAR(rw_craprtc.dtcredit,'DDMMYY');
        END IF;
        --Ocorrencias
        IF rw_craprtc.cdocorre IN (6,17,76,77) THEN
          CASE SUBSTR(rw_craprtc.cdmotivo,1,2)
            WHEN '32' THEN vr_cdlocpag:= 01;
            WHEN '33' THEN vr_cdlocpag:= 02;
            WHEN '37' THEN vr_cdlocpag:= 05;
            WHEN '31' THEN vr_cdlocpag:= 07;
            WHEN '03' THEN vr_cdlocpag:= 08;
            WHEN '06' THEN vr_cdlocpag:= 09;
            ELSE vr_cdlocpag:= 11; /* outro canal eletronico */
          END CASE;
        ELSE
          --Codigo Local Pagamento
          vr_cdlocpag:= 0;
        END IF;
        --Incrementar Quantidade registro
        vr_qtregist:= Nvl(vr_qtregist,0) + 1;

        /******** DETALHE - CNAB400 ************/
        vr_setlinha:= '7'||                                      /* Fixo "7" */
                      '00'||                                     /* Fixo Zeros */
                      LPAD('0',14,'0')||                         /* Fixo Zeros */
                      gene0002.fn_mask(vr_cdageman,'99999')||    /* Age Mantenedora*/
                      gene0002.fn_mask(rw_craprtc.nrdconta,'999999999')|| /* Nr Conta/DV */
                      gene0002.fn_mask(rw_craprtc.nrcnvcob,'9999999')||   /* Nr do Convenio */
                      SubStr(RPad(nvl(vr_dsusoemp,' '),25,' '),1,25)||             /* Numero de controle do participante */
                      SubStr(RPad(NVL(rw_craprtc.nrnosnum, ' '),17,' '),1,17)||     /* Nosso numero */
                      '1'||                                      /* Tipo de cobranca Nota 02 Layout */
                      '0'||                                      /* Tipo de cobranca para cod. 72 */
                      '0000'||                                   /* Dias p/ calculo (nao utilizado) */
                      gene0002.fn_mask(vr_cdmot400,'99')||       /* Natureza do recebimento */
                      '   '||                                    /* Prefixo do titulo */
                      '000'||                                    /* Variacao da carteira */
                      '0'||                                      /* Conta caucao */
                      '00000'||                                  /* Taxa para desconto */
                      '00000'||                                  /* Taxa IOF */
                      ' '||                                      /* Brancos */
                      '01'||                                     /* Carteira */
                      gene0002.fn_mask(vr_cdret400,'99')||       /* Comando ou Ocorrencia */
                      vr_dtocorre||                              /* Data de liquidacao */
                      SubStr(RPad(nvl(vr_dsseunum,' '),10,' '),1,10)||    /* Numero titulo cedente */
                      lpad(' ',20,' ')||                         /* Brancos */
                      vr_dsvencto||                              /* Dt Vencto */
                      gene0002.fn_mask(rw_craprtc.vltitulo * 100,'9999999999999')|| /* Valor do titulo */
                      gene0002.fn_mask(rw_craprtc.cdbcorec,'999')||                 /* Banco recebedor */
                      gene0002.fn_mask(vr_cdagerec,'99999')||                       /* Agencia recebedora */
                      vr_cddespec||                                                 /* Especie de titulo */
                      vr_dtcredit||                                                 /* Data do crê¥©to */
                      gene0002.fn_mask(vr_vltarifa * 100,'9999999')||               /* Valor da tarifa */
                      gene0002.fn_mask(rw_craprtc.vloutdes * 100,'9999999999999')|| /* Outras despesas */
                      RPAD('0',13,'0')||                                            /* Juros do desconto */
                      RPAD('0',13,'0')||                                            /* IOF do desconto */
                      gene0002.fn_mask(rw_craprtc.vlabatim * 100,'9999999999999')|| /* Vlr do abatimento */
                      gene0002.fn_mask(rw_craprtc.vldescto * 100,'9999999999999')|| /* Vlr do desconto */
                      RPAD('0',13,'0')||                                            /* Vlr recebido (parcial) */
                      gene0002.fn_mask(rw_craprtc.vljurmul * 100,'9999999999999')|| /* Juros de mora */
                      gene0002.fn_mask(rw_craprtc.vloutcre * 100,'9999999999999')|| /* Outros recebimentos */
                      RPAD('0',13,'0')||                                            /* Abat nao aproveitado pelo sacado (Futuro) */
                      gene0002.fn_mask(rw_craprtc.vlrpagto * 100,'9999999999999')|| /* Vlr do lancamento */
                      '0'||                                                         /* Indicador dê£©to/crê¥©to 0 - sem lancamento,1 - dê£©to,2 - crê¥©to */
                      '0'||                                                         /* Indicador de valor,1 - ajuste de dê£©to,2 - ajuste de crê¥©to */
                      LPAD('0',12,'0')||                         /* Valor do ajuste */
                      ' '||                                      /* Brancos */
                      LPAD(' ',9,' ')||                          /* Brancos */
                      LPAD('0',7,'0')||                          /* Zeros */
                      LPAD('0',9,'0')||                          /* Zeros */
                      LPAD('0',7,'0')||                          /* Zeros */
                      LPAD('0',9,'0')||                          /* Zeros */
                      LPAD('0',7,'0')||                          /* Zeros */
                      LPAD('0',9,'0')||                          /* Zeros */
                      LPAD(' ',2,' ')||                          /* Brancos */
                      gene0002.fn_mask(vr_cdlocpag,'99')||       /* Canal de pagto */
                      gene0002.fn_mask(vr_qtregist,'999999')||   /* Sequencial do registro */
                      Chr(13) || chr(10);
        --Escrever no arquivo
        pc_escreve_xml(vr_setlinha);
        pc_escreve_tab(pr_idorigem,vr_setlinha);
	      -- Retorna nome do módulo logado - 15/12/2017 - Chamado 779415
		    GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_gera_arq_coop_cnab400');

        --Ultimo registro conta --LAST-OF(craprtc.nrdconta)
        IF rw_craprtc.nrseqcta = rw_craprtc.nrtotcta THEN
          --Selecionar todas as cobrancas
          FOR rw_crapcob2 IN cr_crapcob2 (pr_cdcooper => rw_craprtc.cdcooper
                                         ,pr_nrdconta => rw_craprtc.nrdconta
                                         ,pr_nrcnvcob => rw_craprtc.nrcnvcob
                                         ,pr_incobran => 0) LOOP
            --Incrementar quantidade e valor
            vr_qtcobsim:= nvl(vr_qtcobsim,0) + 1;
            vr_vlcobsim:= nvl(vr_vlcobsim,0) + nvl(rw_crapcob2.vltitulo,0);
          END LOOP;
          --Incrementar Quantidade Registros
          vr_qtregist:= Nvl(vr_qtregist,0) + 1;

          /******** TRAILER DE ARQUIVO - CNAB400 ************/
          vr_setlinha:= '9'||                               /* Fixo "9" */
                        '2'||                               /* Fixo "2" */
                        '01'||                              /* Fixo "01" */
                        '001'||                             /* Fixo "001" */
                        LPAD(' ',10,' ')||                  /* Brancos */
                        gene0002.fn_mask(vr_qtcobsim,'99999999')||  /* Qtd Tit - Cob Simples */
                        gene0002.fn_mask(vr_vlcobsim * 100,'99999999999999')|| /* Vlr Tit - Cob Simples */
                        LPAD('0',8,'0')||                   /* Numero do Aviso */
                        LPAD(' ',10,' ')||                  /* Brancos */
                        LPAD('0',8,'0')||                   /* Qtd Tit - Cob. Vinculada */
                        LPAD('0',14,'0')||                  /* Vlr Tit - Cob. Vinculada */
                        LPAD('0',8,'0')||                   /* Numero do Aviso */
                        LPAD(' ',10,' ')||                  /* Brancos */
                        LPAD('0',8,'0')||                   /* Qtd Tit - Cob. Caucionada */
                        LPAD('0',14,'0')||                  /* Vlr Tit - Cob. Caucionada */
                        LPAD('0',8,'0')||                   /* Numero do Aviso */
                        LPAD(' ',10,' ')||                  /* Brancos */
                        LPAD('0',8,'0')||                   /* Qtd Tit - Cob. Descontada */
                        LPAD('0',14,'0')||                  /* Vlr Tit - Cob. Descontada */
                        LPAD('0',8,'0')||                   /* Numero do Aviso */
                        LPAD(' ',50,' ')||                  /* Brancos */
                        LPAD('0',8,'0')||                   /* Qtd Tit - Cob. Vendor */
                        LPAD('0',14,'0')||                  /* Vlr Tit - Cob. Vendor */
                        LPAD('0',8,'0')||                   /* Numero do Aviso */
                        LPAD(' ',147,' ')||                 /* Brancos */
                        gene0002.fn_mask(vr_qtregist,'999999')|| /* Sequencial do registro */
                        chr(10);   -- Retirado caracter 13 para não pular duas linhas ( Renato - Supero )
          --Escrever no arquivo
          pc_escreve_xml(vr_setlinha);
          pc_escreve_tab(pr_idorigem,vr_setlinha);

          /** Fim do Arquivo */
          /*
          DBMS_XSLPROCESSOR.CLOB2FILE(vr_des_xml, vr_caminho, vr_nmarqcnv, 0);
          */

          --Criar o arquivo no diretorio especificado
          gene0002.pc_clob_para_arquivo(pr_clob     => vr_des_xml
                                       ,pr_caminho  => vr_caminho
                                       ,pr_arquivo  => vr_nmarqcnv
                                       ,pr_des_erro => vr_dscritic);
	        -- Retorna nome do módulo logado - 15/12/2017 - Chamado 779415
		      GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_gera_arq_coop_cnab400');
          IF trim(vr_dscritic) IS NOT NULL THEN
            RAISE vr_exc_erro;
          END IF;

          --Buscar path diretorio salvar
          vr_caminho_salvar:= gene0001.fn_diretorio(pr_tpdireto => 'C' --> Usr/Coop
                                                   ,pr_cdcooper => pr_cdcooper
                                                   ,pr_nmsubdir => 'salvar');
	        -- Retorna nome do módulo logado - 15/12/2017 - Chamado 779415
		      GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_gera_arq_coop_cnab400');

          -- Liberando a mem?ria alocada pro CLOB
          dbms_lob.close(vr_des_xml);
          dbms_lob.freetemporary(vr_des_xml);

          IF pr_idorigem <> 3          OR 
						 rw_crapceb.inenvcob = 2 THEN
						 
            -- Se origem não for IB e for envio de arquivo via FTP
					  IF (pr_idorigem <> 3         AND 
						    rw_crapceb.inenvcob = 2) THEN
								
							-- Diretório da Cooperativa
							vr_dir_coop := gene0001.fn_diretorio(pr_tpdireto => 'C' --> /usr/coop
																			            ,pr_cdcooper => pr_cdcooper);
								 
			        -- Caminho script que envia/recebe via FTP os arquivos de cobrança
							vr_script_cobr := GENE0001.fn_param_sistema(pr_nmsistem => 'CRED'
																												 ,pr_cdcooper => '0'
																												 ,pr_cdacesso => 'SCRIPT_ENV_REC_ARQ_CUST');
				      
							vr_serv_ftp := GENE0001.fn_param_sistema(pr_nmsistem => 'CRED'
																											,pr_cdcooper => '0'
																											,pr_cdacesso => 'CUST_CHQ_ARQ_SERV_FTP'); 
				                                                
							vr_user_ftp := GENE0001.fn_param_sistema(pr_nmsistem => 'CRED'
																											,pr_cdcooper => '0'
																											,pr_cdacesso => 'CUST_CHQ_ARQ_USER_FTP');
				                                              
							vr_pass_ftp := GENE0001.fn_param_sistema(pr_nmsistem => 'CRED'
																											,pr_cdcooper => '0'
																											,pr_cdacesso => 'CUST_CHQ_ARQ_PASS_FTP');   
				                                              
	            -- Retorna nome do módulo logado - 15/12/2017 - Chamado 779415
		          GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_gera_arq_coop_cnab400');   
							vr_dir_retorno := '/' ||TRIM(rw_crapcop.dsdircop)   ||
																'/' || TRIM(to_char(pr_nrdconta)) || '/RETORNO';                                                                              

							-- Copia Arquivo de cobrança para Servidor FTP
							vr_comando := vr_script_cobr                                 || ' ' ||
							'-envia'                                                     || ' ' || 
							'-srv '         || vr_serv_ftp                               || ' ' || -- Servidor
							'-usr '         || vr_user_ftp                               || ' ' || -- Usuario
							'-pass '        || vr_pass_ftp                               || ' ' || -- Senha
							'-arq '         || CHR(39) || vr_nmarqcnv || CHR(39)         || ' ' || -- Arquivo de cobrança
							'-dir_local '   || vr_dir_coop || '/arq'                  || ' ' || -- /usr/coop/<cooperativa>/arq
							'-dir_remoto '  || vr_dir_retorno                            || ' ' || -- /<conta do cooperado>/RETORNO 
							'-salvar '      || vr_dir_coop || '/salvar'                  || ' ' || -- /usr/coop/<cooperativa>/salvar  
							'-log '         || vr_dir_coop || '/log/envio_arq_cob_ftp.log';          -- /usr/coop/<cooperativa>/log/cst_por_arquivo.log
				      
							GENE0001.pc_OScommand(pr_typ_comando => 'S'
																	 ,pr_des_comando => vr_comando
																	 ,pr_typ_saida   => vr_typ_saida
																	 ,pr_des_saida   => vr_dscritic
																	 ,pr_flg_aguard  => 'S');
				                           
							-- Se ocorreu erro dar RAISE
							IF vr_typ_saida = 'ERR' THEN
                --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
                --Montar mensagem de erro
                vr_cdcritic:= 1114; --Nao foi possivel executar comando unix
                vr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic)||' '||vr_comando;
								RAISE vr_exc_erro;
							END IF;                    
	             -- Retorna nome do módulo logado - 15/12/2017 - Chamado 779415
		          GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_gera_arq_coop_cnab400');               
   					ELSE
            --Se possui cadastro emissao bloquetos
            IF vr_flgcrapceb THEN
              --Selecionar Cadastro email
              OPEN cr_crapcem (pr_cdcooper => pr_cdcooper
                              ,pr_nrdconta => rw_crapceb.nrdconta
                              ,pr_idseqttl => 1
                              ,pr_cddemail => rw_crapceb.cddemail);
              --Primeiro registro
              FETCH cr_crapcem INTO rw_crapcem;
              --Se Encontrou
              IF cr_crapcem%FOUND THEN
                --Fechar Cursor
                CLOSE cr_crapcem;

                -- ux2dos
                GENE0003.pc_converte_arquivo(pr_cdcooper => pr_cdcooper                  --> Cooperativa
                                            ,pr_nmarquiv => vr_caminho||'/'||vr_nmarqcnv --> Caminho e nome do arquivo a ser convertido
                                            ,pr_nmarqenv => vr_nmarqcnv                  --> Nome desejado para o arquivo convertido
                                            ,pr_des_erro => vr_dscritic);
                --Se ocorreu erro
                IF vr_dscritic IS NOT NULL THEN
                  --Levantar Excecao
                  RAISE vr_exc_erro;
                END IF;
	              -- Retorna nome do módulo logado - 15/12/2017 - Chamado 779415
		            GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_gera_arq_coop_cnab400');

                -- Obter caminho do /converte
                vr_caminho := gene0001.fn_diretorio(pr_tpdireto => 'C' --> Usr/Coop
                                                   ,pr_cdcooper => pr_cdcooper
                                                   ,pr_nmsubdir => 'converte');
	              -- Retorna nome do módulo logado - 15/12/2017 - Chamado 779415
		            GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_gera_arq_coop_cnab400');
									vr_remanexo := 'N';

									-- Se for envio via ftp e por IB
									IF (pr_idorigem = 3          AND
										  rw_crapceb.inenvcob = 2) THEN
										
										vr_nmarqzip := REPLACE(vr_nmarqcnv, '.ret', '') || '.zip';
										vr_remanexo := 'S';
									
										-- Compactar arquivo
										gene0002.pc_zipcecred(pr_cdcooper => pr_cdcooper   --> Cooperativa
																				 ,pr_tpfuncao => 'A'           --> Função a ser executada pela rotina
																				 ,pr_dsorigem => vr_caminho||'/'||vr_nmarqcnv --> Lista de arquivos para zipar (sep. por espaço)
																				 ,pr_dsdestin => vr_caminho_salvar||'/'||vr_nmarqzip   --> Arquivo final .zip
																				 ,pr_dspasswd => NULL          --> Password a incluir
																				 ,pr_des_erro => vr_dscritic); --> Retorno da critica
	                  -- Retorna nome do módulo logado - 15/12/2017 - Chamado 779415
		                GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_gera_arq_coop_cnab400');
										--Se ocorreu erro
										IF vr_dscritic IS NOT NULL THEN
											--Levantar Excecao
											RAISE vr_exc_erro;
										END IF;
										
										-- Passa o nome do arquivo zipado
										vr_nmarqcnv := vr_nmarqzip;
									
									END IF;

                --Enviar Email
                gene0003.pc_solicita_email(pr_cdcooper        => pr_cdcooper
                                          ,pr_cdprogra        => pr_cdprogra
                                          ,pr_des_destino     => rw_crapcem.dsdemail
                                          ,pr_des_assunto     => 'ARQUIVO DE COBRANCA DA '|| rw_crapcop.nmrescop
                                          ,pr_des_corpo       => NULL
                                          ,pr_des_anexo       => vr_caminho||'/'||vr_nmarqcnv
																						,pr_flg_remove_anex => vr_remanexo --> Remover os anexos passados
                                          ,pr_flg_remete_coop => 'N' --> Se o envio serÃÂ¡ do e-mail da Cooperativa
                                          ,pr_flg_enviar      => 'N' --> Enviar o e-mail na hora
                                          ,pr_flg_log_batch   => 'N' --> Incluir inf. no log
                                          ,pr_des_erro        => vr_dscritic);
                --Se ocorreu erro
                IF vr_dscritic IS NOT NULL THEN
                  --Levantar Excecao
                  RAISE vr_exc_erro;
                END IF;
	              -- Retorna nome do módulo logado - 15/12/2017 - Chamado 779415
		            GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_gera_arq_coop_cnab400');
              END IF;
              --Fechar Cursor
              IF cr_crapcem%ISOPEN THEN
                CLOSE cr_crapcem;
              END IF;
            END IF;
          END IF;
          END IF;

          -- Comando para remover arquivos no diretorio integracao
          vr_comando:= 'mv '||vr_nmarqind||' '||vr_caminho_salvar||' 2> /dev/null';

          --Executar o comando no unix
          GENE0001.pc_OScommand(pr_typ_comando => 'S'
                               ,pr_des_comando => vr_comando
                               ,pr_typ_saida   => vr_typ_saida
                               ,pr_des_saida   => vr_dscritic);
          --Se ocorreu erro dar RAISE
          IF vr_typ_saida = 'ERR' THEN
            --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
            --Montar mensagem de erro
            vr_cdcritic:= 1114; --Nao foi possivel executar comando unix
            vr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic)||' '||vr_comando;
            RAISE vr_exc_erro;
          END IF;
	        -- Retorna nome do módulo logado - 15/12/2017 - Chamado 779415
		      GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_gera_arq_coop_cnab400');
        END IF; --LAST-OF
      END LOOP;  
      
      -- Se processou nao for nulo
          IF pr_flgproce IN (0,1) THEN
            /** Define o registro como "Processado" **/
            BEGIN
          UPDATE craprtc 
             SET craprtc.flgproce = 1
           WHERE craprtc.cdcooper = pr_cdcooper
             AND craprtc.nrcnvcob = pr_nrcnvcob
             AND craprtc.nrdconta = pr_nrdconta
             AND craprtc.dtmvtolt = pr_dtmvtoan
             AND craprtc.nrremret = pr_nrremret
             AND craprtc.intipmvt = 2
             AND EXISTS(SELECT 1
                          FROM crapret
                         WHERE crapret.cdcooper = craprtc.cdcooper
                           AND crapret.nrdconta = craprtc.nrdconta
                           AND crapret.nrcnvcob = craprtc.nrcnvcob
                           AND crapret.dtocorre = craprtc.dtmvtolt
                           AND crapret.cdocorre <> 27 /* alt de outros dados */
                           AND crapret.nrremret = (SELECT MAX(ret.nrremret)                           
                                                     FROM crapret ret
                                                    WHERE ret.cdcooper = craprtc.cdcooper
                                                      AND ret.nrdconta = craprtc.nrdconta
                                                      AND ret.nrcnvcob = craprtc.nrcnvcob
                                                      AND ret.dtocorre = craprtc.dtmvtolt
                                                      AND ret.nrretcoo = craprtc.nrremret)); 
            EXCEPTION
              WHEN OTHERS THEN
                -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
                CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);   
                -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
                vr_cdcritic := 1035;
                vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                               'CRAPRTC(48):' ||
                               ' flgproce:'   || '1' ||
                               '. ' ||sqlerrm;
                --Levantar Excecao
                RAISE vr_exc_erro;
            END;
          END IF;
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);
    EXCEPTION
      -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
      -- Disparadores: paga0001.pc_gera_arq_cooperado          - TBGEN
      WHEN vr_exc_erro THEN
        pr_cdcritic:= vr_cdcritic;
        pr_dscritic:= vr_dscritic ||
                      vr_dsparame;
      WHEN OTHERS THEN
        -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
        CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);   
        -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        pr_cdcritic:= 9999;
        pr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic) || 
                      'PAGA0001.pc_gera_arq_coop_cnab400. ' || SQLERRM  ||
                      '.' || vr_dsparame;
    END;
  END pc_gera_arq_coop_cnab400;

  /* Procedure para Gerar arquivo para cooperado */
  PROCEDURE pc_gera_arq_cooperado (pr_cdcooper IN crapcop.cdcooper%TYPE   --Codigo Cooperativa
                                  ,pr_nrcnvcob IN crapcob.nrcnvcob%TYPE   --Numero Convenio
                                  ,pr_nrdconta IN crapcob.nrdconta%TYPE   --Numero da Conta
                                  ,pr_dtmvtolt IN crapdat.dtmvtolt%TYPE   --Data pagamento
                                  ,pr_idorigem IN INTEGER                 --Identificador Origem
                                  ,pr_flgproce IN INTEGER                 --Flag Processo
                                  ,pr_cdprogra IN crapprg.cdprogra%TYPE   --Nome Programa
                                  ,pr_tab_arq_cobranca  OUT PAGA0001.typ_tab_arq_cobranca --Tabela Cobranca
                                  ,pr_cdcritic OUT INTEGER                --Codigo da Critica
                                  ,pr_dscritic OUT VARCHAR2) IS           --Descricao da critica
    -- .........................................................................
    --
    --  Programa : pc_gera_arq_cooperado           Antigo: b1wgen0090.p/gera_arq_cooperado
    --  Sistema  : Cred
    --  Sigla    : PAGA0001
    --  Autor    : Alisson C. Berrido - AMcom
    --  Data     : Novembro/2013.                   Ultima atualizacao: 27/08/2018
    --
    --  Dados referentes ao programa:
    --
    --   Frequencia: Sempre que for chamado
    --   Objetivo  : Procedure para gerar arquivo cobranca cooperado 
    --		  
	--	 Alteracoes:
    --               15/12/2017 - Incluido nome do módulo logado
    --                            No caso de erro de programa gravar tabela especifica de log                     
    --                            Ajuste mensagem de erro 
    --                           (Belli - Envolti - Chamado 779415)   
    --
    --   Alteracoes: 27/08/2018 - Incluir pc_internal_exception e informações da conta na
    --                            exception when others. (PRB0040285-AJFink)
    --
  BEGIN
    DECLARE
      --Cursores Locais
      CURSOR cr_craprtc (pr_cdcooper IN craprtc.cdcooper%type
                        ,pr_nrcnvcob IN craprtc.nrcnvcob%type
                        ,pr_nrdconta IN craprtc.nrdconta%type
                        ,pr_dtmvtolt IN craprtc.dtmvtolt%TYPE
                        ,pr_intipmvt IN craprtc.intipmvt%TYPE) IS
        SELECT craprtc.cdcooper
              ,craprtc.nrcnvcob
              ,craprtc.nrdconta
              ,craprtc.dtmvtolt
              ,craprtc.nrremret
        FROM craprtc
        WHERE  craprtc.cdcooper = pr_cdcooper
        AND    craprtc.nrcnvcob = pr_nrcnvcob
        AND    craprtc.nrdconta = pr_nrdconta
        AND    craprtc.dtmvtolt = pr_dtmvtolt
        AND    craprtc.intipmvt = pr_intipmvt
        ORDER BY craprtc.nrdconta;
      -- Contem  parametros do cadastro de cobranca
      CURSOR cr_crapcco (pr_cdcooper IN crapcco.cdcooper%type
                        ,pr_nrconven IN crapcco.nrconven%TYPE) IS
        SELECT ceb.nrdconta
              ,ceb.inarqcbr
              ,cco.cdcooper
              ,cco.nrconven
          FROM crapcco cco
              ,crapceb ceb
         WHERE cco.cdcooper = pr_cdcooper
           AND cco.nrconven = pr_nrconven
           AND ceb.cdcooper = cco.cdcooper
           AND ceb.nrconven = cco.nrconven;
      --Variaveis Locais
      --Variaveis de erro
      vr_des_erro     VARCHAR2(4000);
      vr_cdcritic crapcri.cdcritic%TYPE;
      vr_dscritic VARCHAR2(4000);
      --Variaveis de Excecao
      vr_exc_erro EXCEPTION;
      --Agrupa os parametros - 15/12/2017 - Chamado 779415 
      vr_dsparame VARCHAR2(4000);
    BEGIN
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_gera_arq_cooperado');
      
      --Inicializar variaveis retorno
      pr_cdcritic:= NULL;
      pr_dscritic:= NULL;
      --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
      vr_dsparame :=  ' pr_cdcooper:'  || pr_cdcooper ||
                      ', pr_nrcnvcob:' || pr_nrcnvcob || 
                      ', pr_nrdconta:' || pr_nrdconta || 
                      ', pr_dtmvtolt:' || pr_dtmvtolt || 
                      ', pr_idorigem:' || pr_idorigem || 
                      ', pr_flgproce:' || pr_flgproce || 
                      ', pr_cdprogra:' || pr_cdprogra; 
      --Verificar cooperativa
      OPEN cr_crapcop(pr_cdcooper => pr_cdcooper);
      FETCH cr_crapcop INTO rw_crapcop;
      --Se nao encontrou
      IF cr_crapcop%NOTFOUND THEN
        --Fechar Cursor
        CLOSE cr_crapcop;
        --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        --Mensagem Erro
        vr_cdcritic := 1070; --Registro de cooperativa não encontrado
        vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
      --Fechar Cursor
      CLOSE cr_crapcop;

      -- Cadastro de Emissao de Bloquetos
      FOR rw_crapcco IN cr_crapcco (pr_cdcooper => pr_cdcooper
                                   ,pr_nrconven => pr_nrcnvcob) LOOP

       --Se foi passada conta e a mesma for diferente da selecionada ignora
       IF nvl(pr_nrdconta,0) <> 0 AND nvl(pr_nrdconta,0) <> rw_crapcco.nrdconta THEN
         CONTINUE;
       END IF;
       --Selecionar remessas/retorno titulos dos cooperados
       FOR rw_craprtc IN cr_craprtc (pr_cdcooper => rw_crapcco.cdcooper
                                    ,pr_nrcnvcob => rw_crapcco.nrconven
                                    ,pr_nrdconta => rw_crapcco.nrdconta
                                    ,pr_dtmvtolt => pr_dtmvtolt
                                    ,pr_intipmvt => 2) LOOP

         --Se recebe arquivo retorno febraban
         IF  rw_crapcco.inarqcbr = 2 THEN
           PAGA0001.pc_gera_arq_coop_cnab240 (pr_cdcooper => rw_craprtc.cdcooper   --Codigo Cooperativa
                                             ,pr_nrcnvcob => rw_craprtc.nrcnvcob   --Numero Convenio
                                             ,pr_nrdconta => rw_craprtc.nrdconta   --Numero da Conta
                                             ,pr_dtmvtoan => rw_craprtc.dtmvtolt   --Data pagamento
                                             ,pr_idorigem => pr_idorigem   --Identificador Origem
                                             ,pr_flgproce => pr_flgproce   --Flag Processo
                                             ,pr_cdprogra => pr_cdprogra   --Nome Programa
                                             ,pr_nrremret => rw_craprtc.nrremret -- Num Rem/Ret Cobranca
                                             ,pr_tab_arq_cobranca => pr_tab_arq_cobranca --Tabela Cobranca
                                             ,pr_cdcritic => vr_cdcritic   --Codigo da Critica
                                             ,pr_dscritic => vr_dscritic); --Decricao da Critica
           --Se ocorreu erro
           IF NVL(vr_cdcritic,0) <> 0 or TRIM(vr_dscritic) IS NOT NULL THEN
             --Levantar Excecao
             RAISE vr_exc_erro;
           END IF;
	         -- Retorna nome do módulo logado - 15/12/2017 - Chamado 779415
		       GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_gera_arq_cooperado');
         ELSIF  rw_crapcco.inarqcbr = 3 THEN
           PAGA0001.pc_gera_arq_coop_cnab400 (pr_cdcooper => rw_craprtc.cdcooper   --Codigo Cooperativa
                                             ,pr_nrcnvcob => rw_craprtc.nrcnvcob   --Numero Convenio
                                             ,pr_nrdconta => rw_craprtc.nrdconta   --Numero da Conta
                                             ,pr_dtmvtoan => rw_craprtc.dtmvtolt   --Data pagamento
                                             ,pr_idorigem => pr_idorigem   --Identificador Origem
                                             ,pr_flgproce => pr_flgproce   --Flag Processo
                                             ,pr_cdprogra => pr_cdprogra   --Nome Programa
                                             ,pr_nrremret => rw_craprtc.nrremret --Num Rem/Ret Cobranca
                                             ,pr_tab_arq_cobranca => pr_tab_arq_cobranca --Tabela Cobranca
                                             ,pr_cdcritic => vr_cdcritic   --Codigo da Critica
                                             ,pr_dscritic => vr_dscritic); --Decricao da Critica
           --Se ocorreu erro
           IF NVL(vr_cdcritic,0) <> 0 OR TRIM(vr_dscritic) IS NOT NULL THEN
             --Levantar Excecao
             RAISE vr_exc_erro;
           END IF;
	         -- Retorna nome do módulo logado - 15/12/2017 - Chamado 779415
		       GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_gera_arq_cooperado');
         END IF;
       END LOOP;
      END LOOP;
	    -- Limpo nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);
    EXCEPTION
      -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
      -- Esta Procedure grava TBGEN
      -- Disparadores: PC_CRPS538_2.prc
      --               pc_crps594.prc
      --               paga0001.pc_gera_arq_cooperado_car
      WHEN vr_exc_erro THEN
        pr_cdcritic:= vr_cdcritic;
        pr_dscritic:= vr_dscritic ||
                      vr_dsparame;
        --> Geração de log                             
        pc_controla_log_programa( pr_cdcooper     => pr_cdcooper
                                 ,pr_dstiplog     => 'E'              -- E = erro
                                 ,pr_tpocorrencia => 2                -- 1-Erro de negocio/ 2-Erro nao tratado
                                 ,pr_cdmensagem   => pr_cdcritic      -- Codigodo Log
                                 ,pr_dsmensagem   => pr_dscritic      -- Descrição do Log
                                 ,pr_tpexecucao   => CASE pr_idorigem -- 0-Outro, 1-Batch, 2-Job, 3-Online
                                                       WHEN 1 THEN 1
                                                       WHEN 2 THEN 2
                                                       WHEN 3 THEN 3
                                                       ELSE 0
                                                     END
                                 );                        
      WHEN OTHERS THEN
        -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
        CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);   
        -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        pr_cdcritic:= 9999;
        pr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic) || 
                      'PAGA0001.pc_gera_arq_cooperado. ' || SQLERRM ||
                      '.' || vr_dsparame;	
        --> Geração de log                             
        pc_controla_log_programa( pr_cdcooper     => pr_cdcooper
                                 ,pr_dstiplog     => 'E' -- E = erro
                                 ,pr_tpocorrencia => 2   -- 1-Erro de negocio/ 2-Erro nao tratado
                                 ,pr_cdmensagem   => pr_cdcritic        -- Codigo do Log
                                 ,pr_dsmensagem   => pr_dscritic -- Descrição do Log
                                 ,pr_tpexecucao   => CASE pr_idorigem -- 0-Outro, 1-Batch, 2-Job, 3-Online
                                                       WHEN 1 THEN 1
                                                       WHEN 2 THEN 2
                                                       WHEN 3 THEN 3
                                                       ELSE 0
                                                     END
                                 );                        
    END;
  END pc_gera_arq_cooperado;

  /* Procedure para Gerar arquivo para cooperado paralelamente */
  PROCEDURE pc_gera_arq_cooperad_par(pr_cdcooper IN crapcop.cdcooper%TYPE   --Codigo Cooperativa
                                    ,pr_nrcnvcob IN crapcob.nrcnvcob%TYPE   --Numero Convenio
                                    ,pr_nrdconta IN crapcob.nrdconta%TYPE   --Numero da Conta
                                    ,pr_idparale IN NUMBER                  --Indicador de processo paralelo
                                    ,pr_idprogra IN NUMBER                  --Id da execução unica
                                    ,pr_dtmvtolt IN crapdat.dtmvtolt%TYPE   --Data pagamento
                                    ,pr_idorigem IN INTEGER                 --Identificador Origem
                                    ,pr_flgproce IN INTEGER                 --Flag Processo
                                    ,pr_cdprogra IN crapprg.cdprogra%TYPE   --Nome Programa
                                    ,pr_cdcritic OUT INTEGER                --Codigo da Critica
                                    ,pr_dscritic OUT VARCHAR2) IS           --Descricao da critica
    -- .........................................................................
    --
    --  Programa : pc_gera_arq_cooperad_par           Antigo: 
    --  Sistema  : Cred
    --  Sigla    : PAGA0001
    --  Autor    : Andreatta - Mouts
    --  Data     : Agosto/2018.                   Ultima atualizacao: --/--/----
    --
    --  Dados referentes ao programa:
    --
    --   Frequencia: Sempre que for chamado
    --   Objetivo  : Procedure para gerar arquivo cobranca cooperado paralelamente
  BEGIN
    DECLARE
      --Cursores Locais
      CURSOR cr_craprtc (pr_cdcooper IN craprtc.cdcooper%type
                        ,pr_nrcnvcob IN craprtc.nrcnvcob%type
                        ,pr_nrdconta IN craprtc.nrdconta%type
                        ,pr_dtmvtolt IN craprtc.dtmvtolt%TYPE
                        ,pr_intipmvt IN craprtc.intipmvt%TYPE) IS
        SELECT craprtc.cdcooper
              ,craprtc.nrcnvcob
              ,craprtc.nrdconta
              ,craprtc.dtmvtolt
              ,craprtc.nrremret
        FROM craprtc
        WHERE  craprtc.cdcooper = pr_cdcooper
        AND    craprtc.nrcnvcob = pr_nrcnvcob
        AND    craprtc.nrdconta = pr_nrdconta
        AND    craprtc.dtmvtolt = pr_dtmvtolt
        AND    craprtc.intipmvt = pr_intipmvt
        ORDER BY craprtc.nrdconta;
      -- Contem  parametros do cadastro de cobranca
      CURSOR cr_crapcco (pr_cdcooper IN crapcco.cdcooper%type
                        ,pr_nrconven IN crapcco.nrconven%TYPE) IS
        SELECT ceb.nrdconta
              ,ceb.inarqcbr
              ,cco.cdcooper
              ,cco.nrconven
          FROM crapcco cco
              ,crapceb ceb
         WHERE cco.cdcooper = pr_cdcooper
           AND cco.nrconven = pr_nrconven
           AND ceb.cdcooper = cco.cdcooper
           AND ceb.nrconven = cco.nrconven
           AND ceb.nrdconta = pr_nrdconta;
      --Variaveis Locais
      vr_tab_arq_cobranca PAGA0001.typ_tab_arq_cobranca;
      --Variaveis de erro
      vr_des_erro     VARCHAR2(4000);
      vr_cdcritic crapcri.cdcritic%TYPE;
      vr_dscritic VARCHAR2(4000);
      --Variaveis de Excecao
      vr_exc_erro EXCEPTION;
      -- Código de controle retornado pela rotina gene0001.pc_grava_batch_controle
      vr_idcontrole    tbgen_batch_controle.idcontrole%TYPE;  
      vr_idlog_ini_par tbgen_prglog.idprglog%type;
    BEGIN
      
      --Inicializar variaveis retorno
      pr_cdcritic:= NULL;
      pr_dscritic:= NULL;
      
      -- Caso execucao paralela
      IF pr_idparale <> 0 THEN 
        -- Grava controle de batch por agência
        gene0001.pc_grava_batch_controle(pr_cdcooper    => pr_cdcooper      -- Codigo da Cooperativa
                                        ,pr_cdprogra    => pr_cdprogra      -- Codigo do Programa
                                        ,pr_dtmvtolt    => pr_dtmvtolt      -- Data de Movimento
                                        ,pr_tpagrupador => 3                -- Tipo de Agrupador (1-PA/ 2-Convenio)
                                        ,pr_cdagrupador => lpad(pr_nrcnvcob,10)||lpad(pr_nrdconta,10,0)-- Codigo do agrupador conforme (tpagrupador)
                                        ,pr_cdrestart   => null             -- Controle do registro de restart em caso de erro na execucao
                                        ,pr_nrexecucao  => 1                -- Numero de identificacao da execucao do programa
                                        ,pr_idcontrole  => vr_idcontrole    -- ID de Controle
                                        ,pr_cdcritic    => pr_cdcritic      -- Codigo da critica
                                        ,pr_dscritic    => vr_dscritic);    -- Descricao da critica
        -- Testar saida com erro
        if vr_dscritic is not null then 
          -- Levantar exceçao
          raise vr_exc_erro;
        end if;    
      end if;
        
      -- Grava LOG sobre o ínicio da execução da procedure na tabela tbgen_prglog
      pc_log_programa(pr_dstiplog   => 'I'  
                     ,pr_cdprograma => pr_cdprogra||'_'||pr_nrcnvcob||'_'||pr_nrdconta        
                     ,pr_cdcooper   => pr_cdcooper 
                     ,pr_tpexecucao => 2    -- Tipo de execucao (0-Outro/ 1-Batch/ 2-Job/ 3-Online)
                     ,pr_idprglog   => vr_idlog_ini_par); 
      
      --Verificar cooperativa
      OPEN cr_crapcop(pr_cdcooper => pr_cdcooper);
      FETCH cr_crapcop INTO rw_crapcop;
      --Se nao encontrou
      IF cr_crapcop%NOTFOUND THEN
        --Fechar Cursor
        CLOSE cr_crapcop;
        vr_cdcritic:= 0;
        vr_dscritic:= 'Registro de cooperativa não encontrado.';
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;
      --Fechar Cursor
      CLOSE cr_crapcop;

      -- Cadastro de Emissao de Bloquetos
      FOR rw_crapcco IN cr_crapcco (pr_cdcooper => pr_cdcooper
                                   ,pr_nrconven => pr_nrcnvcob) LOOP

       --Se foi passada conta e a mesma for diferente da selecionada ignora
       IF nvl(pr_nrdconta,0) <> 0 AND nvl(pr_nrdconta,0) <> rw_crapcco.nrdconta THEN
         CONTINUE;
       END IF;
       --Selecionar remessas/retorno titulos dos cooperados
       FOR rw_craprtc IN cr_craprtc (pr_cdcooper => rw_crapcco.cdcooper
                                    ,pr_nrcnvcob => rw_crapcco.nrconven
                                    ,pr_nrdconta => rw_crapcco.nrdconta
                                    ,pr_dtmvtolt => pr_dtmvtolt
                                    ,pr_intipmvt => 2) LOOP

         --Se recebe arquivo retorno febraban
         IF  rw_crapcco.inarqcbr = 2 THEN
           PAGA0001.pc_gera_arq_coop_cnab240 (pr_cdcooper => rw_craprtc.cdcooper   --Codigo Cooperativa
                                             ,pr_nrcnvcob => rw_craprtc.nrcnvcob   --Numero Convenio
                                             ,pr_nrdconta => rw_craprtc.nrdconta   --Numero da Conta
                                             ,pr_dtmvtoan => rw_craprtc.dtmvtolt   --Data pagamento
                                             ,pr_idorigem => pr_idorigem   --Identificador Origem
                                             ,pr_flgproce => pr_flgproce   --Flag Processo
                                             ,pr_cdprogra => pr_cdprogra   --Nome Programa
                                             ,pr_nrremret => rw_craprtc.nrremret -- Num Rem/Ret Cobranca
                                             ,pr_tab_arq_cobranca => vr_tab_arq_cobranca --Tabela Cobranca
                                             ,pr_cdcritic => vr_cdcritic   --Codigo da Critica
                                             ,pr_dscritic => vr_dscritic); --Decricao da Critica
           --Se ocorreu erro
           IF NVL(vr_cdcritic,0) <> 0 or TRIM(vr_dscritic) IS NOT NULL THEN
             --Levantar Excecao
             RAISE vr_exc_erro;
           END IF;
         ELSIF  rw_crapcco.inarqcbr = 3 THEN
           PAGA0001.pc_gera_arq_coop_cnab400 (pr_cdcooper => rw_craprtc.cdcooper   --Codigo Cooperativa
                                             ,pr_nrcnvcob => rw_craprtc.nrcnvcob   --Numero Convenio
                                             ,pr_nrdconta => rw_craprtc.nrdconta   --Numero da Conta
                                             ,pr_dtmvtoan => rw_craprtc.dtmvtolt   --Data pagamento
                                             ,pr_idorigem => pr_idorigem   --Identificador Origem
                                             ,pr_flgproce => pr_flgproce   --Flag Processo
                                             ,pr_cdprogra => pr_cdprogra   --Nome Programa
                                             ,pr_nrremret => rw_craprtc.nrremret --Num Rem/Ret Cobranca
                                             ,pr_tab_arq_cobranca => vr_tab_arq_cobranca --Tabela Cobranca
                                             ,pr_cdcritic => vr_cdcritic   --Codigo da Critica
                                             ,pr_dscritic => vr_dscritic); --Decricao da Critica
           --Se ocorreu erro
           IF NVL(vr_cdcritic,0) <> 0 OR TRIM(vr_dscritic) IS NOT NULL THEN
             --Levantar Excecao
             RAISE vr_exc_erro;
           END IF;
         END IF;
       END LOOP;
      END LOOP;
      
      -- Grava data fim para o JOB na tabela de LOG 
      pc_log_programa(pr_dstiplog   => 'F'  
                     ,pr_cdprograma => pr_cdprogra||'_'||pr_nrcnvcob||'_'||pr_nrdconta                 
                     ,pr_cdcooper   => pr_cdcooper
                     ,pr_tpexecucao => 2 -- Tipo de execucao (0-Outro/ 1-Batch/ 2-Job/ 3-Online)
                     ,pr_idprglog   => vr_idlog_ini_par
                     ,pr_flgsucesso => 1); 

      -- Caso execucao paralela
      IF pr_idparale <> 0 THEN
        -- Atualiza finalização do batch na tabela de controle 
        gene0001.pc_finaliza_batch_controle(vr_idcontrole   --pr_idcontrole IN tbgen_batch_controle.idcontrole%TYPE -- ID de Controle
                                           ,pr_cdcritic     --pr_cdcritic  OUT crapcri.cdcritic%TYPE                -- Codigo da critica
                                           ,pr_dscritic);   --pr_dscritic  OUT crapcri.dscritic%TYPE
        -- Encerrar o job do processamento paralelo dessa agência
        gene0001.pc_encerra_paralelo(pr_idparale => pr_idparale
                                    ,pr_idprogra => pr_idprogra
                                    ,pr_des_erro => vr_dscritic);  
        -- Salvar informacoes no banco de dados
        COMMIT;
      END IF;
      
      
    EXCEPTION
      WHEN vr_exc_erro THEN
        pr_cdcritic:= vr_cdcritic;
        pr_dscritic:= vr_dscritic;
        
        -- Na execução paralela
        if nvl(pr_idparale,0) <> 0 then 
          -- Grava LOG de ocorrência final da procedure apli0001.pc_calc_poupanca
          pc_log_programa(PR_DSTIPLOG           => 'E',
                          PR_CDPROGRAMA         => pr_cdprogra||'_'||pr_nrcnvcob||'_'||pr_nrdconta,
                          pr_cdcooper           => pr_cdcooper,
                          pr_tpexecucao         => 2,                              -- Tipo de execucao (0-Outro/ 1-Batch/ 2-Job/ 3-Online)
                          pr_tpocorrencia       => 2,
                          pr_dsmensagem         => 'pr_cdcritic:'||pr_cdcritic||CHR(13)||
                                                   'pr_dscritic:'||pr_dscritic,
                          PR_IDPRGLOG           => vr_idlog_ini_par); 
          --Grava data fim para o JOB na tabela de LOG 
          pc_log_programa(pr_dstiplog   => 'F',    
                          pr_cdprograma => pr_cdprogra||'_'||pr_nrcnvcob||'_'||pr_nrdconta,           
                          pr_cdcooper   => pr_cdcooper, 
                          pr_tpexecucao => 2,          -- Tipo de execucao (0-Outro/ 1-Batch/ 2-Job/ 3-Online)
                          pr_idprglog   => vr_idlog_ini_par,
                          pr_flgsucesso => 0);  
          
          -- Encerrar o job do processamento paralelo dessa agência
          gene0001.pc_encerra_paralelo(pr_idparale => pr_idparale
                                      ,pr_idprogra => lpad(pr_nrcnvcob,10)||lpad(pr_nrdconta,10,0)
                                      ,pr_des_erro => vr_dscritic);
        end if;
        
      WHEN OTHERS THEN
        -- Erro
        pr_cdcritic:= 0;
        pr_dscritic:= 'Erro na rotina PAGA0001.pc_gera_arq_cooperad_par. '||sqlerrm;
        
        -- Na execução paralela
        if nvl(pr_idparale,0) <> 0 then 
          -- Grava LOG de ocorrência final da procedure apli0001.pc_calc_poupanca
          pc_log_programa(PR_DSTIPLOG           => 'E',
                          PR_CDPROGRAMA         => pr_cdprogra||'_'||pr_nrcnvcob||'_'||pr_nrdconta,
                          pr_cdcooper           => pr_cdcooper,
                          pr_tpexecucao         => 2,                              -- Tipo de execucao (0-Outro/ 1-Batch/ 2-Job/ 3-Online)
                          pr_tpocorrencia       => 2,
                          pr_dsmensagem         => 'pr_cdcritic:'||pr_cdcritic||CHR(13)||
                                                   'pr_dscritic:'||pr_dscritic,
                          PR_IDPRGLOG           => vr_idlog_ini_par); 
          --Grava data fim para o JOB na tabela de LOG 
          pc_log_programa(pr_dstiplog   => 'F',    
                          pr_cdprograma => pr_cdprogra||'_'||pr_nrcnvcob||'_'||pr_nrdconta,           
                          pr_cdcooper   => pr_cdcooper, 
                          pr_tpexecucao => 2,          -- Tipo de execucao (0-Outro/ 1-Batch/ 2-Job/ 3-Online)
                          pr_idprglog   => vr_idlog_ini_par,
                          pr_flgsucesso => 0);  
          
          -- Encerrar o job do processamento paralelo dessa agência
          gene0001.pc_encerra_paralelo(pr_idparale => pr_idparale
                                      ,pr_idprogra => lpad(pr_nrcnvcob,10)||lpad(pr_nrdconta,10,0)
                                      ,pr_des_erro => vr_dscritic);
        end if; 
        
    END;
  END pc_gera_arq_cooperad_par;  
  
  /* Procedure para verificar o tipo de retorno do arquivo do cooperado */
  PROCEDURE pc_verifica_ret_arq_coop(pr_cdcooper IN crapcop.cdcooper%TYPE   --Codigo Cooperativa
                                    ,pr_nrcnvcob IN crapcob.nrcnvcob%TYPE   --Numero Convenio
                                    ,pr_nrdconta IN crapcob.nrdconta%TYPE   --Numero da Conta
                                    ,pr_dtmvtolt IN crapdat.dtmvtolt%TYPE   --Data pagamento
                                    ,pr_idorigem IN INTEGER                 --Identificador Origem
                                    ,pr_flgproce IN INTEGER                 --Flag Processo
                                    ,pr_cdprogra IN crapprg.cdprogra%TYPE   --Nome Programa
                                    ,pr_tab_arq_cobranca  OUT PAGA0001.typ_tab_arq_cobranca --Tabela Cobranca
                                    ,pr_cdcritic OUT INTEGER                --Codigo da Critica
                                    ,pr_dscritic OUT VARCHAR2) IS           --Descricao Erro
  /*---------------------------------------------------------------------------------------------------------------

    Programa : pc_verifica_ret_arq_coop              Antigo:
    Sistema  : Conta-Corrente - Cooperativa de Credito
    Sigla    : CRED
    Autor    : Douglas Quisinski
    Data     : Dezembro/2017                          Ultima atualizacao:

    Dados referentes ao programa:

    Frequencia: -----
    Objetivo   : Procedure para verificar o tipo de retorno do arquivo do cooperado

    Alterações :

  ---------------------------------------------------------------------------------------------------------------*/

    -- Tipo de retorno do cooperado
    vr_inenvcob INTEGER;

    -- PL SQL para gerar o JOB
    vr_dsplsql        VARCHAR2(30000);
    vr_jobname        VARCHAR2(100);
    
    --Variaveis de Criticas
    vr_cdcritic INTEGER;
    vr_dscritic VARCHAR2(4000);
    vr_exc_erro EXCEPTION;
    vr_exc_saida EXCEPTION;
    
    -- Dados do convenio do cooperado
    CURSOR cr_crapceb(pr_cdcooper INTEGER
                     ,pr_nrdconta INTEGER
                     ,pr_nrconven INTEGER ) IS
      SELECT ceb.inenvcob
        FROM crapceb ceb
       WHERE ceb.cdcooper = pr_cdcooper
         AND ceb.nrdconta = pr_nrdconta
         AND ceb.nrconven = pr_nrconven;
    rw_crapceb cr_crapceb%ROWTYPE;
  
    BEGIN
      -- Buscar os dados do CEB do cooperado
      OPEN cr_crapceb(pr_cdcooper => pr_cdcooper
                     ,pr_nrdconta => pr_nrdconta
                     ,pr_nrconven => pr_nrcnvcob) ;
      FETCH cr_crapceb INTO rw_crapceb;
      
      -- Por padrao o retorno do cooperado é 0
      vr_inenvcob := 0;

      -- Verificar se encontrou a informação do convenio
      IF cr_crapceb%FOUND THEN
        -- Fechar o cursor
        CLOSE cr_crapceb;
        -- Se encontrou vamos utilizar a informação cadastrada
        vr_inenvcob := rw_crapceb.inenvcob;
      ELSE 
        -- Fechar o cursor
        CLOSE cr_crapceb;
      END IF;
      
      -- Verificar o tipo de retorno do convenio do cooperado
      IF vr_inenvcob  = 1 THEN
        -- Se o retorno é pelo Internet Bank, o processo continua o mesmo
        PAGA0001.pc_gera_arq_cooperado(pr_cdcooper => pr_cdcooper   --Codigo Cooperativa
                                      ,pr_nrcnvcob => pr_nrcnvcob   --Numero Convenio
                                      ,pr_nrdconta => pr_nrdconta   --Numero da Conta
                                      ,pr_dtmvtolt => pr_dtmvtolt   --Data pagamento
                                      ,pr_idorigem => pr_idorigem   --Identificador Origem
                                      ,pr_flgproce => pr_flgproce   --Flag Processo
                                      ,pr_cdprogra => pr_cdprogra   --Nome Programa
                                      ,pr_tab_arq_cobranca  => pr_tab_arq_cobranca --Tabela Cobranca
                                      ,pr_cdcritic => vr_cdcritic   --Codigo da Critica
                                      ,pr_dscritic => vr_dscritic); --Descricao da critica

        --Se ocorreu erro
        IF vr_cdcritic IS NOT NULL OR vr_dscritic IS NOT NULL THEN
          --Se nao tem a descricao do erro
          IF vr_cdcritic = 0 AND vr_dscritic IS NULL THEN
            vr_dscritic:= 'Nao foi possivel gerar o arquivo.';
          END IF;

          --Levantar Excecao
          RAISE vr_exc_erro;
        END IF;
        
      ELSIF vr_inenvcob = 2 THEN
        -- Se o retorno do cooperado é pelo FTP, vamos devolver uma mensagem de alerta
        -- e criar um job para gerar o arquivo e disponibilizar no FTP
        vr_jobname := 'JBRET_'||pr_nrdconta||'$';
        vr_dsplsql := 
'declare 
  vr_cdcritic INTEGER;
  vr_dscritic VARCHAR2(4000);

  vr_tab_arq_cobranca PAGA0001.typ_tab_arq_cobranca;
begin
  -- Se o retorno é pelo Internet Bank, o processo continua o mesmo
  PAGA0001.pc_gera_arq_cooperado(pr_cdcooper => ' || pr_cdcooper || '
                                ,pr_nrcnvcob => ' || pr_nrcnvcob || '
                                ,pr_nrdconta => ' || pr_nrdconta || '
                                ,pr_dtmvtolt => to_date(''' || to_char(pr_dtmvtolt,'DD/MM/YYYY') || ''',''DD/MM/YYYY'')
                                ,pr_idorigem => 7 -- FTP
                                ,pr_flgproce => ' || pr_flgproce || '
                                ,pr_cdprogra => ''' || pr_cdprogra || '''
                                ,pr_tab_arq_cobranca  => vr_tab_arq_cobranca 
                                ,pr_cdcritic => vr_cdcritic
                                ,pr_dscritic => vr_dscritic);
                                                      
  IF NVL(vr_cdcritic,0) > 0 OR
    TRIM(vr_dscritic) IS NOT NULL THEN
    btch0001.pc_gera_log_batch(pr_cdcooper     => ' || pr_cdcooper || '
                              ,pr_ind_tipo_log => 2 -- Erro tratato
                              ,pr_nmarqlog     => ''JBCOBRAN_ARQ_RET.log''
                              ,pr_des_log      => to_char(sysdate,''hh24:mi:ss'') || '' - '' ||
                                                  ''JBCOBRAN_ARQ_RET.pc_gera_arq_cooperado'' || '' --> ATENCAO !! '' ||
                                                  ''Erro: ''|| vr_cdcritic || ''-'' || vr_dscritic);
  END IF;
  
  COMMIT;

exception
  when others then
    btch0001.pc_gera_log_batch(pr_cdcooper     => ' || pr_cdcooper || '
                              ,pr_ind_tipo_log => 2 -- Erro tratato
                              ,pr_nmarqlog     => ''JBCOBRAN_ARQ_RET.log''
                              ,pr_des_log      => to_char(sysdate,''hh24:mi:ss'') || '' - '' ||
                                                  ''JBCOBRAN_ARQ_RET.pc_gera_arq_cooperado'' || '' --> ATENCAO !! '' ||
                                                  ''Erro: '' || SQLERRM);
                        
    rollback;
end;';
    
        gene0001.pc_submit_job(pr_cdcooper => pr_cdcooper, 
                               pr_cdprogra => 'PAGA0001', 
                               pr_dsplsql  => vr_dsplsql, 
                               pr_dthrexe  => NULL, 
                               pr_interva  => NULL, 
                               pr_jobname  => vr_jobname, 
                               pr_des_erro => vr_dscritic );
                                       
        IF vr_dscritic IS NOT NULL THEN
          RAISE vr_exc_erro;
        END IF;

        vr_cdcritic := 0;
        vr_dscritic := 'INFORM: Geração iniciada, em instantes o arquivo será disponibilizado no FTP';
        RAISE vr_exc_saida;
        
      ELSE
        vr_cdcritic := 0;
        vr_dscritic := 'Retorno do arquivo de cobranca inválido!#' || 
                       'O retorno permitido é 1 (Internet Bank) ou 2 (FTP), ' ||
                       'e o retorno atual é ' || vr_inenvcob || '.#' ||
                       'Entre em contato com o seu PA.';
        RAISE vr_exc_erro;
        
      END IF;

    EXCEPTION
      WHEN vr_exc_saida THEN

        --Erro
        pr_cdcritic:= vr_cdcritic;
        pr_dscritic:= vr_dscritic;

      WHEN vr_exc_erro THEN

        --Erro
        pr_cdcritic:= vr_cdcritic;
        pr_dscritic:= vr_dscritic;

      WHEN OTHERS THEN
        pr_cdcritic:= 9999;
        -- Chamar rotina de gravação de erro
        pr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic)|| 
                      'PAGA0001.pc_verifica_ret_arq_coop. ' || SQLERRM ||'.';

  END pc_verifica_ret_arq_coop;
  /* Procedure para Gerar arquivo para cooperado */
  PROCEDURE pc_gera_arq_cooperado_car(pr_cdcooper IN crapcop.cdcooper%TYPE   --Codigo Cooperativa
                                     ,pr_nrcnvcob IN crapcob.nrcnvcob%TYPE   --Numero Convenio
                                     ,pr_nrdconta IN crapcob.nrdconta%TYPE   --Numero da Conta
                                     ,pr_dtmvtolt IN crapdat.dtmvtolt%TYPE   --Data pagamento
                                     ,pr_idorigem IN INTEGER                 --Identificador Origem
                                     ,pr_flgproce IN INTEGER                 --Flag Processo
                                     ,pr_cdprogra IN crapprg.cdprogra%TYPE   --Nome Programa
                                     ,pr_nmdcampo OUT VARCHAR2               --Nome do Campo
                                     ,pr_des_erro OUT VARCHAR2               --Saida OK/NOK
                                     ,pr_clob_ret OUT CLOB                   --Tabela arquivo cobranca
                                     ,pr_cdcritic OUT PLS_INTEGER            --Codigo Erro
                                     ,pr_dscritic OUT VARCHAR2) IS           --Descricao Erro
  /*---------------------------------------------------------------------------------------------------------------

    Programa : pc_gera_arq_cooperado_car              Antigo:
    Sistema  : Conta-Corrente - Cooperativa de Credito
    Sigla    : CRED
    Autor    : Adriano
    Data     : Outubro/2015                           Ultima atualizacao: 15/12/2017

    Dados referentes ao programa:

    Frequencia: -----
    Objetivo   : Procedure para gerar arquivo cobranca cooperado

    Alterações : 13/12/2017 - Ajuste para chamar a rotina pc_verifica_ret_arq_coop que vai
                              validar se o cooperado possui retorno para o FTP, ou Internet 
                              Bank, pois se o retorno é por FTP, devolvemos apenas uma mensagem
                              informando que o processo foi iniciado e o arquivo será 
                              disponibilizado no FTP (Douglas - Chamado 756030)

    
                 15/12/2017 - Incluido nome do módulo logado
                              No caso de erro de programa gravar tabela especifica de log                     
                              Ajuste mensagem de erro 
                             (Belli - Envolti - Chamado 779415)        

  ---------------------------------------------------------------------------------------------------------------*/

    --Variaveis de Criticas
    vr_cdcritic INTEGER;
    vr_dscritic VARCHAR2(4000);

    --Tabelas de Memoria
    vr_tab_arq_cobranca PAGA0001.typ_tab_arq_cobranca;

    --Variaveis Arquivo Dados
    vr_dstexto VARCHAR2(32767);
    vr_string  VARCHAR2(32767);

    --Variaveis de Indice
    vr_index PLS_INTEGER;

    --Variaveis de Excecoes
    vr_exc_erro  EXCEPTION;

    --Variáveis locais
    vr_dtmvtolt DATE;
    --Agrupa os parametros - 15/12/2017 - Chamado 779415 
    vr_dsparame VARCHAR2(4000);

    BEGIN
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_gera_arq_cooperado_car'); 
      
      --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
      vr_dsparame :=  ' pr_cdcooper:'  || pr_cdcooper ||
                      ', pr_nrcnvcob:' || pr_nrcnvcob || 
                      ', pr_nrdconta:' || pr_nrdconta || 
                      ', pr_dtmvtolt:' || pr_dtmvtolt || 
                      ', pr_idorigem:' || pr_idorigem || 
                      ', pr_flgproce:' || pr_flgproce || 
                      ', pr_cdprogra:' || pr_cdprogra;      

      --Limpar tabela dados
      vr_tab_arq_cobranca.DELETE;

      --Inicializar Variaveis
      vr_cdcritic:= 0;

      vr_dscritic:= null;

      PAGA0001.pc_verifica_ret_arq_coop(pr_cdcooper => pr_cdcooper   --Codigo Cooperativa
                                    ,pr_nrcnvcob => pr_nrcnvcob   --Numero Convenio
                                    ,pr_nrdconta => pr_nrdconta   --Numero da Conta
                                    ,pr_dtmvtolt => pr_dtmvtolt   --Data pagamento
                                    ,pr_idorigem => pr_idorigem   --Identificador Origem
                                    ,pr_flgproce => pr_flgproce   --Flag Processo
                                    ,pr_cdprogra => pr_cdprogra   --Nome Programa
                                    ,pr_tab_arq_cobranca  => vr_tab_arq_cobranca --Tabela Cobranca
                                    ,pr_cdcritic => vr_cdcritic   --Codigo da Critica
                                    ,pr_dscritic => vr_dscritic); --Descricao da critica

      --Se ocorreu erro
      IF vr_cdcritic IS NOT NULL OR vr_dscritic IS NOT NULL THEN

        --Se nao tem a descricao do erro
        IF vr_cdcritic = 0 AND vr_dscritic IS NULL THEN
          --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
          --Montar mensagem de erro
          vr_cdcritic:= 1050; --Nao foi possivel gerar o arquivo
          vr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        END IF;

        --Levantar Excecao
        RAISE vr_exc_erro;

      END IF;
	    -- Retorna nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_gera_arq_cooperado_car');

      --Montar CLOB
      IF vr_tab_arq_cobranca.COUNT > 0 THEN

        -- Criar documento XML
        dbms_lob.createtemporary(pr_clob_ret, TRUE);
        dbms_lob.open(pr_clob_ret, dbms_lob.lob_readwrite);

        -- Insere o cabeçalho do XML
        gene0002.pc_escreve_xml(pr_xml            => pr_clob_ret
                               ,pr_texto_completo => vr_dstexto
                               ,pr_texto_novo     => '<?xml version="1.0" encoding="ISO-8859-1"?><root>');
	      -- Retorna nome do módulo logado - 15/12/2017 - Chamado 779415
		    GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_gera_arq_cooperado_car');
        --Buscar Primeiro beneficiario
        vr_index:= vr_tab_arq_cobranca.FIRST;

        --Percorrer todos os beneficiarios
        WHILE vr_index IS NOT NULL LOOP

          vr_string:= '<DADOS>'||
                         '<cdseqlin>'||vr_index|| '</cdseqlin>'||
                         '<dsdlinha>'||NVL(TO_CHAR(vr_tab_arq_cobranca(vr_index)),' ')|| '</dsdlinha>'||
                      '</DADOS>';

          -- Escrever no XML
          gene0002.pc_escreve_xml(pr_xml            => pr_clob_ret
                                 ,pr_texto_completo => vr_dstexto
                                 ,pr_texto_novo     => vr_string
                                 ,pr_fecha_xml      => FALSE);

          --Proximo Registro
          vr_index:= vr_tab_arq_cobranca.NEXT(vr_index);

        END LOOP;
	      -- Retorna nome do módulo logado - 15/12/2017 - Chamado 779415
		    GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_gera_arq_cooperado_car');

        OPEN cr_crapceb(pr_cdcooper
				               ,pr_nrdconta
											 ,pr_nrcnvcob);
 			  FETCH cr_crapceb INTO rw_crapceb;
				
				IF cr_crapceb%FOUND THEN

				  vr_string:= '<DADOS>'||
												 '<inenvcob>'||rw_crapceb.inenvcob|| '</inenvcob>'||
											'</DADOS>';

          -- Escrever no XML
          gene0002.pc_escreve_xml(pr_xml            => pr_clob_ret
                                 ,pr_texto_completo => vr_dstexto
                                 ,pr_texto_novo     => vr_string
                                 ,pr_fecha_xml      => FALSE);
					
				END IF;
				
				CLOSE cr_crapceb;

        -- Encerrar a tag raiz
        gene0002.pc_escreve_xml(pr_xml            => pr_clob_ret
                               ,pr_texto_completo => vr_dstexto
                               ,pr_texto_novo     => '</root>'
                               ,pr_fecha_xml      => TRUE);

      END IF;

      --Retorno
      pr_des_erro:= 'OK';
	    -- Limpo nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);

    EXCEPTION
      -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
      -- Neste caso quem grava a TBGEN é a Procedure anterior pc_gera_arq_cooperado
      -- Disparadores: InternetBank36.p "Sem procedure"        - Não grava TBGEN
      WHEN vr_exc_erro THEN
        -- Retorno não OK
        pr_des_erro:= 'NOK';

        --Erro
        pr_cdcritic:= vr_cdcritic;
        pr_dscritic:= vr_dscritic || vr_dsparame;

      WHEN OTHERS THEN
        -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
        CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);   
        -- Retorno não OK
        pr_des_erro:= 'NOK';
        -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        pr_cdcritic:= 9999;
        pr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic)|| 
                      'PAGA0001.pc_gera_arq_cooperado_car. ' || SQLERRM  ||
                      '.' || vr_dsparame ;	

  END pc_gera_arq_cooperado_car;

  /* Procedure para efetuar lancamento das tarifas */
  PROCEDURE pc_efetua_lancto_tarifas_lat (pr_cdcooper  IN crapcop.cdcooper%type   --Codigo Cooperativa
                                         ,pr_dtmvtolt  IN crapdat.dtmvtolt%TYPE   --Data pagamento
                                         ,pr_tab_lat_consolidada IN OUT PAGA0001.typ_tab_lat_consolidada
                                         ,pr_cdcritic  OUT INTEGER                --Codigo da Critica
                                         ,pr_dscritic  OUT VARCHAR2) IS           --Descricao da critica
    /* .........................................................................
    --
    --  Programa : pc_efetua_lancto_tarifas_lat           Antigo: b1wgen0090.p/efetua-lancamento-tarifas-lat
    --  Sistema  : Cred
    --  Sigla    : PAGA0001
    --  Autor    : Alisson C. Berrido - AMcom
    --  Data     : Dezembro/2013.                   Ultima atualizacao: 15/12/2017
    --
    --  Dados referentes ao programa:
    --
    --   Frequencia: Sempre que for chamado
    --   Objetivo  : Procedure para efetuar os lancamentos de tarifa
    --
    --   Atualização: 09/05/2014 - Ajustado para somente buscar tarifa
    --                             se for inpessoa <> 3 (sem fins lucartivos) (Odirlei/AMcom)
    --
    --                15/02/2016 - Inclusao do parametro conta na chamada da
    --                             TARI0001.pc_carrega_dados_tarifa_cobr. (Jaison/Marcos)
    --
    --                15/12/2017 - Incluido nome do módulo logado
    --                             No caso de erro de programa gravar tabela especifica de log                     
    --                             Ajuste mensagem de erro 
    --                            (Belli - Envolti - Chamado 779415)    
    --
    -- .........................................................................*/

  BEGIN
    DECLARE
      --Selecionar Convenios
      CURSOR cr_crapcco (pr_cdcooper IN crapcco.cdcooper%type
                        ,pr_nrconven IN crapcco.nrconven%type) IS
        SELECT crapcco.cdbccxlt
              ,crapcco.nrdolote
        FROM crapcco
        WHERE crapcco.cdcooper = pr_cdcooper
        AND   crapcco.nrconven = pr_nrconven
        ORDER BY crapcco.progress_recid ASC;
      rw_crapcco cr_crapcco%ROWTYPE;
      --Variaveis Locais
      vr_qtd       INTEGER:= 0;
      vr_inpessoa  INTEGER;
      vr_cdhistor  INTEGER;
      vr_cdhisest  INTEGER;
      vr_vltarifa  NUMBER;
      vr_dtdivulg  DATE;
      vr_dtvigenc  DATE;
      vr_cdfvlcop  INTEGER;
      vr_rowid_craplat ROWID;
      --Variavel de Indice da tabela
      vr_index     VARCHAR2(60);
      vr_index2    VARCHAR2(60);
      --Tabela memoria de erros
      vr_tab_erro  GENE0001.typ_tab_erro;
      --Tabela de Memoria Auxiliar
      vr_tab_lat_consolidada PAGA0001.typ_tab_lat_consolidada;
      --Variaveis de erro
      vr_cdcritic  INTEGER;
      vr_dscritic  VARCHAR2(4000);
      vr_dsmensag  VARCHAR2(4000);
      --Variaveis de Excecao
      vr_exc_erro  EXCEPTION;
      vr_exc_proximo EXCEPTION;
      --Agrupa os parametros - 15/12/2017 - Chamado 779415 
      vr_dsparame VARCHAR2(4000);
    BEGIN
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_efetua_lancto_tarifas_lat');
      
      --Inicializa variaveis erro
      pr_cdcritic:= NULL;
      pr_dscritic:= NULL;
      
      --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
      vr_dsparame :=  ' pr_cdcooper:'  || pr_cdcooper ||
                      ', pr_dtmvtolt:' || pr_dtmvtolt;  
      --Inicializar tabela auxiliar
      vr_tab_lat_consolidada.DELETE;
      --Verificar se a data existe
      OPEN BTCH0001.cr_crapdat(pr_cdcooper => pr_cdcooper);
      FETCH BTCH0001.cr_crapdat INTO rw_crapdat;
      -- Se nao encontrar
      IF BTCH0001.cr_crapdat%NOTFOUND THEN
        -- Fechar o cursor pois haverá raise
        CLOSE BTCH0001.cr_crapdat;
        --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        -- Montar mensagem de critica
        vr_cdcritic := 1; --Data nao cadastrada
        vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        RAISE vr_exc_erro;
      ELSE
        -- Apenas fechar o cursor
        CLOSE BTCH0001.cr_crapdat;
      END IF;
      /* Leitura Tabela Lancamentos Tarifa */
      vr_index:= pr_tab_lat_consolidada.FIRST;
      WHILE vr_index IS NOT NULL LOOP
        BEGIN
          --Primeiro registro do motivo ou mudou registro
          IF vr_index = pr_tab_lat_consolidada.FIRST OR
             pr_tab_lat_consolidada(vr_index).cdcooper <> pr_tab_lat_consolidada(pr_tab_lat_consolidada.PRIOR(vr_index)).cdcooper OR
             pr_tab_lat_consolidada(vr_index).nrdconta <> pr_tab_lat_consolidada(pr_tab_lat_consolidada.PRIOR(vr_index)).nrdconta OR
             pr_tab_lat_consolidada(vr_index).nrcnvcob <> pr_tab_lat_consolidada(pr_tab_lat_consolidada.PRIOR(vr_index)).nrcnvcob OR
             pr_tab_lat_consolidada(vr_index).cdocorre <> pr_tab_lat_consolidada(pr_tab_lat_consolidada.PRIOR(vr_index)).cdocorre OR
             nvl(pr_tab_lat_consolidada(vr_index).cdmotivo,'#') <> nvl(pr_tab_lat_consolidada(pr_tab_lat_consolidada.PRIOR(vr_index)).cdmotivo,'#') THEN
            --Zerar quantidade
            vr_qtd:= 0;
          END IF;
          /* Acumulo quantidade de registros conforme break by */
          vr_qtd:= vr_qtd + 1;
          --Ultimo registro do motivo
          IF vr_index = pr_tab_lat_consolidada.LAST OR
             pr_tab_lat_consolidada(vr_index).cdcooper <> pr_tab_lat_consolidada(pr_tab_lat_consolidada.NEXT(vr_index)).cdcooper OR
             pr_tab_lat_consolidada(vr_index).nrdconta <> pr_tab_lat_consolidada(pr_tab_lat_consolidada.NEXT(vr_index)).nrdconta OR
             pr_tab_lat_consolidada(vr_index).nrcnvcob <> pr_tab_lat_consolidada(pr_tab_lat_consolidada.NEXT(vr_index)).nrcnvcob OR
             pr_tab_lat_consolidada(vr_index).cdocorre <> pr_tab_lat_consolidada(pr_tab_lat_consolidada.NEXT(vr_index)).cdocorre OR
             nvl(pr_tab_lat_consolidada(vr_index).cdmotivo,'#') <> nvl(pr_tab_lat_consolidada(pr_tab_lat_consolidada.NEXT(vr_index)).cdmotivo,'#') THEN

            /* Verifica tipo pessoa a ser usada para buscar tarifa  */
            vr_inpessoa:= 2; /* Assume como padrao pessoa juridica */
            OPEN cr_crapass(pr_cdcooper => pr_tab_lat_consolidada(vr_index).cdcooper
                           ,pr_nrdconta => pr_tab_lat_consolidada(vr_index).nrdconta);
            FETCH cr_crapass INTO rw_crapass;
            --Se nao encontrou associado
            IF cr_crapass%FOUND THEN
              vr_inpessoa:= rw_crapass.inpessoa;
            END IF;
            --Fechar Cursor
            CLOSE cr_crapass;

            --Zerar tarifa
            vr_vltarifa:= 0;
            --só buscar tarifa se for inpessoa <> 3(sem fins lucartivos)
            -- se for 3 pr_vltarifa ficará zero
            IF vr_inpessoa <> 3 THEN
              /* Busca informacoes tarifa */
              TARI0001.pc_carrega_dados_tarifa_cobr (pr_cdcooper  => pr_tab_lat_consolidada(vr_index).cdcooper  --Codigo Cooperativa
                                                    ,pr_nrdconta  => pr_tab_lat_consolidada(vr_index).nrdconta  --Numero Conta
                                                    ,pr_nrconven  => pr_tab_lat_consolidada(vr_index).nrcnvcob  --Numero Convenio
                                                    ,pr_dsincide  => pr_tab_lat_consolidada(vr_index).dsincide  --Descricao Incidencia
                                                    ,pr_cdocorre  => pr_tab_lat_consolidada(vr_index).cdocorre  --Codigo Ocorrencia
                                                    ,pr_cdmotivo  => pr_tab_lat_consolidada(vr_index).cdmotivo  --Codigo Motivo
                                                    ,pr_inpessoa  => vr_inpessoa  --Tipo Pessoa
                                                    ,pr_vllanmto  => pr_tab_lat_consolidada(vr_index).vllanmto            --Valor Lancamento
                                                    ,pr_cdprogra  => NULL         --Nome Programa
                                                    ,pr_flaputar  => 1            -- Deve haver apuracao
                                                    ,pr_cdhistor  => vr_cdhistor  --Codigo Historico
                                                    ,pr_cdhisest  => vr_cdhisest  --Historico Estorno
                                                    ,pr_vltarifa  => vr_vltarifa  --Valor Tarifa
                                                    ,pr_dtdivulg  => vr_dtdivulg  --Data Divulgacao
                                                    ,pr_dtvigenc  => vr_dtvigenc  --Data Vigencia
                                                    ,pr_cdfvlcop  => vr_cdfvlcop  --Codigo Faixa
                                                    ,pr_cdcritic  => vr_cdcritic  --Codigo Critica
                                                    ,pr_dscritic  => vr_dscritic);--Descricao Critica
              --Se ocorreu erro
              IF NVL(vr_cdcritic,0) <> 0 OR TRIM(vr_dscritic) IS NOT NULL THEN
                RAISE vr_exc_proximo;
              END IF;
	            -- Retorno nome do módulo logado - 15/12/2017 - Chamado 779415
		          GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_efetua_lancto_tarifas_lat');
            END IF; -- FIM IF inpessoa <> 3

            /* Efetua lancamento CRAPLAT apenas se tiver valor de tarifa */
            IF nvl(vr_vltarifa,0) > 0 THEN
              --Selecionar parametros Cobranca
              OPEN cr_crapcco (pr_cdcooper => pr_tab_lat_consolidada(vr_index).cdcooper
                              ,pr_nrconven => pr_tab_lat_consolidada(vr_index).nrcnvcob);
              --Posicionar no proximo registro
              FETCH cr_crapcco INTO rw_crapcco;
              --Se nao encontrar
              IF cr_crapcco%NOTFOUND THEN
                --Fechar Cursor
                CLOSE cr_crapcco;
                --Montar mensagem critica
                vr_dsmensag:= 'Erro geracao CRAPLAT. Convenio: '||
                              pr_tab_lat_consolidada(vr_index).nrcnvcob||
                              ' - CRAPCCO';
                pr_tab_lat_consolidada(vr_index).dscritic:= vr_dsmensag;
                --Proximo registro
                RAISE vr_exc_proximo;
              END IF;
              --Fechar Cursor
              CLOSE cr_crapcco;
              /* Efetua um lancamento apenas para cada cooper conta convenio ocorrencia motivo*/
              vr_vltarifa:= vr_vltarifa * vr_qtd;
              /* Efetua lancamento tarifa (craplat) */
              TARI0001.pc_cria_lan_auto_tarifa (pr_cdcooper => pr_tab_lat_consolidada(vr_index).cdcooper           --Codigo Cooperativa
                                               ,pr_nrdconta => pr_tab_lat_consolidada(vr_index).nrdconta   --Numero da Conta
                                               ,pr_dtmvtolt => pr_dtmvtolt   --Data Lancamento
                                               ,pr_cdhistor => vr_cdhistor   --Codigo Historico
                                               ,pr_vllanaut => vr_vltarifa   --Valor lancamento automatico
                                               ,pr_cdoperad => '1'                   --Codigo Operador
                                               ,pr_cdagenci => 1                     --Codigo Agencia
                                               ,pr_cdbccxlt => rw_crapcco.cdbccxlt   --Codigo banco caixa
                                               ,pr_nrdolote => rw_crapcco.nrdolote   --Numero do lote
                                               ,pr_tpdolote => 1                     --Tipo do lote
                                               ,pr_nrdocmto => 0                     --Numero do documento
                                               ,pr_nrdctabb => pr_tab_lat_consolidada(vr_index).nrdconta   --Numero da conta
                                               ,pr_nrdctitg => gene0002.fn_mask(pr_tab_lat_consolidada(vr_index).nrdconta,'99999999')   --Numero da conta integracao
                                               ,pr_cdpesqbb => NULL                  --Codigo pesquisa
                                               ,pr_cdbanchq => 0                     --Codigo Banco Cheque
                                               ,pr_cdagechq => 0                     --Codigo Agencia Cheque
                                               ,pr_nrctachq => 0                     --Numero Conta Cheque
                                               ,pr_flgaviso => FALSE                 --Flag aviso
                                               ,pr_tpdaviso => 0                     --Tipo aviso
                                               ,pr_cdfvlcop => vr_cdfvlcop           --Codigo cooperativa
                                               ,pr_inproces => rw_crapdat.inproces   --Indicador processo
                                               ,pr_rowid_craplat => vr_rowid_craplat --Rowid do lancamento tarifa
                                               ,pr_tab_erro => vr_tab_erro           --Tabela retorno erro
                                               ,pr_cdcritic => vr_cdcritic           --Codigo Critica
                                               ,pr_dscritic => vr_dscritic);         --Descricao Critica
              --Se ocorreu erro
              IF NVL(vr_cdcritic,0) <> 0 OR TRIM(vr_dscritic) IS NOT NULL THEN
                --Se possui erro na tabela memoria
                IF vr_tab_erro.COUNT > 0 THEN
                  --Montar Mensagem erro
                  vr_dsmensag:= 'Erro geracao CRAPLAT. Conta: '||
                                gene0002.fn_mask_conta(rw_crapass.nrdconta)||
                                ' - '||vr_tab_erro(vr_tab_erro.FIRST).dscritic||
                                ' - '||pr_tab_lat_consolidada(vr_index).cdocorre;
                  pr_tab_lat_consolidada(vr_index).dscritic:= vr_dsmensag;
                  --Proximo Registro
                  RAISE vr_exc_proximo;
                END IF;
              END IF;
	            -- Retorno nome do módulo logado - 15/12/2017 - Chamado 779415
		          GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_efetua_lancto_tarifas_lat');
            END IF; /* fim if aux_vltarifa > 0 */
          END IF; --LAST-OF
          --Proximo registro loop
          vr_index:= pr_tab_lat_consolidada.NEXT(vr_index);
        EXCEPTION
          WHEN vr_exc_proximo THEN
            vr_index:= pr_tab_lat_consolidada.NEXT(vr_index);
        END;
      END LOOP;
      /* Rotina para replicar erros para demais documentos ja que lancamento estava consolidado */
      /* e apenas registrou erro no ultimo documento */
      vr_tab_lat_consolidada:= pr_tab_lat_consolidada;

      /* Leitura de erros ocorridos */
      IF vr_tab_lat_consolidada.COUNT > 0 THEN
        --Primeiro registro
        vr_index:= vr_tab_lat_consolidada.FIRST;
        WHILE vr_index IS NOT NULL LOOP
          --Se tiver erro
          IF vr_tab_lat_consolidada(vr_index).dscritic IS NOT NULL THEN
            --Primeiro registro
            vr_index2:= pr_tab_lat_consolidada.FIRST;
            --Percorrer a tabela
            WHILE vr_index2 IS NOT NULL LOOP
              IF vr_tab_lat_consolidada(vr_index).cdcooper = pr_tab_lat_consolidada(vr_index2).cdcooper AND
                 vr_tab_lat_consolidada(vr_index).nrdconta = pr_tab_lat_consolidada(vr_index2).nrdconta AND
                 vr_tab_lat_consolidada(vr_index).nrcnvcob = pr_tab_lat_consolidada(vr_index2).nrcnvcob AND
                 vr_tab_lat_consolidada(vr_index).cdocorre = pr_tab_lat_consolidada(vr_index2).cdocorre AND
                 nvl(vr_tab_lat_consolidada(vr_index).cdmotivo,'#') = nvl(pr_tab_lat_consolidada(vr_index2).cdmotivo,'#') THEN
                /* Registra erros ocorridos na CRAPCOL */
                BEGIN
                  INSERT INTO crapcol
                    (crapcol.cdcooper
                    ,crapcol.nrdconta
                    ,crapcol.nrdocmto
                    ,crapcol.nrcnvcob
                    ,crapcol.dslogtit
                    ,crapcol.cdoperad
                    ,crapcol.dtaltera
                    ,crapcol.hrtransa)
                  VALUES
                    (pr_tab_lat_consolidada(vr_index2).cdcooper
                    ,pr_tab_lat_consolidada(vr_index2).nrdconta
                    ,pr_tab_lat_consolidada(vr_index2).nrdocmto
                    ,pr_tab_lat_consolidada(vr_index2).nrcnvcob
                    ,SUBSTR(pr_tab_lat_consolidada(vr_index2).dscritic,1,109)
                    ,'TARIFA'
                    ,SYSDATE
                    ,gene0002.fn_busca_time);
                EXCEPTION
                  WHEN OTHERS THEN
                    -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
                    CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);   
                    -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
                    vr_cdcritic := 1034;
                    vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                               'CRAPCOL(32):' ||
                               ' cdcooper:'  || pr_tab_lat_consolidada(vr_index2).cdcooper ||
                               ', nrdconta:' || pr_tab_lat_consolidada(vr_index2).nrdconta ||
                               ', nrdocmto:' || pr_tab_lat_consolidada(vr_index2).nrdocmto ||
                               ', nrcnvcob:' || pr_tab_lat_consolidada(vr_index2).nrcnvcob ||
                               ', dslogtit:' || SUBSTR(pr_tab_lat_consolidada(vr_index2).dscritic,1,109) ||
                               ', cdoperad:' || 'TARIFA' ||
                               ', dtaltera:' || 'SYSDATE' ||
                               ', hrtransa:' || gene0002.fn_busca_time ||
                               '. ' ||sqlerrm;
                    RAISE vr_exc_erro;
                END;
              END IF;
              --Proximo Registro
              vr_index2:= pr_tab_lat_consolidada.NEXT(vr_index2);
            END LOOP;
          END IF;
          --Proximo Registro
          vr_index:= vr_tab_lat_consolidada.NEXT(vr_index);
        END LOOP;
      END IF;
      --Limpar tabela auxiliar
      vr_tab_lat_consolidada.DELETE;
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);
    EXCEPTION
      -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
      -- Disparadores: COBR0006.                               - 
	    --               COBR0006.                               -
	    --               COBR0006.                               -
	    --               COBR0010.                               -
	    --               COBR0010.                               -
	    --               pc_crps538.prc                          -
	    --               PC_CRPS538_1.prc                        -
	    --               pc_crps594.prc                          -
	    --               pc_crps702.prc                          -
      WHEN vr_exc_erro THEN
        pr_cdcritic:= vr_cdcritic;
        pr_dscritic:= vr_dscritic;
        --> Geração de log - 15/12/2017 - Chamado 779415                           
        pc_controla_log_programa( pr_cdcooper      => pr_cdcooper
                                 ,pr_dstiplog      => 'E' -- Tipo de Log - E = erro
                                 ,pr_tpocorrencia  => 2
                                 ,pr_cdmensagem    => pr_cdcritic  -- Codigo do Log
                                 ,pr_dsmensagem    => pr_dscritic ||
                                                      vr_dsparame
                                 ); 
      WHEN OTHERS THEN
        -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
        CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);   
        -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        pr_cdcritic:= 9999;
        pr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic) || 
                      'PAGA0001.pc_efetua_lancto_tarifas_lat. ' || SQLERRM ||
                      '.' || vr_dsparame;
        --> Geração de log - 15/12/2017 - Chamado 779415                           
        pc_controla_log_programa( pr_cdcooper      => pr_cdcooper
                                 ,pr_dstiplog      => 'E' -- Tipo de Log - E = erro
                                 ,pr_tpocorrencia  => 2
                                 ,pr_cdmensagem    => pr_cdcritic  -- Codigo do Log
                                 ,pr_dsmensagem    => pr_dscritic
                                 ); 
    END;
  END pc_efetua_lancto_tarifas_lat;

  /* Procedure para processar solicitação de envio da jdda */
  PROCEDURE pc_processa_crapdda (pr_dscritic  OUT VARCHAR2) IS           --Descricao da critica
    -- .........................................................................
    --
    --  Programa : pc_processa_crapdda
    --  Sistema  : Cred
    --  Sigla    : PAGA0001
    --  Autor    : Odirlei Busana - AMcom
    --  Data     : Maio/2014.                   Ultima atualizacao: 03/01/2018
    --
    --  Dados referentes ao programa:
    --
    --   Frequencia: Sempre que for chamado
    --   Objetivo  : Procedure para processar solicitação na crapdda e comunicar com a JDDA
    --   Alteração : 28/07/2017 - Alterado o nome da rotina de pc_liquid_intrabancaria_dda para pc_baixa_efetiva_npc,
    --                            pois será utilizada tanto para intra quanto para interbancaria.
    --                            PRJ340 - NPC (Odirlei-AMcom)
    -- 
    --               08/12/2017 - Inclusão de chamada da npcb0002.pc_libera_sessao_sqlserver_npc
    --                            (SD#791193 - AJFink)		  
    --
    --               15/12/2017 - Incluido nome do módulo logado
    --                            No caso de erro de programa gravar tabela especifica de log                     
    --                            Ajuste mensagem de erro 
    --                           (Belli - Envolti - Chamado 779415)  
    --
    --               03/01/2018 - Adicionar chamada para a CECRED.pc_internal_exception,
    --                            para possibilitar a identificação do erro
    --                            (Douglas - Chamado 822826)
    --
    --               03/01/2018 - Reter a integração com a Cabine JDNPC até que a
    --                            mensagem de abertura do dia seja recebida pela Cabine.
    --                            (AJFink - SCTASK0015832)
    -- .........................................................................

  --buscar solicitações pendentes
  CURSOR cr_crapdda is
    SELECT cobrowid,
           dda.nrseqdda,
           dda.dtsolici,
           dda.cdcooper,
           dda.rowid,
           cob.incobran
      FROM crapdda dda,
           crapcob cob
     WHERE dda.dtproces is null
       AND dda.flgerado = 'N'
       AND dda.cobrowid = cob.rowid
     order by cdcooper,dtsolici;

    vr_flgerro    BOOLEAN := FALSE;
    vr_cdcritic   NUMBER;
    vr_dscritic   VARCHAR2(4000);
    -- Guardar HMTL texto
    vr_dshmtl     CLOB;
    vr_dshmtl_aux VARCHAR2(32600) := NULL;
    vr_dscorpo    VARCHAR2(3000);
    vr_dslista_email VARCHAR2(4000);
    --diretorio da cooperativa
    vr_dsdircop   VARCHAR2(400);
    -- Erro no envio
    vr_dserro     VARCHAR2(4000);

    vr_cdprogra    VARCHAR2(40) := 'PC_PROCESSA_CRAPDDA';
    vr_nomdojob    VARCHAR2(40) := 'JBDDA_PROCESSA_CRAPDDA';
    vr_flgerlog    BOOLEAN := FALSE;

-- Excluida pc_controla_log_batch e substituida pela pc_controla_log_programa - 15/12/2017 - Chamado 779415

    /*montar descrição de erro para envio email*/
    procedure pc_monta_erro ( pr_crapdda cr_crapdda%rowtype,
                              pr_dscritic varchar2 )is

    BEGIN
      --se for o primeiro a apresentar erro
      IF not vr_flgerro THEN
        vr_flgerro := TRUE;

         dbms_lob.createtemporary(vr_dshmtl, TRUE, dbms_lob.CALL);
         dbms_lob.open(vr_dshmtl,dbms_lob.lob_readwrite);
         -- Montar o cabeçalho do html e o alerta
         vr_dscorpo := '<meta http-equiv="Content-Type" content="text/html;charset=utf-8" >';
         vr_dscorpo := vr_dscorpo || 'Segue em anexo a listagem dos registros de cobrança intrabancarios que apresentaram erro ao comunicar com o JDDA.';
         vr_dscorpo := vr_dscorpo || '</meta>';

         gene0002.pc_escreve_xml(vr_dshmtl,vr_dshmtl_aux,'<meta http-equiv="Content-Type" content="text/html;charset=utf-8" >');
         gene0002.pc_escreve_xml(vr_dshmtl,vr_dshmtl_aux,'<table border="1" style="width:500px; margin: 10px auto; font-family: Tahoma,sans-serif; font-size: 12px; color: #686868;" >');
         -- Montando header
         gene0002.pc_escreve_xml(vr_dshmtl,vr_dshmtl_aux,'<th>NrSeqSol</th>');
         gene0002.pc_escreve_xml(vr_dshmtl,vr_dshmtl_aux,'<th>Cdcooper</th>');
         gene0002.pc_escreve_xml(vr_dshmtl,vr_dshmtl_aux,'<th>Data/hora</th>');
         gene0002.pc_escreve_xml(vr_dshmtl,vr_dshmtl_aux,'<th>crapcob rowid</th>');
         gene0002.pc_escreve_xml(vr_dshmtl,vr_dshmtl_aux,'<th>Erro encontrado</th>');

      END IF;

      -- Para cada registro, montar sua tr
      gene0002.pc_escreve_xml(vr_dshmtl,vr_dshmtl_aux,'<tr>');
      -- E os detalhes do registro
      gene0002.pc_escreve_xml(vr_dshmtl,vr_dshmtl_aux,'<td align="right">'||to_char(pr_crapdda.nrseqdda)||'</td>');
      gene0002.pc_escreve_xml(vr_dshmtl,vr_dshmtl_aux,'<td align="right">'||pr_crapdda.cdcooper||'</td>');
      gene0002.pc_escreve_xml(vr_dshmtl,vr_dshmtl_aux,'<td align="center">'||to_char(pr_crapdda.dtsolici,'dd/mm/rrrr hh24:mi:ss')||'</td>');
      gene0002.pc_escreve_xml(vr_dshmtl,vr_dshmtl_aux,'<td>'||pr_crapdda.cobrowid||'</td>');
      gene0002.pc_escreve_xml(vr_dshmtl,vr_dshmtl_aux,'<td>'||pr_dscritic||'</td>');
      -- Encerrar a tr
      gene0002.pc_escreve_xml(vr_dshmtl,vr_dshmtl_aux,'</tr>');

	    -- Retorno nome do módulo logado - 15/12/2017 - Chamado 779415
	    GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL); 

    END pc_monta_erro;

  BEGIN
	  -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
	  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_processa_crapdda');    
    -- Log de inicio de execucao  - 15/12/2017 - Chamado 779415
    pc_controla_log_programa( pr_cdcooper      => 3
                             ,pr_dstiplog      => 'I' -- I - inicio	 
                             ,pr_tpexecucao    => 2   -- 2 - Job
                             ,pr_cdprograma    => vr_nomdojob
                            ); 								 

    if to_date(ddda0001.fn_datamov,'yyyymmdd') = trunc(sysdate) then --SCTASK0015832

      --buscar registros não processados
      FOR rw_crapdda IN cr_crapdda LOOP
        IF rw_crapdda.incobran = 5 THEN
      
        --Executar baixa efetiva NPC
        ddda0001.pc_baixa_efetiva_npc (pr_rowid_cob => rw_crapdda.cobrowid    -- ROWID da Cobranca
                                             ,pr_cdcritic  => vr_cdcritic            -- Codigo de Erro
                                             ,pr_dscritic  => vr_dscritic);          -- Descricao de Erro
        -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
        GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_processa_crapdda');
        --Se ocorreu erro
        IF NVL(vr_cdcritic,0) <> 0 OR TRIM(vr_dscritic) IS NOT NULL THEN
          IF NVL(vr_cdcritic,0) > 0 AND TRIM(vr_dscritic) IS NULL THEN
            -- Buscar a descrição
            vr_dscritic := gene0001.fn_busca_critica(vr_cdcritic);
          END IF;

          pc_monta_erro(rw_crapdda,vr_dscritic);

        END IF;
        ELSE
        vr_cdcritic := 1228;  --Boleto não está liquidado
        vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
        END IF;

        --atualizar crapdda
        BEGIN
          UPDATE crapdda
             SET crapdda.dtproces = sysdate,
                 crapdda.flgerado = 'S',
                 crapdda.dscritic = substr(vr_dscritic,1,4000)
           WHERE crapdda.rowid = rw_crapdda.rowid;
        EXCEPTION
          WHEN OTHERS THEN
          -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
          CECRED.pc_internal_exception (pr_cdcooper => rw_crapdda.cdcooper);   
          -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
          vr_cdcritic := 1035;
          vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                         'CRAPDDA(49):' ||
                         ' dtproces:'   || 'sysdate' ||
                         ', flgerado:'  || 'S' ||
                         ', dscritic:'  || substr(vr_dscritic,1,4000) ||
                         ' com rowid:'  || rw_crapdda.rowid ||
                         '. ' ||sqlerrm;
            pc_monta_erro(rw_crapdda,vr_dscritic);
          -- Log de erro de execucao - 15/12/2017 - Chamado 779415
          pc_controla_log_programa( pr_cdcooper      => 3
                                   ,pr_dstiplog      => 'E'
                                   ,pr_tpexecucao    => 2   -- 2 - Job
                                   ,pr_cdprograma    => vr_nomdojob
                                   ,pr_cdmensagem    => vr_cdcritic
                                   ,pr_dsmensagem    => vr_dscritic
                                   ,pr_tpocorrencia  => 2 -- 1-Erro de negocio/ 2-Erro nao tratado/ 3-Alerta/ 4-Mensagem
                                  );
        END;

      END LOOP;

      --se gerou algum erro deve mandar email
      IF vr_flgerro THEN
        --finalizar tags
        gene0002.pc_escreve_xml(vr_dshmtl,vr_dshmtl_aux,'</table>',TRUE);
        gene0002.pc_escreve_xml(vr_dshmtl,vr_dshmtl_aux,'</meta>');

        -- Buscar o diretório converte
        vr_dsdircop := gene0001.fn_diretorio(pr_tpdireto => 'C'
                                            ,pr_cdcooper => 3 /*cecred*/
                                            ,pr_nmsubdir => 'converte');

        gene0002.pc_clob_para_arquivo (pr_clob     => vr_dshmtl
                                      ,pr_caminho  => vr_dsdircop
                                      ,pr_arquivo  => 'proc_intrabancdda_erro.html'
                                      ,pr_des_erro => vr_dserro);
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_processa_crapdda');

        -- Liberando a memória alocada pro CLOB
        dbms_lob.close(vr_dshmtl);
        dbms_lob.freetemporary(vr_dshmtl);

        -- Busca a lista dos responsáveis nesta coop
        vr_dslista_email := gene0001.fn_param_sistema('CRED',3/*CECRED*/,'INTRABANC_EMAIL_AVISO');

        -- Solicitar o e-mail
        gene0003.pc_solicita_email(pr_cdcooper      => 3/*cecred*/         --> Cooperativa conectada
                                  ,pr_cdprogra      => null                --> Programa conectado
                                  ,pr_des_destino   => vr_dslista_email    --> Um ou mais detinatários separados por ';' ou ','
                                  ,pr_des_assunto   => 'Criticas comunidacao JDDA' --> Assunto do e-mail
                                  ,pr_des_corpo     => vr_dscorpo          --> Corpo (conteudo) do e-mail
                                  ,pr_des_anexo     => vr_dsdircop||'/proc_intrabancdda_erro.html'               --> Um ou mais anexos separados por ';
                                  ,pr_flg_remove_anex => 'S'               --> Remover o anexo
                                  ,pr_flg_log_batch => 'N'                 --> Incluir no log a informação do anexo?
                                  ,pr_des_erro      => vr_dserro);
	    -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		  GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_processa_crapdda');
        IF vr_dserro IS NOT NULL THEN
          -- Gerar log
          gene0002.pc_gera_log_relato(pr_cdcooper => 3 /*CECRED*/
                                   ,pr_des_log  => to_char(SYSDATE,'hh24:mi:ss')||
                                    ' Erro ao enviar email de alerta de JDDA com problema --> '||
                                    vr_dserro);
	      -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		    GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_processa_crapdda');
        END IF;
      END IF;  

    end if; --SCTASK0015832

    --Comitar alterações
    COMMIT;
    npcb0002.pc_libera_sessao_sqlserver_npc('PAGA0001_1');
    -- Log de fim de execucao - 15/12/2017 - Chamado 779415
    pc_controla_log_programa( pr_cdcooper      => 3
                             ,pr_dstiplog      => 'F' -- F - fim
                             ,pr_tpexecucao    => 2   -- 2 - Job
                             ,pr_cdprograma    => vr_nomdojob
                            ); 

	  -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);
  EXCEPTION
    -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
    -- Disparadores: jbdda_processa_crapdda.job              - Não grava TBGEN 
    --               JDDAS.job                               - Não grava TBGEN
    WHEN OTHERS THEN
      -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
      CECRED.pc_internal_exception (pr_cdcooper => 3);   
      -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
      pr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => 9999) ||
                    'PAGA0001.pc_processa_crapdda. ' || SQLERRM;	
      -- Voltar atualizações
      ROLLBACK;
      npcb0002.pc_libera_sessao_sqlserver_npc('PAGA0001_2');
      -- Log de erro de execucao - 15/12/2017 - Chamado 779415 
      pc_controla_log_programa( pr_cdcooper      => 3
                               ,pr_dstiplog      => 'E'
                               ,pr_tpexecucao    => 2   -- 2 - Job
                               ,pr_cdprograma    => vr_nomdojob
                               ,pr_cdmensagem    => 9999
                               ,pr_dsmensagem    => pr_dscritic
                               ,pr_tpocorrencia  => 2 -- 1-Erro de negocio/ 2-Erro nao tratado/ 3-Alerta/ 4-Mensagem
                              );

  END pc_processa_crapdda;

  PROCEDURE pc_valores_a_creditar(pr_cdcooper IN crapcco.cdcooper%TYPE
                                 ,pr_nrcnvcob IN crapcco.nrconven%TYPE
                                 ,pr_dtmvtolt IN crapdat.dtmvtolt%TYPE
                                 ,pr_dtcredit IN crapret.dtcredit%TYPE
                                 ,pr_idtabcob IN ROWID
                                 ,pr_tab_lcm_consolidada IN OUT PAGA0001.typ_tab_lcm_consolidada -- Tabela lancamentos consolidada
                                 ,pr_cdprogra IN crapprg.cdprogra%TYPE  -- Nome Programa
                                 ,pr_nmtelant IN VARCHAR2 DEFAULT NULL -- somente para COMPEFORA
                                 ,pr_cdcritic OUT INTEGER               -- Codigo da Critica
                                 ,pr_dscritic OUT VARCHAR2) IS          -- Descricao da critica


  BEGIN
    DECLARE

      /* Busca dos dados da cooperativa */
      CURSOR cr_crapcop(pr_cdcooper IN craptab.cdcooper%TYPE) IS
        SELECT crapcop.cdcooper
              ,crapcop.nmrescop
              ,crapcop.nrtelura
              ,crapcop.dsdircop
              ,crapcop.cdbcoctl
              ,crapcop.cdagectl
              ,crapcop.flgoppag
              ,crapcop.flgopstr
              ,crapcop.inioppag
              ,crapcop.fimoppag
              ,crapcop.iniopstr
              ,crapcop.fimopstr
              ,crapcop.cdagebcb
              ,crapcop.dssigaut
              ,crapcop.cdagesic
          FROM crapcop
         WHERE crapcop.cdcooper = pr_cdcooper;
      rw_crapcop cr_crapcop%ROWTYPE;

      -- Cursor para montar os valores a creditar a partir de vários títulos
      CURSOR cr_cursor1 (pr_cdcooper IN crapret.cdcooper%TYPE
                        ,pr_nrcnvcob IN crapret.nrcnvcob%TYPE
                        ,pr_dtcredit IN crapret.dtcredit%TYPE) IS
      SELECT ret.cdcooper,
             ret.nrdconta,
             ret.nrcnvcob,
             ret.cdocorre,
             ret.cdmotivo,
             ret.vlrpagto,
             ret.cdbcorec,
             ret.cdagerec,
             cob.indpagto,
             cob.nrctremp,
             cob.nrdocmto,
             cco.dsorgarq,
             cob.rowid rowid_cob,
             ret.rowid rowid_ret,
						 cob.cdbandoc -- PRJ352
        FROM crapret ret
            ,crapcco cco
            ,crapcob cob
       WHERE ret.cdcooper = pr_cdcooper
         AND ret.nrcnvcob = pr_nrcnvcob
         AND ret.dtcredit = pr_dtcredit
         AND ret.flcredit = 0 -- Lançamento não creditado
         AND ret.cdocorre IN (6,17,76,77)
         AND cco.cdcooper = ret.cdcooper
         AND cco.nrconven = ret.nrcnvcob
         AND cob.cdcooper = ret.cdcooper
         AND cob.nrdconta = ret.nrdconta
         AND cob.nrcnvcob = ret.nrcnvcob
         AND cob.nrdocmto = ret.nrdocmto
         AND cob.nrdctabb = cco.nrdctabb
         AND cob.cdbandoc = cco.cddbanco;


      -- Cursor para montar os valores a creditar a partir de um único título
      CURSOR cr_cursor2 (pr_idtabcob IN ROWID) IS
      SELECT ret.cdcooper,
             ret.nrdconta,
             ret.nrcnvcob,
             ret.cdocorre,
             ret.cdmotivo,
             ret.vlrpagto,
             ret.cdbcorec,
             ret.cdagerec,
             cob.indpagto,
             cob.dtvencto,
             cob.vltitulo,
             cob.vlabatim,
             cob.tpdmulta,
             cob.vlrmulta,
             cob.vljurdia,
             cob.cdmensag,
             cob.vldescto,
             cob.tpjurmor,
             cob.nrdocmto,
             cob.rowid rowid_cob,
             ret.rowid rowid_ret,
						 cob.cdbandoc
        FROM crapret ret
            ,crapcco cco
            ,crapcob cob
       WHERE cob.rowid    = pr_idtabcob
         AND ret.cdcooper = cob.cdcooper
         AND ret.nrdconta = cob.nrdconta
         AND ret.nrcnvcob = cob.nrcnvcob
         AND ret.nrdocmto = cob.nrdocmto
         AND ret.flcredit = 0  -- Lançamento não creditado
         AND ret.cdocorre IN (6,17,76,77)
         AND cco.cdcooper = ret.cdcooper
         AND cco.nrconven = ret.nrcnvcob
         AND cob.nrdctabb = cco.nrdctabb
         AND cob.cdbandoc = cco.cddbanco;
      rw_cursor2 cr_cursor2%ROWTYPE;

      -- selecionar conta do cooperado do contrato de emprestimo
      CURSOR cr_cde (pr_cdcooper  IN tbrecup_cobranca.cdcooper%TYPE
                    ,pr_nrctacob  IN tbrecup_cobranca.nrdconta_cob%TYPE
                    ,pr_nrcnvcob  IN tbrecup_cobranca.nrcnvcob%TYPE
                    ,pr_nrdocmto  IN tbrecup_cobranca.nrboleto%TYPE
                    ,pr_tpproduto IN tbrecup_cobranca.tpproduto%TYPE) IS
        SELECT cde.nrdconta, cde.tpparcela
          FROM tbrecup_cobranca cde
         WHERE cde.cdcooper     = pr_cdcooper
           AND cde.nrdconta_cob = pr_nrctacob
           AND cde.nrcnvcob     = pr_nrcnvcob
           AND cde.nrboleto     = pr_nrdocmto
           AND cde.tpproduto    = pr_tpproduto;
      rw_cde cr_cde%ROWTYPE;

      vr_cdcritic INTEGER;
      vr_dscritic VARCHAR2(4000);
      vr_des_erro VARCHAR2(4000);
      vr_cdhistor INTEGER;
      --Variaveis de Excecao
      vr_exc_erro    EXCEPTION;
      vr_erro_update EXCEPTION;

      vr_vldescto NUMBER;
      vr_vlabatim NUMBER;
      vr_vlrjuros NUMBER;
      vr_vlrmulta NUMBER;
      vr_vlfatura NUMBER;
      vr_flgvenci BOOLEAN;

      -- Variaveis para o valor que deve ser transferido para outra conta
      vr_dstextab_new_lcto craptab.dstextab%TYPE;
      vr_index_deb VARCHAR2(100);
      vr_index_cre VARCHAR2(100);

      PROCEDURE pc_verifica_vencto (pr_cdcooper IN INTEGER  --Codigo da cooperativa
                                   ,pr_dtmvtolt IN DATE     --Data para verificacao
                                   ,pr_cddbanco IN INTEGER  --Codigo do Banco
                                   ,pr_cdagenci IN INTEGER  --Codigo da Agencia
                                   ,pr_dtboleto IN DATE     --Data do Titulo
                                   ,pr_flgvenci OUT BOOLEAN --Indicador titulo vencido
                                   ,pr_cdcritic OUT INTEGER --Codigo do erro
                                   ,pr_dscritic OUT VARCHAR2) IS --Descricao do erro
        ---------------------------------------------------------------------------------------------------------------
        -- Objetivo  : Procedure para verificar se a data de pagto do titulo eh feriado
        --             em funcao do banco/agencia do local de pagamento
        ---------------------------------------------------------------------------------------------------------------
    BEGIN
          DECLARE
            --Cursores Locais

          /* Busca dos dados da cooperativa */
          CURSOR cr_crapcop(pr_cdcooper IN craptab.cdcooper%TYPE) IS
            SELECT 1
              FROM crapcop
             WHERE crapcop.cdcooper = pr_cdcooper;
          rw_crapcop cr_crapcop%ROWTYPE;

          --Selecionar informacoes dos bancos
          CURSOR cr_crapban (pr_cdbccxlt IN crapban.cdbccxlt%type) IS
            SELECT crapban.nmresbcc
                  ,crapban.nmextbcc
                  ,crapban.cdbccxlt
            FROM crapban
            WHERE crapban.cdbccxlt = pr_cdbccxlt;
          rw_crapban cr_crapban%ROWTYPE;

          --Selecionar Informacoes das Agencias
          CURSOR cr_crapagb (pr_cddbanco IN crapagb.cddbanco%TYPE
                            ,pr_cdageban IN crapage.cdagepac%TYPE) IS
            SELECT crapagb.cddbanco
                  ,crapagb.cdcidade
                  ,crapagb.cdsitagb
            FROM crapagb
            WHERE crapagb.cddbanco = pr_cddbanco
            AND   crapagb.cdageban = pr_cdageban;
          rw_crapagb cr_crapagb%ROWTYPE;

          /* Verifica a cidade da agencia */
          CURSOR cr_crapcaf (pr_cdcidade IN crapagb.cdcidade%TYPE) IS
            SELECT crapcaf.cdcidade
            FROM  crapcaf
            WHERE crapcaf.cdcidade = pr_cdcidade;
          rw_crapcaf cr_crapcaf%ROWTYPE;

          --Selecionar feriados sistema financeiro
          CURSOR cr_crapfsf (pr_cdcidade IN crapfsf.cdcidade%TYPE
                            ,pr_dtferiad IN crapfsf.dtferiad%TYPE) IS
            SELECT crapfsf.dtferiad
            FROM crapfsf
            WHERE crapfsf.cdcidade = pr_cdcidade
            AND   crapfsf.dtferiad = pr_dtferiad;
          rw_crapfsf cr_crapfsf%ROWTYPE;

          --Variaveis Locais
          vr_proxutil  DATE;
          vr_dtferiado DATE;
          vr_erro_caf  BOOLEAN := FALSE;

          --Variaveis de Erro
          vr_cdcritic crapcri.cdcritic%TYPE;
          vr_dscritic VARCHAR2(4000);
          --Variaveis Excecao
          vr_exc_erro EXCEPTION;

          BEGIN
            --Inicializar variaveis retorno
            pr_cdcritic:= NULL;
            pr_dscritic:= NULL;

            IF pr_dtboleto IS NULL THEN
                --Mensagem erro
                vr_dscritic:= 'Data de vencimento nao pode ser nulo.';
                --Levantar Excecao
                RAISE vr_exc_erro;
            END IF;

            -- vencto
            vr_proxutil:= pr_dtboleto;
            --Flag vencida
            pr_flgvenci:= FALSE;

            /* Verifica a cooperativa */
            OPEN cr_crapcop(pr_cdcooper => pr_cdcooper);
            FETCH cr_crapcop INTO rw_crapcop;
            --Se nao encontrou
            IF cr_crapcop%NOTFOUND THEN
              --Fechar Cursor
              CLOSE cr_crapcop;
              vr_erro_caf := TRUE;
            END IF;
            --Fechar Cursor
            CLOSE cr_crapcop;

            /* Busca o registro do banco */
            OPEN cr_crapban (pr_cdbccxlt => pr_cddbanco);
            --Posicionar no proximo registro
            FETCH cr_crapban INTO rw_crapban;

            IF cr_crapban%NOTFOUND THEN
               vr_erro_caf := TRUE;
            END IF;

            --Fechar Cursor
            CLOSE cr_crapban;

            IF NOT vr_erro_caf THEN
              --Selecionar Agencias
              OPEN cr_crapagb (pr_cddbanco => rw_crapban.cdbccxlt
                              ,pr_cdageban => pr_cdagenci);
              --Posicionar no primeiro registro
              FETCH cr_crapagb INTO rw_crapagb;

              IF cr_crapagb%NOTFOUND THEN
                 --Fechar Cursor
                 vr_erro_caf := TRUE;
              END IF;

              --Fechar Cursor
              CLOSE cr_crapagb;
            END IF;

            IF NOT vr_erro_caf THEN
              /* Verifica a cidade da agencia */
              OPEN cr_crapcaf (pr_cdcidade => rw_crapagb.cdcidade);
              --Posicionar no proximo registro
              FETCH cr_crapcaf INTO rw_crapcaf;

              --Se nao encontrar
              IF cr_crapcaf%NOTFOUND THEN
                vr_erro_caf := TRUE;
              END IF;

              --Fechar Cursor
              CLOSE cr_crapcaf;
            END IF;

            --Loop procurando por feriados
            WHILE TRUE LOOP
              --Verificar se o dia eh feriado
              vr_dtferiado:= GENE0005.fn_valida_dia_util(pr_cdcooper => pr_cdcooper
                                                        ,pr_dtmvtolt => vr_proxutil
                                                        ,pr_tipo     => 'P');

              IF NOT vr_erro_caf THEN
                --Selecionar feriados sistema financeiro
                OPEN cr_crapfsf (pr_cdcidade => rw_crapcaf.cdcidade
                                ,pr_dtferiad => vr_dtferiado);
                --Posicionar no proximo registro
                FETCH cr_crapfsf INTO rw_crapfsf;
                --Se nao encontrar
                IF cr_crapfsf%FOUND THEN
                  --Vencida recebe false
                  vr_proxutil:= vr_proxutil+1;
                ELSE
                  EXIT;
                END IF;
                --Fechar Cursor
                CLOSE cr_crapfsf;
              ELSE
                EXIT;
              END IF;
            END LOOP;

            --Se a data do vencimento maior ou igual a data de movimento
            IF vr_dtferiado >= pr_dtmvtolt THEN
              pr_flgvenci:= FALSE;
            ELSE
              --Vencida recebe true
              pr_flgvenci:= TRUE;
            END IF;

          EXCEPTION
             WHEN vr_exc_erro THEN
               pr_cdcritic:= vr_cdcritic;
               pr_dscritic:= vr_dscritic;
             WHEN OTHERS THEN
               pr_cdcritic:= 0;
               pr_dscritic:= 'Erro na rotina pc_valores_a_creditar. '||SQLERRM;
          END;
        END pc_verifica_vencto;

    BEGIN

      --Se a cooperativa origem nao existir
      OPEN cr_crapcop(pr_cdcooper => pr_cdcooper);
      FETCH cr_crapcop INTO rw_crapcop;

      --Se nao encontrou
      IF cr_crapcop%NOTFOUND THEN
        --Fechar Cursor
        CLOSE cr_crapcop;
        pr_cdcritic:= 0;
        pr_dscritic:= 'Registro de cooperativa origem nao encontrado.';
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;

      --Fechar Cursor
      CLOSE cr_crapcop;

      IF pr_idtabcob IS NULL THEN

          FOR rw_cursor1 IN cr_cursor1(pr_cdcooper => pr_cdcooper
                                      ,pr_nrcnvcob => pr_nrcnvcob
                                      ,pr_dtcredit => pr_dtcredit) LOOP

            -- Se o boleto foi pago na 85 e na própria cooperativa, então histórico 987 ou 1689 (VR Boleto),
            -- senão, se VR Boleto então 1688 ou então quem vai decidir o histórico é a pc_prep_tt_lcm_consolidada
            IF rw_cursor1.cdbcorec = 85 AND rw_cursor1.cdagerec = rw_crapcop.cdagectl THEN
               IF rw_cursor1.vlrpagto >= 250000 THEN
                  vr_cdhistor := 1689; -- Histórico para pagto de VR Boleto no caixa;
               ELSE
                  IF rw_cursor1.cdocorre IN (6,76) THEN
										IF rw_cursor1.cdmotivo = '08' THEN
											IF rw_cursor1.cdbandoc = 85 THEN
												--
										  vr_cdhistor := 2631; -- liq boleto em cartorio
												--
											ELSE
												--
												vr_cdhistor := 0;
												--
											END IF;
                    ELSE
                  vr_cdhistor := 987;
										END IF;
                  ELSIF rw_cursor1.cdocorre IN (17,77) THEN
                     vr_cdhistor := 1762; -- historico novo - liq apos bx caixa online
                  ELSE
                     vr_cdhistor := 0;
                  END IF;
               END IF;
            ELSE
               IF rw_cursor1.vlrpagto >= 250000 AND rw_cursor1.cdmotivo = '04' THEN
                  vr_cdhistor := 1688; -- Histórico para pagto de VR Boleto por STR (SPB);
               ELSE
                  IF rw_cursor1.cdocorre NOT IN (17,77) THEN
                     vr_cdhistor := 0;
                  ELSE
                     vr_cdhistor := 1089;
                  END IF;
               END IF;
            END IF;

            IF rw_cursor1.dsorgarq = 'DESCONTO DE TITULO' THEN

              OPEN cr_cde(pr_cdcooper => rw_cursor1.cdcooper
                         ,pr_nrctacob => rw_cursor1.nrdconta
                         ,pr_nrcnvcob => rw_cursor1.nrcnvcob
                         ,pr_nrdocmto => rw_cursor1.nrdocmto
                         ,pr_tpproduto => 3);
              FETCH cr_cde INTO rw_cde;
              IF cr_cde%FOUND THEN

                -- Tipo da parcela (1-Normal/ 2-Total do Atraso/ 3-Parcial do atraso/ 4-Quitacao Contrato
                --                  5-Saldo Prejuízo/ 6-Parcial Prejuízo/ 7-Saldo Prejuízo Desconto)
                CASE rw_cde.tpparcela
                  --WHEN 1 THEN vr_cdhistor := vr_cdhistor; Considera como se fosse o ELSE do CASE
                  WHEN 2 THEN vr_cdhistor := 1998;
                  WHEN 3 THEN vr_cdhistor := 1999;
                  --WHEN 4 THEN vr_cdhistor := 2000; Não se aplica para desconto de titulos
                  WHEN 5 THEN vr_cdhistor := 2278;
                  WHEN 6 THEN vr_cdhistor := 2277;
                  WHEN 7 THEN vr_cdhistor := 2278;
                ELSE
                  vr_cdhistor := vr_cdhistor;
                END CASE;

                -- se o boleto foi pago e o processo rodou na COMPEFORA, utilizar
                -- histórico 2002;
                IF pr_nmtelant = 'COMPEFORA' THEN
                   vr_cdhistor := 2002;
                END  IF;
              END IF;
              CLOSE cr_cde;

            ELSIF nvl(rw_cursor1.nrctremp,0) > 0 THEN

              OPEN cr_cde(pr_cdcooper  => rw_cursor1.cdcooper
                         ,pr_nrctacob  => rw_cursor1.nrdconta
                         ,pr_nrcnvcob  => rw_cursor1.nrcnvcob
                         ,pr_nrdocmto  => rw_cursor1.nrdocmto
                         ,pr_tpproduto => 0);
              FETCH cr_cde INTO rw_cde;

              /* atribuir a conta do cooperado para pagto de emprestimo */
              IF cr_cde%FOUND THEN

                -- Tipo da parcela (1-Normal/ 2-Total do Atraso/ 3-Parcial do atraso/ 4-Quitacao Contrato
                --                  5-Saldo Prejuízo/ 6-Parcial Prejuízo/ 7-Saldo Prejuízo Desconto)
                CASE rw_cde.tpparcela
                  WHEN 1 THEN vr_cdhistor := vr_cdhistor;
                  WHEN 2 THEN vr_cdhistor := 1998;
                  WHEN 3 THEN vr_cdhistor := 1999;
                  WHEN 4 THEN vr_cdhistor := 2000;
                  WHEN 5 THEN vr_cdhistor := 2278;
                  WHEN 6 THEN vr_cdhistor := 2277;
                  WHEN 7 THEN vr_cdhistor := 2278;
                ELSE
                  vr_cdhistor := vr_cdhistor;
                END CASE;

                OPEN cr_cursor2 ( pr_idtabcob => rw_cursor1.rowid_cob);
                FETCH cr_cursor2 INTO rw_cursor2;
                CLOSE cr_cursor2;

                vr_vlabatim := rw_cursor2.vlabatim;
                vr_vlfatura := rw_cursor2.vltitulo;

                --Verificar Vencimento Titulo
                pc_verifica_vencto (pr_cdcooper => rw_cursor2.cdcooper  --Codigo da cooperativa
                                   ,pr_dtmvtolt => pr_dtmvtolt          --Data para verificacao
                                   ,pr_cddbanco => rw_cursor2.cdbcorec  --Codigo do Banco
                                   ,pr_cdagenci => rw_cursor2.cdagerec  --Codigo da Agencia
                                   ,pr_dtboleto => rw_cursor2.dtvencto  --Data do Titulo
                                   ,pr_flgvenci => vr_flgvenci          --Indicador titulo vencido
                                   ,pr_cdcritic => vr_cdcritic          --Codigo do erro
                                   ,pr_dscritic => vr_dscritic );       --Descricao do erro

                /* calculo de abatimento deve ser antes da aplicacao de juros e multa */
                IF nvl(rw_cursor2.vlabatim,0) > 0 THEN
                   --Diminuir valor do abatimento na fatura
                   vr_vlfatura:= nvl(rw_cursor2.vltitulo,0) - nvl(rw_cursor2.vlabatim,0);
                END IF;

                /* trata o desconto se concede apos o vencimeto */
                IF rw_cursor2.cdmensag = 2 THEN
                   --Valor desconto recebe valor bordero cobranca
                   vr_vldescto:= rw_cursor2.vldescto;
                   --Diminuir valor dodesconto na fatura
                   vr_vlfatura:= nvl(vr_vlfatura,0) - nvl(vr_vldescto,0);
                END IF;

                /* verifica se o titulo esta vencido */
                IF vr_flgvenci THEN
                   /* MULTA PARA ATRASO */
                   CASE rw_cursor2.tpdmulta
                     WHEN 1 THEN /* Valor */
                       vr_vlrmulta:= rw_cursor2.vlrmulta;
                       --Acumular valor dos juros na fatura
                       vr_vlfatura:= nvl(vr_vlfatura,0) + nvl(vr_vlrmulta,0);
                     WHEN 2 THEN /* % de multa do valor  do boleto */
                       vr_vlrmulta:= (rw_cursor2.vlrmulta * vr_vlfatura) / 100;
                       --Acumular valor dos juros na fatura
                       vr_vlfatura:= nvl(vr_vlfatura,0) + nvl(vr_vlrmulta,0);
                     ELSE NULL;
                   END CASE;
                   /* MORA PARA ATRASO */
                   CASE rw_cursor2.tpjurmor
                     WHEN 1 THEN /* dias */
                       vr_vlrjuros:= rw_cursor2.vljurdia * (pr_dtmvtolt - rw_cursor2.dtvencto);
                       --Acumular valor dos juros na fatura
                       vr_vlfatura:= nvl(vr_vlfatura,0) + nvl(vr_vlrjuros,0);
                     WHEN 2 THEN /* mes */
                       vr_vlrjuros:= APLI0001.fn_round((rw_cursor2.vltitulo *
                                                  ((rw_cursor2.vljurdia / 100) / 30) *
                                                   (pr_dtmvtolt - rw_cursor2.dtvencto)),2);
                       --Acumular valor dos juros na fatura
                       vr_vlfatura:= nvl(vr_vlfatura,0) + nvl(vr_vlrjuros,0);
                     ELSE NULL;
                   END CASE;
                 ELSE
                   /* se concede apos vencto, ja calculou */
                   IF rw_cursor2.cdmensag <> 2  THEN
                     --Valor desconto
                     vr_vldescto:= nvl(rw_cursor2.vldescto,0);
                     --Diminuir o desconto da fatura
                     vr_vlfatura:= nvl(vr_vlfatura,0) - nvl(vr_vldescto,0);
                   END IF;
                END IF; --vr_flgvenci

                -- se o boleto foi pago vencido ou a menor, o histórico de pagto
                -- do boleto de contrato deverá ser o 2001;
                IF vr_flgvenci OR
                  ( ROUND(rw_cursor2.vlrpagto,2) < ROUND(vr_vlfatura,2) AND
                    rw_cursor2.cdocorre NOT IN (17,77)) THEN
                   vr_cdhistor := 2001; -- CREDITO BOLETO CONTRATO MOTIVO XXX
                END IF;

                -- se o boleto foi pago e o processo rodou na COMPEFORA, utilizar
                -- histórico 2002;
                IF pr_nmtelant = 'COMPEFORA' THEN
                   vr_cdhistor := 2002;
                END  IF;

              END IF;

              CLOSE cr_cde;
            
            -- Se for pagamento de ACORDO
            ELSIF rw_cursor1.dsorgarq = 'ACORDO' THEN
             -- Fixar o código de histórico 2180
             vr_cdhistor := 2180;
            END IF;

            PAGA0001.pc_prep_tt_lcm_consolidada (pr_idtabcob => rw_cursor1.rowid_cob -- ROWID da cobranca
                                                ,pr_cdocorre => rw_cursor1.cdocorre  -- Codigo Ocorrencia
                                                ,pr_tplancto => 'L'                  -- Tipo Lancamento
                                                ,pr_vltarifa => rw_cursor1.vlrpagto  -- Valor Tarifa
                                                ,pr_cdhistor => vr_cdhistor          -- Codigo Historico
                                                ,pr_cdmotivo => 0                    -- Codigo motivo
                                                ,pr_tab_lcm_consolidada => pr_tab_lcm_consolidada --Tabela de Lancamentos
                                                ,pr_cdcritic => vr_cdcritic          -- Codigo Critica
                                                ,pr_dscritic => vr_dscritic);        -- Descricao Critica

            
            -- Verificar se o boleto se enquadra na relação de titulos que devem ter o valor
            -- transferido para outra conta
            -- será pesquisado com a seguinte regra (definido por Douglas e Cechet)
            --      CDCOOPER = Coperativa
            --      NMSISTEM = "CRED"
            --      TPTABELA = "COBRAN"
            --      CDEMPRES = Nº Conta
            --      CDACESSO = "TRANSFCOB" + "0000000" -> Convenio
            --      TPREGIST = Nº Boleto
            --
            -- O campo DSTEXTAB terá o seguinte valor 
            --  Posição 1: Cooperativa de destino
            --  Posição 2: Conta de Destino
            --  Posição 3: Histórico de Crédito
            --  Posição 4: Histórico de Débito
            --
            vr_dstextab_new_lcto := TABE0001.fn_busca_dstextab(pr_cdcooper => rw_cursor1.cdcooper
                                                              ,pr_nmsistem => 'CRED'
                                                              ,pr_tptabela => 'COBRAN'
                                                              ,pr_cdempres => rw_cursor1.nrdconta
                                                              ,pr_cdacesso => 'TRANSFCOB' || to_char(rw_cursor1.nrcnvcob,'fm0000000') 
                                                              ,pr_tpregist => rw_cursor1.nrdocmto);
            -- verificar se existe
            IF TRIM(vr_dstextab_new_lcto) IS NOT NULL THEN 
              -- Montar indice para acessar tabela
              -- Valor que deve ser debitado da conta que emitiu o boleto
              vr_index_deb:= LPad(rw_cursor1.cdcooper,3,'0')||
                             LPad(rw_cursor1.nrdconta,10,'0')||
                             LPad(rw_cursor1.nrcnvcob,7,'0')||
                             Lpad(rw_cursor1.nrdocmto,10,'0')||
                             LPad(gene0002.fn_busca_entrada(pr_postext => 4
                                                           ,pr_dstext => vr_dstextab_new_lcto
                                                           ,pr_delimitador => ';'),5,'0');    -- Histórico para transferencia

              --Verificar se a chave existe na tabela
              IF NOT pr_tab_lcm_consolidada.EXISTS(vr_index_deb) THEN
                --Criar registro tabela lancamentos consolidada
                pr_tab_lcm_consolidada(vr_index_deb).cdcooper:= rw_cursor1.cdcooper;
                pr_tab_lcm_consolidada(vr_index_deb).nrdconta:= rw_cursor1.nrdconta;
                pr_tab_lcm_consolidada(vr_index_deb).nrconven:= rw_cursor1.nrcnvcob;
                pr_tab_lcm_consolidada(vr_index_deb).cdocorre:= rw_cursor1.cdocorre;
                pr_tab_lcm_consolidada(vr_index_deb).cdhistor:= gene0002.fn_busca_entrada(pr_postext => 4
                                                                                         ,pr_dstext => vr_dstextab_new_lcto
                                                                                         ,pr_delimitador => ';'); -- Historico de tranferencia
                pr_tab_lcm_consolidada(vr_index_deb).vllancto:= rw_cursor1.vlrpagto; -- Valor que está sendo PAGO
                pr_tab_lcm_consolidada(vr_index_deb).tplancto:= 'L'; -- Verificar QUISINSKI
                pr_tab_lcm_consolidada(vr_index_deb).qtdregis:= 1;
                pr_tab_lcm_consolidada(vr_index_deb).cdfvlcop:= 0;
              ELSE
                --Incrementar valor que está sendo pago
                pr_tab_lcm_consolidada(vr_index_deb).vllancto:= Nvl(pr_tab_lcm_consolidada(vr_index_deb).vllancto,0) + rw_cursor1.vlrpagto;
                --Incrementar quantidade registros
                pr_tab_lcm_consolidada(vr_index_deb).qtdregis:= Nvl(pr_tab_lcm_consolidada(vr_index_deb).qtdregis,0) + 1;
              END IF;        
              
              -- Montar indice para acessar tabela
              -- Valor que deve ser creditado na conta de destino
              vr_index_cre:= LPad(gene0002.fn_busca_entrada(pr_postext => 1
                                                           ,pr_dstext => vr_dstextab_new_lcto
                                                           ,pr_delimitador => ';'),3,'0')|| -- Cooperativa
                             LPad(gene0002.fn_busca_entrada(pr_postext => 2
                                                           ,pr_dstext => vr_dstextab_new_lcto
                                                           ,pr_delimitador => ';'),10,'0')|| -- Conta
                             LPad(rw_cursor1.nrcnvcob,7,'0')||
                             Lpad(rw_cursor1.nrdocmto,10,'0')||
                             LPad(gene0002.fn_busca_entrada(pr_postext => 3
                                                           ,pr_dstext => vr_dstextab_new_lcto
                                                           ,pr_delimitador => ';'),5,'0'); -- Histórico para transferencia

              --Verificar se a chave existe na tabela
              IF NOT pr_tab_lcm_consolidada.EXISTS(vr_index_cre) THEN
                --Criar registro tabela lancamentos consolidada
                pr_tab_lcm_consolidada(vr_index_cre).cdcooper:= gene0002.fn_busca_entrada(pr_postext => 1
                                                                                         ,pr_dstext => vr_dstextab_new_lcto
                                                                                         ,pr_delimitador => ';');
                pr_tab_lcm_consolidada(vr_index_cre).nrdconta:= gene0002.fn_busca_entrada(pr_postext => 2
                                                                                         ,pr_dstext => vr_dstextab_new_lcto
                                                                                         ,pr_delimitador => ';');
                pr_tab_lcm_consolidada(vr_index_cre).nrconven:= rw_cursor1.nrcnvcob;
                pr_tab_lcm_consolidada(vr_index_cre).cdocorre:= rw_cursor1.cdocorre;
                pr_tab_lcm_consolidada(vr_index_cre).cdhistor:= gene0002.fn_busca_entrada(pr_postext => 3
                                                                                         ,pr_dstext => vr_dstextab_new_lcto
                                                                                         ,pr_delimitador => ';'); -- Historico de tranferencia
                pr_tab_lcm_consolidada(vr_index_cre).vllancto:= rw_cursor1.vlrpagto; -- Valor que está sendo PAGO
                pr_tab_lcm_consolidada(vr_index_cre).tplancto:= 'L';
                pr_tab_lcm_consolidada(vr_index_cre).qtdregis:= 1;
                pr_tab_lcm_consolidada(vr_index_cre).cdfvlcop:= 0;
              ELSE
                --Incrementar valor que está sendo pago
                pr_tab_lcm_consolidada(vr_index_cre).vllancto:= Nvl(pr_tab_lcm_consolidada(vr_index_cre).vllancto,0) + rw_cursor1.vlrpagto;
                --Incrementar quantidade registros
                pr_tab_lcm_consolidada(vr_index_cre).qtdregis:= Nvl(pr_tab_lcm_consolidada(vr_index_cre).qtdregis,0) + 1;
              END IF;        
           
              -- Gerar LOG no boleto para identificar que o valor foi transferido
              PAGA0001.pc_cria_log_cobranca(pr_idtabcob => rw_cursor1.rowid_cob   --ROWID da Cobranca
                                           ,pr_cdoperad => '1'   --Operador
                                           ,pr_dtmvtolt => pr_dtmvtolt   --Data movimento
                                           ,pr_dsmensag => 'Valor Transferido para' ||
                                                           ' Coop: ' || gene0002.fn_busca_entrada(pr_postext => 1
                                                                                                 ,pr_dstext => vr_dstextab_new_lcto
                                                                                                 ,pr_delimitador => ';') || 
                                                           ' Conta: ' || gene0002.fn_busca_entrada(pr_postext => 2
                                                                                                  ,pr_dstext => vr_dstextab_new_lcto
                                                                                                  ,pr_delimitador => ';') || 
                                                           ' - C: ' || gene0002.fn_busca_entrada(pr_postext => 3
                                                                                                ,pr_dstext => vr_dstextab_new_lcto
                                                                                                ,pr_delimitador => ';') || 
                                                           ' D: ' || gene0002.fn_busca_entrada(pr_postext => 4
                                                                                              ,pr_dstext => vr_dstextab_new_lcto
                                                                                              ,pr_delimitador => ';')
                                                              --Descricao Mensagem
                                           ,pr_des_erro => vr_des_erro   --Indicador erro
                                           ,pr_dscritic => vr_dscritic); --Descricao erro

            END IF; -- Fim da validação de boleto para creditar o valor em outra conta
            
            
            -- Marcar registro da crapret como "Credito realizado" (flcredit)
            BEGIN
              UPDATE crapret set flcredit = 1
              WHERE crapret.rowid = rw_cursor1.rowid_ret;

              IF SQL%ROWCOUNT = 0 THEN
                RAISE vr_erro_update;
              END IF;
            EXCEPTION
              WHEN vr_erro_update THEN
                -- Atualiza campo de erro
                vr_cdcritic := 0;
                vr_dscritic := 'Erro ao atualizar dados na CRAPRET: ' || SQLERRM;
                RAISE vr_exc_erro;
              WHEN OTHERS THEN
                -- Atualiza campo de erro
                vr_cdcritic := 0;
                vr_dscritic := 'Erro ao atualizar dados na CRAPRET: ' || SQLERRM;
                RAISE vr_exc_erro;
            END;

          END LOOP;

      ELSE -- Abrir cursor de um único título (cr_cursor2)

        FOR rw_cursor2 IN cr_cursor2(pr_idtabcob => pr_idtabcob) LOOP

          -- Se o boleto foi pago na 85 e na própria cooperativa, então histórico 987 ou 1689 (VR Boleto),
          -- senão, se VR Boleto então 1688 ou então quem vai decidir o histórico é a pc_prep_tt_lcm_consolidada
          IF rw_cursor2.cdbcorec = 85 AND rw_cursor2.cdagerec = rw_crapcop.cdagectl THEN
             IF rw_cursor2.vlrpagto >= 250000 THEN
                vr_cdhistor := 1689; -- Histórico para pagto de VR Boleto no caixa;
             ELSE
                IF rw_cursor2.cdocorre IN (6,76) THEN
									IF rw_cursor2.cdmotivo = '08' THEN
										IF rw_cursor2.cdbandoc = 85 THEN
											--
										  vr_cdhistor := 2631; -- liq boleto em cartorio
											--
										ELSE
											--
											vr_cdhistor := 0;
											--
										END IF;
										--
                    ELSE
                vr_cdhistor := 987;
										END IF;
                ELSIF rw_cursor2.cdocorre IN (17,77) THEN
                   vr_cdhistor := 1762; -- historico novo - liq apos bx caixa online
                ELSE
                   vr_cdhistor := 0;
                END IF;
             END IF;
          ELSE
             IF rw_cursor2.vlrpagto >= 250000 AND rw_cursor2.cdmotivo = '04' THEN
                vr_cdhistor := 1688; -- Histórico para pagto de VR Boleto por STR (SPB);
             ELSE
                IF rw_cursor2.cdocorre NOT IN (17,77) THEN
                   vr_cdhistor := 0;
                ELSE
                   vr_cdhistor := 1089;
                END IF;
             END IF;
          END IF;

          PAGA0001.pc_prep_tt_lcm_consolidada (pr_idtabcob => rw_cursor2.rowid_cob --ROWID da cobranca
                                              ,pr_cdocorre => rw_cursor2.cdocorre --Codigo Ocorrencia
                                              ,pr_tplancto => 'L'         --Tipo Lancamento
                                              ,pr_vltarifa => rw_cursor2.vlrpagto --Valor Tarifa
                                              ,pr_cdhistor => vr_cdhistor --Codigo Historico
                                              ,pr_cdmotivo => 0 --Codigo motivo
                                              ,pr_tab_lcm_consolidada => pr_tab_lcm_consolidada --Tabela de Lancamentos
                                              ,pr_cdcritic => vr_cdcritic   --Codigo Critica
                                              ,pr_dscritic => vr_dscritic); --Descricao Critica

            
          -- Verificar se o boleto se enquadra na relação de titulos que devem ter o valor
          -- transferido para outra conta
          -- será pesquisado com a seguinte regra (definido por Douglas e Cechet)
          --      CDCOOPER = Coperativa
          --      NMSISTEM = "CRED"
          --      TPTABELA = "COBRAN"
          --      CDEMPRES = Nº Conta
          --      CDACESSO = "TRANSFCOB" + "0000000" -> Convenio
          --      TPREGIST = Nº Boleto
          --
          -- O campo DSTEXTAB vai conter a seguinte informação
          --     1 - Cooperativa de destino
          --     2 - Conta de destino
          --     3 - Histórico de Crédito
          --     4 - Histórico de Débito
          vr_dstextab_new_lcto := TABE0001.fn_busca_dstextab(pr_cdcooper => rw_cursor2.cdcooper
                                                            ,pr_nmsistem => 'CRED'
                                                            ,pr_tptabela => 'COBRAN'
                                                            ,pr_cdempres => rw_cursor2.nrdconta
                                                            ,pr_cdacesso => 'TRANSFCOB' || to_char(rw_cursor2.nrcnvcob,'fm0000000') 
                                                            ,pr_tpregist => rw_cursor2.nrdocmto);
          -- verificar se existe
          IF TRIM(vr_dstextab_new_lcto) IS NOT NULL THEN 
            -- Montar indice para acessar tabela
            -- Valor que deve ser debitado da conta que emitiu o boleto
            vr_index_deb:= LPad(rw_cursor2.cdcooper,3,'0')||
                           LPad(rw_cursor2.nrdconta,10,'0')||
                           LPad(rw_cursor2.nrcnvcob,7,'0')||
                           Lpad(rw_cursor2.nrdocmto,10,'0')||
                           -- Histórico de débito para transferencia
                           LPad(gene0002.fn_busca_entrada(pr_postext => 4
                                                         ,pr_dstext => vr_dstextab_new_lcto
                                                         ,pr_delimitador => ';'),5,'0');

            --Verificar se a chave existe na tabela
            IF NOT pr_tab_lcm_consolidada.EXISTS(vr_index_deb) THEN
              --Criar registro tabela lancamentos consolidada
              pr_tab_lcm_consolidada(vr_index_deb).cdcooper:= rw_cursor2.cdcooper;
              pr_tab_lcm_consolidada(vr_index_deb).nrdconta:= rw_cursor2.nrdconta;
              pr_tab_lcm_consolidada(vr_index_deb).nrconven:= rw_cursor2.nrcnvcob;
              pr_tab_lcm_consolidada(vr_index_deb).cdocorre:= rw_cursor2.cdocorre;
              pr_tab_lcm_consolidada(vr_index_deb).cdhistor:= gene0002.fn_busca_entrada(pr_postext => 4
                                                                                       ,pr_dstext => vr_dstextab_new_lcto
                                                                                       ,pr_delimitador => ';'); -- Historico de tranferencia
              pr_tab_lcm_consolidada(vr_index_deb).vllancto:= rw_cursor2.vlrpagto; -- Valor que está sendo PAGO
              pr_tab_lcm_consolidada(vr_index_deb).tplancto:= 'L'; -- Verificar QUISINSKI
              pr_tab_lcm_consolidada(vr_index_deb).qtdregis:= 1;
              pr_tab_lcm_consolidada(vr_index_deb).cdfvlcop:= 0;
            ELSE
              --Incrementar valor que está sendo pago
              pr_tab_lcm_consolidada(vr_index_deb).vllancto:= Nvl(pr_tab_lcm_consolidada(vr_index_deb).vllancto,0) + rw_cursor2.vlrpagto;
              --Incrementar quantidade registros
              pr_tab_lcm_consolidada(vr_index_deb).qtdregis:= Nvl(pr_tab_lcm_consolidada(vr_index_deb).qtdregis,0) + 1;
            END IF;        
              
            -- Montar indice para acessar tabela
            -- Valor que deve ser creditado na conta de destino
            vr_index_cre:= LPad(gene0002.fn_busca_entrada(pr_postext => 1
                                                         ,pr_dstext => vr_dstextab_new_lcto
                                                         ,pr_delimitador => ';'),3,'0')|| -- Cooperativa
                           -- Conta de destino do valor do boleto
                           LPad(gene0002.fn_busca_entrada(pr_postext => 2
                                                         ,pr_dstext => vr_dstextab_new_lcto
                                                         ,pr_delimitador => ';'),10,'0')||
                           LPad(rw_cursor2.nrcnvcob,7,'0')||
                           Lpad(rw_cursor2.nrdocmto,10,'0')||
                           -- Histórico para crédito do valor
                           LPad(gene0002.fn_busca_entrada(pr_postext => 3
                                                         ,pr_dstext => vr_dstextab_new_lcto
                                                         ,pr_delimitador => ';'),5,'0');

            --Verificar se a chave existe na tabela
            IF NOT pr_tab_lcm_consolidada.EXISTS(vr_index_cre) THEN
              --Criar registro tabela lancamentos consolidada
              pr_tab_lcm_consolidada(vr_index_cre).cdcooper:= gene0002.fn_busca_entrada(pr_postext => 1
                                                                                       ,pr_dstext => vr_dstextab_new_lcto
                                                                                       ,pr_delimitador => ';');
              pr_tab_lcm_consolidada(vr_index_cre).nrdconta:= gene0002.fn_busca_entrada(pr_postext => 2
                                                                                       ,pr_dstext => vr_dstextab_new_lcto
                                                                                       ,pr_delimitador => ';');
              pr_tab_lcm_consolidada(vr_index_cre).nrconven:= rw_cursor2.nrcnvcob;
              pr_tab_lcm_consolidada(vr_index_cre).cdocorre:= rw_cursor2.cdocorre;
              pr_tab_lcm_consolidada(vr_index_cre).cdhistor:= gene0002.fn_busca_entrada(pr_postext => 3
                                                                                       ,pr_dstext => vr_dstextab_new_lcto
                                                                                       ,pr_delimitador => ';'); -- Historico de tranferencia
              pr_tab_lcm_consolidada(vr_index_cre).vllancto:= rw_cursor2.vlrpagto; -- Valor que está sendo PAGO
              pr_tab_lcm_consolidada(vr_index_cre).tplancto:= 'L';
              pr_tab_lcm_consolidada(vr_index_cre).qtdregis:= 1;
              pr_tab_lcm_consolidada(vr_index_cre).cdfvlcop:= 0;
            ELSE
              --Incrementar valor que está sendo pago
              pr_tab_lcm_consolidada(vr_index_cre).vllancto:= Nvl(pr_tab_lcm_consolidada(vr_index_cre).vllancto,0) + rw_cursor2.vlrpagto;
              --Incrementar quantidade registros
              pr_tab_lcm_consolidada(vr_index_cre).qtdregis:= Nvl(pr_tab_lcm_consolidada(vr_index_cre).qtdregis,0) + 1;
            END IF;        
           
            -- Gerar LOG no boleto para identificar que o valor foi transferido
            PAGA0001.pc_cria_log_cobranca(pr_idtabcob => rw_cursor2.rowid_cob   --ROWID da Cobranca
                                         ,pr_cdoperad => '1'   --Operador
                                         ,pr_dtmvtolt => pr_dtmvtolt   --Data movimento
                                         ,pr_dsmensag => 'Valor Transferido para' ||
                                                         ' Coop: ' || gene0002.fn_busca_entrada(pr_postext => 1
                                                                                               ,pr_dstext => vr_dstextab_new_lcto
                                                                                               ,pr_delimitador => ';') || 
                                                         ' Conta: ' || gene0002.fn_busca_entrada(pr_postext => 2
                                                                                                ,pr_dstext => vr_dstextab_new_lcto
                                                                                                ,pr_delimitador => ';') || 
                                                         ' - C: ' || gene0002.fn_busca_entrada(pr_postext => 3
                                                                                              ,pr_dstext => vr_dstextab_new_lcto
                                                                                              ,pr_delimitador => ';') || 
                                                         ' D: ' || gene0002.fn_busca_entrada(pr_postext => 4
                                                                                            ,pr_dstext => vr_dstextab_new_lcto
                                                                                            ,pr_delimitador => ';')
                                                            --Descricao Mensagem
                                         ,pr_des_erro => vr_des_erro   --Indicador erro
                                         ,pr_dscritic => vr_dscritic); --Descricao erro
           
          END IF; -- Fim da validação de boleto para creditar o valor em outra conta
            

          -- Marcar registro da crapret como "Credito realizado" (flcredit)
          BEGIN
            UPDATE crapret SET flcredit = 1
            WHERE crapret.rowid = rw_cursor2.rowid_ret;

            IF SQL%ROWCOUNT = 0 THEN
                RAISE vr_erro_update;
            END IF;
          EXCEPTION
            WHEN vr_erro_update THEN
              -- Atualiza campo de erro
              vr_cdcritic := 0;
              vr_dscritic := 'Erro ao atualizar dados na CRAPRET: ' || SQLERRM;
              RAISE vr_exc_erro;
            WHEN OTHERS THEN
              -- Atualiza campo de erro
              vr_cdcritic := 0;
              vr_dscritic := 'Erro ao atualizar dados na CRAPRET: ' || SQLERRM;
              RAISE vr_exc_erro;
          END;

        END LOOP;

      END IF;

    EXCEPTION
      WHEN vr_exc_erro THEN
        pr_cdcritic:= vr_cdcritic;
        pr_dscritic:= vr_dscritic;
      WHEN OTHERS THEN
        -- Erro
        pr_dscritic:= 'Erro na rotina PAGA0001.pc_valores_a_creditar. '||sqlerrm;
    END;
  END pc_valores_a_creditar;

  /* Procedure para debitar lancamentos de convenios CECRED */
  PROCEDURE pc_debita_convenio_cecred (pr_cdcooper IN crapcop.cdcooper%TYPE   --Codigo Cooperativa
                                      ,pr_cdagenci IN crapage.cdagenci%TYPE   --Codigo Agencia
                                      ,pr_nrdcaixa IN craplot.nrdcaixa%TYPE   --Numero Caixa
                                      ,pr_cdoperad IN crapope.cdoperad%TYPE   --Operador
                                      ,pr_nmdatela IN craptel.nmdatela%TYPE   --Nome programa
                                      ,pr_idorigem IN INTEGER                 --origem (TAA ou Internet)
                                      ,pr_dtmvtolt IN crapdat.dtmvtolt%TYPE   --Data pagamento
                                      ,pr_inproces IN crapdat.inproces%TYPE   --Indicador Processo
                                      ,pr_craplau_progress_recid IN NUMBER    --Recid lancamento automático
                                      ,pr_cdcritic OUT INTEGER      --Codigo da Critica
                                      ,pr_dscritic OUT VARCHAR2) IS  --Descricao da critica);
    -- ..........................................................................
    --
    --  Programa : pc_debita_convenio_cecred
    --  Sistema  : CRED - Convenios
    --  Sigla    : PAGA0001
    --  Autor    : Fabrício
    --  Data     : Janeiro/2015.                   Ultima atualizacao: 03/09/2018
    --
    --  Dados referentes ao programa:
    --
    --   Frequencia: Sempre que for chamado
    --   Objetivo  : Efetuar debitos de agendamentos de convenios CECRED.
    --
    --   Alteracoes: 16/09/2015 - Melhoria performace, inclusao do parametro de tipo de busca na chamada do procedimento
    --                            EXTR0001.pc_obtem_saldo_dia, para utilizar a dtmvtoan como base na busca(Odirlei-AMcom)
    --
    --               20/11/2015 - Tratamento para nao utilizar inprocess, rotina sera rodada 
    --                           via job SD358495 (Odirlei-AMcom)        
    --
    --               19/01/2016 - (Ajuste migracao crps123 > crps509) Incluir tratamento de debito facil 
    --                            na procedure  pc_debita_convenio_cecred (Lucas Ranghetti #388406 )
    --
    --               21/01/2016 - (Ajuste migracao crps123 > crps509) Incluir update da craplau para o 
    --                            debito facil na procedure pc_debita_convenio_cecred (Lucas Ranghetti/Fabricio)
    --
    --               23/06/2016 - Remover validacao de data para atualizar a data do ultimo debito na 
    --                            crapatr (Lucas Ranghetti #474669)
    --
    --               01/07/2016 - Incluir critica "Lancamento ja efetivado pela DEBCON." para lancamentos 
    --                            ja efetuados (Lucas Ranghetti #474938)
    --
    --               18/05/2016 - Ajustes para notificar via SMS e IBank quando faturas não forem pagas devido a ultrapassar
    --                            limite definido da crapatr ou por não possuir saldo e inclusao da criação do protocolo.
    --                            PRJ320 - Oferta Debaut (Odirlei-AMcom) 
    --
    --               27/07/2016 - Desabilitar temporariamente a criação do protocolo devido existir
    --                            diferença no tamanho do campo de protocolo entre  a tabela crappro e crapaut
    --                            acarretando erro ao atualizar tabela crapaut.
    --                            PRJ320 - Oferta Debaut (Odirlei-AMcom) 
    --
    --               23/08/2016 - Incluir tratamento para autorizações suspensas 
    --                            (Lucas Ranghetti #499496)
    --
    --               08/09/2016 - Remover condicao temporaria de criacao de protocolo. Agora todos os debitos
    --                            podem ter seu comprovante gerado normalmente, devido ao ajuste na estrutura
    --                            da tabela crapaut. (Anderson #511078)
    --
    --               04/11/2016 - Ajuste para tratar a terceira execucao do processo debnet M349 (Tiago/Elton)
    --
    --               23/01/2017 - Ajustes para que não haja mais estouro de chave da CRAPLCM##3
    --                            e tratamentos de erro com rollback em alguns casos pois
    --                            qdo cai nessas situações algumas vezes acabava efetivando
    --                            o debito mesmo sem protocolo por exemplo SD590929 e SD594359
    --                            (Tiago/Fabricio).
	--
	--               04/04/2017 - Ajuste para integracao de arquivos com layout na versao 5
	-- 	                         (Jonata - RKAM M311).
    --
	--               03/09/2018 - Correção para remover lote (Jonata - Mouts).
    --
    --               10/03/2019 - Inclusão do indicador de validação do CPF/CNPJ Layout 5.
    --                            Gabriel Marcos (Mouts) - SCTASK0038352.
    -- 
    -- ..........................................................................
  BEGIN
    DECLARE
      --Tipo da tabela de saldos
      vr_tab_saldo EXTR0001.typ_tab_saldos;
      --Tipo de tabelas de limites
      vr_tab_limite INET0001.typ_tab_limite;
      vr_tab_internet INET0001.typ_tab_internet;
      --Tipo de tabela de erro
      vr_tab_erro GENE0001.typ_tab_erro;

      vr_insitlau  INTEGER;
      vr_indsaldo  NUMBER;
      vr_flagatr   INTEGER := 0;
      vr_cdagenci crapage.cdagenci%TYPE;
      vr_nrdolote craplot.nrdolote%TYPE;
      vr_nrdconta crapass.nrdconta%TYPE;
      vr_nrdocmto craplau.nrdocmto%TYPE;
      vr_cdbccxlt craplau.cdbccxlt%TYPE;
      vr_rowid_atr ROWID;
      vr_nmconven  crapcon.nmextcon%TYPE;
      vr_dsdmensg  VARCHAR2(4000);
      vr_flultexe  INTEGER;
      vr_qtdexec   INTEGER;
      vr_existettl BOOLEAN;
      vr_nrseqdig  craplot.nrseqdig%TYPE := 0;
      vr_dsinfor1  crappro.dsinform##1%TYPE;
      vr_dsinfor2  crappro.dsinform##1%TYPE;
      vr_dsinfor3  crappro.dsinform##1%TYPE;
      vr_dsprotoc  crappro.dsprotoc%TYPE;


      -- Autenticação
      vr_dslitera  crapaut.dslitera%TYPE;
      vr_nrautdoc  crapaut.nrsequen%TYPE;
      vr_nrdrecid  ROWID;

      --Variaveis de Erro
      vr_des_erro  VARCHAR2(3);
      vr_cdcritic  crapcri.cdcritic%TYPE;
      vr_dscritic  VARCHAR2(4000);
      vr_dscritic2 VARCHAR2(4000);
      vr_auxcdcri  PLS_INTEGER := 0;
      vr_auxdscri  VARCHAR2(4000);
      vr_exc_erro  EXCEPTION;

      -- Cursores

      -- Cursor para verificar se lote existe
      CURSOR cr_craplot(pr_cdcooper IN crapcop.cdcooper%TYPE
                       ,pr_dtmvtolt IN crapdat.dtmvtolt%TYPE
                       ,pr_cdagenci IN craplot.cdagenci%TYPE
                       ,pr_cdbccxlt IN craplot.cdbccxlt%TYPE
                       ,pr_nrdolote IN craplot.nrdolote%TYPE) IS
        SELECT lot.cdcooper
              ,lot.nrseqdig
            ,lot.qtcompln
            ,lot.qtinfoln
            ,lot.vlcompdb
            ,lot.nrdolote
            ,lot.cdbccxlt
            ,lot.cdagenci
            ,lot.dtmvtolt
              ,lot.cdoperad
            ,lot.ROWID
        FROM craplot lot
         WHERE lot.cdcooper = pr_cdcooper
           AND lot.dtmvtolt = pr_dtmvtolt
           AND lot.cdagenci = pr_cdagenci
           AND lot.cdbccxlt = pr_cdbccxlt
           AND lot.nrdolote = pr_nrdolote;
      rw_craplot cr_craplot%ROWTYPE;

      CURSOR cr_craplcm(pr_cdcooper IN craplcm.cdcooper%TYPE
                       ,pr_dtmvtolt IN crapdat.dtmvtolt%TYPE
                       ,pr_cdagenci IN crapage.cdagenci%TYPE
                       ,pr_cdbccxlt IN craplcm.cdbccxlt%TYPE
                       ,pr_nrdolote IN craplcm.nrdolote%TYPE
                       ,pr_nrdconta IN craplau.nrdconta%TYPE
                       ,pr_nrdocmto IN craplau.nrdocmto%TYPE) IS
      SELECT lcm.nrseqdig
            ,lcm.nrdolote
        FROM craplcm lcm
         WHERE lcm.cdcooper = pr_cdcooper
           AND lcm.dtmvtolt = pr_dtmvtolt
           AND lcm.cdagenci = pr_cdagenci
           AND lcm.cdbccxlt = pr_cdbccxlt
           AND lcm.nrdolote = pr_nrdolote
           AND lcm.nrdctabb = pr_nrdconta
           AND lcm.nrdocmto = pr_nrdocmto;
      rw_craplcm cr_craplcm%ROWTYPE;

      --CDCOOPER, DTMVTOLT, CDAGENCI, CDBCCXLT, NRDOLOTE, NRSEQDIG (CRAPLCM##CRAPLCM3)
      CURSOR cr_craplcm_dig(pr_cdcooper IN craplcm.cdcooper%TYPE
                           ,pr_dtmvtolt IN crapdat.dtmvtolt%TYPE
                           ,pr_cdagenci IN crapage.cdagenci%TYPE
                           ,pr_cdbccxlt IN craplcm.cdbccxlt%TYPE
                           ,pr_nrdolote IN craplcm.nrdolote%TYPE
                           ,pr_nrseqdig IN craplcm.nrseqdig%TYPE) IS
        SELECT lcm.nrseqdig
              ,lcm.nrdolote
          FROM craplcm lcm
           WHERE lcm.cdcooper = pr_cdcooper
             AND lcm.dtmvtolt = pr_dtmvtolt
             AND lcm.cdagenci = pr_cdagenci
             AND lcm.cdbccxlt = pr_cdbccxlt
             AND lcm.nrdolote = pr_nrdolote
             AND lcm.nrseqdig = pr_nrseqdig;      
        rw_craplcm_dig cr_craplcm_dig%ROWTYPE;

      -- BUSCA CADASTRO DAS AUTORIZACOES DE DEBITO EM CONTA
      CURSOR cr_crapatr(pr_cdcooper IN crapcop.cdcooper%TYPE
                       ,pr_nrdconta IN crapass.nrdconta%TYPE
                       ,pr_cdhistor IN craphis.cdhistor%TYPE
                       ,pr_nrcrcard IN craplau.nrcrcard%TYPE) IS

      SELECT atr.dtfimatr
            ,atr.cdrefere
            ,atr.cdhistor
            ,atr.dtultdeb
            ,atr.rowid
            ,atr.flgmaxdb
            ,atr.vlrmaxdb
            ,atr.dshisext
            ,atr.dtfimsus
        FROM crapatr atr
       WHERE atr.cdcooper = pr_cdcooper  -- CODIGO DA COOPERATIVA
         AND atr.nrdconta = pr_nrdconta  -- NUMERO DA CONTA
         AND atr.cdhistor = pr_cdhistor  -- CODIGO DO HISTORICO
         AND atr.cdrefere = pr_nrcrcard; -- COD. REFERENCIA
      
      -- Buscar Cadastro das autorizacoes de debito em conta pelo rowid
      CURSOR cr_crapatr_rowid(pr_rowid IN ROWID) IS
        SELECT atr.dtfimatr
              ,atr.cdrefere
              ,atr.cdhistor
              ,atr.dtultdeb
              ,atr.rowid
              ,atr.flgmaxdb
              ,atr.vlrmaxdb
              ,atr.dshisext
              ,atr.dtfimsus
          FROM crapatr atr
         WHERE atr.rowid = pr_rowid;
      rw_crapatr cr_crapatr_rowid%ROWTYPE;
         
      CURSOR cr_crapcop (pr_cdcooper IN crapcop.cdcooper%TYPE) IS
      SELECT crapcop.cdagesic
            ,crapcop.nmrescop
        FROM crapcop
       WHERE crapcop.cdcooper = pr_cdcooper;
      rw_crapcop cr_crapcop%ROWTYPE;
      
      -- Buscar informacoes de convenios nossos; debito automatico (CECRED)
      CURSOR cr_gnconve (pr_cdhistor craphis.cdhistor%TYPE) IS
        SELECT gnconve.flgdbssd
              ,gnconve.nmempres
              ,gnconve.flgvlcpf
          FROM gnconve
         WHERE gnconve.cdhisdeb = pr_cdhistor
           AND gnconve.flgativo = 1;           
      rw_gnconve cr_gnconve%ROWTYPE;
      
      --Selecionar titulares com senhas ativas 
      CURSOR cr_crapsnh (pr_cdcooper  IN crapsnh.cdcooper%TYPE
                         ,pr_nrdconta IN crapsnh.nrdconta%TYPE
                         ,pr_cdsitsnh IN crapsnh.cdsitsnh%TYPE
                         ,pr_tpdsenha IN crapsnh.tpdsenha%TYPE) IS
        SELECT crapsnh.nrcpfcgc
              ,crapsnh.cdcooper
              ,crapsnh.nrdconta
              ,crapsnh.idseqttl
          FROM crapsnh
         WHERE crapsnh.cdcooper = pr_cdcooper
           AND crapsnh.nrdconta = pr_nrdconta
           AND crapsnh.cdsitsnh = pr_cdsitsnh
           AND crapsnh.tpdsenha = pr_tpdsenha;
      rw_crapsnh cr_crapsnh%ROWTYPE;
      
      --Selecionar informacoes do titular
      CURSOR cr_crapttl (pr_cdcooper IN crapttl.cdcooper%TYPE
                        ,pr_nrdconta IN crapttl.nrdconta%TYPE
                        ,pr_nrcpfcgc IN crapttl.nrcpfcgc%TYPE) IS
        SELECT crapttl.nmextttl
              ,crapttl.nrcpfcgc
          FROM crapttl
         WHERE crapttl.cdcooper = pr_cdcooper
           AND crapttl.nrdconta = pr_nrdconta
           AND crapttl.nrcpfcgc = pr_nrcpfcgc;
      rw_crapttl cr_crapttl%ROWTYPE;

	  --Selecionar informacoes dos lancamentos automaticos
	  CURSOR cr_craplau (pr_progress_recid IN NUMBER) IS
		SELECT craplau.nrdconta
			  ,craplau.insitlau
			  ,craplau.vllanaut
			  ,craplau.idseqttl
			  ,craplau.dtmvtopg
			  ,craplau.cddbanco
			  ,craplau.cdageban
			  ,craplau.nrctadst
			  ,craplau.cdtiptra
			  ,craplau.nrcpfope
			  ,craplau.dslindig
			  ,craplau.dscodbar
			  ,craplau.dscedent
			  ,craplau.idtitdda
			  ,craplau.cdhistor
			  ,craplau.nrdocmto
			  ,craplau.cdseqtel
			  ,craplau.cdempres
			  ,craplau.cdbccxlt
			  ,craplau.cdagenci
			  ,craplau.nrseqdig
			  ,craplau.nrdolote
			  ,craplau.dtmvtolt
			  ,craplau.nrdctabb
			  ,craplau.nrcrcard
			  ,craplau.nrseqagp
			  ,craplau.flgblqdb
			  ,craplau.ROWID
			  ,craplau.cdcooper
			  ,craplau.cdtrapen
			  ,craplau.dsorigem
			  ,craplau.cdcoptfn
			  ,craplau.cdagetfn
			  ,craplau.nrterfin
			  ,craplau.nrcpfpre
			  ,craplau.nmprepos
			  ,craplau.flmobile
			  ,craplau.idtipcar
			  ,craplau.nrcartao
              ,craplau.idlancto
		FROM craplau
		WHERE craplau.progress_recid = pr_progress_recid;
	  rw_craplau cr_craplau%ROWTYPE;

      CURSOR cr_tbconv_det_agendamento(pr_idlancto IN craplau.idlancto%TYPE) IS
       SELECT t.cdlayout
             ,t.tppessoa_dest
             ,t.nrcpfcgc_dest
        FROM tbconv_det_agendamento t
       WHERE t.idlancto = pr_idlancto;
       rw_tbconv_det_agendamento cr_tbconv_det_agendamento%ROWTYPE;  

      PROCEDURE pc_nao_efetivado(pr_cdcooper  IN crapcop.cdcooper%TYPE
                                ,pr_flultexe  IN INTEGER
                                ,pr_rwcraplau IN cr_craplau%ROWTYPE
                                ,pr_cdagesic  IN crapcop.cdagesic%TYPE
                                ,pr_nrctacns  IN crapass.nrctacns%TYPE
                                ,pr_cdcritic OUT INTEGER
                                ,pr_dscritic OUT VARCHAR2) IS --tiago
        vr_cdcritic  crapcri.cdcritic%TYPE;
        vr_dscritic  VARCHAR2(4000);
        vr_auxcdcri  PLS_INTEGER := 0;  
        vr_exc_erro  EXCEPTION;                      
    BEGIN
        -- se for a ultima execucao muda a situacao do agendamento
        -- para nao efetivado
        IF pr_flultexe = 1 THEN
           
          vr_cdcritic := 964;                                                   -- AUTORIZACAO NAO ENCONTRADA
          vr_dscritic := GENE0001.fn_busca_critica(pr_cdcritic => vr_cdcritic); -- BUSCA DESCRICAO DA CRITICA
          vr_auxcdcri := vr_cdcritic;

          -- GERAR REGISTROS NA CRAPNDB PARA DEVOLUCAO DE DEBITOS AUTOMATICOS
          CONV0001.pc_gerandb(pr_cdcooper => pr_cdcooper         -- CÓDIGO DA COOPERATIVA
                             ,pr_cdhistor => pr_rwcraplau.cdhistor -- CÓDIGO DO HISTÓRICO
                             ,pr_nrdconta => pr_rwcraplau.nrdconta -- NUMERO DA CONTA
                             ,pr_cdrefere => pr_rwcraplau.nrdocmto -- CÓDIGO DE REFERÊNCIA
                             ,pr_vllanaut => pr_rwcraplau.vllanaut -- VALOR LANCAMENTO
                             ,pr_cdseqtel => pr_rwcraplau.cdseqtel -- CÓDIGO SEQUENCIAL
                             ,pr_nrdocmto => pr_rwcraplau.nrdocmto -- NÚMERO DO DOCUMENTO
                             ,pr_cdagesic => pr_cdagesic           -- AGÊNCIA SICREDI
                             ,pr_nrctacns => pr_nrctacns           -- CONTA DO CONSÓRCIO
                             ,pr_cdagenci => pr_rwcraplau.cdagenci -- CODIGO DO PA
                             ,pr_cdempres => pr_rwcraplau.cdempres -- CODIGO EMPRESA SICREDI
                             ,pr_idlancto => pr_rwcraplau.idlancto -- CÓDIGO DO LANCAMENTO
                             ,pr_codcriti => vr_auxcdcri           -- CÓDIGO DO ERRO
                             ,pr_cdcritic => vr_cdcritic           -- CÓDIGO DO ERRO
                             ,pr_dscritic => vr_dscritic);         -- DESCRICAO DO ERRO

          -- VERIFICA SE HOUVE ERRO NA PROCEDURE PC_GERANDB
          IF vr_cdcritic > 0 THEN
            RAISE vr_exc_erro;
          END IF;

          BEGIN
            -- ATUALIZA REGISTROS DE LANCAMENTOS AUTOMATICOS
            UPDATE craplau
               SET insitlau = 4
                  ,dtdebito = rw_crapdat.dtmvtolt
                  ,cdcritic = vr_auxcdcri
            WHERE craplau.rowid = rw_craplau.rowid;

            -- VERIFICA SE HOUVE PROBLEMA NA ATUALIZAÇÃO DO REGISTRO
          EXCEPTION
            WHEN OTHERS THEN
              vr_dscritic := 'Erro ao atualizar registro na tabela CRAPLAU(NE): ' || sqlerrm;
              RAISE vr_exc_erro;
          END;        
        
        END IF;  
      
      EXCEPTION
        WHEN vr_exc_erro THEN
          pr_cdcritic := vr_cdcritic;
          pr_dscritic := vr_dscritic;
          ROLLBACK;
        WHEN OTHERS THEN
          pr_cdcritic := vr_cdcritic;
          pr_dscritic := vr_dscritic||' '||SQLERRM;
          ROLLBACK;
      END;


    BEGIN
      --Se a cooperativa origem nao existir
      OPEN cr_crapcop(pr_cdcooper => pr_cdcooper);
      FETCH cr_crapcop INTO rw_crapcop;

      --Se nao encontrou
      IF cr_crapcop%NOTFOUND THEN
        --Fechar Cursor
        CLOSE cr_crapcop;
        vr_cdcritic:= 0;
        vr_dscritic:= 'Registro de cooperativa origem nao encontrado.';
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;

      --Fechar Cursor
      CLOSE cr_crapcop;

      --Verificar se o lancamento automatico existe
      OPEN cr_craplau (pr_progress_recid => pr_craplau_progress_recid);
      FETCH cr_craplau INTO rw_craplau;
      IF cr_craplau%NOTFOUND THEN
        vr_cdcritic:= 0;
        vr_dscritic:= 'Registro de agendamento nao encontrado.';
        --Fechar Cursor
        CLOSE cr_craplau;
        --Levantar Excecao
        RAISE vr_exc_erro;
      ELSE
        --Situacao lancamento
        vr_insitlau:= rw_craplau.insitlau;
      END IF;
      --Fechar Cursor
      CLOSE cr_craplau;

      -- Se lancamento ja foi efetuado
      IF vr_insitlau <> 1 THEN
        vr_cdcritic:= 0; --  Lancamento ja efetivado pela DEBCON 
        vr_dscritic:= 'Lancamento ja efetivado pela DEBCON.'; 
        --Levantar Excecao
        RAISE vr_exc_erro;
      END IF;

      -- Verifica se a data esta cadastrada
      OPEN BTCH0001.cr_crapdat(pr_cdcooper => pr_cdcooper);
      FETCH BTCH0001.cr_crapdat INTO rw_crapdat;
      -- Se não encontrar
      IF BTCH0001.cr_crapdat%NOTFOUND THEN
        -- Fechar o cursor pois haverá raise
        CLOSE BTCH0001.cr_crapdat;
        -- Montar mensagem de critica
        vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => 1);
        RAISE vr_exc_erro;
      ELSE
        -- Apenas fechar o cursor
        CLOSE BTCH0001.cr_crapdat;
      END IF;
      --Selecionar informacoes do associado
      OPEN cr_crapass(pr_cdcooper => pr_cdcooper
                     ,pr_nrdconta => rw_craplau.nrdconta);
      FETCH cr_crapass INTO rw_crapass;
      --Fechar Cursor
      CLOSE cr_crapass;
      
      
	  -- Busca validacao de cpf / cnpj
	  OPEN cr_gnconve(rw_craplau.cdhistor);
      FETCH cr_gnconve INTO rw_gnconve;
      CLOSE cr_gnconve;

      IF rw_craplau.cdtiptra = 6 THEN

        -- LEITURA PARA ENCONTRAR DETALHE DO AGENDAMENTO
        OPEN cr_tbconv_det_agendamento(pr_idlancto => rw_craplau.idlancto);
            
        FETCH cr_tbconv_det_agendamento INTO rw_tbconv_det_agendamento;
            
        -- SE NÃO ENCONTRAR
        IF cr_tbconv_det_agendamento%NOTFOUND THEN
          
          -- FECHAR O CURSOR POIS EFETUAREMOS RAISE
          CLOSE cr_tbconv_det_agendamento;
          
          -- MONTAR MENSAGEM DE CRITICA
          vr_cdcritic := 597;
          
          -- Montar mensagem de critica
          vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
          RAISE vr_exc_erro;
          
        ELSE
          -- APENAS FECHAR O CURSOR
          CLOSE cr_tbconv_det_agendamento;
        END IF;
          	  
        IF rw_tbconv_det_agendamento.cdlayout = 5 THEN
            
          vr_existettl := TRUE;         
               
          IF rw_gnconve.flgvlcpf = 0 THEN		      
               
          IF rw_tbconv_det_agendamento.tppessoa_dest = 2 THEN
              
            --Selecionar informacoes do associado
            OPEN cr_crapttl(pr_cdcooper => pr_cdcooper
                           ,pr_nrdconta => rw_craplau.nrdconta
                           ,pr_nrcpfcgc => rw_tbconv_det_agendamento.nrcpfcgc_dest);

            FETCH cr_crapttl INTO rw_crapttl;
                
            IF cr_crapttl%NOTFOUND THEN
              vr_existettl := FALSE;           
            END IF;
                
            --Fechar Cursor
            CLOSE cr_crapttl;  
            
          ELSIF rw_crapass.nrcpfcgc <> rw_tbconv_det_agendamento.nrcpfcgc_dest THEN
              
            vr_existettl := FALSE;
                    
          END IF;
          
        END IF; 
        
      END IF;

      END IF;

      --> Verificar a execução da DEBNET/DEBSIC 
      SICR0001.pc_controle_exec_deb ( pr_cdcooper  => pr_cdcooper        --> Código da coopertiva
                                      ,pr_cdtipope  => 'C'                         --> Tipo de operacao I-incrementar e C-Consultar
                                      ,pr_dtmvtolt  => rw_crapdat.dtmvtolt         --> Data do movimento                                
                                      ,pr_cdprogra  => pr_nmdatela                 --> Codigo do programa                                  
                                      ,pr_flultexe  => vr_flultexe                 --> Retorna se é a ultima execução do procedimento
                                      ,pr_qtdexec   => vr_qtdexec                  --> Retorna a quantidade
                                      ,pr_cdcritic  => vr_cdcritic                 --> Codigo da critica de erro
                                      ,pr_dscritic  => vr_dscritic);               --> descrição do erro se ocorrer

      IF nvl(vr_cdcritic,0) > 0
      OR TRIM(vr_dscritic) IS NOT NULL THEN
        RAISE vr_exc_erro; 
      END IF; 
      
      /** Verifica se possui saldo para fazer a operacao **/
      EXTR0001.pc_obtem_saldo_dia (pr_cdcooper   => pr_cdcooper
                                  ,pr_rw_crapdat => rw_crapdat
                                  ,pr_cdagenci   => pr_cdagenci
                                  ,pr_nrdcaixa   => pr_nrdcaixa
                                  ,pr_cdoperad   => pr_cdoperad
                                  ,pr_nrdconta   => rw_craplau.nrdconta
                                  ,pr_vllimcre   => rw_crapass.vllimcre
                                  ,pr_tipo_busca => 'A' --> tipo de busca(A-dtmvtoan)
                                  ,pr_flgcrass   => FALSE
                                  ,pr_dtrefere   => pr_dtmvtolt
                                  ,pr_des_reto   => vr_dscritic
                                  ,pr_tab_sald   => vr_tab_saldo
                                  ,pr_tab_erro   => vr_tab_erro);
      --Se ocorreu erro
      IF vr_dscritic = 'NOK' THEN
        -- Tenta buscar o erro no vetor de erro
        IF vr_tab_erro.COUNT > 0 THEN
          vr_cdcritic:= vr_tab_erro(vr_tab_erro.FIRST).cdcritic;
          vr_dscritic:= vr_tab_erro(vr_tab_erro.FIRST).dscritic|| ' Conta: '||rw_craplau.nrdconta;
        ELSE
          vr_cdcritic:= 0;
          vr_dscritic:= 'Retorno "NOK" na extr0001.pc_obtem_saldo_dia e sem informação na pr_tab_erro, Conta: '||rw_craplau.nrdconta;
        END IF;
        --Levantar Excecao
        RAISE vr_exc_erro;
      ELSE
        vr_dscritic:= NULL;
      END IF;
      --Verificar o saldo retornado
      IF vr_tab_saldo.Count = 0 THEN
        --Montar mensagem erro
        vr_cdcritic:= 0;
        vr_dscritic:= 'Nao foi possivel consultar o saldo para a operacao.';
        --Levantar Excecao
        RAISE vr_exc_erro;
      ELSE
        -- Posiciona no primeiro registro da tabela temporária
        vr_indsaldo := vr_tab_saldo.first;
        
        -- Identificar se conta possui autorizacao de debaut
        SICR0001.pc_identifica_crapatr(pr_cdcooper  => rw_craplau.cdcooper    --> Código da coopertiva
                                      ,pr_nrdconta  => rw_craplau.nrdconta    --> Numero da conta
                                      ,pr_nrdocmto  => rw_craplau.nrdocmto    --> Documento                              
                                      ,pr_cdhistor  => rw_craplau.cdhistor    --> Codigo de historico
                                      ,pr_nrcrcard  => rw_craplau.nrcrcard    --> Numero do cartao                                  
                                      ,pr_cdprogra  => 'PAGA0001'             --> Código do programa                                  
                                      ,pr_flagatr   => vr_flagatr             --> Flag se possui atr
                                      ,pr_rowid_atr => vr_rowid_atr           --> Retorna rowid do registro crapatr localizado
                                      ,pr_cdcritic  => vr_cdcritic            --> Codigo da critica de erro
                                      ,pr_dscritic  => vr_dscritic );         --> descrição do erro se ocorrer
          
        rw_crapatr := NULL;
        OPEN cr_crapatr_rowid(pr_rowid => vr_rowid_atr);
        FETCH cr_crapatr_rowid INTO rw_crapatr;
        CLOSE cr_crapatr_rowid;                

        -- Verificar se conta esta demitida
        IF rw_crapass.dtdemiss IS NOT NULL THEN
           -- ATRIBUI O CODIGO DA CRITICA
          vr_cdcritic := 64;                                                    -- AUTORIZACAO NAO ENCONTRADA
          vr_dscritic := GENE0001.fn_busca_critica(pr_cdcritic => vr_cdcritic); -- BUSCA DESCRICAO DA CRITICA
          vr_auxcdcri := vr_cdcritic;
          vr_auxdscri := vr_dscritic;

          -- GERAR REGISTROS NA CRAPNDB PARA DEVOLUCAO DE DEBITOS AUTOMATICOS
          CONV0001.pc_gerandb(pr_cdcooper => pr_cdcooper         -- CÓDIGO DA COOPERATIVA
                             ,pr_cdhistor => rw_craplau.cdhistor -- CÓDIGO DO HISTÓRICO
                             ,pr_nrdconta => rw_craplau.nrdconta -- NUMERO DA CONTA
                             ,pr_cdrefere => rw_craplau.nrdocmto -- CÓDIGO DE REFERÊNCIA
                             ,pr_vllanaut => rw_craplau.vllanaut -- VALOR LANCAMENTO
                             ,pr_cdseqtel => rw_craplau.cdseqtel -- CÓDIGO SEQUENCIAL
                             ,pr_nrdocmto => rw_craplau.nrdocmto -- NÚMERO DO DOCUMENTO
                             ,pr_cdagesic => rw_crapcop.cdagesic -- AGÊNCIA SICREDI
                             ,pr_nrctacns => rw_crapass.nrctacns -- CONTA DO CONSÓRCIO
                             ,pr_cdagenci => rw_crapass.cdagenci -- CODIGO DO PA
                             ,pr_cdempres => rw_craplau.cdempres -- CODIGO EMPRESA SICREDI
                             ,pr_idlancto => rw_craplau.idlancto -- CÓDIGO DO LANCAMENTO
                             ,pr_codcriti => vr_auxcdcri         -- CÓDIGO DO ERRO
                             ,pr_cdcritic => vr_cdcritic         -- CÓDIGO DO ERRO
                             ,pr_dscritic => vr_dscritic);       -- DESCRICAO DO ERRO

          -- VERIFICA SE HOUVE ERRO NA PROCEDURE PC_GERANDB
          IF vr_cdcritic > 0 THEN
            RAISE vr_exc_erro;
          END IF;

          BEGIN
            -- ATUALIZA REGISTROS DE LANCAMENTOS AUTOMATICOS
            UPDATE craplau
               SET insitlau = 3
                  ,dtdebito = rw_crapdat.dtmvtolt
                  ,cdcritic = vr_auxcdcri
            WHERE craplau.rowid = rw_craplau.rowid;

            -- VERIFICA SE HOUVE PROBLEMA NA ATUALIZAÇÃO DO REGISTRO
          EXCEPTION
            WHEN OTHERS THEN
              vr_dscritic := 'Erro ao atualizar registro na tabela CRAPLAU: ' || sqlerrm;
            RAISE vr_exc_erro;
          END;

          pr_cdcritic := vr_auxcdcri;
          pr_dscritic := vr_auxdscri;          
        
        ELSIF rw_craplau.cdtiptra = 6                                       AND
		         (rw_tbconv_det_agendamento.cdlayout = 5 AND NOT vr_existettl)  THEN
              
          vr_auxcdcri := 1003;  -- Titular exluído da Conta
          
          --> Apenas gerar critica na ultima tentativa
          IF vr_flultexe = 1 THEN
            -- GERAR REGISTROS NA CRAPNDB PARA DEVOLUCAO DE DEBITOS AUTOMATICOS
            CONV0001.pc_gerandb(pr_cdcooper => pr_cdcooper         -- CÓDIGO DA COOPERATIVA
                               ,pr_cdhistor => rw_craplau.cdhistor -- CÓDIGO DO HISTÓRICO
                               ,pr_nrdconta => rw_craplau.nrdconta -- NUMERO DA CONTA
                               ,pr_cdrefere => rw_crapatr.cdrefere -- CÓDIGO DE REFERÊNCIA
                               ,pr_vllanaut => rw_craplau.vllanaut -- VALOR LANCAMENTO
                               ,pr_cdseqtel => rw_craplau.cdseqtel -- CÓDIGO SEQUENCIAL
                               ,pr_nrdocmto => rw_craplau.nrdocmto -- NÚMERO DO DOCUMENTO
                               ,pr_cdagesic => rw_crapcop.cdagesic -- AGÊNCIA SICREDI
                               ,pr_nrctacns => rw_crapass.nrctacns -- CONTA DO CONSÓRCIO
                               ,pr_cdagenci => rw_crapass.cdagenci -- CODIGO DO PA
                               ,pr_cdempres => rw_craplau.cdempres -- CODIGO EMPRESA SICREDI
                               ,pr_idlancto => rw_craplau.idlancto -- CÓDIGO DO LANCAMENTO
                               ,pr_codcriti => vr_auxcdcri         -- CÓDIGO DO ERRO
                               ,pr_cdcritic => vr_cdcritic         -- CÓDIGO DO ERRO
                               ,pr_dscritic => vr_dscritic);       -- DESCRICAO DO ERRO

            -- VERIFICA SE HOUVE ERRO NA PROCEDURE PC_GERANDB
            IF vr_cdcritic > 0 THEN
              RAISE vr_exc_erro;
            END IF;

            BEGIN
              -- ATUALIZA REGISTROS DE LANCAMENTOS AUTOMATICOS
              UPDATE craplau
                 SET insitlau = 3
                    ,dtdebito = rw_crapdat.dtmvtolt
                    ,cdcritic = vr_auxcdcri
              WHERE craplau.rowid = rw_craplau.rowid;

              -- VERIFICA SE HOUVE PROBLEMA NA ATUALIZAÇÃO DO REGISTRO
            EXCEPTION
              WHEN OTHERS THEN
                vr_dscritic := 'Erro ao atualizar registro na tabela CRAPLAU: ' || sqlerrm;
              RAISE vr_exc_erro;
            END;          
          
		      -- Se for a primeira tentativa apenas grava critica
        --  ELSIF vr_qtdexec < 3 THEN
          ELSIF vr_flultexe <> 1 THEN --- Se não for a última execução -- Projeto Debitador		  
            BEGIN
              -- ATUALIZA REGISTROS DE LANCAMENTOS AUTOMATICOS
              UPDATE craplau
                 SET cdcritic = vr_auxcdcri
               WHERE craplau.rowid = rw_craplau.rowid;

              -- VERIFICA SE HOUVE PROBLEMA NA ATUALIZAÇÃO DO REGISTRO
            EXCEPTION
              WHEN OTHERS THEN
                vr_dscritic := 'Erro ao atualizar registro na tabela CRAPLAU: ' ||
                               SQLERRM;
                RAISE vr_exc_erro;
            END;
          END IF;

          pr_cdcritic := vr_auxcdcri;
          pr_dscritic := GENE0001.fn_busca_critica(pr_cdcritic => vr_auxcdcri);     
        
        -- Autorizacao nao encontrada
        ELSIF vr_flagatr = 0 THEN -- VERIFICA SE HA REGISTRO NA CRAPATR
          -- ATRIBUI O CODIGO DA CRITICA
          vr_cdcritic := 453;                                                   -- AUTORIZACAO NAO ENCONTRADA
          vr_dscritic := GENE0001.fn_busca_critica(pr_cdcritic => vr_cdcritic); -- BUSCA DESCRICAO DA CRITICA
          vr_auxcdcri := vr_cdcritic;
          vr_auxdscri := vr_dscritic;

          -- GERAR REGISTROS NA CRAPNDB PARA DEVOLUCAO DE DEBITOS AUTOMATICOS
          CONV0001.pc_gerandb(pr_cdcooper => pr_cdcooper         -- CÓDIGO DA COOPERATIVA
                             ,pr_cdhistor => rw_craplau.cdhistor -- CÓDIGO DO HISTÓRICO
                             ,pr_nrdconta => rw_craplau.nrdconta -- NUMERO DA CONTA
                             ,pr_cdrefere => rw_craplau.nrdocmto -- CÓDIGO DE REFERÊNCIA
                             ,pr_vllanaut => rw_craplau.vllanaut -- VALOR LANCAMENTO
                             ,pr_cdseqtel => rw_craplau.cdseqtel -- CÓDIGO SEQUENCIAL
                             ,pr_nrdocmto => rw_craplau.nrdocmto -- NÚMERO DO DOCUMENTO
                             ,pr_cdagesic => rw_crapcop.cdagesic -- AGÊNCIA SICREDI
                             ,pr_nrctacns => rw_crapass.nrctacns -- CONTA DO CONSÓRCIO
                             ,pr_cdagenci => rw_crapass.cdagenci -- CODIGO DO PA
                             ,pr_cdempres => rw_craplau.cdempres -- CODIGO EMPRESA SICREDI
                             ,pr_idlancto => rw_craplau.idlancto -- CÓDIGO DO LANCAMENTO
                             ,pr_codcriti => vr_auxcdcri         -- CÓDIGO DO ERRO
                             ,pr_cdcritic => vr_cdcritic         -- CÓDIGO DO ERRO
                             ,pr_dscritic => vr_dscritic);       -- DESCRICAO DO ERRO

          -- VERIFICA SE HOUVE ERRO NA PROCEDURE PC_GERANDB
          IF vr_cdcritic > 0 THEN
            RAISE vr_exc_erro;
          END IF;

          BEGIN
            -- ATUALIZA REGISTROS DE LANCAMENTOS AUTOMATICOS
            UPDATE craplau
               SET insitlau = 3
                  ,dtdebito = rw_crapdat.dtmvtolt
                  ,cdcritic = vr_auxcdcri
            WHERE craplau.rowid = rw_craplau.rowid;

            -- VERIFICA SE HOUVE PROBLEMA NA ATUALIZAÇÃO DO REGISTRO
          EXCEPTION
            WHEN OTHERS THEN
              vr_dscritic := 'Erro ao atualizar registro na tabela CRAPLAU: ' || sqlerrm;
            RAISE vr_exc_erro;
          END;

          pr_cdcritic := vr_auxcdcri;
          pr_dscritic := vr_auxdscri;
        -- VERIFICA DATA FIM DA AUTORIZACAO
        -- Autorizacao cancelada
        ELSIF rw_crapatr.dtfimatr IS NOT NULL OR 
              rw_crapatr.dtfimsus >= rw_crapdat.dtmvtolt THEN

          -- ATRIBUI O CODIGO DA CRITICA
          vr_cdcritic := 447; -- AUTORIZACAO CANCELADA
          vr_dscritic := GENE0001.fn_busca_critica(pr_cdcritic => vr_cdcritic); -- BUSCA DESCRICAO DA CRITICA
          vr_auxcdcri := vr_cdcritic;
          vr_auxdscri := vr_dscritic;

          -- GERAR REGISTROS NA CRAPNDB PARA DEVOLUCAO DE DEBITOS AUTOMATICOS
          CONV0001.pc_gerandb(pr_cdcooper => pr_cdcooper         -- CÓDIGO DA COOPERATIVA
                             ,pr_cdhistor => rw_craplau.cdhistor -- CÓDIGO DO HISTÓRICO
                             ,pr_nrdconta => rw_craplau.nrdconta -- NUMERO DA CONTA
                             ,pr_cdrefere => rw_crapatr.cdrefere -- CÓDIGO DE REFERÊNCIA
                             ,pr_vllanaut => rw_craplau.vllanaut -- VALOR LANCAMENTO
                             ,pr_cdseqtel => rw_craplau.cdseqtel -- CÓDIGO SEQUENCIAL
                             ,pr_nrdocmto => rw_craplau.nrdocmto -- NÚMERO DO DOCUMENTO
                             ,pr_cdagesic => rw_crapcop.cdagesic -- AGÊNCIA SICREDI
                             ,pr_nrctacns => rw_crapass.nrctacns -- CONTA DO CONSÓRCIO
                             ,pr_cdagenci => rw_crapass.cdagenci -- CODIGO DO PA
                             ,pr_cdempres => rw_craplau.cdempres -- CODIGO EMPRESA SICREDI
                             ,pr_idlancto => rw_craplau.idlancto -- CÓDIGO DO LANCAMENTO
                             ,pr_codcriti => vr_auxcdcri         -- CÓDIGO DO ERRO
                             ,pr_cdcritic => vr_cdcritic         -- CÓDIGO DO ERRO
                             ,pr_dscritic => vr_dscritic);       -- DESCRICAO DO ERRO

          -- VERIFICA SE HOUVE ERRO NA PROCEDURE PC_GERANDB
          IF vr_cdcritic > 0 THEN
            RAISE vr_exc_erro;
          END IF;

          BEGIN
            -- ATUALIZA REGISTROS DE LANCAMENTOS AUTOMATICOS
            UPDATE craplau
               SET insitlau = 3
                  ,dtdebito = rw_crapdat.dtmvtolt
                  ,cdcritic = vr_auxcdcri
            WHERE craplau.rowid = rw_craplau.rowid;

            -- VERIFICA SE HOUVE PROBLEMA NA ATUALIZAÇÃO DO REGISTRO
          EXCEPTION
            WHEN OTHERS THEN
              vr_dscritic := 'Erro ao atualizar registro na tabela CRAPLAU: ' || sqlerrm;
            RAISE vr_exc_erro;
          END;

          pr_cdcritic := vr_auxcdcri;
          pr_dscritic := vr_auxdscri;
        
        -- Valor limite débito automatico excedido
        ELSIF rw_crapatr.flgmaxdb = 1
		  AND rw_craplau.vllanaut > rw_crapatr.vlrmaxdb THEN
									
              vr_cdcritic := 967;                                                   -- Limite ultrapassado.
              vr_dscritic := GENE0001.fn_busca_critica(pr_cdcritic => vr_cdcritic); -- BUSCA DESCRICAO DA CRITICA
              vr_auxcdcri := vr_cdcritic;
              vr_auxdscri := vr_dscritic;
                   
          -- Se for a primeira tentativa apenas grava a mensagem para o cooperado
          --IF vr_qtdexec < 3 THEN
          IF vr_flultexe <> 1 THEN --- Se não for a última execução -- Projeto Debitador		  
            -- VARIAVEIS AUXILIARES DE ERRO, PARA NAO PERDER INFORMACAO ATE O MOMENTO
            pr_cdcritic := vr_auxcdcri;
            pr_dscritic := vr_auxdscri;
			
			BEGIN
            -- ATUALIZA CRITICA VALOR LIMITE EXCEDIDO
            UPDATE craplau
               SET cdcritic = vr_auxcdcri
            WHERE craplau.rowid = rw_craplau.rowid;

            -- VERIFICA SE HOUVE PROBLEMA NA ATUALIZAÇÃO DO REGISTRO
			  EXCEPTION
				WHEN OTHERS THEN
				  vr_dscritic := 'Erro ao atualizar registro na tabela CRAPLAU: ' || sqlerrm;
				RAISE vr_exc_erro;
			  END;
              
            OPEN cr_gnconve (rw_craplau.cdhistor);
            FETCH cr_gnconve INTO rw_gnconve;
            
            -- Gera a mensagem e insere na crapmsg (Mensagens do InternetBank)
            IF cr_gnconve%FOUND THEN
              
              -- Notifica o cooperado via mensagem do internetbank e SMS
              sicr0001.pc_notif_cooperado_debaut(pr_cdcritic      => vr_auxcdcri -- 967 - Limite ultrapassado.
                                                ,pr_cdcooper      => pr_cdcooper
                                                ,pr_nmrescop      => rw_crapcop.nmrescop
                                                ,pr_cdprogra      => pr_nmdatela
                                                ,pr_nrdconta      => rw_craplau.nrdconta
                                                ,pr_nrdocmto      => rw_craplau.nrdocmto
                                                ,pr_nmconven      => rw_gnconve.nmempres
                                                ,pr_dtmvtopg      => rw_craplau.dtmvtopg
                                                ,pr_vllanaut      => rw_craplau.vllanaut
                                                ,pr_vlrmaxdb      => rw_crapatr.vlrmaxdb
                                                ,pr_cdrefere      => rw_crapatr.cdrefere
                                                ,pr_cdhistor      => rw_crapatr.cdhistor
                                                ,pr_tpdnotif      => 1 --> Apenas MSG IBank
                                                ,pr_flfechar_lote => 0 -- Sempre fecha o lote a cada SMS
                                                ,pr_idlote_sms    => vr_idlote_sms
                                                );
            
            ELSE
              vr_cdcritic := 882;                                                   -- CONVENIO CECRED NAO ENCONTRADO
              vr_dscritic := GENE0001.fn_busca_critica(pr_cdcritic => vr_cdcritic); -- BUSCA DESCRICAO DA CRITICA
                
            END IF;
            CLOSE cr_gnconve;
          	          
          --> Se for a ultima tentativa
          ELSIF vr_flultexe = 1 THEN
              -- GERAR REGISTROS NA CRAPNDB PARA DEVOLUCAO DE DEBITOS AUTOMATICOS
            CONV0001.pc_gerandb  (pr_cdcooper => pr_cdcooper         -- CÓDIGO DA COOPERATIVA
                                 ,pr_cdhistor => rw_craplau.cdhistor -- CÓDIGO DO HISTÓRICO
                                 ,pr_nrdconta => rw_craplau.nrdconta -- NUMERO DA CONTA
                                 ,pr_cdrefere => rw_crapatr.cdrefere -- CÓDIGO DE REFERÊNCIA
                                 ,pr_vllanaut => rw_craplau.vllanaut -- VALOR LANCAMENTO
                                 ,pr_cdseqtel => rw_craplau.cdseqtel -- CÓDIGO SEQUENCIAL
                                 ,pr_nrdocmto => rw_craplau.nrdocmto -- NÚMERO DO DOCUMENTO
                                 ,pr_cdagesic => rw_crapcop.cdagesic -- AGÊNCIA SICREDI
                                 ,pr_nrctacns => rw_crapass.nrctacns -- CONTA DO CONSÓRCIO
                                 ,pr_cdagenci => rw_crapass.cdagenci -- CODIGO DO PA
                                 ,pr_cdempres => rw_craplau.cdempres -- CODIGO SICREDI
                                 ,pr_idlancto => rw_craplau.idlancto -- CÓDIGO DO LANCAMENTO
                                 ,pr_codcriti => vr_auxcdcri         -- CÓDIGO DO ERRO
                                 ,pr_cdcritic => vr_cdcritic         -- CÓDIGO DO ERRO
                                 ,pr_dscritic => vr_dscritic);       -- DESCRICAO DO ERRO

              -- VERIFICA SE HOUVE ERRO NA PROCEDURE PC_GERANDB
              IF vr_cdcritic > 0 THEN
                RAISE vr_exc_erro;
              END IF;
              
              BEGIN
                -- ATUALIZA REGISTROS DE LANCAMENTOS AUTOMATICOS
                UPDATE craplau
                   SET insitlau = 3
                      ,dtdebito = rw_crapdat.dtmvtolt
                      ,cdcritic = NVL(vr_auxcdcri, 0)
                 WHERE craplau.rowid = rw_craplau.rowid;

              -- VERIFICA SE HOUVE PROBLEMA NA ATUALIZAÇÃO DO REGISTRO
              EXCEPTION
                WHEN OTHERS THEN
                  vr_dscritic := 'Problema ao atualizar registro na tabela CRAPLAU: ' || sqlerrm;
                  RAISE vr_exc_erro;
              END;                  
                    
              pr_cdcritic := vr_auxcdcri;
              pr_dscritic := vr_auxdscri;
              
            END IF;
              
        -- lançamento bloqueado
        ELSIF rw_craplau.flgblqdb = 1 THEN
          vr_cdcritic := 964;                                                   -- Lancamento bloqueado
          vr_dscritic := GENE0001.fn_busca_critica(pr_cdcritic => vr_cdcritic); -- BUSCA DESCRICAO DA CRITICA
          vr_auxcdcri := vr_cdcritic;
          vr_auxdscri := vr_dscritic;

          --> Apenas gerar critica na ultima tentativa
          IF vr_flultexe = 1 THEN
          -- GERAR REGISTROS NA CRAPNDB PARA DEVOLUCAO DE DEBITOS AUTOMATICOS
          CONV0001.pc_gerandb(pr_cdcooper => pr_cdcooper         -- CÓDIGO DA COOPERATIVA
                             ,pr_cdhistor => rw_craplau.cdhistor -- CÓDIGO DO HISTÓRICO
                             ,pr_nrdconta => rw_craplau.nrdconta -- NUMERO DA CONTA
                             ,pr_cdrefere => rw_crapatr.cdrefere -- CÓDIGO DE REFERÊNCIA
                             ,pr_vllanaut => rw_craplau.vllanaut -- VALOR LANCAMENTO
                             ,pr_cdseqtel => rw_craplau.cdseqtel -- CÓDIGO SEQUENCIAL
                             ,pr_nrdocmto => rw_craplau.nrdocmto -- NÚMERO DO DOCUMENTO
                             ,pr_cdagesic => rw_crapcop.cdagesic -- AGÊNCIA SICREDI
                             ,pr_nrctacns => rw_crapass.nrctacns -- CONTA DO CONSÓRCIO
                             ,pr_cdagenci => rw_crapass.cdagenci -- CODIGO DO PA
                             ,pr_cdempres => rw_craplau.cdempres -- CODIGO EMPRESA SICREDI
                             ,pr_idlancto => rw_craplau.idlancto -- CÓDIGO DO LANCAMENTO
                             ,pr_codcriti => vr_auxcdcri         -- CÓDIGO DO ERRO
                             ,pr_cdcritic => vr_cdcritic         -- CÓDIGO DO ERRO
                             ,pr_dscritic => vr_dscritic);       -- DESCRICAO DO ERRO

          -- VERIFICA SE HOUVE ERRO NA PROCEDURE PC_GERANDB
          IF vr_cdcritic > 0 THEN
            RAISE vr_exc_erro;
          END IF;

          BEGIN
            -- ATUALIZA REGISTROS DE LANCAMENTOS AUTOMATICOS
            UPDATE craplau
               SET insitlau = 3
                  ,dtdebito = rw_crapdat.dtmvtolt
                  ,cdcritic = vr_auxcdcri
            WHERE craplau.rowid = rw_craplau.rowid;

            -- VERIFICA SE HOUVE PROBLEMA NA ATUALIZAÇÃO DO REGISTRO
          EXCEPTION
            WHEN OTHERS THEN
              vr_dscritic := 'Erro ao atualizar registro na tabela CRAPLAU: ' || sqlerrm;
            RAISE vr_exc_erro;
          END;          
          
		  -- Se for a primeira tentativa apenas grava critica
          --ELSIF vr_qtdexec < 3 THEN
          ELSIF vr_flultexe <> 1 THEN --- Se não for a última execução -- Projeto Debitador		  
            BEGIN
              -- ATUALIZA REGISTROS DE LANCAMENTOS AUTOMATICOS
              UPDATE craplau
                 SET cdcritic = vr_auxcdcri
               WHERE craplau.rowid = rw_craplau.rowid;

              -- VERIFICA SE HOUVE PROBLEMA NA ATUALIZAÇÃO DO REGISTRO
            EXCEPTION
              WHEN OTHERS THEN
                vr_dscritic := 'Erro ao atualizar registro na tabela CRAPLAU: ' ||
                               SQLERRM;
            RAISE vr_exc_erro;
          END;
          END IF;

          pr_cdcritic := vr_auxcdcri;
          pr_dscritic := vr_auxdscri;
        
        --Se o saldo for insuficiente
        ELSIF rw_craplau.vllanaut > (vr_tab_saldo(vr_indsaldo).vlsddisp + vr_tab_saldo(vr_indsaldo).vllimcre) THEN
          vr_cdcritic := 717; -- Nao ha saldo suficiente para a operacao
          vr_dscritic := GENE0001.fn_busca_critica(pr_cdcritic => vr_cdcritic); -- BUSCA DESCRICAO DA CRITICA
          vr_auxcdcri := vr_cdcritic;
          vr_auxdscri := vr_dscritic;
          
          -- Se for a primeira tentativa apenas grava a mensagem para o cooperado
          --IF vr_qtdexec < 3 THEN
          IF vr_flultexe <> 1 THEN --- Se não for a última execução -- Projeto Debitador
            -- Se for a primeira tentativa / Saldo Insuficiente
            BEGIN
              -- ATUALIZA REGISTROS DE LANCAMENTOS AUTOMATICOS
              UPDATE craplau
                 SET cdcritic = vr_auxcdcri
               WHERE craplau.rowid = rw_craplau.rowid;

              -- VERIFICA SE HOUVE PROBLEMA NA ATUALIZAÇÃO DO REGISTRO
            EXCEPTION
              WHEN OTHERS THEN
                vr_dscritic := 'Erro ao atualizar registro na tabela CRAPLAU: ' ||
                               SQLERRM;
                RAISE vr_exc_erro;
            END;

            OPEN cr_gnconve (rw_craplau.cdhistor);
            FETCH cr_gnconve INTO rw_gnconve;
             
            IF cr_gnconve%FOUND THEN
              IF rw_gnconve.flgdbssd = 0 THEN
              
                ---> Notificar critica ao cooperado via mensagens do internetbank e/ou SMS 
                sicr0001.pc_notif_cooperado_debaut(pr_cdcritic      => vr_auxcdcri -- 717 - Nao ha saldo suficiente para a operacao
                                                  ,pr_cdcooper      => pr_cdcooper
                                                  ,pr_nmrescop      => rw_crapcop.nmrescop
                                                  ,pr_cdprogra      => pr_nmdatela
                                                  ,pr_nrdconta      => rw_craplau.nrdconta
                                                  ,pr_nrdocmto      => rw_craplau.nrdocmto
                                                  ,pr_nmconven      => rw_gnconve.nmempres
                                                  ,pr_dtmvtopg      => rw_craplau.dtmvtopg
                                                  ,pr_vllanaut      => rw_craplau.vllanaut
                                                  ,pr_vlrmaxdb      => rw_crapatr.vlrmaxdb
                                                  ,pr_cdrefere      => rw_crapatr.cdrefere
                                                  ,pr_cdhistor      => rw_crapatr.cdhistor
                                                  ,pr_flfechar_lote => 0 -- Sempre fecha o lote a cada SMS
                                                  ,pr_idlote_sms    => vr_idlote_sms
                                                  );
              END IF;
            ELSE
              vr_cdcritic := 882;                                                   -- CONVENIO CECRED NAO ENCONTRADO
              vr_dscritic := GENE0001.fn_busca_critica(pr_cdcritic => vr_cdcritic); -- BUSCA DESCRICAO DA CRITICA
              
            END IF;
            CLOSE cr_gnconve;

          ELSE

            -- GERAR REGISTROS NA CRAPNDB PARA DEVOLUCAO DE DEBITOS AUTOMATICOS
            CONV0001.pc_gerandb(pr_cdcooper => pr_cdcooper         -- CÓDIGO DA COOPERATIVA
                               ,pr_cdhistor => rw_craplau.cdhistor -- CÓDIGO DO HISTÓRICO
                               ,pr_nrdconta => rw_craplau.nrdconta -- NUMERO DA CONTA
                               ,pr_cdrefere => rw_crapatr.cdrefere -- CÓDIGO DE REFERÊNCIA
                               ,pr_vllanaut => rw_craplau.vllanaut -- VALOR LANCAMENTO
                               ,pr_cdseqtel => rw_craplau.cdseqtel -- CÓDIGO SEQUENCIAL
                               ,pr_nrdocmto => rw_craplau.nrdocmto -- NÚMERO DO DOCUMENTO
                               ,pr_cdagesic => rw_crapcop.cdagesic -- AGÊNCIA SICREDI
                               ,pr_nrctacns => rw_crapass.nrctacns -- CONTA DO CONSÓRCIO
                               ,pr_cdagenci => rw_crapass.cdagenci -- CODIGO DO PA
                               ,pr_cdempres => rw_craplau.cdempres -- CODIGO EMPRESA SICREDI
                               ,pr_idlancto => rw_craplau.idlancto -- CÓDIGO DO LANCAMENTO
                               ,pr_codcriti => vr_auxcdcri         -- CÓDIGO DO ERRO
                               ,pr_cdcritic => vr_cdcritic         -- CÓDIGO DO ERRO
                               ,pr_dscritic => vr_dscritic);       -- DESCRICAO DO ERRO

            -- VERIFICA SE HOUVE ERRO NA PROCEDURE PC_GERANDB
            IF vr_cdcritic > 0 THEN
              RAISE vr_exc_erro;
            END IF;

            BEGIN
              -- ATUALIZA REGISTROS DE LANCAMENTOS AUTOMATICOS
              UPDATE craplau
                 SET insitlau = 3
                    ,dtdebito = rw_crapdat.dtmvtolt
                    ,cdcritic = vr_auxcdcri
              WHERE craplau.rowid = rw_craplau.rowid;

              -- VERIFICA SE HOUVE PROBLEMA NA ATUALIZAÇÃO DO REGISTRO
            EXCEPTION
              WHEN OTHERS THEN
                vr_dscritic := 'Erro ao atualizar registro na tabela CRAPLAU: ' || sqlerrm;
              RAISE vr_exc_erro;
            END;
          END IF;  
          
          pr_cdcritic := vr_auxcdcri;
          pr_dscritic := vr_auxdscri;
          
        ELSE
          -- Possui saldo; entao realiza o debito

          -- PA
          vr_cdagenci := rw_craplau.cdagenci;
          -- Lote
          vr_nrdolote := 7050;
          -- Conta cooperado
          vr_nrdconta := rw_craplau.nrdconta;

          vr_nrdocmto := rw_craplau.nrdocmto;

          vr_cdbccxlt := rw_craplau.cdbccxlt;

		  vr_nrseqdig := fn_sequence('CRAPLOT'
									,'NRSEQDIG'
									,''||pr_cdcooper||';'
									   ||to_char(pr_dtmvtolt,'DD/MM/RRRR')||';'
									   ||vr_cdagenci||';'
									   ||vr_cdbccxlt||';'
									   ||vr_nrdolote); 

          -- Buscar lote
          /*[PROJETO LIGEIRINHO] Esta função retorna verdadeiro, quando o processo foi iniciado pela rotina:
           PAGA0001.pc_efetua_debitos_paralelo, que é chamada na rotina PC_CRPS509. Tem por finalidade definir
           se grava na tabela CRAPLOT no momento em que esta rodando a esta rotina OU somente no final da execucação
           da PC_CRPS509, para evitar o erro de lock da tabela, pois esta gravando a agencia 90,91 ou 1 ao inves de gravar
           a agencia do cooperado*/
          if not fn_exec_paralelo then
          OPEN cr_craplot(pr_cdcooper => pr_cdcooper,
                          pr_dtmvtolt => pr_dtmvtolt,
                          pr_cdagenci => vr_cdagenci,
                          pr_cdbccxlt => vr_cdbccxlt,
                          pr_nrdolote => vr_nrdolote);
          FETCH cr_craplot INTO rw_craplot;

          -- Verificar se lote existe
          IF cr_craplot%NOTFOUND THEN
            BEGIN
              -- criar registros de lote na tabela
              INSERT INTO craplot
                (dtmvtolt
                ,cdagenci
                ,cdbccxlt
                ,nrdolote
                ,cdbccxpg
                ,tplotmov
                ,cdcooper)
              VALUES
                (pr_dtmvtolt
                ,vr_cdagenci
                ,vr_cdbccxlt
                ,vr_nrdolote
                ,11  --cdbccxpg
                ,1   --tplotmov
                ,pr_cdcooper)
              RETURNING ROWID,
                        craplot.dtmvtolt,
                        craplot.cdagenci,
                        craplot.cdbccxlt,
                        craplot.nrdolote,
                        craplot.nrseqdig
                        INTO
                        rw_craplot.rowid,
                        rw_craplot.dtmvtolt,
                        rw_craplot.cdagenci,
                        rw_craplot.cdbccxlt,
                        rw_craplot.nrdolote,
                        rw_craplot.nrseqdig;
            EXCEPTION
              WHEN OTHERS THEN
                -- Fechar cursor de lote
                CLOSE cr_craplot;
                -- se ocorreu algum erro durante a criação
                vr_dscritic := 'Erro ao inserir craplot: '||SQLERRM;
              RAISE vr_exc_erro;
            END;
             
          END IF;
          -- Fechar cursor de lote
          CLOSE cr_craplot;
          else
           
            pc_insere_lote_wrk (pr_cdcooper => pr_cdcooper,
                                pr_dtmvtolt => pr_dtmvtolt,
                                pr_cdagenci => vr_cdagenci,
                                pr_cdbccxlt => vr_cdbccxlt,
                                pr_nrdolote => vr_nrdolote,
                                pr_cdoperad => NULL,
                                pr_nrdcaixa => NULL,
                                pr_tplotmov => 1,
                                pr_cdhistor => NULL,
                                pr_cdbccxpg => 11,
                                pr_nmrotina => 'PC_DEBITA_CONVENIO_CECRED');
        
             rw_craplot.cdcooper := pr_cdcooper;                   
             rw_craplot.dtmvtolt := pr_dtmvtolt;                  
             rw_craplot.cdagenci := vr_cdagenci;                   
             rw_craplot.cdbccxlt := vr_cdbccxlt;                  
             rw_craplot.nrdolote := vr_nrdolote;                   
             rw_craplot.cdoperad := NULL;                                   
             
          end if;
          LOOP
            IF cr_craplcm%ISOPEN THEN
              CLOSE cr_craplcm;
            END IF;
            -- verificar existencia de lançamento
            OPEN cr_craplcm (pr_cdcooper => pr_cdcooper
                            ,pr_dtmvtolt => pr_dtmvtolt
                            ,pr_cdagenci => vr_cdagenci
                            ,pr_cdbccxlt => vr_cdbccxlt
                            ,pr_nrdolote => vr_nrdolote
                            ,pr_nrdconta => vr_nrdconta
                            ,pr_nrdocmto => vr_nrdocmto);
            FETCH cr_craplcm INTO rw_craplcm;
            -- se existir lançamento então o numero do documento eh incrementado
            IF cr_craplcm%FOUND THEN
              vr_nrdocmto := vr_nrdocmto + 100000000;
              CONTINUE;
            END IF;
            CLOSE cr_craplcm;
            EXIT;
          END LOOP;

          ---> Gerar autenticação do pagamento
          CXON0000.pc_grava_autenticacao_internet 
                            (pr_cooper       => rw_craplau.cdcooper
                            ,pr_nrdconta     => vr_nrdconta
                            ,pr_idseqttl     => rw_craplau.idseqttl          --Sequencial do titular
                            ,pr_cod_agencia  => rw_craplau.cdagenci  --Codigo Agencia
                            ,pr_nro_caixa    => 900                  --Numero do caixa
                            ,pr_cod_operador => 996                  --Codigo Operador

                            ,pr_valor        => rw_craplau.vllanaut  --Valor da transacao
                            ,pr_docto        => vr_nrdocmto          --Numero documento
                            ,pr_operacao     => TRUE                 --Indicador Operacao Debito
                            ,pr_status       => '1'                  --Status da Operacao - Online
                            ,pr_estorno      => FALSE                --Indicador Estorno
                            ,pr_histor       => rw_craplau.cdhistor  --Historico Debito (Sicredi é 1019 pode passar fixo)

                            ,pr_data_off     => NULL            --Data Transacao
                            ,pr_sequen_off   => 0               --Sequencia
                            ,pr_hora_off     => 0               --Hora transacao
                            ,pr_seq_aut_off  => 0               --Sequencia automatica
                            ,pr_cdempres     => NULL            --Descricao Observacao

                            ,pr_literal      => vr_dslitera     --Descricao literal lcm
                            ,pr_sequencia    => vr_nrautdoc     --Sequencia
                            ,pr_registro     => vr_nrdrecid     --ROWID do registro debito
                            ,pr_cdcritic     => vr_cdcritic     --Código do erro
                            ,pr_dscritic     => vr_dscritic);   --Descricao do erro
          
          --Se ocorreu erro
          IF NVL(vr_cdcritic,0) <> 0
          OR TRIM(vr_dscritic) IS NOT NULL THEN
            ROLLBACK;
            pc_nao_efetivado(pr_cdcooper  => rw_craplau.cdcooper
                            ,pr_flultexe  => vr_flultexe
                            ,pr_rwcraplau => rw_craplau
                            ,pr_cdagesic  => rw_crapcop.cdagesic
                            ,pr_nrctacns  => rw_crapass.nrctacns
                            ,pr_cdcritic  => vr_auxcdcri
                            ,pr_dscritic  => vr_auxdscri);
                            
            IF vr_auxcdcri > 0 OR
               TRIM(vr_auxdscri) IS NOT NULL THEN 
                   
               IF vr_auxcdcri > 0 THEN
                  vr_dscritic := GENE0001.fn_busca_critica(pr_cdcritic => vr_auxcdcri); -- BUSCA DESCRICAO DA CRITICA
               ELSE
                  vr_dscritic := vr_auxdscri;
               END IF;
               RAISE vr_exc_erro;
            END IF;                            
                                
            vr_cdcritic:= 0;
            vr_dscritic:= 'Erro na autenticacao do pagamento: '||vr_dscritic;
            RAISE vr_exc_erro;
          END IF;  

          -- cria registro na tabela de lançamentos
          lanc0001.pc_gerar_lancamento_conta(
                pr_cdcooper => pr_cdcooper
               ,pr_dtmvtolt => rw_craplot.dtmvtolt
               ,pr_cdagenci => rw_craplot.cdagenci
               ,pr_cdbccxlt => rw_craplot.cdbccxlt
               ,pr_nrdolote => rw_craplot.nrdolote
               ,pr_nrdctabb => rw_craplau.nrdctabb
               ,pr_nrdocmto => vr_nrdocmto
               ,pr_vllanmto => rw_craplau.vllanaut
               ,pr_nrdconta => vr_nrdconta
               ,pr_cdhistor => rw_craplau.cdhistor
               ,pr_nrseqdig => vr_nrseqdig
               ,pr_nrdctitg => rw_craplau.nrdctabb
               ,pr_nrautdoc => vr_nrautdoc
               ,pr_cdpesqbb => 'Lote ' || to_char(rw_craplau.dtmvtolt, 'dd')              || '/' ||
                          to_char(rw_craplau.dtmvtolt, 'mm')              || '-' ||
                          GENE0002.fn_mask(vr_cdagenci, '999')            || '-' ||
                          GENE0002.fn_mask(rw_craplau.cdbccxlt, '999')    || '-' ||
                          GENE0002.fn_mask(rw_craplau.nrdolote, '999999') || '-' ||
                          GENE0002.fn_mask(rw_craplau.nrseqdig, '99999')  || '-' ||
                        rw_craplau.nrdocmto
               ,pr_tab_retorno => vr_tab_retorno
               ,pr_incrineg => vr_incrineg
               ,pr_cdcritic => vr_cdcritic
               ,pr_dscritic => vr_dscritic
               );
               
              
          IF nvl(vr_cdcritic,0) > 0 OR 
            trim(vr_dscritic) IS NOT NULL THEN
                                
              ROLLBACK;
              pc_nao_efetivado(pr_cdcooper  => pr_cdcooper
                              ,pr_flultexe  => vr_flultexe
                              ,pr_rwcraplau => rw_craplau
                              ,pr_cdagesic  => rw_crapcop.cdagesic
                              ,pr_nrctacns  => rw_crapass.nrctacns
                              ,pr_cdcritic  => vr_auxcdcri
                              ,pr_dscritic  => vr_auxdscri);
                              
              IF vr_auxcdcri > 0 OR
                 TRIM(vr_auxdscri) IS NOT NULL THEN 
                     
                 IF vr_auxcdcri > 0 THEN
                    vr_dscritic := GENE0001.fn_busca_critica(pr_cdcritic => vr_auxcdcri); -- BUSCA DESCRICAO DA CRITICA
                 ELSE
                    vr_dscritic := vr_auxdscri;
                 END IF;
                 RAISE vr_exc_erro;
              END IF;                            
              
              RAISE vr_exc_erro;
          END IF;

          

          -- Atualiza registro de Lançamento Automático
          BEGIN
            UPDATE craplau
               SET insitlau = 2
                  ,nrseqlan = rw_craplau.nrseqdig
                  ,dtdebito = rw_crapdat.dtmvtolt
                WHERE ROWID = rw_craplau.rowid;
          EXCEPTION
            WHEN OTHERS THEN
              ROLLBACK;
              pc_nao_efetivado(pr_cdcooper  => rw_craplau.cdcooper
                              ,pr_flultexe  => vr_flultexe
                              ,pr_rwcraplau => rw_craplau
                              ,pr_cdagesic  => rw_crapcop.cdagesic
                              ,pr_nrctacns  => rw_crapass.nrctacns
                              ,pr_cdcritic  => vr_auxcdcri
                              ,pr_dscritic  => vr_auxdscri);
                              
              IF vr_auxcdcri > 0 OR
                 TRIM(vr_auxdscri) IS NOT NULL THEN 
                     
                 IF vr_auxcdcri > 0 THEN
                    vr_dscritic := GENE0001.fn_busca_critica(pr_cdcritic => vr_auxcdcri); -- BUSCA DESCRICAO DA CRITICA
                 ELSE
                    vr_dscritic := vr_auxdscri;
                 END IF;
                 RAISE vr_exc_erro;
              END IF;                            
              
              vr_dscritic := 'Erro ao atualizar craplau: '||SQLERRM;
              RAISE vr_exc_erro;
          END;
          
          BEGIN
            -- ATUALIZA CADASTRO DAS AUTORIZACOES DE DEBITO EM CONTA
            UPDATE crapatr
               SET dtultdeb = pr_dtmvtolt -- ATUALIZA DATA DO ULTIMO DEBITO
             WHERE ROWID = rw_crapatr.rowid;
            -- VERIFICA SE HOUVE PROBLEMA NA ATUALIZAÇÃO DO REGISTRO
          EXCEPTION
            WHEN OTHERS THEN
              ROLLBACK;
              pc_nao_efetivado(pr_cdcooper  => rw_craplau.cdcooper
                              ,pr_flultexe  => vr_flultexe
                              ,pr_rwcraplau => rw_craplau
                              ,pr_cdagesic  => rw_crapcop.cdagesic
                              ,pr_nrctacns  => rw_crapass.nrctacns
                              ,pr_cdcritic  => vr_auxcdcri
                              ,pr_dscritic  => vr_auxdscri);
                              
              IF vr_auxcdcri > 0 OR
                 TRIM(vr_auxdscri) IS NOT NULL THEN 
                     
                 IF vr_auxcdcri > 0 THEN
                    vr_dscritic := GENE0001.fn_busca_critica(pr_cdcritic => vr_auxcdcri); -- BUSCA DESCRICAO DA CRITICA
                 ELSE
                    vr_dscritic := vr_auxdscri;
                 END IF;
                 RAISE vr_exc_erro;
              END IF;                            
              
              vr_dscritic := 'Problema ao atualizar registro na tabela CRAPATR: ' || sqlerrm;
              RAISE vr_exc_erro;
          END;
          
          -- GERAR PROTOCOLO
          -->Campos gravados na crappro para visualizacao na internet
            OPEN cr_gnconve (rw_craplau.cdhistor);
              FETCH cr_gnconve INTO rw_gnconve;
            CLOSE cr_gnconve;

            vr_dsinfor1 := 'Pagamento';
            vr_dsinfor2 := ' ';
            vr_dsinfor3 := 'Convênio: '||rw_gnconve.nmempres||
                           '#Número Identificador:'||rw_crapatr.cdrefere ||'#'|| rw_crapatr.dshisext;

            --> Se TAA 
            IF rw_craplau.dsorigem= 'TAA' THEN
              vr_dsinfor3:= vr_dsinfor3 ||'#TAA: '||gene0002.fn_mask(rw_craplau.cdcoptfn,'9999')||'/'||
                                                    gene0002.fn_mask(rw_craplau.cdagetfn,'9999')||'/'||
                                                    gene0002.fn_mask(rw_craplau.nrterfin,'9999');
            END IF;
            
            --> Gera um protocolo para o pagamento
            GENE0006.pc_gera_protocolo(pr_cdcooper => rw_craplau.cdcooper  --> Código da cooperativa
                                      ,pr_dtmvtolt => rw_craplot.dtmvtolt  --> Data movimento
                                      ,pr_hrtransa => gene0002.fn_busca_time --> Hora da transação
                                      ,pr_nrdconta => rw_craplau.nrdconta  --> Número da conta
                                      ,pr_nrdocmto => vr_nrdocmto          --> Número do documento
                                      ,pr_nrseqaut => vr_nrautdoc          --> Número da sequencia
                                      ,pr_vllanmto => rw_craplau.vllanaut  --> Valor lançamento
                                      ,pr_nrdcaixa => 900                  --> Número do caixa
                                      ,pr_gravapro => TRUE                 --> Controle de gravação do crappro
                                      ,pr_cdtippro => 15 -- convenio       --> Código do tipo protocolo
                                      ,pr_dsinfor1 => vr_dsinfor1          --> Descrição 1
                                      ,pr_dsinfor2 => vr_dsinfor2          --> Descrição 2
                                      ,pr_dsinfor3 => vr_dsinfor3          --> Descrição 3
                                      ,pr_dscedent => rw_gnconve.nmempres  --> Descritivo Cedente
                                      ,pr_flgagend => FALSE                --> Controle de agenda
                                      ,pr_nrcpfope => rw_craplau.nrcpfope  --> Número de operação
                                      ,pr_nrcpfpre => rw_craplau.nrcpfpre  --> Número pré operação
                                      ,pr_nmprepos => rw_craplau.nmprepos  --> Nome
                                      ,pr_dsprotoc => vr_dsprotoc          --> Descrição do protocolo
                                      ,pr_dscritic => vr_dscritic          --> Descrição crítica
                                      ,pr_des_erro => vr_des_erro);        --> Descrição dos erros de processo
            --Se ocorreu erro
            IF vr_dscritic IS NOT NULL OR vr_des_erro IS NOT NULL THEN
              ROLLBACK;
              pc_nao_efetivado(pr_cdcooper  => rw_craplau.cdcooper
                              ,pr_flultexe  => vr_flultexe
                              ,pr_rwcraplau => rw_craplau
                              ,pr_cdagesic  => rw_crapcop.cdagesic
                              ,pr_nrctacns  => rw_crapass.nrctacns
                              ,pr_cdcritic  => vr_auxcdcri
                              ,pr_dscritic  => vr_auxdscri);
                              
              IF vr_auxcdcri > 0 OR
                 TRIM(vr_auxdscri) IS NOT NULL THEN 
                     
                 IF vr_auxcdcri > 0 THEN
                    vr_dscritic := GENE0001.fn_busca_critica(pr_cdcritic => vr_auxcdcri); -- BUSCA DESCRICAO DA CRITICA
                 ELSE
                    vr_dscritic := vr_auxdscri;
                 END IF;
                 RAISE vr_exc_erro;
              END IF;                            
              
              --Levantar Excecao
              RAISE vr_exc_erro;
            END IF;
            
            --> Armazena protocolo na autenticacao 
            BEGIN
              UPDATE crapaut 
                 SET crapaut.dsprotoc = vr_dsprotoc
               WHERE crapaut.ROWID = vr_nrdrecid;
            EXCEPTION
              WHEN OTHERS THEN
                ROLLBACK;
                pc_nao_efetivado(pr_cdcooper  => rw_craplau.cdcooper
                                ,pr_flultexe  => vr_flultexe
                                ,pr_rwcraplau => rw_craplau
                                ,pr_cdagesic  => rw_crapcop.cdagesic
                                ,pr_nrctacns  => rw_crapass.nrctacns
                                ,pr_cdcritic  => vr_auxcdcri
                                ,pr_dscritic  => vr_auxdscri);
                                
                IF vr_auxcdcri > 0 OR
                   TRIM(vr_auxdscri) IS NOT NULL THEN 
                       
                   IF vr_auxcdcri > 0 THEN
                      vr_dscritic := GENE0001.fn_busca_critica(pr_cdcritic => vr_auxcdcri); -- BUSCA DESCRICAO DA CRITICA
                   ELSE
                      vr_dscritic := vr_auxdscri;
                   END IF;
                   RAISE vr_exc_erro;
                END IF;                            
                
              vr_cdcritic:= 0;
              vr_dscritic:= 'Erro ao atualizar registro da autenticacao. '||sqlerrm;
              --Levantar Excecao
              RAISE vr_exc_erro;
            END;
        END IF;
      END IF;
    EXCEPTION
      WHEN vr_exc_erro THEN
        -- retorna erro tratado
        pr_cdcritic := vr_cdcritic;
        pr_dscritic := vr_dscritic;

      WHEN OTHERS THEN
        -- Retorna o erro não tratado
        pr_cdcritic := 0;
        pr_dscritic := 'Erro não tratado em PAGA0001.pc_debita_convenio_cecred --> '||SQLERRM;
    END;

  END pc_debita_convenio_cecred;

  /* Procedure para obter agendamento debitos */
  PROCEDURE pc_PAGA0001_obtem_agen_deb(pr_cdcooper  IN crapcop.cdcooper%TYPE -- Cooperativa
                                      ,pr_dtmvtopg  IN crapdat.dtmvtolt%TYPE -- Data de pagamento
                                      ,pr_inproces  IN crapdat.inproces%TYPE -- Indicador processo
                                      ,pr_clobxmlc OUT CLOB                  -- XML com informações dos agendamentos
                                      ,pr_cdcritic OUT INTEGER               -- Codigo da Critica
                                      ,pr_dscritic OUT VARCHAR2) IS          -- Descricao da critica
    -- ..........................................................................
    --  Programa : pc_PAGA0001_obtem_agen_deb
    --  Sistema  : Rotinas Internet
    --  Sigla    : CRED
    --  Autor    : Douglas Quisinski
    --  Data     : Julho/2015                    Ultima atualizacao: 07/07/2016
    --
    --  Dados referentes ao programa:
    --
    --  Frequencia: Sempre que for chamado
    --  Objetivo  : Chamar a procedure pc_obtem_agend_debitos pelo Progress
    --
    --  Alteracoes: 07/07/2016 - Alterar parametro cdprogra para passar 'DEBNET' ao
    --                           inves de passar NULL (Lucas Ranghetti #483791)
    -----------------------------------------------------------------------------
  BEGIN
    DECLARE
      -- Indice dos agendamentos
      vr_index    VARCHAR2(300);

      -- Variável de críticas
      vr_cdcritic crapcri.cdcritic%TYPE;
      vr_dscritic VARCHAR2(10000);

      -- Tratamento de erros
      vr_exc_saida EXCEPTION;

      -- Variaveis de XML
      vr_xml_temp VARCHAR2(32767);

      -- Temp table para agendamentos
      vr_tab_agendto PAGA0001.typ_tab_agendto;
    BEGIN

      -- Carregar as informações dos agendamentos da cooperativa
      PAGA0001.pc_obtem_agend_debitos(pr_cdcooper    => pr_cdcooper,
                                      pr_dtmvtopg    => pr_dtmvtopg,
                                      pr_inproces    => pr_inproces,
                                      pr_cdprogra    => 'DEBNET',
                                      pr_tab_agendto => vr_tab_agendto,
                                      pr_cdcritic    => vr_cdcritic,
                                      pr_dscritic    => vr_dscritic);

      -- Se retornou alguma critica
      IF vr_cdcritic <> 0 OR TRIM(vr_dscritic) IS NOT NULL THEN
        RAISE vr_exc_saida;
      END IF;

      -- Criar documento XML
      dbms_lob.createtemporary(pr_clobxmlc, TRUE);
      dbms_lob.open(pr_clobxmlc, dbms_lob.lob_readwrite);

      -- Insere o cabeçalho do XML
      gene0002.pc_escreve_xml(pr_xml            => pr_clobxmlc,
                              pr_texto_completo => vr_xml_temp,
                              pr_texto_novo     => '<?xml version="1.0" encoding="ISO-8859-1"?><raiz>');

      IF vr_tab_agendto.count() > 0 THEN
        -- Buscar o primeiro indice
        vr_index:= vr_tab_agendto.FIRST;
        -- Percorre todas os agendamento que foram encontrados para a cooperativa
        WHILE vr_index IS NOT NULL LOOP
          -- Montar XML com registros de agendamento
          gene0002.pc_escreve_xml(pr_xml            => pr_clobxmlc,
                                  pr_texto_completo => vr_xml_temp,
                                  pr_texto_novo     => '<agendamento>' ||
                                                       '   <cdcooper>' || NVL(vr_tab_agendto(vr_index).cdcooper,0) || '</cdcooper>' ||
                                                       '   <dscooper>' || NVL(vr_tab_agendto(vr_index).dscooper,' ') || '</dscooper>' ||
                                                       '   <nrdconta>' || NVL(vr_tab_agendto(vr_index).nrdconta,0) || '</nrdconta>' ||
                                                       '   <nmprimtl>' || NVL(vr_tab_agendto(vr_index).nmprimtl,' ') || '</nmprimtl>' ||
                                                       '   <cdagenci>' || NVL(vr_tab_agendto(vr_index).cdagenci,0) || '</cdagenci>' ||
                                                       '   <cdtiptra>' || NVL(vr_tab_agendto(vr_index).cdtiptra,0) ||'</cdtiptra>' ||
                                                       '   <fltiptra>' || CASE WHEN vr_tab_agendto(vr_index).fltiptra THEN '1' ELSE '0' END || '</fltiptra>' ||
                                                       '   <dstiptra>' || NVL(vr_tab_agendto(vr_index).dstiptra,' ') || '</dstiptra>' ||
                                                       '   <fltipdoc>' || CASE WHEN vr_tab_agendto(vr_index).fltipdoc THEN '1' ELSE '0' END || '</fltipdoc>' ||
                                                       '   <dstransa>' || NVL(vr_tab_agendto(vr_index).dstransa,' ') || '</dstransa>' ||
                                                       '   <vllanaut>' || NVL(vr_tab_agendto(vr_index).vllanaut,'0,00') || '</vllanaut>' ||
                                                       '   <dttransa>' || NVL(to_char(vr_tab_agendto(vr_index).dttransa,'dd/mm/RRRR'),' ') || '</dttransa>' ||
                                                       '   <hrtransa>' || NVL(vr_tab_agendto(vr_index).hrtransa,' ') || '</hrtransa>' ||
                                                       '   <nrdocmto>' || NVL(vr_tab_agendto(vr_index).nrdocmto,0) || '</nrdocmto>' ||
                                                       '   <dslindig>' || NVL(vr_tab_agendto(vr_index).dslindig,' ') || '</dslindig>' ||
                                                       '   <dscritic>' || NVL(vr_tab_agendto(vr_index).dscritic,' ') || '</dscritic>' ||
                                                       '   <fldebito>' || CASE WHEN vr_tab_agendto(vr_index).fldebito THEN '1' ELSE '0' END || '</fldebito>' ||
                                                       '   <dsorigem>' || NVL(vr_tab_agendto(vr_index).dsorigem,' ') || '</dsorigem>' ||
                                                       '   <idseqttl>' || NVL(vr_tab_agendto(vr_index).idseqttl,0) || '</idseqttl>' ||
                                                       '   <prorecid>' || NVL(vr_tab_agendto(vr_index).prorecid,0) || '</prorecid>' ||
                                                       '   <nrdrecid>' || NVL(vr_tab_agendto(vr_index).nrdrecid,' ') || '</nrdrecid>' ||
                                                       '</agendamento>');

          --buscar proximo registro
          vr_index:= vr_tab_agendto.next(vr_index);
        END LOOP;
      END IF;
      -- Encerrar a tag raiz
      gene0002.pc_escreve_xml(pr_xml            => pr_clobxmlc,
                              pr_texto_completo => vr_xml_temp,
                              pr_texto_novo     => '</raiz>',
                              pr_fecha_xml      => TRUE);

    EXCEPTION
      WHEN vr_exc_saida THEN
        IF vr_cdcritic <> 0 AND TRIM(vr_dscritic) IS NULL THEN
          vr_dscritic := gene0001.fn_busca_critica(vr_cdcritic);
        END IF;

        pr_cdcritic := vr_cdcritic;
        pr_dscritic := vr_dscritic;

      WHEN OTHERS THEN
        pr_cdcritic := 0;
        pr_dscritic := 'Erro na rotina PAGA0001.pc_PAGA0001_obtem_agen_deb. ' ||
                       sqlerrm;
    END;

  END pc_PAGA0001_obtem_agen_deb;

  /* Procedure para efetuar debitos de agendamentos */
  PROCEDURE pc_PAGA0001_efetua_debitos(pr_cdcooper  IN crapcop.cdcooper%TYPE -- Cooperativa
                                      ,pr_cdprogra  IN crapprg.cdprogra%TYPE -- Codigo programa
                                      ,pr_dtmvtopg  IN crapdat.dtmvtolt%TYPE -- Data Pagamento
                                      ,pr_inproces  IN crapdat.inproces%TYPE -- Indicador processo
                                      ,pr_flsgproc  IN INTEGER               -- Flag segundo processamento
                                      ,pr_nmrelato OUT VARCHAR2              -- Nome do relatorio gerado
                                      ,pr_cdcritic OUT INTEGER               -- Codigo da Critica
                                      ,pr_dscritic OUT VARCHAR2) IS          -- Descricao da critica
    -- ..........................................................................
    --  Programa : pc_PAGA0001_efetua_debitos
    --  Sistema  : Rotinas Internet
    --  Sigla    : CRED
    --  Autor    : Douglas Quisinski
    --  Data     : Julho/2015.                   Ultima atualizacao: 23/07/2018
    --
    --  Dados referentes ao programa:
    --
    --  Frequencia: Sempre que for chamado
    --  Objetivo  : Chamar a procedure pc_efetua_debitos pelo Progress
    --
    --  Alteracoes: 28/12/2015 - Incluido controle de execução da DEBSIC para incrementar  
    --                           a contagem da tentativa de execução (Odirlei-AMcom) 
    --
    --              07/07/2016 - Alterar parametro cdprogra para passar 'DEBNET' ao
    --                           inves de passar NULL (Lucas Ranghetti #483791)
    --
    --              17/02/2017 - Incluir chamada da rotina PGTA0001.pc_gera_retorno_tit_pago
    --                           conforme o programa crps509 ja faz (Lucas Ranghetti #590601)
    --
    --              23/07/2018 - Passar para a pc_efetua_debitos o indicador de segundo
    --                           processo que chega nesta rotina - pr_flsgproc.
    --                           (INC0019629) - (Fabrício)
    -- ..........................................................................
  BEGIN
    DECLARE
      --Variaveis de Erro
      vr_cdcritic crapcri.cdcritic%TYPE;
      vr_dscritic VARCHAR2(4000);
      vr_flultexe INTEGER;
      vr_qtdexec  INTEGER;

      vr_flsgproc BOOLEAN;

      -- Tratamento de erros
      vr_exc_saida EXCEPTION;

      -- Temp table para agendamentos
      vr_tab_agendto PAGA0001.typ_tab_agendto;

      rw_crapdat BTCH0001.cr_crapdat%ROWTYPE;
      
    BEGIN
       -- Verifica se a data esta cadastrada
       OPEN BTCH0001.cr_crapdat(pr_cdcooper => pr_cdcooper);
       FETCH BTCH0001.cr_crapdat INTO rw_crapdat;
       -- Se não encontrar
       IF BTCH0001.cr_crapdat%NOTFOUND THEN
         -- Fechar o cursor pois haverá raise
         CLOSE BTCH0001.cr_crapdat;
         -- Montar mensagem de critica
         vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => 1);
         RAISE vr_exc_saida;
       ELSE
         -- Apenas fechar o cursor
         CLOSE BTCH0001.cr_crapdat;
       END IF;

      -- Carregar as informações dos agendamentos da cooperativa
      PAGA0001.pc_obtem_agend_debitos(pr_cdcooper    => pr_cdcooper,
                                      pr_dtmvtopg    => pr_dtmvtopg,
                                      pr_inproces    => pr_inproces,
                                      pr_cdprogra    => pr_cdprogra,
                                      pr_tab_agendto => vr_tab_agendto,
                                      pr_cdcritic    => vr_cdcritic,
                                      pr_dscritic    => vr_dscritic);
      -- Se retornou alguma critica
      IF vr_cdcritic <> 0 OR TRIM(vr_dscritic) IS NOT NULL THEN
        RAISE vr_exc_saida;
      END IF;

	  -- Alterada para Consultar, pois inclusão de controle de execução agora é no Debitador unico (gen_debitador_unico)
      --> Verificar/controlar a execução da DEBNET e DEBSIC 
      SICR0001.pc_controle_exec_deb( pr_cdcooper  => pr_cdcooper          --> Código da coopertiva
                                    ,pr_cdtipope  => 'C'                  --> Tipo de operacao I-incrementar e C-Consultar
                                    ,pr_dtmvtolt  => rw_crapdat.dtmvtolt  --> Data do movimento                                
                                    ,pr_cdprogra  => 'DEBNET'             --> Codigo do programa                                  
                                    ,pr_flultexe  => vr_flultexe          --> Retorna se é a ultima execução do procedimento
                                    ,pr_qtdexec   => vr_qtdexec           --> Retorna a quantidade
                                    ,pr_cdcritic  => vr_cdcritic          --> Codigo da critica de erro
                                    ,pr_dscritic  => vr_dscritic);        --> descrição do erro se ocorrer

      IF nvl(vr_cdcritic,0) > 0 OR
         TRIM(vr_dscritic) IS NOT NULL THEN
        RAISE vr_exc_saida; 
      END IF;   
      

      IF vr_tab_agendto.count() > 0 THEN
        
        IF pr_flsgproc = 1 THEN
          vr_flsgproc := TRUE;
        ELSE
          vr_flsgproc := FALSE;
        END IF;         
        
        -- Chama procedure para efetuar os débitos
        PAGA0001.pc_efetua_debitos(pr_cdcooper => pr_cdcooper
                                  ,pr_tab_agendto => vr_tab_agendto
                                  ,pr_cdprogra => pr_cdprogra
                                  ,pr_dtmvtopg => pr_dtmvtopg
                                  ,pr_inproces => pr_inproces
                                  ,pr_flsgproc => vr_flsgproc
                                  ,pr_cdcritic => vr_cdcritic
                                  ,pr_dscritic => vr_dscritic );

        -- Se retornou alguma critica
        IF vr_cdcritic <> 0 OR TRIM(vr_dscritic) IS NOT NULL THEN
          RAISE vr_exc_saida;
        END IF;

        -- Proj. Pagamento de Titulos - Gera registro de Retorno
        IF vr_flultexe = 1 THEN -- Apenas na ultima execução do processo
          PGTA0001.pc_gera_retorno_tit_pago(pr_cdcooper => pr_cdcooper
                                          , pr_dtmvtolt => pr_dtmvtopg
                                          , pr_idorigem => 3    -- Ayllos
                                          , pr_cdoperad => '1'
                                          , pr_cdcritic => vr_cdcritic
                                          , pr_dscritic => vr_dscritic );
          --Se ocorreu erro
          IF TRIM(vr_dscritic) IS NOT NULL OR vr_cdcritic IS NOT NULL THEN
            --Levantar Excecao
            RAISE vr_exc_saida;
        END IF;
        END IF;

        -- Chama procedure para efetuar os débitos
        PAGA0001.pc_gera_relatorio_debnet( pr_cdcooper    => pr_cdcooper
                                          ,pr_cdprogra    => pr_cdprogra
                                          ,pr_tab_agendto => vr_tab_agendto
                                          ,pr_rw_crapdat  => rw_crapdat
                                          ,pr_nmrelato    => pr_nmrelato
                                          ,pr_cdcritic    => vr_cdcritic
                                          ,pr_dscritic    => vr_dscritic);

        -- Se retornou alguma critica
        IF vr_cdcritic <> 0 OR TRIM(vr_dscritic) IS NOT NULL THEN
          RAISE vr_exc_saida;
        END IF;
      END IF;

    EXCEPTION
      WHEN vr_exc_saida THEN
        IF vr_cdcritic <> 0 AND TRIM(vr_dscritic) IS NULL THEN
          vr_dscritic := gene0001.fn_busca_critica(vr_cdcritic);
        END IF;

        pr_cdcritic := vr_cdcritic;
        pr_dscritic := vr_dscritic;

      WHEN OTHERS THEN
        -- Erro
        pr_cdcritic := 0;
        pr_dscritic := 'Erro na rotina PAGA0001.pc_PAGA0001_efetua_debitos. ' || sqlerrm;
    END;
  END pc_PAGA0001_efetua_debitos;

  /* Procedure para debitar os agendamentos de TED */
  PROCEDURE pc_debita_agendto_ted (pr_cdcooper IN crapcop.cdcooper%TYPE   --Codigo Cooperativa
                                  ,pr_cdagenci IN crapage.cdagenci%TYPE   --Codigo Agencia
                                  ,pr_nrdcaixa IN craplot.nrdcaixa%TYPE   --Numero Caixa
                                  ,pr_cdoperad IN crapope.cdoperad%TYPE   --Operador
                                  ,pr_nmdatela IN craptel.nmdatela%TYPE   --Nome programa
                                  ,pr_idorigem IN INTEGER                 --origem (TAA ou Internet)
                                  ,pr_dtmvtolt IN crapdat.dtmvtolt%TYPE   --Data pagamento
                                  ,pr_inproces IN crapdat.inproces%TYPE   --Indicador Processo
                                  ,pr_flsgproc IN BOOLEAN                 --Flag segundo processamento
                                  ,pr_cdtiptra IN INTEGER                 --Codigo tipo transferencia
                                  ,pr_craplau_progress_recid IN NUMBER    --Recid lancamento automático
								  ,pr_execucao IN INTEGER DEFAULT 0       --Ordem de execução no dia
                                  ,pr_cdcritic OUT INTEGER      --Codigo da Critica
                                  ,pr_dscritic OUT VARCHAR2) IS  --Descricao da critica);
    /* ..........................................................................

      Programa : pc_debita_agendto_ted        
      Sistema  : Rotinas Pagamento
      Sigla    : PAGA
      Autor    : 
      Data     :                                 Ultima atualizacao: 15/12/2017

      Dados referentes ao programa:

       Frequencia: Sempre que for chamado
       Objetivo  : Efetuar debitos.de agendamento de ted

       Alteracoes: 23/05/2016 - Retirado o uso do campo craplau.flmobile pois não existe em produção
  					                   (Adriano - M117).             

                   25/05/2016 - Ajuste para não tratar uma segunda tentativa de 
				                        efetivação do agendamento de TED
								                (Adriano - M117).
                                
                   06/06/2016 - Ajuste para incluir o tratamento de assinatura conjunta
                                (Adriano).           
                                
                   16/06/2016 - Ajuste para corrigir problema de sobreposição da
                                variável vr_dscritic
                                (Adriano).
                                
                   13/09/2016 - Ajuste para buscar corretamente o registro de favorecidos
                               (Adriano - SD 495293).                                            
                                
                   15/12/2017 - Incluido nome do módulo logado
                                No caso de erro de programa gravar tabela especifica de log                     
                                Ajuste mensagem de erro 
                               (Belli - Envolti - Chamado 779415)                                                       
                                
                   12/04/2019 - Incluir validação para setar parametros no processamento
                                de transferencias de valores, relacionados à portabilidade
                                de Salário ( Renato Darosci - Supero - P485)
     ..........................................................................*/


  BEGIN
    DECLARE
     
      --Cursor responsável por buscar contas favorecidas referente ao processo de TED
      CURSOR cr_crapcti (pr_cdcooper IN crapcop.cdcooper%TYPE
                        ,pr_nrdconta IN crapass.nrdconta%TYPE
                        ,pr_cddbanco IN craplau.cddbanco%TYPE
                        ,pr_nrctatrf IN craplau.nrctadst%TYPE
                        ,pr_cdageban IN craplau.cdageban%TYPE) IS
      SELECT c.nmtitula
            ,c.nrcpfcgc
            ,c.inpessoa
            ,c.intipcta
        FROM crapcti c
       WHERE c.cdcooper = pr_cdcooper
         AND c.nrdconta = pr_nrdconta
         AND c.cddbanco = pr_cddbanco
         AND c.nrctatrf = pr_nrctatrf
         AND c.cdageban = pr_cdageban;
      rw_crapcti cr_crapcti%ROWTYPE;          
      
      --Selecionar informacoes dos bancos
      CURSOR cr_crapban (pr_cdbccxlt IN crapban.cdbccxlt%type) IS
      SELECT crapban.nmresbcc
            ,crapban.nmextbcc
            ,crapban.nrispbif
      FROM crapban
      WHERE crapban.cdbccxlt = pr_cdbccxlt;
      rw_crapban cr_crapban%ROWTYPE;
      
      --Selecionar informacoes dos lancamentos automaticos
      CURSOR cr_craplau (pr_progress_recid IN NUMBER) IS
        SELECT craplau.nrdconta
              ,craplau.insitlau
              ,craplau.vllanaut
              ,craplau.idseqttl
              ,craplau.dtmvtopg
              ,craplau.cddbanco
              ,craplau.cdageban
              ,craplau.nrctadst
              ,craplau.cdtiptra
              ,craplau.nrcpfope
              ,craplau.dslindig
              ,craplau.dscodbar
              ,craplau.dscedent
              ,craplau.idtitdda
              ,craplau.cdhistor
              ,craplau.nrdocmto
              ,craplau.cdseqtel
              ,craplau.cdempres
              ,craplau.cdbccxlt
              ,craplau.cdagenci
              ,craplau.nrseqdig
              ,craplau.nrdolote
              ,craplau.dtmvtolt
              ,craplau.nrdctabb
              ,craplau.nrcrcard
              ,craplau.nrseqagp
              ,craplau.flgblqdb
              ,craplau.rowid
              ,craplau.cdcooper
              ,craplau.cdtrapen
              ,craplau.flmobile
              ,craplau.idtipcar
              ,craplau.nrcartao
              ,craplau.dsorigem
              ,craplau.cdcoptfn
              ,craplau.cdagetfn
              ,craplau.nrterfin
              ,craplau.nrcpfpre
              ,craplau.nmprepos
              ,t.cdfinalidade
              ,t.dshistorico
              ,t.dsidentific
              ,t.nrridlfp
          FROM craplau
              ,tbted_det_agendamento t
         WHERE craplau.progress_recid = pr_progress_recid
           AND craplau.idlancto = t.idlancto;
      rw_craplau cr_craplau%ROWTYPE;
      
      -- Buscar dados da portabilidade
      CURSOR cr_portab(pr_cdcooper IN NUMBER
                      ,pr_nrdconta IN NUMBER) IS
        SELECT rec.nmprimtl
             , rec.nrcpfcgc
             , rec.cdtipo_cta_destinataria intipcta
          FROM tbcc_portabilidade_recebe rec
         WHERE rec.nrdconta = pr_nrdconta
           AND rec.cdcooper = pr_cdcooper
         ORDER BY rec.dtsolicitacao DESC;
      rw_portab    cr_portab%ROWTYPE;
      
      --Tipo da tabela de saldos
      vr_tab_saldo EXTR0001.typ_tab_saldos;
      --Tipo de tabelas de limites
      vr_tab_limite INET0001.typ_tab_limite;
      vr_tab_internet INET0001.typ_tab_internet;
      --Tipo de tabela de erro
      vr_tab_erro GENE0001.typ_tab_erro;

      --Variaveis Locais
      vr_dstransa  VARCHAR2(1000);
      vr_dstrans1  VARCHAR2(1000);
      vr_dsorigem  VARCHAR2(1000);
      vr_dsprotoc  VARCHAR2(1000);
      vr_dscedent  VARCHAR2(1000);
      vr_nmtldest  VARCHAR2(100);
      vr_dssituac  VARCHAR2(20);
      vr_dssituac2 VARCHAR2(20);
      vr_dsdmensg  VARCHAR2(1000);
      vr_insitlau  INTEGER;
      vr_nrdolote  INTEGER;
      vr_cdhiscre  INTEGER;
      vr_cdhisdeb  INTEGER;
      vr_indtrans  INTEGER;
      vr_nrdocdeb  NUMBER;
      vr_nrdoccre  NUMBER;
      vr_cdlantar  craplat.cdlantar%TYPE;
      vr_nrdocmto  NUMBER;
      vr_flgtrans  BOOLEAN;
      vr_flerrtaa  BOOLEAN;
      vr_nrdrowid  ROWID;
      vr_cdcopage  crapcop.cdcooper%TYPE;
      vr_tpoperac  INTEGER;
      vr_flultexe  INTEGER;
      vr_qtdexec   INTEGER;
      vr_cdispbif  INTEGER;
      
      vr_idportab     NUMBER;
      vr_nrridlfp     tbted_det_agendamento.nrridlfp%TYPE;
      
      vr_aux_vllanaut craplau.vllanaut%TYPE;
      
      vr_tab_protocolo_ted          CXON0020.typ_tab_protocolo_ted;
      
      vr_cti_nrcpfcgc      crapcti.nrcpfcgc%TYPE;
      vr_cti_inpessoa      crapcti.inpessoa%TYPE;
      vr_cti_intipcta      crapcti.intipcta%TYPE;
      
      --Variaveis de Erro
      vr_cdcritic crapcri.cdcritic%TYPE;
      vr_dscritic VARCHAR2(4000);
      vr_dscritic2 VARCHAR2(4000);
      --Variaveis de Excecao
      vr_exc_erro EXCEPTION;
      --Variaveis de Registro
      rw_crabass  cr_crapass%ROWTYPE;
      --Agrupa os parametros - 15/12/2017 - Chamado 779415 
      vr_dsparame VARCHAR2(4000);
    BEGIN
	     -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		   GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_debita_agendto_ted');
      
       --Inicializar variaveis retorno
       pr_cdcritic:= NULL;
       pr_dscritic:= NULL;
      
       --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
       vr_dsparame :=  ' pr_cdcooper:'  || pr_cdcooper || 
                       ' ,pr_cdagenci:' || pr_cdagenci || 
                       ' ,pr_nrdcaixa:' || pr_nrdcaixa || 
                       ' ,pr_cdoperad:' || pr_cdoperad ||
                       ' ,pr_nmdatela:' || pr_nmdatela || 
                       ' ,pr_idorigem:' || pr_idorigem || 
                       ' ,pr_dtmvtolt:' || pr_dtmvtolt || 
                       ' ,pr_inproces:' || pr_inproces || 
                       ' ,pr_flsgproc:' || CASE pr_flsgproc
                                             WHEN true 
                                               THEN 'true'
                                               ELSE 'false' 
                                           END || 
                       ' ,pr_cdtiptra:' || pr_cdtiptra || 
                       ' ,pr_craplau_progress_recid:' || pr_craplau_progress_recid;

       --Inicializar variaveis controle
       vr_flgtrans:= FALSE;
       vr_flerrtaa:= FALSE;
       vr_insitlau:= 0;
       
       --Inicia variavel
       vr_tpoperac:= 1;
       
       --Determinar tipo transferencia
       vr_dstransa:= 'Efetua agendamento para ted';
       
       --Savepoint para abortar sem alterar
       SAVEPOINT TRANS_UNDO;

       --Determinar a Origem
       vr_dsorigem:= TRIM(GENE0001.vr_vet_des_origens(pr_idorigem));
       
       --Numero do lote
       vr_nrdolote:= 11000 + pr_nrdcaixa;
       
       --Verificar se o lancamento automatico existe
       OPEN cr_craplau (pr_progress_recid  => pr_craplau_progress_recid);
       
       FETCH cr_craplau INTO rw_craplau;
       
       IF cr_craplau%NOTFOUND THEN
         --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
         vr_cdcritic := 1071; --Registro de agendamento nao encontrado.
         vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);	
         
         --Fechar Cursor
         CLOSE cr_craplau;
         
         --Levantar Excecao
         RAISE vr_exc_erro;
         
       END IF;

       --Fechar Cursor
       CLOSE cr_craplau;
       
       --Verificar se a cooperativa existe
       OPEN cr_crapcop (pr_cdcooper => pr_cdcooper);
       
       FETCH cr_crapcop INTO rw_crapcop;
       
       IF cr_crapcop%NOTFOUND THEN
         --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
         vr_cdcritic := 1070; --Registro de cooperativa nao encontrado
         vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
         
         --Fechar Cursor
         CLOSE cr_crapcop;
         
         --Levantar Excecao
         RAISE vr_exc_erro;
         
       END IF;
       
       --Fechar Cursor
       CLOSE cr_crapcop;
       
       -- Verifica se a data esta cadastrada
       OPEN BTCH0001.cr_crapdat(pr_cdcooper => pr_cdcooper);
       
       FETCH BTCH0001.cr_crapdat INTO rw_crapdat;
       
       -- Se não encontrar
       IF BTCH0001.cr_crapdat%NOTFOUND THEN
         
         -- Fechar o cursor pois haverá raise
         CLOSE BTCH0001.cr_crapdat;
         
         -- Montar mensagem de critica
         -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415     
         vr_cdcritic := 1;
         vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
         RAISE vr_exc_erro;
         
       ELSE
         -- Apenas fechar o cursor
         CLOSE BTCH0001.cr_crapdat;
       END IF;
       
       --Selecionar informacoes do associado
       OPEN cr_crapass(pr_cdcooper => pr_cdcooper
                      ,pr_nrdconta => rw_craplau.nrdconta);
                      
       FETCH cr_crapass INTO rw_crapass;
       
       CLOSE cr_crapass;
       
       --Inicializar tabela erros e saldos
       vr_tab_erro.DELETE;
       vr_tab_saldo.DELETE;
       
       --Determinar situacao lancamento
       vr_insitlau:= rw_craplau.insitlau;
       
       --Se a origem for TAA
       IF pr_idorigem = 4 THEN /* TAA */
         
         /** Verifica se possui saldo para fazer a operacao **/
         EXTR0001.pc_obtem_saldo_dia (pr_cdcooper   => pr_cdcooper
                                     ,pr_rw_crapdat => rw_crapdat
                                     ,pr_cdagenci   => pr_cdagenci
                                     ,pr_nrdcaixa   => pr_nrdcaixa
                                     ,pr_cdoperad   => pr_cdoperad
                                     ,pr_nrdconta   => rw_craplau.nrdconta
                                     ,pr_vllimcre   => rw_crapass.vllimcre
                                     ,pr_tipo_busca => 'A' --> tipo de busca(A-dtmvtoan)
                                     ,pr_flgcrass   => FALSE
                                     ,pr_dtrefere   => pr_dtmvtolt
                                     ,pr_des_reto   => vr_dscritic
                                     ,pr_tab_sald   => vr_tab_saldo
                                     ,pr_tab_erro   => vr_tab_erro);
         --Se ocorreu erro
         IF vr_dscritic = 'NOK' THEN
           
           -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415            
           -- Tenta buscar o erro no vetor de erro
           IF vr_tab_erro.COUNT > 0 THEN
             vr_cdcritic:= vr_tab_erro(vr_tab_erro.FIRST).cdcritic;
             vr_dscritic:= vr_tab_erro(vr_tab_erro.FIRST).dscritic ||
                        ' Retorno extr0001.pc_obtem_saldo_dia' ||
                        ', pr_nrdconta:'    || rw_craplau.nrdconta ||
                        ', pr_vllimcre:'    || rw_crapass.vllimcre ||
                        ', pr_tipo_busca:'  || 'A'                 || --> tipo de busca(A-dtmvtoan)
                        ', pr_flgcrass:'    || 'FALSE';
           ELSE
             vr_cdcritic:= 9998;
             vr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                        ' Retorno extr0001.pc_obtem_saldo_dia' ||
                        ', pr_nrdconta:'    || rw_craplau.nrdconta ||
                        ', pr_vllimcre:'    || rw_crapass.vllimcre ||
                        ', pr_tipo_busca:'  || 'A'                 || --> tipo de busca(A-dtmvtoan)
                        ', pr_flgcrass:'    || 'FALSE';
           END IF;
           
           --Levantar Excecao           
           RAISE vr_exc_erro;
           
         ELSE
           vr_dscritic:= NULL;
         END IF;
	       -- Retorno nome do módulo logado - 15/12/2017 - Chamado 779415
		     GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_debita_agendto_ted');
         
         --Verificar o saldo retornado
         IF vr_tab_saldo.Count = 0 THEN
           
           --Montar mensagem erro
           --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
           vr_cdcritic := 1072; --Nao foi possivel consultar o saldo para a operacao.
           vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
           
           --Levantar Excecao
           RAISE vr_exc_erro;
           
         ELSE
           --Se o saldo nao for suficiente
           IF rw_craplau.vllanaut > (nvl(vr_tab_saldo(vr_tab_saldo.FIRST).vlsddisp,0) +
                                     nvl(vr_tab_saldo(vr_tab_saldo.FIRST).vllimcre,0)) THEN
              IF pr_execucao = 3 THEN -- Terceira execução do dia (final) gera erro                                              
              --Verificar a conta de destino
              OPEN cr_crapcti(pr_cdcooper => pr_cdcooper
                             ,pr_nrdconta => rw_craplau.nrdconta
                             ,pr_cddbanco => rw_craplau.cddbanco
                             ,pr_nrctatrf => rw_craplau.nrctadst
                             ,pr_cdageban => rw_craplau.cdageban);
                               
              FETCH cr_crapcti INTO rw_crapcti;

              vr_nmtldest := '';
                
              IF cr_crapcti%FOUND THEN
                 vr_nmtldest := rw_crapcti.nmtitula;
              END IF;
                
              CLOSE cr_crapcti;
                 
              vr_dsdmensg := 'Atenção, %23cooperado%23! <br><br><br>' ||
                               'Informamos que a seguinte transação não foi efetivada: <br><br> ' ||
                               '<b>Transferência</b> para <b>' || rw_craplau.cdageban || '/' || GENE0002.fn_mask_conta(rw_craplau.nrctadst) ||
                               ' - ' || vr_nmtldest || '</b> agendada para <b>' ||
                               to_char(rw_craplau.dtmvtopg, 'DD/MM/YYYY') || '</b> no valor de <b>R$' || To_Char(rw_craplau.vllanaut,'fm999g999g990d00') || ' ' ||
                               '</b> por insuficiência de saldo.';

              -- Criação de mensagem no internetbank - [TODO] Remover todas as chamadas do pc_gerar_mensagem quando o novo ibank entrar no ar
                  GENE0003.pc_gerar_mensagem (pr_cdcooper   => pr_cdcooper
                                             ,pr_nrdconta   => rw_craplau.nrdconta
                                       --,pr_idseqttl   => GERA PARA TODOS OS USUÁRIOS
                                             ,pr_cdprogra   => pr_nmdatela
                                             ,pr_inpriori   => 0
                                             ,pr_dsdmensg   => vr_dsdmensg
                                             ,pr_dsdassun   => 'Transação não efetivada'
                                             ,pr_dsdremet   => rw_crapcop.nmrescop
                                             ,pr_dsdplchv   => 'Sem Saldo'
                                             ,pr_cdoperad   => '1'
                                             ,pr_cdcadmsg   => '0'
                                             ,pr_dscritic   => vr_dscritic);
	            -- Retorno nome do módulo logado - 15/12/2017 - Chamado 779415
		          GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_debita_agendto_ted');
                                               
              vr_variaveis_notif('#dataagendamento') := to_char(rw_craplau.dtmvtopg, 'DD/MM/YYYY');
              vr_variaveis_notif('#valor') := to_char(rw_craplau.vllanaut,'fm999g999g990d00');
              vr_variaveis_notif('#bancodestino') := to_char(rw_craplau.cddbanco);
              vr_variaveis_notif('#agenciadestino') := to_char(rw_craplau.cdageban);
              vr_variaveis_notif('#contadestino') := GENE0002.fn_mask_conta(rw_craplau.nrctadst);
              vr_variaveis_notif('#destinatario') := vr_nmtldest;
              vr_variaveis_notif('#motivo') := 'insuficiência de saldo';
                
              -- Cria uma notificação
              noti0001.pc_cria_notificacao(pr_cdorigem_mensagem => ORIGEM_AGEND_NAO_EFETIVADO
                                           ,pr_cdmotivo_mensagem => MOTIVO_TED
                                           --,pr_dhenvio => SYSDATE
                                           ,pr_cdcooper => pr_cdcooper
                                           ,pr_nrdconta => rw_craplau.nrdconta
                                           ,pr_variaveis => vr_variaveis_notif);
	            -- Retorno nome do módulo logado - 15/12/2017 - Chamado 779415
		          GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_debita_agendto_ted');
										
			  END IF;
										
             --Marcar que ocorreu erro TAA
             vr_flerrtaa:= TRUE;
             
             --Montar mensagem erro
             --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
             vr_cdcritic := 717; --Nao ha saldo suficiente para a operacao
             vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);

           END IF;
         END IF;
       ELSE
         
         vr_aux_vllanaut := rw_craplau.vllanaut;
         
         --Verificar Operacao
         INET0001.pc_verifica_operacao (pr_cdcooper => pr_cdcooper          --Código Cooperativa
                                       ,pr_cdagenci => pr_cdagenci          --Agencia do Associado
                                       ,pr_nrdcaixa => pr_nrdcaixa          --Numero caixa
                                       ,pr_nrdconta => rw_craplau.nrdconta  --Numero da conta
                                       ,pr_idseqttl => rw_craplau.idseqttl  --Identificador Sequencial titulo
                                       ,pr_dtmvtolt => pr_dtmvtolt          --Data Movimento
                                       ,pr_idagenda => 1                    --Efetua Debito
                                       ,pr_dtmvtopg => rw_craplau.dtmvtopg  --Data Pagamento
                                       ,pr_vllanmto => vr_aux_vllanaut      --Valor Lancamento
                                       ,pr_cddbanco => rw_craplau.cddbanco  --Codigo banco
                                       ,pr_cdageban => rw_craplau.cdageban  --Codigo Agencia
                                       ,pr_nrctatrf => rw_craplau.nrctadst  --Numero Conta Transferencia
                                       ,pr_cdtiptra => rw_craplau.cdtiptra  --Tipo transacao
                                       ,pr_cdoperad => pr_cdoperad          --Codigo Operador
                                       ,pr_tpoperac => 4                    --TED
                                       ,pr_flgvalid => TRUE                 --Indicador validacoes
                                       ,pr_dsorigem => vr_dsorigem          --Descricao Origem
                                       ,pr_nrcpfope => 0                    --CPF operador
                                       ,pr_flgctrag => FALSE                --controla validacoes na efetivacao de agendamentos */
                                       ,pr_nmdatela => pr_nmdatela          --> Nome da tela
                                       ,pr_dstransa => vr_dstrans1          --Descricao da transacao
                                       ,pr_tab_limite => vr_tab_limite      --Tabelas de retorno de horarios limite
                                       ,pr_tab_internet => vr_tab_internet --Tabelas de retorno de horarios limite
                                       ,pr_cdcritic => vr_cdcritic          --Codigo do erro
                                       ,pr_dscritic => vr_dscritic
                                       ,pr_assin_conjunta => vr_assin_conjunta);        --Descricao do erro;
	      -- Retorno nome do módulo logado - 15/12/2017 - Chamado 779415
		    GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_debita_agendto_ted');
        --Substituicao da condicao fixa por codigo - 15/12/2017 - Chamado 779415 
        IF vr_dscritic = 'Nao ha saldo suficiente para a operacao.'  OR
           vr_cdcritic = 717                                           THEN   
           IF pr_execucao = 3 THEN -- Terceira execução do dia (final) gera erro  
            --Verificar a conta de destino
            OPEN cr_crapcti(pr_cdcooper => pr_cdcooper
                           ,pr_nrdconta => rw_craplau.nrdconta
                           ,pr_cddbanco => rw_craplau.cddbanco
                           ,pr_nrctatrf => rw_craplau.nrctadst
                           ,pr_cdageban => rw_craplau.cdageban);
                                 
            FETCH cr_crapcti INTO rw_crapcti;

            vr_nmtldest := '';
                  
            IF cr_crapcti%FOUND THEN
               vr_nmtldest := rw_crapcti.nmtitula;
            END IF;
                  
            CLOSE cr_crapcti;

          vr_dsdmensg := 'Atenção, %23cooperado%23! <br><br><br>' ||
                                   'Informamos que a seguinte transação não foi efetivada: <br><br> ' ||
                                   '<b>Transferência</b> para <b>' || rw_craplau.cdageban || '/' || GENE0002.fn_mask_conta(rw_craplau.nrctadst) ||
                                   ' - ' || vr_nmtldest || '</b> agendada para <b>' ||
                                   to_char(rw_craplau.dtmvtopg, 'DD/MM/YYYY') || '</b> no valor de <b>R$' || To_Char(rw_craplau.vllanaut,'fm999g999g990d00') || ' ' ||
                                   '</b> por insuficiência de saldo.';
																									
          -- Criação de mensagem no internetbank - [TODO] Remover todas as chamadas do pc_gerar_mensagem quando o novo ibank entrar no ar
                    GENE0003.pc_gerar_mensagem (pr_cdcooper   => pr_cdcooper
                                               ,pr_nrdconta   => rw_craplau.nrdconta
                                   --,pr_idseqttl   => GERA PARA TODOS OS USUÁRIOS
                                               ,pr_cdprogra   => pr_nmdatela
                                               ,pr_inpriori   => 0
                                               ,pr_dsdmensg   => vr_dsdmensg
                                               ,pr_dsdassun   => 'Transação não efetivada'
                                               ,pr_dsdremet   => rw_crapcop.nmrescop
                                               ,pr_dsdplchv   => 'Sem Saldo'
                                               ,pr_cdoperad   => '1'
                                               ,pr_cdcadmsg   => '0'
                                               ,pr_dscritic   => vr_dscritic2);
	        -- Retorno nome do módulo logado - 15/12/2017 - Chamado 779415
		      GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_debita_agendto_ted');
            vr_variaveis_notif('#dataagendamento') := to_char(rw_craplau.dtmvtopg, 'DD/MM/YYYY');
            vr_variaveis_notif('#valor') := to_char(rw_craplau.vllanaut,'fm999g999g990d00');
            vr_variaveis_notif('#bancodestino') := to_char(rw_craplau.cddbanco);
            vr_variaveis_notif('#agenciadestino') := to_char(rw_craplau.cdageban);
            vr_variaveis_notif('#contadestino') := GENE0002.fn_mask_conta(rw_craplau.nrctadst);
            vr_variaveis_notif('#destinatario') := vr_nmtldest;
            vr_variaveis_notif('#motivo') := 'insuficiência de saldo';
                
            -- Cria uma notificação
            noti0001.pc_cria_notificacao(pr_cdorigem_mensagem => ORIGEM_AGEND_NAO_EFETIVADO
                                         ,pr_cdmotivo_mensagem => MOTIVO_TED
                                         ,pr_cdcooper => pr_cdcooper
                                         ,pr_nrdconta => rw_craplau.nrdconta
                                         ,pr_variaveis => vr_variaveis_notif);

           END IF;

         END IF;
          
       END IF;
       
       --Se origem nao for TAA e nao tem erro ou for TAA e nao deu erro
       IF  (pr_idorigem <> 4 AND vr_dscritic IS NULL)   OR
           (pr_idorigem = 4 AND NOT vr_flerrtaa) THEN           
         
          --Verificar a conta de destino
          OPEN cr_crapcti(pr_cdcooper => pr_cdcooper
                         ,pr_nrdconta => rw_craplau.nrdconta
                         ,pr_cddbanco => rw_craplau.cddbanco
                         ,pr_nrctatrf => rw_craplau.nrctadst
                         ,pr_cdageban => rw_craplau.cdageban);
                                           
          FETCH cr_crapcti INTO rw_crapcti;

          vr_nmtldest := '';
                            
          IF cr_crapcti%FOUND THEN
             vr_nmtldest := rw_crapcti.nmtitula;
          END IF;

          CLOSE cr_crapcti;
          
          OPEN cr_crapban (pr_cdbccxlt => rw_craplau.cddbanco);
          --Posicionar no proximo registro
          FETCH cr_crapban INTO rw_crapban;
          --Se nao encontrar
          IF cr_crapban%FOUND THEN
            vr_cdispbif := rw_crapban.nrispbif;
          ELSE
            --Fechar Cursor
            CLOSE cr_crapban;
            --Mensagem erro
            --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
            vr_cdcritic := 57; --Banco nao encontrado/CADASTRADO
            vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic);
            --Levantar Excecao
            RAISE vr_exc_erro;
          END IF;
          --Fechar Cursor
          CLOSE cr_crapban;        
          
          -- Verificar se é um agendamento de portabilidade
          IF rw_craplau.dsorigem = 'PORTABILIDAD' THEN
            vr_idportab := 1;
            vr_nrridlfp := rw_craplau.nrridlfp;
            
            -- Buscar os dados no registro da portabilidade
            OPEN  cr_portab(pr_cdcooper
                           ,rw_craplau.nrdconta);
            FETCH cr_portab INTO rw_portab;
            
            -- Se não encontrar registro de portabilidade
            IF cr_portab%NOTFOUND THEN
              CLOSE cr_portab;
              vr_cdcritic := 0;
              vr_dscritic := 'Dados de portabilidade não encontrados.';
              --Levantar Excecao
              RAISE vr_exc_erro;
            END IF;
            
            -- Fechar o cursor
            CLOSE cr_portab;
            
            -- Dados de destino
            vr_nmtldest     := rw_portab.nmprimtl;
            vr_cti_nrcpfcgc := rw_portab.nrcpfcgc;
            vr_cti_inpessoa := 1; -- Portabilidade é sempre pessoa física
            
            -- Tp. conta - Destinatário
            IF    rw_portab.intipcta = 'CC' THEN -- Conta Corrente
              vr_cti_intipcta := 1;
            ELSIF rw_portab.intipcta = 'PP' THEN -- Poupança
              vr_cti_intipcta := 2;
            ELSIF rw_portab.intipcta = 'PG' THEN -- Conta de Pagamento
              vr_cti_intipcta := 3;
            END IF;
            
          ELSE 
            vr_idportab := 0;
            vr_nrridlfp := 0;
            
            -- Fluxo atual
            vr_cti_nrcpfcgc := rw_crapcti.nrcpfcgc;
            vr_cti_inpessoa := rw_crapcti.inpessoa;
            vr_cti_intipcta := rw_crapcti.intipcta;
          END IF;
          
          --> Procedure para executar o envio da TED
          CXON0020.pc_executa_envio_ted (pr_cdcooper => pr_cdcooper  --> Cooperativa    
                                       ,pr_cdagenci => 90           --> Agencia
                                       ,pr_nrdcaixa => 900          --> Caixa Operador    
                                       ,pr_cdoperad => 996          --> Operador Autorizacao
                                       ,pr_idorigem => 3            --> Origem                 
                                       ,pr_dtmvtolt => pr_dtmvtolt  --> Data do movimento
                                       ,pr_nrdconta => rw_craplau.nrdconta  --> Conta Remetente        
                                       ,pr_idseqttl => rw_craplau.idseqttl  --> Titular                
                                       ,pr_nrcpfope => rw_craplau.nrcpfope  --> CPF operador juridico
                                       ,pr_cddbanco => rw_craplau.cddbanco  --> Banco destino
                                       ,pr_cdageban => rw_craplau.cdageban  --> Agencia destino
                                       ,pr_nrctatrf => rw_craplau.nrctadst  --> Conta transferencia
                                       ,pr_nmtitula => vr_nmtldest  --> nome do titular destino
                                       ,pr_nrcpfcgc => vr_cti_nrcpfcgc      --> CPF do titular destino
                                       ,pr_inpessoa => vr_cti_inpessoa      --> Tipo de pessoa
                                       ,pr_intipcta => vr_cti_intipcta      --> Tipo de conta
                                       ,pr_vllanmto => rw_craplau.vllanaut  --> Valor do lançamento
                                       ,pr_dstransf => rw_craplau.dsidentific  --> Identificacao Transf.
                                       ,pr_cdfinali => rw_craplau.cdfinalidade  --pr_cdfinali  --> Finalidade TED   
                                       ,pr_dshistor => rw_craplau.dshistorico  --pr_dshistor  --> Descriçao do Histórico
                                       ,pr_cdispbif => vr_cdispbif  --> ISPB Banco Favorecido=
					                             ,pr_idagenda => 2
                                       ,pr_idportab => vr_idportab
                                       ,pr_nrridlfp => vr_nrridlfp
                                       -- saida        
                                       ,pr_dsprotoc => vr_dsprotoc  --> Retorna protocolo    
                                       ,pr_tab_protocolo_ted => vr_tab_protocolo_ted --> dados do protocolo
                                       ,pr_cdcritic => vr_cdcritic  --> Codigo do erro
                                       ,pr_dscritic => vr_dscritic);--> Descricao do erro
	       -- Retorno nome do módulo logado - 15/12/2017 - Chamado 779415
		     GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_debita_agendto_ted');

         IF vr_tab_protocolo_ted.count > 0 THEN
           
           -- montar retorno em xml com as informações dos protocolos
           FOR vr_idxp IN vr_tab_protocolo_ted.first..vr_tab_protocolo_ted.last LOOP

             --Atribuir numero documento 
             vr_nrdocdeb:= vr_tab_protocolo_ted(vr_idxp).nrdocmto;  

           END LOOP;
           
         END IF;

       END IF;

       --Se ocorreu erro na transferencia
       IF trim(vr_dscritic) IS NOT NULL     OR 
          nvl(vr_cdcritic,0) <> 0           OR 
          (pr_idorigem = 4 AND vr_flerrtaa) THEN
         --
         IF pr_execucao = 3 THEN -- Terceira execução do dia (final)         
         BEGIN
           UPDATE craplau SET craplau.insitlau = 4 /** NAO EFETIVADO **/
                             ,craplau.dtdebito = craplau.dtmvtopg
                             ,craplau.cdcritic = nvl(vr_cdcritic,0)
                             ,craplau.dscritic = vr_dscritic
           WHERE craplau.ROWID = rw_craplau.ROWID;
         EXCEPTION
           WHEN OTHERS THEN
             -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
             CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper); 
             -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
             vr_cdcritic := 1035;
             vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                            'craplau(70):' || 
                            ' insitlau:'   || '4' ||
                            ' com ROWID:'  || rw_craplau.ROWID || 
                            '. ' || SQLERRM;
             --> Geração de log - 15/12/2017 - Chamado 779415                             
             pc_controla_log_programa( pr_cdcooper      => pr_cdcooper
                                      ,pr_dstiplog      => 'E' -- Tipo de Log - E = erro
                                      ,pr_tpocorrencia  => 2   -- 1-Erro de negocio/ 2-Erro nao tratado
                                      ,pr_cdmensagem    => vr_cdcritic  -- Codigo do Log
                                      ,pr_dsmensagem    => vr_dscritic  -- Descrição
                                     );      
         END;
         
         -- Atualiza status da transacao
         IF rw_craplau.cdtrapen > 0 THEN
            BEGIN
               UPDATE tbgen_trans_pend
               SET tbgen_trans_pend.idsituacao_transacao = 6 /* Reprovada */
                  ,tbgen_trans_pend.dtalteracao_situacao = SYSDATE
              WHERE tbgen_trans_pend.cdtransacao_pendente = rw_craplau.cdtrapen;
            EXCEPTION
              WHEN OTHERS THEN
                -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
                CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);  
                -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
                vr_cdcritic := 1035;
                vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                               'TBGEN_TRANS_PEND(71):'   || 
                               ' idsituacao_transacao:'  || '6' ||
                               ', dtalteracao_situacao:' || 'SYSDATE' || 
                               ' com cdtransacao_pendente:' || rw_craplau.cdtrapen || 
                               '. ' || SQLERRM;
                --> Geração de log - 15/12/2017 - Chamado 779415                             
                pc_controla_log_programa( pr_cdcooper      => pr_cdcooper
                                         ,pr_dstiplog      => 'E' -- Tipo de Log - E = erro
                                         ,pr_tpocorrencia  => 2   -- 1-Erro de negocio/ 2-Erro nao tratado
                                         ,pr_cdmensagem    => vr_cdcritic  -- Codigo do Log
                                         ,pr_dsmensagem    => vr_dscritic  -- Descrição
                                        );    
            END;
          END IF;
         END IF;
       ELSE
         --Montar descricao cedente
         vr_dscedent:= 'Docto.Debito: ' ||
                       gene0002.fn_mask(vr_nrdocdeb,'zzz,zzz,zz9')||
                       ' - Docto.Credito: '||
                       gene0002.fn_mask(vr_nrdoccre,'zzz,zzz,zz9')||
                       ' - Seq.Tarifa: '||
                       gene0002.fn_mask(nvl(vr_cdlantar,0),'zzzzzzzzzz9')||
                       ' - Ag. Origem: '||
                       To_Char(rw_crapcop.cdagectl,'fm0000')||
                       ' - Ag. Destino: '||
                       To_Char(rw_craplau.cdageban,'fm0000');
	       -- Retorno nome do módulo logado - 15/12/2017 - Chamado 779415
		     GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_debita_agendto_ted');
         BEGIN
           UPDATE craplau SET craplau.insitlau = 2 /** EFETIVADO **/
                             ,craplau.dtdebito = craplau.dtmvtopg
                             ,craplau.dscedent = vr_dscedent
           WHERE craplau.ROWID = rw_craplau.ROWID;
         EXCEPTION
           WHEN OTHERS THEN
             -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
             CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);               
             -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
             vr_cdcritic := 1035;
             vr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => vr_cdcritic) ||
                            'CRAPLAU(72):' || 
                            ' insitlau:'   || '2' ||
                            ', dscedent:'  || vr_dscedent || 
                            ' com ROWID:'  || rw_craplau.ROWID ||
                            '. ' || SQLERRM;
             --> Geração de log - 15/12/2017 - Chamado 779415                             
             pc_controla_log_programa( pr_cdcooper      => pr_cdcooper
                                      ,pr_dstiplog      => 'E' -- Tipo de Log - E = erro
                                      ,pr_tpocorrencia  => 2   -- 1-Erro de negocio/ 2-Erro nao tratado
                                      ,pr_cdmensagem    => vr_cdcritic  -- Codigo do Log
                                      ,pr_dsmensagem    => vr_dscritic  -- Descrição
                                     ); 
         END;         
         
         --Marcar transacao como realizada
         vr_flgtrans:= TRUE;
         
       END IF;
       
       --Se nao executou a transacao
       IF NOT vr_flgtrans AND vr_dscritic IS NULL THEN
         
         -- Buscar critica conforme o codigo
         IF NVL(vr_cdcritic,0) > 0 THEN
           pr_dscritic := gene0001.fn_busca_critica(vr_cdcritic);
         ELSE
           --Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
           pr_cdcritic := 1073; --Nao foi possivel debitar o agendamento
           pr_dscritic := gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic);
         END IF;
         
       ELSIF NOT vr_flgtrans AND vr_dscritic IS NOT NULL THEN
         pr_dscritic:= vr_dscritic;
       END IF;
       
       IF vr_flgtrans THEN
         vr_indtrans:= 1;
       ELSE
         vr_indtrans:= 0;
       END IF;
       
       -- Chamar geracao de LOG
       gene0001.pc_gera_log(pr_cdcooper => pr_cdcooper
                           ,pr_cdoperad => pr_cdoperad
                           ,pr_dscritic => pr_dscritic
                           ,pr_dsorigem => vr_dsorigem
                           ,pr_dstransa => vr_dstransa
                           ,pr_dttransa => TRUNC(SYSDATE)
                           ,pr_flgtrans => vr_indtrans
                           ,pr_hrtransa => GENE0002.fn_busca_time
                           ,pr_idseqttl => rw_craplau.idseqttl
                           ,pr_nmdatela => pr_nmdatela
                           ,pr_nrdconta => rw_craplau.nrdconta
                           ,pr_nrdrowid => vr_nrdrowid);
	     -- Retorno nome do módulo logado - 15/12/2017 - Chamado 779415
		   GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_debita_agendto_ted');
       IF vr_insitlau > 0 AND vr_insitlau <> rw_craplau.insitlau THEN
         CASE vr_insitlau
           WHEN 1 THEN vr_dssituac:= 'PENDENTE';
           WHEN 2 THEN vr_dssituac:= 'EFETIVADO';
           WHEN 3 THEN vr_dssituac:= 'CANCELADO';
           ELSE        vr_dssituac:= 'NAO EFETIVADO';
         END CASE;

         CASE rw_craplau.insitlau
           WHEN 1 THEN vr_dssituac2:= 'PENDENTE';
           WHEN 2 THEN vr_dssituac2:= 'EFETIVADO';
           WHEN 3 THEN vr_dssituac2:= 'CANCELADO';
           ELSE        vr_dssituac2:= 'NAO EFETIVADO';
         END CASE;

         --Gerar log item
         GENE0001.pc_gera_log_item(pr_nrdrowid => vr_nrdrowid
                                  ,pr_nmdcampo => 'Situacao do Agendamento'
                                  ,pr_dsdadant => vr_dssituac
                                  ,pr_dsdadatu => vr_dssituac2);
	       -- Retorno nome do módulo logado - 15/12/2017 - Chamado 779415
		     GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_debita_agendto_ted');
       END IF;


       --Se executou transferencia
       IF vr_flgtrans THEN
         --Gerar log item
         GENE0001.pc_gera_log_item(pr_nrdrowid => vr_nrdrowid
                                  ,pr_nmdcampo => 'Conta/dv Destino'
                                  ,pr_dsdadant => NULL
                                  ,pr_dsdadatu => GENE0002.fn_mask_conta(rw_craplau.nrctadst));
	       -- Retorno nome do módulo logado - 15/12/2017 - Chamado 779415
		     GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_debita_agendto_ted');
         --Gerar log item
         GENE0001.pc_gera_log_item(pr_nrdrowid => vr_nrdrowid
                                  ,pr_nmdcampo => 'Valor da TED'
                                  ,pr_dsdadant => NULL
                                  ,pr_dsdadatu => To_Char(rw_craplau.vllanaut,'fm999g999g990d00'));
	       -- Retorno nome do módulo logado - 15/12/2017 - Chamado 779415
		     GENE0001.pc_set_modulo(pr_module => NULL, pr_action => 'PAGA0001.pc_debita_agendto_ted');
       END IF;
	     -- Incluido nome do módulo logado - 15/12/2017 - Chamado 779415
		   GENE0001.pc_set_modulo(pr_module => NULL, pr_action => NULL);
    EXCEPTION
      -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
      -- Também grava a TBGEN é a Procedurepc_PAGA0001_efetua_debitos
      -- Disparadores: paga0001.pc_efetua_debitos              - Não grava TBGEN
      WHEN vr_exc_erro THEN
        --rollback do savepoint
        ROLLBACK TO TRANS_UNDO;

        pr_cdcritic:= vr_cdcritic;
        pr_dscritic:= vr_dscritic;
      WHEN OTHERS THEN
        -- No caso de erro de programa gravar tabela especifica de log - 15/12/2017 - Chamado 779415 
        CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper); 

        -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415 
        pr_cdcritic:= 9999;
        pr_dscritic:= gene0001.fn_busca_critica(pr_cdcritic => pr_cdcritic) ||
                      'PAGA0001.pc_debita_agendto_ted. ' || sqlerrm  ||
                      '.' || vr_dsparame; 
        
        --rollback do savepoint
        ROLLBACK TO TRANS_UNDO;

    END;
    
  END pc_debita_agendto_ted;

  -- Controla Controla log em banco de dados - 15/12/2017 - Chamado 779415  
  PROCEDURE pc_controla_log_programa( pr_cdcooper       IN NUMBER   DEFAULT NULL -- Código da cooperativa
                                     ,pr_dstiplog       IN VARCHAR2 -- Tipo de Log
                                     ,pr_tpocorrencia   IN NUMBER   DEFAULT NULL -- 1-Erro de negocio/ 2-Erro nao tratado/ 3-Alerta/ 4-Mensagem
                                     ,pr_cdmensagem     IN NUMBER   DEFAULT NULL -- Codigo do Log
                                     ,pr_dsmensagem     IN VARCHAR2 DEFAULT NULL -- Descrição do Log
                                     ,pr_cdprograma     IN VARCHAR2 DEFAULT 'PAGA0001'
                                     ,pr_tpexecucao     IN NUMBER DEFAULT 0 -- 0-Outro/ 1-Batch/ 2-Job/ 3-Online
                                     ,pr_cdcriticidade  IN tbgen_prglog_ocorrencia.cdcriticidade%type DEFAULT 2  -- Nivel criticidade (0-Baixa/ 1-Media/ 2-Alta/ 3-Critica)
                                      )
  IS
    /* ..........................................................................

      Programa : pc_controla_log_programa        
      Sistema  : Rotinas Pagamento
      Sigla    : PAGA
      Autor    : Belli
      Data     : 15/12/2017                  Ultima atualizacao: 15/12/2017

      Dados referentes ao programa:

       Frequencia: Sempre que for chamado
       Objetivo  : Controla Controla log em banco de dados - Chamado 779415  
    */
    
    vr_idprglog           tbgen_prglog.idprglog%TYPE := 0;
  BEGIN         
    --> Geração de log                                
    CECRED.pc_log_programa(  pr_dstiplog      => pr_dstiplog,
                             pr_cdprograma    => pr_cdprograma,
                             pr_cdcooper      => pr_cdcooper, 
                             pr_tpexecucao    => pr_tpexecucao,
                             pr_tpocorrencia  => pr_tpocorrencia,
                             pr_cdmensagem    => pr_cdmensagem,
                             pr_dsmensagem    => pr_dsmensagem,
                             pr_idprglog      => vr_idprglog,
                             pr_cdcriticidade => NVL(pr_cdcriticidade,2)
                             );
  EXCEPTION
    -- Ajuste mensagem de erro - 15/12/2017 - Chamado 779415
    -- Disparadores: paga0001.pc_InternetBank23
    --               paga0001.pc_solicita_crapdda_prog
    --               paga0001.pc_gera_relatorio
    --               paga0001.pc_executa_transf_intercoop - Também Log Interno
    --               paga0001.pc_executa_transferencia
    --               paga0001.pc_debita_agendto_transf - Interno Log
    --               paga0001.pc_verifica_titulo
    --               paga0001.pc_verif_dias_toler_sicredi
    --               paga0001.pc_paga_convenio
    --               paga0001.pc_paga_titulo
    --               paga0001.pc_debita_agendto_pagto - Interno Log
    --               paga0001.pc_atualiza_trans_nao_efetiv
    --               paga0001.pc_baixa_epr_titulo
    --               paga0001.pc_processa_liquidacao
    --               paga0001.pc_prep_remessa_banco 
    --               paga0001.pc_cria_tab_remessa
    --               paga0001.pc_proc_liquid_apos_baixa
    --               paga0001.pc_gera_arq_cooperado
    --               paga0001.pc_efetua_lancto_tarifas_lat
    --               paga0001.pc_processa_crapdda
    --               paga0001.pc_valores_a_creditar 
    --               paga0001.pc_PAGA0001_obtem_agen_deb
    --               paga0001.pc_PAGA0001_efetua_debitos
    WHEN OTHERS THEN
      -- No caso de erro de programa gravar tabela especifica de log  
      CECRED.pc_internal_exception (pr_cdcooper => pr_cdcooper);                                                             
  END pc_controla_log_programa;
    
  /* Procedure para cancelar agendamentos pendentes apos termino do ciclo de pagamento dos agentamentos */
  PROCEDURE pc_PAGA0001_cancela_debitos (pr_cdcooper IN crapcop.cdcooper%TYPE
                                        ,pr_dtmvtopg  IN crapdat.dtmvtolt%TYPE --> Data Pagamento
                                        ,pr_cdcritic OUT INTEGER               --> Codigo da Critica
                                        ,pr_dscritic OUT VARCHAR2) IS          --> Descricao da critica
    -- ..........................................................................
    --  Programa : pc_PAGA0001_cancela_debitos
    --  Sistema  : Rotinas Internet
    --  Sigla    : CRED
    --  Autor    : Andre (MoutS)
    --  Data     : Abril/2019                  Ultima atualizacao: 30/04/2019
    --
    --  Dados referentes ao programa:
    --
    --  Frequencia: Sempre que for chamado
    --  Objetivo  : Chamar a procedure pc_cancela_debitos pelo Progress
    --
    --  Alteracoes: 
    -- ..........................................................................
  BEGIN
    DECLARE
      --Variaveis de Erro
      vr_cdcritic crapcri.cdcritic%TYPE;
      vr_dscritic VARCHAR2(4000);
      
      -- Variaveis para verificao termino ciclo de pagamentos
      vr_flultexe INTEGER;
      vr_qtdexec  INTEGER;
      
      -- Envio de email
      vr_texto_email     varchar2(4000); 
      vr_endereco_email  crapprm.dsvlrprm%TYPE;

      --Variavel para arquivo de dados
      vr_input_file utl_file.file_type;
      
      -- Dados do arquivo anexo email
      vr_nom_direto   VARCHAR2(400);
      vr_nom_anexo    VARCHAR2(500);
      
      vr_dtultexec     DATE;
      -- Tratamento de erros
      vr_exc_saida EXCEPTION;

      rw_crapdat BTCH0001.cr_crapdat%ROWTYPE;
      
      --Armazenar a temptable ordenada
      vr_tab_agendto typ_tab_agendto;
      
      -- Cursor do lançamento automático
      CURSOR cr_craplau ( pr_progress_recid IN craplau.progress_recid%TYPE) IS
        SELECT craplau.cdcooper
               ,craplau.cdagenci
               ,craplau.dtmvtopg
               ,craplau.cdtiptra
               ,craplau.vllanaut
               ,craplau.dttransa
               ,craplau.nrdocmto
               ,craplau.dslindig
               ,craplau.dsorigem
               ,craplau.idseqttl
               ,craplau.nrdconta
               ,craplau.dscedent
               ,craplau.hrtransa
               ,craplau.cdhistor
               ,craplau.cdseqtel
               ,craphis.cdhistor||'-'||craphis.dshistor dshistor
               ,craplau.nrseqagp
               ,craplau.dtmvtolt
               ,craplau.nrseqdig
               ,craplau.ROWID
               ,craplau.progress_recid
               ,craplau.nrcrcard
               ,craplau.dscodbar    
               ,craplau.cdempres     
               ,craplau.idlancto
               ,crapass.nrctacns
               ,crapass.cdagenci cdagenci_ass
        FROM   craplau,
               craphis,
               crapass
        WHERE craplau.cdcooper = craphis.cdcooper
          AND craplau.cdhistor = craphis.cdhistor
          AND crapass.cdcooper = craplau.cdcooper
          AND crapass.nrdconta = craplau.nrdconta
          AND craplau.progress_recid = pr_progress_recid;
          rw_craplau cr_craplau%ROWTYPE;
      
      vr_index_agendto VARCHAR2(300);

      CURSOR cr_crapcop (pr_cdcooper IN crapcop.cdcooper%TYPE) IS
        SELECT crapcop.cdcooper
              ,crapcop.nmrescop
              ,crapcop.cdagesic
          FROM crapcop
         WHERE crapcop.cdcooper = pr_cdcooper;
      rw_crapcop cr_crapcop%ROWTYPE;
      
      -- Cadastro de horas de execucao dos programas
      CURSOR cr_craphec(pr_cdcooper IN craphec.cdcooper%TYPE,
                        pr_dtmvtopg IN DATE) IS
        SELECT to_date(to_char(pr_dtmvtopg,'ddmmyyyy')||to_char(to_date(case when nvl(craphec.hriniexe,0) > 86000 then 0 else craphec.hriniexe end, 'sssss'), 'hh24:mi'),'ddmmyyyyhh24:mi') dtultexec
          FROM craphec
         WHERE craphec.cdcooper = pr_cdcooper
           AND UPPER(craphec.dsprogra) = UPPER('TAA E INTERNET');
      rw_craphec cr_craphec%ROWTYPE;

    BEGIN
      -- Inclui nome do modulo logado 
      GENE0001.pc_set_modulo(pr_module => NULL ,pr_action => 'PAGA0001.pc_PAGA0001_cancela_debitos');

      vr_nom_direto := gene0001.fn_diretorio(pr_tpdireto => 'C' -- /usr/coop
                                            ,pr_cdcooper => pr_cdcooper 
                                            ,pr_nmsubdir => '/salvar'); --> Utilizaremos o salvar
      vr_nom_anexo := 'DEBNET_CANC_' || to_char(pr_dtmvtopg, 'RRRRMMDD') || '.csv';

      OPEN cr_crapcop (pr_cdcooper => pr_cdcooper);
      FETCH cr_crapcop INTO rw_crapcop;
      CLOSE cr_crapcop;  
      
      -- Verifica se a data esta cadastrada
      OPEN BTCH0001.cr_crapdat(pr_cdcooper => rw_crapcop.cdcooper);
      FETCH BTCH0001.cr_crapdat INTO rw_crapdat;
      -- Se não encontrar
      IF BTCH0001.cr_crapdat%NOTFOUND THEN
        -- Fechar o cursor pois haverá raise
        CLOSE BTCH0001.cr_crapdat;
        -- Montar mensagem de critica
        vr_cdcritic := 1;
        RAISE vr_exc_saida;
      ELSE
        -- Apenas fechar o cursor
        CLOSE BTCH0001.cr_crapdat;
      END IF;
        
      OPEN cr_craphec (pr_cdcooper => rw_crapcop.cdcooper,
                       pr_dtmvtopg => pr_dtmvtopg);
      FETCH cr_craphec INTO rw_craphec;
      CLOSE cr_craphec;
      vr_dtultexec := rw_craphec.dtultexec;
      IF vr_dtultexec IS NULL THEN
         vr_dscritic := 'Horario da ultima execucao DEBNET nao encontrado.';
         RAISE vr_exc_saida;
      END IF;
        
      IF (rw_crapdat.dtmvtolt = pr_dtmvtopg) AND (SYSDATE > vr_dtultexec) THEN
        
        -- Carregar as informações dos agendamentos da cooperativa
        PAGA0001.pc_obtem_agend_debitos(pr_cdcooper    => rw_crapcop.cdcooper,
                                        pr_dtmvtopg    => pr_dtmvtopg,
                                        pr_inproces    => 0,
                                        pr_cdprogra    => 'DEBNET',
                                        pr_tab_agendto => vr_tab_agendto,
                                        pr_cdcritic    => vr_cdcritic,
                                        pr_dscritic    => vr_dscritic);
            
        -- Se retornou alguma critica
        IF vr_cdcritic <> 0 OR TRIM(vr_dscritic) IS NOT NULL THEN
          RAISE vr_exc_saida;
        END IF;
      
        vr_index_agendto:= vr_tab_agendto.FIRST;
        WHILE vr_index_agendto IS NOT NULL LOOP
          --Inicializar variavel erro
          vr_cdcritic:= NULL;
          vr_dscritic:= NULL;
              
          OPEN cr_craplau (pr_progress_recid  => vr_tab_agendto(vr_index_agendto).prorecid);
          FETCH cr_craplau INTO rw_craplau;
          IF cr_craplau%FOUND THEN
            CLOSE cr_craplau;

            -- Verificar se já abrimos o arquivo 
            IF NOT utl_file.IS_OPEN(vr_input_file) THEN
              -- Tenta abrir o arquivo de dados em modo gravacao
              gene0001.pc_abre_arquivo(pr_nmdireto => vr_nom_direto  --> Diretório do arquivo
                                      ,pr_nmarquiv => vr_nom_anexo   --> Nome do arquivo
                                      ,pr_tipabert => 'W'            --> Modo de abertura (R,W,A)
                                      ,pr_utlfileh => vr_input_file  --> Handle do arquivo aberto
                                      ,pr_des_erro => vr_dscritic);  --> Erro

              IF vr_dscritic IS NOT NULL THEN
                 -- Levantar Excecao
                 RAISE vr_exc_saida;
              END IF;

              -- Escrever o cabecalho no arquivo de anexo do email
              gene0001.pc_escr_linha_arquivo(pr_utlfileh  => vr_input_file             --> Handle do arquivo aberto
                                            ,pr_des_text  => 'COOPERATIVA;CONTA;' ||
                                                             'HISTORICO;NRDOCTO;'||
                                                             'VALOR;SEQTEL');  --> Texto para escrita
            END IF;

             --Se for TED
             IF vr_tab_agendto(vr_index_agendto).cdtiptra = 4 THEN /* TED */
                 -- TED não cancela
                 CONTINUE;
             --Se for transferencia
             ELSIF vr_tab_agendto(vr_index_agendto).dsorigem = 'DEBAUT' THEN
               -- Executar rotina de debito de convenios nossos (CECRED)
               -- *Débito automático: realizar o cancelamento e inserir os lançamentos com a crítica de "saldo insuficiente" nos arquivos de retorno aos convênios
               -- Gerar registros na crapndb para devolucao de debitos automaticos
              CONV0001.pc_gerandb(pr_cdcooper => rw_craplau.cdcooper -- CÓDIGO DA COOPERATIVA
                                 ,pr_cdhistor => rw_craplau.cdhistor -- CÓDIGO DO HISTÓRICO
                                 ,pr_nrdconta => rw_craplau.nrdconta -- NUMERO DA CONTA
                                 ,pr_cdrefere => rw_craplau.nrdocmto -- CÓDIGO DE REFERÊNCIA
                                 ,pr_vllanaut => rw_craplau.vllanaut -- VALOR LANCAMENTO
                                 ,pr_cdseqtel => rw_craplau.cdseqtel -- CÓDIGO SEQUENCIAL
                                 ,pr_nrdocmto => rw_craplau.nrdocmto         -- NÚMERO DO DOCUMENTO
                                 ,pr_cdagesic => rw_crapcop.cdagesic -- AGÊNCIA SICREDI
                                 ,pr_nrctacns => rw_craplau.nrctacns -- CONTA DO CONSÓRCIO
                                 ,pr_cdagenci => rw_craplau.cdagenci_ass -- CODIGO DO PA
                                 ,pr_cdempres => rw_craplau.cdempres -- CODIGO EMPRESA SICREDI
                                 ,pr_idlancto => rw_craplau.idlancto -- CÓDIGO DO LANCAMENTO
                                 ,pr_codcriti => 717 -- CÓDIGO DO ERRO INSUFICIENCIA DE SALDO
                                 ,pr_cdcritic => vr_cdcritic -- CÓDIGO DO ERRO
                                 ,pr_dscritic => vr_dscritic); -- DESCRICAO DO ERRO
                  
              -- VERIFICA SE HOUVE ERRO NA PROCEDURE PC_GERANDB
              IF nvl(vr_cdcritic, 0) > 0 OR TRIM(vr_dscritic) IS NOT NULL THEN
                RAISE vr_exc_saida;
              END IF;
                  
              -- Inclui nome do modulo logado
              GENE0001.pc_set_modulo(pr_module => NULL ,pr_action => 'PAGA0001.pc_PAGA0001_cancela_debitos');

             END IF;
           
            BEGIN
              -- Atualiza registros de lancamentos automaticos
              UPDATE craplau
                 SET craplau.insitlau = 4
                    ,craplau.dtdebito = pr_dtmvtopg
                    ,craplau.cdcritic = 717
               WHERE craplau.rowid = rw_craplau.rowid;
              -- Verifica se houve problema na atualização do registro
            EXCEPTION
              WHEN OTHERS THEN
                vr_cdcritic := 1035;
                vr_dscritic := gene0001.fn_busca_critica(vr_cdcritic)||'craplau: '||
                            'insitlau:3' ||
                            ', dtdebito:'||pr_dtmvtopg||
                            ', cdcritic:'||NVL(vr_cdcritic, 0)||
                            ' com rowid:'||rw_craplau.rowid||
                            '. '||sqlerrm;

                -- No caso de erro de programa gravar tabela especifica de log  
                CECRED.pc_internal_exception;                                                             
                RAISE vr_exc_saida;
            END;
                    
            -- Escrever o cabecalho no arquivo
            gene0001.pc_escr_linha_arquivo(pr_utlfileh  => vr_input_file             --> Handle do arquivo aberto
                                          ,pr_des_text  => rw_crapcop.cdcooper || ';' ||
                                                           GENE0002.fn_mask_conta(rw_craplau.nrdconta) || ';' ||
                                                           rw_craplau.dshistor || ';' ||
                                                           rw_craplau.nrdocmto || ';' ||
                                                           to_char(rw_craplau.vllanaut,'999G999G999G990D00','NLS_NUMERIC_CHARACTERS='',.''') || ';' ||
                                                           rw_craplau.cdseqtel);  --> Texto para escrita

         ELSE
           CLOSE cr_craplau; 
         END IF;
              
          --Buscar o proximo registro do vetor
          vr_index_agendto:= vr_tab_agendto.NEXT(vr_index_agendto);
        END LOOP; -- vr_tab_agendto
      END IF; -- dtmvtolt = 

      IF utl_file.IS_OPEN(vr_input_file) THEN
        gene0001.pc_fecha_arquivo(pr_utlfileh => vr_input_file); --> Handle do arquivo aberto;
      END IF;
                        
      vr_endereco_email := GENE0001.fn_param_sistema(pr_nmsistem => 'CRED'
                                                    ,pr_cdcooper => 0
                                                    ,pr_cdacesso => 'EMAIL_CANC_DEBSIC');
                
      IF gene0001.fn_exis_arquivo(vr_nom_direto || '/' || vr_nom_anexo) AND (trim(vr_endereco_email) IS NOT NULL) THEN
          vr_texto_email:= 'Ocorreram lançamentos DEBNET pendentes apos fechamento do movimento.<br> '||
                           'Cooperativa: '|| pr_cdcooper ||'.<br> '||
                           'Data do Mês: '|| pr_dtmvtopg;
                                   
          -- Comando para enviar e-mail para a Sustentação e convênios
          GENE0003.pc_solicita_email(pr_cdcooper        => pr_cdcooper --> Cooperativa conectada
                                    ,pr_cdprogra        => 'pc_PAGA0001_cancela_debitos' --> Programa conectado
                                    ,pr_des_destino     => vr_endereco_email --> Um ou mais detinatários separados por ';' ou ','
                                    ,pr_des_assunto     => 'Acompanhamento Debitos automaticos' --> Assunto do e-mail
                                    ,pr_des_corpo       => vr_texto_email --> Corpo (conteudo) do e-mail
                                    ,pr_des_anexo       => vr_nom_direto || '/' || vr_nom_anexo --> Um ou mais anexos separados por ';' ou ','
                                    ,pr_flg_remove_anex => 'S' --> Remover os anexos passados
                                    ,pr_flg_log_batch   => 'N' --> Incluir no log a informação do anexo?
                                    ,pr_flg_enviar      => 'N' --> Enviar o e-mail na hora
                                    ,pr_des_erro        => vr_dscritic);   
                                           
          -- Se retornou alguma critica
          IF vr_cdcritic <> 0 OR TRIM(vr_dscritic) IS NOT NULL THEN
            --esta exception não grava log
            RAISE vr_exc_saida;
          END IF;

      END IF; 
      
      -- Retira nome do modulo logado
      GENE0001.pc_set_modulo(pr_module => NULL ,pr_action => NULL);
    EXCEPTION
      WHEN vr_exc_saida THEN
        IF vr_cdcritic <> 0 AND TRIM(vr_dscritic) IS NULL THEN
          vr_dscritic := gene0001.fn_busca_critica(vr_cdcritic);
        END IF;

        pr_cdcritic := vr_cdcritic;
        pr_dscritic := vr_dscritic;

        --Grava tabela de log
        pc_controla_log_programa(pr_cdcooper      => 3
                                ,pr_dstiplog      => 'E' -- Tipo de Log - E = erro
                                ,pr_tpocorrencia  => 1   -- 1-Erro de negocio
                                ,pr_cdcriticidade => 1
                                ,pr_cdmensagem    => nvl(pr_cdcritic,0)  -- Codigo do Log
                                ,pr_dsmensagem    => pr_dscritic                                                                                            
                                 );  

      WHEN OTHERS THEN
        -- Erro
        pr_cdcritic := 9999;
        pr_dscritic := gene0001.fn_busca_critica(pr_cdcritic)||'PAGA0001.pc_PAGA0001_cancela_debitos.'||sqlerrm;

        -- No caso de erro de programa gravar tabela especifica de log  
        CECRED.pc_internal_exception;                                                             

        --Grava tabela de log
        pc_controla_log_programa(pr_cdcooper      => 3
                                ,pr_dstiplog      => 'E' -- Tipo de Log - E = erro
                                ,pr_tpocorrencia  => 2  
                                ,pr_cdcriticidade => 2
                                ,pr_cdmensagem    => nvl(pr_cdcritic,0)  -- Codigo do Log
                                ,pr_dsmensagem    => pr_dscritic                                                                                            
                                 );                      
    END;
  END pc_PAGA0001_cancela_debitos;     
       
END PAGA0001;
/
